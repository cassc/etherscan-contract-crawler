{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Pausable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ninterface IPlanetFinance {\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n\r\n    function pendingGAMMA(uint256 _pid, address _user) external view returns (uint256);\r\n    \r\n    function stakedWantTokens(uint256 _pid, address _user) external view returns (uint256);\r\n\r\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\r\n\r\n    function poolInfo(uint256 _pid) external view returns (address, uint256, uint256, uint256, address);\r\n\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n}\r\n\r\ninterface Gtoken {\r\n    \r\n    function underlying() external view returns(address);\r\n\r\n    function mint(uint mintAmount) external returns (uint);\r\n\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n\r\n}\r\n\r\ninterface strat {\r\n    function earnGammaProfits() external ;\r\n}\r\n\r\ninterface GammaInfinity {\r\n    function depositAuthorized(address user,uint amount) external;\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n            unchecked {\r\n                _approve(sender, _msgSender(), currentAllowance - amount);\r\n            }\r\n        }\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface GammaTroller {\r\n    function claimGamma(address[] memory holders,address[] memory gTokens,bool borrowers,bool suppliers) external ;\r\n}\r\n\r\n\r\ncontract AquaInfinityVault is Pausable,Ownable,ERC20 {\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public pid;\r\n\r\n    uint256 public constant initialExchangeRate = 1e8;\r\n\r\n    uint256 public feeRewards = 0;\r\n\r\n    uint256 public feeRewardsAccruedPerWeek;\r\n    uint256 public feeRewardsAccrued;\r\n\r\n   /*\r\n    * Fee Variables:- \r\n    */\r\n\r\n    uint256 public depositFee = 10; // 0.1%;\r\n\r\n    uint256 public instantWithdrawFee = 500; // 5%;\r\n\r\n    uint256 public normalWithdrawFee = 100; // 1%;\r\n\r\n   /*\r\n    * Fee Variables Max Values:- \r\n    */\r\n\r\n    uint256 public immutable depositFeeMax = 20; //0.2%\r\n\r\n    uint256 public immutable instantWithdrawFeeMax = 1000; //10%\r\n\r\n    uint256 public immutable normalWithdrawFeeMax = 200; //2%\r\n\r\n   /*\r\n    * Min Withdraw Time:- \r\n    */\r\n    \r\n    uint256 public minTimeToWithdraw = 21 days;\r\n\r\n   /*\r\n    * Min Withdraw Time Max Value:- \r\n    */\r\n    \r\n\r\n    uint256 public minTimeToWithdrawUL = 365 days;\r\n\r\n    uint256 public accGAMMAPerShare;\r\n\r\n   /*\r\n    * Addresses where the fee will go:- \r\n    */\r\n\r\n    address public depositFeeAddress;\r\n\r\n    address public withdrawFeeAddress;\r\n\r\n    address public feeRewardsUpdater;\r\n\r\n    address public gammaInfinityVault;\r\n\r\n    address public gamma;\r\n\r\n    IERC20 public gToken;\r\n    \r\n    IPlanetFinance public immutable planetFinance;\r\n\r\n    GammaTroller public gammaTroller;\r\n\r\n    struct UserInfo {\r\n        uint256 iTokenToBeUnstaked; // keep track how much amount of iToken user has to redeem for gToken\r\n        uint256 unstakeStartTime;  //keep track of timestamp at which unstake function is clicked\r\n        uint256 minTimeToWithdraw; //keep track of minTimeToWithdraw at which unstake function is clicked\r\n        uint256 gTokenToBeUnstaked; //store gToken amount user has given for unstaking\r\n        uint256 rewardDebt;\r\n        uint256 unstakingRewardDebt;\r\n    }\r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    event Deposit(address indexed sender, uint256 amount, uint256 lastDepositedTime);\r\n    event Withdraw(address indexed sender, uint256 amount);\r\n    event StartUnstake(address indexed sender,uint amount);\r\n    event StopUnstake(address indexed sender);\r\n    event minTimeToWithdrawChanged(uint256 oldMinTimeToWithdraw,uint256 newMinTimeToWithdraw);\r\n    event SetSettings(uint256 normalWithdrawFee,uint256 instantWithdrawFee,uint256 depositFee);\r\n    event DepositFeeAddressChanged(address oldDepositFeeAddress,address newDepositFeeAddress);\r\n    event WithdrawFeeAddressChanged(address oldWithdrawFeeAddress,address newWithdrawFeeAddress);\r\n    event GammaInfinityVaultAddressChanged(address oldGammaInfinityVault,address newGammaInfinityVault);\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    constructor(string memory name,\t\r\n                string memory symbol,\t\r\n                address _gToken,\t\r\n                address _depositFeeAddress,\t\r\n                address _withdrawFeeAddress,\t\r\n                address _gamma,\t\r\n                address _planetFinance,\t\r\n                uint256 _pid,\r\n                GammaTroller _gammaTroller) ERC20(name,symbol) {\r\n        \r\n        gToken = IERC20(_gToken);\r\n        depositFeeAddress = _depositFeeAddress;\r\n        withdrawFeeAddress = _withdrawFeeAddress;\r\n        planetFinance = IPlanetFinance(_planetFinance);\r\n        gamma = _gamma;\r\n        pid = _pid;\r\n        gammaTroller =_gammaTroller;\r\n\r\n        gToken.safeApprove(_planetFinance, type(uint256).max);\r\n\r\n        emit DepositFeeAddressChanged(address(0),depositFeeAddress);\r\n        emit WithdrawFeeAddressChanged(address(0),withdrawFeeAddress);\r\n    }\r\n\r\n    function accrue_rewards_when_transfer(address userAddress) internal returns(uint256 old_itoken_bal){\r\n        \r\n        uint256 pending = 0;\r\n\r\n        UserInfo memory user = userInfo[userAddress];\r\n            \r\n        old_itoken_bal = balanceOf(userAddress) - user.iTokenToBeUnstaked;\r\n        uint256 pendingUptoNow = (old_itoken_bal * accGAMMAPerShare) / (1e12);\r\n        if(pendingUptoNow > user.rewardDebt)\r\n            pending = (pendingUptoNow - user.rewardDebt);\r\n\r\n        if (pending > 0) {\r\n            GammaInfinity(gammaInfinityVault).depositAuthorized(userAddress, pending);\r\n        }\r\n    }\r\n\r\n    function check_unstaking_bal_when_transfer(address senderAddress,uint256 amount) internal {\r\n\r\n        UserInfo storage user = userInfo[senderAddress];\r\n        \r\n        if(user.iTokenToBeUnstaked > 0 && balanceOf(senderAddress) >= user.iTokenToBeUnstaked) {\r\n            \r\n            //if user has some iToken in unstaking process \r\n            uint256 amount_user_can_transfer = balanceOf(senderAddress) - user.iTokenToBeUnstaked;\r\n            \r\n            if(amount > amount_user_can_transfer){\r\n                stopUnstakeProcessInternal(senderAddress);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\r\n        _update();\r\n\r\n        check_unstaking_bal_when_transfer(_msgSender(),amount);\r\n\r\n        //Tansfer both sender and recipient pending rewards to gamma infinity vault \r\n        uint256 old_token_bal_user_1 = accrue_rewards_when_transfer(_msgSender());\r\n        uint256 old_token_bal_user_2 = accrue_rewards_when_transfer(recipient);\r\n\r\n        //Transfer given iToken Amount from sender to recipient wallet\r\n        _transfer(_msgSender(), recipient, amount);\r\n\r\n        //Change reward debt of both sender and recipient\r\n        UserInfo storage user1 = userInfo[_msgSender()];\r\n        user1.rewardDebt = (((old_token_bal_user_1 - amount) * accGAMMAPerShare) / (1e12));\r\n\r\n        UserInfo storage user2 = userInfo[recipient];\r\n        user2.rewardDebt = (((old_token_bal_user_2 + amount) * accGAMMAPerShare) / (1e12));\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender,address recipient,uint256 amount) public virtual override returns (bool) {\r\n        \r\n        uint256 currentAllowance = allowance(sender,_msgSender());\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n            unchecked {\r\n                _approve(sender, _msgSender(), currentAllowance - amount);\r\n            }\r\n        }\r\n\r\n        _update();\r\n\r\n        check_unstaking_bal_when_transfer(sender,amount);\r\n\r\n        //Tansfer both sender and recipient pending rewards to gamma infinity vault \r\n        uint256 old_token_bal_user_1 = accrue_rewards_when_transfer(sender);\r\n        uint256 old_token_bal_user_2 = accrue_rewards_when_transfer(recipient);\r\n\r\n        //Transfer given iToken Amount from sender to recipient wallet\r\n        _transfer(sender, recipient, amount);\r\n\r\n        //Change reward debt of both sender and recipient\r\n        UserInfo storage user1 = userInfo[sender];\r\n        user1.rewardDebt = (((old_token_bal_user_1 - amount) * accGAMMAPerShare) / (1e12));\r\n\r\n        UserInfo storage user2 = userInfo[recipient];\r\n        user2.rewardDebt = (((old_token_bal_user_2 + amount) * accGAMMAPerShare) / (1e12));\r\n\r\n        return true;\r\n    }\r\n\r\n    function changeGammaInfinityVault(address _newGammaInfinityVault) external onlyOwner {\r\n        require(_newGammaInfinityVault != address(0),\"_newGammaInfinityVault should no be zero address\");\r\n        emit GammaInfinityVaultAddressChanged(gammaInfinityVault,_newGammaInfinityVault);\r\n        gammaInfinityVault = _newGammaInfinityVault;\r\n        IERC20(gamma).safeIncreaseAllowance(gammaInfinityVault,type(uint256).max);\r\n    }\r\n\r\n    function changeFeeRewardsUpdater(address _newFeeRewardsUpdater) external onlyOwner {\r\n        feeRewardsUpdater = _newFeeRewardsUpdater;\r\n    }\r\n\r\n    function updateFeeRewards() external {\r\n        require(msg.sender == feeRewardsUpdater,\"Caller is not fee rewards updater\");\r\n        if(feeRewardsAccrued > 0){\r\n            feeRewardsAccruedPerWeek = feeRewardsAccrued;\r\n            feeRewardsAccrued = 0;\r\n        }\r\n    }\r\n\r\n    function changeDepositFeeAddress(address _newDepositFeeAddress) external onlyOwner {\r\n        require(_newDepositFeeAddress != address(0),\"_newDepositFeeAddress should no be zero address\");\r\n        emit DepositFeeAddressChanged(depositFeeAddress,_newDepositFeeAddress);\r\n        depositFeeAddress = _newDepositFeeAddress;\r\n    }\r\n\r\n    function changeWithdrawFeeAddress(address _newWithdrawFeeAddress) external onlyOwner {\r\n        require(_newWithdrawFeeAddress != address(0),\"_newWithdrawFeeAddress should no be zero address\");\r\n        emit WithdrawFeeAddressChanged(withdrawFeeAddress,_newWithdrawFeeAddress);\r\n        withdrawFeeAddress = _newWithdrawFeeAddress;\r\n    }\r\n\r\n    function setSettings(uint256 _normalWithdrawFee,uint256 _instantWithdrawFee,uint256 _depositFee) external onlyOwner {\r\n        require(\r\n            _normalWithdrawFee <= normalWithdrawFeeMax,\r\n            \"_normalWithdrawFee too high\"\r\n        );\r\n        require(\r\n            _instantWithdrawFee <= instantWithdrawFeeMax,\r\n            \"_instantWithdrawFee too high\"\r\n        );\r\n        require(\r\n            _depositFee <= depositFeeMax,\r\n            \"_deposit fee too high\"\r\n        );\r\n\r\n        normalWithdrawFee = _normalWithdrawFee;\r\n        instantWithdrawFee = _instantWithdrawFee;\r\n        depositFee = _depositFee;\r\n\r\n        emit SetSettings(_normalWithdrawFee,_instantWithdrawFee,_depositFee);\r\n    }\r\n\r\n    function setMinTimeToWithdraw(uint256 newMinTimeToWithdraw) external onlyOwner{\r\n        require(newMinTimeToWithdraw <= minTimeToWithdrawUL, \"too high\");\r\n        emit minTimeToWithdrawChanged(minTimeToWithdraw, newMinTimeToWithdraw);\r\n        minTimeToWithdraw = newMinTimeToWithdraw;\r\n    }\r\n\r\n   /**\r\n    * @notice Checks if the _msgSender() is a contract or a proxy\r\n    */\r\n    modifier notContract() {\r\n        require(!_isContract(_msgSender()), \"contract not allowed\");\r\n        require(_msgSender() == tx.origin, \"proxy contract not allowed\");\r\n        _;\r\n    }\r\n\r\n    function available() public view returns (uint256) {\r\n        return gToken.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the total underlying tokens\r\n     * @dev It includes tokens held in Main Farm\r\n     */\r\n    function balanceOfGtoken() public view returns (uint256) {\r\n        (uint256 amount) = IPlanetFinance(planetFinance).stakedWantTokens(pid, address(this));\r\n        return gToken.balanceOf(address(this)) + (amount);\r\n    }\r\n\r\n    /**\t\r\n    * @notice Calculates the exchange rate from the gToken to the iToken\t\r\n    * @return (calculated exchange rate scaled by 1e18)\t\r\n    */\t\r\n    function iTokenExchangeRate() public view returns (uint) {\t\r\n        uint256 _totalSupply = totalSupply();\t\r\n        if (_totalSupply == 0) {\t\r\n           /*\t\r\n            * If there are no iTokens minted:\t\r\n            *  exchangeRate = initialExchangeRate\t\r\n            */\t\r\n            return (initialExchangeRate); //1e8\t\r\n        } else {\t\r\n           /*\t\r\n            * Otherwise:\t\r\n            *  exchangeRate = (gToken Locked * 1e18) / totalSupply of iTokens\t\r\n            */\t\r\n            uint totalgToken = balanceOfGtoken();\t\r\n            uint exchangeRate = (totalgToken * 1e18) / _totalSupply;\t\r\n            return exchangeRate;\t\r\n        }\t\r\n    }\r\n\r\n    \r\n   /**\r\n    * @notice Claim Pending GAMMA rewards from green planet\r\n    */\r\n    function _updateGammaTrollerRewards() external  {\r\n\r\n        if(totalSupply() == 0)\r\n        return;\r\n\r\n        address[] memory holders = new address[](1);\r\n        holders[0] = address(this);\r\n\r\n        address[] memory gTokens = new address[](1);\r\n        gTokens[0] = address(gToken);\r\n\r\n        uint gamma_bal_before = IERC20(gamma).balanceOf(address(this));\r\n        gammaTroller.claimGamma(holders,gTokens, false, true);\r\n        uint gamma_bal_after = IERC20(gamma).balanceOf(address(this));\r\n        uint gamma_bal_diff = gamma_bal_after - gamma_bal_before; \r\n        accGAMMAPerShare = accGAMMAPerShare + (\r\n        (gamma_bal_diff * 1e12) / totalSupply());\r\n\r\n    }\r\n\r\n   /**\r\n    * @notice _update updates accGAMMAPerShares value by claiming rewards from farm and strategy\r\n    */\r\n    function _update() internal {\r\n\r\n        if(totalSupply() == 0)\r\n        return;\r\n        \r\n        (,,,,address strat_address) = IPlanetFinance(planetFinance).poolInfo(pid);\r\n        uint gamma_bal_before = IERC20(gamma).balanceOf(address(this));\r\n        IPlanetFinance(planetFinance).deposit(pid, 0);\r\n        strat(strat_address).earnGammaProfits(); //claim gamma rewards from farm strategy which will claim it from green planet\r\n        uint gamma_bal_after = IERC20(gamma).balanceOf(address(this));\r\n        uint gamma_bal_diff = gamma_bal_after - gamma_bal_before; \r\n        accGAMMAPerShare = accGAMMAPerShare + (\r\n        (gamma_bal_diff * 1e12) / totalSupply());\r\n        \r\n    }\r\n\r\n    // View function to see pending GAMMA on frontend.\r\n    //we have to pass green_planet_pending_rewards from frontend\r\n    function pendingGAMMA(address _user,uint256 green_planet_pending_rewards)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint farm_rewards = IPlanetFinance(planetFinance).pendingGAMMA(pid, address(this));\r\n        uint gamma_rewards = farm_rewards + green_planet_pending_rewards;\r\n        \r\n        UserInfo memory user = userInfo[_user];\r\n        uint temp_gamma_per_share = totalSupply() != 0 ?accGAMMAPerShare + (\r\n        (gamma_rewards * 1e12) / totalSupply()) : 0;\r\n        return ( ((balanceOf(_user) - user.iTokenToBeUnstaked) * temp_gamma_per_share) / 1e12 - (user.rewardDebt));\r\n    }\r\n\r\n    /**\r\n     * @notice Deposits funds into the this contract\r\n     * @dev Only possible when contract not paused.\r\n     * @param _amount: number of tokens to deposit (in gToken)\r\n     */\r\n    function deposit(uint256 _amount) external whenNotPaused notContract {\r\n\r\n        // claim pending GAMMA rewards from Farm\r\n        _update(); \r\n\r\n        UserInfo storage user = userInfo[_msgSender()];\r\n\r\n        uint256 old_itoken_bal;\r\n        \r\n        if(balanceOf(_msgSender()) > 0) {\r\n\r\n           /*\r\n            * If user shares greater than 0 then check if pending is greater than zero \r\n            */\r\n\r\n            uint256 pending = 0;\r\n            \r\n            old_itoken_bal = balanceOf(_msgSender()) - user.iTokenToBeUnstaked;\r\n            uint256 pendingUptoNow = (old_itoken_bal * accGAMMAPerShare) / (1e12);\r\n            if(pendingUptoNow > user.rewardDebt)\r\n                pending = (pendingUptoNow - user.rewardDebt);\r\n            \r\n            if (pending > 0) {\r\n                GammaInfinity(gammaInfinityVault).depositAuthorized(_msgSender(), pending);\r\n            }\r\n        }\r\n\r\n        uint256 mintAmount;\r\n        \r\n        if(_amount > 0) {\r\n            \r\n            uint initial_exchange = iTokenExchangeRate();\r\n\r\n            gToken.safeTransferFrom(_msgSender(), address(this), _amount);\r\n            uint gTokenFee = (_amount * depositFee) / 10000;\r\n            gToken.safeTransfer(depositFeeAddress,gTokenFee);\r\n            _amount = _amount - gTokenFee;\r\n\r\n            uint gamma_bal_before = IERC20(gamma).balanceOf(address(this));\r\n            IPlanetFinance(planetFinance).deposit(pid, _amount);\r\n            uint gamma_bal_after = IERC20(gamma).balanceOf(address(this));\r\n            uint gamma_bal_diff = gamma_bal_after - gamma_bal_before; \r\n            \r\n            if(totalSupply() != 0)\r\n            accGAMMAPerShare = accGAMMAPerShare + (\r\n            (gamma_bal_diff * 1e12) / totalSupply());\r\n\r\n            mintAmount = (_amount * 1e18) / initial_exchange;\r\n            _mint(_msgSender(),mintAmount);\r\n\r\n            emit Deposit(_msgSender(), _amount, block.timestamp);\r\n        }\r\n\r\n        user.rewardDebt = (((balanceOf(_msgSender()) - user.iTokenToBeUnstaked) * accGAMMAPerShare) / (1e12));\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice Unstake Your given gToken Instantly\r\n     * @param unstakegTokenAmount: number of gToken call want to unstake instantly\r\n     */\r\n    function unstakeInstantly(uint256 unstakegTokenAmount) external notContract{\r\n\r\n        // claim pending GAMMA rewards from Farm\r\n        _update(); \r\n\r\n        UserInfo storage user = userInfo[_msgSender()];\r\n\r\n        uint useriTokenBalance = balanceOf(_msgSender());\r\n\r\n        require(unstakegTokenAmount > 0,\"Unstake Amount should be greater than 0\");\r\n\r\n        uint256 pending = 0;\r\n\r\n        uint256 old_itoken_bal = balanceOf(_msgSender()) - user.iTokenToBeUnstaked;\r\n        uint256 pendingUptoNow = (old_itoken_bal * accGAMMAPerShare) / (1e12);\r\n        if(pendingUptoNow > user.rewardDebt)\r\n            pending = (pendingUptoNow - user.rewardDebt);\r\n            \r\n        if (pending > 0) {\r\n            GammaInfinity(gammaInfinityVault).depositAuthorized(_msgSender(), pending);\r\n        }\r\n\r\n        uint256 bal = available();\r\n        uint gamma_received_at_withdraw = 0;\r\n\r\n        if (bal < unstakegTokenAmount) {\r\n            uint256 balWithdraw = unstakegTokenAmount - bal;\r\n\r\n            uint gamma_bal_before = IERC20(gamma).balanceOf(address(this));\r\n            IPlanetFinance(planetFinance).withdraw(pid, balWithdraw);\r\n            uint gamma_bal_after = IERC20(gamma).balanceOf(address(this));\r\n            gamma_received_at_withdraw = gamma_bal_after - gamma_bal_before; \r\n\r\n            uint256 balAfter = available();\r\n            uint256 diff = balAfter - bal;\r\n            if (diff < balWithdraw) {\r\n                unstakegTokenAmount = bal + diff;\r\n            }\r\n        }\r\n\r\n        uint256 iTokenToUnstake = (unstakegTokenAmount * 1e18) / iTokenExchangeRate();\r\n\t\r\n        require(useriTokenBalance - user.iTokenToBeUnstaked >= iTokenToUnstake,\r\n        \"Unstake Amount should be greater than user can unstake more\");\r\n\r\n        _burn(_msgSender(),iTokenToUnstake);\r\n\r\n        uint gTokenFee = (unstakegTokenAmount * instantWithdrawFee) / 10000;\r\n\r\n        //transfer 50% gtokenfee to fee address\r\n        uint actualFee = gTokenFee / 2;\r\n        feeRewards += actualFee;\r\n        feeRewardsAccrued += actualFee;\r\n        \r\n        //convert actualFee gToken into underlying token and transfer it to withdraw fee address\r\n        IERC20 underlying  = IERC20(Gtoken(address(gToken)).underlying());\r\n        uint underlying_bal_before = underlying.balanceOf(address(this));\r\n        Gtoken(address(gToken)).redeem(actualFee);\r\n        uint underlying_bal_after = underlying.balanceOf(address(this));\r\n        actualFee = underlying_bal_after - underlying_bal_before;\r\n        underlying.safeTransfer(withdrawFeeAddress,actualFee);\r\n\r\n        unstakegTokenAmount -= gTokenFee;        \r\n\r\n        gToken.safeTransfer(_msgSender(),unstakegTokenAmount);\r\n\r\n        IPlanetFinance(planetFinance).deposit(pid, available());\r\n\r\n        user.rewardDebt = (((balanceOf(_msgSender()) - user.iTokenToBeUnstaked) * accGAMMAPerShare) / (1e12));\r\n\r\n\t// In the rare case of receiving rewards at the time of withdraw (this shouldn't happen as we already called _update function before this), we do not want to increase the accGAMMAPerShare before we set user rewardDebt.\r\n        if(totalSupply() != 0)\r\n        accGAMMAPerShare = accGAMMAPerShare + ((gamma_received_at_withdraw * 1e12) / totalSupply());\r\n\r\n        emit Withdraw(_msgSender(), unstakegTokenAmount);\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws from PlanetFinance Farm to Vault without caring about rewards.\r\n     * @dev EMERGENCY ONLY. Only callable by the contract owner.\r\n     */\r\n    function emergencyWithdraw() external onlyOwner {\r\n        IPlanetFinance(planetFinance).emergencyWithdraw(pid);\r\n    }\r\n\r\n    /**\r\n     * @notice Starts unstaking phase for caller for specific iToken of user\r\n     * @param unstakegTokenAmount: number of gToken given for unstake phase\r\n     */\r\n    function startUnstakeProcess(uint256 unstakegTokenAmount) external notContract{\r\n\r\n        // claim pending GAMMA rewards from Farm\r\n        _update(); \r\n\r\n        UserInfo storage user = userInfo[_msgSender()];\r\n\r\n        uint useriTokenBalance = balanceOf(_msgSender());\r\n\r\n        uint256 unstakeItokenAmount = (unstakegTokenAmount * 1e18) / iTokenExchangeRate();\r\n                 \r\n        require(unstakeItokenAmount > 0,\"!!Unstake iToken Amount should be greater than zero\");\r\n        \r\n        //iTokens user has already given for unstake\r\n        uint256 iTokenAlreadyGivenForUnstake = user.iTokenToBeUnstaked; \r\n\r\n        require(useriTokenBalance > iTokenAlreadyGivenForUnstake,\r\n        \"User iToken balance should be greater than iTokens amount already given for unstake\");\r\n\r\n        //amount of gToken user can unstake more\r\n        uint256 iTokenUserCanUnstakeMore = useriTokenBalance - iTokenAlreadyGivenForUnstake;\r\n\r\n        require(unstakeItokenAmount <= iTokenUserCanUnstakeMore,\r\n        \"unstakeItokenAmount should be less than or equal to iTokens user can unstake more\");\r\n\r\n        uint256 pending = 0;\r\n\r\n        uint256 old_itoken_bal = balanceOf(_msgSender()) - user.iTokenToBeUnstaked;\r\n        uint256 pendingUptoNow = (old_itoken_bal * accGAMMAPerShare) / (1e12);\r\n\r\n        if(pendingUptoNow > user.rewardDebt)\r\n            pending = (pendingUptoNow - user.rewardDebt);\r\n\r\n        if (pending > 0) {\r\n            GammaInfinity(gammaInfinityVault).depositAuthorized(_msgSender(), pending);\r\n        }\r\n    \r\n        //Do the main work\r\n\r\n        user.iTokenToBeUnstaked += unstakeItokenAmount;\r\n        user.unstakeStartTime = block.timestamp;\r\n        user.minTimeToWithdraw = minTimeToWithdraw;\r\n        user.gTokenToBeUnstaked += unstakegTokenAmount;\r\n\r\n        user.rewardDebt = (((balanceOf(_msgSender()) - user.iTokenToBeUnstaked) * accGAMMAPerShare) / (1e12));\r\n        user.unstakingRewardDebt += (((unstakeItokenAmount) * accGAMMAPerShare) / (1e12));\r\n        \r\n        emit StartUnstake(_msgSender(),user.iTokenToBeUnstaked);\r\n    }\r\n\r\n    \r\n    function unstakeAfterMinWithdrawTime() external notContract{\r\n\r\n        // claim pending GAMMA rewards from Farm\r\n        _update(); \r\n\r\n        UserInfo storage user = userInfo[_msgSender()];\r\n        uint totalItokensUnstaking = user.iTokenToBeUnstaked;\r\n        uint itokens = user.iTokenToBeUnstaked;\r\n        \r\n        require(itokens > 0,\"Unstake Amount should be greater than zero\");\r\n        require(user.unstakeStartTime + user.minTimeToWithdraw < block.timestamp,\r\n        \"too early\");\r\n\r\n        uint256 pending = 0;\r\n\r\n        uint256 old_itoken_bal = balanceOf(_msgSender()) - user.iTokenToBeUnstaked;\r\n        uint256 pendingUptoNow = (old_itoken_bal * accGAMMAPerShare) / (1e12);\r\n\r\n        if(pendingUptoNow > user.rewardDebt)\r\n            pending = (pendingUptoNow - user.rewardDebt);\r\n            \r\n        if (pending > 0) {\r\n            GammaInfinity(gammaInfinityVault).depositAuthorized(_msgSender(), pending);\r\n        }\r\n\r\n        uint256 currentAmount = user.gTokenToBeUnstaked;\r\n\r\n        uint256 gamma_received_at_withdraw = 0;\r\n        \r\n        uint256 bal = available();\r\n        if (bal < currentAmount) {\r\n            uint256 balWithdraw = currentAmount - bal;\r\n\r\n            uint gamma_bal_before = IERC20(gamma).balanceOf(address(this));\r\n            IPlanetFinance(planetFinance).withdraw(pid, balWithdraw);\r\n            uint gamma_bal_after = IERC20(gamma).balanceOf(address(this));\r\n            gamma_received_at_withdraw = gamma_bal_after - gamma_bal_before; \r\n            \r\n            uint256 balAfter = available();\r\n            uint256 diff = balAfter - bal;\r\n            if (diff < balWithdraw) {\r\n                currentAmount = bal + diff;\r\n            }\r\n        }\r\n        \r\n        itokens = (currentAmount * 1e18) / ((user.gTokenToBeUnstaked * 1e18) / itokens);\r\n\r\n        require(itokens <= balanceOf(_msgSender()),\"Withdraw amount exceeds balance\");\r\n\r\n        _burn(_msgSender(),itokens);\r\n\r\n        if(user.gTokenToBeUnstaked > currentAmount && user.iTokenToBeUnstaked > itokens){\r\n            user.gTokenToBeUnstaked -= currentAmount;\r\n            user.iTokenToBeUnstaked -= itokens;\r\n\t    } \r\n        else{\r\n            user.iTokenToBeUnstaked = 0;\r\n            user.gTokenToBeUnstaked = 0;\r\n            user.unstakeStartTime = 0;\r\n            user.minTimeToWithdraw = 0;\r\n        }\r\n\r\n\r\n        uint gTokenFee = (currentAmount * normalWithdrawFee) / 10000;\r\n\r\n        //transfer 50% gtokenfee to fee address\r\n        uint actualFee = gTokenFee / 2;\r\n\r\n        feeRewards += actualFee;\r\n        feeRewardsAccrued += actualFee;\r\n\r\n        IERC20 underlying  = IERC20(Gtoken(address(gToken)).underlying()); \r\n\r\n        //convert actualFee gToken into underlying token and transfer it to withdraw fee address\r\n\r\n        uint underlying_bal_before = underlying.balanceOf(address(this));\r\n        Gtoken(address(gToken)).redeem(actualFee);\r\n        uint underlying_bal_after = underlying.balanceOf(address(this));\r\n\r\n        actualFee = underlying_bal_after - underlying_bal_before;\r\n        underlying.safeTransfer(withdrawFeeAddress,actualFee);\r\n\r\n        currentAmount -= gTokenFee;        \r\n\r\n        gToken.safeTransfer(_msgSender(),currentAmount);\r\n        IPlanetFinance(planetFinance).deposit(pid, available());\r\n\r\n        user.rewardDebt = (((balanceOf(_msgSender()) - user.iTokenToBeUnstaked) * accGAMMAPerShare) / (1e12));\r\n\r\n        user.unstakingRewardDebt = (user.iTokenToBeUnstaked * ((user.unstakingRewardDebt * 1e12)/totalItokensUnstaking)) / (1e12);\r\n\r\n        if(totalSupply() != 0)\r\n            accGAMMAPerShare = accGAMMAPerShare + ((gamma_received_at_withdraw * 1e12) / totalSupply());\r\n        emit Withdraw(_msgSender(), currentAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice stops unstaking phase for caller if unstake phase is already started\r\n     */\r\n    function stopUnstakeProcess() external notContract {\r\n        stopUnstakeProcessInternal(_msgSender());\r\n    }\r\n\r\n\r\n    function stopUnstakeProcessInternal(address userAddress) internal {\r\n        UserInfo storage user = userInfo[userAddress];\r\n        require(user.iTokenToBeUnstaked > 0 , \"No itokens are given for unstaking process yet !!\");\r\n        user.iTokenToBeUnstaked = 0;\r\n        user.rewardDebt += user.unstakingRewardDebt;\r\n        user.unstakingRewardDebt = 0;\r\n        user.unstakeStartTime = 0;\r\n        user.minTimeToWithdraw = 0;\r\n        user.gTokenToBeUnstaked = 0;\r\n        emit StopUnstake(userAddress);\r\n    }\r\n    \r\n\r\n    /**\r\n    * @notice Returns given user gToken balance\r\n    * @param user: address of user for which gToken needs to be calculated\r\n    */\r\n    function getUserGtokenBal(address user) external view returns(uint256 gTokenBal) {\r\n        \r\n        uint useriTokenBalance = balanceOf(user);\r\n        gTokenBal = (useriTokenBalance * iTokenExchangeRate()) / 1e18;\r\n \r\n    }\r\n\r\n    function getUserStakingGtokenBal(address userAddress) external view returns(uint256 gTokenBal) {\r\n        \r\n        UserInfo storage user = userInfo[userAddress];\r\n        uint userStakingiTokenBalance = balanceOf(userAddress) - user.iTokenToBeUnstaked;\r\n        gTokenBal = (userStakingiTokenBalance * iTokenExchangeRate()) / 1e18;\r\n \r\n    }\r\n\r\n    function getUserGtokenBalGivenForUnstaking(address user) external view returns(uint256 gTokenBal) {\r\n        \r\n        UserInfo memory _user = userInfo[user];\r\n        gTokenBal = _user.gTokenToBeUnstaked;\r\n\r\n    }\r\n\r\n    function inCaseTokensGetStuck(address _token) external onlyOwner {\r\n        require(_token != address(gToken), \"Token cannot be same as deposit token\");\r\n        require(_token != gamma, \"Token cannot be same as gamma token\");\r\n        require(_token != gammaInfinityVault,\"Token cannot be same as iGAMMA\");\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).safeTransfer(_msgSender(), amount);\r\n    }\r\n\r\n   /**\r\n    * @notice Triggers stopped state\r\n    * @dev Only possible when contract not paused.\r\n    */\r\n    function pause() external onlyOwner whenNotPaused {\r\n        _pause();\r\n        emit Pause();\r\n    }\r\n\r\n   /**\r\n    * @notice Returns to normal state\r\n    * @dev Only possible when contract is paused.\r\n    */\r\n    function unpause() external onlyOwner whenPaused {\r\n        _unpause();\r\n        emit Unpause();\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Checks if address is a contract\r\n     * @dev It prevents contract from being targetted\r\n     */\r\n    function _isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_gToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositFeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawFeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gamma\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_planetFinance\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"contract GammaTroller\",\"name\":\"_gammaTroller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastDepositedTime\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDepositFeeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDepositFeeAddress\",\"type\":\"address\"}],\"name\":\"DepositFeeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGammaInfinityVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGammaInfinityVault\",\"type\":\"address\"}],\"name\":\"GammaInfinityVaultAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"normalWithdrawFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"instantWithdrawFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"}],\"name\":\"SetSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StartUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"StopUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldWithdrawFeeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWithdrawFeeAddress\",\"type\":\"address\"}],\"name\":\"WithdrawFeeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinTimeToWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinTimeToWithdraw\",\"type\":\"uint256\"}],\"name\":\"minTimeToWithdrawChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_updateGammaTrollerRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accGAMMAPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfGtoken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDepositFeeAddress\",\"type\":\"address\"}],\"name\":\"changeDepositFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeRewardsUpdater\",\"type\":\"address\"}],\"name\":\"changeFeeRewardsUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGammaInfinityVault\",\"type\":\"address\"}],\"name\":\"changeGammaInfinityVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWithdrawFeeAddress\",\"type\":\"address\"}],\"name\":\"changeWithdrawFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRewardsAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRewardsAccruedPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRewardsUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamma\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gammaInfinityVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gammaTroller\",\"outputs\":[{\"internalType\":\"contract GammaTroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserGtokenBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gTokenBal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserGtokenBalGivenForUnstaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gTokenBal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStakingGtokenBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gTokenBal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iTokenExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantWithdrawFeeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTimeToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTimeToWithdrawUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normalWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normalWithdrawFeeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"green_planet_pending_rewards\",\"type\":\"uint256\"}],\"name\":\"pendingGAMMA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planetFinance\",\"outputs\":[{\"internalType\":\"contract IPlanetFinance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinTimeToWithdraw\",\"type\":\"uint256\"}],\"name\":\"setMinTimeToWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_normalWithdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_instantWithdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakegTokenAmount\",\"type\":\"uint256\"}],\"name\":\"startUnstakeProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopUnstakeProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAfterMinWithdrawTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakegTokenAmount\",\"type\":\"uint256\"}],\"name\":\"unstakeInstantly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFeeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"iTokenToBeUnstaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTimeToWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gTokenToBeUnstaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakingRewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AquaInfinityVault", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000b7ed4a5af620b52022fb26035c565277035d4fd7000000000000000000000000ac88bd12c992b1adbb43183a0aa5e3fa5ae3e5ee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b3cb6d2f8f2fde203a022201c81a96c167607f15000000000000000000000000b87f7016585510505478d1d160bdf76c1f41b53d000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000f54f9e7070a1584532572a6f640f09c606bb9a83000000000000000000000000000000000000000000000000000000000000000d496e66696e69747920415155410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056941515541000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://023ba11039ab60df2f575abf6500b39e76ab2f3f5be943287e3f92fec9eb720f"}