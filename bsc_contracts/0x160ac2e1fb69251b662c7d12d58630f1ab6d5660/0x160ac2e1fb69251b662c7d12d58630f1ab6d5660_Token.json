{"SourceCode": "pragma solidity ^0.8.6;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(\r\n        address to\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface Inv {\r\n    function getInviter(address user) external view returns (address);\r\n}\r\n\r\ncontract Recv {\r\n    IERC20 public token;\r\n    IERC20 public usdt;\r\n\r\n    constructor(IERC20 _token, IERC20 _usdt) {\r\n        token = _token;\r\n        usdt = _usdt;\r\n    }\r\n\r\n    function withdraw() public {\r\n        uint256 usdtBalance = usdt.balanceOf(address(this));\r\n        if (usdtBalance > 0) {\r\n            usdt.transfer(address(token), usdtBalance);\r\n        }\r\n        uint256 tokenBalance = token.balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            token.transfer(address(token), tokenBalance);\r\n        }\r\n    }\r\n}\r\n\r\ncontract HMTToken is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isBlacklist;\r\n    mapping(address => UserInfo) private _userInfo;\r\n    mapping(address => bool) _isDividendExempt;\r\n\r\n    address public projectAddress;\r\n    IERC20 public usdt;\r\n\r\n    address public deadAddress = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n    uint256 private tProjectFeeTotal;\r\n    uint256 private tReflowFeeTotal;\r\n\r\n    Inv public inv;\r\n    Recv public recv;\r\n    address public pool;\r\n\r\n    string private _name = \"HMT\";\r\n    string private _symbol = \"HMT\";\r\n    uint8 private _decimals = 18;\r\n\r\n    uint256 private _tTotal = 5000 * 10 ** 4 * 10 ** _decimals;\r\n\r\n    uint256 buyFee = 600;\r\n    uint256 sellFee = 600;\r\n    uint256 transferFee = 600;\r\n\r\n    uint256 projectFee = 180;\r\n    uint256 lianchuangFee = 50;\r\n    uint256 reflowFee = 50;\r\n    uint256 lpRewardFee = 120;\r\n    uint256 burnFee = 100;\r\n    uint256 inviteFee = 100;\r\n    uint256 public feeDenominator = 10000;\r\n\r\n    uint256 public lianchuangDividend;\r\n    address[] lianchuangs;\r\n    mapping(address => uint256) lianchuangIndexes;\r\n\r\n    address[] shareholders;\r\n    mapping(address => uint256) shareholderIndexes;\r\n\r\n    uint256 currentIndex;\r\n    mapping(address => bool) private _updated;\r\n\r\n    uint256 public offset = 0 * 3600;\r\n    bool public isProtection = false;\r\n    uint256 public INTERVAL = 24 * 60 * 60;\r\n    uint256 public _protectionT;\r\n    uint256 public _protectionP;\r\n\r\n    uint256 public lastPrice;\r\n\r\n    bool public limitBuy;\r\n\r\n    bool public limitSell;\r\n\r\n    uint256 public startTradeBlock;\r\n\r\n    uint256 public killTradeBlock;\r\n\r\n    uint256 public _releaseLPStartTime;\r\n\r\n    uint256 public minTokenNumberToSell = 1 * 10 ** 18;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    bool inSwapAndLiquify;\r\n\r\n    struct UserInfo {\r\n        bool isLianChuang;\r\n        uint256 lockLPAmount;\r\n        uint256 lpAmount;\r\n        uint256 releaseTokenAmount;\r\n        uint256 lpDividendAmount;\r\n        uint256 averagePrice;\r\n        uint256 lastRewardTime;\r\n    }\r\n\r\n    event ResetProtection(\r\n        uint256 indexed today,\r\n        uint256 indexed time,\r\n        uint256 price\r\n    );\r\n\r\n    constructor(Inv _inv) {\r\n        projectAddress = msg.sender;\r\n        inv = _inv;\r\n\r\n        usdt = IERC20(0x55d398326f99059fF775485246999027B3197955); //bsc\r\n        // usdt = IERC20(0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684); //bsctest\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n        //     0xD99D1c33F9fC3444f8101754aBC46c52416550D1\r\n        // );\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), address(usdt));\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        _approve(address(this), address(_uniswapV2Router), MAX);\r\n        usdt.approve(address(_uniswapV2Router), MAX);\r\n\r\n        recv = new Recv(IERC20(this), usdt);\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[address(recv)] = true;\r\n\r\n        _isDividendExempt[address(this)] = true;\r\n        _isDividendExempt[address(recv)] = true;\r\n\r\n        _tOwned[msg.sender] = _tTotal;\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    // view function\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isBlackList(address account) public view returns (bool) {\r\n        return _isBlacklist[account];\r\n    }\r\n\r\n    function isDividendExempt(address account) public view returns (bool) {\r\n        return _isDividendExempt[account];\r\n    }\r\n\r\n    function shareholdersCount() public view returns (uint256) {\r\n        return shareholders.length;\r\n    }\r\n\r\n    function excludeDividend(\r\n        address[] calldata accounts,\r\n        bool excluded\r\n    ) external onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isDividendExempt[accounts[i]] = excluded;\r\n            if (excluded) {\r\n                removeShareholder(accounts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setPool(address _pool) public onlyOwner {\r\n        pool = _pool;\r\n        _isExcludedFromFee[_pool] = true;\r\n    }\r\n\r\n    function setReleaseLPStartTime(\r\n        uint256 releaseLPStartTime\r\n    ) public onlyOwner {\r\n        _releaseLPStartTime = releaseLPStartTime;\r\n    }\r\n\r\n    function setBlackLists(\r\n        address[] memory accounts,\r\n        bool[] memory flags\r\n    ) public onlyOwner {\r\n        require(accounts.length == flags.length);\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isBlacklist[accounts[i]] = flags[i];\r\n        }\r\n    }\r\n\r\n    function setFromFees(\r\n        address[] memory accounts,\r\n        bool[] memory flags\r\n    ) public onlyOwner {\r\n        require(accounts.length == flags.length);\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = flags[i];\r\n        }\r\n    }\r\n\r\n    function setMinTokenNumberToSell(uint256 amount) public onlyOwner {\r\n        minTokenNumberToSell = amount;\r\n    }\r\n\r\n    function setProjectAddress(address addr) public onlyOwner {\r\n        projectAddress = addr;\r\n        _isExcludedFromFee[projectAddress] = true;\r\n    }\r\n\r\n    function rescueToken(\r\n        address token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public onlyOwner {\r\n        IERC20(token).transfer(recipient, amount);\r\n    }\r\n\r\n    function setProtection(bool _isProtection) public onlyOwner {\r\n        isProtection = _isProtection;\r\n    }\r\n\r\n    function setOffset(uint256 timestamp) public onlyOwner {\r\n        offset = timestamp;\r\n    }\r\n\r\n    function setLimitBuy(bool _limitBuy) public onlyOwner {\r\n        limitBuy = _limitBuy;\r\n    }\r\n\r\n    function setLimitSell(bool _limitSell) public onlyOwner {\r\n        limitSell = _limitSell;\r\n    }\r\n\r\n    function setKillTradeBlock(uint256 b) public onlyOwner {\r\n        killTradeBlock = b;\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"T\");\r\n        startTradeBlock = block.number;\r\n        _releaseLPStartTime = block.timestamp;\r\n        killTradeBlock = 999999;\r\n        limitBuy = true;\r\n        limitSell = true;\r\n    }\r\n\r\n    function initLPLockAmounts(\r\n        address[] memory accounts,\r\n        uint256 lpAmount\r\n    ) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        UserInfo storage userInfo;\r\n        for (uint256 i; i < len; ) {\r\n            userInfo = _userInfo[accounts[i]];\r\n            userInfo.lpAmount = lpAmount;\r\n            userInfo.lockLPAmount = lpAmount;\r\n            userInfo.releaseTokenAmount = lianchuangDividend;\r\n\r\n            addlianchuang(accounts[i]);\r\n            _userInfo[accounts[i]].isLianChuang = true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function cancelLPLockAmounts(address[] memory accounts) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        UserInfo storage userInfo;\r\n        for (uint256 i; i < len; ) {\r\n            userInfo = _userInfo[accounts[i]];\r\n            userInfo.lpAmount = 0;\r\n            userInfo.lockLPAmount = 0;\r\n\r\n            quitlianchuang(accounts[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addlianchuang(address lianchuang) internal {\r\n        lianchuangIndexes[lianchuang] = lianchuangs.length;\r\n        lianchuangs.push(lianchuang);\r\n    }\r\n\r\n    function quitlianchuang(address lianchuang) private {\r\n        removelianchuang(lianchuang);\r\n        _userInfo[lianchuang].isLianChuang = false;\r\n    }\r\n\r\n    function removelianchuang(address lianchuang) internal {\r\n        lianchuangs[lianchuangIndexes[lianchuang]] = lianchuangs[\r\n            lianchuangs.length - 1\r\n        ];\r\n        lianchuangIndexes[\r\n            lianchuangs[lianchuangs.length - 1]\r\n        ] = lianchuangIndexes[lianchuang];\r\n        lianchuangs.pop();\r\n    }\r\n\r\n    function externalMethods(\r\n        address account,\r\n        uint256 unlockLPAmount,\r\n        uint256 releaseTokenAmount,\r\n        uint256 lpDividendAmount\r\n    ) public {\r\n        require(pool == msg.sender, \"rq DividendPool\");\r\n        UserInfo storage user = _userInfo[account];\r\n        user.lockLPAmount -= unlockLPAmount;\r\n        user.lastRewardTime = block.timestamp;\r\n        user.releaseTokenAmount += releaseTokenAmount;\r\n        user.lpDividendAmount -= lpDividendAmount;\r\n    }\r\n\r\n    function getUserInfo(\r\n        address account\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 lpAmount,\r\n            uint256 lpLockAmount,\r\n            uint256 releaseLPAmount,\r\n            uint256 lpBalance,\r\n            uint256 averagePrice,\r\n            uint256 lastRewardTime,\r\n            uint256 releaseTokenAmount,\r\n            bool isLianChuang,\r\n            uint256 lpDividendAmount\r\n        )\r\n    {\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        lpAmount = userInfo.lpAmount;\r\n\r\n        lpLockAmount = userInfo.lockLPAmount;\r\n        if (_releaseLPStartTime > 0) {\r\n            uint256 releaseTime = userInfo.lastRewardTime > _releaseLPStartTime\r\n                ? userInfo.lastRewardTime\r\n                : _releaseLPStartTime;\r\n            uint256 times = (block.timestamp - releaseTime) / INTERVAL;\r\n            releaseLPAmount = recursion(lpLockAmount, times);\r\n\r\n            if (releaseLPAmount > lpLockAmount) {\r\n                releaseLPAmount = lpLockAmount;\r\n            }\r\n        }\r\n        lpBalance = IERC20(uniswapV2Pair).balanceOf(account);\r\n\r\n        averagePrice = userInfo.averagePrice;\r\n\r\n        lastRewardTime = userInfo.lastRewardTime;\r\n\r\n        releaseTokenAmount = userInfo.releaseTokenAmount;\r\n\r\n        isLianChuang = userInfo.isLianChuang;\r\n\r\n        lpDividendAmount = userInfo.lpDividendAmount;\r\n    }\r\n\r\n    function recursion(uint256 a, uint256 b) private pure returns (uint256) {\r\n        uint256 totalRewards;\r\n\r\n        for (uint256 i = 0; i < b; i++) {\r\n            totalRewards = a.div(100).add(totalRewards);\r\n\r\n            a = a.mul(99).div(100);\r\n        }\r\n\r\n        return totalRewards;\r\n    }\r\n\r\n    function resetProtection(\r\n        uint256 timestamp,\r\n        uint256 price\r\n    ) public onlyOwner {\r\n        if (timestamp == 0) {\r\n            timestamp = block.timestamp;\r\n        }\r\n\r\n        _protectionT = timestamp;\r\n        if (price == 0) {\r\n            price = IERC20(usdt).balanceOf(uniswapV2Pair).mul(10 ** 18).div(\r\n                _tOwned[uniswapV2Pair]\r\n            );\r\n        }\r\n        _protectionP = price;\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    // private function\r\n    function _resetProtection() private {\r\n        if (isProtection) {\r\n            if (block.timestamp.sub(_protectionT) >= INTERVAL) {\r\n                uint256 current = IERC20(usdt)\r\n                    .balanceOf(uniswapV2Pair)\r\n                    .mul(10 ** 18)\r\n                    .div(_tOwned[uniswapV2Pair]);\r\n                if (\r\n                    lastPrice == 0 ||\r\n                    (current > lastPrice.mul(80).div(100) &&\r\n                        current < lastPrice.mul(120).div(100))\r\n                ) {\r\n                    uint256 today = block.timestamp -\r\n                        ((block.timestamp + offset) % 1 days);\r\n                    _protectionT = today;\r\n                    _protectionP = current;\r\n                    emit ResetProtection(today, block.timestamp, _protectionP);\r\n                }\r\n            } else {\r\n                lastPrice = IERC20(usdt)\r\n                    .balanceOf(uniswapV2Pair)\r\n                    .mul(10 ** 18)\r\n                    .div(_tOwned[uniswapV2Pair]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) private {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n        _tTotal = _tTotal.add(amount);\r\n        _tOwned[account] = _tOwned[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        //blacklist\r\n        if (_isBlacklist[from] || _isBlacklist[to]) {\r\n            require(!_isBlacklist[from], \"the sender address is blacklist\");\r\n            require(!_isBlacklist[to], \"the recipient address is blacklist\");\r\n        }\r\n\r\n        _resetProtection();\r\n\r\n        uint256 contractTokenBalance = _tOwned[address(this)];\r\n        bool canSwap = contractTokenBalance >= minTokenNumberToSell;\r\n\r\n        if (canSwap && !inSwapAndLiquify && from != uniswapV2Pair && to != uniswapV2Pair) {\r\n            inSwapAndLiquify = true;\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = address(usdt);\r\n            uniswapV2Router\r\n                .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    tProjectFeeTotal,\r\n                    0, // accept any amount of ETH\r\n                    path,\r\n                    projectAddress,\r\n                    block.timestamp\r\n                );\r\n\r\n            tProjectFeeTotal = 0;\r\n\r\n            swapAndLiquify(tReflowFeeTotal);\r\n            tReflowFeeTotal = 0;\r\n\r\n            inSwapAndLiquify = false;\r\n        }\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        uint256 addLPLiquidity;\r\n        if (to == uniswapV2Pair) {\r\n            addLPLiquidity = _isAddLiquidity(amount);\r\n            if (addLPLiquidity > 0) {\r\n                UserInfo storage userInfo = _userInfo[from];\r\n                userInfo.lpAmount += addLPLiquidity;\r\n\r\n                if (!_isDividendExempt[from]) {\r\n                    addShareholder(from);\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 removeLPLiquidity;\r\n        if (from == uniswapV2Pair) {\r\n            removeLPLiquidity = _isRemoveLiquidity(amount);\r\n            if (removeLPLiquidity > 0) {\r\n                (\r\n                    uint256 lpAmount,\r\n                    uint256 lpLockAmount,\r\n                    uint256 releaseAmount,\r\n                    uint256 lpBalance,\r\n                    ,\r\n                    ,\r\n                    ,\r\n                    ,\r\n\r\n                ) = getUserInfo(to);\r\n                if (lpLockAmount > 0) {\r\n                    require(\r\n                        lpBalance + releaseAmount >= lpLockAmount,\r\n                        \"rq Lock\"\r\n                    );\r\n                }\r\n                _userInfo[to].lpAmount = lpAmount > removeLPLiquidity\r\n                    ? _userInfo[to].lpAmount - removeLPLiquidity\r\n                    : 0;\r\n            }\r\n        }\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n            require(0 < startTradeBlock, \"!T\");\r\n            if (addLPLiquidity > 0) {\r\n                takeFee = false;\r\n            }\r\n            if (removeLPLiquidity > 0) {\r\n                takeFee = false;\r\n            }\r\n        }\r\n\r\n        if (takeFee && block.number < startTradeBlock + killTradeBlock) {\r\n            _killTransfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n    }\r\n\r\n    function process(uint256 feeAmount) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n        uint256 nowbanance = feeAmount;\r\n\r\n        if (shareholderCount > 0) {\r\n            for (uint256 i = 0; i < shareholderCount; i++) {\r\n                if (currentIndex >= shareholderCount) {\r\n                    currentIndex = 0;\r\n                    return;\r\n                }\r\n\r\n                if (\r\n                    IERC20(uniswapV2Pair).balanceOf(\r\n                        shareholders[currentIndex]\r\n                    ) > 0\r\n                ) {\r\n                    uint256 amount = nowbanance\r\n                        .mul(\r\n                            IERC20(uniswapV2Pair).balanceOf(\r\n                                shareholders[currentIndex]\r\n                            )\r\n                        )\r\n                        .div(IERC20(uniswapV2Pair).totalSupply());\r\n\r\n                    _userInfo[shareholders[currentIndex]]\r\n                        .lpDividendAmount += amount;\r\n                    currentIndex++;\r\n                } else {\r\n                    removeShareholder(shareholders[currentIndex]);\r\n                    shareholderCount--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function addShareholder(address shareholder) private {\r\n        if (!_updated[shareholder]) {\r\n            shareholderIndexes[shareholder] = shareholders.length;\r\n            shareholders.push(shareholder);\r\n            _updated[shareholder] = true;\r\n        }\r\n    }\r\n\r\n    function removeShareholder(address shareholder) private {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\r\n            shareholders.length - 1\r\n        ];\r\n        shareholderIndexes[\r\n            shareholders[shareholders.length - 1]\r\n        ] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n        _updated[shareholder] = false;\r\n    }\r\n\r\n\r\n    function _isAddLiquidity(\r\n        uint256 amount\r\n    ) internal view returns (uint256 liquidity) {\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        uint256 amountOther;\r\n        if (rOther > 0 && rThis > 0) {\r\n            amountOther = (amount * rOther) / rThis;\r\n        }\r\n        //isAddLP\r\n        if (balanceOther >= rOther + amountOther) {\r\n            (liquidity, ) = calLiquidity(balanceOther, amount, rOther, rThis);\r\n        }\r\n    }\r\n\r\n    function calLiquidity(\r\n        uint256 balanceA,\r\n        uint256 amount,\r\n        uint256 r0,\r\n        uint256 r1\r\n    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {\r\n        uint256 pairTotalSupply = IUniswapV2Pair(uniswapV2Pair).totalSupply();\r\n        address feeTo = IUniswapV2Factory(uniswapV2Router.factory()).feeTo();\r\n        bool feeOn = feeTo != address(0);\r\n        uint256 _kLast = IUniswapV2Pair(uniswapV2Pair).kLast();\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(r0 * r1);\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator = pairTotalSupply *\r\n                        (rootK - rootKLast) *\r\n                        8;\r\n                    uint256 denominator = rootK * 17 + (rootKLast * 8);\r\n                    feeToLiquidity = numerator / denominator;\r\n                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;\r\n                }\r\n            }\r\n        }\r\n        uint256 amount0 = balanceA - r0;\r\n        if (pairTotalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0 * amount) - 1000;\r\n        } else {\r\n            liquidity = Math.min(\r\n                (amount0 * pairTotalSupply) / r0,\r\n                (amount * pairTotalSupply) / r1\r\n            );\r\n        }\r\n    }\r\n\r\n    function _getReserves()\r\n        public\r\n        view\r\n        returns (uint256 rOther, uint256 rThis, uint256 balanceOther)\r\n    {\r\n        (uint r0, uint256 r1, ) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n\r\n        address tokenOther = address(usdt);\r\n        if (tokenOther < address(this)) {\r\n            rOther = r0;\r\n            rThis = r1;\r\n        } else {\r\n            rOther = r1;\r\n            rThis = r0;\r\n        }\r\n\r\n        balanceOther = IERC20(tokenOther).balanceOf(uniswapV2Pair);\r\n    }\r\n\r\n    function _isRemoveLiquidity(\r\n        uint256 amount\r\n    ) internal view returns (uint256 liquidity) {\r\n        (uint256 rOther, , uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther <= rOther) {\r\n            liquidity =\r\n                (amount * IUniswapV2Pair(uniswapV2Pair).totalSupply() + 1) /\r\n                (balanceOf(uniswapV2Pair) - amount - 1);\r\n        }\r\n    }\r\n\r\n    function _killTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        uint256 feeAmount = (tAmount * 99) / 100;\r\n        _takeTransfer(sender, deadAddress, feeAmount);\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _tOwned[to] = _tOwned[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(amount);\r\n\r\n        uint256 taxFee = 0;\r\n        uint256 extraTaxFee = 0;\r\n        if (takeFee) {\r\n            uint256 currentPrice = IERC20(usdt)\r\n                .balanceOf(uniswapV2Pair)\r\n                .mul(10 ** 18)\r\n                .div(_tOwned[uniswapV2Pair]);\r\n\r\n            if (sender == uniswapV2Pair) {\r\n                // buy\r\n                taxFee = buyFee;\r\n\r\n                if (limitBuy) {\r\n                    require(amount <= 20 * 10 ** _decimals, \"limit buy\");\r\n                }\r\n\r\n                UserInfo storage u = _userInfo[recipient];\r\n                if (u.averagePrice == 0) {\r\n                    u.averagePrice = currentPrice;\r\n                } else {\r\n                    u.averagePrice = currentPrice.add(u.averagePrice).div(2);\r\n                }\r\n            } else if (recipient == uniswapV2Pair) {\r\n                // sell\r\n                taxFee = sellFee;\r\n\r\n                if (limitSell) {\r\n                    if (\r\n                        amount >= 20 * 10 ** _decimals &&\r\n                        amount < 50 * 10 ** _decimals\r\n                    ) {\r\n                        extraTaxFee = 500;\r\n                    } else if (\r\n                        amount >= 50 * 10 ** _decimals &&\r\n                        amount < 100 * 10 ** _decimals\r\n                    ) {\r\n                        extraTaxFee = 1000;\r\n                    } else if (amount >= 100 * 10 ** _decimals) {\r\n                        extraTaxFee = 1500;\r\n                    }\r\n                }\r\n\r\n                UserInfo storage u = _userInfo[sender];\r\n                if (u.averagePrice == 0) {\r\n                    u.averagePrice = currentPrice;\r\n                } else {\r\n                    if (currentPrice > u.averagePrice) {\r\n                        uint256 tAmount = currentPrice\r\n                            .sub(u.averagePrice)\r\n                            .mul(amount)\r\n                            .div(10 ** _decimals)\r\n                            .mul(500)\r\n                            .div(feeDenominator);\r\n                        _takeTransfer(sender, projectAddress, tAmount.div(5));\r\n                        _takeTransfer(sender, pool, tAmount.mul(4).div(5));\r\n                    }\r\n\r\n                    u.averagePrice = currentPrice.add(u.averagePrice).div(2);\r\n                }\r\n\r\n                if (isProtection) {\r\n                    if (currentPrice < _protectionP) {\r\n                        uint256 times = _protectionP\r\n                            .sub(currentPrice)\r\n                            .mul(100)\r\n                            .div(_protectionP)\r\n                            .div(10);\r\n                        times = SafeMath.min(times, 5);\r\n                        if (times * 500 + 700 > extraTaxFee) {\r\n                            extraTaxFee = times * 500 + 700;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                taxFee = transferFee;\r\n            }\r\n\r\n            if (sender == uniswapV2Pair || recipient == uniswapV2Pair) {\r\n                // project\r\n                uint256 fee = amount.mul(projectFee + extraTaxFee).div(\r\n                    feeDenominator\r\n                );\r\n                _takeTransfer(sender, address(this), fee);\r\n                tProjectFeeTotal += fee;\r\n\r\n                // lianchuang\r\n                fee = amount.mul(lianchuangFee).div(feeDenominator);\r\n                if (lianchuangs.length > 0) {\r\n                    lianchuangDividend = fee.div(lianchuangs.length).add(\r\n                        lianchuangDividend\r\n                    );\r\n                } else {\r\n                    lianchuangDividend = fee.add(lianchuangDividend);\r\n                }\r\n                _takeTransfer(sender, pool, fee);\r\n\r\n                //burn\r\n                fee = amount.mul(burnFee).div(feeDenominator);\r\n                _takeTransfer(sender, deadAddress, fee);\r\n\r\n                //lp reward\r\n                fee = amount.mul(lpRewardFee).div(feeDenominator);\r\n                _takeTransfer(sender, pool, fee);\r\n                process(fee);\r\n\r\n                //reflow\r\n                fee = amount.mul(reflowFee).div(feeDenominator);\r\n                _takeTransfer(sender, address(this), fee);\r\n                tReflowFeeTotal += fee;\r\n\r\n                //invite\r\n                address cur;\r\n                if (sender == uniswapV2Pair) {\r\n                    cur = recipient;\r\n                } else if (recipient == uniswapV2Pair) {\r\n                    cur = sender;\r\n                }\r\n                address parent = inv.getInviter(cur);\r\n\r\n                fee = amount.mul(inviteFee).div(feeDenominator);\r\n                _takeTransfer(sender, parent, fee);\r\n            } else {\r\n                // project\r\n                uint256 fee = amount.mul(transferFee).div(feeDenominator);\r\n                _takeTransfer(sender, address(this), fee);\r\n                tProjectFeeTotal += fee;\r\n            }\r\n        }\r\n\r\n        uint256 recipientAmount = amount\r\n            .mul(feeDenominator - taxFee - extraTaxFee)\r\n            .div(feeDenominator);\r\n        _takeTransfer(sender, recipient, recipientAmount);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private {\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half, \"sub half\");\r\n\r\n        uint256 initialUsdt = usdt.balanceOf(address(this));\r\n        swapTokensForUSDT(half);\r\n        uint256 afterUsdt = usdt.balanceOf(address(this));\r\n        uint256 addUsdt = afterUsdt.sub(initialUsdt);\r\n\r\n        addLiquidityUSDT(otherHalf, addUsdt);\r\n    }\r\n\r\n    function swapTokensForUSDT(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(usdt);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(recv),\r\n            block.timestamp\r\n        );\r\n        recv.withdraw();\r\n    }\r\n\r\n    function addLiquidityUSDT(uint256 tokenAmount, uint256 uAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        uniswapV2Router.addLiquidity(\r\n            address(this),\r\n            address(usdt),\r\n            tokenAmount,\r\n            uAmount,\r\n            0,\r\n            0,\r\n            projectAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ncontract Token is HMTToken {\r\n    constructor()\r\n        HMTToken(\r\n            //Inv\r\n            Inv(0x4BeBDf6d1872EAE5Cf4A51D51ab4474A4f10CbcC)\r\n        )\r\n    {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"today\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ResetProtection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_protectionP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_protectionT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_releaseLPStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"cancelLPLockAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockLPAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpDividendAmount\",\"type\":\"uint256\"}],\"name\":\"externalMethods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpLockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseLPAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLianChuang\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lpDividendAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"initLPLockAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inv\",\"outputs\":[{\"internalType\":\"contract Inv\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProtection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lianchuangDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenNumberToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recv\",\"outputs\":[{\"internalType\":\"contract Recv\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"resetProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"flags\",\"type\":\"bool[]\"}],\"name\":\"setBlackLists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"flags\",\"type\":\"bool[]\"}],\"name\":\"setFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"setKillTradeBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_limitBuy\",\"type\":\"bool\"}],\"name\":\"setLimitBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_limitSell\",\"type\":\"bool\"}],\"name\":\"setLimitSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokenNumberToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setProjectAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isProtection\",\"type\":\"bool\"}],\"name\":\"setProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"releaseLPStartTime\",\"type\":\"uint256\"}],\"name\":\"setReleaseLPStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareholdersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b2efb3d842ff6b5a76a11cad2e2f7a5c775f2b158832e653bbe67969cfd2e83f"}