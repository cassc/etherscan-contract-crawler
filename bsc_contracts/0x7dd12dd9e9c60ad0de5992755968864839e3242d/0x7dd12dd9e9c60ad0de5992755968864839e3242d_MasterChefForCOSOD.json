{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex;\r\n                // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n\r\n    //     function transfer(address recipient, uint256 amount) external returns (bool);\r\n    // function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success,) = recipient.call{value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value : value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, 'e0');\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), 'e1');\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface Token {\r\n    function mint(address _to, uint256 _amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function MinerList(address _address) external returns (bool);\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface pair {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IERC721Enumerable {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    function mintForMiner(address _to, uint256 _tokenId) external returns (bool, uint256);\r\n\r\n    function allPriceList(uint256 _tokenId) external view returns (uint256);\r\n\r\n    function canMintList(uint256 _tokenId) external view returns (bool);\r\n\r\n    function tokenIdPersistList(uint256 _tokenID) external view returns (bool);\r\n\r\n    function MinerList(address _address) external view returns (bool);\r\n}\r\n\r\ncontract MasterChefForCOSOD is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeBEP20 for IERC20;\r\n    //uint256 public minStakingNum = 0;\r\n\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n    }\r\n\r\n    struct poolInfo0 {\r\n        IERC721Enumerable daoNftToken;\r\n        IERC721Enumerable lpToken;\r\n    }\r\n\r\n    struct poolInfo1 {\r\n        bool limitWithdrawTime;\r\n        bool pool_status;\r\n    }\r\n\r\n\r\n    struct poolInfo2 {\r\n        uint256 allocPoint;\r\n        uint256 lastRewardBlock;\r\n        uint256 accCakePerShare;\r\n        uint256 staking_stock_length;\r\n        uint256 minStakingNum;\r\n        uint256 refererrate;\r\n        uint256 startBlock;\r\n        uint256 bonusEndBlock;\r\n        uint256 daoTokenId;\r\n        uint256 burnTokenId;\r\n    }\r\n\r\n\r\n    struct PoolInfoItem {\r\n        uint256 pid;\r\n        poolInfo0 tokensList;\r\n        poolInfo1 statusList;\r\n        poolInfo2 poolConfigList;\r\n    }\r\n\r\n    struct pairReservesItem {\r\n        address token0;\r\n        address token1;\r\n        uint256 reserve0;\r\n        uint256 reserve1;\r\n        uint256 decimals0;\r\n        uint256 decimals1;\r\n        string symbol0;\r\n        string symbol1;\r\n        string name0;\r\n        string name1;\r\n    }\r\n\r\n    Token public cake;\r\n    address public devaddr;\r\n    uint256 public cakePerBlock;\r\n    uint256 public BONUS_MULTIPLIER = 1;\r\n    uint256 public poolLength = 0;\r\n    mapping(uint256 => PoolInfoItem) poolInfo;\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    uint256 public totalAllocPoint = 0;\r\n    bool public limitDaoNftTime = true;\r\n    bool public limitGetRewardTime = false;\r\n    //bool public limitWithdrawTime = false;\r\n    bool public useWhiteList = false;\r\n    bool public useMintMode = true;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 tokenId, uint256 unlockTime);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 tokenId);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    mapping(uint256 => mapping(address => uint256)) public staking_time;\r\n    mapping(uint256 => mapping(address => uint256)) public unlock_time;\r\n    mapping(uint256 => uint256) public stakingNumForPool;\r\n    mapping(uint256 => mapping(address => uint256)) public pending_list;\r\n    mapping(uint256 => mapping(address => uint256)) public allrewardList;\r\n    mapping(address => bool) public white_list;\r\n    mapping(uint256 => bool) public daoNftTokenStakingStatusList;\r\n    mapping(IERC721Enumerable => mapping(uint256 => address)) public daoNftTokenUserList;\r\n    mapping(address => uint256) public daoRewardNumList;\r\n    mapping(uint256 => address) public burnToPoolAddressList;\r\n    mapping(address=>mapping(uint256=>address)) public stakingNftOlderOwnerList;\r\n    mapping(address=>bool) private userHasPool;\r\n    mapping(address=>bool) private hasBurlPool;\r\n\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    EnumerableSet.UintSet private burnIdList;\r\n    mapping(uint256 => mapping(address => EnumerableSet.UintSet)) private userStakingTokenForPoolIdListSet;\r\n    mapping(address => EnumerableSet.UintSet) private userStakingTokenIdListSet;\r\n    mapping(address => EnumerableSet.UintSet) private userBurnToPoolSet;\r\n    EnumerableSet.AddressSet private stakingAddress;\r\n    IERC721Enumerable private burnNftToken;\r\n    IERC721Enumerable private daoNftToken;\r\n\r\n    event updatePoolEvent(uint256 lpSupply, uint256 num, uint256 totalLpSupply, uint256 totalNum, uint256 cakeReward);\r\n\r\n    constructor(IERC721Enumerable _burnNftToken, IERC721Enumerable _daoNftToken)  {\r\n        burnNftToken = _burnNftToken;\r\n        daoNftToken = _daoNftToken;\r\n        devaddr = msg.sender;\r\n        totalAllocPoint = 0;\r\n    }\r\n\r\n    function setUseMintMode(bool _useMintMode) external onlyOwner {\r\n        useMintMode = _useMintMode;\r\n    }\r\n\r\n    function setLimitDaoNftTime(bool _limitDaoNftTime) external onlyOwner {\r\n        limitDaoNftTime = _limitDaoNftTime;\r\n    }\r\n\r\n    function setLimitGetRewardTime(bool _limitGetRewardTime) external onlyOwner {\r\n        limitGetRewardTime = _limitGetRewardTime;\r\n    }\r\n\r\n    // function setLimitWithDrawTime(bool _limitWithdrawTime) external onlyOwner {\r\n    //     limitWithdrawTime = _limitWithdrawTime;\r\n    // }\r\n\r\n    function setUseWhiteList(bool _useWhiteList) external onlyOwner {\r\n        useWhiteList = _useWhiteList;\r\n    }\r\n\r\n    // function setMinStakingNum(uint256 _MinStakingNum) external onlyOwner {\r\n    //     massUpdatePools();\r\n    //     minStakingNum = _MinStakingNum;\r\n    // }\r\n\r\n    function setWhiteList(address[] memory _address_list) external onlyOwner {\r\n        for (uint256 i = 0; i < _address_list.length; i++) {\r\n            white_list[_address_list[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeWhiteList(address[] memory _address_list) external onlyOwner {\r\n        for (uint256 i = 0; i < _address_list.length; i++) {\r\n            white_list[_address_list[i]] = false;\r\n        }\r\n    }\r\n\r\n    function stakingDaoNftToken(uint256 _pid) external {\r\n        require(!userHasPool[msg.sender],\"t001\");\r\n        updatePool(_pid);\r\n        (poolInfo[_pid].tokensList.daoNftToken).transferFrom(msg.sender, address(this), poolInfo[_pid].poolConfigList.daoTokenId);\r\n        daoNftTokenStakingStatusList[_pid] = true;\r\n        daoNftTokenUserList[poolInfo[_pid].tokensList.daoNftToken][poolInfo[_pid].poolConfigList.daoTokenId] = msg.sender;\r\n        userHasPool[msg.sender] = true;\r\n    }\r\n\r\n    function withdrawDaoNftToken(uint256 _pid) external {\r\n        updatePool(_pid);\r\n        require(daoNftTokenUserList[poolInfo[_pid].tokensList.daoNftToken][poolInfo[_pid].poolConfigList.daoTokenId] == msg.sender, \"e1\");\r\n        if (limitDaoNftTime) {\r\n            require(block.timestamp >= poolInfo[_pid].poolConfigList.bonusEndBlock, \"e2\");\r\n        }\r\n        (poolInfo[_pid].tokensList.daoNftToken).transferFrom(address(this), msg.sender, poolInfo[_pid].poolConfigList.daoTokenId);\r\n        daoNftTokenStakingStatusList[_pid] = false;\r\n        daoNftTokenUserList[poolInfo[_pid].tokensList.daoNftToken][poolInfo[_pid].poolConfigList.daoTokenId] = address(1);\r\n        userHasPool[msg.sender] = false;\r\n    }\r\n\r\n    function setCakePerBlockAndCake(Token _cake, uint256 _cakePerBlock) external onlyOwner {\r\n        if (useMintMode) {\r\n            require(_cake.MinerList(address(this)), \"e0\");\r\n        }\r\n        massUpdatePools();\r\n        cake = _cake;\r\n        cakePerBlock = _cakePerBlock;\r\n    }\r\n\r\n    function updateMultiplier(uint256 multiplierNumber) external onlyOwner {\r\n        BONUS_MULTIPLIER = multiplierNumber;\r\n    }\r\n\r\n\r\n    function burnToPool(uint256 _tokenId) external {\r\n        require(!userHasPool[msg.sender],\"t001\");\r\n        require(!hasBurlPool[msg.sender],\"t002\");\r\n        burnNftToken.transferFrom(msg.sender, address(1), _tokenId);\r\n        userBurnToPoolSet[msg.sender].add(_tokenId);\r\n        burnToPoolAddressList[_tokenId] = msg.sender;\r\n        burnIdList.add(_tokenId);\r\n        hasBurlPool[msg.sender] = true;\r\n    }\r\n\r\n    function addPool(uint256 _allocPoint, IERC721Enumerable _lpToken, bool _limitWithdrawTime, uint256 _staking_stock_length, uint256 _minStakingNum, uint256 _startBlock, uint256 _bonusEndBlock, uint256 _daoRewardRate, IERC721Enumerable _daoNftToken, uint256 _daoTokenId) external onlyOwner {\r\n        massUpdatePools();\r\n        address daoNftTokenOwner = _daoNftToken.ownerOf(_daoTokenId);\r\n        require(daoNftTokenOwner != address(0), \"e0\");\r\n        require(!userHasPool[daoNftTokenOwner],\"e2\");\r\n        require(!isContract(daoNftTokenOwner), \"e3\");\r\n        uint256 lastRewardBlock = block.timestamp > _startBlock ? block.timestamp : _startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo[poolLength] = PoolInfoItem({\r\n        pid : poolLength,\r\n        tokensList : poolInfo0({daoNftToken : _daoNftToken, lpToken : _lpToken}),\r\n        statusList : poolInfo1({limitWithdrawTime : _limitWithdrawTime, pool_status : true}),\r\n        poolConfigList : poolInfo2({allocPoint : _allocPoint,\r\n        lastRewardBlock : lastRewardBlock,\r\n        accCakePerShare : 0,\r\n        staking_stock_length : _staking_stock_length,\r\n        minStakingNum : _minStakingNum,\r\n        refererrate : _daoRewardRate,\r\n        startBlock : _startBlock,\r\n        bonusEndBlock : _bonusEndBlock,\r\n        daoTokenId : _daoTokenId,\r\n        burnTokenId : 0\r\n        })\r\n        });\r\n\r\n        poolLength = poolLength.add(1);\r\n    }\r\n\r\n\r\n    function addBurnPool(uint256 _allocPoint, IERC721Enumerable _lpToken, bool _limitWithdrawTime, uint256 _staking_stock_length, uint256 _minStakingNum, uint256 _startBlock, uint256 _bonusEndBlock, uint256 _daoRewardRate, IERC721Enumerable _daoNftToken, uint256 _daoTokenId, uint256 _burnId) external onlyOwner {\r\n        massUpdatePools();\r\n        require(_daoNftToken.ownerOf(_daoTokenId) != address(0), \"e0\");\r\n        require(burnNftToken.ownerOf(_burnId) == address(1), \"e2\");\r\n        require(burnToPoolAddressList[_burnId] != address(0), \"e3\");\r\n        require(!userHasPool[burnToPoolAddressList[_burnId]],\"e4\");\r\n        uint256 lastRewardBlock = block.timestamp > _startBlock ? block.timestamp : _startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo[poolLength] = PoolInfoItem({\r\n        pid : poolLength,\r\n        tokensList : poolInfo0({daoNftToken : _daoNftToken, lpToken : _lpToken}),\r\n        statusList : poolInfo1({limitWithdrawTime : _limitWithdrawTime, pool_status : true}),\r\n        poolConfigList : poolInfo2({allocPoint : _allocPoint,\r\n        lastRewardBlock : lastRewardBlock,\r\n        accCakePerShare : 0,\r\n        staking_stock_length : _staking_stock_length,\r\n        minStakingNum : _minStakingNum,\r\n        refererrate : _daoRewardRate,\r\n        startBlock : _startBlock,\r\n        bonusEndBlock : _bonusEndBlock,\r\n        daoTokenId : _daoTokenId,\r\n        burnTokenId : _burnId\r\n        })\r\n        });\r\n        _daoNftToken.transferFrom(msg.sender, address(this), _daoTokenId);\r\n        daoNftTokenStakingStatusList[poolLength] = true;\r\n        daoNftTokenUserList[_daoNftToken][_daoTokenId] = burnToPoolAddressList[_burnId];\r\n        poolLength = poolLength.add(1);\r\n        userHasPool[burnToPoolAddressList[_burnId]] = true;\r\n    }\r\n\r\n    function setPool(uint256 _pid, uint256 _allocPoint, IERC721Enumerable _lpToken, bool _limitWithdrawTime, uint256 _staking_stock_length, uint256 _minStakingNum, uint256 _startBlock, uint256 _bonusEndBlock, uint256 _daoRewardRate, IERC721Enumerable _daoNftToken, uint256 _daoTokenId) external onlyOwner {\r\n        massUpdatePools();\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].poolConfigList.allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].poolConfigList.allocPoint = _allocPoint;\r\n        poolInfo[_pid].tokensList.lpToken = _lpToken;\r\n        poolInfo[_pid].tokensList.daoNftToken = _daoNftToken;\r\n        poolInfo[_pid].statusList.limitWithdrawTime = _limitWithdrawTime;\r\n        poolInfo[_pid].poolConfigList.staking_stock_length = _staking_stock_length;\r\n        poolInfo[_pid].poolConfigList.minStakingNum = _minStakingNum;\r\n        poolInfo[_pid].poolConfigList.startBlock = _startBlock;\r\n        poolInfo[_pid].poolConfigList.bonusEndBlock = _bonusEndBlock;\r\n        poolInfo[_pid].poolConfigList.refererrate = _daoRewardRate;\r\n        poolInfo[_pid].poolConfigList.daoTokenId = _daoTokenId;\r\n    }\r\n\r\n    function enablePool(uint256 _pid) external onlyOwner {\r\n        updatePool(_pid);\r\n        poolInfo[_pid].statusList.pool_status = true;\r\n    }\r\n\r\n    function disablePool(uint256 _pid) external onlyOwner {\r\n        updatePool(_pid);\r\n        poolInfo[_pid].statusList.pool_status = false;\r\n    }\r\n\r\n    function getMultiplier(uint256 _pid, uint256 _from, uint256 _to) public view returns (uint256) {\r\n        uint256 bonusEndBlock = poolInfo[_pid].poolConfigList.bonusEndBlock;\r\n        uint256 fromBlock = poolInfo[_pid].poolConfigList.startBlock;\r\n        // if (stakingNumForPool[_pid] < minStakingNum || !daoNftTokenStakingStatusList[_pid] || !poolInfo[_pid].pool_status) {\r\n        if (!daoNftTokenStakingStatusList[_pid] || !poolInfo[_pid].statusList.pool_status || block.timestamp < fromBlock) {\r\n            return 0;\r\n        }\r\n        if (_to <= bonusEndBlock) {\r\n            return _to - _from;\r\n        } else if (_from >= bonusEndBlock) {\r\n            return 0;\r\n        } else {\r\n            return bonusEndBlock - _from;\r\n        }\r\n    }\r\n\r\n    function getRate(uint256 _pid) public view returns (uint256 lpSupply, uint256 num, uint256 totalLpSupply, uint256 totalNum) {\r\n        lpSupply = stakingNumForPool[_pid];\r\n        num = stakingNumForPool[_pid].mul(poolInfo[_pid].poolConfigList.allocPoint);\r\n        for (uint256 i = 0; i < poolLength; i++) {\r\n            totalLpSupply = totalLpSupply.add(stakingNumForPool[i]);\r\n            totalNum = totalNum.add(stakingNumForPool[i].mul(poolInfo[i].poolConfigList.allocPoint));\r\n        }\r\n    }\r\n\r\n    function pendingCake(uint256 _pid, address _user) public view returns (uint256) {\r\n        PoolInfoItem storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accCakePerShare = pool.poolConfigList.accCakePerShare;\r\n        uint256 lpSupply = stakingNumForPool[_pid];\r\n        //uint256 totalLpSupply = poolInfo[_pid].lpToken.balanceOf(address(this));\r\n        if (block.timestamp > pool.poolConfigList.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(_pid, pool.poolConfigList.lastRewardBlock, block.timestamp);\r\n            //uint256 cakeReward = multiplier.mul(cakePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n            //uint256 cakeReward = multiplier.mul(cakePerBlock).mul(lpSupply).div(totalLpSupply);\r\n            (,uint256 num,,uint256 totalNum) = getRate(_pid);\r\n            uint256 cakeReward = multiplier.mul(cakePerBlock).mul(num).div(totalNum);\r\n            accCakePerShare = accCakePerShare.add(cakeReward.mul(1e12).div(lpSupply));\r\n        }\r\n        return user.amount.mul(accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfoItem storage pool = poolInfo[_pid];\r\n        if (block.timestamp <= pool.poolConfigList.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = stakingNumForPool[_pid];\r\n        if (lpSupply == 0) {\r\n            pool.poolConfigList.lastRewardBlock = block.timestamp;\r\n            return;\r\n        }\r\n        //uint256 totalLpSupply = poolInfo[_pid].lpToken.balanceOf(address(this));\r\n\r\n        uint256 multiplier = getMultiplier(_pid, pool.poolConfigList.lastRewardBlock, block.timestamp);\r\n        //uint256 cakeReward = multiplier.mul(cakePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n        // uint256 cakeReward = multiplier.mul(cakePerBlock).mul(lpSupply).div(totalLpSupply);\r\n        (,uint256 num,uint256 totalLpSupply,uint256 totalNum) = getRate(_pid);\r\n        uint256 cakeReward = multiplier.mul(cakePerBlock).mul(num).div(totalNum);\r\n        if (useMintMode && cake.MinerList(address(this))) {\r\n            cake.mint(address(this), cakeReward);\r\n        }\r\n        pool.poolConfigList.accCakePerShare = pool.poolConfigList.accCakePerShare.add(cakeReward.mul(1e12).div(lpSupply));\r\n        pool.poolConfigList.lastRewardBlock = block.timestamp;\r\n        emit updatePoolEvent(lpSupply, num, totalLpSupply, totalNum, cakeReward);\r\n    }\r\n\r\n    function massUpdatePools() public {\r\n        for (uint256 pid = 0; pid < poolLength; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n\r\n    function isContract(address _address) public view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(_address)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function deposit(uint256 _pid, uint256[] memory _tokenIdList) external nonReentrant {\r\n        massUpdatePools();\r\n        //require(!isContract(msg.sender), \"e2\");\r\n        require(_tokenIdList.length > 0, \"e3\");\r\n        require(poolInfo[_pid].statusList.pool_status, \"e4\");\r\n        require(daoNftTokenStakingStatusList[_pid], \"e5\");\r\n        address _user = msg.sender;\r\n        PoolInfoItem storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.poolConfigList.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                pending_list[_pid][_user] = pending_list[_pid][_user].add(pending);\r\n            }\r\n        }\r\n        if (_tokenIdList.length > 0) {\r\n            for (uint256 i = 0; i < _tokenIdList.length; i++) {\r\n                uint256 _tokenId = _tokenIdList[i];\r\n                emit Deposit(_user, _pid, _tokenId, unlock_time[_pid][_user]);\r\n                pool.tokensList.lpToken.transferFrom(_user, address(this), _tokenId);\r\n                userStakingTokenForPoolIdListSet[_pid][_user].add(_tokenId);\r\n                userStakingTokenIdListSet[_user].add(_tokenId);\r\n                stakingNftOlderOwnerList[address(pool.tokensList.lpToken)][_tokenId] = msg.sender;\r\n            }\r\n            uint256 addAmount = _tokenIdList.length;\r\n            stakingNumForPool[_pid] = stakingNumForPool[_pid].add(addAmount);\r\n            uint256 oldStaking = user.amount;\r\n            uint256 newStaking = user.amount.add(addAmount);\r\n            user.amount = user.amount.add(addAmount);\r\n            uint256 oldUnlockTime;\r\n            uint256 newUnlockTime;\r\n            if (unlock_time[_pid][msg.sender] == 0) {\r\n                oldUnlockTime = block.timestamp.add(pool.poolConfigList.staking_stock_length);\r\n            } else {\r\n                oldUnlockTime = unlock_time[_pid][msg.sender];\r\n            }\r\n            if (oldUnlockTime >= block.timestamp) {\r\n                newUnlockTime = oldStaking.mul(oldUnlockTime.sub(block.timestamp)).add(addAmount.mul(pool.poolConfigList.staking_stock_length)).div(newStaking);\r\n            } else {\r\n                newUnlockTime = addAmount.mul(pool.poolConfigList.staking_stock_length).div(newStaking);\r\n            }\r\n            unlock_time[_pid][msg.sender] = block.timestamp.add(newUnlockTime);\r\n            staking_time[_pid][msg.sender] = block.timestamp;\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.poolConfigList.accCakePerShare).div(1e12);\r\n        if (!stakingAddress.contains(msg.sender)) {\r\n            stakingAddress.add(msg.sender);\r\n        }\r\n    }\r\n\r\n    function withdraw(uint256 _pid, uint256 _tokenId) external nonReentrant {\r\n        address _user = msg.sender;\r\n        //require(!isContract(_user), \"e12\");\r\n        massUpdatePools();\r\n        if (poolInfo[_pid].statusList.limitWithdrawTime) {\r\n            if (!useWhiteList) {\r\n                require(block.timestamp > unlock_time[_pid][msg.sender], \"e10\");\r\n            } else {\r\n                if (!white_list[msg.sender]) {\r\n                    require(block.timestamp > unlock_time[_pid][msg.sender], \"e11\");\r\n                }\r\n            }\r\n        }\r\n        PoolInfoItem storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 pending = user.amount.mul(pool.poolConfigList.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n        if (pending > 0) {\r\n            pending_list[_pid][_user] = pending_list[_pid][_user].add(pending);\r\n        }\r\n        require(userStakingTokenForPoolIdListSet[_pid][_user].contains(_tokenId));\r\n        pool.tokensList.lpToken.transferFrom(address(this), _user, _tokenId);\r\n        stakingNftOlderOwnerList[address(pool.tokensList.lpToken)][_tokenId] = address(0);\r\n        user.amount = user.amount.sub(1);\r\n        stakingNumForPool[_pid] = stakingNumForPool[_pid].sub(1);\r\n        userStakingTokenIdListSet[_user].remove(_tokenId);\r\n        userStakingTokenForPoolIdListSet[_pid][_user].remove(_tokenId);\r\n        emit Withdraw(_user, _pid, _tokenId);\r\n        user.rewardDebt = user.amount.mul(pool.poolConfigList.accCakePerShare).div(1e12);\r\n        if (userStakingTokenIdListSet[_user].length() == 0) {\r\n            stakingAddress.remove(msg.sender);\r\n        }\r\n    }\r\n\r\n    function withdraw(uint256 _pid, uint256[] memory _tokenIdList) external nonReentrant {\r\n        address _user = msg.sender;\r\n        //require(!isContract(_user), \"e12\");\r\n        massUpdatePools();\r\n        if (poolInfo[_pid].statusList.limitWithdrawTime) {\r\n            if (!useWhiteList) {\r\n                require(block.timestamp > unlock_time[_pid][msg.sender], \"e10\");\r\n            } else {\r\n                if (!white_list[msg.sender]) {\r\n                    require(block.timestamp > unlock_time[_pid][msg.sender], \"e11\");\r\n                }\r\n            }\r\n        }\r\n        PoolInfoItem storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 pending = user.amount.mul(pool.poolConfigList.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n        if (pending > 0) {\r\n            pending_list[_pid][_user] = pending_list[_pid][_user].add(pending);\r\n        }\r\n        for (uint256 i = 0; i < _tokenIdList.length; i++) {\r\n            uint256 _tokenId = _tokenIdList[i];\r\n            if (userStakingTokenForPoolIdListSet[_pid][_user].contains(_tokenId)) {\r\n                pool.tokensList.lpToken.transferFrom(address(this), _user, _tokenId);\r\n                user.amount = user.amount.sub(1);\r\n                stakingNumForPool[_pid] = stakingNumForPool[_pid].sub(1);\r\n                userStakingTokenIdListSet[_user].remove(_tokenId);\r\n                userStakingTokenForPoolIdListSet[_pid][_user].remove(_tokenId);\r\n                emit Withdraw(_user, _pid, _tokenId);\r\n                stakingNftOlderOwnerList[address(pool.tokensList.lpToken)][_tokenId] = address(0);\r\n            }\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.poolConfigList.accCakePerShare).div(1e12);\r\n        if (userStakingTokenIdListSet[_user].length() == 0) {\r\n            stakingAddress.remove(msg.sender);\r\n        }\r\n    }\r\n\r\n    function withdrawAll(uint256 _pid) external nonReentrant {\r\n        if (poolInfo[_pid].statusList.limitWithdrawTime) {\r\n            if (!useWhiteList) {\r\n                require(block.timestamp > unlock_time[_pid][msg.sender], \"e14\");\r\n            } else {\r\n                if (!white_list[msg.sender]) {\r\n                    require(block.timestamp > unlock_time[_pid][msg.sender], \"e15\");\r\n                }\r\n            }\r\n        }\r\n        massUpdatePools();\r\n        //require(!isContract(msg.sender), \"e16\");\r\n        address _user = msg.sender;\r\n        PoolInfoItem storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 pending = user.amount.mul(pool.poolConfigList.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n        if (pending > 0) {\r\n            pending_list[_pid][_user] = pending_list[_pid][_user].add(pending);\r\n        }\r\n        uint256[] memory userCosoList = userStakingTokenForPoolIdListSet[_pid][_user].values();\r\n        for (uint i = 0; i < userCosoList.length; i++) {\r\n            pool.tokensList.lpToken.transferFrom(address(this), _user, userCosoList[i]);\r\n            user.amount = user.amount.sub(1);\r\n            stakingNumForPool[_pid] = stakingNumForPool[_pid].sub(1);\r\n            userStakingTokenIdListSet[_user].remove(userCosoList[i]);\r\n            userStakingTokenForPoolIdListSet[_pid][_user].remove(userCosoList[i]);\r\n            emit Withdraw(_user, _pid, userCosoList[i]);\r\n            stakingNftOlderOwnerList[address(pool.tokensList.lpToken)][userCosoList[i]] = address(0);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.poolConfigList.accCakePerShare).div(1e12);\r\n        if (userStakingTokenIdListSet[_user].length() == 0) {\r\n            stakingAddress.remove(msg.sender);\r\n        }\r\n    }\r\n\r\n    function _getReward(uint256 _pid, address _user) private {\r\n        updatePool(_pid);\r\n        //require(!isContract(_user), \"e6\");\r\n        PoolInfoItem storage pool = poolInfo[_pid];\r\n        if (limitGetRewardTime) {\r\n            if (!useWhiteList) {\r\n                require(block.timestamp > unlock_time[_pid][_user], \"e7\");\r\n            } else {\r\n                if (!white_list[_user]) {\r\n                    require(block.timestamp > unlock_time[_pid][_user], \"e8\");\r\n                }\r\n            }\r\n        }\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.poolConfigList.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                pending_list[_pid][_user] = pending_list[_pid][_user].add(pending);\r\n            }\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.poolConfigList.accCakePerShare).div(1e12);\r\n        if (pending_list[_pid][_user] > 0) {\r\n            uint256 leftrate;\r\n            uint256 refererrate = pool.poolConfigList.refererrate;\r\n            leftrate = uint256(100).sub(refererrate);\r\n            allrewardList[_pid][_user] = allrewardList[_pid][_user].add(pending_list[_pid][_user].mul(leftrate).div(100));\r\n            safeCakeTransfer(_user, pending_list[_pid][_user].mul(leftrate).div(100));\r\n            if (stakingNumForPool[_pid] >= pool.poolConfigList.minStakingNum) {\r\n                safeCakeTransfer(daoNftTokenUserList[poolInfo[_pid].tokensList.daoNftToken][poolInfo[_pid].poolConfigList.daoTokenId], pending_list[_pid][_user].mul(refererrate).div(100));\r\n                daoRewardNumList[daoNftTokenUserList[poolInfo[_pid].tokensList.daoNftToken][poolInfo[_pid].poolConfigList.daoTokenId]] = daoRewardNumList[daoNftTokenUserList[poolInfo[_pid].tokensList.daoNftToken][poolInfo[_pid].poolConfigList.daoTokenId]].add(pending_list[_pid][_user].mul(refererrate).div(100));\r\n            } else {\r\n                safeCakeTransfer(address(1), pending_list[_pid][_user].mul(refererrate).div(100));\r\n                daoRewardNumList[address(1)] = daoRewardNumList[address(1)].add(pending_list[_pid][_user].mul(refererrate).div(100));\r\n            }\r\n            pending_list[_pid][_user] = 0;\r\n        }\r\n    }\r\n\r\n    function getReward(uint256 _pid) external nonReentrant {\r\n        _getReward(_pid, msg.sender);\r\n    }\r\n\r\n    function massGetReward() external nonReentrant {\r\n        for (uint256 pid = 0; pid < poolLength; ++pid) {\r\n            _getReward(pid, msg.sender);\r\n        }\r\n    }\r\n\r\n    event safeCakeTransferEvent(address _to, uint256 _amount, uint256 cakeBalance);\r\n\r\n    function safeCakeTransfer(address _to, uint256 _amount) internal {\r\n        uint256 cakeBalance = cake.balanceOf(address(this));\r\n        if (_amount > cakeBalance) {\r\n            cake.transfer(_to, cakeBalance);\r\n        } else {\r\n            cake.transfer(_to, _amount);\r\n        }\r\n        emit safeCakeTransferEvent(_to, _amount, cakeBalance);\r\n    }\r\n\r\n    function setdev(address _devaddr) external {\r\n        require(msg.sender == devaddr || msg.sender == owner(), \"e18\");\r\n        devaddr = _devaddr;\r\n    }\r\n\r\n    struct getInfoForUserItem {\r\n        PoolInfoItem poolinfo;\r\n        UserInfo userinfo;\r\n        uint256 unlockTime;\r\n        uint256 stakingTime;\r\n        uint256 pendingAmount;\r\n        uint256 pendingCake;\r\n        uint256 allPendingReward;\r\n        uint256 stakingNumAll;\r\n        uint256 allreward;\r\n        uint256 lpTokenBalance;\r\n        uint256 totalAllocPoint;\r\n        uint256 minStakingNum;\r\n        uint256[] userStakingTokenIdListForPool;\r\n        bool daoNftTokenStakingStatus;\r\n        bool limitDaoNftTime;\r\n        bool limitGetRewardTime;\r\n        bool limitWithdrawTime;\r\n        bool useWhiteList;\r\n        bool userHasPool;\r\n        bool hasBurlPool;\r\n        address daoNftOwner;\r\n        address daoNftStakingUser;\r\n        uint256 daoRewardNum;\r\n        uint256[] userBurnToPoolSet;\r\n    }\r\n\r\n    function getInfoForUser(uint256 _pid, address _user) public view returns (getInfoForUserItem memory getInfoForUserInfo) {\r\n        getInfoForUserInfo.poolinfo = poolInfo[_pid];\r\n        getInfoForUserInfo.userinfo = userInfo[_pid][_user];\r\n        getInfoForUserInfo.unlockTime = unlock_time[_pid][_user];\r\n        getInfoForUserInfo.stakingTime = staking_time[_pid][_user];\r\n        getInfoForUserInfo.pendingAmount = pending_list[_pid][_user];\r\n        uint256 pending = pendingCake(_pid, _user);\r\n        getInfoForUserInfo.pendingCake = pending;\r\n        getInfoForUserInfo.allPendingReward = pending_list[_pid][_user].add(pending);\r\n        getInfoForUserInfo.stakingNumAll = stakingNumForPool[_pid];\r\n        getInfoForUserInfo.allreward = allrewardList[_pid][_user];\r\n        getInfoForUserInfo.lpTokenBalance = poolInfo[_pid].tokensList.lpToken.balanceOf(_user);\r\n        getInfoForUserInfo.totalAllocPoint = totalAllocPoint;\r\n        getInfoForUserInfo.daoNftTokenStakingStatus = daoNftTokenStakingStatusList[_pid];\r\n        getInfoForUserInfo.minStakingNum = poolInfo[_pid].poolConfigList.minStakingNum;\r\n        getInfoForUserInfo.userStakingTokenIdListForPool = userStakingTokenForPoolIdListSet[_pid][_user].values();\r\n        getInfoForUserInfo.limitDaoNftTime = limitDaoNftTime;\r\n        getInfoForUserInfo.limitGetRewardTime = limitGetRewardTime;\r\n        getInfoForUserInfo.limitWithdrawTime = poolInfo[_pid].statusList.limitWithdrawTime;\r\n        getInfoForUserInfo.useWhiteList = useWhiteList;\r\n        getInfoForUserInfo.daoNftOwner = (poolInfo[_pid].tokensList.daoNftToken).ownerOf(poolInfo[_pid].poolConfigList.daoTokenId);\r\n        getInfoForUserInfo.daoNftStakingUser = daoNftTokenUserList[poolInfo[_pid].tokensList.daoNftToken][poolInfo[_pid].poolConfigList.daoTokenId];\r\n        getInfoForUserInfo.daoRewardNum = daoRewardNumList[_user];\r\n        getInfoForUserInfo.userBurnToPoolSet = userBurnToPoolSet[_user].values();\r\n        getInfoForUserInfo.userHasPool = userHasPool[_user];\r\n        getInfoForUserInfo.hasBurlPool = hasBurlPool[_user];\r\n    }\r\n\r\n    function MassGetInfoForUser(address _user) external view returns (getInfoForUserItem[] memory getInfoForUserInfoList) {\r\n        getInfoForUserInfoList = new getInfoForUserItem[](poolLength);\r\n        for (uint256 i = 0; i < poolLength; i++) {\r\n            getInfoForUserInfoList[i] = getInfoForUser(i, _user);\r\n        }\r\n    }\r\n\r\n    function getTokensReserves(address[] memory _pairList) external view returns (pairReservesItem[] memory pairReservesList) {\r\n        pairReservesList = new pairReservesItem[](_pairList.length);\r\n        for (uint256 i = 0; i < _pairList.length; i++)\r\n        {\r\n            address _pair = _pairList[i];\r\n            address token0 = pair(_pair).token0();\r\n            address token1 = pair(_pair).token1();\r\n            (uint256 reserve0, uint256 reserve1,) = pair(_pair).getReserves();\r\n            pairReservesList[i] = pairReservesItem(token0, token1, reserve0, reserve1, IERC20(token0).decimals(), IERC20(token1).decimals(), IERC20(token0).symbol(), IERC20(token1).symbol(), IERC20(token0).name(), IERC20(token1).name());\r\n        }\r\n    }\r\n\r\n    function getuserStakingTokenIdList(address _user, uint256 _pid) external view returns (uint256[] memory stakingList) {\r\n        stakingList = userStakingTokenForPoolIdListSet[_pid][_user].values();\r\n    }\r\n\r\n    function getuserStakingTokenIdList(address _user) external view returns (uint256[] memory stakingList) {\r\n        return userStakingTokenIdListSet[_user].values();\r\n    }\r\n\r\n    function userStakingTokenIdList(address _user, uint256 _index) external view returns (uint256) {\r\n        return userStakingTokenIdListSet[_user].values()[_index];\r\n    }\r\n\r\n    function userStakingNumList(address _user) public view returns (uint256) {\r\n        return userStakingTokenIdListSet[_user].length();\r\n    }\r\n\r\n    function getStakingAddressItem(uint256 _index) public view returns (address) {\r\n        return stakingAddress.at(_index);\r\n    }\r\n\r\n    function getStakingAddressList(uint256[] memory _indexList) public view returns (address[] memory AddressList) {\r\n        AddressList = new address[](_indexList.length);\r\n        for (uint256 i = 0; i < _indexList.length; i++) {\r\n            AddressList[i] = stakingAddress.at(_indexList[i]);\r\n        }\r\n    }\r\n\r\n    function getStakingAddressList() public view returns (address[] memory) {\r\n        return stakingAddress.values();\r\n    }\r\n\r\n    function getStakingAddressNum() public view returns (uint256) {\r\n        return stakingAddress.length();\r\n    }\r\n\r\n    function getBurnIdList() external view returns (uint256[] memory) {\r\n        return burnIdList.values();\r\n    }\r\n\r\n    function getBurnId(uint256 _index) external view returns (uint256 _tokenId, address _burnAddress) {\r\n        _tokenId = burnIdList.at(_index);\r\n        _burnAddress = burnToPoolAddressList[_tokenId];\r\n    }\r\n\r\n    function getBurnIdNum() external view returns (uint256) {\r\n        return burnIdList.length();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_burnNftToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_daoNftToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cakeBalance\",\"type\":\"uint256\"}],\"name\":\"safeCakeTransferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cakeReward\",\"type\":\"uint256\"}],\"name\":\"updatePoolEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"MassGetInfoForUser\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"daoNftToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"lpToken\",\"type\":\"address\"}],\"internalType\":\"struct MasterChefForCOSOD.poolInfo0\",\"name\":\"tokensList\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"limitWithdrawTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pool_status\",\"type\":\"bool\"}],\"internalType\":\"struct MasterChefForCOSOD.poolInfo1\",\"name\":\"statusList\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staking_stock_length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakingNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererrate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChefForCOSOD.poolInfo2\",\"name\":\"poolConfigList\",\"type\":\"tuple\"}],\"internalType\":\"struct MasterChefForCOSOD.PoolInfoItem\",\"name\":\"poolinfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChefForCOSOD.UserInfo\",\"name\":\"userinfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingCake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allPendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingNumAll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allreward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakingNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"userStakingTokenIdListForPool\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"daoNftTokenStakingStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitDaoNftTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitGetRewardTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitWithdrawTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useWhiteList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"userHasPool\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasBurlPool\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"daoNftOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daoNftStakingUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"daoRewardNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"userBurnToPoolSet\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MasterChefForCOSOD.getInfoForUserItem[]\",\"name\":\"getInfoForUserInfoList\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_limitWithdrawTime\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_staking_stock_length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStakingNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daoRewardRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_daoNftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_daoTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnId\",\"type\":\"uint256\"}],\"name\":\"addBurnPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_limitWithdrawTime\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_staking_stock_length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStakingNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daoRewardRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_daoNftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_daoTokenId\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allrewardList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burnToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnToPoolAddressList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cake\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daoNftTokenStakingStatusList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daoNftTokenUserList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"daoRewardNumList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIdList\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"disablePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"enablePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBurnId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnIdList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnIdNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getInfoForUser\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"daoNftToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"lpToken\",\"type\":\"address\"}],\"internalType\":\"struct MasterChefForCOSOD.poolInfo0\",\"name\":\"tokensList\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"limitWithdrawTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pool_status\",\"type\":\"bool\"}],\"internalType\":\"struct MasterChefForCOSOD.poolInfo1\",\"name\":\"statusList\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staking_stock_length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakingNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererrate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChefForCOSOD.poolInfo2\",\"name\":\"poolConfigList\",\"type\":\"tuple\"}],\"internalType\":\"struct MasterChefForCOSOD.PoolInfoItem\",\"name\":\"poolinfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChefForCOSOD.UserInfo\",\"name\":\"userinfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingCake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allPendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingNumAll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allreward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakingNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"userStakingTokenIdListForPool\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"daoNftTokenStakingStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitDaoNftTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitGetRewardTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitWithdrawTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useWhiteList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"userHasPool\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasBurlPool\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"daoNftOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daoNftStakingUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"daoRewardNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"userBurnToPoolSet\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MasterChefForCOSOD.getInfoForUserItem\",\"name\":\"getInfoForUserInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLpSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getStakingAddressItem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingAddressList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indexList\",\"type\":\"uint256[]\"}],\"name\":\"getStakingAddressList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"AddressList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingAddressNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pairList\",\"type\":\"address[]\"}],\"name\":\"getTokensReserves\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals1\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol0\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name0\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name1\",\"type\":\"string\"}],\"internalType\":\"struct MasterChefForCOSOD.pairReservesItem[]\",\"name\":\"pairReservesList\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getuserStakingTokenIdList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakingList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getuserStakingTokenIdList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakingList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitDaoNftTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitGetRewardTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massGetReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingCake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pending_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address_list\",\"type\":\"address[]\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"_cake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cakePerBlock\",\"type\":\"uint256\"}],\"name\":\"setCakePerBlockAndCake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_limitDaoNftTime\",\"type\":\"bool\"}],\"name\":\"setLimitDaoNftTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_limitGetRewardTime\",\"type\":\"bool\"}],\"name\":\"setLimitGetRewardTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_limitWithdrawTime\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_staking_stock_length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStakingNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daoRewardRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_daoNftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_daoTokenId\",\"type\":\"uint256\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useMintMode\",\"type\":\"bool\"}],\"name\":\"setUseMintMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useWhiteList\",\"type\":\"bool\"}],\"name\":\"setUseWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address_list\",\"type\":\"address[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"setdev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"stakingDaoNftToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingNftOlderOwnerList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingNumForPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staking_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlock_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierNumber\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useMintMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userStakingNumList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"userStakingTokenIdList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"white_list\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIdList\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawDaoNftToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterChefForCOSOD", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000067c943794a9edbcf2e2cc5bdbbdc964a8c4b8b47000000000000000000000000c8335e04016be72783b3d3d25f864606f3f666e7", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b73ab71b2434bdb8311ff7fe87c824deb04672a69e531c3b2aeff7e32f8f89dc"}