{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/sale..sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./EnumerableSet.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./Spotic.sol\\\";\\r\\nimport \\\"./AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract SalesToken is Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    EnumerableSet.AddressSet tokenAddresses;\\r\\n\\r\\n    uint256 public rate = 50000;  // SPOTIC / USD * 1000\\r\\n    uint256 public hardCap = 1500000000000000000000000000;\\r\\n    uint256 public startTime;\\r\\n    uint256 public endTime = 1750222493;\\r\\n    uint256 public purchaseLimit = 8000000000000000000000000000;\\r\\n    uint256 public referralPercent = 1000; // 10% = 1000 / 10000\\r\\n\\r\\n    bool private paused = false;\\r\\n    bool private unlimited = false;\\r\\n    bool private preSale = true;\\r\\n\\r\\n    uint256 curDecimal = 10 ** 18;\\r\\n\\r\\n    address public spoticAddr;\\r\\n\\r\\n    address usdcAddr = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\\r\\n    address usdtAddr = 0x55d398326f99059fF775485246999027B3197955;\\r\\n    address busdAddr = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\r\\n    address dogeAddr = 0xbA2aE424d960c26247Dd6c32edC70B295c744C43;\\r\\n    address wethAddr = 0x4DB5a66E937A9F4473fA95b1cAF1d1E1D62E29EA;\\r\\n    address solAddr = 0xFEa6aB80cd850c3e63374Bc737479aeEC0E8b9a1;\\r\\n\\r\\n    address public bnbPriceFeedAddress =\\r\\n        0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE; //bnb/usd\\r\\n    address public dogePriceFeedAddress =\\r\\n        0x3AB0A0d137D4F946fBB19eecc6e92E64660231C8; //doge/usd\\r\\n    address public solPriceFeedAddress =\\r\\n        0x0E8a53DD9c13589df6382F13dA6B3Ec8F919B323; // sol/usd\\r\\n    address public etherPriceFeedAddress =\\r\\n        0x9ef1B8c0E4F7dc8bF5719Ea496883DC6401d5b2e; // ether/usd\\r\\n\\r\\n    mapping(address => uint256) purchasedAmount;\\r\\n\\r\\n    constructor() {\\r\\n        startTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    modifier isNotPaused() {\\r\\n        require(!paused, \\\"purchasing is paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier endedPreSale() {\\r\\n        require(!preSale, \\\"Token is on presale\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isPurchasingPeriod() {\\r\\n        require(contractStarted() && contractNotEnded(), \\\"purchasing time expired\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier existedSpotic() {\\r\\n        require(spoticAddr != address(0), \\\"Spotic Address is not set\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getInternalBNBRate() internal view returns (uint256) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(bnbPriceFeedAddress);\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n\\r\\n        // convert the price from 8 decimal places to 18 decimal places\\r\\n        uint256 decimals = uint256(priceFeed.decimals());\\r\\n        uint256 _bnbRate = rate.mul(uint256(price)).div(10 ** (decimals));\\r\\n        return _bnbRate;\\r\\n    }\\r\\n\\r\\n    function getInternalDogeRate() internal view returns (uint256) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(dogePriceFeedAddress);\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n\\r\\n        // convert the price from 8 decimal places to 18 decimal places\\r\\n        uint256 decimals = uint256(priceFeed.decimals());\\r\\n        uint256 _dogeRate = rate.mul(uint256(price)).div(10 ** (decimals));\\r\\n        return _dogeRate;\\r\\n    }\\r\\n\\r\\n    function getInternalEtherRate() internal view returns (uint256) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(etherPriceFeedAddress);\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n\\r\\n        // convert the price from 8 decimal places to 18 decimal places\\r\\n        uint256 decimals = uint256(priceFeed.decimals());\\r\\n        uint256 _etherRate = rate.mul(uint256(price)).div(10 ** (decimals));\\r\\n        return _etherRate;\\r\\n    }\\r\\n\\r\\n    function getInternalSolRate() internal view returns (uint256) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(solPriceFeedAddress);\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n\\r\\n        // // convert the price from 8 decimal places to 18 decimal places\\r\\n        uint256 decimals = uint256(priceFeed.decimals());\\r\\n        uint256 _solRate = rate.mul(uint256(price)).div(10 ** (decimals));\\r\\n        return _solRate;\\r\\n    }\\r\\n\\r\\n    function getTokenRate(address tokenAddress) internal view returns (uint256) {\\r\\n        uint256 tokenRate = 1;\\r\\n\\r\\n        if (\\r\\n            tokenAddress == usdcAddr ||\\r\\n            tokenAddress == usdtAddr ||\\r\\n            tokenAddress == busdAddr\\r\\n        ) {\\r\\n            tokenRate = rate;\\r\\n        } else if (tokenAddress == solAddr) {\\r\\n            tokenRate = getInternalSolRate();\\r\\n        } else if  (tokenAddress == wethAddr) {\\r\\n            tokenRate == getInternalEtherRate();\\r\\n        } else if (tokenAddress == dogeAddr) {\\r\\n            tokenRate = getInternalDogeRate();\\r\\n        } else {\\r\\n            revert(\\\"This token is not approved yet\\\");\\r\\n        }\\r\\n\\r\\n        return tokenRate;\\r\\n    }\\r\\n\\r\\n    function checkIfOwner() public view returns (bool) {\\r\\n        return msg.sender == owner();\\r\\n    }\\r\\n\\r\\n    function contractStarted() internal view returns (bool) {\\r\\n        return block.timestamp >= startTime;\\r\\n    }\\r\\n\\r\\n    function contractNotEnded() internal view returns (bool) {\\r\\n        return block.timestamp < endTime;\\r\\n    }\\r\\n\\r\\n    function getBnbRate() public view returns (uint256) {\\r\\n        uint256 _bnbRate = getInternalBNBRate();\\r\\n        return _bnbRate;\\r\\n    }\\r\\n\\r\\n    function getSolRate() public view returns (uint256) {\\r\\n        uint256 _solRate = getInternalSolRate();\\r\\n        return _solRate;\\r\\n    }\\r\\n\\r\\n    function getEtherRate() public view returns (uint256) {\\r\\n        uint256 _etherRate = getInternalEtherRate();\\r\\n        return _etherRate;\\r\\n    }\\r\\n\\r\\n    function getDogeRate() public view returns (uint256) {\\r\\n        uint256 _dogeRate = getInternalDogeRate();\\r\\n        return _dogeRate;\\r\\n    }\\r\\n\\r\\n    function getStableRate() public view returns (uint256) {\\r\\n        return rate;\\r\\n    }\\r\\n\\r\\n    function getPurchaseLimit() public view returns (uint256) {\\r\\n        return purchaseLimit;\\r\\n    }\\r\\n\\r\\n    function getStatusOfLimit() public view returns (bool) {\\r\\n        return unlimited;\\r\\n    }\\r\\n\\r\\n    function getStartedTime() public view returns (uint256) {\\r\\n        return startTime;\\r\\n    }\\r\\n\\r\\n    function getEndTime() public view returns (uint256) {\\r\\n        return endTime;\\r\\n    }\\r\\n\\r\\n    function getStatus() public view returns (bool) {\\r\\n        return paused;\\r\\n    }\\r\\n\\r\\n    function getHardCap() public view returns (uint256) {\\r\\n        return hardCap;\\r\\n    }\\r\\n\\r\\n    function getReferralPercent() public view returns (uint256) {\\r\\n        return referralPercent;\\r\\n    }\\r\\n\\r\\n    function setRate(uint256 _rate) external onlyOwner {\\r\\n        rate = _rate;\\r\\n    }\\r\\n\\r\\n    function setHardCap(uint256 _hardCap) external onlyOwner {\\r\\n        hardCap = _hardCap;\\r\\n    }\\r\\n\\r\\n    function setStartTime(uint256 _startTime) external onlyOwner {\\r\\n        startTime = _startTime;\\r\\n    }\\r\\n\\r\\n    function setEndTime(uint256 _endTime) external onlyOwner {\\r\\n        endTime = _endTime;\\r\\n    }\\r\\n\\r\\n    function setPurchaseLimit(uint256 _purchaseLimit) external onlyOwner {\\r\\n        purchaseLimit = _purchaseLimit;\\r\\n        unlimited = false;\\r\\n    }\\r\\n\\r\\n    function setReferralPercent(\\r\\n        uint256 _referralPercent\\r\\n    ) external onlyOwner {\\r\\n        referralPercent = _referralPercent;\\r\\n    }\\r\\n\\r\\n    function setSpoticAddr(address _spoticAddr) external onlyOwner {\\r\\n        spoticAddr = _spoticAddr;\\r\\n    }\\r\\n\\r\\n    function setPaused(bool _paused) external onlyOwner {\\r\\n        paused = _paused;\\r\\n    }\\r\\n\\r\\n    function setUnlimited() external onlyOwner {\\r\\n        unlimited = true;\\r\\n    }\\r\\n\\r\\n    function setPresale(bool _preSale) external  onlyOwner {\\r\\n        preSale = _preSale;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public onlyOwner returns (bool) {\\r\\n        Spotic spoticInstance = Spotic(payable(spoticAddr));\\r\\n        spoticInstance.burn(amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function purchaseWithBnb() external payable isNotPaused existedSpotic isPurchasingPeriod nonReentrant {\\r\\n        IBEP20 spoticInstance = IBEP20(spoticAddr);\\r\\n        uint256 balance = spoticInstance.balanceOf(address(this));\\r\\n        uint256 bnbRate = getInternalBNBRate();\\r\\n        uint256 amount = msg.value * bnbRate / 1000;\\r\\n        require(amount > 0, \\\"You have to purchase more than zero\\\");\\r\\n        require(amount <= balance, \\\"You cant purchase more than balance\\\");\\r\\n        if (!unlimited) {\\r\\n            require(\\r\\n                purchaseLimit >= purchasedAmount[msg.sender] + amount,\\r\\n                \\\"You cant purchase more than limit\\\"\\r\\n            );\\r\\n        }\\r\\n        purchasedAmount[msg.sender] += amount;\\r\\n        hardCap -= amount;\\r\\n        spoticInstance.transfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function referralPurchaseWithBnb(\\r\\n        address _referrencedAddress\\r\\n    ) external payable isNotPaused existedSpotic isPurchasingPeriod nonReentrant {\\r\\n        IBEP20 spoticInstance = IBEP20(spoticAddr);\\r\\n        uint256 balance = spoticInstance.balanceOf(address(this));\\r\\n        uint256 bnbRate = getInternalBNBRate();\\r\\n        uint256 amount = msg.value * bnbRate / 1000;\\r\\n        require(amount > 0, \\\"You have to purchase more than zero\\\");\\r\\n        require(amount <= balance, \\\"You cant purchase more than balance\\\");\\r\\n        if (!unlimited) {\\r\\n            require(\\r\\n                purchaseLimit >= purchasedAmount[msg.sender] + amount,\\r\\n                \\\"You cant purchase more than limit\\\"\\r\\n            );\\r\\n        }\\r\\n        require(\\r\\n            _referrencedAddress != address(0),\\r\\n            \\\"Referrenced Address should not zero\\\"\\r\\n        );\\r\\n        uint256 referrencedAmount = amount.mul(referralPercent).div(10000);\\r\\n        purchasedAmount[msg.sender] += amount - referrencedAmount;\\r\\n        hardCap -= amount;\\r\\n        spoticInstance.transfer(msg.sender, amount - referrencedAmount);\\r\\n    }\\r\\n\\r\\n    function purchaseBnbWithSpotic(\\r\\n        uint256 spoticAmount\\r\\n    ) external isNotPaused existedSpotic isPurchasingPeriod endedPreSale nonReentrant {\\r\\n        IBEP20 spoticInstance = IBEP20(spoticAddr);\\r\\n        uint256 balance = spoticInstance.balanceOf(msg.sender);\\r\\n        uint256 bnbRate = getInternalBNBRate();\\r\\n        uint256 amount = spoticAmount.mul(1000).div(bnbRate);\\r\\n        require(amount > 0, \\\"You have to purchase more than zero\\\");\\r\\n        require(amount <= balance, \\\"You cant purchase more than balance\\\");\\r\\n\\r\\n        spoticInstance.transferFrom(msg.sender, address(this), spoticAmount);\\r\\n        payable(msg.sender).transfer(amount);\\r\\n    }\\r\\n\\r\\n    function referralPurchaseBnbWithSpotic(\\r\\n        address _referrencedAddress,\\r\\n        uint256 spoticAmount\\r\\n    ) external isNotPaused existedSpotic isPurchasingPeriod endedPreSale nonReentrant {\\r\\n        IBEP20 spoticInstance = IBEP20(spoticAddr);\\r\\n        uint256 balance = spoticInstance.balanceOf(msg.sender);\\r\\n        uint256 bnbRate = getInternalBNBRate();\\r\\n        uint256 amount = spoticAmount.div(bnbRate).mul(1000);\\r\\n        require(amount > 0, \\\"You have to purchase more than zero\\\");\\r\\n        require(amount <= balance, \\\"You cant purchase more than balance\\\");\\r\\n\\r\\n        require(\\r\\n            _referrencedAddress != address(0),\\r\\n            \\\"Referrenced Address should not zero\\\"\\r\\n        );\\r\\n        uint256 referrencedAmount = amount.mul(referralPercent).div(10000);\\r\\n\\r\\n        payable(_referrencedAddress).transfer(referrencedAmount);\\r\\n        payable(msg.sender).transfer(amount - referrencedAmount);\\r\\n\\r\\n        spoticInstance.transferFrom(msg.sender, address(this), spoticAmount);\\r\\n    }\\r\\n\\r\\n    function purchaseWithToken(\\r\\n        uint256 tokenAmount,\\r\\n        address tokenAddress\\r\\n    ) external isNotPaused existedSpotic isPurchasingPeriod nonReentrant {\\r\\n        IBEP20 tokenInstance = IBEP20(tokenAddress);\\r\\n        IBEP20 spoticInstance = IBEP20(spoticAddr);\\r\\n\\r\\n        uint256 balance = tokenInstance.balanceOf(msg.sender);\\r\\n        uint256 tokenRate = getTokenRate(tokenAddress);\\r\\n\\r\\n        uint256 decimals = tokenInstance.decimals();\\r\\n        uint256 amount = tokenAmount.mul(tokenRate).div(1000).mul(curDecimal).div(10 ** decimals);\\r\\n\\r\\n        require(amount > 0, \\\"You have to purchase more than zero\\\");\\r\\n        require(amount <= balance, \\\"You cant purchase more than balance\\\");\\r\\n\\r\\n        if (!unlimited) {\\r\\n            require(\\r\\n                purchaseLimit > purchasedAmount[msg.sender] + amount,\\r\\n                \\\"You cant purchase more than limit\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        spoticInstance.transfer(msg.sender, amount);\\r\\n        tokenInstance.transferFrom(msg.sender, address(this), tokenAmount);\\r\\n\\r\\n        purchasedAmount[msg.sender] += amount;\\r\\n        hardCap -= amount;\\r\\n    }\\r\\n\\r\\n    function referralPurchaseWithToken(\\r\\n        address _referrencedAddress,\\r\\n        uint256 tokenAmount,\\r\\n        address tokenAddress\\r\\n    ) external isNotPaused existedSpotic isPurchasingPeriod nonReentrant {\\r\\n        IBEP20 tokenInstance = IBEP20(tokenAddress);\\r\\n        IBEP20 spoticInstance = IBEP20(spoticAddr);\\r\\n        uint256 balance = tokenInstance.balanceOf(msg.sender);\\r\\n        uint256 tokenRate = getTokenRate(tokenAddress);\\r\\n\\r\\n        uint256 decimals = tokenInstance.decimals();\\r\\n        uint256 amount = tokenAmount.mul(tokenRate).div(1000).mul(curDecimal).div(10 ** decimals);\\r\\n\\r\\n        require(amount > 0, \\\"You have to purchase more than zero\\\");\\r\\n        require(amount <= balance, \\\"You cant purchase more than balance\\\");\\r\\n\\r\\n        if (!unlimited) {\\r\\n            require(\\r\\n                purchaseLimit > purchasedAmount[msg.sender] + amount,\\r\\n                \\\"You cant purchase more than limit\\\"\\r\\n            );\\r\\n        }\\r\\n        require(\\r\\n            _referrencedAddress != address(0),\\r\\n            \\\"Referrenced Address should not zero\\\"\\r\\n        );\\r\\n        uint256 referrencedAmount = amount.mul(referralPercent).div(10000);\\r\\n\\r\\n        spoticInstance.transfer(msg.sender, amount - referrencedAmount);\\r\\n        spoticInstance.transfer(_referrencedAddress, referrencedAmount);\\r\\n        tokenInstance.transferFrom(msg.sender, address(this), tokenAmount);\\r\\n\\r\\n        purchasedAmount[msg.sender] += amount - referrencedAmount;\\r\\n        hardCap -= amount;\\r\\n    }\\r\\n\\r\\n    function purchaseTokenWithSpotic(\\r\\n        uint256 spoticAmount,\\r\\n        address tokenAddress\\r\\n    ) external isNotPaused existedSpotic isPurchasingPeriod endedPreSale nonReentrant {\\r\\n        IBEP20 tokenInstance = IBEP20(tokenAddress);\\r\\n        IBEP20 spoticInstance = IBEP20(spoticAddr);\\r\\n        uint256 balance = spoticInstance.balanceOf(msg.sender);\\r\\n        uint256 tokenRate = getTokenRate(tokenAddress);\\r\\n\\r\\n        uint256 decimals = tokenInstance.decimals();\\r\\n        uint256 amount = spoticAmount.mul(10 ** decimals).div(curDecimal).div(tokenRate).mul(1000);\\r\\n\\r\\n        require(amount > 0, \\\"You have to purchase more than zero\\\");\\r\\n        require(amount <= balance, \\\"You cant purchase more than balance\\\");\\r\\n\\r\\n        spoticInstance.transferFrom(msg.sender, address(this), spoticAmount);\\r\\n        tokenInstance.transfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function referralPurchaseTokenWithSpotic(\\r\\n        address _referrencedAddress,\\r\\n        uint256 spoticAmount,\\r\\n        address tokenAddress\\r\\n    ) external isNotPaused existedSpotic isPurchasingPeriod endedPreSale nonReentrant {\\r\\n        IBEP20 tokenInstance = IBEP20(tokenAddress);\\r\\n        IBEP20 spoticInstance = IBEP20(spoticAddr);\\r\\n        uint256 balance = tokenInstance.balanceOf(msg.sender);\\r\\n        uint256 tokenRate = getTokenRate(tokenAddress);\\r\\n\\r\\n        uint256 decimals = tokenInstance.decimals();\\r\\n        uint256 amount = spoticAmount.mul(10 ** decimals).div(curDecimal).div(tokenRate).mul(1000);\\r\\n\\r\\n        require(amount > 0, \\\"You have to purchase more than zero\\\");\\r\\n        require(amount <= balance, \\\"You cant purchase more than balance\\\");\\r\\n\\r\\n        if (!unlimited) {\\r\\n            require(\\r\\n                purchaseLimit > purchasedAmount[msg.sender] + amount,\\r\\n                \\\"You cant purchase more than limit\\\"\\r\\n            );\\r\\n        }\\r\\n        require(\\r\\n            _referrencedAddress != address(0),\\r\\n            \\\"Referrenced Address should not zero\\\"\\r\\n        );\\r\\n        uint256 referrencedAmount = amount.mul(referralPercent).div(10000);\\r\\n\\r\\n        tokenInstance.transfer(msg.sender, amount - referrencedAmount);\\r\\n        tokenInstance.transfer(_referrencedAddress, referrencedAmount);\\r\\n        spoticInstance.transferFrom(msg.sender, address(this), spoticAmount);\\r\\n    }\\r\\n\\r\\n    function withdrawBnb() external onlyOwner {\\r\\n        payable(address(msg.sender)).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function withdrawToken(address tokenAddress) external onlyOwner {\\r\\n        IBEP20 tokenInstance = IBEP20(tokenAddress);\\r\\n\\r\\n        tokenInstance.transfer(\\r\\n            msg.sender,\\r\\n            tokenInstance.balanceOf(address(this))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawAll() external onlyOwner {\\r\\n        for (uint256 i = 0; i < tokenAddresses.length(); i++) {\\r\\n            IBEP20 tokenInstance = IBEP20(tokenAddresses.at(i));\\r\\n\\r\\n            tokenInstance.transfer(\\r\\n                msg.sender,\\r\\n                tokenInstance.balanceOf(address(this))\\r\\n            );\\r\\n        }\\r\\n\\r\\n        payable(address(msg.sender)).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function getBnbBalance() public view returns (uint256 bnbAmount) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function getTokenBalance(\\r\\n        address tokenAddress\\r\\n    ) public view returns (uint256 bnbAmount) {\\r\\n        IBEP20 tokenInstance = IBEP20(tokenAddress);\\r\\n        return tokenInstance.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface AggregatorV3Interface {\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  function description() external view returns (string memory);\\r\\n\\r\\n  function version() external view returns (uint256);\\r\\n\\r\\n  function getRoundData(\\r\\n    uint80 _roundId\\r\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\r\\n\\r\\n  function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Spotic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\n\\r\\ncontract Spotic is Context, IBEP20, Ownable {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  mapping (address => uint256) private _balances;\\r\\n\\r\\n  mapping (address => mapping (address => uint256)) private _allowances;\\r\\n\\r\\n  uint256 private _totalSupply;\\r\\n  uint8 public _decimals;\\r\\n  string public _symbol;\\r\\n  string public _name;\\r\\n\\r\\n  constructor() {\\r\\n    _name = \\\"Spotic Token\\\";\\r\\n    _symbol = \\\"Spotic\\\";\\r\\n    _decimals = 18;\\r\\n    _totalSupply = 10000000000000000000000000000;\\r\\n    _balances[msg.sender] = _totalSupply;\\r\\n\\r\\n    emit Transfer(address(0), msg.sender, _totalSupply);\\r\\n  }\\r\\n\\r\\n  event Received(address, uint);\\r\\n  \\r\\n  receive() external payable {\\r\\n      emit Received(msg.sender, msg.value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the bep token owner.\\r\\n   */\\r\\n  function getOwner() external view returns (address) {\\r\\n    return owner();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token decimals.\\r\\n   */\\r\\n  function decimals() external view returns (uint8) {\\r\\n    return _decimals;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token symbol.\\r\\n   */\\r\\n  function symbol() external view returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Returns the token name.\\r\\n  */\\r\\n  function name() external view returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-totalSupply}.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-balanceOf}.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256) {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-transfer}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `recipient` cannot be the zero address.\\r\\n   * - the caller must have a balance of at least `amount`.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool) {\\r\\n    _transfer(_msgSender(), recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-allowance}.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256) {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-approve}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool) {\\r\\n    _approve(_msgSender(), spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-transferFrom}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n   * required by the EIP. See the note at the beginning of {BEP20};\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - `sender` and `recipient` cannot be the zero address.\\r\\n   * - `sender` must have a balance of at least `amount`.\\r\\n   * - the caller must have allowance for `sender`'s tokens of at least\\r\\n   * `amount`.\\r\\n   */\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\\r\\n    _transfer(sender, recipient, amount);\\r\\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"BEP20: transfer amount exceeds allowance\\\"));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {BEP20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {BEP20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   * - `spender` must have allowance for the caller of at least\\r\\n   * `subtractedValue`.\\r\\n   */\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"BEP20: decreased allowance below zero\\\"));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\\r\\n   * the total supply.\\r\\n   *\\r\\n   * Requirements\\r\\n   *\\r\\n   * - `msg.sender` must be the token owner\\r\\n   */\\r\\n  function mint(uint256 amount) public onlyOwner returns (bool) {\\r\\n    _mint(_msgSender(), amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Burn `amount` tokens and decreasing the total supply.\\r\\n   */\\r\\n  function burn(uint256 amount) public returns (bool) {\\r\\n    _burn(_msgSender(), amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function burnFrom(address account, uint256 amount) public returns (bool) {\\r\\n    _burnFrom(account, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n   *\\r\\n   * This is internal function is equivalent to {transfer}, and can be used to\\r\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `sender` cannot be the zero address.\\r\\n   * - `recipient` cannot be the zero address.\\r\\n   * - `sender` must have a balance of at least `amount`.\\r\\n   */\\r\\n  function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n    require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n    require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n\\r\\n    _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: transfer amount exceeds balance\\\");\\r\\n    _balances[recipient] = _balances[recipient].add(amount);\\r\\n    emit Transfer(sender, recipient, amount);\\r\\n  }\\r\\n\\r\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n   * the total supply.\\r\\n   *\\r\\n   * Emits a {Transfer} event with `from` set to the zero address.\\r\\n   *\\r\\n   * Requirements\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   */\\r\\n  function _mint(address account, uint256 amount) internal {\\r\\n    require(account != address(0), \\\"BEP20: mint to the zero address\\\");\\r\\n\\r\\n    _totalSupply = _totalSupply.add(amount);\\r\\n    _balances[account] = _balances[account].add(amount);\\r\\n    emit Transfer(address(0), account, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n   * total supply.\\r\\n   *\\r\\n   * Emits a {Transfer} event with `to` set to the zero address.\\r\\n   *\\r\\n   * Requirements\\r\\n   *\\r\\n   * - `account` cannot be the zero address.\\r\\n   * - `account` must have at least `amount` tokens.\\r\\n   */\\r\\n  function _burn(address account, uint256 amount) internal {\\r\\n    require(account != address(0), \\\"BEP20: burn from the zero address\\\");\\r\\n\\r\\n    _balances[account] = _balances[account].sub(amount, \\\"BEP20: burn amount exceeds balance\\\");\\r\\n    _totalSupply = _totalSupply.sub(amount);\\r\\n    emit Transfer(account, address(0), amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n   *\\r\\n   * This is internal function is equivalent to `approve`, and can be used to\\r\\n   * e.g. set automatic allowances for certain subsystems, etc.\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `owner` cannot be the zero address.\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function _approve(address owner, address spender, uint256 amount) internal {\\r\\n    require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\r\\n    require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\r\\n\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\r\\n   * from the caller's allowance.\\r\\n   *\\r\\n   * See {_burn} and {_approve}.\\r\\n   */\\r\\n  function _burnFrom(address account, uint256 amount) internal {\\r\\n    _burn(account, amount);\\r\\n    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"BEP20: burn amount exceeds allowance\\\"));\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IBEP20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token decimals.\\r\\n   */\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token symbol.\\r\\n   */\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n  * @dev Returns the token name.\\r\\n  */\\r\\n  function name() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the bep token owner.\\r\\n   */\\r\\n  function getOwner() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address _owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```solidity\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n *\\r\\n * [WARNING]\\r\\n * ====\\r\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\r\\n * unusable.\\r\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\r\\n *\\r\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\r\\n * array of EnumerableSet.\\r\\n * ====\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping(bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n            // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            if (lastIndex != toDeleteIndex) {\\r\\n                bytes32 lastValue = set._values[lastIndex];\\r\\n\\r\\n                // Move the last value to the index where the value to delete is\\r\\n                set._values[toDeleteIndex] = lastValue;\\r\\n                // Update the index for the moved value\\r\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\r\\n            }\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(\\r\\n        Set storage set,\\r\\n        bytes32 value\\r\\n    ) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(\\r\\n        Set storage set,\\r\\n        uint256 index\\r\\n    ) private view returns (bytes32) {\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n        return set._values;\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(\\r\\n        Bytes32Set storage set,\\r\\n        bytes32 value\\r\\n    ) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(\\r\\n        Bytes32Set storage set,\\r\\n        bytes32 value\\r\\n    ) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(\\r\\n        Bytes32Set storage set,\\r\\n        bytes32 value\\r\\n    ) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(\\r\\n        Bytes32Set storage set,\\r\\n        uint256 index\\r\\n    ) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(\\r\\n        Bytes32Set storage set\\r\\n    ) internal view returns (bytes32[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        bytes32[] memory result;\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(\\r\\n        AddressSet storage set,\\r\\n        address value\\r\\n    ) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(\\r\\n        AddressSet storage set,\\r\\n        address value\\r\\n    ) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(\\r\\n        AddressSet storage set,\\r\\n        address value\\r\\n    ) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(\\r\\n        AddressSet storage set,\\r\\n        uint256 index\\r\\n    ) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(\\r\\n        AddressSet storage set\\r\\n    ) internal view returns (address[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        address[] memory result;\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(\\r\\n        UintSet storage set,\\r\\n        uint256 value\\r\\n    ) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(\\r\\n        UintSet storage set,\\r\\n        uint256 value\\r\\n    ) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(\\r\\n        UintSet storage set,\\r\\n        uint256 index\\r\\n    ) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(\\r\\n        UintSet storage set\\r\\n    ) internal view returns (uint256[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        uint256[] memory result;\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\r\\n     * `nonReentrant` function in the call stack.\\r\\n     */\\r\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\r\\n        return _status == _ENTERED;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bnbPriceFeedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkIfOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dogePriceFeedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etherPriceFeedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBnbBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBnbRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDogeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEtherRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPurchaseLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferralPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSolRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStableRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatusOfLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"spoticAmount\",\"type\":\"uint256\"}],\"name\":\"purchaseBnbWithSpotic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"spoticAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"purchaseTokenWithSpotic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseWithBnb\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"purchaseWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrencedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"spoticAmount\",\"type\":\"uint256\"}],\"name\":\"referralPurchaseBnbWithSpotic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrencedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"spoticAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"referralPurchaseTokenWithSpotic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrencedAddress\",\"type\":\"address\"}],\"name\":\"referralPurchaseWithBnb\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrencedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"referralPurchaseWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_preSale\",\"type\":\"bool\"}],\"name\":\"setPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseLimit\",\"type\":\"uint256\"}],\"name\":\"setPurchaseLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referralPercent\",\"type\":\"uint256\"}],\"name\":\"setReferralPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spoticAddr\",\"type\":\"address\"}],\"name\":\"setSpoticAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUnlimited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"solPriceFeedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spoticAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SalesToken", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}