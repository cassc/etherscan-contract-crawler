{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function getOwner() external view returns (address);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface INimbusRouter {\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Ownable: Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function transferOwnership(address transferOwner) external onlyOwner {\r\n        require(transferOwner != newOwner);\r\n        newOwner = transferOwner;\r\n    }\r\n\r\n    function acceptOwnership() virtual external {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in construction, \r\n        // since the code is only stored at the end of the constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeBEP20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) - value;\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeBEP20: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeBEP20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { \r\n            require(abi.decode(returndata, (bool)), \"SafeBEP20: BEP20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\ninterface ILockStakingRewards {\r\n    function earned(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function stake(uint256 amount) external;\r\n    function stakeFor(uint256 amount, address user) external;\r\n    function getReward() external;\r\n    function getRewardForUser(address user) external;\r\n    function withdraw(uint256 nonce) external;\r\n    function withdrawAndGetReward(uint256 nonce) external;\r\n}\r\n\r\ninterface IPriceFeed {\r\n    function queryRate(address sourceTokenAddress, address destTokenAddress) external view returns (uint256 rate, uint256 precision);\r\n    function wbnbToken() external view returns(address);\r\n}\r\n\r\ninterface IBEP20Permit {\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\ncontract LockStakingRewardFixedAPY is ILockStakingRewards, ReentrancyGuard, Ownable, Pausable {\r\n    using SafeBEP20 for IBEP20;\r\n\r\n    IBEP20 public immutable rewardsToken;\r\n    IBEP20 public immutable stakingToken;\r\n    INimbusRouter public swapRouter;\r\n    uint256 public rewardRate; \r\n    uint256 public immutable lockDuration; \r\n    uint256 public constant rewardDuration = 365 days; \r\n    uint256 public rateChangesNonce;\r\n\r\n    mapping(address => uint256) public weightedStakeDate;\r\n    mapping(address => mapping(uint256 => StakeNonceInfo)) public stakeNonceInfos;\r\n    mapping(address => uint256) public stakeNonces;\r\n    mapping(uint256 => APYCheckpoint) APYcheckpoints;\r\n\r\n    struct StakeNonceInfo {\r\n        uint256 unlockTime;\r\n        uint256 stakeTime;\r\n        uint256 stakingTokenAmount;\r\n        uint256 rewardsTokenAmount;\r\n        uint256 rewardRate;\r\n    }\r\n\r\n    struct APYCheckpoint {\r\n        uint256 timestamp;\r\n        uint256 rewardRate;\r\n    }\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _totalSupplyRewardEquivalent;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256) private _balancesRewardEquivalent;\r\n\r\n    address public affiliateContract;\r\n    bool public usePriceFeeds;\r\n    IPriceFeed public priceFeed;\r\n\r\n    event RewardRateUpdated(uint256 indexed rateChangesNonce, uint256 rewardRate, uint256 timestamp);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event Rescue(address indexed to, uint amount);\r\n    event RescueToken(address indexed to, address indexed token, uint amount);\r\n\r\n    event ToggleUsePriceFeeds(bool indexed usePriceFeeds);\r\n\r\n    constructor(\r\n        address _rewardsToken,\r\n        address _stakingToken,\r\n        address _swapRouter,\r\n        uint _rewardRate,\r\n        uint _lockDuration\r\n    ) {\r\n        require(_rewardsToken != address(0) && _swapRouter != address(0), \"LockStakingRewardFixedAPY: Zero address(es)\");\r\n        rewardsToken = IBEP20(_rewardsToken);\r\n        stakingToken = IBEP20(_stakingToken);\r\n        swapRouter = INimbusRouter(_swapRouter);\r\n        rewardRate = _rewardRate;\r\n        lockDuration = _lockDuration;\r\n        emit RewardRateUpdated(rateChangesNonce, _rewardRate, block.timestamp);\r\n        APYcheckpoints[rateChangesNonce++] = APYCheckpoint(block.timestamp, rewardRate);\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function totalSupplyRewardEquivalent() external view returns (uint256) {\r\n        return _totalSupplyRewardEquivalent;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function balanceOfRewardEquivalent(address account) external view returns (uint256) {\r\n        return _balancesRewardEquivalent[account];\r\n    }\r\n\r\n    function earnedByNonce(address account, uint256 nonce) public view returns (uint256) {\r\n        return stakeNonceInfos[account][nonce].rewardsTokenAmount * \r\n            (block.timestamp - stakeNonceInfos[account][nonce].stakeTime) *\r\n             stakeNonceInfos[account][nonce].rewardRate / (100 * rewardDuration);\r\n    }\r\n\r\n    function earned(address account) public view override returns (uint256 totalEarned) {\r\n        for (uint256 i = 0; i < stakeNonces[account]; i++) {\r\n            totalEarned += earnedByNonce(account, i);\r\n        }\r\n    }\r\n\r\n    function stakeWithPermit(uint256 amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external nonReentrant {\r\n        require(amount > 0, \"LockStakingRewardFixedAPY: Cannot stake 0\");\r\n        // permit\r\n        IBEP20Permit(address(stakingToken)).permit(msg.sender, address(this), amount, deadline, v, r, s);\r\n        _stake(amount, msg.sender);\r\n    }\r\n\r\n    function stake(uint256 amount) external override nonReentrant {\r\n        require(amount > 0, \"LockStakingRewardFixedAPY: Cannot stake 0\");\r\n        _stake(amount, msg.sender);\r\n    }\r\n\r\n    function stakeFor(uint256 amount, address user) external override nonReentrant {\r\n        require(amount > 0, \"LockStakingRewardFixedAPY: Cannot stake 0\");\r\n        require(user != address(0), \"LockStakingRewardFixedAPY: Cannot stake for zero address\");\r\n        _stake(amount, user);\r\n    }\r\n\r\n    function _stake(uint256 amount, address user) private whenNotPaused {\r\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n        uint amountRewardEquivalent = getEquivalentAmount(amount);\r\n\r\n        _totalSupply += amount;\r\n        _totalSupplyRewardEquivalent += amountRewardEquivalent;\r\n        _balances[user] += amount;\r\n\r\n        uint stakeNonce = stakeNonces[user]++;\r\n        stakeNonceInfos[user][stakeNonce].stakingTokenAmount = amount;\r\n        stakeNonceInfos[user][stakeNonce].unlockTime = block.timestamp + lockDuration;\r\n        stakeNonceInfos[user][stakeNonce].stakeTime = block.timestamp;\r\n        stakeNonceInfos[user][stakeNonce].rewardRate = rewardRate;\r\n        stakeNonceInfos[user][stakeNonce].rewardsTokenAmount = amountRewardEquivalent;\r\n        _balancesRewardEquivalent[user] += amountRewardEquivalent;\r\n        emit Staked(user, amount);\r\n    }\r\n\r\n\r\n\r\n    //A user can withdraw its staking tokens even if there is no rewards tokens on the contract account\r\n    function withdraw(uint256 nonce) public override nonReentrant whenNotPaused {\r\n        require(stakeNonceInfos[msg.sender][nonce].stakingTokenAmount > 0, \"LockStakingRewardFixedAPY: This stake nonce was withdrawn\");\r\n        require(stakeNonceInfos[msg.sender][nonce].unlockTime < block.timestamp, \"LockStakingRewardFixedAPY: Locked\");\r\n        uint amount = stakeNonceInfos[msg.sender][nonce].stakingTokenAmount;\r\n        uint amountRewardEquivalent = stakeNonceInfos[msg.sender][nonce].rewardsTokenAmount;\r\n        _totalSupply -= amount;\r\n        _totalSupplyRewardEquivalent -= amountRewardEquivalent;\r\n        _balances[msg.sender] -= amount;\r\n        _balancesRewardEquivalent[msg.sender] -= amountRewardEquivalent;\r\n        stakeNonceInfos[msg.sender][nonce].stakingTokenAmount = 0;\r\n        stakeNonceInfos[msg.sender][nonce].rewardsTokenAmount = 0;\r\n        stakingToken.safeTransfer(msg.sender, amount);\r\n        \r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    function getReward() public override nonReentrant whenNotPaused {\r\n        uint256 reward = earned(msg.sender);\r\n        if (reward > 0) {\r\n            for (uint256 i = 0; i < stakeNonces[msg.sender]; i++) {\r\n                stakeNonceInfos[msg.sender][i].stakeTime = block.timestamp;\r\n            }\r\n            rewardsToken.safeTransfer(msg.sender, reward);\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    function getRewardForUser(address user) public override nonReentrant whenNotPaused {\r\n        require(msg.sender == affiliateContract || msg.sender == owner, \"LockStakingRewardFixedAPY :: isn`t allowed to call rewards\");\r\n        uint256 reward = earned(user);\r\n        if (reward > 0) {\r\n            for (uint256 i = 0; i < stakeNonces[user]; i++) {\r\n                stakeNonceInfos[user][i].stakeTime = block.timestamp;\r\n            }\r\n            rewardsToken.safeTransfer(user, reward);\r\n            emit RewardPaid(user, reward);\r\n        }\r\n    }\r\n\r\n    function withdrawAndGetReward(uint256 nonce) external override {\r\n        getReward();\r\n        withdraw(nonce);\r\n    }\r\n\r\n    function exit() external {\r\n        getReward();\r\n        for (uint256 i = 0; i < stakeNonces[msg.sender]; i++) {\r\n            if (stakeNonceInfos[msg.sender][i].stakingTokenAmount > 0) {\r\n                withdraw(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getEquivalentAmount(uint amount) public view returns (uint) {\r\n        address[] memory path = new address[](2);\r\n\r\n        uint equivalent;\r\n        if (stakingToken != rewardsToken) {\r\n             if (usePriceFeeds && address(priceFeed) != address(0)) {\r\n                (uint256 rate, uint256 precision) = priceFeed.queryRate(address(stakingToken), address(rewardsToken));\r\n                equivalent = amount * rate / precision;\r\n            } else {\r\n                path[0] = address(stakingToken);            \r\n                path[1] = address(rewardsToken);\r\n                equivalent = swapRouter.getAmountsOut(amount, path)[1];\r\n            }\r\n        } else {\r\n            equivalent = amount;   \r\n        }\r\n        \r\n        return equivalent;\r\n    }\r\n\r\n    function setAffiliateContract(address _affiliateContract) external onlyOwner {\r\n        require(Address.isContract(_affiliateContract), \"LockStakingRewardFixedAPY: Not a contract\");\r\n        affiliateContract = _affiliateContract;\r\n    }\r\n\r\n    function setPaused(bool _paused) external onlyOwner {\r\n        if (_paused) _pause();\r\n        else _unpause();\r\n    }\r\n\r\n    function updateRewardRate(uint256 _rewardRate) external onlyOwner {\r\n        rewardRate = _rewardRate;\r\n        emit RewardRateUpdated(rateChangesNonce, _rewardRate, block.timestamp);\r\n        APYcheckpoints[rateChangesNonce++] = APYCheckpoint(block.timestamp, _rewardRate);\r\n    }\r\n\r\n    function updateSwapRouter(address newSwapRouter) external onlyOwner {\r\n        require(newSwapRouter != address(0), \"LockStakingRewardFixedAPY: Address is zero\");\r\n        swapRouter = INimbusRouter(newSwapRouter);\r\n    }\r\n\r\n    function updatePriceFeed(address newPriceFeed) external onlyOwner {\r\n        require(newPriceFeed != address(0), \"LockStakingRewardFixedAPY: Address is zero\");\r\n        priceFeed = IPriceFeed(newPriceFeed);\r\n    }\r\n\r\n    function toggleUsePriceFeeds() external onlyOwner {\r\n        usePriceFeeds = !usePriceFeeds;\r\n        emit ToggleUsePriceFeeds(usePriceFeeds);\r\n    }\r\n\r\n    function rescue(address to, address token, uint256 amount) external onlyOwner whenPaused {\r\n        require(to != address(0), \"LockStakingRewardFixedAPY: Cannot rescue to the zero address\");\r\n        require(amount > 0, \"LockStakingRewardFixedAPY: Cannot rescue 0\");\r\n        require(token != address(stakingToken), \"LockStakingRewardFixedAPY: Cannot rescue staking token\");\r\n        //owner can rescue rewardsToken if there is spare unused tokens on staking contract balance\r\n\r\n        IBEP20(token).safeTransfer(to, amount);\r\n        emit RescueToken(to, address(token), amount);\r\n    }\r\n\r\n    function rescue(address payable to, uint256 amount) external onlyOwner whenPaused {\r\n        require(to != address(0), \"LockStakingRewardFixedAPY: Cannot rescue to the zero address\");\r\n        require(amount > 0, \"LockStakingRewardFixedAPY: Cannot rescue 0\");\r\n\r\n        to.transfer(amount);\r\n        emit Rescue(to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rescue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescueToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rateChangesNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"usePriceFeeds\",\"type\":\"bool\"}],\"name\":\"ToggleUsePriceFeeds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"affiliateContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfRewardEquivalent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"earnedByNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getEquivalentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRewardForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateChangesNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_affiliateContract\",\"type\":\"address\"}],\"name\":\"setAffiliateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeNonceInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract INimbusRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleUsePriceFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyRewardEquivalent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPriceFeed\",\"type\":\"address\"}],\"name\":\"updatePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"updateRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSwapRouter\",\"type\":\"address\"}],\"name\":\"updateSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usePriceFeeds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weightedStakeDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"withdrawAndGetReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LockStakingRewardFixedAPY", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000cb492c701f7fe71bc9c4b703b84b0da933ff26bb0000000000000000000000002c6cf65f3cd32a9be1822855abf2321f6f8f6b240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000076a700", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5b66ef4aff9377635bc3a280e1188c6d51eb82febcf2211e62915acb739639ff"}