{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router02 {\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract DiziGoldCoin {\r\n    string public name = \"Dizi Gold Coin\";\r\n    string public symbol = \"DGC\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply;\r\n    uint256 private _maxTransactionAmount = 1000000 * 10**18;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(address => bool) public isBlacklisted;\r\n    mapping(address => bool) public isExcludedFromFee;\r\n    mapping(address => bool) public isExcludedFromMarketingFund;\r\n    address private _marketingWallet;\r\n    uint256 private _taxPercentage = 5;\r\n    uint256 private _burnPercentage = 20;\r\n    uint256 private _liquidityPercentage = 30;\r\n    uint256 private _marketingFundPercentage = 50;\r\n    uint256 private _totalTokensToDistribute;\r\n    bool private _tradingEnabled = true;\r\n    bool private _contractLocked = false;\r\n    address private _owner;\r\n    address private _pancakeSwapRouter;\r\n    address private _liquidityPoolAddress;  // Address to add liquidity\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Not the contract owner\");\r\n        _;\r\n    }\r\n\r\n    modifier canTrade() {\r\n        require(_tradingEnabled && !_contractLocked, \"Trading is disabled or contract is locked\");\r\n        _;\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor(uint256 initialSupply, address marketingWallet) {\r\n        totalSupply = initialSupply * 10**uint256(decimals);\r\n        balanceOf[msg.sender] = totalSupply;\r\n        _owner = msg.sender;\r\n        _marketingWallet = marketingWallet;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n    // Function to set the liquidity pool address\r\n    function setLiquidityPoolAddress(address liquidityPoolAddress) external onlyOwner {\r\n        _liquidityPoolAddress = liquidityPoolAddress;\r\n    }\r\n\r\n    // Function to add liquidity to the specified pool\r\n    function addLiquidityToPool(uint256 amountTokenDesired, uint256 amountETHMin) external onlyOwner payable {\r\n        require(_liquidityPoolAddress != address(0), \"Liquidity pool address not set\");\r\n        require(amountTokenDesired > 0, \"Invalid amountTokenDesired\");\r\n        require(msg.value >= amountETHMin, \"Insufficient ETH provided\");\r\n\r\n        // Call the approve function from the DiziGoldCoin contract\r\n        this.approve(_liquidityPoolAddress, amountTokenDesired);\r\n\r\n        // Add liquidity\r\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(_pancakeSwapRouter);\r\n        uniswapRouter.addLiquidityETH{value: msg.value}(\r\n            address(this),\r\n            amountTokenDesired,\r\n            0,\r\n            amountETHMin,\r\n            _liquidityPoolAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external canTrade returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function internalApprove(address spender, uint256 amount) internal {\r\n        require(spender != address(0), \"Invalid spender\");\r\n        require(amount > 0, \"Invalid amount\");\r\n        allowance[address(this)][spender] = amount;\r\n        emit Approval(address(this), spender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external canTrade returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external canTrade returns (bool) {\r\n        require(amount <= allowance[sender][msg.sender], \"Allowance exceeded\");\r\n        allowance[sender][msg.sender] -= amount;\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external canTrade returns (bool) {\r\n        allowance[msg.sender][spender] += addedValue;\r\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external canTrade returns (bool) {\r\n        uint256 currentAllowance = allowance[msg.sender][spender];\r\n        require(subtractedValue <= currentAllowance, \"Allowance cannot be negative\");\r\n        allowance[msg.sender][spender] = currentAllowance - subtractedValue;\r\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function blacklistAddress(address account) external onlyOwner {\r\n        isBlacklisted[account] = true;\r\n    }\r\n\r\n    function unblacklistAddress(address account) external onlyOwner {\r\n        isBlacklisted[account] = false;\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        _tradingEnabled = true;\r\n    }\r\n\r\n    function disableTrading() external onlyOwner {\r\n        _tradingEnabled = false;\r\n    }\r\n\r\n    function lockContract() external onlyOwner {\r\n        _contractLocked = true;\r\n    }\r\n\r\n    function unlockContract() external onlyOwner {\r\n        _contractLocked = false;\r\n    }\r\n\r\n    function setTaxPercentage(uint256 taxPercentage) external onlyOwner {\r\n        _taxPercentage = taxPercentage;\r\n    }\r\n\r\n    function setMaxTransactionAmount(uint256 maxTransactionAmount) external onlyOwner {\r\n        require(maxTransactionAmount > 0, \"Invalid amount\");\r\n        _maxTransactionAmount = maxTransactionAmount;\r\n    }\r\n\r\n    function setExcludedFromFee(address account, bool isExcluded) external onlyOwner {\r\n        isExcludedFromFee[account] = isExcluded;\r\n    }\r\n\r\n    function setExcludedFromMarketingFund(address account, bool isExcluded) external onlyOwner {\r\n        isExcludedFromMarketingFund[account] = isExcluded;\r\n    }\r\n\r\n    function setMarketingWallet(address marketingWallet) external onlyOwner {\r\n        require(marketingWallet != address(0), \"Invalid marketing wallet address\");\r\n        _marketingWallet = marketingWallet;\r\n    }\r\n\r\n    function transferToMarketingWallet(uint256 amount) external onlyOwner canTrade {\r\n        require(amount > 0, \"Invalid amount\");\r\n        require(_marketingWallet != address(0), \"Marketing wallet not set\");\r\n        require(!isExcludedFromMarketingFund[msg.sender], \"Excluded from marketing fund\");\r\n\r\n        _transfer(msg.sender, _marketingWallet, amount);\r\n    }\r\n\r\n    function burnFromWallet(uint256 amount) external {\r\n        require(amount > 0, \"Invalid amount\");\r\n        require(balanceOf[msg.sender] >= amount, \"Insufficient balance\");\r\n        balanceOf[msg.sender] -= amount;\r\n        totalSupply -= amount;\r\n        emit Transfer(msg.sender, address(0), amount);\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n    require(sender != address(0), \"Transfer from the zero address\");\r\n    require(recipient != address(0), \"Transfer to the zero address\");\r\n    require(amount > 0, \"Transfer amount must be greater than zero\");\r\n    require(amount <= _maxTransactionAmount, \"Exceeds max transaction amount\");\r\n    require(!isBlacklisted[sender] && !isBlacklisted[recipient], \"Blacklisted address\");\r\n\r\n    uint256 taxAmount = (amount * _taxPercentage) / 100;\r\n    uint256 burnAmount = (taxAmount * _burnPercentage) / 100;\r\n    uint256 liquidityAmount = (taxAmount * _liquidityPercentage) / 100;\r\n    uint256 marketingFundAmount = (taxAmount * _marketingFundPercentage) / 100;\r\n\r\n    uint256 transferAmount = amount - taxAmount;\r\n\r\n    // Transfer tokens to recipient\r\n    balanceOf[sender] -= amount;\r\n    balanceOf[recipient] += transferAmount;\r\n    emit Transfer(sender, recipient, transferAmount);\r\n\r\n    // Burn tokens\r\n    if (burnAmount > 0) {\r\n        totalSupply -= burnAmount;\r\n        emit Transfer(sender, address(0), burnAmount);\r\n    }\r\n\r\n    // Transfer tokens to the liquidity pool address\r\n    if (liquidityAmount > 0) {\r\n        balanceOf[_liquidityPoolAddress] += liquidityAmount;\r\n        emit Transfer(sender, _liquidityPoolAddress, liquidityAmount);\r\n    }\r\n\r\n    // Transfer tokens to the marketing fund\r\n    if (marketingFundAmount > 0) {\r\n        balanceOf[_marketingWallet] += marketingFundAmount;\r\n        emit Transfer(sender, _marketingWallet, marketingFundAmount);\r\n    }\r\n\r\n    _totalTokensToDistribute = totalSupply - burnAmount;\r\n}\r\n\r\n\r\n    uint256 private _maxBuyAmount = 1000 * 10**18;\r\n    uint256 private _maxSellAmount = 500 * 10**18;\r\n\r\n    function setMaxBuyAmount(uint256 amount) external onlyOwner {\r\n        _maxBuyAmount = amount;\r\n    }\r\n\r\n    function setMaxSellAmount(uint256 amount) external onlyOwner {\r\n        _maxSellAmount = amount;\r\n    }\r\n\r\n    function multiSend(address[] memory recipients, uint256[] memory amounts) external onlyOwner {\r\n        require(recipients.length == amounts.length, \"Arrays length mismatch\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            _transfer(msg.sender, recipients[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Invalid address\");\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function burnFromAddress(address from, uint256 amount) external onlyOwner {\r\n        require(amount > 0, \"Invalid amount\");\r\n        require(balanceOf[from] >= amount, \"Insufficient balance\");\r\n\r\n        balanceOf[from] -= amount;\r\n        totalSupply -= amount;\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"}],\"name\":\"addLiquidityToPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFromAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFromWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMarketingFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"setExcludedFromMarketingFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityPoolAddress\",\"type\":\"address\"}],\"name\":\"setLiquidityPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTransactionAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxPercentage\",\"type\":\"uint256\"}],\"name\":\"setTaxPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unblacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DiziGoldCoin", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000a7d8c00000000000000000000000009a957e3db04eae5ae0cbd5021799537ebcf50302", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0369d87d2e6131b83e048022568d51a36b9f9dbe88dc07c29fe3ec3a62c6eab9"}