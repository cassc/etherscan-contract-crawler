{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\n \r\ncontract owned {\r\n    address  public owner;\r\n    address  internal newOwner;\r\n\r\nmodifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n   \r\n}\r\n\r\n\r\n interface tokenInterface\r\n {\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n }\r\n\r\n\r\ncontract Force1_Qore_USDT is owned\r\n{\r\n\r\n    uint public maxDownLimit = 2;\r\n\r\n    uint public lastCoreCount;\r\n    uint public defaultRefID = 1;\r\n\r\n\r\n    uint[13] public corePrice;\r\n    \r\n\r\n    address public tokenAddress;\r\n    address public coreAddress;\r\n\r\n    address holderContract = address(this);\r\n\r\n    struct userInfo {\r\n        bool joined;\r\n        uint id;\r\n        uint origRef;\r\n        uint levelBought;\r\n        address[] referral;\r\n    }\r\n\r\n    struct goldInfo {\r\n        uint currentParent;\r\n        uint position;\r\n        address[] childs;\r\n    }\r\n    mapping (address => userInfo) public coreInfos;\r\n    mapping (uint => address ) public coreAddressByID;\r\n\r\n    mapping (address => mapping(uint => goldInfo)) public activeGoldInfos;\r\n    mapping (address => mapping(uint => goldInfo[])) public archivedGoldInfos;\r\n\r\n    mapping(address => bool) public regPermitted;\r\n    mapping(address => uint) public corePermitted;\r\n\r\n\r\n\r\n    struct rdata\r\n    {\r\n        uint user4thParent;\r\n        uint level;\r\n        bool pay;\r\n        bool processed;\r\n    }\r\n\r\n   \r\n\r\n    event directPaidEv(uint from,uint to, uint amount, uint level, uint timeNow);\r\n    event payForCoreEv(uint _userID,uint parentID,uint amount,uint fromDown, uint timeNow);\r\n    event payForCore_NewEv(uint _userID,uint parentID,uint amount,uint fromDown, uint timeNow, uint _level);\r\n    event regLevelEv(uint _userID, uint _referrerID, uint timeNow, address _user, address _referrer);\r\n    event levelBuyEv(uint amount, uint toID, uint level, uint timeNow);\r\n    event treeEv(uint _userID, uint _userPosition,uint amount, uint placing,uint timeNow,uint _parent, uint _level );\r\n    event tree_NewEv(uint _userID, uint _userPosition,uint amount, uint placing,uint timeNow,uint _parent, uint _level );\r\n\r\n    constructor(address token)  {\r\n        owner = msg.sender;\r\n        tokenAddress = token;\r\n        uint multiply = 10 ** 18;\r\n\r\n        corePrice[1] = 5 * multiply;\r\n        corePrice[2] = 10 * multiply;\r\n        corePrice[3] = 20 * multiply;\r\n        corePrice[4] = 30 * multiply;\r\n        corePrice[5] = 50 * multiply;\r\n        corePrice[6] = 100 * multiply;\r\n        corePrice[7] = 200 * multiply;\r\n        corePrice[8] = 300 * multiply;\r\n        corePrice[9] = 500 * multiply;\r\n        corePrice[10]= 1000 * multiply;\r\n        corePrice[11]= 1500 * multiply;\r\n        corePrice[12]= 2500 * multiply;\r\n\r\n\r\n        userInfo memory UserInfo;\r\n        lastCoreCount++;\r\n\r\n        UserInfo = userInfo({\r\n            joined: true,\r\n            id: lastCoreCount,\r\n            origRef:lastCoreCount,            \r\n            levelBought:15,\r\n            referral: new address[](0)\r\n        });\r\n        coreInfos[owner] = UserInfo;\r\n        coreAddressByID[lastCoreCount] = owner;\r\n\r\n        goldInfo memory temp;\r\n        temp.currentParent = 1;\r\n        temp.position = 0;\r\n        for(uint i=1;i<=12;i++)\r\n        {\r\n            activeGoldInfos[owner][i] = temp;\r\n        }\r\n    }\r\n\r\n   \r\n\r\n\r\n    function assignAd(address newTokenaddress) onlyOwner public returns(bool)\r\n    {\r\n        tokenAddress = newTokenaddress;\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function assignCoreAddress(address newcoreAddress) onlyOwner public returns(bool)\r\n    {\r\n        coreAddress = newcoreAddress;\r\n        return true;\r\n    }\r\n\r\n    \r\n    function subCore(address ref) public returns(bool)\r\n    {\r\n        \r\n        address _refAddress = ref; \r\n       \r\n        if(!coreInfos[_refAddress].joined) _refAddress = owner;\r\n        \r\n        uint prc = corePrice[1];\r\n        tokenInterface(tokenAddress).transferFrom(msg.sender, address(this), prc);\r\n        \r\n        subCore_(msg.sender, _refAddress, true, prc);\r\n        return true;\r\n    }\r\n\r\n    function subCore_own(address usermsg, address ref) onlyOwner public returns(bool)\r\n    {\r\n       \r\n        address _refAddress = ref;\r\n       \r\n        if(!coreInfos[_refAddress].joined) _refAddress = owner;\r\n        \r\n        uint prc = corePrice[1];\r\n        tokenInterface(tokenAddress).transferFrom(msg.sender, address(this), prc);\r\n        \r\n        subCore_(usermsg, _refAddress, true, prc);\r\n        return true;\r\n    }\r\n\r\n    function subCore_(address msgsender, address _refAddress,bool pay, uint prc) internal returns(bool)\r\n    {\r\n        require(!coreInfos[msgsender].joined, \"already joined\");\r\n        \r\n        uint user4thParent;\r\n        //require(user4thParent<14, \"no place under this referrer\");\r\n       \r\n        address origRef = _refAddress;\r\n        uint _referrerID = coreInfos[_refAddress].id;\r\n        (uint _parentID,bool treeComplete  ) = findFreeParentInDown(_referrerID, 1);\r\n        require(!treeComplete, \"No free place\");\r\n\r\n        lastCoreCount++;\r\n        userInfo memory UserInfo;\r\n        UserInfo = userInfo({\r\n            joined: true,\r\n            id: lastCoreCount,\r\n            origRef:coreInfos[_refAddress].id,            \r\n            levelBought:1,\r\n            referral: new address[](0)\r\n        });\r\n        coreInfos[msgsender] = UserInfo;\r\n        coreAddressByID[lastCoreCount] = msgsender;\r\n        coreInfos[origRef].referral.push(msgsender);\r\n\r\n        coreInfos[msgsender].referral.push(_refAddress);       \r\n\r\n        goldInfo memory temp;\r\n        temp.currentParent = _parentID;\r\n        temp.position = activeGoldInfos[coreAddressByID[_parentID]][1].childs.length + 1;\r\n        activeGoldInfos[msgsender][1] = temp;\r\n        activeGoldInfos[coreAddressByID[_parentID]][1].childs.push(msgsender);\r\n\r\n       \r\n        uint userPosition;\r\n        (userPosition, user4thParent) = getPosition(msgsender, 1);\r\n        (,treeComplete) = findFreeParentInDown(user4thParent, 1);\r\n        if(userPosition > 13 && userPosition < 14 ) \r\n        {\r\n            payForCore(msgsender, 1, true, pay,true);   \r\n        }\r\n       \r\n        else\r\n        {\r\n            payForCore(msgsender, 1, false, pay, true);   \r\n        }\r\n        \r\n        if(treeComplete)\r\n        {\r\n            recyclePosition(user4thParent,1, pay );\r\n        }\r\n        splitPart(lastCoreCount,_referrerID,msgsender,userPosition,prc,temp.position,temp.currentParent );\r\n        \r\n       \r\n\r\n        uint price_ = corePrice[1]/2;    \r\n        tokenInterface(tokenAddress).transfer(address(uint160(_refAddress)), price_);\r\n    \r\n       \r\n\r\n\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n    function splitPart_New(uint lastCoreCount_, uint userPosition, uint prc,uint tempPosition, uint tempCurrentParent ) internal returns(bool)\r\n    {\r\n        //emit regLevelEv(lastCoreCount_,_referrerID,block.timestamp, msgsender,coreAddressByID[_referrerID]);\r\n        emit tree_NewEv(lastCoreCount_,userPosition,prc,tempPosition, block.timestamp,  tempCurrentParent, 1 );\r\n        return true;\r\n    }\r\n\r\n    function splitPart(uint lastCoreCount_, uint _referrerID, address msgsender, uint userPosition, uint prc,uint tempPosition, uint tempCurrentParent ) internal returns(bool)\r\n    {\r\n        emit regLevelEv(lastCoreCount_,_referrerID,block.timestamp, msgsender,coreAddressByID[_referrerID]);\r\n        emit treeEv(lastCoreCount_,userPosition,prc,tempPosition, block.timestamp,  tempCurrentParent, 1 );\r\n        return true;\r\n    }\r\n\r\n    function getPosition(address _user, uint _level) public view returns(uint recyclePosition_, uint recycleID)\r\n    {\r\n        uint a;\r\n        uint b;\r\n        uint c;\r\n        //uint d;\r\n        bool id1Found;\r\n        a = activeGoldInfos[_user][_level].position;\r\n\r\n        uint parent_ = activeGoldInfos[_user][_level].currentParent;\r\n        b = activeGoldInfos[coreAddressByID[parent_]][_level].position;\r\n        if(parent_ == 1 ) id1Found = true;\r\n\r\n        if(!id1Found)\r\n        {\r\n            parent_ = activeGoldInfos[coreAddressByID[parent_]][_level].currentParent;\r\n            c = activeGoldInfos[coreAddressByID[parent_]][_level].position;\r\n            if(parent_ == 1 ) id1Found = true;\r\n        }\r\n\r\n/*        if(!id1Found)\r\n        {\r\n            parent_ = activeGoldInfos[coreAddressByID[parent_]][_level].currentParent;\r\n            d = activeGoldInfos[coreAddressByID[parent_]][_level].position;\r\n            if(parent_ == 1 ) id1Found = true;\r\n        }\r\n*/        \r\n        if(!id1Found) parent_ = activeGoldInfos[coreAddressByID[parent_]][_level].currentParent;\r\n        \r\n        if (a == 2 && b == 2 && c == 2 ) return (15, parent_);\r\n        if (a == 1 && b == 2 && c == 2 ) return (14, parent_);       \r\n        else return (1,parent_);\r\n\r\n    }\r\n\r\n    function getCorrectGold(address childss,uint _level,  uint parenT ) internal view returns (goldInfo memory tmps)\r\n    {\r\n\r\n        uint len = archivedGoldInfos[childss][_level].length;\r\n        if(activeGoldInfos[childss][_level].currentParent == parenT) return activeGoldInfos[childss][_level];\r\n        if(len > 0 )\r\n        {\r\n            for(uint j=len-1; j>=0; j--)\r\n            {\r\n                tmps = archivedGoldInfos[childss][_level][j];\r\n                if(tmps.currentParent == parenT)\r\n                {\r\n                    break;                    \r\n                }\r\n                if(j==0) \r\n                {\r\n                    tmps = activeGoldInfos[childss][_level];\r\n                    break;\r\n                }\r\n            }\r\n        } \r\n        else\r\n        {\r\n            tmps = activeGoldInfos[childss][_level];\r\n        }       \r\n        return tmps;\r\n    }\r\n\r\n    \r\n    function findFreeParentInDown(uint  refID_ , uint _level) public view returns(uint parentID, bool noFreeReferrer)\r\n    {\r\n        address _user = coreAddressByID[refID_];\r\n        if(activeGoldInfos[_user][_level].childs.length < maxDownLimit) return (refID_, false);\r\n\r\n        address[7] memory childss;\r\n        uint[7] memory parenT;\r\n\r\n        childss[0] = activeGoldInfos[_user][_level].childs[0];\r\n        parenT[0] = refID_;\r\n        childss[1] = activeGoldInfos[_user][_level].childs[1];\r\n        parenT[1] = refID_;\r\n\r\n        address freeReferrer;\r\n        noFreeReferrer = true;\r\n\r\n        goldInfo memory temp;\r\n\r\n        for(uint i = 0; i < 6; i++)\r\n        {\r\n            temp = getCorrectGold(childss[i],_level, parenT[i] );\r\n\r\n            if(temp.childs.length == maxDownLimit) {\r\n                if(i < 2) {\r\n                    childss[(i+1)*2] = temp.childs[0];\r\n                    parenT[(i+1)*2] = coreInfos[childss[i]].id;\r\n                    childss[((i+1)*2)+1] = temp.childs[1];\r\n                    parenT[((i+1)*2)+1] = parenT[(i+1)*2];\r\n                }\r\n            }\r\n            else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = childss[i];\r\n                break;\r\n            } \r\n        } \r\n        if(noFreeReferrer) return (1, noFreeReferrer);      \r\n        return (coreInfos[freeReferrer].id, noFreeReferrer);\r\n    }\r\n\r\n    function buyCore(uint _level) public returns(bool)\r\n    {\r\n       \r\n        require(_level < 13 && _level > 1, \"invalid level\");\r\n        uint prc = corePrice[_level];\r\n        tokenInterface(tokenAddress).transferFrom(msg.sender, address(this), prc);\r\n        buyCore_(msg.sender,_level,true, prc);\r\n        \r\n        //uint price_ = corePrice[_level]/2;    \r\n        //tokenInterface(tokenAddress).transfer(address(uint160(coreAddressByID[coreInfos[msg.sender].origRef])), price_);\r\n        payForLevel_New(msg.sender, _level, false, true, true);\r\n        return true;\r\n    }\r\n\r\n    function buyCore_own(address usermsg, uint _level) onlyOwner public returns(bool)\r\n    {\r\n        \r\n       require(_level < 13 && _level > 1, \"invalid level\");\r\n  \r\n\r\n        uint prc = corePrice[_level];\r\n        tokenInterface(tokenAddress).transferFrom(msg.sender, address(this), prc);\r\n        buyCore_(usermsg,_level,true, prc);\r\n\r\n       // uint price_ = corePrice[_level]/2;    \r\n        //tokenInterface(tokenAddress).transfer(address(uint160(coreAddressByID[coreInfos[msg.sender].origRef])), price_);\r\n        payForLevel_New(usermsg, _level, false, true, true);\r\n\r\n        return true;\r\n    }\r\n\r\n    function buyCore_(address msgsender, uint _level, bool pay,  uint prc) internal returns(bool)\r\n    {\r\n        //require(coreInfos[msgsender].joined, \"already joined\");\r\n        uint user4thParent; \r\n          \r\n        \r\n        require(coreInfos[msgsender].levelBought + 1 == _level, \"please buy previous level first\");\r\n\r\n    \r\n\r\n        address _refAddress = coreAddressByID[coreInfos[msgsender].origRef];\r\n       \r\n        if(_refAddress == address(0)) _refAddress = owner;\r\n\r\n\r\n\r\n        uint _referrerID = coreInfos[_refAddress].id;\r\n        while(coreInfos[coreAddressByID[_referrerID]].levelBought < _level)\r\n        {\r\n            _referrerID = coreInfos[coreAddressByID[_referrerID]].origRef;\r\n        }\r\n        bool treeComplete;\r\n        (_referrerID,treeComplete) = findFreeParentInDown(_referrerID, _level); \r\n        require(!treeComplete, \"no free place\");\r\n\r\n        coreInfos[msgsender].levelBought = _level; \r\n\r\n        goldInfo memory temp;\r\n        temp.currentParent = _referrerID;\r\n        temp.position = activeGoldInfos[coreAddressByID[_referrerID]][_level].childs.length + 1;\r\n        activeGoldInfos[msgsender][_level] = temp;\r\n        activeGoldInfos[coreAddressByID[_referrerID]][_level].childs.push(msgsender);\r\n\r\n        uint userPosition;\r\n\r\n        (userPosition, user4thParent) = getPosition(msgsender, _level);\r\n        (,treeComplete) = findFreeParentInDown(user4thParent, _level); \r\n\r\n        if(userPosition > 13 && userPosition < 14 ) \r\n        {\r\n            payForCore(msgsender, _level, true, pay, true);   \r\n        }\r\n        \r\n        else\r\n        {\r\n            payForCore(msgsender, _level, false, pay, true);   \r\n        }\r\n        \r\n        if(treeComplete)\r\n        {           \r\n\r\n            recyclePosition(user4thParent, _level, pay);\r\n\r\n        }\r\n        emit levelBuyEv(prc, coreInfos[msgsender].id,_level, block.timestamp);\r\n        splidStack( msgsender, userPosition, prc, temp.position, _referrerID, _level);     \r\n\r\n        return true;\r\n    }\r\n\r\n   function splidStack_New(address msgsender, uint userPosition, uint prc, uint tempPosition, uint _referrerID, uint _level) internal returns(bool)\r\n    {\r\n        emit tree_NewEv(coreInfos[msgsender].id,userPosition,prc,tempPosition,block.timestamp,_referrerID, _level );\r\n        return true;\r\n    }\r\n\r\n    function splidStack(address msgsender, uint userPosition, uint prc, uint tempPosition, uint _referrerID, uint _level) internal returns(bool)\r\n    {\r\n        emit treeEv(coreInfos[msgsender].id,userPosition,prc,tempPosition,block.timestamp,_referrerID, _level );\r\n        return true;\r\n    }\r\n\r\n    function findEligibleRef(address _origRef, uint _level) public view returns (address)\r\n    {\r\n        while (coreInfos[_origRef].levelBought < _level)\r\n        {\r\n            _origRef = coreAddressByID[coreInfos[_origRef].origRef];\r\n        }\r\n        return _origRef;\r\n    }\r\n    \r\n\r\n    event debugEv(address _user, bool treeComplete,uint user4thParent,uint _level,uint userPosition);\r\n    function recyclePosition(uint _userID, uint _level, bool pay)  internal returns(bool)\r\n    {\r\n        uint prc = corePrice[_level];\r\n\r\n        address msgSender = coreAddressByID[_userID];\r\n\r\n        archivedGoldInfos[msgSender][_level].push(activeGoldInfos[msgSender][_level]); \r\n\r\n        if(_userID == 1 ) \r\n        {\r\n            goldInfo memory tmp;\r\n            tmp.currentParent = 1;\r\n            tmp.position = 0;\r\n            activeGoldInfos[msgSender][_level] = tmp;\r\n            payForCore(msgSender, _level, false, pay, true);\r\n            emit treeEv(_userID,0,corePrice[_level],0,block.timestamp,1, _level );\r\n            return true;\r\n        }\r\n\r\n        address _refAddress = coreAddressByID[coreInfos[msgSender].origRef];\r\n       \r\n        if(_refAddress == address(0)) _refAddress = owner;\r\n\r\n\r\n           \r\n            uint _parentID =   getValidRef(_refAddress, _level);\r\n            \r\n\r\n            (_parentID,) = findFreeParentInDown(_parentID, _level);\r\n\r\n            goldInfo memory temp;\r\n            temp.currentParent = _parentID;\r\n            temp.position = activeGoldInfos[coreAddressByID[_parentID]][_level].childs.length + 1;\r\n            activeGoldInfos[msgSender][_level] = temp;\r\n            activeGoldInfos[coreAddressByID[_parentID]][_level].childs.push(msgSender);\r\n\r\n            \r\n        \r\n        uint userPosition;\r\n        \r\n        (userPosition, prc ) = getPosition(msgSender, _level); \r\n        (,bool treeComplete) = findFreeParentInDown(prc, _level);\r\n        \r\n        if(userPosition > 13 && userPosition < 16 ) \r\n        {\r\n            payForCore(msgSender, _level, true, pay, true);   \r\n        }\r\n             \r\n        else\r\n        {\r\n            payForCore(msgSender, _level, false, pay, true);         \r\n        }\r\n        splidStack( msgSender,userPosition,prc,temp.position,_parentID,_level);\r\n        if(treeComplete)\r\n        {           \r\n            recyclePosition(prc, _level, pay);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function getValidRef(address _user, uint _level) public view returns(uint)\r\n    {\r\n        uint refID = coreInfos[_user].id;\r\n        uint lvlBgt = coreInfos[coreAddressByID[refID]].levelBought;\r\n\r\n        while(lvlBgt < _level)\r\n        {\r\n            refID = coreInfos[coreAddressByID[refID]].origRef;\r\n            lvlBgt = coreInfos[coreAddressByID[refID]].levelBought;\r\n        }\r\n        return refID;\r\n    }\r\n\r\n   function payForLevel_New(address _user, uint _level, bool recycle, bool pay, bool payAll) internal returns(bool)\r\n    {\r\n        uint[10] memory percentPayout;\r\n        percentPayout[0] = 10;\r\n        percentPayout[1] = 10;\r\n        percentPayout[2] = 10;\r\n        percentPayout[3] = 10;\r\n        percentPayout[4] = 10;\r\n        percentPayout[5] = 10; \r\n        percentPayout[6] = 10; \r\n        percentPayout[7] = 10; \r\n        percentPayout[8] = 10;                         \r\n        if(payAll) percentPayout[9] = 10;\r\n\r\n        address parent_ = coreAddressByID[activeGoldInfos[_user][_level].currentParent];\r\n        uint price_ = corePrice[_level]/2;\r\n        for(uint i = 1;i<=10; i++)\r\n        {\r\n            if(i<10)\r\n            {\r\n                if(pay) tokenInterface(tokenAddress).transfer(address(uint160(parent_)), price_ * percentPayout[i-1] / 100);\r\n                emit payForCore_NewEv(coreInfos[_user].id,coreInfos[parent_].id,price_ * percentPayout[i-1] / 100, i,block.timestamp,_level);\r\n            }\r\n            else if(recycle == false)\r\n            {\r\n                if(pay) tokenInterface(tokenAddress).transfer(address(uint160(parent_)), price_ * percentPayout[i-1] / 100);\r\n                emit payForCore_NewEv(coreInfos[_user].id,coreInfos[parent_].id,price_ * percentPayout[i-1] / 100, i,block.timestamp,_level);                \r\n            }\r\n            else\r\n            {\r\n                if(pay) tokenInterface(tokenAddress).transfer(address(uint160(holderContract)), price_ * percentPayout[i-1] / 100);\r\n                emit payForCore_NewEv(coreInfos[_user].id,0,price_ * percentPayout[i-1] / 100, i,block.timestamp,_level);                \r\n            }\r\n            parent_ = coreAddressByID[activeGoldInfos[parent_][_level].currentParent];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function payForCore(address _user, uint _level, bool recycle, bool pay, bool payAll) internal returns(bool)\r\n    {\r\n        uint[4] memory percentPayout;\r\n        percentPayout[0] = 20;\r\n        percentPayout[1] = 30;\r\n\r\n        if(payAll) percentPayout[2] = 50;\r\n\r\n        address parent_ = coreAddressByID[activeGoldInfos[_user][_level].currentParent];\r\n        uint price_ = corePrice[_level]/2;\r\n        for(uint i = 1;i<=3; i++)\r\n        {\r\n            if(i<3)\r\n            {\r\n                if(pay) tokenInterface(tokenAddress).transfer(address(uint160(parent_)), price_ * percentPayout[i-1] / 100);\r\n                emit payForCoreEv(coreInfos[_user].id,coreInfos[parent_].id,price_ * percentPayout[i-1] / 100, i,block.timestamp);\r\n            }\r\n            else if(recycle == false)\r\n            {\r\n                if(pay) tokenInterface(tokenAddress).transfer(address(uint160(parent_)), price_ * percentPayout[i-1] / 100);\r\n                emit payForCoreEv(coreInfos[_user].id,coreInfos[parent_].id,price_ * percentPayout[i-1] / 100, i,block.timestamp);                \r\n            }\r\n            else\r\n            {\r\n                if(pay) tokenInterface(tokenAddress).transfer(address(uint160(holderContract)), price_ * percentPayout[i-1] / 100);\r\n                emit payForCoreEv(coreInfos[_user].id,0,price_ * percentPayout[i-1] / 100, i,block.timestamp);                \r\n            }\r\n            parent_ = coreAddressByID[activeGoldInfos[parent_][_level].currentParent];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    \r\n\r\n   \r\n    function viewChilds(address _user, uint _level, bool _archived, uint _archivedIndex) public view returns(address[2] memory _child)\r\n    {\r\n        uint len;\r\n        if(!_archived)\r\n        {\r\n            len = activeGoldInfos[_user][_level].childs.length;\r\n            if(len > 0) _child[0] = activeGoldInfos[_user][_level].childs[0];\r\n            if(len > 1) _child[1] = activeGoldInfos[_user][_level].childs[1];\r\n        }\r\n        else\r\n        {\r\n            len = archivedGoldInfos[_user][_level][_archivedIndex].childs.length;\r\n            if(len > 0) _child[0] = archivedGoldInfos[_user][_level][_archivedIndex].childs[0];\r\n            if(len > 1) _child[1] = archivedGoldInfos[_user][_level][_archivedIndex].childs[1];            \r\n        }\r\n        return (_child);\r\n    }\r\n\r\n   \r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"treeComplete\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"user4thParent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPosition\",\"type\":\"uint256\"}],\"name\":\"debugEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"directPaidEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"levelBuyEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parentID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromDown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"payForCoreEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parentID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromDown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"payForCore_NewEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"regLevelEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userPosition\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"placing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_parent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"treeEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userPosition\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"placing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_parent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"tree_NewEv\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeGoldInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"archivedGoldInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenaddress\",\"type\":\"address\"}],\"name\":\"assignAd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newcoreAddress\",\"type\":\"address\"}],\"name\":\"assignCoreAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyCore\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usermsg\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyCore_own\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coreAddressByID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coreInfos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"joined\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"origRef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelBought\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"corePermitted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"corePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRefID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_origRef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"findEligibleRef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"refID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"findFreeParentInDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"parentID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"noFreeReferrer\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"recyclePosition_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recycleID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getValidRef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCoreCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDownLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"regPermitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"subCore\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usermsg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"subCore_own\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_archived\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_archivedIndex\",\"type\":\"uint256\"}],\"name\":\"viewChilds\",\"outputs\":[{\"internalType\":\"address[2]\",\"name\":\"_child\",\"type\":\"address[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Force1_Qore_USDT", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000033841f65b135c024f54b74500263eb04bbc276cb", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://24b30b3638382f67c3c9154804bdd23078582a97daa72c381b698557bbe6f5c6"}