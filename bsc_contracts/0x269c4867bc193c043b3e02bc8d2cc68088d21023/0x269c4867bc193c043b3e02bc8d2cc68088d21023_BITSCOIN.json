{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BITSCOIN.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract BITSCOIN {\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    string public name = \\\"BITSCOIN\\\";\\r\\n\\r\\n    string public symbol = \\\"BTS\\\";\\r\\n\\r\\n\\r\\n\\r\\n    /**\\r\\n *Submitted for verification at BscScan.com on waiting for few time?\\r\\n */\\r\\n/**\\r\\n * @notice Contract is a inheritable smart contract that will add a\\r\\n * New modifier called onlyOwner available in the smart contract inherting it\\r\\n *\\r\\n * onlyOwner makes a function only callable from the Token owner\\r\\n *\\r\\n */ \\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice decimals will return the number of decimal precision the Token is deployed with\\r\\n     */ \\r\\n    uint8 public decimals = 18;\\r\\n   // _owner is the owner of the Token\\r\\n    address private _owner;\\r\\n\\r\\n    uint256 private _totalSupply = 21000000000000000000000000; // 21 million\\r\\n\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n\\r\\n    /**\\r\\n     * @notice _allowances is used to manage and control allownace\\r\\n     * An allowance is the right to use another accounts balance, or part of it\\r\\n     */\\r\\n\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) public allowance;\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n     /**\\r\\n     * @notice Approval is emitted when a new Spender is approved to spend Tokens on\\r\\n     * the Owners account\\r\\n     */\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n       \\r\\n\\r\\n   \\r\\n    event Burn(address indexed from, uint256 value);\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\r\\n\\r\\n /**\\r\\n     * Modifier\\r\\n     * We create our own function modifier called onlyOwner, it will Require the current owner to be\\r\\n     * the same as msg.sender\\r\\n     */\\r\\n\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n           // This _; is not a TYPO, It is important for the compiler;\\r\\n        require(msg.sender == _owner, \\\"Only the owner can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n /**\\r\\n     * @notice constructor will be triggered when we create the Smart contract\\r\\n     * _name = BITSCOIN of the token\\r\\n     * _short_symbol = Short Symbol BTS for the token\\r\\n     * token_decimals = The decimal precision of the Token, defaults 18\\r\\n     * _totalSupply is how much Tokens there are totally = 2 cr  10 lakh .\\r\\n     */\\r\\n    constructor() {\\r\\n\\r\\n// Add all the tokens created to the creator of the token\\r\\n        balanceOf[msg.sender] = _totalSupply;\\r\\n     \\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), _owner);\\r\\n         // Emit an Transfer event to notify the blockchain that an Transfer has occured\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n \\r\\n\\r\\n    /**\\r\\n     * @notice owner() returns the currently assigned owner of the Token\\r\\n     *\\r\\n     */\\r\\n\\r\\n     function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n /**\\r\\n     * @notice transferOwnership will assign the {newOwner} as owner\\r\\n     *\\r\\n     */\\r\\n\\r\\n\\r\\n    function transfer(address to, uint256 value) public returns (bool) {\\r\\n        require(to != address(0), \\\" BITSCOIN: transfer from zero address\\\");\\r\\n        require(balanceOf[msg.sender] >= value, \\\"BITSCOIN : Insufficient balance\\\");\\r\\n\\r\\n        balanceOf[msg.sender] -= value;\\r\\n        balanceOf[to] += value;\\r\\n\\r\\n        emit Transfer(msg.sender, to, value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 value) public returns (bool) {\\r\\n\\r\\n        allowance[msg.sender][spender] = value;\\r\\n        emit Approval(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) public returns (bool) {\\r\\n        require(from != address(0),  \\\"BITSCOIN: transfer from zero address\\\");\\r\\n        require(to != address(0), \\\"\\\");\\r\\n        require(balanceOf[from] >= value,  \\\"BITSCOIN: transfer to zero address\\\");\\r\\n        require(allowance[from][msg.sender] >= value, \\\"BITSCOIN : cant transfer more than your account holds //Allowance exceeded\\\");\\r\\n\\r\\n        balanceOf[from] -= value;\\r\\n        balanceOf[to] += value;\\r\\n        allowance[from][msg.sender] -= value;\\r\\n\\r\\n        emit Transfer(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n   \\r\\n\\r\\n      /**\\r\\n     * @notice _burn will destroy BITSCOIN  from an address inputted and then decrease total supply\\r\\n     * An Transfer event will emit with receiever set to zero address\\r\\n     *\\r\\n     * Requires\\r\\n     * - Account cannot be zero\\r\\n     * - Account balance has to be bigger or equal to amount\\r\\n     */\\r\\n\\r\\n\\r\\n    function burn(address account, uint256 value)\\r\\n        public\\r\\n        onlyOwner\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(balanceOf[account] >= value, \\\" BITSCOIN: pls check your funds Insufficient \\\");\\r\\n\\r\\n        balanceOf[account] -= value;\\r\\n        _totalSupply -= value;\\r\\n\\r\\n        emit Transfer(account, address(0), value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 amount)\\r\\n        internal \\r\\n        returns (bool)\\r\\n    {\\r\\n        allowance[msg.sender][spender] += amount;\\r\\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 amount)\\r\\n        internal \\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 currentAllowance = allowance[msg.sender][spender];\\r\\n        require(currentAllowance >= amount, \\\"Decreased allowance below zero\\\");\\r\\n        allowance[msg.sender][spender] = currentAllowance - amount;\\r\\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @notice getOwner just calls Ownables owner function.\\r\\n     * returns owner of the token\\r\\n     *\\r\\n     */\\r\\n\\r\\n\\r\\n    function getOwner() external view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n      /**\\r\\n     * @notice transferOwnership will assign the {newOwner} as owner\\r\\n     *\\r\\n     */\\r\\n   function _transferOwnership(address newOwner) internal  onlyOwner {\\r\\n        require(newOwner != address(0), \\\" Bitscoin: Invalid address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n\\r\\n\\r\\n      /**\\r\\n     * @notice totalSupply will return the tokens total supply of tokens\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BITSCOIN", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}