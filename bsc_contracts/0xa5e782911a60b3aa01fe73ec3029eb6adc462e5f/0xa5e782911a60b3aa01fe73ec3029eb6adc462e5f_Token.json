{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DividendTracker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: none\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./interfaces/IDividendTracker.sol\\\";\\r\\nimport \\\"./interfaces/IToken.sol\\\";\\r\\nimport \\\"./interfaces/IOwnable.sol\\\";\\r\\nimport \\\"./libs/IterableMapping.sol\\\";\\r\\n\\r\\ncontract DividendTracker is ERC20, IDividendTracker {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using IterableMapping for IterableMapping.Map;\\r\\n\\r\\n    IterableMapping.Map private tokenHoldersMap;\\r\\n    \\r\\n    address public token;\\r\\n    address public payOutToken;\\r\\n    bool public dividendsPaused;\\r\\n        \\r\\n    uint256 private minBalanceForDividends;\\r\\n    uint256 public lastProcessedIndex;\\r\\n    uint256 public totalDividendsDistributed;\\r\\n\\r\\n    uint256 internal constant magnitude = 2**128;\\r\\n    uint256 internal magnifiedDividendPerShare;\\r\\n    \\r\\n    mapping(address => int256) internal magnifiedDividendCorrections;\\r\\n    mapping(address => uint256) internal withdrawnDividends;\\r\\n    \\r\\n    mapping(address => bool) public excludedFromDividends;\\r\\n    mapping(address => bool) public autoReinvest;   \\r\\n    mapping(address => uint256) public lastClaimTimes;    \\r\\n\\r\\n    // -------------------------------------- CONSTRUCT ----------------------------------------\\r\\n\\r\\n    constructor(\\r\\n        address token_,\\r\\n        address payOutToken_,\\r\\n        uint256 minBalanceForDividends_,        \\r\\n        string memory name_,\\r\\n        string memory symbol_\\r\\n    ) ERC20(name_, symbol_) {\\r\\n        token = token_;\\r\\n        \\r\\n        payOutToken = payOutToken_;\\r\\n        minBalanceForDividends = minBalanceForDividends_; \\r\\n        \\r\\n        excludedFromDividends[tx.origin] = true;\\r\\n        excludedFromDividends[msg.sender] = true;\\r\\n        excludedFromDividends[address(0)] = true;\\r\\n        excludedFromDividends[address(this)] = true;       \\r\\n    }\\r\\n\\r\\n    // -------------------------------------- ADMIN -----------------------------------------\\r\\n\\r\\n    // set payout token, if zero address provided payout will be in eth\\r\\n    function setPayoutToken(address payOutToken_) public onlyOwner {\\r\\n        payOutToken = payOutToken_;\\r\\n        emit SetPayoutToken(payOutToken);\\r\\n    }\\r\\n    \\r\\n    // set min balance of tokens for account for receiving dividends\\r\\n    function setMinBalanceForDividends(uint256 minBalanceForDividends_) public onlyOwner {\\r\\n        minBalanceForDividends = minBalanceForDividends_;\\r\\n        emit SetMinBalanceForDividends(minBalanceForDividends_);\\r\\n    }\\r\\n\\r\\n    // pause dividends distribution\\r\\n    function setDividendsPaused(bool state_) external onlyOwner {\\r\\n        require(dividendsPaused != state_);\\r\\n        dividendsPaused = state_;\\r\\n        emit DividendsPaused(state_);\\r\\n    }\\r\\n\\r\\n    // -------------------------------------- VIEWS -----------------------------------------\\r\\n\\r\\n    // aggregated data for contract and account (by defauld provide ZERO address to get only contract data)\\r\\n    // use it on UI to get all data in single request\\r\\n    function aggregatedData(address account_) public view returns (\\r\\n            // contract data \\r\\n            uint256 _minBalanceForDividends,\\r\\n            address _payOutToken,  \\r\\n            bool _dividendsPaused,              \\r\\n            uint256 _holdersCount, \\r\\n            uint256 _totalDividendsDistributed,\\r\\n            // account data \\r\\n            uint256 _total,\\r\\n            uint256 _withdrawable,\\r\\n            uint256 _withdrawn,\\r\\n            bool _excluded,\\r\\n            bool _autoReinvest,  \\r\\n            int256 _currentIndex,\\r\\n            int256 _iterationsUntil,\\r\\n            uint256 _lastClaimTime            \\r\\n        ) {\\r\\n        // contract data \\r\\n        _minBalanceForDividends = minBalanceForDividends;    \\r\\n        _payOutToken = payOutToken;\\r\\n        _dividendsPaused = dividendsPaused;       \\r\\n        _holdersCount = getHoldersCount();\\r\\n        _totalDividendsDistributed = totalDividendsDistributed;\\r\\n\\r\\n        // account data \\r\\n        _total = _accumulativeDividends(account_);\\r\\n        _withdrawable = _withdrawableDividends(account_);\\r\\n        _withdrawn = withdrawnDividends[account_];\\r\\n        _excluded = excludedFromDividends[account_];\\r\\n        _autoReinvest = autoReinvest[account_];\\r\\n        _currentIndex = tokenHoldersMap.getIndexOfKey(account_);\\r\\n        _iterationsUntil = -1;\\r\\n        \\r\\n        if (_currentIndex >= 0) {\\r\\n            if (uint256(_currentIndex) > lastProcessedIndex) {\\r\\n                _iterationsUntil = _currentIndex - int256(lastProcessedIndex);\\r\\n            } else {\\r\\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ? tokenHoldersMap.keys.length - lastProcessedIndex : 0;\\r\\n                _iterationsUntil = _currentIndex + int256(processesUntilEndOfArray);\\r\\n            }\\r\\n        }        \\r\\n        _lastClaimTime = lastClaimTimes[account_];\\r\\n    }\\r\\n\\r\\n    // total number of dividends recipients \\r\\n    function getHoldersCount() public view returns (uint256) {\\r\\n        return tokenHoldersMap.keys.length;\\r\\n    }\\r\\n\\r\\n    // get holder account at specified \\r\\n    function getAccountAtIndex(uint256 index_) public view returns (address) {\\r\\n        return tokenHoldersMap.getKeyAtIndex(index_);\\r\\n    }\\r\\n\\r\\n    // -------------------------------------- PUBLIC -----------------------------------------\\r\\n\\r\\n    // withdraw user dividends\\r\\n    function withdraw() public notPaused {\\r\\n        _claim(payable(msg.sender), false);\\r\\n    }\\r\\n\\r\\n    // reinvest user dividends\\r\\n    function reinvest() public notPaused {\\r\\n        _claim(payable(msg.sender), true);\\r\\n    }\\r\\n\\r\\n    // set user auto reinvest, if enabled dividends will be converted to tokens on process, otherwise user will receive eth or payout tokens\\r\\n    function setAutoReinvest(bool state_) external {\\r\\n        require(autoReinvest[msg.sender] != state_, \\\"Already set\\\");\\r\\n        autoReinvest[msg.sender] = state_;        \\r\\n        emit SetAutoReinvest(msg.sender, state_);    \\r\\n    }\\r\\n\\r\\n    // process users dividends with max provided gas\\r\\n    function process(uint256 gas) public returns (uint256 iterations_, uint256 claims_, uint256 lastProcessedIndex_) {\\r\\n        uint256 holdersCount = getHoldersCount();\\r\\n\\r\\n        if (holdersCount == 0 || dividendsPaused) {\\r\\n            return (0, 0, lastProcessedIndex);\\r\\n        }\\r\\n\\r\\n        lastProcessedIndex_ = lastProcessedIndex;\\r\\n        uint256 gasUsed;\\r\\n        uint256 gasLeft = gasleft();       \\r\\n\\r\\n        while (gasUsed < gas && iterations_ < holdersCount) {\\r\\n            lastProcessedIndex_++;\\r\\n\\r\\n            if (lastProcessedIndex_ >= holdersCount) {\\r\\n                lastProcessedIndex_ = 0;\\r\\n            }                 \\r\\n            \\r\\n            address account = tokenHoldersMap.keys[lastProcessedIndex_];            \\r\\n            \\r\\n            if (_claim(account, autoReinvest[account]) != 0) {\\r\\n                claims_++;\\r\\n            }                       \\r\\n\\r\\n            iterations_++;\\r\\n\\r\\n            uint256 newGasLeft = gasleft();\\r\\n            if (gasLeft > newGasLeft) {\\r\\n                gasUsed += gasLeft - newGasLeft;\\r\\n            }\\r\\n            gasLeft = newGasLeft;\\r\\n        }\\r\\n\\r\\n        lastProcessedIndex = lastProcessedIndex_;\\r\\n        \\r\\n        emit Processed(iterations_, claims_, lastProcessedIndex_, tx.origin );\\r\\n    }\\r\\n    \\r\\n    receive() external payable {\\r\\n        require(totalSupply() != 0, \\\"Not allowed\\\");\\r\\n\\r\\n        if (msg.value != 0) {\\r\\n            magnifiedDividendPerShare += msg.value * magnitude / totalSupply();\\r\\n            totalDividendsDistributed += msg.value;\\r\\n            emit DividendsDistributed(msg.sender, msg.value);            \\r\\n        }\\r\\n    }\\r\\n         \\r\\n    // -------------------------------------- RESTRICTED ----------------------------------------\\r\\n    \\r\\n    function setExcludedFromDividends(address account_, bool state_) external onlyToken {\\r\\n        if (state_) {\\r\\n            excludedFromDividends[account_] = true;\\r\\n            _setBalance(account_, 0);\\r\\n            tokenHoldersMap.remove(account_);\\r\\n        } else {\\r\\n            excludedFromDividends[account_] = false;              \\r\\n        }        \\r\\n        emit ExcludedFromDividends(account_, state_);    \\r\\n    }\\r\\n\\r\\n    function setBalance(address account, uint256 newBalance) external onlyToken {\\r\\n        if (excludedFromDividends[account]) return;\\r\\n        \\r\\n        if (newBalance >= minBalanceForDividends) {\\r\\n            tokenHoldersMap.set(account, newBalance);\\r\\n            _setBalance(account, newBalance);            \\r\\n        } else {            \\r\\n            tokenHoldersMap.remove(account);\\r\\n            _setBalance(account, 0);\\r\\n        }        \\r\\n    }\\r\\n\\r\\n    // -------------------------------------- INTERNAL ----------------------------------------\\r\\n\\r\\n    function _withdrawableDividends(address account_) public view returns (uint256) {\\r\\n        return _accumulativeDividends(account_) - withdrawnDividends[account_];\\r\\n    }\\r\\n\\r\\n    function _accumulativeDividends(address account_) internal view returns (uint256) {\\r\\n        return uint256(int256(magnifiedDividendPerShare * balanceOf(account_)) + magnifiedDividendCorrections[account_]) / magnitude;            \\r\\n    }\\r\\n\\r\\n    function _claim(address account_, bool reinvest_) internal returns (uint256 _amount) {        \\r\\n        _amount = _withdrawableDividends(account_);                \\r\\n        if (_amount == 0) return 0;\\r\\n\\r\\n        IUniswapV2Router02 uniswapV2Router = IToken(token).uniswapV2Router();\\r\\n        \\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = uniswapV2Router.WETH();\\r\\n        \\r\\n        // reinvest\\r\\n        if (reinvest_) {\\r\\n            path[1] = token;\\r\\n            try uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: _amount }(0, path, account_, block.timestamp) {                \\r\\n            } catch {\\r\\n                return 0;\\r\\n            }\\r\\n            emit Reinvested(account_, _amount);  \\r\\n        } \\r\\n        // withdraw\\r\\n        else {\\r\\n            if (payOutToken == address(0)) {\\r\\n                (bool success,) = payable(account_).call{ value: _amount, gas: 3000 }(\\\"\\\");\\r\\n                if (!success) return 0;\\r\\n            } else {  \\r\\n                path[1] = payOutToken;\\r\\n                try uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: _amount }(0, path, account_, block.timestamp) {                \\r\\n                } catch {\\r\\n                    return 0;\\r\\n                }\\r\\n            } \\r\\n            emit Withdrawn(account_, _amount);             \\r\\n        }\\r\\n        \\r\\n        withdrawnDividends[account_] += _amount;                       \\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 value) internal override {\\r\\n        super._mint(account, value);\\r\\n        magnifiedDividendCorrections[account] -= int256(magnifiedDividendPerShare * value);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 value) internal override {\\r\\n        super._burn(account, value);\\r\\n        magnifiedDividendCorrections[account] += int256(magnifiedDividendPerShare * value);\\r\\n    }\\r\\n\\r\\n    function _setBalance(address account, uint256 newBalance) internal {        \\r\\n        uint256 currentBalance = balanceOf(account);\\r\\n        if (newBalance > currentBalance) {\\r\\n            _mint(account, newBalance - currentBalance);\\r\\n        } else if (newBalance < currentBalance) {\\r\\n            _burn(account, currentBalance - newBalance);\\r\\n        }        \\r\\n    }\\r\\n\\r\\n    function _transfer(address, address, uint256) internal pure override {\\r\\n        require(false, \\\"DT: Not allowed\\\");\\r\\n    }\\r\\n\\r\\n    // -------------------------------------- MODIFIERS ----------------------------------------\\r\\n\\r\\n    modifier onlyToken() {\\r\\n        require(msg.sender == token, \\\"DT: Not token\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == IOwnable(token).owner(), \\\"DT: Not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier notPaused() {\\r\\n        require(!dividendsPaused, \\\"DT: Paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // -------------------------------------- EVENTS ----------------------------------------\\r\\n    \\r\\n    event DividendsDistributed(address indexed account, uint256 amount);\\r\\n    event SetPayoutToken(address account);\\r\\n    event SetMinBalanceForDividends(uint256 amount);\\r\\n    event ExcludedFromDividends(address indexed account, bool state);    \\r\\n    event DividendsPaused(bool state);\\r\\n    event SetReinvestAllowed(bool state);\\r\\n    event SetAutoReinvest(address account, bool state);\\r\\n    event Processed(uint256 iterations, uint256 claims, uint256 lastProcessedIndex, address processor);\\r\\n    event Reinvested(address indexed account, uint256 amount);\\r\\n    event Withdrawn(address indexed account, uint256 amount); \\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDividendTracker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: none\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IDividendTracker {\\r\\n    function setExcludedFromDividends(address account, bool state) external;\\r\\n    function setBalance(address account, uint256 amount) external;\\r\\n    function process(uint256 gas) external returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex);   \\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: none\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IFeeDistributor {\\r\\n    //function setExcludedFromDividends(address account_, bool state) external;    \\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: none\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IOwnable {\\r\\n    function owner() external returns (address);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: none\\r\\npragma solidity ^0.8.17;\\r\\nimport \\\"./IUniswapV2Router02.sol\\\"; \\r\\n\\r\\ninterface IToken {\\r\\n    function uniswapV2Router() external returns (IUniswapV2Router02 uniswapV2Router);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: none\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: none\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: none\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport './IUniswapV2Router01.sol';\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\"\r\n    },\r\n    \"contracts/libs/IterableMapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: none\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nlibrary IterableMapping {\\r\\n    // Iterable mapping from address to uint;\\r\\n    struct Map {\\r\\n        address[] keys;\\r\\n        mapping(address => uint256) values;\\r\\n        mapping(address => uint256) indexOf;\\r\\n        mapping(address => bool) inserted;\\r\\n    }\\r\\n\\r\\n    function get(Map storage map, address key) internal view returns (uint256) {\\r\\n        return map.values[key];\\r\\n    }\\r\\n\\r\\n    function getIndexOfKey(Map storage map, address key)\\r\\n        internal\\r\\n        view\\r\\n        returns (int256)\\r\\n    {\\r\\n        if (!map.inserted[key]) {\\r\\n            return -1;\\r\\n        }\\r\\n        return int256(map.indexOf[key]);\\r\\n    }\\r\\n\\r\\n    function getKeyAtIndex(Map storage map, uint256 index)\\r\\n        internal\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return map.keys[index];\\r\\n    }\\r\\n\\r\\n    function size(Map storage map) internal view returns (uint256) {\\r\\n        return map.keys.length;\\r\\n    }\\r\\n\\r\\n    function set(\\r\\n        Map storage map,\\r\\n        address key,\\r\\n        uint256 val\\r\\n    ) internal {\\r\\n        if (map.inserted[key]) {\\r\\n            map.values[key] = val;\\r\\n        } else {\\r\\n            map.inserted[key] = true;\\r\\n            map.values[key] = val;\\r\\n            map.indexOf[key] = map.keys.length;\\r\\n            map.keys.push(key);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function remove(Map storage map, address key) internal {\\r\\n        if (!map.inserted[key]) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        delete map.inserted[key];\\r\\n        delete map.values[key];\\r\\n\\r\\n        uint256 index = map.indexOf[key];\\r\\n        uint256 lastIndex = map.keys.length - 1;\\r\\n        address lastKey = map.keys[lastIndex];\\r\\n\\r\\n        map.indexOf[lastKey] = index;\\r\\n        delete map.indexOf[key];\\r\\n\\r\\n        map.keys[index] = lastKey;\\r\\n        map.keys.pop();\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: none\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./DividendTracker.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IDividendTracker.sol\\\";\\nimport \\\"./interfaces/IFeeDistributor.sol\\\";\\nimport \\\"./interfaces/IToken.sol\\\";\\n\\ncontract Token is IToken, ERC20, Ownable {\\n    IUniswapV2Router02 private _uniswapV2Router;    \\n    IDividendTracker public dividendTracker;    \\n    address public feeDistributor;\\n    address public uniswapV2Pair; \\n\\n    bool private swapping;   \\n    bool public tradingEnabled; \\n    uint256 public launchBlock;     \\n    uint256 constant feeBase = 1000; \\n\\n    Fees public fees;\\n    Config public config;\\n    FeesCollected public feesCollected;\\n\\n    // exlcude from fees and max transaction amount\\n    mapping(address => bool) public excludedFromFees;\\n    mapping(address => bool) public automatedMarketMakerPairs;\\n\\n    // staking variables\\n    mapping(address => uint256) public stakingBonus;\\n    mapping(address => uint256) public stakingUntilDate;\\n    mapping(uint256 => uint256) public stakingAmounts;\\n\\n    //for allowing specific address to trade while trading has not been enabled yet \\n    mapping(address => bool) private canTransferBeforeTradingEnabled;\\n\\n    mapping(address => uint256) private holderLastTransferBlock; // for 1 tx per block\\n    mapping(address => uint256) private holderLastTransferTimestamp; // for sell cooldown timer\\n        \\n    struct Config { \\n        bool swapAndLiquifyEnabled;  \\n        bool stakingEnabled;              \\n        bool botsProtection;\\n        uint16 coolDownTimer;\\n        uint64 gasPriceLimit; \\n        uint32 gasForProcessing;\\n        uint256 maxWallet;\\n        uint256 swapTokensAtAmount;\\n    }\\n\\n    struct Fees {  \\n        uint8 buyLiquidity;\\n        uint8 sellLiquidity; \\n        uint8 buyRewards;\\n        uint8 sellRewards; \\n        uint8 buyDistribution;  \\n        uint8 sellDistribution;\\n        uint8 buyBurn;\\n        uint8 sellBurn; \\n        uint8 transfer;\\n    }\\n\\n    struct FeesCollected {\\n        uint256 liquidity; \\n        uint256 rewards; \\n        uint256 distribution;\\n    }\\n\\n    // -------------------------------------- CONSTRUCT ----------------------------------------\\n\\n    constructor(\\n        string memory name_, \\n        string memory symbol_, \\n        uint256 initialSupply_, \\n        IUniswapV2Router02 uniswapV2Router_,        \\n        Fees memory fees_,\\n        Config memory config_,\\n        address dtPayOutToken_,\\n        uint256 dtMinBalanceForDividends_        \\n        ) ERC20(name_, symbol_) {\\n                \\n        dividendTracker = new DividendTracker(\\n            address(this),\\n            dtPayOutToken_,\\n            dtMinBalanceForDividends_,\\n            string.concat(name_, 'DT'),\\n            string.concat(symbol_, 'DT')\\n        );\\n\\n        _uniswapV2Router = uniswapV2Router_;\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\n\\n        setAutomatedMarketMakerPair(uniswapV2Pair, true);        \\n        dividendTracker.setExcludedFromDividends(address(_uniswapV2Router), true);        \\n        \\n        // exclude from paying fees or having max transaction amount\\n        excludedFromFees[address(this)] = true;\\n        excludedFromFees[address(dividendTracker)] = true;        \\n        excludedFromFees[msg.sender] = true;\\n        \\n        canTransferBeforeTradingEnabled[msg.sender] = true;\\n        canTransferBeforeTradingEnabled[address(this)] = true;\\n        \\n        _mint(msg.sender, initialSupply_); // only time internal mint function is ever called is to create supply\\n                 \\n        setFees(fees_);\\n        setConfig(config_);\\n    }\\n\\n    // -------------------------------------- ADMIN -----------------------------------------\\n\\n    // main contract config\\n    function setConfig(Config memory config_) public onlyOwner {\\n        config = config_;\\n        require(config.gasPriceLimit >= 5 gwei, \\\"Must be >= 5 gwei\\\");\\n        require(config.coolDownTimer <= 300, \\\"Cooldown timer <= 300 seconds\\\");\\n        require(config.maxWallet >= totalSupply() / 2000, \\\"Max wallet cannot be < 0.05%\\\");\\n        require(config.gasForProcessing >= 200000 && config.gasForProcessing <= 1000000, \\\"Bad gas value\\\");\\n        require(config.swapTokensAtAmount <= totalSupply() / 100 * 3, \\\"Swap Tokens At cannot be > 3%\\\");\\n        emit UpdateConfig(config);\\n    }\\n\\n    // transfer/buy/sell fees\\n    function setFees(Fees memory fees_) public onlyOwner {\\n        fees = fees_;\\n        require(fees_.transfer + fees_.buyLiquidity + fees_.buyRewards + fees_.buyDistribution + fees_.buyBurn <= 150, \\\"Wrong total buy fees\\\");\\n        require(fees_.transfer + fees_.sellLiquidity + fees_.sellRewards + fees_.sellDistribution + fees_.sellBurn <= 150, \\\"Wrong total sell fees\\\");\\n        require(fees_.transfer <= 50, \\\"Wrong transfer fees\\\");\\n        require(fees_.buyBurn != 0  && fees_.buyBurn <= 50, \\\"Wrong buy burn fees\\\"); //5\\n        require(fees_.sellBurn != 0  && fees_.sellBurn <= 50, \\\"Wrong sell burn fees\\\");\\n        emit UpdateFees(fees);\\n    }\\n\\n    // can only enable, trading can never be disabled\\n    function setTradingEnabled() external onlyOwner {\\n        require(!tradingEnabled, \\\"Already set\\\");\\n        tradingEnabled = true;\\n        launchBlock = block.number;\\n        emit TradingEnabled();\\n    }\\n    \\n    // set staking duration and bonus \\n    function setStakingAmounts(uint256 duration_, uint256 bonus_) public onlyOwner {\\n        require(stakingAmounts[duration_] != bonus_);\\n        require(bonus_ <= 100, \\\"Staking bonus can't exceed 100\\\");\\n        stakingAmounts[duration_] = bonus_;\\n        emit SetStakingAmounts(duration_, bonus_);\\n    }\\n    \\n    // use for pre sale wallet, adds all exclusions to it\\n    function setPresaleWallet(address account_) external onlyOwner {\\n        canTransferBeforeTradingEnabled[account_] = true;\\n        excludedFromFees[account_] = true;\\n        dividendTracker.setExcludedFromDividends(account_, true);\\n        emit SetPreSaleWallet(account_);\\n    }\\n\\n    // use for pre sale wallet, adds all exclusions to it\\n    function setFeeDistributor(address feeDistributor_) external onlyOwner {\\n        require(feeDistributor != feeDistributor_, \\\"Already set\\\");\\n        feeDistributor = feeDistributor_;\\n        emit SetFeeDistributor(feeDistributor_);\\n    }\\n    \\n    // exclude a wallet from fees \\n    function setExcludedFromFees(address account_, bool state_) public onlyOwner {\\n        require(excludedFromFees[account_] != state_, \\\"Already set\\\");\\n        excludedFromFees[account_] = state_;\\n        emit SetExcludedFromFees(account_, state_);\\n    }\\n\\n    // exclude / include from dividends (rewards)\\n    function setExcludedFromDividends(address account_, bool state_) public onlyOwner {\\n        dividendTracker.setExcludedFromDividends(account_, state_);        \\n        if (!state_) {\\n            dividendTracker.setBalance(account_, _getStakingBalance(account_));\\n        }       \\n    }\\n\\n    // allow a wallet to trade before trading enabled\\n    function setCanTransferBeforeTradingEnabled(address account_, bool state_) external onlyOwner {\\n        require(canTransferBeforeTradingEnabled[account_] != state_, \\\"Already set\\\");\\n        canTransferBeforeTradingEnabled[account_] = state_;\\n        emit SetCanTransferBeforeTradingEnabled(account_, state_);\\n    }\\n\\n    // add account to amm to determine buys/sells\\n    function setAutomatedMarketMakerPair(address account_, bool state_) public onlyOwner {\\n        require(automatedMarketMakerPairs[account_] != state_, \\\"Already set\\\");\\n        automatedMarketMakerPairs[account_] = state_;\\n        dividendTracker.setExcludedFromDividends(account_, state_);       \\n        emit SetAutomatedMarketMakerPair(account_, state_);\\n    }\\n\\n    // change admin\\n    function transferOwnership(address account_) public override onlyOwner {\\n        dividendTracker.setExcludedFromDividends(owner(), false);\\n        dividendTracker.setExcludedFromDividends(account_, true);\\n        excludedFromFees[owner()] = false;\\n        excludedFromFees[account_] = true;\\n        super.transferOwnership(account_);\\n    }\\n\\n    // airdrop to max 100 wallets at once\\n    function airdrop(address[] memory accounts_, uint256[] memory amounts_) external onlyOwner {\\n        require(accounts_.length == amounts_.length, \\\"Listss must be the same length\\\");\\n        require(accounts_.length <= 100, \\\"List length must be <= 100\\\");\\n        \\n        for (uint256 i = 0; i < accounts_.length; i++) {\\n            address account = accounts_[i];                    \\n            super._transfer(msg.sender, account, amounts_[i]);        \\n            dividendTracker.setBalance(account, _getStakingBalance(account));\\n        }\\n    }\\n\\n    // manual swap and send dividends\\n    function forceSwapAndSendDividends() public onlyOwner {\\n        _swapAndSendDividends();\\n    }\\n\\n    // adding initial liquidity \\n    function addLiquidity(uint256 tokenAmount) public payable onlyOwner {\\n        this.transferFrom(msg.sender, address(this), tokenAmount);\\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\\n        _uniswapV2Router.addLiquidityETH{ value: msg.value }(address(this), tokenAmount, 0, 0, msg.sender, block.timestamp);\\n    }\\n\\n    // -------------------------------------- VIEWS -----------------------------------------\\n\\n    // aggregated data for contract and account (by defauld provide ZERO address to get only contract data)\\n    // use it on UI to get all data in single request\\n    function aggregatedData(address account_) public view returns (\\n        // contract\\n        uint256 _totalSupply,\\n        Fees memory _fees,\\n        Config memory _config,\\n        address _uniswapV2Pair,\\n        bool _tradingEnabled,\\n        // account\\n        uint256 _stakingBalance,\\n        uint256 _stakingBonus,\\n        uint256 _stakingUntilDate,\\n        bool _canTransferBeforeTradingEnabled,\\n        bool _excludedFromFees\\n    ) {\\n        // contract\\n        _totalSupply = totalSupply();\\n        _fees = fees;\\n        _config = config;\\n        _uniswapV2Pair = uniswapV2Pair;\\n        _tradingEnabled = tradingEnabled;\\n        // account        \\n        _stakingBalance = _getStakingBalance(account_);\\n        _stakingBonus = stakingBonus[account_];\\n        _stakingUntilDate = stakingUntilDate[account_];\\n        _canTransferBeforeTradingEnabled = canTransferBeforeTradingEnabled[account_];\\n        _excludedFromFees = excludedFromFees[account_];\\n    } \\n\\n    function uniswapV2Router() public view returns (IUniswapV2Router02) {\\n        return _uniswapV2Router;\\n    }\\n    \\n    // -------------------------------------- PUBLIC -----------------------------------------\\n\\n    // stake all user tokens for predefined duration to get bonuses\\n    function stake(uint256 duration_) public {\\n        require(config.stakingEnabled, \\\"Staking is not enabled\\\");\\n        require(stakingAmounts[duration_] != 0, \\\"Invalid staking duration\\\");\\n        require(stakingUntilDate[_msgSender()] < block.timestamp + duration_, \\\"Already staked for a longer\\\");\\n        \\n        stakingBonus[_msgSender()] = stakingAmounts[duration_];\\n        stakingUntilDate[_msgSender()] = block.timestamp + duration_;\\n       \\n        dividendTracker.setBalance(_msgSender(), _getStakingBalance(_msgSender()));\\n        \\n        emit SetAccountStaking(_msgSender(), duration_);\\n    }\\n\\n    // -------------------------------------- INTERNAL ----------------------------------------\\n\\n    function _transfer(address from, address to, uint256 amount) internal override {\\n        require(from != address(0), \\\"Transfer from the zero address\\\");\\n        require(to != address(0), \\\"Transfer to the zero address\\\");\\n        \\n        if (!canTransferBeforeTradingEnabled[from]) {\\n            require(tradingEnabled, \\\"Trading not enabled\\\");\\n        }\\n\\n        if (amount == 0) return;   \\n        \\n        if (!swapping && !excludedFromFees[from] && !excludedFromFees[to] && !excludedFromFees[tx.origin]) {\\n            uint256 rewardsAmount;                       \\n            uint256 liquidityAmount;\\n            uint256 distributionAmount;     \\n            uint256 burnAmount;\\n\\n            bool isSelling = automatedMarketMakerPairs[to];\\n            bool isBuying = automatedMarketMakerPairs[from];\\n            \\n            // if not buy and not sell incure transfer tax\\n            if (!isBuying && !isSelling) { \\n                // calc fees \\n                rewardsAmount = amount * fees.transfer / feeBase;                 \\n            } \\n            // if sell and staking enabled\\n            else if (!isBuying && config.stakingEnabled) {\\n                // staking check\\n                require(stakingUntilDate[from] <= block.timestamp, \\\"Tokens are staked and locked\\\" );\\n                if (stakingUntilDate[from] != 0) {\\n                    stakingUntilDate[from] = 0;\\n                    stakingBonus[from] = 0;\\n                }\\n            } \\n            // if sell\\n            else if (isSelling) {  \\n                // calc fees\\n                rewardsAmount = amount * fees.buyRewards / feeBase;                            \\n                liquidityAmount = amount * fees.buyLiquidity / feeBase; \\n                distributionAmount = amount * fees.buyDistribution / feeBase; \\n                burnAmount = amount * fees.buyBurn / feeBase;              \\n                // bots protection\\n                if (config.botsProtection) {\\n                    require(block.timestamp >= holderLastTransferTimestamp[tx.origin] + config.coolDownTimer, \\\"Cooldown period active\\\");\\n                    holderLastTransferTimestamp[tx.origin] = block.timestamp;\\n                }\\n            } \\n            // if buy\\n            else if (isBuying) {\\n                // calc fees\\n                rewardsAmount = amount * fees.buyRewards / feeBase;                            \\n                liquidityAmount = amount * fees.buyLiquidity / feeBase; \\n                distributionAmount = amount * fees.buyDistribution / feeBase; \\n                burnAmount = amount * fees.buyBurn / feeBase;               \\n                // bots protection\\n                if (config.botsProtection) {\\n                    require(block.number > launchBlock + 2, \\\"No early entry\\\");                    \\n                    require(tx.gasprice <= config.gasPriceLimit, \\\"Gas price exceeds limit.\\\");\\n                    require(holderLastTransferBlock[tx.origin] != block.number, \\\"Too many TX in block\\\");\\n                    holderLastTransferBlock[tx.origin] = block.number;\\n                }\\n                // max wallet token amount\\n                require(balanceOf(to) + amount <= config.maxWallet, \\\"Exceeds max wallet amount\\\" );                \\n            }\\n                        \\n            // process fees\\n            uint256 totalFeesAmount = rewardsAmount + liquidityAmount + distributionAmount;\\n            if (totalFeesAmount != 0) {\\n                super._transfer(from, address(this), totalFeesAmount);\\n                feesCollected.rewards += rewardsAmount;\\n                feesCollected.liquidity += liquidityAmount;\\n                feesCollected.distribution += distributionAmount;    \\n                amount -= totalFeesAmount;        \\n            }\\n\\n            // process burn\\n            if (burnAmount != 0) {\\n                _burn(from, burnAmount);                  \\n                amount -= burnAmount;    \\n            }\\n\\n            // liquify and send dividends\\n            if (isSelling && balanceOf(address(this)) >= config.swapTokensAtAmount) {\\n                swapping = true;\\n                _swapAndLiquify();\\n                _swapAndSendDividends();  \\n                swapping = false;\\n            } \\n\\n            // if buy or sell process dividends\\n            if (isBuying || isSelling) {  \\n                try dividendTracker.process(config.gasForProcessing) {} catch {}            \\n            }\\n        }\\n\\n        super._transfer(from, to, amount);\\n        \\n        dividendTracker.setBalance(from, _getStakingBalance(from));\\n        dividendTracker.setBalance(to, _getStakingBalance(to));\\n    }\\n\\n    function _getStakingBalance(address account_) internal view returns (uint256) {\\n        return config.stakingEnabled ? balanceOf(account_) * (stakingBonus[account_] + 100) / 100 : balanceOf(account_);\\n    }\\n\\n    function _swapAndLiquify() internal {\\n        if (config.swapAndLiquifyEnabled && feesCollected.liquidity != 0) {\\n            uint256 half = feesCollected.liquidity / 2;\\n            uint256 otherHalf = feesCollected.liquidity - half;\\n            feesCollected.liquidity = 0;\\n\\n            uint256 initialBalance = address(this).balance;\\n            \\n            _swapTokensForEth(half, address(this));\\n            \\n            uint256 newBalance = address(this).balance - initialBalance;\\n            _addLiquidity(otherHalf, newBalance);\\n            \\n            emit SwapAndLiquify(half, newBalance, otherHalf);    \\n        }\\n    }\\n    \\n    function _swapAndSendDividends() internal {\\n        if (feesCollected.rewards != 0) {\\n            _swapTokensForEth(feesCollected.rewards, address(dividendTracker));\\n            emit SendDividends(feesCollected.rewards);\\n            feesCollected.rewards = 0;        \\n        }\\n\\n        if (feesCollected.distribution != 0) {            \\n            _swapTokensForEth(feesCollected.distribution, feeDistributor);  \\n            emit SendFees(feesCollected.distribution);  \\n            feesCollected.distribution = 0;         \\n        }\\n    }\\n\\n    function _swapTokensForEth(uint256 tokenAmount, address recipient) internal {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = _uniswapV2Router.WETH();\\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, recipient, block.timestamp);        \\n    }   \\n    \\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) internal {\\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\\n        _uniswapV2Router.addLiquidityETH{ value: ethAmount }(address(this), tokenAmount, 0, 0, owner(), block.timestamp);\\n    }\\n\\n    receive() external payable {}\\n        \\n    // -------------------------------------- EVENTS -----------------------------------------\\n\\n    event UpdateFees(Fees fees);\\n    event UpdateConfig(Config config);\\n    event SetAccountStaking(address account, uint256 duration);\\n    event SetStakingAmounts(uint256 duration, uint256 amount);    \\n    event TradingEnabled();    \\n    event SetPreSaleWallet(address wallet);\\n    event SetFeeDistributor(address account);\\n    event SetExcludedFromFees(address account, bool state);\\n    event SetAutomatedMarketMakerPair(address account, bool state);\\n    event SetCanTransferBeforeTradingEnabled(address account, bool state); \\n    event Airdrop(address account, uint256 amount);        \\n    event SwapAndLiquify(uint256 tokens, uint256 eth, uint256 tokensIntoLiqudity);   \\n    event SendFees(uint256 amount);\\n    event SendDividends(uint256 amount);    \\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply_\",\"type\":\"uint256\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2Router_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"buyLiquidity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellLiquidity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyRewards\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellRewards\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyDistribution\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellDistribution\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyBurn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellBurn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transfer\",\"type\":\"uint8\"}],\"internalType\":\"struct Token.Fees\",\"name\":\"fees_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"swapAndLiquifyEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stakingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"botsProtection\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"coolDownTimer\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"gasPriceLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasForProcessing\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Config\",\"name\":\"config_\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"dtPayOutToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dtMinBalanceForDividends_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"SetAccountStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetCanTransferBeforeTradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetExcludedFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetFeeDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"SetPreSaleWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetStakingAmounts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"swapAndLiquifyEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stakingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"botsProtection\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"coolDownTimer\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"gasPriceLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasForProcessing\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Token.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"UpdateConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"buyLiquidity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellLiquidity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyRewards\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellRewards\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyDistribution\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellDistribution\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyBurn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellBurn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transfer\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Token.Fees\",\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"UpdateFees\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"aggregatedData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"buyLiquidity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellLiquidity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyRewards\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellRewards\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyDistribution\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellDistribution\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyBurn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellBurn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transfer\",\"type\":\"uint8\"}],\"internalType\":\"struct Token.Fees\",\"name\":\"_fees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"swapAndLiquifyEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stakingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"botsProtection\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"coolDownTimer\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"gasPriceLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasForProcessing\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Config\",\"name\":\"_config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_tradingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_stakingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingUntilDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_canTransferBeforeTradingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_excludedFromFees\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"swapAndLiquifyEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stakingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"botsProtection\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"coolDownTimer\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"gasPriceLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasForProcessing\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract IDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"buyLiquidity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellLiquidity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyRewards\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellRewards\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyDistribution\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellDistribution\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyBurn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellBurn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transfer\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribution\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceSwapAndSendDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state_\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state_\",\"type\":\"bool\"}],\"name\":\"setCanTransferBeforeTradingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"swapAndLiquifyEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stakingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"botsProtection\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"coolDownTimer\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"gasPriceLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasForProcessing\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Config\",\"name\":\"config_\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state_\",\"type\":\"bool\"}],\"name\":\"setExcludedFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state_\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeDistributor_\",\"type\":\"address\"}],\"name\":\"setFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"buyLiquidity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellLiquidity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyRewards\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellRewards\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyDistribution\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellDistribution\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyBurn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellBurn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transfer\",\"type\":\"uint8\"}],\"internalType\":\"struct Token.Fees\",\"name\":\"fees_\",\"type\":\"tuple\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"setPresaleWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus_\",\"type\":\"uint256\"}],\"name\":\"setStakingAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTradingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingUntilDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000460000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000001a13b860000000000000000000000000000000000000000000000000000000000000493e000000000000000000000000000000000000000000000d3c21bcecceda10000000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000e5b5d4bea7468b4994fa676949308a79497aa24c00000000000000000000000000000000000000000000054b32d1419f163c0000000000000000000000000000000000000000000000000000000000000000000f4261627920536865696b6820496e75000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034253490000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}