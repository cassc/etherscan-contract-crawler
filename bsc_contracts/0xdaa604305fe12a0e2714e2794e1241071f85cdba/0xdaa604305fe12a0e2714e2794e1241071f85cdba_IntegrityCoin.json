{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-06-29\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-06-22\r\n*/\r\n\r\npragma solidity ^0.8.4;\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nenum Permission {\r\n    ChangeFees,\r\n    AdjustContractVariables,\r\n    Authorize,\r\n    Unauthorize,\r\n    PauseUnpauseContract,\r\n    BypassPause,\r\n    LockPermissions,\r\n    ExcludeInclude\r\n}\r\n\r\nabstract contract TEGAuth {\r\n    struct PermissionLock {\r\n        bool isLocked;\r\n        uint64 expiryTime;\r\n    }\r\n\r\n    address public owner;\r\n    mapping(address => mapping(uint256 => bool)) private authorizations; \r\n    \r\n    uint256 constant NUM_PERMISSIONS = 8; \r\n    mapping(string => uint256) permissionNameToIndex;\r\n    mapping(uint256 => string) permissionIndexToName;\r\n\r\n    mapping(uint256 => PermissionLock) lockedPermissions;\r\n    \r\n\r\n    constructor(address owner_) {\r\n        owner = owner_;\r\n        for (uint256 i; i < NUM_PERMISSIONS; i++) {\r\n            authorizations[owner_][i] = true;\r\n        }\r\n\r\n        permissionNameToIndex[\"ChangeFees\"] = uint256(Permission.ChangeFees);\r\n        permissionNameToIndex[\"AdjustContractVariables\"] = uint256(Permission.AdjustContractVariables);\r\n        permissionNameToIndex[\"Authorize\"] = uint256(Permission.Authorize);\r\n        permissionNameToIndex[\"Unauthorize\"] = uint256(Permission.Unauthorize);\r\n        permissionNameToIndex[\"PauseUnpauseContract\"] = uint256(Permission.PauseUnpauseContract);\r\n        permissionNameToIndex[\"BypassPause\"] = uint256(Permission.BypassPause);\r\n        permissionNameToIndex[\"LockPermissions\"] = uint256(Permission.LockPermissions);\r\n        permissionNameToIndex[\"ExcludeInclude\"] = uint256(Permission.ExcludeInclude);\r\n\r\n        permissionIndexToName[uint256(Permission.ChangeFees)] = \"ChangeFees\";\r\n        permissionIndexToName[uint256(Permission.AdjustContractVariables)] = \"AdjustContractVariables\";\r\n        permissionIndexToName[uint256(Permission.Authorize)] = \"Authorize\";\r\n        permissionIndexToName[uint256(Permission.Unauthorize)] = \"Unauthorize\";\r\n        permissionIndexToName[uint256(Permission.PauseUnpauseContract)] = \"PauseUnpauseContract\";\r\n        permissionIndexToName[uint256(Permission.BypassPause)] = \"BypassPause\";\r\n        permissionIndexToName[uint256(Permission.LockPermissions)] = \"LockPermissions\";\r\n        permissionIndexToName[uint256(Permission.ExcludeInclude)] = \"ExcludeInclude\";\r\n    }\r\n\r\n  \r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"Ownership required.\"); _;\r\n    }\r\n\r\n    modifier authorizedFor(Permission permission) {\r\n        require(!lockedPermissions[uint256(permission)].isLocked, \"Permission is locked.\");\r\n        require(isAuthorizedFor(msg.sender, permission), string(abi.encodePacked(\"Not authorized. You need the permission \", permissionIndexToName[uint256(permission)]))); _;\r\n    }\r\n\r\n    function authorizeFor(address adr, string memory permissionName) public authorizedFor(Permission.Authorize) {\r\n        uint256 permIndex = permissionNameToIndex[permissionName];\r\n        authorizations[adr][permIndex] = true;\r\n        emit AuthorizedFor(adr, permissionName, permIndex);\r\n    }\r\n\r\n    function authorizeForMultiplePermissions(address adr, string[] calldata permissionNames) public authorizedFor(Permission.Authorize) {\r\n        for (uint256 i; i < permissionNames.length; i++) {\r\n            uint256 permIndex = permissionNameToIndex[permissionNames[i]];\r\n            authorizations[adr][permIndex] = true;\r\n            emit AuthorizedFor(adr, permissionNames[i], permIndex);\r\n        }\r\n    }\r\n\r\n    function unauthorizeFor(address adr, string memory permissionName) public authorizedFor(Permission.Unauthorize) {\r\n        require(adr != owner, \"Can't unauthorize owner\");\r\n\r\n        uint256 permIndex = permissionNameToIndex[permissionName];\r\n        authorizations[adr][permIndex] = false;\r\n        emit UnauthorizedFor(adr, permissionName, permIndex);\r\n    }\r\n\r\n    function unauthorizeForMultiplePermissions(address adr, string[] calldata permissionNames) public authorizedFor(Permission.Unauthorize) {\r\n        require(adr != owner, \"Can't unauthorize owner\");\r\n\r\n        for (uint256 i; i < permissionNames.length; i++) {\r\n            uint256 permIndex = permissionNameToIndex[permissionNames[i]];\r\n            authorizations[adr][permIndex] = false;\r\n            emit UnauthorizedFor(adr, permissionNames[i], permIndex);\r\n        }\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function isAuthorizedFor(address adr, string memory permissionName) public view returns (bool) {\r\n        return authorizations[adr][permissionNameToIndex[permissionName]];\r\n    }\r\n\r\n    function isAuthorizedFor(address adr, Permission permission) public view returns (bool) {\r\n        return authorizations[adr][uint256(permission)];\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        address oldOwner = owner;\r\n        owner = adr;\r\n        for (uint256 i; i < NUM_PERMISSIONS; i++) {\r\n            authorizations[oldOwner][i] = false;\r\n            authorizations[owner][i] = true;\r\n        }\r\n        emit OwnershipTransferred(oldOwner, owner);\r\n    }\r\n\r\n    function getPermissionNameToIndex(string memory permissionName) public view returns (uint256) {\r\n        return permissionNameToIndex[permissionName];\r\n    }\r\n  \r\n    function getPermissionUnlockTime(string memory permissionName) public view returns (uint256) {\r\n        return lockedPermissions[permissionNameToIndex[permissionName]].expiryTime;\r\n    }\r\n\r\n    function isLocked(string memory permissionName) public view returns (bool) {\r\n        return lockedPermissions[permissionNameToIndex[permissionName]].isLocked;\r\n    }\r\n\r\n    function lockPermission(string memory permissionName, uint64 time) public virtual authorizedFor(Permission.LockPermissions) {\r\n        uint256 permIndex = permissionNameToIndex[permissionName];\r\n        uint64 expiryTime = uint64(block.timestamp) + time;\r\n        lockedPermissions[permIndex] = PermissionLock(true, expiryTime);\r\n        emit PermissionLocked(permissionName, permIndex, expiryTime);\r\n    }\r\n   \r\n    function unlockPermission(string memory permissionName) public virtual {\r\n        require(block.timestamp > getPermissionUnlockTime(permissionName) , \"Permission is locked until the expiry time.\");\r\n        uint256 permIndex = permissionNameToIndex[permissionName];\r\n        lockedPermissions[permIndex].isLocked = false;\r\n        emit PermissionUnlocked(permissionName, permIndex);\r\n    }\r\n\r\n    event PermissionLocked(string permissionName, uint256 permissionIndex, uint64 expiryTime);\r\n    event PermissionUnlocked(string permissionName, uint256 permissionIndex);\r\n    event OwnershipTransferred(address from, address to);\r\n    event AuthorizedFor(address adr, string permissionName, uint256 permissionIndex);\r\n    event UnauthorizedFor(address adr, string permissionName, uint256 permissionIndex);\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function depositBUSD(uint256 busdAmount) external;\r\n    function process(uint256 gas) external;\r\n    function claimDividend() external;\r\n}\r\n\r\nstruct Share {\r\n    uint256 amount;\r\n    uint256 totalExcluded;\r\n    uint256 totalRealised;\r\n}\r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n\r\n    address _token;\r\n\r\n    IBEP20 BUSD = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    IDEXRouter router;\r\n\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n\r\n    mapping (address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n\r\n    uint256 public minPeriod = 1 hours; \r\n    uint256 public minDistribution = 1 * (10 ** 18); \r\n\r\n    uint256 currentIndex;\r\n\r\n    bool initialized;\r\n\r\n    event DistributorTransfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n\r\n    constructor (address _router) {\r\n        router = _router != address(0)\r\n            ? IDEXRouter(_router)\r\n            : IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); \r\n        _token = msg.sender;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit() external payable override onlyToken {\r\n        uint256 balanceBefore = BUSD.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(BUSD);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amount = BUSD.balanceOf(address(this)).sub(balanceBefore);\r\n\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n\r\n    function depositBUSD(uint256 busdAmount) external override onlyToken {\r\n        totalDividends = totalDividends.add(busdAmount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(busdAmount).div(totalShares));\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0) { return; }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    \r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if(amount > 0){\r\n            totalDistributed = totalDistributed.add(amount);\r\n            BUSD.transfer(shareholder, amount);\r\n\r\n            emit DistributorTransfer(address(this), shareholder, amount);\r\n\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n    }\r\n    \r\n    function claimDividend() external override {\r\n        distributeDividend(msg.sender);\r\n    }\r\n\r\n    function getShare(address holder) public view returns (Share memory) {\r\n        return shares[holder];\r\n    }\r\n    function getTotalShares() public view returns (uint256) {\r\n        return totalShares;\r\n    }\r\n    function getDividendsPerShare() public view returns (uint256) {\r\n        return dividendsPerShare;\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\ncontract IntegrityCoin is IBEP20, TEGAuth {\r\n    using SafeMath for uint256;\r\n\r\n    address BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n    \r\n    string constant _name = \"Integrity Coin\";\r\n    string constant _symbol = \"TEG\";\r\n    uint8 constant _decimals = 18;\r\n\r\n    uint256 _totalSupply =  1 * (10 ** 15) * (10 ** _decimals);\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    struct Tax{\r\n        uint256 total;\r\n        uint256 reflection;\r\n        uint256 liquidity;\r\n        uint256 buyback;\r\n    }\r\n\r\n    Tax public buyFees;\r\n    Tax public sellFees;\r\n    Tax public highSellFees;\r\n    Tax public transferFees;\r\n    Tax public noneFees;\r\n    uint256 public feeDenominator = 10000;\r\n\r\n    // Exempt mappings\r\n    mapping (address => bool) public isDividendExempt;\r\n    mapping (address => bool) public isTradableLockExempt;\r\n    mapping (address => bool) public isTransferFeeExempt; \r\n    mapping (address => bool) public isTradeFeeExempt; \r\n    mapping (address => bool) public isHighTaxExempt;\r\n\r\n    address public autoLiquidityReceiver;\r\n    address public buybackFeeReceiver;\r\n    address public dividendDistributor;\r\n\r\n    IDEXRouter public router;\r\n    address pancakeV2BNBPair;\r\n    address[] public pairs;\r\n\r\n    uint256 public launchedAt;\r\n\r\n    bool public swapEnabled = true;\r\n    bool public tradableLock = true;\r\n    bool public transferFeeEnabled = false;\r\n    bool public highTaxEnabled = true;\r\n    bool public swapThresholdEnabled = true;\r\n    bool public inSwap;\r\n\r\n    DividendDistributor distributor;\r\n    uint256 distributorGas = 600000;\r\n    uint256 buybackGas = 30000;\r\n    uint256 public AirdropBUSDthreshold = 1 * (10 ** 18);\r\n    uint256 public highTaxMinimum = 200 * (10 ** 9) * (10 ** _decimals);\r\n    uint256 public highTaxMinimumLimit = 50 * (10 ** 9) * (10 ** _decimals);\r\n    uint256 public maxSellAmount = 1000 * (10 ** 12) * (10 ** _decimals);\r\n    uint256 public swapThreshold = 300 * (10 ** 9) * (10 ** _decimals);\r\n    \r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\r\n    event Launched(uint256 blockNumber, uint256 timestamp);\r\n    event SwapBackSuccess(uint256 amount);\r\n    event SwapBackFailed(string message);\r\n    event BuybackTransfer(bool status);\r\n\r\n    constructor () TEGAuth(msg.sender) {\r\n        address dexRouter_ = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        router = IDEXRouter(dexRouter_);\r\n        \r\n        pancakeV2BNBPair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        _allowances[address(this)][address(router)] = ~uint256(0);\r\n        pairs.push(pancakeV2BNBPair);\r\n\r\n        distributor = new DividendDistributor(address(router));\r\n        dividendDistributor = address(distributor);\r\n\r\n        approve(dexRouter_, _totalSupply);\r\n        IBEP20(BUSD).approve(dexRouter_, _totalSupply);\r\n        initTaxs();\r\n        initOwner();\r\n        launch();    \r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, ~uint256(0));\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n         if(_allowances[sender][msg.sender] != ~uint256(0)){\r\n             _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n         }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        uint16 _transferMethod = isTranferMethod(sender, recipient);\r\n        if (checkTradableLock(sender, recipient)) { require(!tradableLock, \"Locked this trade!\"); }\r\n        if (_transferMethod == 2) { require(amount <= maxSellAmount, \"Sell amount can't be bigger than maxSellAmount!\"); }\r\n\r\n        if (shouldSwapBack()){ swapBack(sender, recipient, amount); }\r\n        if (shouldSwapAirdropBUSD()) { swapAirdropBUSD(); }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        uint256 amountReceived = takeFee(sender, recipient, amount);\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        if (!isDividendExempt[sender]){ try distributor.setShare(sender, _balances[sender]) {} catch {} }\r\n        if (!isDividendExempt[recipient]){ try distributor.setShare(recipient, _balances[recipient]) {} catch {} }\r\n\r\n        try distributor.process(distributorGas) {} catch {}\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        Tax memory tax = getTax(sender, recipient, amount);\r\n        uint256 feeAmount = amount.mul(tax.total).div(feeDenominator);\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function isTrade(address sender, address recipient) internal view returns (bool) {\r\n        address[] memory liqPairs = pairs;\r\n        for (uint256 i = 0; i < liqPairs.length; i++) {\r\n            if (recipient == liqPairs[i] || sender == liqPairs[i]) return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function checkTradableLock(address sender, address recipient) internal view returns (bool) {\r\n        return isTrade(sender, recipient) && !isTradableLockExempt[sender] && !isTradableLockExempt[recipient];\r\n    }\r\n\r\n    function isTranferMethod(address sender, address recipient) internal view returns (uint16) {\r\n        address[] memory liqPairs = pairs;\r\n        for (uint256 i = 0; i < liqPairs.length; i++) {\r\n            if (sender == liqPairs[i]) return 1; \r\n            if (recipient == liqPairs[i]) return 2; \r\n        }\r\n        return 0; \r\n    }\r\n\r\n    function shouldSwapAirdropBUSD() internal view returns (bool) {\r\n        return  msg.sender != pancakeV2BNBPair\r\n        && IBEP20(BUSD).balanceOf(address(this)) > AirdropBUSDthreshold;\r\n    }\r\n\r\n    function swapAirdropBUSD() internal {\r\n        uint256 sendBUSDAmount = IBEP20(BUSD).balanceOf(address(this));\r\n        IBEP20(BUSD).transfer(address(distributor), sendBUSDAmount);\r\n        distributor.depositBUSD(sendBUSDAmount);\r\n    }\r\n\r\n    function swapAirdropBUSDManual() external authorizedFor(Permission.AdjustContractVariables) {\r\n        uint256 sendBUSDAmount = IBEP20(BUSD).balanceOf(address(this));\r\n        IBEP20(BUSD).transfer(address(distributor), sendBUSDAmount);\r\n        distributor.depositBUSD(sendBUSDAmount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pancakeV2BNBPair\r\n        && !inSwap;\r\n        \r\n    }\r\n\r\n    function swapBack(address _sender, address _recipient, uint256 _amount) internal swapping {\r\n        Tax memory tax = getTax(_sender, _recipient, _amount);\r\n        if (tax.total == 0){\r\n            return;\r\n        }\r\n        uint256 amountToLiquify = 0;\r\n        uint256 amountToSwap = swapThreshold;\r\n        uint256 swapLiquidityFee = tax.liquidity;\r\n        if (tax.total > 0){\r\n            amountToLiquify = swapThreshold.mul(swapLiquidityFee).div(tax.total).div(2);\r\n            amountToSwap = swapThreshold.sub(amountToLiquify);\r\n        }\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        try router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ) {\r\n\r\n            uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n            uint256 amountBNBLiquidity = 0;\r\n            uint256 amountBNBReflection = amountBNB;\r\n            uint256 amountBNBBuyback = 0;\r\n            if (tax.total > 0){\r\n                uint256 totalBNBFee = tax.total.sub(swapLiquidityFee.div(2));\r\n                amountBNBLiquidity = amountBNB.mul(swapLiquidityFee).div(totalBNBFee).div(2);\r\n                amountBNBReflection = amountBNB.mul(tax.reflection).div(totalBNBFee);\r\n                amountBNBBuyback = amountBNB.mul(tax.buyback).div(totalBNBFee);\r\n\r\n            }\r\n            if (amountBNBReflection > 0) {\r\n                try distributor.deposit{value: amountBNBReflection}() {} catch {}\r\n            }\r\n            if (amountBNBBuyback > 0){\r\n                (bool buybackSuccess, ) = payable(buybackFeeReceiver).call{value: amountBNBBuyback, gas: buybackGas}(\"\");\r\n                emit BuybackTransfer(buybackSuccess);\r\n            }\r\n            if(amountToLiquify > 0){\r\n                try router.addLiquidityETH{ value: amountBNBLiquidity }(\r\n                    address(this),\r\n                    amountToLiquify,\r\n                    0,\r\n                    0,\r\n                    autoLiquidityReceiver,\r\n                    block.timestamp\r\n                ) {\r\n                    emit AutoLiquify(amountToLiquify, amountBNBLiquidity);\r\n                } catch {\r\n                    emit AutoLiquify(0, 0);\r\n                }\r\n            }\r\n\r\n            emit SwapBackSuccess(amountToSwap);\r\n        } catch Error(string memory e) {\r\n            emit SwapBackFailed(string(abi.encodePacked(\"SwapBack failed with error \", e)));\r\n        } catch {\r\n            emit SwapBackFailed(\"SwapBack failed without an error message from pancakeSwap\");\r\n        }\r\n    }\r\n\r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function launch() internal {\r\n        launchedAt = block.number;\r\n        emit Launched(block.number, block.timestamp);\r\n    }\r\n    \r\n    function setAirdropBUSDthreshold(uint256 amount) external authorizedFor(Permission.AdjustContractVariables) {\r\n        AirdropBUSDthreshold = amount;\r\n    }\r\n\r\n    function setIsDividendExempt(address holder, bool exempt) external authorizedFor(Permission.ExcludeInclude) {\r\n        require(holder != address(this) && holder != pancakeV2BNBPair);\r\n        isDividendExempt[holder] = exempt;\r\n        if(exempt){\r\n            distributor.setShare(holder, 0);\r\n        }else{\r\n            distributor.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n\r\n    function setTaxs(uint16 _transferType, uint256 _totalFee, uint256 _liquidityFee, uint256 _reflectionFee, uint256 _buybackFee, uint256 _feeDenominator) external authorizedFor(Permission.AdjustContractVariables) {\r\n        require(_totalFee==_liquidityFee+_reflectionFee+_buybackFee, \"Total Fee should be same as the sum of other fees!\");\r\n        require(_totalFee.mul(100).div(_feeDenominator)<=60, \"Total Fee shouldn't be bigger than 60%!\");\r\n        require(_transferType<5, \"TransferType is smaller than 5!\");\r\n\r\n        if (_transferType == 1){ \r\n            buyFees = Tax(_totalFee, _liquidityFee, _reflectionFee, _buybackFee);\r\n            feeDenominator = _feeDenominator;\r\n        }\r\n        else if (_transferType == 2){ \r\n            sellFees = Tax(_totalFee, _liquidityFee, _reflectionFee, _buybackFee);\r\n            feeDenominator = _feeDenominator;\r\n        }\r\n        else if (_transferType == 3){ \r\n            highSellFees = Tax(_totalFee, _liquidityFee, _reflectionFee, _buybackFee);\r\n            feeDenominator = _feeDenominator;\r\n        }\r\n        else if (_transferType == 4){ \r\n            transferFees = Tax(_totalFee, _liquidityFee, _reflectionFee, _buybackFee);\r\n            feeDenominator = _feeDenominator;\r\n        }\r\n        else if (_transferType == 0){ \r\n            noneFees = Tax(_totalFee, _liquidityFee, _reflectionFee, _buybackFee);\r\n            feeDenominator = _feeDenominator;\r\n        }\r\n    }\r\n\r\n    function setFeeReceivers(address _autoLiquidityReceiver, address _buybackFeeReceiver) external authorizedFor(Permission.AdjustContractVariables) {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        buybackFeeReceiver = _buybackFeeReceiver;\r\n    }\r\n\r\n    function setSwapBackSettings(uint256 _amount) external authorizedFor(Permission.AdjustContractVariables) {\r\n        swapThreshold = _amount;\r\n    }\r\n    \r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external authorizedFor(Permission.AdjustContractVariables) {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n\r\n    function setDistributorSettings(uint256 _distributorGas, uint256 _buybackGat) external authorizedFor(Permission.AdjustContractVariables) {\r\n        distributorGas = _distributorGas;\r\n        buybackGas = _buybackGat;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function claimDividend() external {\r\n        distributor.claimDividend();\r\n    }\r\n\r\n    function setIsTradableLockExempt(address holder, bool exempt) external authorizedFor(Permission.AdjustContractVariables) {\r\n        isTradableLockExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsHighTaxExempt(address holder, bool exempt) external authorizedFor(Permission.AdjustContractVariables) {\r\n        isHighTaxExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsTransferFeeExempt(address holder, bool exempt) external authorizedFor(Permission.AdjustContractVariables) {\r\n        isTransferFeeExempt[holder] = exempt;\r\n    }\r\n    function setIsTradeFeeExempt(address holder, bool exempt) external authorizedFor(Permission.AdjustContractVariables) {\r\n        isTradeFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsAllExempt(address holder, bool exempt) internal authorizedFor(Permission.AdjustContractVariables) {\r\n        isDividendExempt[holder] = exempt;\r\n        isTradableLockExempt[holder] = exempt;\r\n        isTransferFeeExempt[holder] = exempt;\r\n        isTradeFeeExempt[holder] = exempt;\r\n        isHighTaxExempt[holder] = exempt;\r\n    }\r\n\r\n    function setTradable() external authorizedFor(Permission.AdjustContractVariables) {\r\n        tradableLock = false;\r\n    }\r\n\r\n    function setHighTaxEnabled(bool _enabled) external authorizedFor(Permission.AdjustContractVariables) {\r\n        highTaxEnabled = _enabled;\r\n    }\r\n\r\n\r\n    function setTransferFeeEnabled(bool _enabled) external authorizedFor(Permission.AdjustContractVariables) {\r\n        transferFeeEnabled = _enabled;\r\n    }\r\n\r\n    function setHighTaxMinimum(uint256 _amount) external authorizedFor(Permission.AdjustContractVariables) {\r\n        require(_amount >= highTaxMinimumLimit, \"The high tax minimum amount can't be smaller than highTaxMinimumLimit\");\r\n        highTaxMinimum = _amount;\r\n    }\r\n    function setMaxSellAmount(uint256 _amount) external authorizedFor(Permission.AdjustContractVariables) {\r\n        require(_amount >= 50 * (10 ** 9) * (10 ** _decimals), \"The high tax minimum amount can't be smaller than 50 billion\");\r\n        maxSellAmount = _amount;\r\n    }\r\n    function initTaxs() internal authorizedFor(Permission.AdjustContractVariables) {\r\n        buyFees = Tax(1500, 1300, 200, 0);\r\n        sellFees = Tax(2000, 1600, 300, 100);\r\n        highSellFees = Tax(3500, 3100, 300, 100);\r\n        transferFees = Tax(1400, 1000, 300, 100);\r\n        noneFees = Tax(0, 0, 0, 0);\r\n    }\r\n    function initOwner() internal authorizedFor(Permission.AdjustContractVariables) {\r\n        address owner_ = msg.sender;\r\n        setIsAllExempt(address(this), true);\r\n        setIsAllExempt(owner_, true);\r\n        isDividendExempt[pancakeV2BNBPair] = true;\r\n        isDividendExempt[DEAD] = true;\r\n        autoLiquidityReceiver = owner_;\r\n        buybackFeeReceiver = owner_;\r\n        _balances[owner_] = _totalSupply;\r\n        emit Transfer(address(0), owner_, _totalSupply);\r\n    }\r\n    function getTax(address sender, address recipient, uint256 amount) internal view returns (Tax memory) {\r\n        uint16 _transferMethod = isTranferMethod(sender, recipient);\r\n        if (_transferMethod==0 && transferFeeEnabled && !isTransferFeeExempt[sender]){ // General transfer\r\n            return transferFees;\r\n        }\r\n        else if (_transferMethod==1 && !isTradeFeeExempt[sender]){ // Buy\r\n            return buyFees;\r\n        }\r\n        else if (_transferMethod==2 && !isTradeFeeExempt[sender]){ // Sell\r\n            if (highTaxEnabled && amount >= highTaxMinimum && !isHighTaxExempt[sender]) { // High Sell\r\n                return highSellFees;\r\n            }\r\n            return sellFees;\r\n        }\r\n        return noneFees;\r\n    }\r\n   \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"permissionIndex\",\"type\":\"uint256\"}],\"name\":\"AuthorizedFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BuybackTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Launched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"permissionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expiryTime\",\"type\":\"uint64\"}],\"name\":\"PermissionLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"permissionIndex\",\"type\":\"uint256\"}],\"name\":\"PermissionUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"SwapBackFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapBackSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"permissionIndex\",\"type\":\"uint256\"}],\"name\":\"UnauthorizedFor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AirdropBUSDthreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"authorizeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"permissionNames\",\"type\":\"string[]\"}],\"name\":\"authorizeForMultiplePermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"getPermissionNameToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"getPermissionUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highTaxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highTaxMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highTaxMinimumLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"enum Permission\",\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"isAuthorizedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"isAuthorizedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHighTaxExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTradableLockExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTradeFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTransferFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"lockPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noneFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAirdropBUSDthreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributorGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buybackGat\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buybackFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setHighTaxEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setHighTaxMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsHighTaxExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTradableLockExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTradeFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTransferFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_transferType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_totalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setTaxs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTradable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTransferFeeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAirdropBUSDManual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThresholdEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradableLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"unauthorizeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"permissionNames\",\"type\":\"string[]\"}],\"name\":\"unauthorizeForMultiplePermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"unlockPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "IntegrityCoin", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6e2b53591a6a12326c6273e9922a947bc8fef999ee8b6e8f6b3f5f9f60cbf49a"}