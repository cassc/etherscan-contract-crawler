{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Solarmoon.sol\": {\r\n      \"content\": \"pragma solidity =0.8.0;\\n\\n// SPDX-License-Identifier: UNLICENSED\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./libraries/Structs.sol\\\";\\nimport \\\"./interfaces/IPancakeRouter02.sol\\\";\\nimport \\\"./interfaces/IPancakeFactory.sol\\\";\\n\\ncontract Solarmoon is Ownable, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    uint256 private TOTAL_SUPPLY = 10e23;\\n    uint256 private constant _MAX_UINT = ~uint256(0);\\n    uint8 private constant _HUNDRED_PERCENT = 100;\\n    uint256 private _TOTAL_REFLECTION = (_MAX_UINT - _MAX_UINT.mod(TOTAL_SUPPLY));\\n\\n    TokenStats internal _stats = TokenStats(_TOTAL_REFLECTION, TOTAL_SUPPLY, 0, 0, 0, 0);\\n    TaxRates internal _taxRates = TaxRates(2, 6, 2, 10);\\n\\n    address public infrastructureVault;\\n    address public constant burnAddress = 0x000000000000000000000000000000000000dEaD;\\n\\n    mapping(address => Balances) private _balances;\\n    mapping(address => ExemptionStats) private _exemptions;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    string private _name = \\\"Solarmoon\\\";\\n    string private _symbol = \\\"SOLAR\\\";\\n\\n    event AccountExclusionStateChanged(address account, bool excludeFromReward, bool excludeFromFee);\\n    event InfrastructureVaultUpdated(address infrastructureVault);\\n    event VaultDistribution(address vault);\\n    event Burn(uint256 amount);\\n\\n    constructor() {\\n        address deployer = _msgSender();\\n        \\n        uint256 reflectionAmountHalf = _stats.totalReflection.div(2);\\n\\n        _balances[burnAddress].reflection = reflectionAmountHalf;\\n        _balances[deployer].reflection = _stats.totalReflection.sub(reflectionAmountHalf);\\n\\n        emit Transfer(address(0), deployer, _stats.totalTokens.div(2));\\n        emit Transfer(address(0), burnAddress, _stats.totalTokens.div(2));\\n        emit Burn(_stats.totalTokens.div(2));\\n\\n        _exemptions[deployer].isExcludedFromFee = true;\\n        _exemptions[address(this)].isExcludedFromFee = true;\\n\\n    }\\n\\n    /**\\n     * @dev fallback to receive bnb\\n     *\\n     */\\n    receive() external payable {}\\n\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual returns (uint8) {\\n        return 9;\\n    }\\n\\n    function totalSupply() external view virtual override returns (uint256) {\\n        return _stats.totalTokens;\\n    }\\n\\n    function totalFees() external view returns (uint256) {\\n        return _stats.totalFees;\\n    }\\n\\n    /**\\n     * @dev function to migrate liquidity to pancakeSwap\\n     *\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_exemptions[account].isExcluded) return _balances[account].tokens;\\n        return tokenFromReflection(_balances[account].reflection);\\n    }\\n\\n    /**\\n     * @dev returns the amount of reflection for the given token amount\\n     *\\n     */\\n    function reflectionFromToken(uint256 amountTokens, bool deductFees) public view returns (uint256) {\\n        require(amountTokens <= _stats.totalTokens, \\\"Solarmoon: amount must be less than total supply\\\");\\n        (CalculationParameters memory params, ) = calculateValues(amountTokens, deductFees);\\n        return params.reflectionTransferAmount;\\n    }\\n\\n    /**\\n     * @dev returns the amount of tokens for the given reflection amount\\n     *\\n     */\\n    function tokenFromReflection(uint256 reflectionAmount) internal view returns (uint256) {\\n        require(reflectionAmount <= _stats.totalReflection, \\\"Solarmoon: amount has to be less or equal to total reflection\\\");\\n        uint256 rate = calculateReflectionRate();\\n\\n        return reflectionAmount.div(rate);\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev ERC20 approve\\n     * \\n     */\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev function to increase the allowance of a spender\\n     *\\n     */\\n    function increaseAllowance(address spender, uint256 value) external returns (bool) {\\n        uint256 newValue = allowance(_msgSender(), spender).add(value);\\n        _approve(_msgSender(), spender, newValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev function to decrease the allowance of a spender\\n     *\\n     */\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool) {\\n        uint256 oldValue = allowance(_msgSender(), spender);\\n        require(oldValue >= value, \\\"Solarmoon: cannot decrease allowance below zero\\\");\\n        uint256 newValue = oldValue.sub(value);\\n        _approve(_msgSender(), spender, newValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev ERC20 transfer\\n     *\\n     */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev ERC20 transferFrom\\n     *\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"Solarmoon: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev external wrapper to update reward exclusion state\\n     *\\n     */\\n    function updateRewardExclusionState(address account, bool exclude) external onlyOwner {\\n        updateAccountExclusionState(account, exclude, _exemptions[account].isExcludedFromFee);\\n    }\\n\\n\\n    /**\\n     * @dev external wrapper to update fee exclusion state\\n     *\\n     */\\n    function updateFeeExclusionState(address account, bool exclude) external onlyOwner {\\n        updateAccountExclusionState(account, _exemptions[account].isExcluded, exclude);\\n    }\\n\\n    /**\\n     * @dev internal function to handle changes in exclusion state\\n     *\\n     */\\n    function updateAccountExclusionState(\\n        address account,\\n        bool excludeFromReward,\\n        bool excludeFromFees\\n    ) internal {\\n        TokenStats storage stats = _stats;\\n        if (excludeFromReward && !_exemptions[account].isExcluded) {\\n            _balances[account].tokens = tokenFromReflection(_balances[account].reflection);\\n            stats.totalExcludedReflection = _stats.totalExcludedReflection.add(_balances[account].reflection);\\n            stats.totalExcludedTokens = _stats.totalExcludedTokens.add(_balances[account].tokens);\\n        }\\n        if (!excludeFromReward && _exemptions[account].isExcluded) {\\n            stats.totalExcludedReflection = _stats.totalExcludedReflection.sub(_balances[account].reflection);\\n            stats.totalExcludedTokens = _stats.totalExcludedTokens.sub(_balances[account].tokens);\\n\\n            _balances[account].tokens = 0;\\n        }\\n\\n        _exemptions[account].isExcludedFromFee = excludeFromFees;\\n        _exemptions[account].isExcluded = excludeFromReward;\\n\\n        emit AccountExclusionStateChanged(account, excludeFromReward, excludeFromFees);\\n    }\\n\\n    /**\\n     * @dev function to set the vault address which receive parts of the fees\\n     *\\n     */\\n    function setInfrastructureVault(\\n        address infrastructure\\n    ) external onlyOwner {\\n        infrastructureVault = infrastructure;\\n\\n        _exemptions[infrastructureVault].isExcluded = true;\\n        _exemptions[infrastructureVault].isExcludedFromFee = true;\\n\\n        emit InfrastructureVaultUpdated(infrastructure);\\n    }\\n\\n\\n    /**\\n     * @dev internal function to handle excluded or standard transfers\\n     *\\n     */\\n    function extendedTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        bool isFromExcluded = _exemptions[sender].isExcluded;\\n        bool isToExcluded = _exemptions[recipient].isExcluded;\\n\\n        bool takeFees = !(_exemptions[sender].isExcludedFromFee || _exemptions[recipient].isExcludedFromFee);\\n\\n        if (isFromExcluded || isToExcluded) {\\n            extendedTransferExcluded(sender, recipient, amount, isToExcluded, isFromExcluded, takeFees);\\n        } else {\\n            extendedTransferStandard(sender, recipient, amount, takeFees);\\n        }\\n    }\\n\\n    /**\\n     * @dev non excluded transfer\\n     *\\n     */\\n    function extendedTransferStandard(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bool takeFees\\n    ) internal {\\n        (CalculationParameters memory params, TaxCalculationParameters memory taxParams) = calculateValues(amount, takeFees);\\n\\n        _balances[sender].reflection = _balances[sender].reflection.sub(\\n            params.reflectionAmount,\\n            \\\"Solarmoon: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient].reflection = _balances[recipient].reflection.add(params.reflectionTransferAmount);\\n\\n        if (takeFees) {\\n            collectTaxes(taxParams);\\n            collectVaultTaxes(taxParams, sender);\\n            burn(taxParams.burnValue, taxParams.burnReflectionValue, sender);\\n        }\\n        emit Transfer(sender, recipient, params.tokenTransferAmount);\\n    }\\n\\n    /**\\n     * @dev excluded transfer\\n     *\\n     */\\n    function extendedTransferExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bool isToExcluded,\\n        bool isFromExcluded,\\n        bool takeFees\\n    ) internal {\\n        (CalculationParameters memory params, TaxCalculationParameters memory taxParams) = calculateValues(amount, takeFees);\\n        TokenStats storage stats = _stats;\\n\\n        if (isToExcluded && isFromExcluded) {\\n            _balances[sender].reflection = _balances[sender].reflection.sub(\\n                params.reflectionAmount,\\n                \\\"Solarmoon: transfer amount exceeds balance\\\"\\n            );\\n            _balances[sender].tokens = _balances[sender].tokens.sub(amount, \\\"Solarmoon: transfer amount exceeds balance\\\");\\n            _balances[recipient].reflection = _balances[recipient].reflection.add(params.reflectionTransferAmount);\\n            _balances[recipient].tokens = _balances[recipient].tokens.add(params.tokenTransferAmount);\\n        } else if (isToExcluded) {\\n            _balances[sender].reflection = _balances[sender].reflection.sub(\\n                params.reflectionAmount,\\n                \\\"Solarmoon: transfer amount exceeds balance\\\"\\n            );\\n\\n            _balances[recipient].reflection = _balances[recipient].reflection.add(params.reflectionTransferAmount);\\n            _balances[recipient].tokens = _balances[recipient].tokens.add(params.tokenTransferAmount);\\n\\n            stats.totalExcludedReflection = _stats.totalExcludedReflection.add(params.reflectionTransferAmount);\\n            stats.totalExcludedTokens = _stats.totalExcludedTokens.add(params.tokenTransferAmount);\\n        } else {\\n            _balances[sender].reflection = _balances[sender].reflection.sub(\\n                params.reflectionAmount,\\n                \\\"Solarmoon: transfer amount exceeds balance\\\"\\n            );\\n            _balances[sender].tokens = _balances[sender].tokens.sub(\\n                params.tokenTransferAmount,\\n                \\\"Solarmoon: transfer amount exceeds balance\\\"\\n            );\\n\\n            _balances[recipient].reflection = _balances[recipient].reflection.add(params.reflectionTransferAmount);\\n\\n            stats.totalExcludedReflection = _stats.totalExcludedReflection.sub(params.reflectionTransferAmount);\\n            stats.totalExcludedTokens = _stats.totalExcludedTokens.sub(params.tokenTransferAmount);\\n        }\\n\\n        if (takeFees) {\\n            collectTaxes(taxParams);\\n            collectVaultTaxes(taxParams, sender);\\n            burn(taxParams.burnValue, taxParams.burnReflectionValue, sender);\\n        }\\n        emit Transfer(sender, recipient, params.tokenTransferAmount);\\n    }\\n\\n    /**\\n     * @dev calculate reflection values\\n     *\\n     */\\n    function calculateValues(uint256 tokenAmount, bool isTakingFees)\\n        internal\\n        view\\n        returns (CalculationParameters memory, TaxCalculationParameters memory)\\n    {\\n        uint256 rate = calculateReflectionRate();\\n\\n        CalculationParameters memory params = CalculationParameters(0, 0, 0);\\n        TaxCalculationParameters memory taxParams = TaxCalculationParameters(0, 0, 0, 0, 0, 0, 0, 0);\\n\\n        taxParams = isTakingFees ? calculateTaxes(_taxRates, tokenAmount, rate) : taxParams;\\n\\n        params.reflectionAmount = tokenAmount.mul(rate);\\n\\n        if (isTakingFees) {\\n            params.tokenTransferAmount = tokenAmount.sub(taxParams.tokenTaxSum);\\n            params.reflectionTransferAmount = params.reflectionAmount.sub(taxParams.reflectionTaxSum);\\n        } else {\\n            params.tokenTransferAmount = tokenAmount;\\n            params.reflectionTransferAmount = params.reflectionAmount;\\n        }\\n\\n        return (params, taxParams);\\n    }\\n\\n    /**\\n     * @dev calculate current reflection rate\\n     *\\n     */\\n    function calculateReflectionRate() internal view returns (uint256) {\\n        (uint256 reflectionSupply, uint256 tokenSupply) = calculateActualSupply();\\n\\n        return reflectionSupply.div(tokenSupply);\\n    }\\n\\n    /**\\n     * @dev calculate taxes\\n     *\\n     */\\n    function calculateTaxes(\\n        TaxRates memory taxes,\\n        uint256 tokenAmount,\\n        uint256 rate\\n    ) internal pure returns (TaxCalculationParameters memory) {\\n        TaxCalculationParameters memory params;\\n\\n        params.distributionValue = tokenAmount.mul(taxes.distribution).div(_HUNDRED_PERCENT);\\n        params.distributionReflectionValue = params.distributionValue.mul(rate);\\n\\n        params.infrastructureValue = tokenAmount.mul(taxes.infrastructure).div(_HUNDRED_PERCENT);\\n        params.infrastructureReflectionValue = params.infrastructureValue.mul(rate);\\n\\n        params.burnValue = tokenAmount.mul(taxes.burn).div(_HUNDRED_PERCENT);\\n        params.burnReflectionValue = params.burnValue.mul(rate);\\n\\n        params.tokenTaxSum = tokenAmount.mul(taxes.totalTaxRate).div(_HUNDRED_PERCENT);\\n        params.reflectionTaxSum = params.tokenTaxSum.mul(rate);\\n\\n        return params;\\n    }\\n\\n    function collectVaultTaxes(TaxCalculationParameters memory params, address sender) internal {\\n        TokenStats storage stats = _stats;\\n\\n        _balances[infrastructureVault].tokens = _balances[infrastructureVault].tokens.add(params.infrastructureValue);\\n        _balances[infrastructureVault].reflection = _balances[infrastructureVault].reflection.add(params.distributionReflectionValue);\\n        stats.totalExcludedReflection = _stats.totalExcludedReflection.add(params.distributionReflectionValue);\\n        stats.totalExcludedTokens = _stats.totalExcludedTokens.add(params.distributionValue);\\n\\n        emit Transfer(sender, infrastructureVault, params.infrastructureValue);\\n        emit VaultDistribution(infrastructureVault);\\n    }\\n\\n    /**\\n     * @dev calculate current supply\\n     *\\n     */\\n    function calculateActualSupply() internal view returns (uint256, uint256) {\\n        uint256 reflectionSupply = _stats.totalReflection;\\n        uint256 tokenSupply = _stats.totalTokens;\\n\\n        reflectionSupply = reflectionSupply.sub(_stats.totalExcludedReflection);\\n        tokenSupply = tokenSupply.sub(_stats.totalExcludedTokens);\\n\\n        if (reflectionSupply < _stats.totalReflection.div(_stats.totalTokens)) return (_stats.totalReflection, _stats.totalTokens);\\n\\n        return (reflectionSupply, tokenSupply);\\n    }\\n\\n    /**\\n     * @dev subtract taxes from actual token supply, to keep rate\\n     *\\n     */\\n    function collectTaxes(TaxCalculationParameters memory params) internal {\\n        TokenStats storage stats = _stats;\\n        stats.totalReflection = _stats.totalReflection.sub(params.distributionReflectionValue);\\n        stats.totalFees = _stats.totalFees.add(params.distributionValue);\\n    }\\n\\n    /**\\n     * @dev function to migrate liquidity to pancakeSwap\\n     *\\n     */\\n    function burn(uint256 tokenAmount, uint256 reflectionAmount, address sender) internal {\\n        _balances[burnAddress].reflection = _balances[burnAddress].reflection.add(reflectionAmount);\\n        emit Transfer(sender, burnAddress, tokenAmount);\\n        emit Burn(tokenAmount);\\n    }\\n\\n    /**\\n     * @dev internal _approve\\n     *\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(spender != address(0), \\\"Solarmoon: approve to the zero address\\\");\\n        require(owner != address(0), \\\"Solarmoon: approve from the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev internal _transfer\\n     *\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        require(to != address(0), \\\"Solarmoon: transfer to the zero address\\\");\\n        require(from != address(0), \\\"Solarmoon: transfer from the zero address\\\");\\n        require(amount > 0, \\\"Solarmoon: Transfer amount must be greater than zero\\\");\\n\\n        extendedTransfer(from, to, amount);\\n    }\\n\\n\\n    /**\\n     * @dev Withdraw any erc20 compliant tokens that\\n     * somehow ended up in the contract.\\n     *\\n     */\\n    function withdrawBnb() external onlyOwner {\\n        payable(_msgSender()).transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev Withdraw any erc20 compliant tokens that\\n     * somehow ended up in the contract.\\n     *\\n     */\\n    function withdrawErcToken(address token, uint256 amount) external onlyOwner {\\n        IERC20(token).transfer(_msgSender(), amount);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeFactory.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.6;\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeRouter01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeRouter02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.6;\\n\\nimport \\\"./IPancakeRouter01.sol\\\";\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Structs.sol\": {\r\n      \"content\": \"pragma solidity =0.8.0;\\n\\n// SPDX-License-Identifier: LGPL-3.0-or-newer\\n\\nstruct Balances {\\n    uint256 reflection;\\n    uint256 tokens;\\n}\\n\\nstruct TokenStats {\\n    uint256 totalReflection;\\n    uint256 totalTokens;\\n    uint256 totalFees;\\n    uint256 totalExcludedReflection;\\n    uint256 totalExcludedTokens;\\n    uint256 liquidityTokens;\\n}\\n\\nstruct ExemptionStats {\\n    bool isExcluded;\\n    bool isExcludedFromFee;\\n}\\n\\nstruct TaxRates {\\n    uint32 distribution;\\n    uint32 infrastructure;\\n    uint32 burn;\\n    uint32 totalTaxRate;\\n}\\n\\nstruct CalculationParameters {\\n    uint256 reflectionAmount;\\n    uint256 reflectionTransferAmount;\\n    uint256 tokenTransferAmount;\\n}\\n\\nstruct TaxCalculationParameters {\\n    uint256 distributionValue;\\n    uint256 distributionReflectionValue;\\n    uint256 infrastructureValue;\\n    uint256 infrastructureReflectionValue;\\n    uint256 burnValue;\\n    uint256 burnReflectionValue;\\n    uint256 tokenTaxSum;\\n    uint256 reflectionTaxSum;\\n}\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excludeFromReward\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excludeFromFee\",\"type\":\"bool\"}],\"name\":\"AccountExclusionStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"infrastructureVault\",\"type\":\"address\"}],\"name\":\"InfrastructureVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultDistribution\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"infrastructureVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductFees\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"infrastructure\",\"type\":\"address\"}],\"name\":\"setInfrastructureVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"updateFeeExclusionState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"updateRewardExclusionState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErcToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Solarmoon", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": ""}