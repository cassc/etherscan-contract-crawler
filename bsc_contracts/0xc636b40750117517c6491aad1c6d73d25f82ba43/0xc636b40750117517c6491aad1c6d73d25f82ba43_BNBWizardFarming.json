{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    constructor() { _status = _NOT_ENTERED; }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n        _;\r\n\t\t_status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract BNBWizardFarming is Ownable, ReentrancyGuard{\r\n    using SafeMath for uint256;\r\n \r\n    uint256 public devFee = 200;\r\n    uint256 public ref = 900;\r\n    uint256 public period = 1 days;\r\n    uint256 public capitalPeriod = 60 * 60 * 24 * 30;\r\n    uint256 public apr = 200;\r\n    uint256 public _usersBonus = 2000;\r\n    uint256 public percentRate = 10000;\r\n\r\n    address private devWallet;\r\n  \r\n    uint256 public _currentDepositID = 0;   \r\n    \r\n    uint256 public Investors = 0;\r\n    uint256 public totalReward = 0;\r\n    uint256 public totalInvested = 0;\r\n\r\n    uint256 public count;\r\n    mapping(address => bool) private hasReceivedBonus; // Track whether each user has received the bonus\r\n\r\n\r\n    mapping(address => uint256) public _bonus;\r\n   \r\n    struct DepositInfos{\r\n        address investor;\r\n        uint256 depositAmount;\r\n        uint256 depositAt;\r\n        uint256 claimedAmount;\r\n        bool state;\r\n    }\r\n\r\n    struct InvestorInfos{\r\n        address investor;\r\n        address referrer;\r\n        uint256 totalLocked;\r\n        uint256 startTime;\r\n        uint256 lastCalculationDate;\r\n        uint256 claimableAmount;\r\n        uint256 claimedAmount;\r\n        uint256 referAmount;\r\n    }\r\n\r\n    event Deposit(\r\n        uint256 id,\r\n        address investor\r\n    );\r\n\r\n   \r\n    mapping(uint256 => DepositInfos) public depositState;\r\n    mapping(address => uint256[]) public ownedDeposits;\r\n    mapping(address => InvestorInfos) public investors;\r\n\r\n\r\n\r\n    constructor(address _feesWallet) {\r\n        require(_feesWallet!=address(0),\"Please provide a valid dev wallet address\");\r\n        devWallet = _feesWallet;\r\n        count = 0;\r\n    }\r\n  \r\n    function setWallet(address _feesWallet) public onlyOwner {\r\n        require(_feesWallet!=address(0),\"Please provide a valid address\");\r\n        devWallet = _feesWallet;\r\n    }\r\n\r\n    function _getNextDepositID() private view returns (uint256) {\r\n        return _currentDepositID + 1;\r\n    }\r\n\r\n    function _incrementDepositID() private {\r\n        _currentDepositID++;\r\n    }\r\n\r\n    function deposit(address _referrer) external payable nonReentrant{\r\n        require(msg.value >= 10000000000000000, \"Too low amount to deposit\");\r\n\r\n        uint256 _newAmount = msg.value;\r\n\r\n        if(_referrer == msg.sender){\r\n            _referrer = address(0);\r\n        }\r\n  \r\n        uint256 _id = _getNextDepositID();\r\n        _incrementDepositID();\r\n\r\n        uint256 depositFee = (_newAmount * devFee).div(percentRate);\r\n      \r\n        payable(devWallet).transfer(depositFee);\r\n            \r\n        // Check if the deposit meets the condition\r\n        if (_newAmount >= 50000000000000000) { // more than 0.05 BNB\r\n            if (count < _usersBonus && !hasReceivedBonus[msg.sender]) {\r\n                hasReceivedBonus[msg.sender] = true; // Mark the bonus as received for the user\r\n\r\n                // Calculate 10% of the original sent value\r\n                uint256 tenPercent = (_newAmount * 10) / 100;\r\n\r\n                // Calculate the new value by adding 10% to the original value\r\n                _newAmount = _newAmount + tenPercent;\r\n\r\n                count++;\r\n            }\r\n        }\r\n\r\n        uint256 _depositAmount = _newAmount - depositFee;\r\n\r\n        depositState[_id].investor = msg.sender;\r\n        depositState[_id].depositAmount = _depositAmount;\r\n        depositState[_id].depositAt = block.timestamp;\r\n        depositState[_id].state = true;\r\n\r\n        if(investors[msg.sender].investor == address(0)){\r\n            Investors = Investors.add(1);\r\n            investors[msg.sender].investor = msg.sender;\r\n            investors[msg.sender].startTime = block.timestamp;\r\n            investors[msg.sender].lastCalculationDate = block.timestamp;\r\n        }\r\n\r\n        if(address(0) != _referrer && investors[msg.sender].referrer == address(0)) {\r\n            investors[msg.sender].referrer = _referrer;\r\n            \r\n        }\r\n\r\n        if(investors[msg.sender].referrer != address(0)){\r\n            uint256 referrerAmount = (_newAmount * ref).div(percentRate);\r\n            \r\n            investors[investors[msg.sender].referrer].referAmount = investors[investors[msg.sender].referrer].referAmount.add(referrerAmount);\r\n            payable(investors[msg.sender].referrer).transfer(referrerAmount);\r\n\r\n        }\r\n       \r\n\r\n        uint256 lastRoiTime = block.timestamp - investors[msg.sender].lastCalculationDate;\r\n        uint256 allClaimableAmount = (lastRoiTime *\r\n            investors[msg.sender].totalLocked *\r\n            apr).div(percentRate * period);\r\n\r\n        investors[msg.sender].claimableAmount = investors[msg.sender].claimableAmount.add(allClaimableAmount);\r\n        investors[msg.sender].totalLocked = investors[msg.sender].totalLocked.add(_depositAmount);\r\n        investors[msg.sender].lastCalculationDate = block.timestamp;\r\n\r\n        totalInvested = totalInvested.add(_newAmount);\r\n\r\n        ownedDeposits[msg.sender].push(_id);\r\n        emit Deposit(_id, msg.sender);\r\n        \r\n       \r\n    }\r\n\r\n    function stopAirdropRewards() public onlyOwner{\r\n        // transfer not claimed airdrop to owner\r\n        payable(_msgSender()).transfer(_bonus[msg.sender]);\r\n\t\r\n    }\r\n\r\n    function setAirdropRewards(address _addr, uint256 amount) public onlyOwner{\r\n        _bonus[_addr] += amount;\r\n    }\r\n\r\n    function revokeAirdropRewards(address _addr, uint256 amount) public onlyOwner{\r\n        _bonus[_addr] -= amount;\r\n    }\r\n\r\n    function moreUsers(uint256 _users) public onlyOwner{\r\n        _usersBonus = _users;\r\n    }\r\n\r\n    function vApr(uint256 _newapr) public onlyOwner{\r\n        apr = _newapr;\r\n    }\r\n\r\n\r\n\r\n    function claimRewards() public nonReentrant {\r\n        require(ownedDeposits[msg.sender].length > 0, \"you can deposit once at least\");\r\n        \r\n        uint256 lastRoiTime = block.timestamp - investors[msg.sender].lastCalculationDate;\r\n        uint256 allClaimableAmount = (lastRoiTime *\r\n            investors[msg.sender].totalLocked *\r\n            apr).div(percentRate * period);\r\n         investors[msg.sender].claimableAmount = investors[msg.sender].claimableAmount.add(allClaimableAmount);\r\n\r\n        uint256 amountToSend = investors[msg.sender].claimableAmount;\r\n        \r\n        if(getBalance()<amountToSend){\r\n            amountToSend = getBalance();\r\n        }\r\n        \r\n        investors[msg.sender].claimableAmount = investors[msg.sender].claimableAmount.sub(amountToSend);\r\n        investors[msg.sender].claimedAmount = investors[msg.sender].claimedAmount.add(amountToSend);\r\n        investors[msg.sender].lastCalculationDate = block.timestamp;\r\n   \r\n        payable(msg.sender).transfer(amountToSend);\r\n        totalReward = totalReward.add(amountToSend);\r\n    }\r\n    \r\n    \r\n    function withdraw(uint256 id) public nonReentrant {\r\n        require(\r\n            depositState[id].investor == msg.sender,\r\n            \"only investor of this id can claim reward\"\r\n        );\r\n        require(\r\n            block.timestamp - depositState[id].depositAt > capitalPeriod,\r\n            \"withdraw lock time is not finished yet\"\r\n        );\r\n        require(depositState[id].state, \"you already withdrawed capital\");\r\n        \r\n        uint256 claimableReward = getAllClaimableReward(msg.sender);\r\n\r\n        require(\r\n            depositState[id].depositAmount + claimableReward <= getBalance(),\r\n            \"no enough token in pool\"\r\n        );\r\n\r\n       \r\n        investors[msg.sender].claimableAmount = 0;\r\n        investors[msg.sender].claimedAmount = investors[msg.sender].claimedAmount.add(claimableReward);\r\n        investors[msg.sender].lastCalculationDate = block.timestamp;\r\n        investors[msg.sender].totalLocked = investors[msg.sender].totalLocked.sub(depositState[id].depositAmount);\r\n\r\n        uint256 amountToSend = depositState[id].depositAmount + claimableReward;\r\n\r\n        payable(msg.sender).transfer(amountToSend);\r\n        totalReward = totalReward.add(claimableReward);\r\n\r\n        depositState[id].state = false;\r\n    }\r\n\r\n    function getOwnedDeposits(address investor) public view returns (uint256[] memory) {\r\n        return ownedDeposits[investor];\r\n    }\r\n\r\n    function getAllClaimableReward(address _investor) public view returns (uint256) {\r\n         uint256 lastRoiTime = block.timestamp - investors[_investor].lastCalculationDate;\r\n         uint256 _apr = getApr();\r\n          uint256 allClaimableAmount = (lastRoiTime *\r\n            investors[_investor].totalLocked *\r\n            _apr).div(percentRate * period);\r\n\r\n         return investors[_investor].claimableAmount.add(allClaimableAmount);\r\n    }\r\n\r\n    function getApr() public view returns (uint256) {\r\n        return apr;\r\n    }\r\n\r\n    function getBalance() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getTotalRewards() public view returns (uint256) {\r\n        return totalReward;\r\n    }\r\n\r\n    function getTotalInvests() public view returns (uint256) {\r\n        return totalInvested;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feesWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Investors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentDepositID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usersBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getAllClaimableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getOwnedDeposits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalInvests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCalculationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_users\",\"type\":\"uint256\"}],\"name\":\"moreUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ref\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"revokeAirdropRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAirdropRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feesWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopAirdropRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newapr\",\"type\":\"uint256\"}],\"name\":\"vApr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BNBWizardFarming", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000341963bdca8149eb7aabe9d1732fec8ec48e0c1", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5f11725568acadae412532c7e66cad9dd23fa3d9e24d20ffe2b635672720bdce"}