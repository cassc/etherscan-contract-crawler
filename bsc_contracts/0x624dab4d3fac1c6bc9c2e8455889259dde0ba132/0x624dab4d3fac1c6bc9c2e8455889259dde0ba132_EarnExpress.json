{"SourceCode": "/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-11-20\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-11-18\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-11-17\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-11-17\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-11-16\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-11-15\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event onOwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    function ownable_init(address __owner) internal {\r\n        _owner = __owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_msgSender() == _owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit onOwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n}\r\n\r\ncontract Initializable {\r\n    bool private _initialized;\r\n\r\n    bool private _initializing;\r\n\r\n    modifier initializer() {\r\n        require(\r\n            _initializing || !_initialized,\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Pausable is Context {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ncontract EarnExpress is Ownable, Initializable, Pausable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct User {\r\n        uint256 id;\r\n        address referrer;\r\n        uint256 partnersCount;\r\n        uint256 workingIncome;\r\n        uint256 nonWorkingIncome;\r\n        mapping(uint8 => uint256) holdAmount;\r\n        mapping(uint8 => bool) activeX6Levels;\r\n        mapping(uint8 => bool) activeX2Levels;\r\n        mapping(uint8 => X6) x6Matrix;\r\n        mapping(uint8 => X2) x2Matrix;\r\n    }\r\n\r\n    struct X6 {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        bool blocked;\r\n        uint256 reinvestCount;\r\n        address closedPart;\r\n    }\r\n\r\n    struct X2 {\r\n        address currentReferrer;\r\n        address[] refferals;\r\n    }\r\n\r\n    uint8 public LAST_LEVEL;\r\n    mapping(address => User) public users;\r\n    mapping(uint256 => address) public idToAddress;\r\n\r\n    uint256 public lastUserId;\r\n    mapping(uint8 => uint256) public levelPrice;\r\n\r\n    mapping(uint8 => mapping(uint256 => address)) public x2vId_number;\r\n    mapping(uint8 => uint256) public x2CurrentvId;\r\n    mapping(uint8 => uint256) public x2Index;\r\n\r\n    IERC20 public daiToken;\r\n    address public royality;\r\n\r\n    //added\r\n    address public nonWorkingWallet;\r\n    mapping(address=>mapping(uint8 => bool)) public nonWorkingSend;\r\n    mapping(uint8 => uint) public nonWorkingBalance;\r\n    //\r\n\r\n    event Registration(\r\n        address indexed user,\r\n        address indexed referrer,\r\n        uint256 indexed userId,\r\n        uint256 referrerId\r\n    );\r\n\r\n    event UserIncome(\r\n        address indexed sender,\r\n        address indexed receiver,\r\n        uint256 matrix,\r\n        uint256 level,\r\n        uint256 amount,\r\n        string incomeType\r\n    );\r\n\r\n    event Upgrade(address indexed user, address indexed referrer, uint8 level);\r\n\r\n    event NewUserPlace(\r\n        address indexed user,\r\n        address indexed referrer,\r\n        uint256 matrix,\r\n        uint256 level,\r\n        uint256 place\r\n    );\r\n\r\n    function initialize(\r\n        address _ownerAddress,\r\n        IERC20 _depositToken,\r\n        address _royality\r\n    ) external initializer {\r\n        LAST_LEVEL = 12;\r\n\r\n        levelPrice[1] = 10e18;\r\n        for (uint8 i = 2; i <= 12; i++) {\r\n            levelPrice[i] = levelPrice[i - 1] * 2;\r\n        }\r\n\r\n        users[_ownerAddress].id = 1;\r\n        idToAddress[1] = _ownerAddress;\r\n        emit Registration(_ownerAddress, address(0), 1, 0);\r\n\r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[_ownerAddress].activeX6Levels[i] = true;\r\n            users[_ownerAddress].activeX2Levels[i] = true;\r\n            x2vId_number[i][1] = _ownerAddress;\r\n            x2Index[i] = 1;\r\n            x2CurrentvId[i] = 1;\r\n            emit Upgrade(_ownerAddress, address(0), i);\r\n        }\r\n\r\n        lastUserId = 2;\r\n        ownable_init(_ownerAddress);\r\n        daiToken = _depositToken;\r\n        royality = _royality;\r\n    }\r\n\r\n    function registrationExt(address referrerAddress) external whenNotPaused {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n\r\n    function buyNewLevel(uint8 level) external whenNotPaused {\r\n        require(\r\n            daiToken.allowance(msg.sender, address(this)) >= levelPrice[level],\r\n            \"ERC20: allowance exceed! \"\r\n        );\r\n        daiToken.transferFrom(msg.sender, address(this), levelPrice[level]);\r\n        _buyNewLevel(msg.sender, level);\r\n\r\n        if (users[msg.sender].holdAmount[level - 1] != 0) {\r\n            users[msg.sender].workingIncome += users[msg.sender].holdAmount[\r\n                level - 1\r\n            ];\r\n            daiToken.transfer(\r\n                msg.sender,\r\n                users[msg.sender].holdAmount[level - 1]\r\n            );\r\n            emit UserIncome(\r\n                address(0),\r\n                msg.sender,\r\n                1,\r\n                level - 1,\r\n                users[msg.sender].holdAmount[level - 1],\r\n                \"workingIncome\"\r\n            );\r\n            users[msg.sender].holdAmount[level - 1] = 0;\r\n        }\r\n    }\r\n\r\n    function registration(address userAddress, address referrerAddress)\r\n        private\r\n    {\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n\r\n        users[userAddress].id = lastUserId;\r\n        users[userAddress].referrer = referrerAddress;\r\n        idToAddress[lastUserId] = userAddress;\r\n\r\n        // users[userAddress].activeX6Levels[1] = true;\r\n        // users[userAddress].activeX2Levels[1] = true;\r\n        lastUserId++;\r\n\r\n        users[referrerAddress].partnersCount++;\r\n        // updateX6Referrer(userAddress, findFreeX6Referrer(userAddress, 1), 1);\r\n\r\n        emit Registration(\r\n            userAddress,\r\n            referrerAddress,\r\n            users[userAddress].id,\r\n            users[referrerAddress].id\r\n        );\r\n    }\r\n\r\n    function updateX6Referrer(\r\n        address userAddress,\r\n        address referrerAddress,\r\n        uint8 level\r\n    ) private {\r\n        require(\r\n            users[referrerAddress].activeX6Levels[level],\r\n            \"Referrer level is inactive\"\r\n        );\r\n\r\n        if (\r\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals.length <\r\n            2\r\n        ) {\r\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals.push(\r\n                userAddress\r\n            );\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                referrerAddress,\r\n                1,\r\n                level,\r\n                uint8(\r\n                    users[referrerAddress]\r\n                        .x6Matrix[level]\r\n                        .firstLevelReferrals\r\n                        .length\r\n                )\r\n            );\r\n\r\n            // if (referrerAddress == idToAddress[1]) {\r\n            //     daiToken.transfer(idToAddress[1],levelPrice[level]);\r\n            //     return;\r\n            // }\r\n            // address reffer = referrerAddress;\r\n            // if (level == 1){\r\n                if(nonWorkingSend[referrerAddress][level]) {\r\n                    daiToken.transfer(nonWorkingWallet, levelPrice[level]);\r\n                    nonWorkingBalance[level] +=levelPrice[level];\r\n                } else {\r\n                    users[userAddress]\r\n                        .x2Matrix[level]\r\n                        .currentReferrer = referrerAddress;\r\n                    updateX2Referrer(userAddress, referrerAddress, level);\r\n                }\r\n            // } else{\r\n            //     address freeX2Referrer = findFreeX2Referrer(level);\r\n            //      users[userAddress]\r\n            //             .x2Matrix[level]\r\n            //             .currentReferrer = freeX2Referrer;\r\n            //         updateX2Referrer(userAddress, freeX2Referrer, level);\r\n            // }\r\n            return;\r\n        }\r\n\r\n        users[referrerAddress].x6Matrix[level].secondLevelReferrals.push(\r\n            userAddress\r\n        );\r\n\r\n        if (\r\n            users[referrerAddress]\r\n                .x6Matrix[level]\r\n                .secondLevelReferrals\r\n                .length == 1\r\n        ) {\r\n            if (referrerAddress == idToAddress[1]) {\r\n                daiToken.transfer(royality, levelPrice[level]);\r\n            } else {\r\n                address findRefferX = findFreeX6Referrer(\r\n                    referrerAddress,\r\n                    level\r\n                );\r\n                updateX6Referrer(userAddress, findRefferX, level);\r\n            }\r\n        } else if (\r\n            users[referrerAddress]\r\n                .x6Matrix[level]\r\n                .secondLevelReferrals\r\n                .length == 2\r\n        ) {\r\n            if(users[referrerAddress].x6Matrix[level].reinvestCount==0) {\r\n                if (referrerAddress == idToAddress[1]) {\r\n                    daiToken.transfer(royality, levelPrice[level]);\r\n                } else {\r\n                    address findRefferX = findFreeX6Referrer(\r\n                        referrerAddress,\r\n                        level\r\n                    );\r\n                    updateX6Referrer(userAddress, findRefferX, level);\r\n                }\r\n            } else{\r\n                users[referrerAddress].workingIncome += levelPrice[level];\r\n                daiToken.transfer(referrerAddress, levelPrice[level]);\r\n                emit UserIncome(\r\n                    userAddress,\r\n                    referrerAddress,\r\n                    1,\r\n                    level,\r\n                    levelPrice[level],\r\n                    \"workingIncome\"\r\n                );\r\n            }\r\n        } else if (\r\n            users[referrerAddress]\r\n                .x6Matrix[level]\r\n                .secondLevelReferrals\r\n                .length ==\r\n            3 ||\r\n            users[referrerAddress]\r\n                .x6Matrix[level]\r\n                .secondLevelReferrals\r\n                .length ==\r\n            4\r\n        ) {\r\n            if (\r\n                !users[referrerAddress].activeX6Levels[level + 1] &&\r\n                level != LAST_LEVEL\r\n            ) {\r\n                users[referrerAddress].holdAmount[level] += levelPrice[level];\r\n                autoUpgrade(referrerAddress, level, level + 1);\r\n            } else {\r\n                users[referrerAddress].workingIncome += levelPrice[level];\r\n                daiToken.transfer(referrerAddress, levelPrice[level]);\r\n                emit UserIncome(\r\n                    userAddress,\r\n                    referrerAddress,\r\n                    1,\r\n                    level,\r\n                    levelPrice[level],\r\n                    \"workingIncome\"\r\n                );\r\n            }\r\n        }\r\n\r\n        emit NewUserPlace(\r\n            userAddress,\r\n            referrerAddress,\r\n            1,\r\n            level,\r\n            2 +\r\n                users[referrerAddress]\r\n                    .x6Matrix[level]\r\n                    .secondLevelReferrals\r\n                    .length\r\n        );\r\n\r\n        updateX6ReferrerSecondLevel(referrerAddress, level);\r\n    }\r\n\r\n    function _buyNewLevel(address user, uint8 level) internal {\r\n        require(isUserExists(user), \"user is not exists\");\r\n        require(level >= 1 && level <= LAST_LEVEL, \"invalid level\");\r\n        require(!users[user].activeX6Levels[level], \"level already activated\");\r\n        if (level != 1) {\r\n            require(\r\n                users[user].activeX6Levels[level - 1],\r\n                \"buy previous level first\"\r\n            );\r\n            if (users[user].x6Matrix[level - 1].blocked) {\r\n                users[user].x6Matrix[level - 1].blocked = false;\r\n            }\r\n        }\r\n\r\n        uint256 newIndex = x2Index[level] + 1;\r\n        x2vId_number[level][newIndex] = user;\r\n        x2Index[level] = newIndex;\r\n\r\n        address freeX6Referrer = findFreeX6Referrer(user, level);\r\n\r\n        users[user].activeX6Levels[level] = true;\r\n        users[user].activeX2Levels[level] = true;\r\n        updateX6Referrer(user, freeX6Referrer, level);\r\n        emit Upgrade(user, freeX6Referrer, level);\r\n    }\r\n\r\n    function autoUpgrade(\r\n        address _user,\r\n        uint8 _currentLevel,\r\n        uint8 _nextLevel\r\n    ) internal {\r\n        if (users[_user].holdAmount[_currentLevel] >= levelPrice[_nextLevel]) {\r\n            _buyNewLevel(_user, _nextLevel);\r\n            users[_user].holdAmount[_currentLevel] -= levelPrice[_nextLevel];\r\n            if (users[_user].holdAmount[_currentLevel] > 0) {\r\n                users[_user].workingIncome += users[_user].holdAmount[\r\n                    _currentLevel\r\n                ];\r\n                daiToken.transfer(\r\n                    _user,\r\n                    users[_user].holdAmount[_currentLevel]\r\n                );\r\n                emit UserIncome(\r\n                    address(0),\r\n                    _user,\r\n                    1,\r\n                    _currentLevel,\r\n                    users[_user].holdAmount[_currentLevel],\r\n                    \"workingIncome\"\r\n                );\r\n                users[_user].holdAmount[_currentLevel] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdrawHolding(address _user, uint8 _level) external {\r\n        if (users[_user].holdAmount[_level] > 0) {\r\n            users[_user].workingIncome += users[_user].holdAmount[_level];\r\n            daiToken.transfer(\r\n                _user,\r\n                users[_user].holdAmount[_level] -\r\n                    ((users[_user].holdAmount[_level] * 25) / 100)\r\n            );\r\n            daiToken.transfer(\r\n                owner(),\r\n                ((users[_user].holdAmount[_level] * 25) / 100)\r\n            );\r\n            emit UserIncome(\r\n                address(0),\r\n                _user,\r\n                1,\r\n                _level,\r\n                users[_user].holdAmount[_level],\r\n                \"workingIncome\"\r\n            );\r\n            users[_user].holdAmount[_level] = 0;\r\n        }\r\n    }\r\n\r\n    function updateX6ReferrerSecondLevel(address referrerAddress, uint8 level)\r\n        private\r\n    {\r\n        if (\r\n            users[referrerAddress].x6Matrix[level].secondLevelReferrals.length <\r\n            4\r\n        ) {\r\n            // return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n            return;\r\n        }\r\n\r\n        address[] memory x6 = users[\r\n            users[referrerAddress].x6Matrix[level].currentReferrer\r\n        ].x6Matrix[level].firstLevelReferrals;\r\n\r\n        if (x6.length == 2) {\r\n            if (x6[0] == referrerAddress || x6[1] == referrerAddress) {\r\n                users[users[referrerAddress].x6Matrix[level].currentReferrer]\r\n                    .x6Matrix[level]\r\n                    .closedPart = referrerAddress;\r\n            } else if (x6.length == 1) {\r\n                if (x6[0] == referrerAddress) {\r\n                    users[\r\n                        users[referrerAddress].x6Matrix[level].currentReferrer\r\n                    ].x6Matrix[level].closedPart = referrerAddress;\r\n                }\r\n            }\r\n        }\r\n\r\n        users[referrerAddress]\r\n            .x6Matrix[level]\r\n            .firstLevelReferrals = new address[](0);\r\n        users[referrerAddress]\r\n            .x6Matrix[level]\r\n            .secondLevelReferrals = new address[](0);\r\n        users[referrerAddress].x6Matrix[level].closedPart = address(0);\r\n        // go to Non working pool\r\n        // address freeX2Referrer = findFreeX2Referrer(level);\r\n        // users[userAddress].x2Matrix[level].currentReferrer = freeX2Referrer;\r\n        // updateX2Referrer(referrerAddress, freeX2Referrer, level);\r\n\r\n        if (\r\n            !users[referrerAddress].activeX6Levels[level + 1] &&\r\n            level != LAST_LEVEL\r\n        ) {\r\n            users[referrerAddress].x6Matrix[level].blocked = true;\r\n        }\r\n\r\n        users[referrerAddress].x6Matrix[level].reinvestCount++;\r\n    }\r\n\r\n    function updateX2Referrer(\r\n        address userAddress,\r\n        address referrerAddress,\r\n        uint8 level\r\n    ) private {\r\n        require(level <= LAST_LEVEL, \"not valid level\");\r\n        if (users[referrerAddress].x2Matrix[level].refferals.length < 2) {\r\n            users[referrerAddress].x2Matrix[level].refferals.push(userAddress);\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                referrerAddress,\r\n                2,\r\n                level,\r\n                uint8(users[referrerAddress].x2Matrix[level].refferals.length)\r\n            );\r\n            users[referrerAddress].nonWorkingIncome += levelPrice[level];\r\n            emit UserIncome(\r\n                userAddress,\r\n                referrerAddress,\r\n                2,\r\n                level,\r\n                levelPrice[level],\r\n                \"NonWorking Income\"\r\n            );\r\n            if (\r\n                !users[referrerAddress].activeX6Levels[level + 1] &&\r\n                level != LAST_LEVEL\r\n            ) {\r\n                users[referrerAddress].holdAmount[level] += levelPrice[level];\r\n                autoUpgrade(referrerAddress, level, level + 1);\r\n            } else {\r\n                daiToken.transfer(referrerAddress, levelPrice[level]);\r\n            }\r\n        }\r\n        if (users[referrerAddress].x2Matrix[level].refferals.length == 2) {\r\n            nonWorkingSend[referrerAddress][level] = true;\r\n            users[referrerAddress].x2Matrix[level].refferals = new address[](0);\r\n            x2CurrentvId[level] = x2CurrentvId[level] + 1;\r\n            // address(uint160(referrerAddress)).transfer(alevelPrice[level]*2);\r\n        }\r\n    }\r\n\r\n    function findFreeX6Referrer(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX6Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n\r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n\r\n    function findFreeX2Referrer(uint8 level) public view returns (address) {\r\n        uint256 id = x2CurrentvId[level];\r\n        return x2vId_number[level][id];\r\n    }\r\n\r\n    function usersActiveX2Levels(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return users[userAddress].activeX2Levels[level];\r\n    }\r\n\r\n    function usersActiveX6Levels(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return users[userAddress].activeX6Levels[level];\r\n    }\r\n\r\n    function usersX6Matrix(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (\r\n            address,\r\n            address[] memory,\r\n            address[] memory,\r\n            bool,\r\n            uint256,\r\n            address\r\n        )\r\n    {\r\n        return (\r\n            users[userAddress].x6Matrix[level].currentReferrer,\r\n            users[userAddress].x6Matrix[level].firstLevelReferrals,\r\n            users[userAddress].x6Matrix[level].secondLevelReferrals,\r\n            users[userAddress].x6Matrix[level].blocked,\r\n            users[userAddress].x6Matrix[level].reinvestCount,\r\n            users[userAddress].x6Matrix[level].closedPart\r\n        );\r\n    }\r\n\r\n    function userX6HoldAmount(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].holdAmount[level];\r\n    }\r\n\r\n    function usersX2Matrix(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (address, address[] memory)\r\n    {\r\n        return (\r\n            users[userAddress].x2Matrix[level].currentReferrer,\r\n            users[userAddress].x2Matrix[level].refferals\r\n        );\r\n    }\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function sendNonWorkingIncome(address[] calldata _users, uint8 level) external {\r\n        require(_msgSender()==nonWorkingWallet,\"only non Working wallet can call!\");\r\n        require((_users.length*levelPrice[level+1])<= daiToken.allowance(_msgSender(), address(this)),\"Error\");\r\n        daiToken.transferFrom(_msgSender(), address(this),_users.length*levelPrice[level+1]);\r\n        for(uint i=0; i <_users.length; i++) {\r\n            if(!nonWorkingSend[_users[i]][level] && isUserExists(_users[i])) {\r\n                if (!users[_users[i]].activeX6Levels[level+1] && level != LAST_LEVEL) {\r\n                    users[_users[i]].holdAmount[level] = levelPrice[level+1];\r\n                    autoUpgrade(_users[i], level, level+1);\r\n                } else {\r\n                    daiToken.transfer(_users[i], levelPrice[level+1]);\r\n                   \r\n                }\r\n                users[_users[i]].nonWorkingIncome += levelPrice[level+1];\r\n                emit UserIncome(address(0), _users[i] , 2, level, levelPrice[level+1], \"NonWorking Income\");\r\n                nonWorkingBalance[level] -= levelPrice[level+1];\r\n                nonWorkingSend[_users[i]][level] = true;\r\n            } else {\r\n                revert(\"else\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateAlreadyNonWorkingIncomeHolder(address[] calldata _users, uint8 level) external {\r\n            require(_msgSender()==nonWorkingWallet,\"only non Working wallet can call!\");\r\n            for(uint i=0; i <_users.length; i++) {\r\n                if(!nonWorkingSend[_users[i]][level] && isUserExists(_users[i])) {\r\n                    nonWorkingSend[_users[i]][level] = true;\r\n                } \r\n            }\r\n    }\r\n    \r\n    function withdrawToken(address _token, uint256 amount) external onlyOwner {\r\n        IERC20(_token).transfer(owner(), amount);\r\n    }\r\n\r\n    function setNonWorkingWallet(address _nonworking) external onlyOwner {\r\n        nonWorkingWallet = _nonworking;\r\n    }\r\n\r\n    function withdraw(uint256 amount) external onlyOwner {\r\n        payable(owner()).transfer(amount);\r\n    }\r\n    \r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matrix\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"place\",\"type\":\"uint256\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matrix\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incomeType\",\"type\":\"string\"}],\"name\":\"UserIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"onOwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeX2Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeX6Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royality\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"nonWorkingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"nonWorkingSend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonWorkingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royality\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"sendNonWorkingIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nonworking\",\"type\":\"address\"}],\"name\":\"setNonWorkingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"updateAlreadyNonWorkingIncomeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"userX6HoldAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonWorkingIncome\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveX2Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveX6Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX2Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX6Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"withdrawHolding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"x2CurrentvId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"x2Index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"x2vId_number\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EarnExpress", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://19e603424e7685d85c3684731648257d203962d3d46aad2088a300148c9098f3"}