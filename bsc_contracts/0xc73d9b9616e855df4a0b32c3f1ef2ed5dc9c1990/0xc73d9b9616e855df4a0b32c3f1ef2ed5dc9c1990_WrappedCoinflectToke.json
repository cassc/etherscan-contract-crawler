{"SourceCode": "// Sources flattened with hardhat v2.9.3 https://hardhat.org\r\n\r\n// File contracts/WrappedCoinflectToken.sol\r\n\r\n// SPDX-License-Identifier: NOLICENSE\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ninterface IFactory{\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\n\r\n\r\ncontract WrappedCoinflectToken is Context, IERC20, Ownable {\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcluded;\r\n    mapping (address => bool) private _admins;\r\n\r\n    address[] private _excluded;\r\n    \r\n    bool public swapEnabled;\r\n    bool private swapping;\r\n\r\n    IRouter public router;\r\n    address public pair;\r\n\r\n    uint8 private constant DECIMALS = 18;\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 private constant MAX_SUPPLY = 42000000000 * 10**DECIMALS;\r\n    uint256 private _rTotal = (MAX - (MAX % MAX_SUPPLY));\r\n    uint256 private _totalSupply;\r\n    \r\n    uint256 public swapTokensAtAmount = 8400000 * 10**DECIMALS;\r\n\r\n    address public constant DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n    address public devAddress;\r\n\r\n    string private constant NAME = \"Wrapped Coinflect\";\r\n    string private constant SYMBOL = \"WCFLT\";\r\n\r\n    uint8 private constant MAX_TAXES = 15;\r\n    struct Taxes {\r\n      uint256 rfi;\r\n      uint256 dev;\r\n      uint256 liquidity;\r\n      uint256 burn;\r\n    }\r\n    Taxes public taxes = Taxes(1,2,3,1);\r\n\r\n    struct TotFeesPaidStruct{\r\n        uint256 rfi;\r\n        uint256 dev;\r\n        uint256 liquidity;\r\n        uint256 burn;\r\n    }\r\n    TotFeesPaidStruct public totFeesPaid;\r\n\r\n    struct valuesFromGetValues{\r\n      uint256 rAmount;\r\n      uint256 rTransferAmount;\r\n      uint256 rRfi;\r\n      uint256 rDev;\r\n      uint256 rLiquidity;\r\n      uint256 rBurn;\r\n      uint256 tTransferAmount;\r\n      uint256 tRfi;\r\n      uint256 tDev;\r\n      uint256 tLiquidity;\r\n      uint256 tBurn;\r\n    }\r\n\r\n    address _bridge;\r\n\r\n    event FeesChanged();\r\n\r\n    event DevAddressChanged(address newDevAddress);\r\n\r\n    event RouterChanged(address newRouterAddress, address newPairAddress);\r\n\r\n    event SwapEnabledChanged(bool swapEnabled);\r\n\r\n    event SwapTokenAtAmountChanged(uint256 swapTokensAtAmount);\r\n\r\n    event BridgeChanged(address newBridge);\r\n\r\n    modifier lockTheSwap {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    modifier onlyBridge(){\r\n        require(_bridge != address(0), \"Bridge contract not specified.\");\r\n        require(_msgSender() == _bridge, \"Sender is not bridge contract.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require (_msgSender() == owner() || _admins[_msgSender()] == true, \"!permission\");\r\n        _;\r\n    }\r\n\r\n    constructor (address routerAddress, address devWallet, uint256 initialSupply) {\r\n        devAddress = devWallet;\r\n        IRouter _router = IRouter(routerAddress);\r\n        address _pair = IFactory(_router.factory())\r\n            .createPair(address(this), _router.WETH());\r\n\r\n        router = _router;\r\n        pair = _pair;\r\n        \r\n        excludeFromReward(pair);\r\n        excludeFromReward(DEAD_ADDRESS);\r\n\r\n        _rOwned[owner()] = _rTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[devAddress]=true;\r\n        _isExcludedFromFee[DEAD_ADDRESS] = true;\r\n\r\n        _totalSupply = initialSupply;\r\n\r\n        emit Transfer(address(0), owner(), initialSupply);\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return NAME;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    receive() external payable{}\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function updatedevWallet(address newWallet) external onlyOwner{\r\n        require(devAddress != newWallet ,'Wallet already set');\r\n        devAddress = newWallet;\r\n        _isExcludedFromFee[devAddress];\r\n        emit DevAddressChanged(devAddress);\r\n    }\r\n\r\n    function updateSwapTokensAtAmount(uint256 amount) external onlyOwner{\r\n        swapTokensAtAmount = amount * 10 ** DECIMALS;\r\n        emit SwapTokenAtAmountChanged(swapTokensAtAmount);\r\n    }\r\n\r\n    function updateSwapEnabled(bool _enabled) external onlyOwner{\r\n        swapEnabled = _enabled;\r\n        emit SwapEnabledChanged(_enabled);\r\n    }\r\n    \r\n    function updateRouterAndPair(address newRouter, address newPair) external onlyOwner{\r\n        router = IRouter(newRouter);\r\n        pair = newPair;\r\n        emit RouterChanged(newRouter, newPair);\r\n    }\r\n\r\n    function bridge() external view returns (address) {\r\n        return _bridge;\r\n    }\r\n\r\n    function setBridge(address newBridge) external onlyOwner {\r\n        require(newBridge != address(0), \"Bridge cannot be AddressZero.\");\r\n        _bridge = newBridge;\r\n        emit BridgeChanged(newBridge);\r\n    }\r\n\r\n    function mintToBridge(uint256 amount) external onlyBridge {\r\n        require(_totalSupply + amount <= MAX_SUPPLY, \"Cannot mint more than max supply\");\r\n        _totalSupply = _totalSupply + amount;\r\n        emit Transfer(address(0), _bridge, amount);\r\n    }\r\n\r\n    function rescueBNB(uint256 weiAmount) external onlyOwner{\r\n        require(address(this).balance >= weiAmount, \"insufficient BNB balance\");\r\n        payable(msg.sender).transfer(weiAmount);\r\n    }\r\n    \r\n    function rescueAnyERC20Tokens(address _tokenAddr, address _to, uint _amount) external onlyOwner {\r\n        IERC20(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) external view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferRfi) external view returns(uint256) {\r\n        require(tAmount <= MAX_SUPPLY, \"Amount must be less than supply\");\r\n        if (!deductTransferRfi) {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true);\r\n            return s.rAmount;\r\n        } else {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true);\r\n            return s.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyAdmin {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) external onlyAdmin {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function setAdmins(address account, bool flag) external onlyOwner {\r\n        _admins[account] = flag;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) external view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function setTaxes(uint256 _rfi, uint256 _dev, uint256 _liquidity, uint256 _burn) external onlyOwner {\r\n        require((_rfi + _dev + _liquidity + _burn) < MAX_TAXES, \"Total taxes cannot be higher than 25%\");\r\n        taxes.rfi = _rfi;\r\n        taxes.dev = _dev;\r\n        taxes.liquidity = _liquidity;\r\n        taxes.burn = _burn;\r\n        emit FeesChanged();\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount/currentRate;\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function _reflectRfi(uint256 rRfi, uint256 tRfi) private {\r\n        _rTotal -=rRfi;\r\n        totFeesPaid.rfi +=tRfi;\r\n    }\r\n\r\n    function _takeLiquidity(uint256 rLiquidity, uint256 tLiquidity) private {\r\n        totFeesPaid.liquidity +=tLiquidity;\r\n\r\n        if(_isExcluded[address(this)])\r\n        {\r\n            _tOwned[address(this)]+=tLiquidity;\r\n        }\r\n        _rOwned[address(this)] +=rLiquidity;\r\n    }\r\n\r\n    function _takeDev(uint256 rDev, uint256 tDev) private {\r\n        totFeesPaid.dev +=tDev;\r\n\r\n        if(_isExcluded[address(this)])\r\n        {\r\n            _tOwned[address(this)]+=tDev;\r\n        }\r\n        _rOwned[address(this)] +=rDev;\r\n    }\r\n    \r\n    function _takeBurn(uint256 rBurn, uint256 tBurn) private{\r\n        totFeesPaid.burn +=tBurn;\r\n\r\n        if(_isExcluded[DEAD_ADDRESS])\r\n        {\r\n            _tOwned[DEAD_ADDRESS]+=tBurn;\r\n        }\r\n        _rOwned[DEAD_ADDRESS] +=rBurn;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory to_return) {\r\n        to_return = _getTValues(tAmount, takeFee);\r\n        (to_return.rAmount, to_return.rTransferAmount, to_return.rRfi, to_return.rDev, to_return.rLiquidity, to_return.rBurn) = _getRValues(to_return, tAmount, takeFee, _getRate());\r\n        return to_return;\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory s) {\r\n\r\n        if(!takeFee) {\r\n          s.tTransferAmount = tAmount;\r\n          return s;\r\n        }\r\n        \r\n        s.tRfi = tAmount*taxes.rfi/100;\r\n        s.tDev = tAmount*taxes.dev/100;\r\n        s.tLiquidity = tAmount*taxes.liquidity/100;\r\n        s.tBurn = tAmount*taxes.burn/100;\r\n        s.tTransferAmount = tAmount-s.tRfi-s.tDev-s.tLiquidity-s.tBurn;\r\n        return s;\r\n    }\r\n\r\n    function _getRValues(valuesFromGetValues memory s, uint256 tAmount, bool takeFee, uint256 currentRate) private pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rRfi,uint256 rDev, uint256 rLiquidity, uint256 rBurn) {\r\n        rAmount = tAmount*currentRate;\r\n\r\n        if(!takeFee) {\r\n          return(rAmount, rAmount, 0,0,0,0);\r\n        }\r\n\r\n        rRfi = s.tRfi*currentRate;\r\n        rDev = s.tDev*currentRate;\r\n        rLiquidity = s.tLiquidity*currentRate;\r\n        rBurn = s.rBurn*currentRate;\r\n        rTransferAmount =  rAmount-rRfi-rDev-rLiquidity-rBurn;\r\n        return (rAmount, rTransferAmount, rRfi,rDev,rLiquidity, rBurn);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply/tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = MAX_SUPPLY;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, MAX_SUPPLY);\r\n            rSupply = rSupply-_rOwned[_excluded[i]];\r\n            tSupply = tSupply-_tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal/MAX_SUPPLY) return (_rTotal, MAX_SUPPLY);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(amount <= balanceOf(from),\"You are trying to transfer more than your balance\");\r\n        \r\n        bool canSwap = balanceOf(address(this)) >= swapTokensAtAmount;\r\n        if(!swapping && swapEnabled && canSwap && from != pair && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]){\r\n            swapAndLiquify(swapTokensAtAmount);\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, !(_isExcludedFromFee[from] || _isExcludedFromFee[to]));\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool takeFee) private {\r\n\r\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee);\r\n\r\n        if (_isExcluded[sender] ) {\r\n                _tOwned[sender] = _tOwned[sender]-tAmount;\r\n        }\r\n        if (_isExcluded[recipient]) {\r\n                _tOwned[recipient] = _tOwned[recipient]+s.tTransferAmount;\r\n        }\r\n\r\n        _rOwned[sender] = _rOwned[sender]-s.rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient]+s.rTransferAmount;\r\n        \r\n        if(s.rRfi > 0 || s.tRfi > 0) _reflectRfi(s.rRfi, s.tRfi);\r\n        if(s.rLiquidity > 0 || s.tLiquidity > 0) {\r\n            _takeLiquidity(s.rLiquidity,s.tLiquidity);\r\n        }\r\n        if(s.rDev > 0 || s.tDev > 0){\r\n            _takeDev(s.rDev, s.tDev);\r\n        }\r\n        if(s.rBurn > 0 || s.tBurn > 0){\r\n            _takeBurn(s.rBurn, s.tBurn);\r\n            emit Transfer(sender, DEAD_ADDRESS, s.tBurn);\r\n        }\r\n        \r\n        emit Transfer(sender, recipient, s.tTransferAmount);\r\n        emit Transfer(sender, address(this), s.tLiquidity + s.tDev);\r\n        \r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private lockTheSwap{\r\n        uint256 denominator = (taxes.liquidity + taxes.dev ) * 2;\r\n        uint256 tokensToAddLiquidityWith = tokens * taxes.liquidity / denominator;\r\n        uint256 toSwap = tokens - tokensToAddLiquidityWith;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForBNB(toSwap);\r\n\r\n        uint256 deltaBalance = address(this).balance - initialBalance;\r\n        uint256 unitBalance = deltaBalance / (denominator - taxes.liquidity);\r\n        uint256 bnbToAddLiquidityWith = unitBalance * taxes.liquidity;\r\n\r\n        if(bnbToAddLiquidityWith > 0){\r\n            addLiquidity(tokensToAddLiquidityWith, bnbToAddLiquidityWith);\r\n        }\r\n\r\n        uint256 devAmt = unitBalance * 2 * taxes.dev;\r\n        if(devAmt > 0){\r\n            payable(devAddress).transfer(devAmt);\r\n        }\r\n\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBridge\",\"type\":\"address\"}],\"name\":\"BridgeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDevAddress\",\"type\":\"address\"}],\"name\":\"DevAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPairAddress\",\"type\":\"address\"}],\"name\":\"RouterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabledChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"SwapTokenAtAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintToBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferRfi\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueAnyERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totFeesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"updateRouterAndPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updatedevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WrappedCoinflectToken", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1500", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000a0b0264759f1f4d17e95d73052a408ff18fb5a34000000000000000000000000000000000000000087b595f2383509fe10000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9121cb280542785ee84fb0add80196532ab74a449db42c3a8238df572b10706f"}