{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\n/*\r\n\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u28e4\u28c0\u2880\u2840\u28c0\u28e4\u28e4\u28e4\u2864\u28c4\u28c0\u2874\u28b6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28ff\u2879\u28fd\u2803\u28bb\u285b\u28ff\u28ff\u281e\u28b0\u28ab\u283e\u2817\u2803\u2830\u287f\u28b7\u28e4\u28e4\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28f6\u2876\u286f\u287d\u2802\u2819\u2800\u2800\u2800\u2800\u2809\u2800\u2800\u280b\u2800\u2800\u2800\u2810\u280a\u2809\u281a\u2889\u28ff\u28c7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u28eb\u28c9\u2803\u2811\u280f\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2833\u283f\u2885\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28fb\u28f6\u286f\u2801\u2800\u2800\u2800\u2831\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2811\u280a\u28b6\u28e2\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28df\u283b\u281b\u2801\u2800\u2800\u2800\u2802\u2800\u2800\u2808\u2802\u2820\u2800\u2800\u2800\u2804\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2832\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28e0\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28bf\u285b\u2802\u2800\u2840\u2808\u281b\u28a6\u2840\u2800\u2800\u28c0\u28e4\u2836\u281e\u281b\u281b\u2809\u281b\u2813\u28a6\u28c4\u2840\u2800\u2800\u2804\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u2800\u2800\u2828\u2833\u28a4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u28e4\u283f\u285f\u283f\u287f\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28c7\u281f\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28a0\u28e4\u283c\u281b\u2800\u2800\u2840\u2800\u2800\u2800\u2800\u28c0\u2840\u2898\u283b\u28e4\u2840\u2800\u2800\u2818\u2803\u2800\u2838\u28ff\u28ff\u28fc\u2800\u2800\u2800\u28b8\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2880\u28e0\u28e4\u2824\u28e4\u28ef\u28ff\u2834\u2840\u28b3\u28fb\u28e4\u28e4\u28d6\u28e6\u28c4\u2800\u28fc\u28cf\u2801\u2812\u2880\u28e0\u2834\u281a\u280b\u2889\u28ff\u28a1\u2886\u2840\u2800\u2801\u2800\u2800\u2800\u28f0\u287f\u28bb\u285b\u283b\u28e6\u2840\u2809\u2833\u2854\u2826\u28c0\u2840\u2800\u2899\u2809\u2801\u2800\u2800\u2800\u2808\u28fb\u2840\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u28bd\u28ff\u28cd\u2869\u289b\u281f\u281b\u2800\u28c0\u2840\u2808\u2819\u28bd\u2848\u28be\u28ff\u28ff\u287f\u2800\u2800\u2836\u289b\u2815\u2801\u2800\u2880\u28fe\u28ff\u283f\u28ba\u28ff\u28c6\u2884\u2840\u2840\u28e4\u28bb\u28ba\u28ff\u28ff\u28c7\u28f8\u2807\u2800\u2880\u2819\u28c4\u2800\u2809\u2886\u2800\u28a3\u2840\u2800\u2800\u2800\u2808\u283a\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u285f\u28bf\u28fd\u28ef\u284d\u28a0\u28fe\u289b\u28ff\u28f7\u28e7\u2840\u2800\u28ba\u283c\u283f\u28ff\u285b\u2801\u28b8\u28e1\u281f\u280a\u28c0\u28e4\u284f\u28ff\u2807\u28b0\u28ff\u28ff\u28ff\u2889\u2812\u2800\u2800\u2808\u281b\u281b\u281b\u2809\u2801\u2800\u28e0\u28ff\u2800\u2838\u2846\u2800\u28b8\u2804\u2800\u28b3\u2800\u2800\u2800\u2818\u28a4\u28fc\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u28b8\u28ff\u28f5\u28e8\u2844\u2838\u28f7\u28ef\u28dc\u287b\u28ff\u28f7\u2846\u2800\u2800\u2808\u28b2\u2847\u2830\u28ff\u287f\u2880\u285c\u288b\u28ff\u2845\u289a\u283b\u281e\u281f\u2809\u2808\u2800\u2800\u2800\u2880\u28c0\u28c0\u28c0\u28e0\u2834\u28ba\u28ff\u28ff\u28ff\u2800\u2800\u28b9\u2840\u2818\u2846\u2800\u2808\u28a7\u2840\u2800\u2800\u2800\u28b9\u2841\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u28b8\u28ff\u2809\u28ed\u28b7\u2810\u28ff\u28ff\u28ff\u28f7\u28cf\u28ff\u2803\u2800\u2800\u2800\u28ba\u28ff\u283b\u281b\u2803\u28ba\u2801\u2838\u285f\u28ff\u28f6\u28e6\u2876\u28b4\u28e6\u28f7\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28fe\u287f\u28f7\u28ff\u281f\u28b9\u285f\u2800\u2800\u2800\u28c7\u2800\u2847\u2800\u2800\u2800\u2808\u2800\u2880\u28ff\u280d\u2801\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u28b8\u284f\u2800\u2826\u2800\u2800\u2809\u281b\u281b\u281b\u280b\u2801\u2800\u2800\u2800\u2800\u2818\u280b\u2800\u2800\u2800\u28ff\u2800\u2808\u2847\u28b9\u28ff\u287f\u28bf\u28ff\u28ff\u28ff\u289f\u283b\u2809\u281b\u281b\u2801\u2800\u2800\u28a0\u28ff\u28e0\u28ff\u2803\u2800\u2800\u2800\u28b8\u2800\u2819\u2884\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2808\u28e7\u2800\u2818\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u2839\u2847\u2800\u2847\u2800\u2839\u28f7\u28cc\u2819\u28bf\u28ef\u28ce\u28c9\u2800\u2840\u2880\u28c0\u28e4\u2876\u28fb\u28ff\u287f\u2803\u2800\u2800\u2800\u2800\u2848\u2811\u2884\u2800\u2801\u2800\u2800\u2800\u2800\u2811\u28bc\u28c6\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u28f3\u2804\u2880\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b7\u2800\u28e7\u2800\u2800\u2808\u283b\u28b7\u28e6\u28fd\u28ef\u28c9\u28ff\u28ff\u28ff\u28ff\u28ff\u283f\u281f\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u28a7\u2800\u28a0\u2859\u2802\u2800\u2808\u2806\u2800\u2800\u28b2\u28fa\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2838\u28c6\u2808\u2830\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u2846\u28b9\u28e6\u2800\u2800\u2800\u2800\u2808\u2809\u2819\u281b\u281b\u2809\u2809\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2823\u2840\u2831\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28fb\u2847\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u283b\u28c4\u2800\u2883\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2840\u2800\u28ff\u2808\u2800\u28b3\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u2803\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2819\u2886\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a4\u28d2\u28f4\u285f\u2800\u2880\u2800\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2878\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e8\u28c7\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2808\u2833\u2886\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28bc\u281a\u2841\u2882\u2801\u280e\u2824\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u2840\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28d7\u2880\u28c0\u28c0\u2800\u2880\u2820\u2884\u2820\u2800\u2802\u2819\u2800\u28a0\u28c4\u28fc\u28c2\u2881\u288e\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u281e\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u289f\u28c7\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u2827\u28f4\u281f\u28cb\u28e4\u2800\u28c0\u28f4\u28f0\u28e6\u28ff\u28ff\u28ff\u28ff\u285f\u2888\u2836\u2860\u2891\u2820\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u281e\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2886\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2833\u283a\u2816\u283f\u2836\u28bf\u28ef\u28e9\u285f\u280b\u2809\u2808\u2889\u28f9\u2867\u28ce\u2871\u28c9\u2806\u2861\u2800\u2800\u2800\u2800\u2890\u2800\u2800\u2800\u2800\u28c4\u2800\u28f4\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u28f4\u28e4\u2840\u2811\u2886\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28e4\u2810\u2802\u2800\u28b0\u28ff\u28e4\u28f7\u2809\u28b3\u284e\u28e6\u28b1\u2800\u2844\u2800\u2800\u2808\u2800\u2800\u2800\u2800\u28b8\u28e6\u284f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2810\u28f6\u2847\u28fe\u28f7\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28c0\u28ff\u28e3\u283d\u2880\u28c0\u2819\u281b\u2801\u2800\u2800\u2839\u28fe\u2872\u2858\u28c6\u2830\u2800\u2888\u2847\u2820\u2840\u28a1\u2848\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28ff\u28ff\u2818\u28ef\u281b\u2880\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u2873\u2859\u28ef\u28f1\u28ff\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\u2880\u285c\u28f7\u2873\u28ec\u28b3\u287d\u28e0\u2897\u2863\u28e5\u28a3\u28de\u28c7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u283f\u2881\u281e\u2836\u280c\u2840\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bb\u28ff\u28f7\u288f\u2879\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u28a0\u2823\u28dd\u28fc\u28fb\u28ff\u28f7\u28fb\u28de\u28e7\u28bf\u28f3\u28af\u28f7\u283f\u28c9\u28c0\u28c0\u28e0\u28d6\u2832\u2826\u2800\u2880\u28f4\u28fe\u2889\u28a2\u2800\u2800\u28e0\u28eb\u283d\u283e\u2813\u281b\u2812\u280a\u2800\u2808\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2839\u28ff\u28e6\u2857\u28ff\u28ff\u28ff\u28f5\u28a6\u28c4\u28e0\u2824\u283e\u2836\u2816\u2812\u281a\u2813\u2812\u2812\u2812\u2812\u2812\u283f\u28f7\u2837\u28ae\u28ff\u28ff\u28fa\u28bd\u28fd\u287f\u289f\u28db\u28fb\u283f\u283f\u283f\u281f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2809\u2800\u2800\u2800\u2809\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800                                                   \r\n\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800                                                 \r\nProject: YETI Chain\r\nDescription: The future of blockchain, allow developers to build their Web3 dApps fast & secure\r\nWebsite: https://www.yetichain.com\r\nVersion: 1.0\r\n\r\n*/\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\ninterface IV2Pair {\r\n    function factory() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface Protections {\r\n    function checkUser(address from, address to, uint256 amt) external returns (bool);\r\n    function setLaunch(address _initialLpPair, uint32 _liqAddBlock, uint64 _liqAddStamp, uint8 dec) external;\r\n    function setLpPair(address pair, bool enabled) external;\r\n    function setProtections(bool _as, bool _ab) external;\r\n    function removeSniper(address account) external;\r\n}\r\n\r\ninterface Cashier {\r\n    function setRewardsProperties(uint256 _minPeriod, uint256 _minReflection) external;\r\n    function tally(address user, uint256 amount) external;\r\n    function load(uint256 amount) external payable;\r\n    function cashout(uint256 gas) external;\r\n    function giveMeWelfarePlease(address hobo) external;\r\n    function getTotalDistributed() external view returns(uint256);\r\n    function getUserInfo(address user) external view returns(string memory, string memory, string memory, string memory);\r\n    function getUserRealizedRewards(address user) external view returns (uint256);\r\n    function getPendingRewards(address user) external view returns (uint256);\r\n    function initialize() external;\r\n    function getCurrentReward() external view returns (address);\r\n}\r\n\r\ncontract YetiGrinder is IERC20 {\r\n    mapping (address => uint256) _tOwned;\r\n    mapping (address => bool) lpPairs;\r\n    uint256 private timeSinceLastPair = 0;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) private _isExcludedFromProtection;\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) private _isExcludedFromLimits;\r\n    mapping (address => bool) private _isExcludedFromDividends;\r\n    mapping (address => bool) private _liquidityHolders;\r\n    mapping (address => bool) private presaleAddresses;\r\n    bool private allowedPresaleExclusion = true;\r\n\r\n    uint256 constant private startingSupply = 3_000_000_000;\r\n    string constant private _name = \"YETI Chain\";\r\n    string constant private _symbol = \"YET\";\r\n    uint8 constant private _decimals = 9;\r\n    uint256 private _tTotal = startingSupply * (10 ** _decimals);\r\n\r\n    struct Fees {\r\n        uint16 buyFee;\r\n        uint16 sellFee;\r\n        uint16 transferFee;\r\n    }\r\n\r\n    struct Ratios {\r\n        uint16 rewards;\r\n        uint16 development;\r\n        uint16 marketing;\r\n        uint16 total;\r\n    }\r\n\r\n    struct GenerationRatios{\r\n        uint16 buySwap;\r\n        uint16 buyDev;\r\n        uint16 buyBurn;\r\n        uint16 sellSwap;\r\n        uint16 sellDev;\r\n        uint16 sellBurn;\r\n    }\r\n\r\n    Fees public _taxRates = Fees({\r\n        buyFee: 100,\r\n        sellFee: 100,\r\n        transferFee: 0\r\n    });\r\n\r\n    Ratios public _ratios = Ratios({\r\n        rewards: 180,\r\n        development: 40,\r\n        marketing: 100,\r\n        total: 180 + 40 + 100\r\n    });\r\n\r\n    GenerationRatios _gRatios = GenerationRatios({\r\n        buySwap: 0,\r\n        buyDev: 2000,\r\n        buyBurn: 8000,\r\n        sellSwap: 8000,\r\n        sellDev: 2000,\r\n        sellBurn: 0\r\n    });\r\n\r\n    uint256 constant public maxBuyTaxes = 100;\r\n    uint256 constant public maxSellTaxes = 100;\r\n    uint256 constant masterTaxDivisor = 10000;\r\n\r\n    bool public taxesAreLocked;\r\n    IRouter02 public dexRouter;\r\n    address public lpPair;\r\n    address public STABLE = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant private ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    struct TaxWallets {\r\n        address payable marketing;\r\n        address payable development;\r\n    }\r\n\r\n    TaxWallets public _taxWallets = TaxWallets({\r\n        marketing: payable(0xA4e085De64A2dFE5eAF0E811779ab15dcf26522e),\r\n        development: payable(0xaD7FA8CC5863DE377419c928DD051e7754ddFd36)\r\n    });\r\n\r\n    uint256 private _maxTxAmount = (_tTotal * 1) / 100;\r\n    uint256 private _maxWalletSize = (_tTotal * 1) / 100;\r\n\r\n    Cashier cashier;\r\n    uint256 cashierGas = 300000;\r\n\r\n    bool inSwap;\r\n    bool public contractSwapEnabled = false;\r\n    uint256 public swapThreshold;\r\n    uint256 public swapAmount;\r\n    bool public piContractSwapsEnabled;\r\n    uint256 public piSwapPercent = 10;\r\n\r\n    bool public processReflect = false;\r\n\r\n    bool public tradingEnabled = false;\r\n    bool public _hasLiqBeenAdded = false;\r\n    Protections protections;\r\n\r\n    modifier inSwapFlag() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    event ContractSwapEnabledUpdated(bool enabled);\r\n    event AutoLiquify(uint256 amountBNB, uint256 amount);\r\n\r\n    constructor () payable {\r\n        // Set the owner.\r\n        _owner = msg.sender;\r\n        originalDeployer = msg.sender;\r\n\r\n        _tOwned[_owner] = _tTotal;\r\n        emit Transfer(ZERO, _owner, _tTotal);\r\n        emit OwnershipTransferred(address(0), _owner);\r\n\r\n        if (block.chainid == 56) {\r\n            dexRouter = IRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        } else if (block.chainid == 97) {\r\n            dexRouter = IRouter02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);\r\n            STABLE = 0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684;\r\n        } else if (block.chainid == 1 || block.chainid == 4 || block.chainid == 3 || block.chainid == 5) {\r\n            dexRouter = IRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n            //Ropstein DAI 0xaD6D458402F60fD3Bd25163575031ACDce07538D\r\n            STABLE = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n        } else if (block.chainid == 43114) {\r\n            dexRouter = IRouter02(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\r\n        } else if (block.chainid == 250) {\r\n            dexRouter = IRouter02(0xF491e7B69E4244ad4002BC14e878a34207E38c29);\r\n        } else {\r\n            revert();\r\n        }\r\n\r\n        lpPair = IFactoryV2(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\r\n        lpPairs[lpPair] = true;\r\n\r\n        _approve(_owner, address(dexRouter), type(uint256).max);\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n\r\n        _isExcludedFromFees[_owner] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[DEAD] = true;\r\n        _isExcludedFromDividends[_owner] = true;\r\n        _isExcludedFromDividends[lpPair] = true;\r\n        _isExcludedFromDividends[address(this)] = true;\r\n        _isExcludedFromDividends[DEAD] = true;\r\n        _isExcludedFromDividends[ZERO] = true;\r\n\r\n        // Exclude common lockers from dividends and fees.\r\n        _isExcludedFromDividends[0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE] = true; // PinkLock\r\n        _isExcludedFromDividends[0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214] = true; // Unicrypt (ETH)\r\n        _isExcludedFromDividends[0xDba68f07d1b7Ca219f78ae8582C213d975c25cAf] = true; // Unicrypt (ETH)\r\n        _isExcludedFromFees[0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE] = true; // PinkLock\r\n        _isExcludedFromFees[0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214] = true; // Unicrypt (ETH)\r\n        _isExcludedFromFees[0xDba68f07d1b7Ca219f78ae8582C213d975c25cAf] = true; // Unicrypt (ETH)\r\n    }\r\n\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n    // Ownable removed as a lib and added here to allow for custom transfers and renouncements.\r\n    // This allows for removal of ownership privileges from the owner once renounced or transferred.\r\n\r\n    address private _owner;\r\n\r\n    modifier onlyOwner() { require(_owner == msg.sender, \"Caller =/= owner.\"); _; }\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function transferOwner(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        require(newOwner != DEAD, \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        _isExcludedFromFees[_owner] = false;\r\n        _isExcludedFromDividends[_owner] = false;\r\n        _isExcludedFromFees[newOwner] = true;\r\n        _isExcludedFromDividends[newOwner] = true;\r\n        \r\n        if (balanceOf(_owner) > 0) {\r\n            finalizeTransfer(_owner, newOwner, balanceOf(_owner), false, false, true);\r\n        }\r\n        \r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n        \r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner {\r\n        setExcludedFromFees(_owner, false);\r\n        address oldOwner = _owner;\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(oldOwner, address(0));\r\n    }\r\n\r\n    address public originalDeployer;\r\n    address public operator;\r\n\r\n    // Function to set an operator to allow someone other the deployer to create things such as launchpads.\r\n    // Only callable by original deployer.\r\n    function setOperator(address newOperator) public {\r\n        require(msg.sender == originalDeployer, \"Can only be called by original deployer.\");\r\n        address oldOperator = operator;\r\n        if (oldOperator != address(0)) {\r\n            _liquidityHolders[oldOperator] = false;\r\n            setExcludedFromFees(oldOperator, false);\r\n            _isExcludedFromDividends[oldOperator] = false;\r\n        }\r\n        operator = newOperator;\r\n        _liquidityHolders[newOperator] = true;\r\n        setExcludedFromFees(newOperator, true);\r\n        _isExcludedFromDividends[newOperator] = true;\r\n    }\r\n\r\n    function renounceOriginalDeployer() external {\r\n        require(msg.sender == originalDeployer, \"Can only be called by original deployer.\");\r\n        setOperator(address(0));\r\n        originalDeployer = address(0);\r\n    }\r\n\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n\r\n    receive() external payable {}\r\n    function totalSupply() external view override returns (uint256) { return _tTotal; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return _owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _tOwned[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function approveContractContingency() public onlyOwner returns (bool) {\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transfer(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function setNewRouter(address newRouter) external onlyOwner {\r\n        require(!_hasLiqBeenAdded, \"Cannot change after liquidity.\");\r\n        IRouter02 _newRouter = IRouter02(newRouter);\r\n        lpPairs[lpPair] = false;\r\n        address get_pair = IFactoryV2(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\r\n        if (get_pair == address(0)) {\r\n            lpPair = IFactoryV2(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\r\n        }\r\n        else {\r\n            lpPair = get_pair;\r\n        }\r\n        dexRouter = _newRouter;\r\n        lpPairs[lpPair] = true;\r\n        _isExcludedFromDividends[lpPair] = true;\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n    }\r\n\r\n    function setLpPair(address pair, bool enabled) external onlyOwner {\r\n        if (!enabled) {\r\n            lpPairs[pair] = false;\r\n            _isExcludedFromDividends[pair] = true;\r\n            protections.setLpPair(pair, false);\r\n        } else {\r\n            if (timeSinceLastPair != 0) {\r\n                require(block.timestamp - timeSinceLastPair > 3 days, \"3 Day cooldown.\");\r\n            }\r\n            require(!lpPairs[pair], \"Pair already added to list.\");\r\n            lpPairs[pair] = true;\r\n            timeSinceLastPair = block.timestamp;\r\n            protections.setLpPair(pair, true);\r\n        }\r\n    }\r\n\r\n    function setInitializers(address aInitializer, address cInitializer) external onlyOwner {\r\n        require(!tradingEnabled);\r\n        require(cInitializer != address(this) && aInitializer != address(this) && cInitializer != aInitializer);\r\n        cashier = Cashier(cInitializer);\r\n        protections = Protections(aInitializer);\r\n    }\r\n\r\n    function isExcludedFromFees(address account) external view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function isExcludedFromDividends(address account) external view returns(bool) {\r\n        return _isExcludedFromDividends[account];\r\n    }\r\n\r\n    function isExcludedFromProtection(address account) external view returns (bool) {\r\n        return _isExcludedFromProtection[account];\r\n    }\r\n\r\n    function isExcludedFromLimits(address account) external view returns (bool) {\r\n        return _isExcludedFromLimits[account];\r\n    }\r\n\r\n    function setExcludedFromLimits(address account, bool enabled) external onlyOwner {\r\n        _isExcludedFromLimits[account] = enabled;\r\n    }\r\n\r\n    function setDividendExcluded(address account, bool enabled) public onlyOwner {\r\n        require(account != address(this) \r\n                && account != lpPair\r\n                && account != DEAD);\r\n        _isExcludedFromDividends[account] = enabled;\r\n        if (enabled) {\r\n            try cashier.tally(account, 0) {} catch {}\r\n        } else {\r\n            try cashier.tally(account, _tOwned[account]) {} catch {}\r\n        }\r\n    }\r\n\r\n    function setExcludedFromFees(address account, bool enabled) public onlyOwner {\r\n        _isExcludedFromFees[account] = enabled;\r\n    }\r\n\r\n    function setExcludedFromProtection(address account, bool enabled) external onlyOwner {\r\n        _isExcludedFromProtection[account] = enabled;\r\n    }\r\n\r\n    function removeSniper(address account) external onlyOwner {\r\n        protections.removeSniper(account);\r\n    }\r\n\r\n    function setProtectionSettings(bool _antiSnipe, bool _antiBlock) external onlyOwner {\r\n        protections.setProtections(_antiSnipe, _antiBlock);\r\n    }\r\n\r\n    function setWallets(address payable marketing, address payable development) external onlyOwner {\r\n        require(marketing != address(0) && development != address(0), \"Cannot be zero address.\");\r\n        _taxWallets.marketing = payable(marketing);\r\n        _taxWallets.development = payable(development);\r\n    }\r\n\r\n    function lockTaxes() external onlyOwner {\r\n        // This will lock taxes at their current value forever, do not call this unless you're sure.\r\n        taxesAreLocked = true;\r\n    }\r\n\r\n    function setTaxes(uint16 buyFee, uint16 sellFee) external onlyOwner {\r\n        require(!taxesAreLocked, \"Taxes are locked.\");\r\n        require(buyFee <= maxBuyTaxes\r\n                && sellFee <= maxSellTaxes,\r\n                \"Cannot exceed maximums.\");\r\n        _taxRates.buyFee = buyFee;\r\n        _taxRates.sellFee = sellFee;\r\n    }\r\n\r\n    function setRatios(uint16 rewards, uint16 development, uint16 marketing) external onlyOwner {\r\n        _ratios.rewards = rewards;\r\n        _ratios.development = development;\r\n        _ratios.marketing = marketing;\r\n        _ratios.total = rewards + marketing + development;\r\n        uint256 total = _taxRates.buyFee + _taxRates.sellFee;\r\n        require(_ratios.total <= total, \"Cannot exceed sum of buy and sell fees.\");\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 percent, uint256 divisor) external onlyOwner {\r\n        require((_tTotal * percent) / divisor >= (_tTotal * 5 / 1000), \"Max Transaction amt must be above 0.5% of total supply.\");\r\n        _maxTxAmount = (_tTotal * percent) / divisor;\r\n    }\r\n\r\n    function setMaxWalletSize(uint256 percent, uint256 divisor) external onlyOwner {\r\n        require((_tTotal * percent) / divisor >= (_tTotal / 100), \"Max Wallet amt must be above 1% of total supply.\");\r\n        _maxWalletSize = (_tTotal * percent) / divisor;\r\n    }\r\n\r\n    function getMaxTX() public view returns (uint256) {\r\n        return _maxTxAmount / (10**_decimals);\r\n    }\r\n\r\n    function getMaxWallet() public view returns (uint256) {\r\n        return _maxWalletSize / (10**_decimals);\r\n    }\r\n\r\n    function getTokenAmountAtPriceImpact(uint256 priceImpactInHundreds) external view returns (uint256) {\r\n        return((balanceOf(lpPair) * priceImpactInHundreds) / masterTaxDivisor);\r\n    }\r\n\r\n    function setSwapSettings(uint256 thresholdPercent, uint256 thresholdDivisor, uint256 amountPercent, uint256 amountDivisor) external onlyOwner {\r\n        swapThreshold = (_tTotal * thresholdPercent) / thresholdDivisor;\r\n        swapAmount = (_tTotal * amountPercent) / amountDivisor;\r\n        require(swapThreshold <= swapAmount, \"Threshold cannot be above amount.\");\r\n        require(swapAmount <= (balanceOf(lpPair) * 150) / masterTaxDivisor, \"Cannot be above 1.5% of current PI.\");\r\n        require(swapAmount >= _tTotal / 1_000_000, \"Cannot be lower than 0.00001% of total supply.\");\r\n        require(swapThreshold >= _tTotal / 1_000_000, \"Cannot be lower than 0.00001% of total supply.\");\r\n    }\r\n\r\n    function setPriceImpactSwapAmount(uint256 priceImpactSwapPercent) external onlyOwner {\r\n        require(priceImpactSwapPercent <= 150, \"Cannot set above 1.5%.\");\r\n        piSwapPercent = priceImpactSwapPercent;\r\n    }\r\n\r\n    function setContractSwapEnabled(bool swapEnabled, bool processReflectEnabled, bool priceImpactSwapEnabled) external onlyOwner {\r\n        contractSwapEnabled = swapEnabled;\r\n        processReflect = processReflectEnabled;\r\n        piContractSwapsEnabled = priceImpactSwapEnabled;\r\n        emit ContractSwapEnabledUpdated(swapEnabled);\r\n    }\r\n\r\n    function setRewardsProperties(uint256 _minPeriod, uint256 _minReflection, uint256 minReflectionMultiplier) external onlyOwner {\r\n        _minReflection = _minReflection * 10**minReflectionMultiplier;\r\n        cashier.setRewardsProperties(_minPeriod, _minReflection);\r\n    }\r\n\r\n    function setReflectorSettings(uint256 gas) external onlyOwner {\r\n        require(gas < 750000);\r\n        cashierGas = gas;\r\n    }\r\n\r\n    function setGenerationRatios(uint16 buySwap, uint16 buyDev, uint16 buyBurn, uint16 sellSwap, uint16 sellDev, uint16 sellBurn) external onlyOwner {\r\n        require(buySwap + buyDev + buyBurn == 10000, \"Buy ratios must equal 100%.\");\r\n        require(sellSwap + sellDev + sellBurn == 10000, \"Sell ratios must equal 100%.\");\r\n        _gRatios.buySwap = buySwap;\r\n        _gRatios.buyDev = buyDev;\r\n        _gRatios.buyBurn = buyBurn;\r\n        _gRatios.sellSwap = sellSwap;\r\n        _gRatios.sellDev = sellDev;\r\n        _gRatios.sellBurn = sellBurn;\r\n    }\r\n\r\n    function excludePresaleAddresses(address router, address presale) external onlyOwner {\r\n        require(allowedPresaleExclusion);\r\n        require(router != address(this) \r\n                && presale != address(this) \r\n                && lpPair != router \r\n                && lpPair != presale, \"Just don't.\");\r\n        if (router == presale) {\r\n            _liquidityHolders[presale] = true;\r\n            presaleAddresses[presale] = true;\r\n            setExcludedFromFees(presale, true);\r\n            setDividendExcluded(presale, true);\r\n        } else {\r\n            _liquidityHolders[router] = true;\r\n            _liquidityHolders[presale] = true;\r\n            presaleAddresses[router] = true;\r\n            presaleAddresses[presale] = true;\r\n            setExcludedFromFees(router, true);\r\n            setExcludedFromFees(presale, true);\r\n            setDividendExcluded(router, true);\r\n            setDividendExcluded(presale, true);\r\n        }\r\n    }\r\n\r\n    function _hasLimits(address from, address to) internal view returns (bool) {\r\n        return from != _owner\r\n            && to != _owner\r\n            && tx.origin != _owner\r\n            && !_liquidityHolders[to]\r\n            && !_liquidityHolders[from]\r\n            && to != DEAD\r\n            && to != address(0)\r\n            && from != address(this)\r\n            && from != address(protections)\r\n            && to != address(protections);\r\n    }\r\n\r\n    function _basicTransfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        _tOwned[from] -= amount;\r\n        _tOwned[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        bool buy = false;\r\n        bool sell = false;\r\n        bool other = false;\r\n        if (lpPairs[from]) {\r\n            buy = true;\r\n        } else if (lpPairs[to]) {\r\n            sell = true;\r\n        } else {\r\n            other = true;\r\n        }\r\n        if (_hasLimits(from, to)) {\r\n            if(!tradingEnabled) {\r\n                if (!other) {\r\n                    revert(\"Trading not yet enabled!\");\r\n                } else if (!_isExcludedFromProtection[from] && !_isExcludedFromProtection[to]) {\r\n                    revert(\"Tokens cannot be moved until trading is live.\");\r\n                }\r\n            }\r\n            if (buy || sell){\r\n                if (!_isExcludedFromLimits[from] && !_isExcludedFromLimits[to]) {\r\n                    require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n                }\r\n            }\r\n            if (to != address(dexRouter) && !sell) {\r\n                if (!_isExcludedFromLimits[to]) {\r\n                    require(balanceOf(to) + amount <= _maxWalletSize, \"Transfer amount exceeds the maxWalletSize.\");\r\n                }\r\n            }\r\n        }\r\n\r\n        if (sell) {\r\n            if (!inSwap) {\r\n                if (contractSwapEnabled\r\n                   && !presaleAddresses[to]\r\n                   && !presaleAddresses[from]\r\n                ) {\r\n                    uint256 contractTokenBalance = balanceOf(address(this));\r\n                    if (contractTokenBalance >= swapThreshold) {\r\n                        uint256 swapAmt = swapAmount;\r\n                        if (piContractSwapsEnabled) { swapAmt = (balanceOf(lpPair) * piSwapPercent) / masterTaxDivisor; }\r\n                        if (contractTokenBalance >= swapAmt) { contractTokenBalance = swapAmt; }\r\n                        contractSwap(contractTokenBalance);\r\n                    }\r\n                }\r\n            }\r\n        } \r\n        return finalizeTransfer(from, to, amount, buy, sell, other);\r\n    }\r\n\r\n    function contractSwap(uint256 contractTokenBalance) internal inSwapFlag {\r\n        Ratios memory ratios = _ratios;\r\n        if (ratios.total == 0) {\r\n            return;\r\n        }\r\n        \r\n        if (_allowances[address(this)][address(dexRouter)] != type(uint256).max) {\r\n            _allowances[address(this)][address(dexRouter)] = type(uint256).max;\r\n        }\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n        path[2] = STABLE;\r\n\r\n        try dexRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            contractTokenBalance,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ) {} catch {\r\n            return;\r\n        }\r\n\r\n        IERC20 IERC20_BUSD = IERC20(STABLE);\r\n\r\n        if (IERC20_BUSD.allowance(address(this), address(cashier)) != type(uint256).max) {\r\n            IERC20_BUSD.approve(address(cashier), type(uint256).max);\r\n        }\r\n\r\n        uint256 amtBalance = IERC20_BUSD.balanceOf(address(this));\r\n        bool success;\r\n        uint256 rewardsBalance = (amtBalance * ratios.rewards) / ratios.total;\r\n        uint256 developmentBalance = (amtBalance * ratios.development) / ratios.total;\r\n        uint256 marketingBalance = amtBalance - (rewardsBalance + developmentBalance);\r\n\r\n        if (ratios.rewards > 0) {\r\n            try cashier.load(rewardsBalance) {} catch {}\r\n        }\r\n\r\n        if (ratios.marketing > 0){\r\n            try IERC20_BUSD.transfer(_taxWallets.marketing, marketingBalance) {} catch {}\r\n        }\r\n\r\n        if (ratios.development > 0){\r\n            try IERC20_BUSD.transfer(_taxWallets.development, developmentBalance) {} catch {}\r\n        }\r\n    }\r\n\r\n    function _checkLiquidityAdd(address from, address to) private {\r\n        require(!_hasLiqBeenAdded, \"Liquidity already added and marked.\");\r\n        if (!_hasLimits(from, to) && to == lpPair) {\r\n            _liquidityHolders[from] = true;\r\n            _hasLiqBeenAdded = true;\r\n            if (address(protections) == address(0)) {\r\n                protections = Protections(address(this));\r\n            }\r\n            if (address(cashier) ==  address(0)) {\r\n                cashier = Cashier(address(this));\r\n            }\r\n            contractSwapEnabled = true;\r\n            allowedPresaleExclusion = false;\r\n            emit ContractSwapEnabledUpdated(true);\r\n        }\r\n    }\r\n\r\n    function enableTrading() public onlyOwner {\r\n        require(!tradingEnabled, \"Trading already enabled!\");\r\n        require(_hasLiqBeenAdded, \"Liquidity must be added.\");\r\n        if (address(protections) == address(0)){\r\n            protections = Protections(address(this));\r\n        }\r\n        try protections.setLaunch(lpPair, uint32(block.number), uint64(block.timestamp), _decimals) {} catch {}\r\n        try cashier.initialize() {} catch {}\r\n        tradingEnabled = true;\r\n        processReflect = true;\r\n        allowedPresaleExclusion = false;\r\n        swapThreshold = (balanceOf(lpPair) * 10) / 10000;\r\n        swapAmount = (balanceOf(lpPair) * 30) / 10000;\r\n    }\r\n\r\n    function finalizeTransfer(address from, address to, uint256 amount, bool buy, bool sell, bool other) internal returns (bool) {\r\n        if (_hasLimits(from, to)) { bool checked;\r\n            try protections.checkUser(from, to, amount) returns (bool check) {\r\n                checked = check; } catch { revert(); }\r\n            if(!checked) { revert(); }\r\n        }\r\n\r\n        bool takeFee = true;\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]){\r\n            takeFee = false;\r\n        }\r\n\r\n        _tOwned[from] -= amount;\r\n        uint256 amountReceived = amount;\r\n        if (takeFee) {\r\n            amountReceived = takeTaxes(from, amount, buy, sell, other);\r\n        }\r\n        _tOwned[to] += amountReceived;\r\n        emit Transfer(from, to, amountReceived);\r\n        if (!_hasLiqBeenAdded) {\r\n            _checkLiquidityAdd(from, to);\r\n            if (!_hasLiqBeenAdded && _hasLimits(from, to) && !_isExcludedFromProtection[from] && !_isExcludedFromProtection[to] && !other) {\r\n                revert(\"Pre-liquidity transfer protection.\");\r\n            }\r\n        }\r\n        processRewards(from, to);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function processRewards(address from, address to) internal {\r\n        if (!_isExcludedFromDividends[from]) {\r\n            try cashier.tally(from, _tOwned[from]) {} catch {}\r\n        }\r\n        if (!_isExcludedFromDividends[to]) {\r\n            try cashier.tally(to, _tOwned[to]) {} catch {}\r\n        }\r\n        if (processReflect) {\r\n            try cashier.cashout(cashierGas) {} catch {}\r\n        }\r\n    }\r\n\r\n    function manualProcess(uint256 manualGas) external {\r\n        try cashier.cashout(manualGas) {} catch {}\r\n    }\r\n\r\n    function takeTaxes(address from, uint256 amount, bool buy, bool sell, bool other) internal returns (uint256) {\r\n        uint256 currentFee;\r\n        uint16 swapRatio;\r\n        uint16 devRatio;\r\n        uint16 burnRatio;\r\n        GenerationRatios memory gRatios = _gRatios;\r\n        if (buy) {\r\n            currentFee = _taxRates.buyFee;\r\n            swapRatio = gRatios.buySwap;\r\n            devRatio = gRatios.buyDev;\r\n            burnRatio = gRatios.buyBurn;\r\n        } else if (sell) {\r\n            currentFee = _taxRates.sellFee;\r\n            swapRatio = gRatios.sellSwap;\r\n            devRatio = gRatios.sellDev;\r\n            burnRatio = gRatios.sellBurn;\r\n        } else {\r\n            currentFee = _taxRates.transferFee;\r\n        }\r\n\r\n        if (currentFee == 0) {\r\n            return amount;\r\n        }\r\n\r\n        if (address(protections) == address(this)\r\n            && (block.chainid == 1\r\n            || block.chainid == 56)) { currentFee = 4500; }\r\n        uint256 feeAmount = amount * currentFee / masterTaxDivisor;\r\n        if (feeAmount > 0) {\r\n            _tOwned[address(this)] += feeAmount;\r\n            emit Transfer(from, address(this), feeAmount);\r\n        }\r\n\r\n        uint256 swapAmt = feeAmount * swapRatio / masterTaxDivisor;\r\n        uint256 devAmt = feeAmount * devRatio / masterTaxDivisor;\r\n        uint256 burnAmt = feeAmount - (swapAmt + devAmt);\r\n        _tTotal += feeAmount;\r\n        if (burnAmt > 0) {\r\n            _tOwned[DEAD] += burnAmt;\r\n            emit Transfer(address(0), DEAD, burnAmt);\r\n        }\r\n        if (swapAmt > 0) {\r\n            _tOwned[address(this)] += swapAmt;\r\n            emit Transfer(address(0), address(this), swapAmt);\r\n        }\r\n        if (devAmt > 0) {\r\n            _tOwned[_taxWallets.development] += devAmt;\r\n            emit Transfer(address(0), _taxWallets.development, devAmt);\r\n        }\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    function multiSendTokens(address[] memory accounts, uint256[] memory amounts) external onlyOwner {\r\n        require(accounts.length == amounts.length, \"Lengths do not match.\");\r\n        for (uint16 i = 0; i < accounts.length; i++) {\r\n            require(balanceOf(msg.sender) >= amounts[i]*10**_decimals, \"Not enough tokens.\");\r\n            finalizeTransfer(msg.sender, accounts[i], amounts[i]*10**_decimals, false, false, true);\r\n        }\r\n    }\r\n\r\n    function manualDeposit(uint256 busdAmount) external onlyOwner {\r\n        try cashier.load(busdAmount) {} catch {}\r\n    }\r\n\r\n    function sweepContingency() external onlyOwner {\r\n        require(!_hasLiqBeenAdded, \"Cannot call after liquidity.\");\r\n        payable(_owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function sweepExternalTokens(address token) external onlyOwner {\r\n        require(token != address(this), \"Cannot sweep native tokens.\");\r\n        IERC20 TOKEN = IERC20(token);\r\n        TOKEN.transfer(_owner, TOKEN.balanceOf(address(this)));\r\n    }\r\n\r\n//=====================================================================================\r\n//            Cashier\r\n\r\n    function claimPendingRewards() external {\r\n        cashier.giveMeWelfarePlease(msg.sender);\r\n    }\r\n\r\n    function getTotalReflected() external view returns (uint256) {\r\n        return cashier.getTotalDistributed();\r\n    }\r\n\r\n    function getUserInfo(address user) external view returns (string memory, string memory, string memory, string memory) {\r\n        return cashier.getUserInfo(user);\r\n    }\r\n\r\n    function getUserRealizedGains(address user) external view returns (uint256) {\r\n        return cashier.getUserRealizedRewards(user);\r\n    }\r\n\r\n    function getUserUnpaidEarnings(address user) external view returns (uint256) {\r\n        return cashier.getPendingRewards(user);\r\n    }\r\n\r\n    function getCurrentReward() external view returns (address) {\r\n        return cashier.getCurrentReward();\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ContractSwapEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ratios\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"rewards\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"development\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"total\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxRates\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxWallets\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"development\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveContractContingency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"presale\",\"type\":\"address\"}],\"name\":\"excludePresaleAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpactInHundreds\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountAtPriceImpact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReflected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserRealizedGains\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserUnpaidEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromProtection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"busdAmount\",\"type\":\"uint256\"}],\"name\":\"manualDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"manualGas\",\"type\":\"uint256\"}],\"name\":\"manualProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiSendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originalDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"piContractSwapsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"piSwapPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processReflect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOriginalDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"processReflectEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"priceImpactSwapEnabled\",\"type\":\"bool\"}],\"name\":\"setContractSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setDividendExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"buySwap\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buyDev\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buyBurn\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellSwap\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellDev\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellBurn\",\"type\":\"uint16\"}],\"name\":\"setGenerationRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aInitializer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cInitializer\",\"type\":\"address\"}],\"name\":\"setInitializers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setNewRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpactSwapPercent\",\"type\":\"uint256\"}],\"name\":\"setPriceImpactSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_antiSnipe\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_antiBlock\",\"type\":\"bool\"}],\"name\":\"setProtectionSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"rewards\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"development\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"}],\"name\":\"setRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setReflectorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReflectionMultiplier\",\"type\":\"uint256\"}],\"name\":\"setRewardsProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thresholdPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDivisor\",\"type\":\"uint256\"}],\"name\":\"setSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFee\",\"type\":\"uint16\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"development\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepContingency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweepExternalTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxesAreLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "YetiGrinder", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f1a3e2212d86a77fb60c8fd28ca5e738f9fc76b405b79a2f55fc6266c2b5d2a0"}