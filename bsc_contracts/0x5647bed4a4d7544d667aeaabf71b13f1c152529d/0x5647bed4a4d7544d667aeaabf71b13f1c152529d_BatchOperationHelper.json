{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/misc/BatchOperationHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport {IVotingEscrowCallback} from \\\"../governance/VotingEscrowV2.sol\\\";\\n\\ninterface IClaimRewards {\\n    function claimRewards(address account) external;\\n\\n    function claimRewardsAndUnwrap(address account) external;\\n}\\n\\ncontract BatchOperationHelper {\\n    string public constant VERSION = \\\"2.0.0\\\";\\n\\n    function batchClaimRewards(address[] calldata contracts, address account) public {\\n        uint256 count = contracts.length;\\n        for (uint256 i = 0; i < count; i++) {\\n            IClaimRewards(contracts[i]).claimRewards(account);\\n        }\\n    }\\n\\n    function batchClaimRewardsAndUnwrap(\\n        address[] calldata contracts,\\n        address[] calldata wrappedContracts,\\n        address account\\n    ) external {\\n        batchClaimRewards(contracts, account);\\n        uint256 count = wrappedContracts.length;\\n        for (uint256 i = 0; i < count; i++) {\\n            IClaimRewards(wrappedContracts[i]).claimRewardsAndUnwrap(account);\\n        }\\n    }\\n\\n    function batchSyncWithVotingEscrow(address[] calldata contracts, address account) external {\\n        uint256 count = contracts.length;\\n        for (uint256 i = 0; i < count; i++) {\\n            IVotingEscrowCallback(contracts[i]).syncWithVotingEscrow(account);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/VotingEscrowV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../utils/CoreUtility.sol\\\";\\nimport \\\"../utils/ManagedPausable.sol\\\";\\nimport \\\"../interfaces/IVotingEscrow.sol\\\";\\nimport \\\"../utils/ProxyUtility.sol\\\";\\n\\ninterface IAddressWhitelist {\\n    function check(address account) external view returns (bool);\\n}\\n\\ninterface IVotingEscrowCallback {\\n    function syncWithVotingEscrow(address account) external;\\n}\\n\\ncontract VotingEscrowV2 is\\n    IVotingEscrow,\\n    OwnableUpgradeable,\\n    ReentrancyGuard,\\n    CoreUtility,\\n    ManagedPausable,\\n    ProxyUtility\\n{\\n    /// @dev Reserved storage slots for future base contract upgrades\\n    uint256[29] private _reservedSlots;\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event LockCreated(address indexed account, uint256 amount, uint256 unlockTime);\\n\\n    event AmountIncreased(address indexed account, uint256 increasedAmount);\\n\\n    event UnlockTimeIncreased(address indexed account, uint256 newUnlockTime);\\n\\n    event Withdrawn(address indexed account, uint256 amount);\\n\\n    uint8 public constant decimals = 18;\\n\\n    uint256 public immutable override maxTime;\\n\\n    address public immutable override token;\\n\\n    string public name;\\n    string public symbol;\\n\\n    address public addressWhitelist;\\n\\n    mapping(address => LockedBalance) public locked;\\n\\n    /// @notice Mapping of unlockTime => total amount that will be unlocked at unlockTime\\n    mapping(uint256 => uint256) public scheduledUnlock;\\n\\n    /// @notice max lock time allowed at the moment\\n    uint256 public maxTimeAllowed;\\n\\n    /// @notice Contract to be call when an account's locked CHESS is updated\\n    address public callback;\\n\\n    /// @notice Amount of Chess locked now. Expired locks are not included.\\n    uint256 public totalLocked;\\n\\n    /// @notice Total veCHESS at the end of the last checkpoint's week\\n    uint256 public nextWeekSupply;\\n\\n    /// @notice Mapping of week => vote-locked chess total supplies\\n    ///\\n    ///         Key is the start timestamp of a week on each Thursday. Value is\\n    ///         vote-locked chess total supplies captured at the start of each week\\n    mapping(uint256 => uint256) public veSupplyPerWeek;\\n\\n    /// @notice Start timestamp of the trading week in which the last checkpoint is made\\n    uint256 public checkpointWeek;\\n\\n    constructor(address token_, uint256 maxTime_) public {\\n        token = token_;\\n        maxTime = maxTime_;\\n    }\\n\\n    /// @dev Initialize the contract. The contract is designed to be used with OpenZeppelin's\\n    ///      `TransparentUpgradeableProxy`. This function should be called by the proxy's\\n    ///      constructor (via the `_data` argument).\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 maxTimeAllowed_\\n    ) external initializer {\\n        __Ownable_init();\\n        require(maxTimeAllowed_ <= maxTime, \\\"Cannot exceed max time\\\");\\n        maxTimeAllowed = maxTimeAllowed_;\\n        _initializeV2(msg.sender, name_, symbol_);\\n    }\\n\\n    /// @dev Initialize the part added in V2. If this contract is upgraded from the previous\\n    ///      version, call `upgradeToAndCall` of the proxy and put a call to this function\\n    ///      in the `data` argument.\\n    ///\\n    ///      In the previous version, name and symbol were not correctly initialized via proxy.\\n    function initializeV2(\\n        address pauser_,\\n        string memory name_,\\n        string memory symbol_\\n    ) external onlyProxyAdmin {\\n        _initializeV2(pauser_, name_, symbol_);\\n    }\\n\\n    function _initializeV2(\\n        address pauser_,\\n        string memory name_,\\n        string memory symbol_\\n    ) private {\\n        _initializeManagedPausable(pauser_);\\n        require(bytes(name).length == 0 && bytes(symbol).length == 0);\\n        name = name_;\\n        symbol = symbol_;\\n\\n        // Initialize totalLocked, nextWeekSupply and checkpointWeek\\n        uint256 nextWeek = _endOfWeek(block.timestamp);\\n        uint256 totalLocked_ = 0;\\n        uint256 nextWeekSupply_ = 0;\\n        for (\\n            uint256 weekCursor = nextWeek;\\n            weekCursor <= nextWeek + maxTime;\\n            weekCursor += 1 weeks\\n        ) {\\n            totalLocked_ = totalLocked_.add(scheduledUnlock[weekCursor]);\\n            nextWeekSupply_ = nextWeekSupply_.add(\\n                (scheduledUnlock[weekCursor].mul(weekCursor - nextWeek)) / maxTime\\n            );\\n        }\\n        totalLocked = totalLocked_;\\n        nextWeekSupply = nextWeekSupply_;\\n        checkpointWeek = nextWeek - 1 weeks;\\n    }\\n\\n    function getTimestampDropBelow(address account, uint256 threshold)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        LockedBalance memory lockedBalance = locked[account];\\n        if (lockedBalance.amount == 0 || lockedBalance.amount < threshold) {\\n            return 0;\\n        }\\n        return lockedBalance.unlockTime.sub(threshold.mul(maxTime).div(lockedBalance.amount));\\n    }\\n\\n    function balanceOf(address account) external view override returns (uint256) {\\n        return _balanceOfAtTimestamp(account, block.timestamp);\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        uint256 weekCursor = checkpointWeek;\\n        uint256 nextWeek = _endOfWeek(block.timestamp);\\n        uint256 currentWeek = nextWeek - 1 weeks;\\n        uint256 newNextWeekSupply = nextWeekSupply;\\n        uint256 newTotalLocked = totalLocked;\\n        if (weekCursor < currentWeek) {\\n            weekCursor += 1 weeks;\\n            for (; weekCursor < currentWeek; weekCursor += 1 weeks) {\\n                // Remove Chess unlocked at the beginning of the next week from total locked amount.\\n                newTotalLocked = newTotalLocked.sub(scheduledUnlock[weekCursor]);\\n                // Calculate supply at the end of the next week.\\n                newNextWeekSupply = newNextWeekSupply.sub(newTotalLocked.mul(1 weeks) / maxTime);\\n            }\\n            newTotalLocked = newTotalLocked.sub(scheduledUnlock[weekCursor]);\\n            newNextWeekSupply = newNextWeekSupply.sub(\\n                newTotalLocked.mul(block.timestamp - currentWeek) / maxTime\\n            );\\n        } else {\\n            newNextWeekSupply = newNextWeekSupply.add(\\n                newTotalLocked.mul(nextWeek - block.timestamp) / maxTime\\n            );\\n        }\\n\\n        return newNextWeekSupply;\\n    }\\n\\n    function getLockedBalance(address account)\\n        external\\n        view\\n        override\\n        returns (LockedBalance memory)\\n    {\\n        return locked[account];\\n    }\\n\\n    function balanceOfAtTimestamp(address account, uint256 timestamp)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _balanceOfAtTimestamp(account, timestamp);\\n    }\\n\\n    function totalSupplyAtTimestamp(uint256 timestamp) external view returns (uint256) {\\n        return _totalSupplyAtTimestamp(timestamp);\\n    }\\n\\n    function createLock(uint256 amount, uint256 unlockTime) external nonReentrant whenNotPaused {\\n        _assertNotContract();\\n        require(\\n            unlockTime + 1 weeks == _endOfWeek(unlockTime),\\n            \\\"Unlock time must be end of a week\\\"\\n        );\\n\\n        LockedBalance memory lockedBalance = locked[msg.sender];\\n\\n        require(amount > 0, \\\"Zero value\\\");\\n        require(lockedBalance.amount == 0, \\\"Withdraw old tokens first\\\");\\n        require(unlockTime > block.timestamp, \\\"Can only lock until time in the future\\\");\\n        require(\\n            unlockTime <= block.timestamp + maxTimeAllowed,\\n            \\\"Voting lock cannot exceed max lock time\\\"\\n        );\\n\\n        _checkpoint(lockedBalance.amount, lockedBalance.unlockTime, amount, unlockTime);\\n        scheduledUnlock[unlockTime] = scheduledUnlock[unlockTime].add(amount);\\n        locked[msg.sender].unlockTime = unlockTime;\\n        locked[msg.sender].amount = amount;\\n\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        if (callback != address(0)) {\\n            IVotingEscrowCallback(callback).syncWithVotingEscrow(msg.sender);\\n        }\\n\\n        emit LockCreated(msg.sender, amount, unlockTime);\\n    }\\n\\n    function increaseAmount(address account, uint256 amount) external nonReentrant whenNotPaused {\\n        LockedBalance memory lockedBalance = locked[account];\\n\\n        require(amount > 0, \\\"Zero value\\\");\\n        require(lockedBalance.unlockTime > block.timestamp, \\\"Cannot add to expired lock\\\");\\n\\n        uint256 newAmount = lockedBalance.amount.add(amount);\\n        _checkpoint(\\n            lockedBalance.amount,\\n            lockedBalance.unlockTime,\\n            newAmount,\\n            lockedBalance.unlockTime\\n        );\\n        scheduledUnlock[lockedBalance.unlockTime] = scheduledUnlock[lockedBalance.unlockTime].add(\\n            amount\\n        );\\n        locked[account].amount = newAmount;\\n\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        if (callback != address(0)) {\\n            IVotingEscrowCallback(callback).syncWithVotingEscrow(msg.sender);\\n        }\\n\\n        emit AmountIncreased(account, amount);\\n    }\\n\\n    function increaseUnlockTime(uint256 unlockTime) external nonReentrant whenNotPaused {\\n        require(\\n            unlockTime + 1 weeks == _endOfWeek(unlockTime),\\n            \\\"Unlock time must be end of a week\\\"\\n        );\\n        LockedBalance memory lockedBalance = locked[msg.sender];\\n\\n        require(lockedBalance.unlockTime > block.timestamp, \\\"Lock expired\\\");\\n        require(unlockTime > lockedBalance.unlockTime, \\\"Can only increase lock duration\\\");\\n        require(\\n            unlockTime <= block.timestamp + maxTimeAllowed,\\n            \\\"Voting lock cannot exceed max lock time\\\"\\n        );\\n\\n        _checkpoint(\\n            lockedBalance.amount,\\n            lockedBalance.unlockTime,\\n            lockedBalance.amount,\\n            unlockTime\\n        );\\n        scheduledUnlock[lockedBalance.unlockTime] = scheduledUnlock[lockedBalance.unlockTime].sub(\\n            lockedBalance.amount\\n        );\\n        scheduledUnlock[unlockTime] = scheduledUnlock[unlockTime].add(lockedBalance.amount);\\n        locked[msg.sender].unlockTime = unlockTime;\\n\\n        if (callback != address(0)) {\\n            IVotingEscrowCallback(callback).syncWithVotingEscrow(msg.sender);\\n        }\\n\\n        emit UnlockTimeIncreased(msg.sender, unlockTime);\\n    }\\n\\n    function withdraw() external nonReentrant {\\n        LockedBalance memory lockedBalance = locked[msg.sender];\\n        require(block.timestamp >= lockedBalance.unlockTime, \\\"The lock is not expired\\\");\\n        uint256 amount = uint256(lockedBalance.amount);\\n\\n        lockedBalance.unlockTime = 0;\\n        lockedBalance.amount = 0;\\n        locked[msg.sender] = lockedBalance;\\n\\n        IERC20(token).safeTransfer(msg.sender, amount);\\n\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function updateAddressWhitelist(address newWhitelist) external onlyOwner {\\n        require(\\n            newWhitelist == address(0) || Address.isContract(newWhitelist),\\n            \\\"Must be null or a contract\\\"\\n        );\\n        addressWhitelist = newWhitelist;\\n    }\\n\\n    function updateCallback(address newCallback) external onlyOwner {\\n        require(\\n            newCallback == address(0) || Address.isContract(newCallback),\\n            \\\"Must be null or a contract\\\"\\n        );\\n        callback = newCallback;\\n    }\\n\\n    function _assertNotContract() private view {\\n        if (msg.sender != tx.origin) {\\n            if (\\n                addressWhitelist != address(0) &&\\n                IAddressWhitelist(addressWhitelist).check(msg.sender)\\n            ) {\\n                return;\\n            }\\n            revert(\\\"Smart contract depositors not allowed\\\");\\n        }\\n    }\\n\\n    function _balanceOfAtTimestamp(address account, uint256 timestamp)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        require(timestamp >= block.timestamp, \\\"Must be current or future time\\\");\\n        LockedBalance memory lockedBalance = locked[account];\\n        if (timestamp > lockedBalance.unlockTime) {\\n            return 0;\\n        }\\n        return (lockedBalance.amount.mul(lockedBalance.unlockTime - timestamp)) / maxTime;\\n    }\\n\\n    function _totalSupplyAtTimestamp(uint256 timestamp) private view returns (uint256) {\\n        uint256 weekCursor = _endOfWeek(timestamp);\\n        uint256 total = 0;\\n        for (; weekCursor <= timestamp + maxTime; weekCursor += 1 weeks) {\\n            total = total.add((scheduledUnlock[weekCursor].mul(weekCursor - timestamp)) / maxTime);\\n        }\\n        return total;\\n    }\\n\\n    /// @dev Pre-conditions:\\n    ///\\n    ///      - `newAmount > 0`\\n    ///      - `newUnlockTime > block.timestamp`\\n    ///      - `newUnlockTime + 1 weeks == _endOfWeek(newUnlockTime)`, i.e. aligned to a trading week\\n    ///\\n    ///      The latter two conditions gaurantee that `newUnlockTime` is no smaller than the local\\n    ///      variable `nextWeek` in the function.\\n    function _checkpoint(\\n        uint256 oldAmount,\\n        uint256 oldUnlockTime,\\n        uint256 newAmount,\\n        uint256 newUnlockTime\\n    ) private {\\n        // Update veCHESS supply at the beginning of each week since the last checkpoint.\\n        uint256 weekCursor = checkpointWeek;\\n        uint256 nextWeek = _endOfWeek(block.timestamp);\\n        uint256 currentWeek = nextWeek - 1 weeks;\\n        uint256 newTotalLocked = totalLocked;\\n        uint256 newNextWeekSupply = nextWeekSupply;\\n        if (weekCursor < currentWeek) {\\n            for (uint256 w = weekCursor + 1 weeks; w <= currentWeek; w += 1 weeks) {\\n                veSupplyPerWeek[w] = newNextWeekSupply;\\n                // Remove Chess unlocked at the beginning of this week from total locked amount.\\n                newTotalLocked = newTotalLocked.sub(scheduledUnlock[w]);\\n                // Calculate supply at the end of the next week.\\n                newNextWeekSupply = newNextWeekSupply.sub(newTotalLocked.mul(1 weeks) / maxTime);\\n            }\\n            checkpointWeek = currentWeek;\\n        }\\n\\n        // Remove the old schedule if there is one\\n        if (oldAmount > 0 && oldUnlockTime >= nextWeek) {\\n            newTotalLocked = newTotalLocked.sub(oldAmount);\\n            newNextWeekSupply = newNextWeekSupply.sub(\\n                oldAmount.mul(oldUnlockTime - nextWeek) / maxTime\\n            );\\n        }\\n\\n        totalLocked = newTotalLocked.add(newAmount);\\n        // Round up on division when added to the total supply, so that the total supply is never\\n        // smaller than the sum of all accounts' veCHESS balance.\\n        nextWeekSupply = newNextWeekSupply.add(\\n            newAmount.mul(newUnlockTime - nextWeek).add(maxTime - 1) / maxTime\\n        );\\n    }\\n\\n    function updateMaxTimeAllowed(uint256 newMaxTimeAllowed) external onlyOwner {\\n        require(newMaxTimeAllowed <= maxTime, \\\"Cannot exceed max time\\\");\\n        require(newMaxTimeAllowed > maxTimeAllowed, \\\"Cannot shorten max time allowed\\\");\\n        maxTimeAllowed = newMaxTimeAllowed;\\n    }\\n\\n    /// @notice Recalculate `nextWeekSupply` from scratch. This function eliminates accumulated\\n    ///         rounding errors in `nextWeekSupply`, which is incrementally updated in\\n    ///         `createLock`, `increaseAmount` and `increaseUnlockTime`. It is almost\\n    ///         never required.\\n    /// @dev Search \\\"rounding error\\\" in test cases for details about the rounding errors.\\n    function calibrateSupply() external {\\n        uint256 nextWeek = checkpointWeek + 1 weeks;\\n        nextWeekSupply = _totalSupplyAtTimestamp(nextWeek);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/CoreUtility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nabstract contract CoreUtility {\\n    using SafeMath for uint256;\\n\\n    /// @dev UTC time of a day when the fund settles.\\n    uint256 internal constant SETTLEMENT_TIME = 14 hours;\\n\\n    /// @dev Return end timestamp of the trading week containing a given timestamp.\\n    ///\\n    ///      A trading week starts at UTC time `SETTLEMENT_TIME` on a Thursday (inclusive)\\n    ///      and ends at the same time of the next Thursday (exclusive).\\n    /// @param timestamp The given timestamp\\n    /// @return End timestamp of the trading week.\\n    function _endOfWeek(uint256 timestamp) internal pure returns (uint256) {\\n        return ((timestamp.add(1 weeks) - SETTLEMENT_TIME) / 1 weeks) * 1 weeks + SETTLEMENT_TIME;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ManagedPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract of an emergency stop mechanism that can be triggered by an authorized account.\\n *\\n * This module is modified based on Pausable in OpenZeppelin v3.3.0, adding public functions to\\n * pause, unpause and manage the pauser role. It is also designed to be used by upgradable\\n * contracts, like PausableUpgradable but with compact storage slots and no dependencies.\\n */\\nabstract contract ManagedPausable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    event PauserRoleTransferred(address indexed previousPauser, address indexed newPauser);\\n\\n    uint256 private constant FALSE = 0;\\n    uint256 private constant TRUE = 1;\\n\\n    uint256 private _initialized;\\n\\n    uint256 private _paused;\\n\\n    address private _pauser;\\n\\n    function _initializeManagedPausable(address pauser_) internal {\\n        require(_initialized == FALSE);\\n        _initialized = TRUE;\\n        _paused = FALSE;\\n        _pauser = pauser_;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused != FALSE;\\n    }\\n\\n    function pauser() public view returns (address) {\\n        return _pauser;\\n    }\\n\\n    function renouncePauserRole() external onlyPauser {\\n        emit PauserRoleTransferred(_pauser, address(0));\\n        _pauser = address(0);\\n    }\\n\\n    function transferPauserRole(address newPauser) external onlyPauser {\\n        require(newPauser != address(0));\\n        emit PauserRoleTransferred(_pauser, newPauser);\\n        _pauser = newPauser;\\n    }\\n\\n    modifier onlyPauser() {\\n        require(_pauser == msg.sender, \\\"Pausable: only pauser\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(_paused == FALSE, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused != FALSE, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external onlyPauser whenNotPaused {\\n        _paused = TRUE;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external onlyPauser whenPaused {\\n        _paused = FALSE;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IVotingEscrow {\\n    struct LockedBalance {\\n        uint256 amount;\\n        uint256 unlockTime;\\n    }\\n\\n    function token() external view returns (address);\\n\\n    function maxTime() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOfAtTimestamp(address account, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTimestampDropBelow(address account, uint256 threshold)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLockedBalance(address account) external view returns (LockedBalance memory);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ProxyUtility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\nabstract contract ProxyUtility {\\n    /// @dev Storage slot with the admin of the contract.\\n    bytes32 private constant _ADMIN_SLOT = bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1);\\n\\n    /// @dev Revert if the proxy admin is not the caller\\n    modifier onlyProxyAdmin() {\\n        bytes32 slot = _ADMIN_SLOT;\\n        address proxyAdmin;\\n        assembly {\\n            proxyAdmin := sload(slot)\\n        }\\n        require(msg.sender == proxyAdmin, \\\"Only proxy admin\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"batchClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"wrappedContracts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"batchClaimRewardsAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"batchSyncWithVotingEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BatchOperationHelper", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}