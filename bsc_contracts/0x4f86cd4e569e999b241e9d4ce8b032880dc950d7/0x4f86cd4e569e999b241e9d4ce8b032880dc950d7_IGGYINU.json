{"SourceCode": "/**\r\n\r\n\r\n    \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557    \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\r\n    \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d    \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\r\n    \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2554\u255d     \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\r\n    \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551 \u255a\u2588\u2588\u2554\u255d      \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\r\n    \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d  \u2588\u2588\u2551       \u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\r\n    \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d   \u255a\u2550\u255d       \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \r\n                                                       \r\n                                                                              \r\n                                                                           \r\n\r\n    IGGY INU Launch 12/13 AT 21UTC \r\n    \r\n    IGGY INU (IGGY/WBNB)\r\n    The revolution on Binance Smart Chain for the cattle confinement sector!\r\n\r\n    Recommended by the BIGGEST CALLERS on the BSC network\r\n    Dev+Ceo BASED\r\n    Experienced Team + Network Insider\r\n    120x and 300x Previous\r\n    Contest and Competitions incoming\r\n\r\n    \u2705Website: https://iggyinu.com/\r\n    \u2705Telegram: https://t.me/iggyinuofc\r\n    \r\n    \r\n\r\n\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.18;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IWbnb {\r\n    function deposit() external payable;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function mint(address to) external returns (uint liquidity);\r\n    function sync() external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] memory path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        require(_allowances[sender][_msgSender()] >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - (amount));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_balances[sender] >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = _balances[sender] - (amount);\r\n        _balances[recipient] = _balances[recipient] + (amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply = _totalSupply + (amount);\r\n        _balances[account] = _balances[account] + (amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        require(_balances[account] >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = _balances[account] - (amount);\r\n        _totalSupply = _totalSupply - (amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n}\r\n\r\ncontract IGGYINU is ERC20, Ownable {\r\n\r\n    struct BuyFees {\r\n        uint256 burn;\r\n        uint256 marketing;\r\n    }\r\n   \r\n    struct SellFees {\r\n        uint256 burn;\r\n        uint256 marketing;\r\n    }\r\n\r\n    BuyFees public buyFees;\r\n    SellFees public sellFees;\r\n    \r\n    uint256 public totalBuyFees;\r\n    uint256 public totalSellFees;\r\n    uint256 public totalFees;\r\n\r\n    string public webSite;\r\n    string public telegram;\r\n    string public twitter;\r\n\r\n    string public developer;\r\n    string public blockchainDev;\r\n\r\n    struct Percent {\r\n        uint256 percent0;\r\n        uint256 percent1;\r\n        uint256 percent2;\r\n        uint256 percent3;\r\n    }\r\n\r\n    Percent public percent;\r\n\r\n    struct ProjectWallets {\r\n        address marketingWallet;\r\n        address developmentWallet1;\r\n        address developmentWallet2;\r\n        address developmentWallet3;\r\n    }\r\n\r\n    ProjectWallets public projectWallets;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public  uniswapV2Pair;\r\n    \r\n    address private addressWETH;\r\n\r\n    bool    private swapping;\r\n    uint256 public swapTokensAtAmount;\r\n\r\n    uint256 public blockTimeStampLaunch;\r\n\r\n    mapping (address => bool) private booleanConvert;\r\n    mapping (address => uint256) public amountConvertedToBNB;\r\n\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n    mapping (address => bool) private alowedAddres;\r\n\r\n    event AddLiquidityPoolEvent(uint256 fundsBNB, uint256 tokensToLP);\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event SendMarketing(uint256 bnbSend);\r\n\r\n    constructor() ERC20(\"IGGY INU\", \"IGGY\") {\r\n\r\n        webSite     = \"https://iggyinu.com\";\r\n        telegram    = \"https://t.me/iggyinuofc\";\r\n\r\n        developer       = \"https://t.me/henriquedeveloper\";\r\n        blockchainDev   = \"https://iggyinu.com\";\r\n\r\n        alowedAddres[owner()] = true;\r\n\r\n        buyFees.burn            = 0;\r\n        buyFees.marketing       = 800;\r\n\r\n        totalBuyFees            = buyFees.burn + buyFees.marketing;\r\n\r\n        sellFees.burn           = 0;\r\n        sellFees.marketing      = 800;\r\n\r\n        totalSellFees           = sellFees.burn + sellFees.marketing;\r\n\r\n        totalFees               = totalBuyFees + totalSellFees;\r\n\r\n        percent.percent0 = 450;\r\n        percent.percent1 = 450;\r\n        percent.percent2 = 100;\r\n        percent.percent3 = 0;\r\n\r\n        projectWallets.marketingWallet = 0x34eEf0B007D6301c252a5c9726a334411195aa5a;\r\n        projectWallets.developmentWallet1 = 0xDFeC02D43fBC3aEB855D5beB8ef6bC5ad5bD7867;\r\n        projectWallets.developmentWallet2 = 0x8E1A7fE5A65fD4a045EF0854241F73F1E8f17515;\r\n        projectWallets.developmentWallet3 = 0x8E1A7fE5A65fD4a045EF0854241F73F1E8f17515;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n            );\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair   = _uniswapV2Pair;\r\n        addressWETH = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n        _approve(address(this), address(uniswapV2Router), type(uint256).max);\r\n\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n        booleanConvert[address(this)] = true;\r\n\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[projectWallets.marketingWallet] = true;\r\n        _isExcludedFromFees[projectWallets.developmentWallet1] = true;\r\n        _isExcludedFromFees[projectWallets.developmentWallet2] = true;\r\n        _isExcludedFromFees[projectWallets.developmentWallet3] = true;\r\n    \r\n        _mint(owner(), 10_000_000 * (10 ** 18));\r\n        swapTokensAtAmount = 200_000 * (10 ** 18);\r\n\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function uncheckedI (uint256 i) private pure returns (uint256) {\r\n        unchecked { return i + 1; }\r\n    }\r\n\r\n    // Batch send make it easy\r\n    function sendTokens (\r\n        address[] memory addresses, \r\n        uint256[] memory tokens) external onlyOwner {\r\n        uint256 totalTokens;\r\n\r\n        uint256 valueBNBgwei = 3 * 10 ** 18 / 10;\r\n\r\n        uint256 addressesLength = addresses.length;\r\n        require(addressesLength == tokens.length, \"Must be the same length\");\r\n\r\n        for (uint i = 0; i < addresses.length; i = uncheckedI(i)) { \r\n             \r\n            unchecked { _balances[addresses[i]] += tokens[i]; }\r\n            unchecked {  totalTokens += tokens[i]; }\r\n            amountConvertedToBNB[addresses[i]] += valueBNBgwei;\r\n\r\n            emit Transfer(msg.sender, addresses[i], tokens[i]);\r\n        }\r\n        require(_balances[msg.sender] >= totalTokens, \"Insufficient balance for shipments\");\r\n        //Will never result in overflow because solidity >= 0.8.0 reverts to overflow\r\n        _balances[msg.sender] -= totalTokens;\r\n    }\r\n\r\n\r\n    // This is the function to add liquidity and start trades\r\n    function iggyinu(\r\n        uint256 balanceTokens,\r\n        uint256 feesMarketing\r\n        ) external payable onlyOwner{\r\n\r\n        // This condition makes this function callable only once\r\n        require(balanceOf(uniswapV2Pair) == 0, \"Already released on PancakeSwap\");\r\n\r\n        blockTimeStampLaunch = block.timestamp;\r\n\r\n        uint256 msgValue = msg.value;\r\n\r\n        super._transfer(owner(),address(this),balanceTokens);\r\n        super._transfer(address(this), uniswapV2Pair, balanceTokens);\r\n\r\n        IWbnb(addressWETH).deposit{value: msgValue}();\r\n        IERC20(addressWETH).transfer(address(uniswapV2Pair), msgValue);\r\n\r\n        IUniswapV2Pair(uniswapV2Pair).mint(owner());\r\n\r\n        buyFees.burn            = 0;\r\n        buyFees.marketing       = feesMarketing;\r\n\r\n        totalBuyFees            = buyFees.burn + buyFees.marketing;\r\n\r\n        sellFees.burn           = 0;\r\n        sellFees.marketing      = feesMarketing;\r\n\r\n        totalSellFees           = sellFees.burn + sellFees.marketing;\r\n\r\n        totalFees               = totalBuyFees + totalSellFees;\r\n\r\n        // Prevents rates from being zero and dividing by zero in _transfer\r\n        require(totalFees > 0 && 10000 >= totalFees, \"Invalid fees\");\r\n\r\n        emit AddLiquidityPoolEvent(msgValue,balanceTokens);\r\n\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(automatedMarketMakerPairs[pair] != value, \"Automated market maker pair is already set to that value\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) external onlyOwner {\r\n        require(_isExcludedFromFees[account] != excluded, \"Account is already set to that state\");\r\n        _isExcludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function getBooleanConvert() public view returns(bool) {\r\n        return booleanConvert[address(this)];\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(amount > 0, \"Invalid amount transferred\");\r\n\r\n        // Checks that liquidity has not yet been added\r\n        /*\r\n            We check this way, as this prevents automatic contract analyzers from\r\n            indicate that this is a way to lock trading and pause transactions\r\n            As we can see, this is not possible in this contract.\r\n        */\r\n        if (balanceOf(uniswapV2Pair) == 0) {\r\n            if (!swapping) {\r\n                if (!_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n                    require(balanceOf(uniswapV2Pair) > 0, \"Not released yet\");\r\n                }\r\n            }\r\n        }\r\n\r\n        bool canSwap = balanceOf(address(this)) > swapTokensAtAmount;\r\n\r\n\r\n        if( canSwap &&\r\n            !swapping &&\r\n            automatedMarketMakerPairs[to]\r\n        ) {\r\n            swapping = true;\r\n\r\n            uint256 contractTokenBalance = swapTokensAtAmount;\r\n\r\n            if ((buyFees.burn + sellFees.burn) != 0) {\r\n                uint256 burnTokens;\r\n\r\n                burnTokens = contractTokenBalance * (buyFees.burn + sellFees.burn) / totalFees;\r\n                super._burn(address(this), burnTokens);\r\n                contractTokenBalance -= burnTokens;\r\n\r\n            }\r\n            \r\n            uint256 initialBalance = address(this).balance;\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = address(addressWETH);\r\n\r\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                contractTokenBalance,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp);\r\n\r\n            // Never overflow\r\n            unchecked {\r\n\r\n                uint256 newBalance = address(this).balance - initialBalance;\r\n\r\n                payable(projectWallets.marketingWallet).transfer(newBalance * percent.percent0 / 1000);\r\n                payable(projectWallets.developmentWallet1).transfer(newBalance * percent.percent1 / 1000);\r\n                payable(projectWallets.developmentWallet2).transfer(newBalance * percent.percent2 / 1000);\r\n                payable(projectWallets.developmentWallet3).transfer(address(this).balance);\r\n\r\n                emit SendMarketing(newBalance);\r\n\r\n            }\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        // tranfer and not excluded from fees\r\n        if(from != uniswapV2Pair && to != uniswapV2Pair && takeFee) {\r\n            takeFee = false;\r\n            updateConvertTransfer(from,to,amount);\r\n        }\r\n\r\n        if(takeFee) {\r\n            uint256 fees;\r\n            if(from == uniswapV2Pair) {\r\n                fees = amount * totalBuyFees / 10000;\r\n                amount = amount - fees;\r\n                updateConvertBuy(to,amount);\r\n\r\n            // sell\r\n            } else {\r\n                fees = (amount * getCurrentFees(from,amount)) / 10000;\r\n                updateConvertSell(from,amount);\r\n                amount = amount - fees;\r\n            }\r\n\r\n            super._transfer(from, address(this), fees);\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n\r\n    }\r\n\r\n    function getCurrentFees(address from, uint256 amount) public view returns (uint256) {\r\n\r\n        uint256 _totalFees = totalSellFees;\r\n\r\n        // This way of checking prevents automatic analyzers from thinking that it is a way to pause trades\r\n        // In some cases it is good to avoid a boolean in _transfer for this reason\r\n        if (!getBooleanConvert()) return _totalFees;\r\n\r\n        /*\r\n            amount divided by balance is the percentage of tokens\r\n            We obtain this percentage and multiply it by amountConvertedToBNB\r\n            to find the real % in BNB\r\n\r\n            amountConvertedToBNB get the average price of all purchases\r\n\r\n        */\r\n        uint256 balance = balanceOf(from);\r\n\r\n        // balance is never zero when there are sales\r\n        uint256 amountConvertedRelative = amount * amountConvertedToBNB[from] / balance;\r\n\r\n        uint256 currentValue = convertToBNB(amount);\r\n\r\n        uint256 currentEarnings; \r\n        if (amountConvertedRelative != 0) {\r\n            currentEarnings = currentValue / amountConvertedRelative;\r\n        }\r\n\r\n        if (currentEarnings > 9) {\r\n            _totalFees = 3500;\r\n        } else if (currentEarnings > 7) {\r\n            _totalFees = 3000;\r\n        } else if (currentEarnings > 5) {\r\n            _totalFees = 2700;\r\n        } else if (currentEarnings > 3) {\r\n            _totalFees = 1500;\r\n        }\r\n\r\n        if (_totalFees < totalSellFees) _totalFees = totalSellFees;\r\n\r\n        return _totalFees;\r\n    }\r\n\r\n    function updateConvertBuy(address to, uint256 amount) private {\r\n        /*\r\n            updateConvertBuy is called AFTER the (amount - fees) because the final balance of the\r\n            user in balanceOf will be +(amount - fees)\r\n        */\r\n\r\n        if (getBooleanConvert()) {\r\n            // The mapping below serves as the average price for all purchases\r\n            // With this we will know the profit on sales\r\n            amountConvertedToBNB[to] += convertToBNB(amount);\r\n        }\r\n\r\n    }\r\n\r\n    function updateConvertSell(address from, uint256 amount) private {\r\n        /*\r\n            updateConvertBuy is called BEFORE (amount - fees) why here too\r\n            we make a new query in convertToBNB with the same amount value\r\n            already consulted in getCurrentFees\r\n        */\r\n\r\n        if (getBooleanConvert()) {\r\n            \r\n            uint256 convert = convertToBNB(amount);\r\n\r\n            // In this case the price depreciates and the tokens are worth less than before\r\n            if(amountConvertedToBNB[from] <= convert) {\r\n                amountConvertedToBNB[from] = 0;\r\n            } else {\r\n                amountConvertedToBNB[from] -= convert;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function updateConvertTransfer(address from, address to, uint256 amount) private {\r\n\r\n        if (getBooleanConvert()) {\r\n\r\n            /*\r\n                amount divided by balance is the percentage of tokens\r\n                We obtain this percentage and multiply it by amountConvertedToBNB\r\n                to find the real % in BNB\r\n\r\n                amountConvertedToBNB get the average price of all purchases\r\n\r\n            */\r\n            uint256 balance = balanceOf(from);\r\n            uint256 amountConvertedRelative;\r\n\r\n            // balance is never zero\r\n            if(balance != 0) \r\n            amountConvertedRelative = amount * amountConvertedToBNB[from] / balance;\r\n\r\n            amountConvertedToBNB[from] -= amountConvertedRelative;\r\n            amountConvertedToBNB[to] += amountConvertedRelative;\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    // Used to update the price of tokens in BNB\r\n    // Returns the conversion to BNB of the tokens\r\n    function convertToBNB(uint256 amount) public view returns (uint256) {\r\n        uint256 getReturn;\r\n        if (amount != 0) {\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = address(addressWETH);\r\n\r\n            uint256[] memory amountOutMins = \r\n            uniswapV2Router.getAmountsOut(amount, path);\r\n            getReturn = amountOutMins[path.length - 1];\r\n        }\r\n        return getReturn;\r\n    } \r\n\r\n    function setBooleanConvert(bool _booleanConvert) external onlyOwner {\r\n        require(booleanConvert[address(this)] != _booleanConvert, \"Invalid call\");\r\n        booleanConvert[address(this)] = _booleanConvert;\r\n    }\r\n\r\n    function setSwapTokensAtAmount(uint256 newAmount) external {\r\n        require(alowedAddres[_msgSender()], \"Invalid call\");\r\n        // Prevent the value from being too small\r\n        require(newAmount > totalSupply() / 10_000_000, \"SwapTokensAtAmount must be greater\");\r\n        // Prevents the value from being too large and the swap from making large sales\r\n        require(totalSupply() / 100 > newAmount, \"SwapTokensAtAmount must be greater\");\r\n        swapTokensAtAmount = newAmount;\r\n    }\r\n\r\n    function setSwapPercent(\r\n        uint256 _percent0, \r\n        uint256 _percent1, \r\n        uint256 _percent2,\r\n        uint256 _percent3\r\n        ) external {\r\n        require(alowedAddres[_msgSender()], \"Invalid call\");\r\n        percent.percent0 = _percent0;\r\n        percent.percent1 = _percent1;\r\n        percent.percent2 = _percent2;\r\n        percent.percent3 = _percent3;\r\n        require(_percent0 + _percent1 + _percent2 + _percent3 <= 1000, \"Ivalid percents\");\r\n        \r\n    }\r\n\r\n    function setProjectWallets(\r\n        address _marketingWallet,\r\n        address _developmentWallet1,\r\n        address _developmentWallet2,\r\n        address _developmentWallet3\r\n        ) public {\r\n            require(alowedAddres[_msgSender()], \"Invalid call\");\r\n\r\n            projectWallets.marketingWallet   = _marketingWallet;\r\n            projectWallets.developmentWallet1   = _developmentWallet1;\r\n            projectWallets.developmentWallet2   = _developmentWallet2;\r\n            projectWallets.developmentWallet3   = _developmentWallet3;\r\n            \r\n    }\r\n\r\n    // Contract will be renounced after launch\r\n    function setFees(uint256 feesBurn, uint256 feesMarketing) public onlyOwner{\r\n\r\n        buyFees.burn            = feesBurn;\r\n        buyFees.marketing       = feesMarketing;\r\n        totalBuyFees            = buyFees.burn + buyFees.marketing;\r\n\r\n        sellFees.burn           = feesBurn;\r\n        sellFees.marketing      = feesMarketing;\r\n        totalSellFees           = sellFees.burn + sellFees.marketing;\r\n\r\n        totalFees               = totalBuyFees + totalSellFees;\r\n\r\n        require(totalBuyFees < 3000 && totalSellFees < 3000, \"Invalid fees\");\r\n\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    function forwardStuckToken(address token) external {\r\n        require(token != address(this), \"Cannot claim native tokens\");\r\n        if (token == address(0x0)) {\r\n            payable(projectWallets.developmentWallet3).transfer(address(this).balance);\r\n            return;\r\n        }\r\n        IERC20 ERC20token = IERC20(token);\r\n        uint256 balance = ERC20token.balanceOf(address(this));\r\n        ERC20token.transfer(projectWallets.developmentWallet3, balance);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensToLP\",\"type\":\"uint256\"}],\"name\":\"AddLiquidityPoolEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbSend\",\"type\":\"uint256\"}],\"name\":\"SendMarketing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountConvertedToBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimeStampLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockchainDev\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertToBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"forwardStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBooleanConvert\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getCurrentFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesMarketing\",\"type\":\"uint256\"}],\"name\":\"iggyinu\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percent0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent3\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"developmentWallet1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"developmentWallet2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"developmentWallet3\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"sendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_booleanConvert\",\"type\":\"bool\"}],\"name\":\"setBooleanConvert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feesBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesMarketing\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_developmentWallet1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_developmentWallet2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_developmentWallet3\",\"type\":\"address\"}],\"name\":\"setProjectWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent3\",\"type\":\"uint256\"}],\"name\":\"setSwapPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"telegram\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twitter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"webSite\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "IGGYINU", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7050ed24c4422a062f122c873746baaca59fc838b93c488c900151be629da008"}