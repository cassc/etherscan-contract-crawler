{"SourceCode": "// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/TwoStageOwnable.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\nabstract contract TwoStageOwnable {\r\n    address public nominatedOwner;\r\n    address public owner;\r\n\r\n    event OwnerChanged(address newOwner);\r\n    event OwnerNominated(address nominatedOwner);\r\n\r\n    constructor(address _owner) internal {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n        emit OwnerChanged(owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n        _;\r\n    }\r\n}\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/UniStakingTokensStorage.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\nabstract contract UniStakingTokensStorage {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 private _rewardPool;\r\n    uint256 private _rewardSupply;\r\n    uint256 private _totalSupply;\r\n    IERC20 private _rewardsToken;\r\n    IERC20 private _stakingToken;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256) private _claimed;\r\n    mapping(address => uint256) private _rewards;\r\n\r\n    function rewardPool() public view returns (uint256) {\r\n        return _rewardPool;\r\n    }\r\n\r\n    function rewardSupply() public view returns (uint256) {\r\n        return _rewardSupply;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function rewardsToken() public view returns (IERC20) {\r\n        return _rewardsToken;\r\n    }\r\n\r\n    function stakingToken() public view returns (IERC20) {\r\n        return _stakingToken;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function claimedOf(address account) public view returns (uint256) {\r\n        return _claimed[account];\r\n    }\r\n\r\n    function rewardOf(address account) public view returns (uint256) {\r\n        return _rewards[account];\r\n    }\r\n\r\n    constructor(IERC20 rewardsToken_, IERC20 stakingToken_) public {\r\n        _rewardsToken = rewardsToken_;\r\n        _stakingToken = stakingToken_;\r\n    }\r\n\r\n    function _onMint(address account, uint256 amount) internal virtual {}\r\n    function _onBurn(address account, uint256 amount) internal virtual {}\r\n\r\n    function _stake(address account, uint256 amount) internal {\r\n        _stakingToken.safeTransferFrom(account, address(this), amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _onMint(account, amount);\r\n    }\r\n\r\n    function _unstake(address account, uint256 amount) internal {\r\n        _stakingToken.safeTransfer(account, amount);\r\n        _balances[account] = _balances[account].sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _onBurn(account, amount);\r\n    }\r\n\r\n    function _increaseRewardPool(address owner, uint256 amount) internal {\r\n        _rewardsToken.safeTransferFrom(owner, address(this), amount);\r\n        _rewardSupply = _rewardSupply.add(amount);\r\n        _rewardPool = _rewardPool.add(amount);\r\n    }\r\n\r\n    function _reduceRewardPool(address owner, uint256 amount) internal {\r\n        _rewardsToken.safeTransfer(owner, amount);\r\n        _rewardSupply = _rewardSupply.sub(amount);\r\n        _rewardPool = _rewardPool.sub(amount);\r\n    }\r\n\r\n    function _addReward(address account, uint256 amount) internal {\r\n        _rewards[account] = _rewards[account].add(amount);\r\n        _rewardPool = _rewardPool.sub(amount);\r\n    }\r\n\r\n    function _withdraw(address account, uint256 amount) internal {\r\n        _rewardsToken.safeTransfer(account, amount);\r\n        _claimed[account] = _claimed[account].sub(amount);\r\n    }\r\n\r\n    function _claim(address account, uint256 amount) internal {\r\n        _rewards[account] = _rewards[account].sub(amount);\r\n        _rewardSupply = _rewardSupply.sub(amount);\r\n        _claimed[account] = _claimed[account].add(amount);\r\n    }\r\n\r\n    function _transferBalance(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n    }\r\n}\r\n// File: contracts/AttoDecimal.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\nstruct AttoDecimal {\r\n    uint256 mantissa;\r\n}\r\n\r\nlibrary AttoDecimalLib {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal constant BASE = 10;\r\n    uint256 internal constant EXPONENTIATION = 18;\r\n    uint256 internal constant ONE_MANTISSA = BASE**EXPONENTIATION;\r\n\r\n    function convert(uint256 integer) internal pure returns (AttoDecimal memory) {\r\n        return AttoDecimal({mantissa: integer.mul(ONE_MANTISSA)});\r\n    }\r\n\r\n    function add(AttoDecimal memory a, uint256 b) internal pure returns (AttoDecimal memory) {\r\n        return  AttoDecimal({mantissa: a.mantissa.add(b.mul(ONE_MANTISSA))});\r\n    }\r\n\r\n    function add(AttoDecimal memory a, AttoDecimal memory b) internal pure returns (AttoDecimal memory) {\r\n        return AttoDecimal({mantissa: a.mantissa.add(b.mantissa)});\r\n    }\r\n\r\n    function sub(AttoDecimal memory a, AttoDecimal memory b) internal pure returns (AttoDecimal memory) {\r\n        return AttoDecimal({mantissa: a.mantissa.sub(b.mantissa)});\r\n    }\r\n\r\n    function mul(AttoDecimal memory a, uint256 b) internal pure returns (AttoDecimal memory) {\r\n        return AttoDecimal({mantissa: a.mantissa.mul(b)});\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (AttoDecimal memory) {\r\n        return AttoDecimal({mantissa: a.mul(ONE_MANTISSA).div(b)});\r\n    }\r\n\r\n    function div(AttoDecimal memory a, uint256 b) internal pure returns (AttoDecimal memory) {\r\n        return AttoDecimal({mantissa: a.mantissa.div(b)});\r\n    }\r\n\r\n    function div(AttoDecimal memory a, AttoDecimal memory b) internal pure returns (AttoDecimal memory) {\r\n        return AttoDecimal({mantissa: a.mantissa.mul(ONE_MANTISSA).div(b.mantissa)});\r\n    }\r\n\r\n    function idiv(uint256 a, AttoDecimal memory b) internal pure returns (uint256) {\r\n        return a.mul(ONE_MANTISSA).div(b.mantissa);\r\n    }\r\n\r\n    function idivCeil(uint256 a, AttoDecimal memory b) internal pure returns (uint256) {\r\n        uint256 dividend = a.mul(ONE_MANTISSA);\r\n        bool addOne = dividend.mod(b.mantissa) > 0;\r\n        return dividend.div(b.mantissa).add(addOne ? 1 : 0);\r\n    }\r\n\r\n    function ceil(AttoDecimal memory a) internal pure returns (uint256) {\r\n        uint256 integer = floor(a);\r\n        uint256 modulo = a.mantissa.mod(ONE_MANTISSA);\r\n        return integer.add(modulo >= ONE_MANTISSA.div(2) ? 1 : 0);\r\n    }\r\n\r\n    function floor(AttoDecimal memory a) internal pure returns (uint256) {\r\n        return a.mantissa.div(ONE_MANTISSA);\r\n    }\r\n\r\n    function lte(AttoDecimal memory a, AttoDecimal memory b) internal pure returns (bool) {\r\n        return a.mantissa <= b.mantissa;\r\n    }\r\n\r\n    function toTuple(AttoDecimal memory a)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 mantissa,\r\n            uint256 base,\r\n            uint256 exponentiation\r\n        )\r\n    {\r\n        return (a.mantissa, BASE, EXPONENTIATION);\r\n    }\r\n}\r\n// File: openzeppelin-solidity/contracts/math/Math.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/UniStaking.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract UniStaking is TwoStageOwnable, UniStakingTokensStorage {\r\n    using SafeMath for uint256;\r\n    using AttoDecimalLib for AttoDecimal;\r\n\r\n    struct PaidRate {\r\n        AttoDecimal rate;\r\n        bool active;\r\n    }\r\n\r\n    function getTimestamp() internal virtual view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    uint256 public constant MAX_DISTRIBUTION_DURATION = 90 days;\r\n\r\n    mapping(address => uint256) public rewardUnlockingTime;\r\n\r\n    uint256 private _lastUpdatedAt;\r\n    uint256 private _perSecondReward;\r\n    uint256 private _distributionEndsAt;\r\n    uint256 private _initialStrategyStartsAt;\r\n    AttoDecimal private _initialStrategyRewardPerToken;\r\n    AttoDecimal private _rewardPerToken;\r\n    mapping(address => PaidRate) private _paidRates;\r\n\r\n    function getRewardUnlockingTime() public virtual pure returns (uint256) {\r\n        return 8 days;\r\n    }\r\n\r\n    function lastUpdatedAt() public view returns (uint256) {\r\n        return _lastUpdatedAt;\r\n    }\r\n\r\n    function perSecondReward() public view returns (uint256) {\r\n        return _perSecondReward;\r\n    }\r\n\r\n    function distributionEndsAt() public view returns (uint256) {\r\n        return _distributionEndsAt;\r\n    }\r\n\r\n    function initialStrategyStartsAt() public view returns (uint256) {\r\n        return _initialStrategyStartsAt;\r\n    }\r\n\r\n    function getRewardPerToken() internal view returns (AttoDecimal memory) {\r\n        uint256 lastRewardLockedAt = Math.min(getTimestamp(), _distributionEndsAt.add(1));\r\n        if (lastRewardLockedAt <= _lastUpdatedAt) return _rewardPerToken;\r\n        return _getRewardPerToken(lastRewardLockedAt);\r\n    }\r\n\r\n    function _getRewardPerToken(uint256 forTimestamp) internal view returns (AttoDecimal memory) {\r\n        if (_initialStrategyStartsAt >= forTimestamp) return AttoDecimal(0);\r\n        uint256 totalSupply_ = totalSupply();\r\n        if (totalSupply_ == 0) return AttoDecimalLib.convert(0);\r\n        uint256 totalReward = forTimestamp\r\n            .sub(Math.max(_lastUpdatedAt, _initialStrategyStartsAt))\r\n            .mul(_perSecondReward);\r\n        AttoDecimal memory newRewardPerToken = AttoDecimalLib.div(totalReward, totalSupply_);\r\n        return _rewardPerToken.add(newRewardPerToken);\r\n    }\r\n\r\n    function rewardPerToken()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 mantissa,\r\n            uint256 base,\r\n            uint256 exponentiation\r\n        )\r\n    {\r\n        return (getRewardPerToken().mantissa, AttoDecimalLib.BASE, AttoDecimalLib.EXPONENTIATION);\r\n    }\r\n\r\n    function paidRateOf(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 mantissa,\r\n            uint256 base,\r\n            uint256 exponentiation\r\n        )\r\n    {\r\n        return (_paidRates[account].rate.mantissa, AttoDecimalLib.BASE, AttoDecimalLib.EXPONENTIATION);\r\n    }\r\n\r\n    function earnedOf(address account) public view returns (uint256) {\r\n        PaidRate memory userRate = _paidRates[account];\r\n        if (getTimestamp() <= _initialStrategyStartsAt || !userRate.active) return 0;\r\n        AttoDecimal memory rewardPerToken_ = getRewardPerToken();\r\n        AttoDecimal memory initRewardPerToken = _initialStrategyRewardPerToken.mantissa > 0\r\n            ? _initialStrategyRewardPerToken\r\n            : _getRewardPerToken(_initialStrategyStartsAt.add(1));\r\n        AttoDecimal memory rate = userRate.rate.lte((initRewardPerToken)) ? initRewardPerToken : userRate.rate;\r\n        uint256 balance = balanceOf(account);\r\n        if (balance == 0) return 0;\r\n        if (rewardPerToken_.lte(rate)) return 0;\r\n        AttoDecimal memory ratesDiff = rewardPerToken_.sub(rate);\r\n        return ratesDiff.mul(balance).floor();\r\n    }\r\n\r\n    event RewardStrategyChanged(uint256 perSecondReward, uint256 duration);\r\n    event InitialRewardStrategySetted(uint256 startsAt, uint256 perSecondReward, uint256 duration);\r\n    event Staked(address indexed account, uint256 amount);\r\n    event Unstaked(address indexed account, uint256 amount);\r\n    event Claimed(address indexed account, uint256 amount, uint256 rewardUnlockingTime);\r\n    event Withdrawed(address indexed account, uint256 amount);\r\n\r\n    constructor(\r\n        IERC20 rewardsToken_,\r\n        IERC20 stakingToken_,\r\n        address owner_\r\n    ) public TwoStageOwnable(owner_) UniStakingTokensStorage(rewardsToken_, stakingToken_) {\r\n    }\r\n\r\n    function stake(uint256 amount) public onlyPositiveAmount(amount) {\r\n        address sender = msg.sender;\r\n        _lockRewards(sender);\r\n        _stake(sender, amount);\r\n        emit Staked(sender, amount);\r\n    }\r\n\r\n    function unstake(uint256 amount) public onlyPositiveAmount(amount) {\r\n        address sender = msg.sender;\r\n        require(amount <= balanceOf(sender), \"Unstaking amount exceeds staked balance\");\r\n        _lockRewards(sender);\r\n        _unstake(sender, amount);\r\n        emit Unstaked(sender, amount);\r\n    }\r\n\r\n    function claim(uint256 amount) public onlyPositiveAmount(amount) {\r\n        address sender = msg.sender;\r\n        _lockRewards(sender);\r\n        require(amount <= rewardOf(sender), \"Claiming amount exceeds received rewards\");\r\n        uint256 rewardUnlockingTime_ = getTimestamp().add(getRewardUnlockingTime());\r\n        rewardUnlockingTime[sender] = rewardUnlockingTime_;\r\n        _claim(sender, amount);\r\n        emit Claimed(sender, amount, rewardUnlockingTime_);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public onlyPositiveAmount(amount) {\r\n        address sender = msg.sender;\r\n        require(getTimestamp() >= rewardUnlockingTime[sender], \"Reward not unlocked yet\");\r\n        require(amount <= claimedOf(sender), \"Withdrawing amount exceeds claimed balance\");\r\n        _withdraw(sender, amount);\r\n        emit Withdrawed(sender, amount);\r\n    }\r\n\r\n    function setInitialRewardStrategy(\r\n        uint256 startsAt,\r\n        uint256 perSecondReward_,\r\n        uint256 duration\r\n    ) public onlyOwner returns (bool succeed) {\r\n        uint256 currentTimestamp = getTimestamp();\r\n        require(_initialStrategyStartsAt == 0, \"Initial reward strategy already setted\");\r\n        require(currentTimestamp < startsAt, \"Initial reward strategy starting timestamp less than current\");\r\n        _initialStrategyStartsAt = startsAt;\r\n        _setRewardStrategy(currentTimestamp, startsAt, perSecondReward_, duration);\r\n        emit InitialRewardStrategySetted(startsAt, perSecondReward_, duration);\r\n        return true;\r\n    }\r\n\r\n    function setRewardStrategy(uint256 perSecondReward_, uint256 duration) public onlyOwner returns (bool succeed) {\r\n        uint256 currentTimestamp = getTimestamp();\r\n        require(_initialStrategyStartsAt > 0, \"Set initial reward strategy first\");\r\n        require(currentTimestamp >= _initialStrategyStartsAt, \"Wait for initial reward strategy start\");\r\n        _setRewardStrategy(currentTimestamp, currentTimestamp, perSecondReward_, duration);\r\n        emit RewardStrategyChanged(perSecondReward_, duration);\r\n        return true;\r\n    }\r\n\r\n    function lockRewards() public {\r\n        _lockRewards(msg.sender);\r\n    }\r\n\r\n    function _moveStake(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        _lockRewards(from);\r\n        _lockRewards(to);\r\n        _transferBalance(from, to, amount);\r\n    }\r\n\r\n    function _lastRatesLockedAt(uint256 timestamp) private {\r\n        _rewardPerToken = _getRewardPerToken(timestamp);\r\n        _lastUpdatedAt = timestamp;\r\n    }\r\n\r\n    function _lockRates(uint256 timestamp) private {\r\n        uint256 totalSupply_ = totalSupply();\r\n        if (_initialStrategyStartsAt <= timestamp && _initialStrategyRewardPerToken.mantissa == 0 && totalSupply_ > 0)\r\n            _initialStrategyRewardPerToken = AttoDecimalLib.div(_perSecondReward, totalSupply_);\r\n        if (_perSecondReward > 0 && timestamp >= _distributionEndsAt) {\r\n            _lastRatesLockedAt(_distributionEndsAt);\r\n            _perSecondReward = 0;\r\n        }\r\n        _lastRatesLockedAt(timestamp);\r\n    }\r\n\r\n    function _lockRewards(address account) private {\r\n        uint256 currentTimestamp = getTimestamp();\r\n        _lockRates(currentTimestamp);\r\n        uint256 earned = earnedOf(account);\r\n        if (earned > 0) _addReward(account, earned);\r\n        _paidRates[account].rate = _rewardPerToken;\r\n        _paidRates[account].active = true;\r\n    }\r\n\r\n    function _setRewardStrategy(\r\n        uint256 currentTimestamp,\r\n        uint256 startsAt,\r\n        uint256 perSecondReward_,\r\n        uint256 duration\r\n    ) private {\r\n        require(duration > 0, \"Duration is zero\");\r\n        require(duration <= MAX_DISTRIBUTION_DURATION, \"Distribution duration too long\");\r\n        _lockRates(currentTimestamp);\r\n        uint256 nextDistributionRequiredPool = perSecondReward_.mul(duration);\r\n        uint256 notDistributedReward = _distributionEndsAt <= currentTimestamp\r\n            ? 0\r\n            : _distributionEndsAt.sub(currentTimestamp).mul(_perSecondReward);\r\n        if (nextDistributionRequiredPool > notDistributedReward) {\r\n            _increaseRewardPool(owner, nextDistributionRequiredPool.sub(notDistributedReward));\r\n        } else if (nextDistributionRequiredPool < notDistributedReward) {\r\n            _reduceRewardPool(owner, notDistributedReward.sub(nextDistributionRequiredPool));\r\n        }\r\n        _perSecondReward = perSecondReward_;\r\n        _distributionEndsAt = startsAt.add(duration);\r\n    }\r\n\r\n    modifier onlyPositiveAmount(uint256 amount) {\r\n        require(amount > 0, \"Amount is not positive\");\r\n        _;\r\n    }\r\n}\r\n// File: contracts/UniStakingSyntheticToken.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ncontract UniStakingSyntheticToken is UniStaking {\r\n    uint256 public decimals;\r\n    string public name;\r\n    string public symbol;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 decimals_,\r\n        IERC20 rewardsToken_,\r\n        IERC20 stakingToken_,\r\n        address owner_\r\n    ) public UniStaking(rewardsToken_, stakingToken_, owner_) {\r\n        name = name_;\r\n        symbol = symbol_;\r\n        decimals = decimals_;\r\n    }\r\n\r\n    function _onMint(address account, uint256 amount) internal override {\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _onBurn(address account, uint256 amount) internal override {\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external onlyPositiveAmount(amount) returns (bool) {\r\n        require(balanceOf(msg.sender) >= amount, \"Transfer amount exceeds balance\");\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external onlyPositiveAmount(amount) returns (bool) {\r\n        require(_allowances[sender][msg.sender] >= amount, \"Transfer amount exceeds allowance\");\r\n        require(balanceOf(sender) >= amount, \"Transfer amount exceeds balance\");\r\n        _transfer(sender, recipient, amount);\r\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        _moveStake(sender, recipient, amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals_\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardsToken_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardUnlockingTime\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"perSecondReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"InitialRewardStrategySetted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nominatedOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"perSecondReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardStrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_DISTRIBUTION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionEndsAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardUnlockingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialStrategyStartsAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"paidRateOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exponentiation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perSecondReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exponentiation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardUnlockingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perSecondReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setInitialRewardStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"succeed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perSecondReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setRewardStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"succeed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UniStakingSyntheticToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000b72a20c7b8bd666f80ac053b0f4de20a787080f500000000000000000000000066fe9c4e1260386483bf91cb7106e75ba5d91a60000000000000000000000000d8b9fe1e31c07c84e6bfa646c98b3f6bf319412200000000000000000000000000000000000000000000000000000000000000174d4c542d424e42204c50205374616b696e6720506f6f6c00000000000000000000000000000000000000000000000000000000000000000000000000000000117374616b65642d4d4c542d424e422d4c50000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://00e54b35d6d87643749b5111f485badd11c9c5ffaf9a53f569c97b45ca59405d"}