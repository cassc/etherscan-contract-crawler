{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/miner/Reto.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract Reto is Ownable, Pausable, ReentrancyGuard {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeMath for uint;\\n    IERC20 public TOKEN;\\n    uint private constant MINERS_TO_HATCH_1MINERS = 1080000;\\n    uint private constant PSN = 10000;\\n    uint private constant PSNH = 5000;\\n    uint public constant PERCENTS_DIVIDER = 10_000; // 100% = 10000, 10% = 1000, 1% = 100, 0.1% = 10, 0.01% = 1\\n    uint public constant MAX_WITHDRAW = 20000;\\n    // MUTIPLIER_BASE = 6000 = 60%\\n    uint public constant MUTIPLIER_BASE = 2_000;\\n    uint internal constant DEV_DEF_FEE = 3_000;\\n\\n    uint public constant REFERRER_PERCENTS_LENGTH = 1;\\n    uint internal constant REF_ARRAY_LENGTH = 4;\\n    uint[REFERRER_PERCENTS_LENGTH] public REFERRER_PERCENTS = [\\n        1000 //1 level\\n    ];\\n    uint public constant MIN_INVEST = 0.1 ether;\\n\\n    uint public marketMiners;\\n    uint private players;\\n    uint public flatFee;\\n    uint public constant MAX_FLAT_FEE = 0.0094 ether;    \\n\\n    struct User {\\n        uint invest;\\n        uint withdraw;\\n        uint reinvest;\\n        uint hatcheryMiners;\\n        uint claimedMiners;\\n        uint lastHatch;\\n        uint checkpoint;\\n        address referrals;\\n        uint[REFERRER_PERCENTS_LENGTH] referrer;\\n        uint bonus;\\n        uint amountBNBReferrer;\\n        uint amountMINERSReferrer;\\n        uint totalRefDeposits;\\n    }\\n\\n    uint public initDate;\\n\\n    mapping(address => User) public users;\\n    mapping(address => uint) public whiteList;\\n\\n    struct UserWithdrawData {\\n        address user;\\n        uint amount;\\n        uint[REFERRER_PERCENTS_LENGTH] referrer;\\n    }\\n\\n    mapping(address => UserWithdrawData) public userWithdrawData;\\n    mapping(uint => address) public userWithdrawDataIndex;\\n    uint public userWithdrawDataLength;\\n\\n    uint public totalInvested;\\n    uint public constant TIME_STEP = 1 days;\\n\\n    address public devWallet;\\n    address public mWallet;\\n    address public oWallet;\\n    address public sWallet;\\n    address public flatFeeWallet;\\n    address public defWAllet;\\n    address public whitelistReceiver;\\n\\n    uint internal constant DEV_FEE = 100;\\n    uint internal constant MWALLET_FEE = 100;\\n    uint internal constant SWALLET_FEE = 100;\\n    uint internal constant OWALLET_FEE = 300;\\n\\n    uint public constant FEE_REDUCTION_STEP = 15 * TIME_STEP;\\n    uint public whitelistPrice = 1_000 ether;\\n\\n    struct FeeStruct {\\n        address wallet;\\n        uint amount;\\n    }\\n\\n    EnumerableSet.AddressSet internal whiteListAdmin;\\n\\n    event TotalWithdraw(address indexed user, uint amount);\\n    event WhiteListSet(address indexed user, bool indexed status);\\n    \\n    constructor(address _dev, address _mWallet, address _whitelist, address _token) {\\n        TOKEN = IERC20(_token);\\n        devWallet = _dev;\\n        mWallet = _mWallet;\\n        whitelistReceiver = _whitelist;\\n        oWallet = 0xffa739da7eDFf167738FBB239DF4AD85C28E8a8B;\\n        sWallet = 0x3e046582E459E373D6b95fB9638c0478fE2C9F90;\\n        defWAllet = 0xA25a2D1d26c253a7Cc4F16328cAcD7e828E6F768;\\n        flatFeeWallet = 0x0fFe00e98fb513F51E01Bf62BFbE900A4fDc641D;\\n        marketMiners = 108000000000;\\n        flatFee = 0.0047 ether;        \\n        whiteListAdmin.add(devWallet);\\n        whiteListAdmin.add(mWallet);\\n        whiteListAdmin.add(oWallet);\\n        whiteListAdmin.add(defWAllet);\\n        whiteListAdmin.add(sWallet);\\n        _pause();\\n        //  _unpause();\\n        // initDate = block.timestamp;\\n    }\\n\\n    function setWhitelistAdmin(\\n        address[] memory adr,\\n        bool _add\\n    ) external onlyOwner {\\n        if (_add) {\\n            for (uint256 i = 0; i < adr.length; i++) {\\n                whiteListAdmin.add(adr[i]);\\n            }\\n        } else {\\n            for (uint256 i = 0; i < adr.length; i++) {\\n                whiteListAdmin.remove(adr[i]);\\n            }\\n        }\\n    }\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n        return whiteListAdmin.contains(account);\\n    }\\n\\n    function getWhitelistAdminis() external view returns (address[] memory) {\\n        return whiteListAdmin.values();\\n    }\\n\\n    modifier onlyWhitelistAdmin() {\\n        require(\\n            isWhitelistAdmin(msg.sender),\\n            \\\"WhitelistAdminRole: caller does not have the WhitelistAdmin role\\\"\\n        );\\n        _;\\n    }\\n\\n    function addToWhiteList(address adr) external onlyWhitelistAdmin {\\n        addWhiteList(adr);\\n    }\\n\\n    function setWhitelistPrice(uint _price) external onlyWhitelistAdmin {\\n        whitelistPrice = _price;\\n    }\\n\\n    function buyWhitelist() external payable nonReentrant whenNotPaused {\\n        TOKEN.transferFrom(msg.sender, whitelistReceiver, whitelistPrice);\\n        addWhiteList(msg.sender);\\n    }\\n\\n    function setWhitelist(\\n        address[] memory _whitelist,\\n        bool _value\\n    ) external onlyWhitelistAdmin {\\n        uint time;\\n\\n        if(_value) {\\n            time = block.timestamp;\\n        }\\n\\n        for (uint256 i = 0; i < _whitelist.length; i++) {\\n            whiteList[_whitelist[i]] = time;\\n            emit WhiteListSet(_whitelist[i], _value);\\n        }\\n    }\\n\\n    function addWhiteList(address adr) private {\\n        whiteList[adr] = block.timestamp;\\n        emit WhiteListSet(adr, true);\\n    }\\n\\n    function removeToWhiteList(address adr) external onlyWhitelistAdmin {\\n        delete whiteList[adr];\\n        emit WhiteListSet(adr, false);\\n    }\\n\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n        initDate = block.timestamp;\\n    }\\n\\n    function secondsFromInit() public view returns (uint) {\\n        if (initDate == 0) {\\n            return 0;\\n        }\\n        return block.timestamp.sub(initDate);\\n    }\\n\\n    function daysFromInit() external view returns (uint) {\\n        return secondsFromInit().div(TIME_STEP);\\n    }\\n\\n    modifier checkUser_() {\\n        require(checkUser(msg.sender), \\\"try again later 1\\\");\\n        _;\\n    }\\n\\n    modifier enoughFee() {\\n        require(msg.value >= flatFee, \\\"Flat fee\\\");\\n        _;\\n    }\\n\\n    function checkUser(address _user) public view returns (bool) {\\n        uint check = block.timestamp.sub(users[_user].checkpoint);\\n        if (check > TIME_STEP) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function getDateForSelling(address adr) external view returns (uint) {\\n        return SafeMath.add(users[adr].checkpoint, TIME_STEP);\\n    }\\n\\n    function reInvest() external payable checkUser_ nonReentrant whenNotPaused {\\n        calculateReinvest(true);\\n    }\\n\\n    function hatchMiners(uint minersUsed, User storage user) private {\\n        uint newMiners = SafeMath.div(minersUsed, MINERS_TO_HATCH_1MINERS);\\n        user.hatcheryMiners = SafeMath.add(user.hatcheryMiners, newMiners);\\n        delete user.claimedMiners;\\n        user.lastHatch = block.timestamp;\\n        user.checkpoint = block.timestamp;\\n        //boost market to nerf miners hoarding\\n        marketMiners = SafeMath.add(marketMiners, SafeMath.div(minersUsed, 5));\\n    }\\n\\n    function calculateMyMiners(\\n        address adr,\\n        bool isReinvest\\n    ) public view returns (uint hasMiners, uint minerValue, uint miners) {\\n        uint miners_ = getMyMiners(adr);\\n        uint hasMiners_ = miners_; // miners for reinvest\\n        uint minerValue_; // miner value for withdraw\\n        (uint multiplier, uint divider) = getMyBonus(isReinvest);\\n        minerValue_ = calculateMinerSell(\\n            SafeMath.div(SafeMath.mul(hasMiners_, multiplier), divider)\\n        );\\n        hasMiners_ -= SafeMath.div(SafeMath.mul(hasMiners_, multiplier), divider);\\n\\n        hasMiners = hasMiners_;\\n        minerValue = minerValue_;\\n        miners = calculateMinerSell(miners_); // miners total value\\n    }\\n\\n    function sell() external payable checkUser_ nonReentrant whenNotPaused {\\n        _payFee();\\n        (uint hasMiners, uint minerValue, ) = calculateMyMiners(msg.sender, false);\\n\\n        require(minerValue > 0, \\\"No miners to sell\\\");\\n        (uint fee, FeeStruct[REF_ARRAY_LENGTH] memory feeStruct) = withdrawFee(\\n            minerValue\\n        );\\n        require(SafeMath.sub(minerValue, fee) > 0, \\\"Amount don't allowed\\\");\\n\\n        User storage user = users[msg.sender];        \\n        uint newMiners = SafeMath.div(hasMiners, MINERS_TO_HATCH_1MINERS);\\n        user.hatcheryMiners = SafeMath.add(user.hatcheryMiners, newMiners);\\n        delete user.claimedMiners;\\n        user.lastHatch = block.timestamp;\\n        user.checkpoint = block.timestamp;\\n\\n        marketMiners = SafeMath.add(marketMiners, hasMiners);\\n        user.withdraw += minerValue;\\n        uint userWithdraw = minerValue;\\n        if (userWithdrawData[msg.sender].user == address(0)) {\\n            userWithdrawDataIndex[userWithdrawDataLength] = msg.sender;\\n            userWithdrawDataLength += 1;\\n            userWithdrawData[msg.sender].user = msg.sender;\\n        }\\n        userWithdrawData[msg.sender].amount += userWithdraw;\\n        userWithdrawData[msg.sender].referrer = user.referrer;\\n        payFees(feeStruct);\\n        transferHandler(payable(msg.sender), SafeMath.sub(minerValue, fee));\\n        emit TotalWithdraw(msg.sender, user.withdraw);\\n    }\\n\\n    function calculateReinvest(bool _withFee) private {\\n        (uint hasMiners, uint minerValue, ) = calculateMyMiners(msg.sender, true);        \\n        require(minerValue > 0, \\\"Amount don't allowed\\\");\\n        User storage user = users[msg.sender];\\n        uint newMiners = SafeMath.div(hasMiners, MINERS_TO_HATCH_1MINERS);\\n        user.hatcheryMiners = SafeMath.add(user.hatcheryMiners, newMiners);\\n        delete user.claimedMiners;\\n        user.lastHatch = block.timestamp;\\n        user.checkpoint = block.timestamp;\\n\\n        marketMiners = SafeMath.add(marketMiners, hasMiners);\\n        user.reinvest += minerValue;\\n        buyHandler(users[msg.sender].referrals, minerValue, _withFee);\\n    }\\n\\n    function minersRewards(address adr) external view returns (uint) {\\n        uint hasMiners = getMyMiners(adr);\\n        uint minerValue = calculateMinerSell(hasMiners);\\n        return minerValue;\\n    }\\n\\n    function referrerCommission(\\n        uint _amount,\\n        uint level\\n    ) private view returns (uint) {        \\n        return\\n            SafeMath.div(\\n                SafeMath.mul(_amount, REFERRER_PERCENTS[level]),\\n                PERCENTS_DIVIDER\\n            );\\n    }\\n\\n    function buy(\\n        address ref,\\n        uint _amount\\n    ) external payable nonReentrant whenNotPaused {\\n        // uint _amount = msg.value;\\n        require(_amount >= MIN_INVEST, \\\"Min amount\\\");\\n        TOKEN.transferFrom(msg.sender, address(this), _amount);\\n\\n        _payFee();\\n        // _amount = _amount.sub(flatFee);\\n\\n        buyHandler(ref, _amount, true);\\n    }\\n\\n    function buyHandler(address ref, uint investAmout, bool payFee) private {\\n        User storage user = users[msg.sender];\\n        if (user.referrals == address(0) && msg.sender != defWAllet) {\\n            if (\\n                ref == msg.sender ||\\n                users[ref].referrals == msg.sender\\n            ) {\\n                user.referrals = defWAllet;\\n            } else {\\n                user.referrals = ref;\\n            }\\n            if (user.referrals != msg.sender && user.referrals != address(0)) {\\n                address upline = user.referrals;\\n                address old = msg.sender;\\n                for (uint i = 0; i < REFERRER_PERCENTS_LENGTH; i++) {\\n                    if (\\n                        upline != address(0) &&\\n                        upline != old &&\\n                        users[upline].referrals != old\\n                    ) {\\n                        users[upline].referrer[i] += 1;\\n                        old = upline;\\n                        upline = users[upline].referrals;\\n                    } else break;\\n                }\\n            }\\n        }\\n\\n        uint minersBought = calculateMinerBuy(\\n            investAmout,\\n            SafeMath.sub(getBalance(), investAmout)\\n        );\\n\\n        (uint minersFee, ) = devFee(minersBought);\\n        minersBought = SafeMath.sub(minersBought, minersFee);\\n        if (payFee) {\\n            (, FeeStruct[REF_ARRAY_LENGTH] memory feeStruct) = devFee(\\n                investAmout\\n            );\\n            payFees(feeStruct);\\n        }\\n\\n        if (user.invest == 0) {\\n            user.checkpoint = block.timestamp;\\n            players = SafeMath.add(players, 1);\\n        }\\n        user.invest += investAmout;\\n        user.claimedMiners = SafeMath.add(user.claimedMiners, minersBought);\\n        hatchMiners(getMyMiners(msg.sender), user);\\n        payCommision(user, investAmout);\\n        totalInvested += investAmout;\\n    }\\n\\n    function payCommision(User storage user, uint investAmout) private {\\n        if (user.referrals != msg.sender && user.referrals != address(0)) {\\n            address upline = user.referrals;\\n            address old = msg.sender;\\n            if (upline == address(0)) {\\n                upline = defWAllet;\\n            }\\n            for (uint i = 0; i < REFERRER_PERCENTS_LENGTH; i++) {\\n                if (\\n                    (upline != address(0) &&\\n                        upline != old &&\\n                        users[upline].referrals != old) || upline == defWAllet\\n                ) {\\n                    uint amountReferrer = referrerCommission(investAmout, i);\\n                    users[upline].amountBNBReferrer = SafeMath.add(\\n                        users[upline].amountBNBReferrer,\\n                        amountReferrer\\n                    );\\n\\n                    users[upline].totalRefDeposits = SafeMath.add(\\n                        users[upline].totalRefDeposits,\\n                        investAmout\\n                    );                    \\n                    users[upline].bonus = users[upline].bonus.add(amountReferrer);\\n\\n                    upline = users[upline].referrals;\\n                    old = user.referrals;\\n                    if (upline == address(0)) {\\n                        upline = defWAllet;\\n                    }\\n                } else break;\\n            }\\n        }\\n    }\\n\\n    function calculateTrade(\\n        uint rt,\\n        uint rs,\\n        uint bs\\n    ) private pure returns (uint) {\\n        uint a = PSN.mul(bs);\\n        uint b = PSNH;\\n\\n        uint c = PSN.mul(rs);\\n        uint d = PSNH.mul(rt);\\n\\n        uint h = c.add(d).div(rt);\\n        return a.div(b.add(h));\\n    }\\n\\n    function calculateMinerSell(uint miners) private view returns (uint) {\\n        uint _cal = calculateTrade(miners, marketMiners, getBalance());\\n        return _cal;\\n    }\\n\\n    function calculateMinerBuy(\\n        uint eth,\\n        uint contractBalance\\n    ) public view returns (uint) {\\n        return calculateTrade(eth, contractBalance, marketMiners);\\n    }\\n\\n    function calculateMinerBuySimple(uint eth) external view returns (uint) {\\n        return calculateMinerBuy(eth, getBalance());\\n    }\\n\\n    function devFee(\\n        uint _amount\\n    )\\n        private\\n        view\\n        returns (uint _totalFee, FeeStruct[REF_ARRAY_LENGTH] memory _feeStruct)\\n    {\\n        uint dFee = SafeMath.div(\\n            SafeMath.mul(_amount, DEV_FEE),\\n            PERCENTS_DIVIDER\\n        );\\n        uint mFee = SafeMath.div(\\n            SafeMath.mul(_amount, MWALLET_FEE),\\n            PERCENTS_DIVIDER\\n        );\\n        uint oFee = SafeMath.div(\\n            SafeMath.mul(_amount, OWALLET_FEE),\\n            PERCENTS_DIVIDER\\n        );\\n        uint sFee = SafeMath.div(\\n            SafeMath.mul(_amount, SWALLET_FEE),\\n            PERCENTS_DIVIDER\\n        );\\n\\n        _feeStruct[0] = FeeStruct(devWallet, dFee);\\n        _feeStruct[1] = FeeStruct(mWallet, mFee);\\n        _feeStruct[2] = FeeStruct(oWallet, oFee);\\n        _feeStruct[3] = FeeStruct(sWallet, sFee);\\n\\n        _totalFee = SafeMath.add(dFee, mFee);\\n        _totalFee = SafeMath.add(_totalFee, oFee);\\n        _totalFee = SafeMath.add(_totalFee, sFee);\\n\\n        return (_totalFee, _feeStruct);\\n    }\\n\\n    function withdrawFee(\\n        uint _amount\\n    )\\n        private\\n        view\\n        returns (uint _totalFee, FeeStruct[REF_ARRAY_LENGTH] memory _feeStruct)\\n    {\\n        return devFee(_amount);\\n    }\\n\\n    function getBalance() public view returns (uint) {\\n        return TOKEN.balanceOf(address(this));        \\n    }\\n\\n    function getMyMinersE(address adr) external view returns (uint) {\\n        User memory user = users[adr];\\n        return user.hatcheryMiners;\\n    }\\n\\n    function getPlayers() external view returns (uint) {\\n        return players;\\n    }\\n\\n    function getMyMiners(address adr) public view returns (uint) {\\n        User memory user = users[adr];\\n        return SafeMath.add(user.claimedMiners, getMinersSinceLastHatch(adr));\\n    }\\n\\n    function getMinersSinceLastHatch(address adr) public view returns (uint) {\\n        User memory user = users[adr];\\n        uint secondsPassed = min(\\n            MINERS_TO_HATCH_1MINERS,\\n            SafeMath.sub(block.timestamp, user.lastHatch)\\n        );\\n        return SafeMath.mul(secondsPassed, user.hatcheryMiners);\\n    }\\n\\n    function min(uint a, uint b) private pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function getSellStars(\\n        address user_\\n    ) external view returns (uint minerValue) {\\n        uint hasMiners = getMyMiners(user_);\\n        minerValue = calculateMinerSell(hasMiners);\\n    }\\n\\n    function getPublicData()\\n        external\\n        view\\n        returns (uint _totalInvest, uint _balance)\\n    {\\n        _totalInvest = totalInvested;\\n        _balance = getBalance();\\n    }\\n\\n    function userData(\\n        address user_\\n    )\\n        external\\n        view\\n        returns (\\n            uint lastHatch_,\\n            uint rewards_,\\n            uint amountAvailableReinvest_,\\n            uint availableWithdraw_,\\n            uint minersMiners_,\\n            address referrals_,\\n            uint[REFERRER_PERCENTS_LENGTH] memory referrer,\\n            uint checkpoint,\\n            uint referrerBNB,\\n            uint referrerMINERS,\\n            uint totalRefDeposits            \\n        )\\n    {\\n        User memory user = users[user_];\\n        (, uint minerValue, uint miners) = calculateMyMiners(user_, false);\\n        (, amountAvailableReinvest_, ) = calculateMyMiners(user_, true);        \\n        lastHatch_ = user.lastHatch;\\n        referrals_ = user.referrals;\\n        rewards_ = miners;        \\n        availableWithdraw_ = minerValue;\\n        minersMiners_ = getMinersSinceLastHatch(user_);\\n        referrer = user.referrer;\\n        checkpoint = user.checkpoint;\\n        referrerBNB = user.amountBNBReferrer;\\n        referrerMINERS = user.amountMINERSReferrer;\\n        totalRefDeposits = user.totalRefDeposits;\\n        \\n    }\\n\\n    function payFees(FeeStruct[REF_ARRAY_LENGTH] memory _fees) internal {\\n        for (uint i = 0; i < _fees.length; i++) {\\n            if (_fees[i].amount > 0) {                \\n                transferHandler(payable(_fees[i].wallet), _fees[i].amount);\\n            }\\n        }\\n    }\\n\\n    function getDate() external view returns (uint) {\\n        return block.timestamp;\\n    }\\n\\n    function getMyBonus(\\n        bool isReinvest\\n    ) public view returns (uint multiplier, uint divider) {\\n        divider = PERCENTS_DIVIDER;\\n        multiplier = MUTIPLIER_BASE;\\n\\n        if (secondsFromInit() >= FEE_REDUCTION_STEP) {\\n            multiplier = divider;\\n        }\\n\\n        if (multiplier > divider || isReinvest) {\\n            multiplier = divider;\\n        }\\n    }\\n\\n    function transferHandler(address adr, uint amount) private {\\n        if (amount > getBalance()) {\\n            amount = getBalance();\\n        }\\n        uint _toDev = 0;\\n        if (adr == defWAllet) {\\n            _toDev = amount.mul(DEV_DEF_FEE).div(PERCENTS_DIVIDER);\\n            amount = amount.sub(_toDev);\\n        }\\n        TOKEN.transfer(adr, amount);        \\n        if (_toDev > 0) {\\n            TOKEN.transfer(devWallet, _toDev);            \\n        }\\n    }\\n\\n    function getUserWithdrawData()\\n        external\\n        view\\n        returns (UserWithdrawData[] memory)\\n    {\\n        UserWithdrawData[] memory result = new UserWithdrawData[](\\n            userWithdrawDataLength\\n        );\\n        for (uint i = 0; i < userWithdrawDataLength; i++) {\\n            result[i] = userWithdrawData[userWithdrawDataIndex[i]];\\n        }\\n        return result;\\n    }\\n\\n    function UserWithdrawDataRange(\\n        uint limit,\\n        uint offset\\n    ) external view returns (UserWithdrawData[] memory) {\\n        UserWithdrawData[] memory result = new UserWithdrawData[](limit);\\n        for (uint i = 0; i < limit; i++) {\\n            result[i] = userWithdrawData[userWithdrawDataIndex[i + offset]];\\n        }\\n        return result;\\n    }\\n\\n    function getInvestSumReinvest(address adr) public view returns (uint) {\\n        return users[adr].withdraw + users[adr].reinvest;\\n    }\\n\\n    function setFlatFee(uint256 _flatFee) external onlyOwner {\\n        require(_flatFee <= MAX_FLAT_FEE, \\\"Max flat fee\\\");\\n        flatFee = _flatFee;\\n    }\\n    \\n    function payBonus() payable checkUser_  nonReentrant whenNotPaused  external {\\n        User storage user = users[msg.sender];\\n        uint amount = user.bonus;\\n        uint _totalFee;\\n        FeeStruct[REF_ARRAY_LENGTH] memory feeStruct;\\n        _payFee();\\n        delete user.bonus;\\n        user.checkpoint = block.timestamp;\\n          (_totalFee,feeStruct) = devFee(amount);\\n            payFees(feeStruct);\\n            amount = amount.sub(_totalFee);        \\n        transferHandler(payable(msg.sender), amount);\\n\\n    }\\n    function _payFee() internal enoughFee {\\n        if (flatFee > 0) {            \\n            uint feeAmount = flatFee.div(3);\\n            payable(flatFeeWallet).transfer(feeAmount);\\n            payable(mWallet).transfer(feeAmount);\\n            payable(devWallet).transfer(address(this).balance);\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/miner/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n    return a / b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b <= a);\\n    return a - b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    c = a + b;\\n    assert(c >= a);\\n    return c;\\n  }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TotalWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"WhiteListSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_REDUCTION_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FLAT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_INVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MUTIPLIER_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRER_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRER_PERCENTS_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawDataRange\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[1]\",\"name\":\"referrer\",\"type\":\"uint256[1]\"}],\"internalType\":\"struct Reto.UserWithdrawData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWhitelist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateMinerBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateMinerBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isReinvest\",\"type\":\"bool\"}],\"name\":\"calculateMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hasMiners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minerValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miners\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daysFromInit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defWAllet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flatFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flatFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getDateForSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getInvestSumReinvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMinersSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isReinvest\",\"type\":\"bool\"}],\"name\":\"getMyBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divider\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyMinersE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalInvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getSellStars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minerValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserWithdrawData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[1]\",\"name\":\"referrer\",\"type\":\"uint256[1]\"}],\"internalType\":\"struct Reto.UserWithdrawData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistAdminis\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"minersRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payBonus\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reInvest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"removeToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsFromInit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_flatFee\",\"type\":\"uint256\"}],\"name\":\"setFlatFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelist\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"setWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setWhitelistPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastHatch_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAvailableReinvest_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableWithdraw_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minersMiners_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrals_\",\"type\":\"address\"},{\"internalType\":\"uint256[1]\",\"name\":\"referrer\",\"type\":\"uint256[1]\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerMINERS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefDeposits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWithdrawData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userWithdrawDataIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userWithdrawDataLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"invest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatcheryMiners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedMiners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrals\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBNBReferrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMINERSReferrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefDeposits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Reto", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f5e95aa63e81bf0c1879326b6954ab1ab521876c0000000000000000000000006f939365081e8f97b9e490bf3edadb62f2dec136000000000000000000000000535fac7d18debbe3f6b156d0518469f918454c8b00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}