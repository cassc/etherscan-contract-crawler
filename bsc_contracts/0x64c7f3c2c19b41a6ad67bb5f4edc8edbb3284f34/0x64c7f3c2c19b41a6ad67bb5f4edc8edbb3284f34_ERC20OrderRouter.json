{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20OrderRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport {ETH} from \\\"./constants/Tokens.sol\\\";\\nimport {IGelatoPineCore} from \\\"./interfaces/IGelatoPineCore.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract ERC20OrderRouter {\\n    IGelatoPineCore public immutable gelatoPineCore;\\n\\n    event DepositToken(\\n        bytes32 indexed key,\\n        address indexed caller,\\n        uint256 amount,\\n        address module,\\n        address inputToken,\\n        address indexed owner,\\n        address witness,\\n        bytes data,\\n        bytes32 secret\\n    );\\n\\n    constructor(IGelatoPineCore _gelatoPineCore) {\\n        gelatoPineCore = _gelatoPineCore;\\n    }\\n\\n    // solhint-disable max-line-length\\n    /** @dev To be backward compatible with old ERC20 Order submission\\n    * parameters are in format expected by subgraph:\\n    * https://github.com/gelatodigital/limit-orders-subgraph/blob/7614c138e462577475d240074000c60bad6b76cc/src/handlers/Order.ts#L58\\n    ERC20 transfer should have an extra data we use to identify a order.\\n    * A transfer with a order looks like:\\n    *\\n    * 0xa9059cbb\\n    * 000000000000000000000000c8b6046580622eb6037d5ef2ca74faf63dc93631\\n    * 0000000000000000000000000000000000000000000000000de0b6b3a7640000\\n    * 0000000000000000000000000000000000000000000000000000000000000060\\n    * 0000000000000000000000000000000000000000000000000000000000000120\\n    * 000000000000000000000000ef6c6b0bce4d2060efab0d16736c6ce7473deddc\\n    * 000000000000000000000000c7ad46e0b8a400bb3c915120d284aafba8fc4735\\n    * 0000000000000000000000005523f2fc0889a6d46ae686bcd8daa9658cf56496\\n    * 0000000000000000000000008153f16765f9124d754c432add5bd40f76f057b4\\n    * 00000000000000000000000000000000000000000000000000000000000000c0\\n    * 67656c61746f6e6574776f726b2020d83ddc09ea73fa863b164de440a270be31\\n    * 0000000000000000000000000000000000000000000000000000000000000060\\n    * 000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\n    * 00000000000000000000000000000000000000000000000004b1e20ebf83c000\\n    * 000000000000000000000000842A8Dea50478814e2bFAFF9E5A27DC0D1FdD37c\\n    *\\n    * The important part is 67656c61746f6e6574776f726b which is gelato's secret (gelatonetwork in hex)\\n    * We use that as the index to parse the input data:\\n    * - module = 5 * 32 bytes before secret index\\n    * - inputToken = ERC20 which emits the Transfer event\\n    * - owner = `from` parameter of the Transfer event\\n    * - witness = 2 * 32 bytes before secret index\\n    * - secret = 32 bytes from the secret index\\n    * - data = 2 * 32 bytes after secret index (64 or 96 bytes length). Contains:\\n    *   - outputToken =  2 * 32 bytes after secret index\\n    *   - minReturn =  3 * 32 bytes after secret index\\n    *   - handler =  4 * 32 bytes after secret index (optional)\\n    *\\n    */\\n    // solhint-disable function-max-lines\\n    function depositToken(\\n        uint256 _amount,\\n        address _module,\\n        address _inputToken,\\n        address payable _owner,\\n        address _witness,\\n        bytes calldata _data,\\n        bytes32 _secret\\n    ) external {\\n        require(\\n            _inputToken != ETH,\\n            \\\"ERC20OrderRouter.depositToken: ONLY_ERC20\\\"\\n        );\\n\\n        bytes32 key = gelatoPineCore.keyOf(\\n            _module,\\n            _inputToken,\\n            _owner,\\n            _witness,\\n            _data\\n        );\\n\\n        IERC20(_inputToken).transferFrom(\\n            msg.sender,\\n            gelatoPineCore.vaultOfOrder(\\n                _module,\\n                _inputToken,\\n                _owner,\\n                _witness,\\n                _data\\n            ),\\n            _amount\\n        );\\n\\n        emit DepositToken(\\n            key,\\n            msg.sender,\\n            _amount,\\n            _module,\\n            _inputToken,\\n            _owner,\\n            _witness,\\n            _data,\\n            _secret\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/constants/Tokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\"\r\n    },\r\n    \"contracts/interfaces/IGelatoPineCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\ninterface IGelatoPineCore {\\n    function vaultOfOrder(\\n        address _module,\\n        address _inputToken,\\n        address payable _owner,\\n        address _witness,\\n        bytes calldata _data\\n    ) external view returns (address);\\n\\n    function keyOf(\\n        address _module,\\n        address _inputToken,\\n        address payable _owner,\\n        address _witness,\\n        bytes calldata _data\\n    ) external pure returns (bytes32);\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IGelatoPineCore\",\"name\":\"_gelatoPineCore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"witness\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_witness\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_secret\",\"type\":\"bytes32\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelatoPineCore\",\"outputs\":[{\"internalType\":\"contract IGelatoPineCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ERC20OrderRouter", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000c30d3d66bc7c73a83fda929888c34dcb24fd599", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}