{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"add err\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"sub err\");\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(a == 0 || c / a == b, \"mul err\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, \"div 0 err\");\r\n    uint256 c = a / b;\r\n    require(a == b * c + a % b, \"div err\"); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ninterface ERC20Basic {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    // event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        // emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    // function renounceOwnership() public onlyOwner {\r\n    //     emit OwnershipTransferred(_owner, address(0));\r\n    //     _owner = address(0);\r\n    // }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    // function transferOwnership(address newOwner) public onlyOwner {\r\n    //     _transferOwnership(newOwner);\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    //  */\r\n    // function _transferOwnership(address newOwner) internal {\r\n    //     require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    //     emit OwnershipTransferred(_owner, newOwner);\r\n    //     _owner = newOwner;\r\n    // }\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WHT() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract TxRule is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n\r\n    uint256 periodUnit = 3600; // main\r\n    // uint256 periodUnit = 60; // test\r\n    uint256 periodMax = 48;\r\n    address public _buyBackAddress;\r\n    address public _teamAddress;\r\n    address public _whiteAddress;\r\n    address public _promoteMiningAddress;\r\n\r\n    mapping(address => bool) public txWhiteList;\r\n    mapping(address => bool) public contractWhiteList;\r\n    address public miningContractAddress = 0x0000000000000000000000000000000000000001;\r\n    bool public needGas = false; \r\n    bool public needSendRed = true;\r\n    uint256 public curLPAmount = 0;\r\n    uint256 public allTotalGas = 0;\r\n    uint256 public sendGasMin = 10000000 * (10**18);\r\n    // uint256 public sendGasMin = 100 * (10**8);\r\n    \r\n    SwapHelp swapHelp;\r\n    address public swapHelpAddress;\r\n    \r\n    address[] public noNeedRedUsers;\r\n    \r\n    function setSwapHelp(address _address) external onlyOwner {\r\n        swapHelpAddress = _address;\r\n        swapHelp = SwapHelp(_address);\r\n        txWhiteList[swapHelpAddress] = true;\r\n        noNeedRedUsers.push(swapHelpAddress);\r\n    }\r\n    \r\n    function updateSendGasMin(uint256 _value) external onlyOwner {\r\n        require(_value>0, \"_value is 0\");\r\n        sendGasMin = _value;\r\n    }\r\n    function needGasOnOff(bool _bo) external onlyOwner {\r\n        needGas = _bo;\r\n    }\r\n    function needSendRedOnOff(bool _bo) external onlyOwner {\r\n        needSendRed = _bo;\r\n    }\r\n    function updateMiningContractAddress(address _address) external onlyOwner {\r\n        require(_address != address(0x0) && _address != address(0x01), \"_address error\");\r\n        miningContractAddress = _address;\r\n        contractWhiteList[miningContractAddress] = true;\r\n        noNeedRedUsers.push(miningContractAddress);\r\n    }\r\n    function addContractWhiteList(address _address) external onlyOwner {\r\n        contractWhiteList[_address] = true;\r\n    }\r\n    function subContractWhiteList(address _address) external onlyOwner {\r\n        delete contractWhiteList[_address];\r\n    }\r\n    function addTxWhiteList(address _address) external onlyOwner {\r\n        txWhiteList[_address] = true;\r\n    }\r\n    function subTxWhiteList(address _address) external onlyOwner {\r\n        delete txWhiteList[_address];\r\n    }\r\n    function addNoNeedRedUsers(address _address) external onlyOwner {\r\n        noNeedRedUsers.push(_address);\r\n    }\r\n    function subNoNeedRedUsers(uint256 _index) external onlyOwner {\r\n        delete noNeedRedUsers[_index];\r\n    }\r\n    \r\n  \r\n    /**\r\n     * \u5206\u7ea2 \r\n    */ \r\n    // \u603b\u8d28\u62bc\r\n    // uint256 totalDeposit = 0;\r\n    // \u603b\u5956\u52b1 \r\n    uint256 public allTotalReward = 0;  \r\n    // \u4e0a\u4e00\u6b21\u9886\u53d6\u7684\u533a\u5757\u9ad8\u5ea6\r\n    uint256  public lastTotalReward = 0;\r\n    // \u603b\u88ab\u63d0\u8d70\u7684\u6536\u76ca\r\n    uint256 public totalRed = 0;\r\n    // \u5355\u5e01\u6316\u77ff\u7684\u5168\u5c40accShu\r\n    uint256 public totalAccSushi = 0;\r\n        \r\n    // \u7528\u6237\u7684\u4fe1\u606f\r\n    struct UserStruct {\r\n        uint256 curReward;\r\n        // \u7528\u6237\u7684accSushi\r\n        uint256 accSushi;\r\n        uint256 lastTxTime;\r\n    }\r\n    // \u5730\u5740=>\u7528\u6237\u4fe1\u606f\r\n    mapping(address => UserStruct) public users;\r\n    \r\n    \r\n    /**\r\n     * swap \r\n    */ \r\n    // address usdt = 0xa71EdC38d189767582C38A3145b5873052c3e47a;\r\n    // address swap = 0xED7d5F38C79115ca12fe6C0041abb22F0A06C300; // heco\r\n    address usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n    address swap = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // bsc\r\n    // address swap = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // eth\r\n    \r\n    // address uniswapV2Pair = address(0x0);\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    constructor () { \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(swap); \r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), usdt); //getPair, createPair\r\n        uniswapV2Router = _uniswapV2Router;\r\n    }\r\n}\r\n\r\ninterface SwapHelp  {\r\n    function buySwap(uint256 _contractTokenBalance) external;\r\n}\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract StandardToken is ERC20Basic,TxRule {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  uint256 _totalSupply;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n    if(msg.data.length < size + 4) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n    function totalValidBalance() public view returns (uint256) {\r\n        uint256 amount = _totalSupply;\r\n        for (uint256 i=0; i < noNeedRedUsers.length; i++) {\r\n            if (noNeedRedUsers[i] != address(0x0)) {\r\n                amount = amount.sub(balances[noNeedRedUsers[i]]);\r\n            }\r\n        }  \r\n        return amount.sub(balances[address(0x0)]);\r\n    }\r\n    \r\n    function balance2Of(address _user) public view returns (uint256) {\r\n        for (uint256 i=0; i < noNeedRedUsers.length; i++) {\r\n            if (_user == noNeedRedUsers[i]) {\r\n                return 0;\r\n            }\r\n        }        \r\n        \r\n        UserStruct memory user = users[_user];\r\n        uint256 _totalRed = allTotalReward.sub(lastTotalReward);\r\n        // \u6700\u65b0\u7684accSushi\r\n        uint256 _nowSushi = totalAccSushi.add(_totalRed.mul(_totalSupply).div(totalValidBalance()));\r\n        // \u8ba1\u7b97\u7528\u6237\u6536\u76ca\r\n        uint256 _userRed = balanceOf(_user).mul(_nowSushi.sub(user.accSushi)).div(_totalSupply);\r\n        return _userRed;\r\n    }\r\n\r\n    function handleSendRed(address _user) private{\r\n        for (uint256 i=0; i < noNeedRedUsers.length; i++) {\r\n            if (_user == noNeedRedUsers[i]) {\r\n                return;\r\n            }\r\n        } \r\n        UserStruct storage user = users[_user];\r\n        \r\n        uint256 _totalRed = allTotalReward.sub(lastTotalReward);\r\n        uint256 _nowSushi = totalAccSushi.add(_totalRed.mul(_totalSupply).div(totalValidBalance()));\r\n        uint256 _userRed = balanceOf(_user).mul(_nowSushi.sub(user.accSushi)).div(_totalSupply);\r\n        \r\n        if (_userRed > 0) {\r\n            balances[address(this)] = balances[address(this)].sub(_userRed);\r\n            balances[_user] = balances[_user].add(_userRed);\r\n            emit Transfer(address(this), _user, _userRed);\r\n        }\r\n        \r\n        user.accSushi = _nowSushi;\r\n        user.curReward = user.curReward.add(_userRed);\r\n        \r\n        totalAccSushi = _nowSushi;\r\n        lastTotalReward = allTotalReward;\r\n    }\r\n\r\n    function handleSubGasBalance(address _user, address _to, uint256 _value) private{\r\n        UserStruct memory user = users[_user];\r\n        uint256 hadPeriod = (block.timestamp-user.lastTxTime)/periodUnit;\r\n        if (hadPeriod < periodMax) {\r\n            uint256 _gas = _value.mul(periodMax-hadPeriod).div(100);\r\n            allTotalGas = allTotalGas.add(_gas);\r\n            \r\n            balances[_user] = balances[_user].sub(_gas);\r\n            emit Transfer(_user, address(this), _gas);\r\n            \r\n            balances[address(0x0000000000000000000000000000000000000001)] = balances[address(0x0000000000000000000000000000000000000001)].add(_gas.mul(5).div(100));\r\n            emit Transfer(address(this), address(0x0000000000000000000000000000000000000001), _gas.mul(5).div(100));\r\n        \r\n            balances[swapHelpAddress] = balances[swapHelpAddress].add(_gas.mul(58).div(100));\r\n            emit Transfer(address(this), swapHelpAddress, _gas.mul(58).div(100));\r\n            \r\n            balances[miningContractAddress] = balances[miningContractAddress].add(_gas.mul(32).div(100));\r\n            emit Transfer(address(this), miningContractAddress, _gas.mul(32).div(100));\r\n                \r\n            // allTotalReward = allTotalReward.add(_gas.mul(5).div(100));\r\n            uint256 surplus = _gas.sub(_gas.mul(5).div(100)).sub(_gas.mul(58).div(100)).sub(_gas.mul(32).div(100));\r\n            allTotalReward = allTotalReward.add(surplus);\r\n            balances[address(this)] = balances[address(this)].add(surplus);\r\n            \r\n            curLPAmount = curLPAmount.add(_gas.mul(10).div(100));\r\n            \r\n            if (curLPAmount > sendGasMin && _to != uniswapV2Pair) {\r\n                swapHelp.buySwap(curLPAmount);\r\n                curLPAmount = 0;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function queryHadPeriod(address _owner) public view returns (uint256) {\r\n        UserStruct memory user = users[_owner];\r\n        return (block.timestamp-user.lastTxTime)/periodUnit;\r\n    }\r\n    function _transfer(address _from, address _to, uint256 _value) private {\r\n        require(_value <= balances[_from], \"_from balance low\");\r\n        \r\n        if (needSendRed && totalValidBalance() > 0) { \r\n            handleSendRed(_from);\r\n            handleSendRed(_to);\r\n        }\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        \r\n        if (!contractWhiteList[_from] && !contractWhiteList[_to]) {\r\n            if (needGas && !txWhiteList[_from]) {\r\n                handleSubGasBalance(_from, _to, _value);\r\n            }\r\n            if (_value >= 1000000 * (10**18)) {\r\n                UserStruct storage user = users[_to];\r\n                user.lastTxTime = block.timestamp;\r\n            }\r\n        }\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        allowed[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    \r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) override returns (bool) {\r\n    // require(_to != address(0));\r\n    _transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {\r\n    require(_to != address(0), \"to do not is 0x0\");\r\n    require(_value <= allowed[_from][msg.sender], \"_from allowed low\");\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    \r\n    _transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  function balanceOf(address _owner) public view override returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n  \r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public onlyPayloadSize(2 * 32) override returns (bool) {\r\n    _approve(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n    \r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public onlyPayloadSize(2 * 32) returns (bool) {\r\n    require(_spender != address(0));\r\n    // require(allowed[msg.sender][_spender].add(_addedValue) <= balances[msg.sender]);\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public onlyPayloadSize(2 * 32) returns (bool) {\r\n    require(_spender != address(0));\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SimpleToken\r\n * @dev ERC20 Token, where all tokens are pre-assigned to the creator.\r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract AMyToken is StandardToken {\r\n\r\n    string public constant symbol = \"MUSK\";\r\n    string public constant name = \"MUSK\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 10000 * (10 ** 8) * (10 ** uint256(decimals));\r\n\r\n    /**\r\n    * @dev Constructor that gives msg.sender all of existing tokens.\r\n    */\r\n    constructor() {\r\n        _totalSupply = INITIAL_SUPPLY;\r\n        \r\n        // musk2\r\n        _buyBackAddress = 0x5eAf32Af6345c204Cd456D51A30aEc2CF97Bda34;\r\n        _teamAddress = 0xe17721848ec93950b32D0aa88151E3b04ee428BC;\r\n        _whiteAddress = 0x52440986889567163B3C86eA4440299fb3a2bfaf;\r\n        _promoteMiningAddress = 0xE901994E39C4d230bb529e14ADF4a4F2D7176BCe;\r\n        \r\n        // musk1\r\n        // _buyBackAddress = 0xEC4CeB287b15FcAcd71A121dEf2BE9B527bd679D;\r\n        // _teamAddress = 0x71c6100736634EEc9BcC2179A35744Dd6A5CA505;\r\n        // _whiteAddress = 0x658A243C8AC9f6F01B357559d62A4C7678Edb45f;\r\n        // _promoteMiningAddress = 0x195d18b615C6AA6F68e22618dBc75f8285AbBCb9;\r\n    \r\n        // test\r\n        // _buyBackAddress = 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2;\r\n        // _teamAddress = 0x5c6B0f7Bf3E7ce046039Bd8FABdfD3f9F5021678;\r\n        // _whiteAddress = 0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB;\r\n        // _promoteMiningAddress = msg.sender;\r\n        \r\n        noNeedRedUsers = [address(0x0), 0x0000000000000000000000000000000000000001, address(this), \r\n            _buyBackAddress, _teamAddress, _whiteAddress, _promoteMiningAddress, uniswapV2Pair];\r\n    \r\n        txWhiteList[uniswapV2Pair] = true;\r\n        txWhiteList[_buyBackAddress] = true;\r\n        txWhiteList[_whiteAddress] = true;\r\n        txWhiteList[_promoteMiningAddress] = true;\r\n        txWhiteList[_teamAddress] = true;\r\n        txWhiteList[msg.sender] = true;\r\n        txWhiteList[address(this)] = true;\r\n\r\n        balances[_teamAddress] = INITIAL_SUPPLY*5/100-100*(10 ** uint256(decimals));\r\n        emit Transfer(address(0x0), _teamAddress, balances[_teamAddress]);\r\n        \r\n        balances[0x79f62B0EAD6ff751EbAf5C1715EbCB9704f49645] = 100*(10 ** uint256(decimals));\r\n        emit Transfer(address(0x0), 0x79f62B0EAD6ff751EbAf5C1715EbCB9704f49645, 100*(10 ** uint256(decimals)));\r\n        \r\n        balances[_whiteAddress] = INITIAL_SUPPLY*10/100;\r\n        emit Transfer(address(0x0), _whiteAddress, balances[_whiteAddress]);\r\n        balances[_promoteMiningAddress] = INITIAL_SUPPLY*35/100;\r\n        emit Transfer(address(0x0), _promoteMiningAddress, balances[_promoteMiningAddress]);\r\n        balances[address(0x0)] = INITIAL_SUPPLY*50/100;\r\n        emit Transfer(address(0x0), address(0x0), balances[address(0x0)]);\r\n        \r\n        address[150] memory txWhiteAddresses = [0x4d30bd69FE53602256EeE5FBab61A4EBA98a1E42,0x292EEb33E9bFf17fd57e6DaC38F28c7df46d597A,0x4e4112191408533641a2aC3A3fEa8d59Ef682b23,0x64847Ba9f0ce361b60f4b3389e9F0746142BA515,0x7773eF338a17CE1E20C69C47b72fbC94c5C447E2,0x4D4F951d8911AC8859CE0D677E75cACB4D13D700,0xC16538Ebc1c998164e2A0aA00A0d82b15fCCc745,0x8F649C0b60f662819E29f26Cc3EA1095526f1B67,0x6176E0c9C5f0b6586e4A93155F5f559376c04f38,0x58cc8e77028942120F6A789B3130B4DCA490f15d,0xdBB95AAa53a8E0ebbcA38816deb8f30EedBb92BB,0x894e0EbE5aE3509758BA5789dd4Ce1536Bc1723E,0xd0d574C87B13d0D8549097eBE065C337141e1c74,0x60AcbcE549D43E556cbde044209c4B9A14e3E248,0xE4C25bA6f383Ca5F6D7d14A9a04ECB687643Efac,0x638eB00E2884b2239feCAde8814D55bBC0EAA85f,0x246933dcDb1d5bC13F6e1f04cB6E2bDfF68fC0F3,0x3cf31f520B64d2883410D6c327767686312A31dB,0x2F3B465C90696328a64aCC36681A8A24768725D9,0x12b2CCb2bC28Af5426a33761816B2668f8C44883,0xc8334844fE889fFDd7c907B87178CD445A8AdFF7,0x8d66ebF1d8a012Cd872254F1E8F93F7468D9c25d,0x261e1CdC06B01ECe88b1A5f10e0877F12116DCe8,0x0D46461b625F14D85E26423A491a567C1A8c9047,0x9F5691559Acf625703EffE7C09b555352397c809,0x73a84575992d2E06febDFDaa72bFfb09E77d1727,0xe264f6EeeA1E522754031ACa4e8B1f6899fE557D,0x03a29f686e2D086ac1F6F4C700Be83963bFd4D96,0x88af16C2507F8c310Ca8b35Ee2B7d40dc08BaAa6,0x3728a482efD19a2BB1A6c15780fE7E84ad5e6FAD,0x4f163874360F1f48d66c1Ec60Deb62c019c8e177,0x87A4627Fe4852233eb57723Df0F4198161019E63,0xc9C77aA8FF93E348622A468Ebc887424228e0535,0x50a5EB82D4d623674517d5029568df7D6E35Dc3A,0x461Fbd1334BD598C5b293f3173f910EE3C1b03F5,0x269B786eD7957841e60c0bF18ed66323a1626A92,0xa47799b81EC68BDEf809aB0138dEa326B6f99d90,0xC115e691eFD5DCc79323bd64846E033401475D6f,0x06552C01055C290A4644788CA66387F8132f2847,0xb317728C74C8531f75937ED7837E41800C2a2145,0x8bB457766fC7c4241353C412549f53ec41dC4e6A,0x6B2752A30b73E4344570910924d4c5b80718032C,0x105aB1f1A6462B800947B74E1EA48629aFD2bcf9,0x81b7631A223F1Fa845B79A773bBfEB8d710a8774,0xB6AA2351388fA9e2CE7F0eEa237E0851AE3Bbe33,0xd9ed4F715566EDD9D217d7D3de2aC181892cF2D9,0x05cccd9712fBDc03E1B1FC1a5879Bd81521328e6,0x2Cb195AC167AE5586FD483689dc426a4Ea9e3317,0x30FfFa7237027A9716271351434Dcda7fF425288,0x9C80b35F2246D73F8fd9A18A69F08105699a8F0A,0x505434C6B2EE0933b8c812ed0A7AEA42758d8d07,0x9f32557aA1cCEa8A8C7C81356d6cD4D69e7Bf524,0x0AB86bbb03c71eFe6630B508B557C53A6b07E59c,0x2D3D04bc42f6Ea5dDF71548b70D57deEC4849898,0xF2f3d329a05a83e22f042f2C9eC5425769B7BE33,0x8e89aB5ED076cbF0a863CF0788d18A6C95Bf76AC,0xFe9586B8E442F99C22da74b835a85E3E9D57c489,0x0422347Fb072ca5C151d344dA61a8cf22Ad416F6,0x722ae2B3FF3D2577C5C049da8e0E6A774B51F6CA,0xa27Ecb66dA28A150B39c4A5bfBb251fAc0E4Feaa,0x2A94D7aEaD452884c15a3CFcE93D9860dda2Eeeb,0xe772908b563f2705C851226c23969405b09A536d,0xa6b6699Efa626e4A97A42a7b4398055247215f3b,0x9a768613E9D5939287f8Ce7EcC4eb7204b69A61E,0x73558e8087DAdB8Bfb6650496903Bc07238954ba,0x67133c1935218Ec0C76100DD7bfe6E5A13ceE789,0xa4E3A394cdDdE30e2Dc9F98e72Bb07790fD72123,0x1cE8B965B7DeC98f38640dB72e03818A5342a2a6,0x81304EdaBb2A29571d0768bC6D23d6E03c8D96dc,0xA9E651038F42B1ED70E22f0Db0f732dA5c033dbE,0xDBD073572b843EE87DFe64C76Ee58bE842CE967e,0x8f00697A8B007A761fa3a92a6ebe81c1e0Bc524C,0xb8226f931c36a3549a548baF321D07a791BDF482,0xAD3ab5262FCe00d269Ad5CeD7b191B7af0A58cB7,0xB0d743B04faa1aC1767fC9A30BeFacA9AD876088,0x8418cF516611f53C6f6c094cCea9fDCb1f3d7Ceb,0x6ACA4C86EE2616eF4Fc91D78c4d3D437B40C4711,0x218D06A4CBd4A62D15740De0612609C34526EF3c,0x8E880c44Dc3554349c50F49164aEC924917c6708,0x94F04B4D64f86CeA1374be9F6D824EC12032D70D,0x4A2e385e2811BC7FF9503A1eF81AD50c4F60D6cD,0x69Dc76ec1505D4774597BeCD25025cE5fffFC975,0xf8Cf8e82501EBD88E51e125aD9A75A550BAe6bF6,0xD2966576463e1cD884Ddd3ebDB303052b22dfFB5,0xeEaEAf93DD4917eafbfc0E667e4285422277584c,0xdaaBcBA4A83F3779d87Df0Eb238245453c811c5b,0xC9f5b523514abff78Af30e1791df6C3bb6Da91b3,0x9f5d6bDdAC4AcC98fB7B945C7a4d6F358Aa467B9,0xA5Dc36550ba4D186Aa3A94273120EcE16f6D059B,0x07284DDa932641b50b79B9fB94D74C636c0bacb6,0x0425624EA42FCD6bB13c945E1ABc96dD492cb289,0x3589622db5C6E4CCa1365Fe962B70f300CaD6272,0xb5f4da6Ba2Fe1957f138fD1665C0542b3e018943,0x3aD93b3C64300ca4ec30F90a08e51065624C02B4,0x8B12CD74971038Fe36f5778D40586768Fa674f08,0xF4E44109C77528459467a270c6e7bFe8a742eA23,0x77037408e7BFa4998AeC6e66385885Ebb10F4D39,0x6106e4dE78aA51B627c4a8464409966FD25A3AeD,0x6b60378F3DDB80776db77F056AD11d616F574268,0x32286Ff150Cbc2084035cE93d860FE7388cd2460,0xD6CE317364b2245b0b3b2bA4EeAAEf1D11B8eA21,0x30A5C0aA6bC9E206e0df5Dc3B49FC477429c5745,0xE2ffAf0aB3Ef354FfE99D2814f0D48A5d9E7c860,0xa0a491D88aDB48D203036398E933a9bB41dD884F,0xb5c5D5231A8d9C821174BaB3c91401Fc78641841,0x7521Ae579441Fe768D03cE6442727C0cB4F19271,0x7D90af3AAA1E871871f6385F7447c51B73E69e70,0x72ebe3223B563c79bb85691123F2E0FA3B148Fad,0x460B8Fadb321B2437E0D65a639F42Af2b6d8bdA5,0x4406b4Ec25c3D91A1444b1e2B5dB076F36580605,0x85d54f6De1B48d76BDa5e19a949BC60DdC14c77D,0x83b7db49199ae73482b6795C04F204eA0C919866,0x992b9A332890A2B2a4594A7d4Dd1D4A305A323bf,0x285128247a5df84936480bC228984fd37A2e2425,0xb1550Fca154d601102B65193cdf1FCd0298C4fEF,0x752Abd15fE4215C171964a05a751c0582b2D4a7F,0x7106e66F384D3a76AcB40560B143BDE9438c831B,0xA1da021bd851C74beA5B2B49a128b0456F2D5C17,0xdD4885D2810503b588c14BAEEBE5710020A0e866,0xbc0F802dCE5d752DE6Fb7D9fC8f0D26C7265D792,0xd534DEce9124482A66De896f110B122cE25185fB,0x49288C3b0EAd6E3663f3e9AC396db4b351fb6a7A,0x1CC551792555AD011Fc4f697f91375D7835Fb62F,0x5f867539a694c27A8333f09B13416A0d4fB85592,0x80f96d87f8F9f5CcE1a478aF1d8616755B2fB943,0x967374cff7cfF9387f78f903de4d392386373ce4,0x04B8Cbd7B604fDA2474A053232df7ee533a258B3,0xb3a8A22Cd2Bc57489FA766a52cb9D12a53068fcb,0xCd0502290BfDb01D4Bac89197Cd307e2dE297CFC,0x6C4c0262cC1c804653A2796F9c701a0AA8FCE545,0xd32A0b9666311604fD0d9a9aa2079c67c370750A,0x02e329df503997742b41dF273cC2D9cF57F073c0,0x2660cE3545C98cDC731CBA747F22EED83611d51c,0xcABd3c7715Bb831AB39B13a747F72e51b9204BE5,0xe5a52Eb7F4b421c43957174d8032E63F9740e905,0x16F223BAF28Aa3CF1F8C6717cE10970A1497f166,0xc909b0AE623DeE4C8d17B2Df538a3B453d17B0b2,0x3901f99D35E4d6Bb79b175a1777194c6D5074fad,0xE5743106dd640890DA9bC32609e26Ee67995DA23,0xC954A09123a2F113C1C544a885FE7aD3F88818e7,0x96b30A65070431138f0a14307DD208441eC8392a,0x4A3513DE113832869B2EF54f27ea23F155443bE4,0x065c6226412178b8aeE79A71DEDAE0e963642d67,0x8f6911B10061098aa344978bB3F3c636D3ED0E1d,0xd41719f89E527e8d963BAA882F14f9cBCB372d6a,0xF6a54D581f895a79e2EdfD5C17211c80D159933e,0x9D4B69C51f320EDD3012Dd73e0ce75E066e28Aa7,0x512E5751cE1c341Ed65b42923f1692d25FE150F2,0xAc13d5b1385C2Da1A779884edD94E6684F9eaa67,0xCfA876053d660641c560D14a7b5A4408410eC272];\r\n        for (uint256 i=0; i < txWhiteAddresses.length; i++) {\r\n            txWhiteList[txWhiteAddresses[i]] = true;\r\n        } \r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_promoteMiningAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_whiteAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addContractWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addNoNeedRedUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addTxWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTotalGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTotalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balance2Of\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curLPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTotalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"needGas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bo\",\"type\":\"bool\"}],\"name\":\"needGasOnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"needSendRed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bo\",\"type\":\"bool\"}],\"name\":\"needSendRedOnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"noNeedRedUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"queryHadPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendGasMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSwapHelp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"subContractWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"subNoNeedRedUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"subTxWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapHelpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAccSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateMiningContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateSendGasMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"curReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSushi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTxTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AMyToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a3c1f6dab3f390e19d511091b6c84dfbf65d641719e2dc60921b8dc3e53a0dc6"}