{"SourceCode": "//SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.11;\r\n\r\n/**\r\n * First published in the journal \u201cBearish Afflictions of The Head, Neck, Upper Torso, Lower Torso, and Buttocks, and Bilious Ducts: May 1877\u201d, and read before the Mumu Society's annual meeting.\r\n * \r\n * FRIENDS,\r\n * ARE YOU JUST'D? \r\n * RIDDLED WITH BOBOITIS?\r\n * NECK SORE AF FROM BUYING ANOTHER TOP?\r\n * BILIOUS DUCTS HYPERDEFLATED?\r\n * FRET NO MORE,\r\n * THERE IS FINALLY A CURE FOR THESE TERRIBLE AILMENTS, AND MANY MORE!\r\n * A TRUE MUST-DRINK ITEM FOR ALL SERIOUS POTION BUYERS.\r\n * FIRST LET ME TELL YOU ABOUT A MAN, A MR. R. HAMMERLIN OF LOUISIANA.\r\n * THIS MAN WAS BROUGHT BEFORE ME WITH AN EXTREME CASE OF PINK WOJACITY.\r\n * HIS SKIN WAS ALMOST 100% PINK AND HE WAS ONLY ABLE TO VOCALIZE THE LETTER \"A\".\r\n * WITHOUT A DOUBT ONE OF THE WORST CASES IN LOUISIANA.\r\n * AFTER TREATING HIM WITH THE USUAL POULTICES AND OINTMENTS AND FINDING NO IMPROVEMENT,\r\n * I SET TO DEVELOPING MY OWN MEDICINE TO HELP TREAT THIS MAN.\r\n * AFTER A GREAT DEAL OF EXPERIMENTATION WITH TOAD VENOM AND WHALE JUICE,\r\n * WHICH ONLY RESULTED IN A WORSENING OF MR. HAMMERLIN'S CONDITION,\r\n * MY ASSISTANTS AND I WERE ALMOST READY TO ACCEPT THAT WOJACITY THIS PINK IS RIGHTLY INCURABLE.\r\n * BUT WE CONTINUED ON.\r\n * DURING A CHANCE ENCOUNTER WITH SOME ORIENTAL LABORERS,\r\n * WE DISCOVERED A DRINK WHICH IS USED RECREATIONALLY IN FORMOSA AS AN APHRODISIAC AND INDIGESTION AID.\r\n * IT IS MADE FROM THE JUICE OF THE BILIOUS DUCTS OF A TYPE OF WATER SNAKE.\r\n * WHEN CONSUMED BY INDIVIDUALS OF A NON-BOBOISH DISPOSITION,\r\n * THIS DRINK INDEED WORKS AS INTENDED BY ITS WISE EASTERN CREATORS.\r\n * AND A FINE JOB THEY DID.\r\n * A FINE JOB THEY DID.\r\n * ANYWAY, I DIGRESS. MR HAMMERLIN, UPON SEEING MY ASSISTANTS ENJOYING THE POTION'S EFFECTS,\r\n * REQUESTED TO BE RUBBED ALL OVER WITH THIS BEVERAGE.\r\n * IN THEIR INTOXICATED STATES, THEY OBLIGED, \r\n * AND WE ALL WERE SOON WITNESS TO THE SPECTACLE OF MR HAMMERLIN'S COMPLEXION UNPINKENING BEFORE OUR EYES.\r\n * FURTHERMORE, MR. HAMMERLIN WENT ON TO DRINK A WHOLE BOTTLE OF THE POTION,\r\n * UPON WHICH HE WAS RENDERED IN A STATE OF PURE BULLISHNESS, WHICH HAS PERSISTED FOR OVER 7 MONTHS NOW.\r\n * SINCE HIS TREATMENT, HE HAS BEEN BUYING EVERYTHING HE CAN, \r\n * AND SUGGESTING EVERYONE AROUND HIM DO LIKEWISE.\r\n * HE HAS EVEN BEEN ACTING AS A SALESMAN FOR THE FORMULA,\r\n * AND CLAIMS IT WILL SOON HAVE A GREATER MARKET CAPITALIZATION THEN GOLD ITSELF.\r\n * EVEN MORE INCREDIBLE, OUR PRELIMINARY STUDIES HAVE SHOW THE JUICE TO BE BENFICIAL TO SUFFERERS \r\n * OF ALMOST ALL BEARISH AFFLICTIONS.\r\n * SINCE OUR BREAKTHROUGH CASE WITH MR. HAMMERLIN, WE SET TO REFINE THE DRINK TO MAKE IT MORE PALATABLE.\r\n * WE HAD A GREAT DEAL OF SUCCESS IN COMBINING THE DRINK WITH WHALE JUICE AND TOAD VENOM,\r\n * BEFORE SUSPENDING IT IN A MINERAL OIL, RENDERING IT FIT FOR BOTTLING AND TRANSPORT.\r\n * WE HAVE EVEN REDUCED THE SYRUM IN A PRESSURE VAT, TRIIIPLING ITS POTENCY.\r\n * TODAY, FRIENDS OF THE MUMU SOCIETY, \r\n * I PRESENT TO YOU,\r\n * \r\n * THE CURE \r\n *\r\n * for\r\n *\r\n * BOBOITIS\r\n * JUST'D\r\n * REKTEDNESS\r\n * DROOPY BAGS\r\n * HYPERINFLATION OF THE BILIOUS DUCTS\r\n * HYPERDEFLATION OF THE BILIOUS DUCTS\r\n * FUD LEG\r\n * ST. THOMAS SYNDROME\r\n * FEEBLENESS OF THE HANDS AND WRISTS\r\n * BEARISH DIVERGENCES OF THE BILIOUS DUCTS\r\n * DUMP FEVER\r\n * TOP BUYER'S NECK\r\n * BAGHOLDER'S RHEUMATISM OF THE BILIOUS DUCTS\r\n * BOTTOM SELLER'S HAEMMORHAGE HANDS\r\n * CRAB GLANDS\r\n * LOSS OF BILIOUS DUCTS\r\n * FRONTRUNNERSYNDROME\r\n * PANIC SELLERS RASH\r\n * RUG BREATH\r\n * LAMENESS BY A LOT\r\n * HONEY POTTED SPAZM FLAPS\r\n * CHIMPANZEE ACNE\r\n * THE PINK WOJACITY\r\n * AND OF COURSE, MOOSEBUMPS\r\n *\r\n * PATENTED\r\n * \r\n * UNCLE ALOYSIUS' FAMOUS TRIIIPLE STRENGTH BULL RUN SYRUM FORMULA\r\n * GOOD FOR MAN AND BEAST\r\n * \r\n *\r\n *    $$\\     $$$$$$\\  $$\\   $$\\  $$$$$$\\  $$\\   $$\\ $$$$$$$$\\  $$$$$$\\  $$$$$$\\ $$\\       \r\n *  $$$$$$\\  $$  __$$\\ $$$\\  $$ |$$  __$$\\ $$ | $$  |$$  _____|$$  __$$\\ \\_$$  _|$$ |      \r\n * $$  __$$\\ $$ /  \\__|$$$$\\ $$ |$$ /  $$ |$$ |$$  / $$ |      $$ /  $$ |  $$ |  $$ |      \r\n * $$ /  \\__|\\$$$$$$\\  $$ $$\\$$ |$$$$$$$$ |$$$$$  /  $$$$$\\    $$ |  $$ |  $$ |  $$ |      \r\n * \\$$$$$$\\   \\____$$\\ $$ \\$$$$ |$$  __$$ |$$  $$<   $$  __|   $$ |  $$ |  $$ |  $$ |      \r\n *  \\___ $$\\ $$\\   $$ |$$ |\\$$$ |$$ |  $$ |$$ |\\$$\\  $$ |      $$ |  $$ |  $$ |  $$ |      \r\n * $$\\  \\$$ |\\$$$$$$  |$$ | \\$$ |$$ |  $$ |$$ | \\$$\\ $$$$$$$$\\  $$$$$$  |$$$$$$\\ $$$$$$$$\\ \r\n * \\$$$$$$  | \\______/ \\__|  \\__|\\__|  \\__|\\__|  \\__|\\________| \\______/ \\______|\\________|\r\n * \\_$$  _/                                                                               \r\n *  \\ _/                                                                                 \r\n */\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    }\r\n}\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\nabstract contract Ownable {\r\n    address internal owner;\r\n    \r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n    event OwnershipTransferred(address indexed owner, address indexed to);\r\n}\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\ncontract UNCLE is IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n    address public marketingAddress;\r\n    address public liquidityProviderAddress;\r\n    string _name = \"UNCLE ALOYSIUS FAMOUS TRIIIPLE STRENGTH BULL RUN SYRUM FORMULA\";\r\n    string _symbol = \"SNAKEOIL\";\r\n    uint8 constant _decimals = 4;\r\n    uint256 _totalSupply = 1 * 10**6 * (10 ** _decimals);\r\n    uint256 public _maxTxAmount = _totalSupply.mul(1).div(100);\r\n    uint256 public _maxWalletToken = _totalSupply.mul(1).div(400);\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) _isFeeExempt;\r\n    uint256 liquidityFee    = 5;\r\n    uint256 marketingFee    = 5;\r\n    uint256 public totalFee = 10;\r\n    IDEXRouter public router;\r\n    address public uniswapV2Pair;\r\n    bool public swapEnabled = false;\r\n    uint256 public swapThreshold = _maxTxAmount.mul(liquidityFee).div(100);\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n    mapping (address => bool) _botList;\r\n    uint256 _startBlock = 0;\r\n    uint256 _botBlocks = 2;\r\n    mapping (address => bool) _devList;\r\n    function isBot(address adr) public view returns (bool) {\r\n        return _botList[adr];\r\n    }\r\n    function addToDevList(address[] calldata addresses) external onlyOwner {\r\n        for (uint i=0; i< addresses.length; i++) {\r\n            _devList[addresses[i]] = true;\r\n        }\r\n    }\r\n    function start() external onlyOwner {\r\n        _startBlock = block.number;\r\n    }\r\n    function setLiquidityProviderAddress(address _wallet) external {\r\n        if (owner == msg.sender) {\r\n            liquidityProviderAddress = _wallet;\r\n        }\r\n    }\r\n    function setSwapEnabled(bool enabled) external onlyOwner {\r\n        swapEnabled = enabled;\r\n    }\r\n    constructor () {\r\n        owner = msg.sender;\r\n        _devList[msg.sender] = true;\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapV2Pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n        _isFeeExempt[msg.sender] = true;\r\n        approve(address(router), _totalSupply);\r\n        approve(address(uniswapV2Pair), _totalSupply);\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    receive() external payable { }\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external view override returns (string memory) { return _symbol; }\r\n    function name() external view override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address owner, address spender) external view override returns (uint256) { return _allowances[owner][spender]; }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != _totalSupply){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n    //settting the maximum permitted wallet holding (percent of total supply)\r\n    function setMaxWalletPercent(uint256 maxWallPercent) external onlyOwner {\r\n        _maxWalletToken = (_totalSupply * maxWallPercent ) / 100;\r\n    }\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != uniswapV2Pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if (inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n        if (recipient != address(this) && recipient != address(DEAD) && recipient != address(ZERO) && recipient != uniswapV2Pair && recipient != marketingAddress && sender != liquidityProviderAddress && recipient != liquidityProviderAddress){\r\n            uint256 heldTokens = balanceOf(recipient);\r\n            uint256 feeAmount = amount.mul(totalFee).div(100);\r\n            require((heldTokens + amount - feeAmount) <= _maxWalletToken,\"Total Holding is currently limited, you can not buy that much.\");\r\n        }\r\n        if (!_devList[sender] && !_devList[recipient] && sender != liquidityProviderAddress && recipient != liquidityProviderAddress){\r\n            require(_startBlock > 0);\r\n            require(!_botList[sender] && !_botList[recipient]);\r\n            if (block.number < (_startBlock + _botBlocks) && recipient != uniswapV2Pair) {\r\n                _botList[recipient] = true;\r\n            }\r\n        }\r\n        checkTxLimit(sender, recipient, amount);\r\n        if (shouldSwapBack()){ swapBack(); }\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function checkTxLimit(address sender, address recipient, uint256 amount) internal view {\r\n        uint256 feeAmount = amount.mul(totalFee).div(100);\r\n        if (recipient == uniswapV2Pair) {\r\n            feeAmount = 0;\r\n        }\r\n        require((amount - feeAmount <= _maxTxAmount) || liquidityProviderAddress == sender || liquidityProviderAddress == recipient, \"TX Limit Exceeded\");\r\n    }\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        return !_isFeeExempt[sender] && sender != liquidityProviderAddress && recipient != liquidityProviderAddress;\r\n    }\r\n    function takeFee(address sender, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount = amount.mul(totalFee).div(100);\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n        return amount.sub(feeAmount);\r\n    }\r\n    function swapBack() internal swapping {\r\n        uint256 amountToLiquify = _balances[address(this)].mul(liquidityFee).div(totalFee).div(2);\r\n        uint256 amountToSwap = _balances[address(this)].sub(amountToLiquify);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint256 amountBNB = (address(this).balance).mul(9).div(10);\r\n        uint256 totalBNBFee = totalFee.sub(liquidityFee.div(2));\r\n        uint256 amountBNBLiquidity = amountBNB.mul(liquidityFee).div(totalBNBFee).div(2);\r\n        uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(totalBNBFee);\r\n        if (marketingAddress != address(0)) {\r\n            payable(marketingAddress).call{value: amountBNBMarketing, gas: 60000}(\"\");\r\n        }\r\n        if (amountToLiquify > 0){\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                ZERO,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n    function changeFValues(uint256 _liquidityFee, uint256 _marketingFee) external onlyOwner {\r\n        liquidityFee = _liquidityFee;\r\n        marketingFee = _marketingFee;\r\n        totalFee = _liquidityFee.add(_marketingFee);\r\n        require(totalFee < 91);\r\n    }\r\n    function setFeeReceiver(address marketingWallet) external onlyOwner {\r\n        marketingAddress = marketingWallet;\r\n    }\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n    function clearStuckBalance(uint256 amountPercentage) external {\r\n        require(_devList[msg.sender]);\r\n        uint256 amountBNB = address(this).balance;\r\n        payable(marketingAddress).transfer(amountBNB * amountPercentage / 100);\r\n    }\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"addToDevList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"changeFValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityProviderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setLiquidityProviderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UNCLE", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "400", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f25294e0854dfaa20ba0ce6afbfd3031c1ab0db3343da5bf4636a359da0dbaa6"}