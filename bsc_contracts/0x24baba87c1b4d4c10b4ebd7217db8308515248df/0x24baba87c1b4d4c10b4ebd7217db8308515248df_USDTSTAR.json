{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.7.6;\r\n\r\ncontract USDTSTAR {\r\n    using SafeMath for uint256;\r\n    IBEP20 public token;\r\n\r\n    uint256 public constant INVEST_MIN_AMOUNT = 100e18; //100$\r\n    uint256[] public reward = [250e18,1250e18,3750e18,11250e18,33750e18];\r\n    uint256[] public reward_level_business_condition = [5000e18,25000e18,75000e18,225000e18,675000e18];\r\n    uint256[] public reward_self_business_condition = [200e18,1000e18,2000e18,3000e18,5000e18];\r\n\r\n    uint256[] public GI_PERCENT = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7];\r\n    uint256 public constant BASE_PERCENT = 100; // 1% per day\r\n    uint256 public constant PERCENTS_DIVIDER = 10000;\r\n    uint256 public constant TIME_STEP = 1 days;\r\n    uint256 public LAUNCH_TIME;\r\n    uint256 public totalInvested;\r\n    uint256 public totalWithdrawn;\r\n    uint256 public totalDeposits;\r\n    uint256 gi_bonus;\r\n    address payable public marketingAddress;\r\n     address payable public w1;\r\n      address payable public w2;\r\n     address payable public projectAddress;\r\n    address payable public BepSegment;\r\n\r\n\r\n    struct Deposit {\r\n        uint256 amount;\r\n        uint256 start;\r\n    }\r\n\r\n    struct User {\r\n        Deposit[] deposits;\r\n        uint256 checkpoint;\r\n        address payable referrer;\r\n        uint256 direct_amount;\r\n        uint256 gi_bonus;\r\n        uint256 total_gi_bonus;\r\n        uint256 id;\r\n        uint256 reward_earned;\r\n        uint256 available;\r\n        uint256 withdrawn;\r\n        mapping(uint8 => uint256) structure;\r\n        mapping(uint8 => uint256) level_business;\r\n        mapping(uint8 => bool) rewards;\r\n        uint256 total_direct_bonus;\r\n        uint256 total_invested;\r\n        uint256 reward_available;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    event Newbie(address user);\r\n    event NewDeposit(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RefBonus(\r\n        address indexed referrer,\r\n        address indexed referral,\r\n        uint256 indexed level,\r\n        uint256 amount\r\n    );\r\n    event FeePayed(address indexed user, uint256 totalAmount);\r\n\r\n    modifier beforeStarted() {\r\n        require(block.timestamp >= LAUNCH_TIME, \"!beforeStarted\");\r\n        _;\r\n    }\r\n\r\n    constructor(address payable marketingAddr,address payable _projectAddress,IBEP20 tokenAdd, address payable _w1, address payable _w2) {\r\n        require(!isContract(marketingAddr), \"!marketingAddr\");\r\n        BepSegment = msg.sender;\r\n        marketingAddress = marketingAddr;\r\n        invest(msg.sender,10e1);\r\n        projectAddress = _projectAddress;\r\n        token = tokenAdd;\r\n        w1 = _w1;\r\n        w2 =  _w2;\r\n\r\n        \r\n    }\r\n\r\n    function invest(address payable referrer,uint256 token_quantity) public payable beforeStarted() {\r\n\r\n        uint256 tokenWei = token_quantity * 10 ** 18;\r\n\r\n        require(tokenWei >= INVEST_MIN_AMOUNT, \"!INVEST_MIN_AMOUNT\");\r\n\r\n        if(msg.sender != BepSegment)\r\n        {\r\n            token.transferFrom(msg.sender, address(this), tokenWei);\r\n        }\r\n        \r\n\r\n        User storage user = users[msg.sender];\r\n\r\n\r\n        if (user.deposits.length > 0) {\r\n            require(tokenWei >= user.total_invested, \"Top Up with same and above \");\r\n         }\r\n\r\n        if(msg.sender !=BepSegment)\r\n        {\r\n\r\n            token.transfer(projectAddress,tokenWei.mul(500).div(PERCENTS_DIVIDER));\r\n            token.transfer(marketingAddress,tokenWei.mul(500).div(PERCENTS_DIVIDER));\r\n        }\r\n       \r\n\r\n        _setUpline(msg.sender, referrer,tokenWei);\r\n\r\n        address upline  = user.referrer;\r\n        uint256 direct_amt = tokenWei.mul(500).div(PERCENTS_DIVIDER);\r\n       \r\n       if(direct_amt > users[upline].available )\r\n       {\r\n           direct_amt = users[upline].available;\r\n       }\r\n        users[upline].direct_amount += direct_amt;\r\n        users[upline].total_direct_bonus += direct_amt;\r\n        \r\n        distribute_reward(msg.sender);\r\n\r\n        if (user.deposits.length == 0) {\r\n            user.checkpoint = block.timestamp;\r\n            user.withdrawn = 0;\r\n            emit Newbie(msg.sender);\r\n        }\r\n\r\n        user.total_invested += tokenWei;\r\n\r\n        if(msg.sender == BepSegment)\r\n        {\r\n             uint256 triple = tokenWei.mul(1000);\r\n            user.available += triple;\r\n        }else{\r\n             uint256 triple = tokenWei.mul(3);\r\n            user.available += triple;\r\n        }\r\n       \r\n\r\n        // delete previous entry before next\r\n\r\n        if(user.deposits.length > 0)\r\n        {\r\n                delete user.deposits;\r\n        }\r\n    \r\n\r\n        user.deposits.push(Deposit(tokenWei, block.timestamp));\r\n\r\n        totalInvested = totalInvested.add(tokenWei);\r\n        totalDeposits = totalDeposits.add(1);\r\n        emit NewDeposit(msg.sender,tokenWei);\r\n        \r\n    }\r\n\r\n      function _setUpline(address _addr, address payable _upline,uint256 amount) private {\r\n        if(users[_addr].referrer == address(0)) {//first time entry\r\n            if(users[_upline].deposits.length == 0) {//no deposite from my upline\r\n                _upline = BepSegment;\r\n            }\r\n            users[_addr].referrer = _upline;\r\n            for(uint8 i = 0; i < GI_PERCENT.length; i++) {\r\n                users[_upline].structure[i]++;\r\n                 users[_upline].level_business[i] += amount;\r\n                _upline = users[_upline].referrer;\r\n                if(_upline == address(0)) break;\r\n            }\r\n        }\r\n        \r\n         else\r\n             {\r\n                _upline = users[_addr].referrer;\r\n            for( uint8 i = 0; i < GI_PERCENT.length; i++) {\r\n                     users[_upline].level_business[i] += amount;\r\n                    _upline = users[_upline].referrer;\r\n                    if(_upline == address(0)) break;\r\n                }\r\n        }\r\n        \r\n    }\r\n\r\n    function distribute_reward(address _addr) private {\r\n\r\n        address payable _upline = users[_addr].referrer;\r\n\r\n        for (uint8 i = 0 ; i < reward.length; i ++ )\r\n        {\r\n            if(users[_upline].level_business[i] >= reward_level_business_condition[i] && users[_upline].total_invested >= reward_self_business_condition[i]  &&  users[_upline].rewards[i] == false)\r\n            {\r\n                    users[_upline].rewards[i] = true;\r\n                   // users[_upline].reward_earned += reward[i];\r\n                    users[_upline].reward_available +=reward[i];\r\n                    //token.transfer(_upline,reward[i]);\r\n            }\r\n\r\n             _upline = users[_upline].referrer;\r\n            if(_upline == address(0)) break;\r\n        }\r\n\r\n    }\r\n\r\n    function withdraw() public beforeStarted() {\r\n\r\n        require(\r\n            getTimer(msg.sender) < block.timestamp,\r\n            \"withdrawal is available only once every 24 hours\"\r\n        );\r\n        User storage user = users[msg.sender];\r\n        \r\n        uint256 totalAmount;\r\n        uint256 dividends;\r\n\r\n        require(user.available > 0,\"You have reached your 3x limit\");\r\n\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            if (user.available > 0) {\r\n                if (user.deposits[i].start > user.checkpoint) {\r\n                    dividends = (\r\n                        user.deposits[i].amount.mul(BASE_PERCENT).div(\r\n                            PERCENTS_DIVIDER\r\n                        )\r\n                    )\r\n                        .mul(block.timestamp.sub(user.deposits[i].start))\r\n                        .div(TIME_STEP);\r\n                } else {\r\n                    dividends = (\r\n                        user.deposits[i].amount.mul(BASE_PERCENT).div(\r\n                            PERCENTS_DIVIDER\r\n                        )\r\n                    )\r\n                        .mul(block.timestamp.sub(user.checkpoint))\r\n                        .div(TIME_STEP);\r\n                }\r\n\r\n                totalAmount = totalAmount.add(dividends);\r\n            }\r\n        }\r\n\r\n        uint256 min_check_value = totalAmount.add(user.direct_amount);\r\n         min_check_value += user.gi_bonus;\r\n        require(min_check_value  > 20e18, \"Min withdraw is 20$\");\r\n\r\n         _send_gi(msg.sender,totalAmount);\r\n\r\n        totalAmount += user.direct_amount;\r\n        totalAmount += user.gi_bonus;\r\n        totalAmount += user.reward_available;\r\n\r\n       \r\n\r\n        if (user.available < totalAmount) {\r\n            totalAmount = user.available;\r\n\r\n            delete user.deposits;\r\n        }\r\n\r\n        uint256 fees = totalAmount.mul(1000).div(PERCENTS_DIVIDER); // 10 % withdrawal deduction\r\n        token.transfer(w1,fees.div(2));\r\n        token.transfer(w2,fees.div(2));\r\n        user.withdrawn = user.withdrawn.add(totalAmount);\r\n        user.available = user.available.sub(totalAmount);\r\n        totalAmount -= fees;\r\n        user.checkpoint = block.timestamp;\r\n        token.transfer(msg.sender,totalAmount);\r\n\r\n        user.total_gi_bonus  += user.gi_bonus; \r\n        user.reward_earned += user.reward_available;\r\n       \r\n        user.direct_amount = 0;\r\n        user.gi_bonus = 0;\r\n        user.reward_available = 0;\r\n\r\n        totalWithdrawn = totalWithdrawn.add(totalAmount);\r\n\r\n        emit Withdrawn(msg.sender, totalAmount);\r\n    }\r\n\r\n\r\n     function getTimer(address userAddress) public view returns (uint256) {\r\n        return users[userAddress].checkpoint.add(24 hours);  \r\n    }\r\n\r\n\r\n    function _send_gi(address _addr, uint256 _amount) private {\r\n        address up = users[_addr].referrer;\r\n\r\n        for(uint8 i = 0; i < GI_PERCENT.length; i++) {\r\n            if(up == address(0)) break;\r\n\r\n            if((i< users[up].structure[0] && users[up].available > 0) || _addr == BepSegment)\r\n            {\r\n                uint256 bonus = _amount.mul(GI_PERCENT[i]).div(100);\r\n                \r\n                if(bonus > users[up].available)\r\n                {\r\n                    bonus = users[up].available;\r\n                }\r\n            \r\n                users[up].gi_bonus += bonus;\r\n                gi_bonus += bonus;\r\n \r\n                \r\n            }\r\n            up = users[up].referrer;\r\n        }\r\n    }\r\n\r\n    function getUserDividends(address userAddress) public view returns (uint256)\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n\r\n        uint256 totalDividends;\r\n        uint256 dividends;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            if (user.available > 0) {\r\n                if (user.deposits[i].start > user.checkpoint) {\r\n                    dividends = (\r\n                        user.deposits[i].amount.mul(BASE_PERCENT).div(\r\n                            PERCENTS_DIVIDER\r\n                        )\r\n                    )\r\n                        .mul(block.timestamp.sub(user.deposits[i].start))\r\n                        .div(TIME_STEP);\r\n                } else {\r\n                    dividends = (\r\n                        user.deposits[i].amount.mul(BASE_PERCENT).div(\r\n                            PERCENTS_DIVIDER\r\n                        )\r\n                    )\r\n                        .mul(block.timestamp.sub(user.checkpoint))\r\n                        .div(TIME_STEP);\r\n                }\r\n\r\n                totalDividends = totalDividends.add(dividends);\r\n                /// no update of withdrawn because that is view function\r\n            }\r\n        }\r\n\r\n        if (totalDividends > user.available) {\r\n            totalDividends = user.available;\r\n        }\r\n\r\n        return totalDividends;\r\n    }\r\n\r\n    function getContractBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getUserCheckpoint(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].checkpoint;\r\n    }\r\n\r\n    function getUserReferrer(address userAddress)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return users[userAddress].referrer;\r\n    }\r\n\r\n    function getUserReferralBonus(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return (users[userAddress].gi_bonus,users[userAddress].total_direct_bonus);\r\n    }\r\n\r\n    function getUserAvailable(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return getUserDividends(userAddress);\r\n    }\r\n\r\n    function getAvailable(address userAddress) public view returns (uint256) {\r\n        return users[userAddress].available;\r\n    }\r\n\r\n    function getUserAmountOfReferrals(address userAddress)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[] memory structure,\r\n            uint256[] memory levelBusiness\r\n        )\r\n    {\r\n\r\n        uint256[] memory _structure = new uint256[](GI_PERCENT.length);\r\n        uint256[] memory _levelBusiness = new uint256[](GI_PERCENT.length);\r\n        for(uint8 i = 0; i < GI_PERCENT.length; i++) {\r\n            _structure[i] = users[userAddress].structure[i];\r\n            _levelBusiness[i] = users[userAddress].level_business[i];\r\n        }\r\n        return (\r\n             _structure,_levelBusiness\r\n\r\n        );\r\n    }\r\n\r\n\r\n     function getrewardinfo(address userAddress)\r\n        public\r\n        view\r\n        returns (\r\n            bool[] memory reward_info\r\n        )\r\n    {\r\n\r\n\r\n        bool[] memory _reward_info = new bool[](reward.length);\r\n\r\n        for(uint8 i = 0; i < reward.length; i++) {\r\n            _reward_info[i] = users[userAddress].rewards[i];\r\n            \r\n        }\r\n        return (\r\n            _reward_info\r\n\r\n        );\r\n    }\r\n\r\n    function getChainID() public pure returns (uint256) {\r\n        uint256 id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n\r\n\r\n    function getUserDepositInfo(address userAddress, uint256 index)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n        return (user.deposits[index].amount, user.deposits[index].start);\r\n    }\r\n\r\n   \r\n    function getUserAmountOfDeposits(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].deposits.length;\r\n    }\r\n\r\n    function getUserTotalDeposits(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 amount;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            amount = amount.add(user.deposits[i].amount);\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function getUserTotalWithdrawn(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n        return user.withdrawn;\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address BepSegment, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed BepSegment, address indexed spender, uint256 value);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_projectAddress\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"tokenAdd\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_w1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_w2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BepSegment\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GI_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAUNCH_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfReferrals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"structure\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"levelBusiness\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getrewardinfo\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"reward_info\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token_quantity\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reward_level_business_condition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reward_self_business_condition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"direct_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gi_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_gi_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_direct_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_available\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"w1\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"w2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "USDTSTAR", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ab4036d594b9ba65cf0d63da3c68400238d46330000000000000000000000000ba19734ac6db7d09d11fe5809d0800681f3af1b800000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000e58cd581e461dc7b4fc704bfb962ba053a534c01000000000000000000000000ab4036d594b9ba65cf0d63da3c68400238d46330", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://729c7e3614483630a30fc601f98c081df376fdd65f38e73bd497bc1d0afec65f"}