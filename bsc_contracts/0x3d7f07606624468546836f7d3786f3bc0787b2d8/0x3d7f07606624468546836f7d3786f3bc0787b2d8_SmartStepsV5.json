{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SmartStepsv5.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface AggregatorV3Interface {\\r\\n\\r\\n  function decimals()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint8\\r\\n    );\\r\\n\\r\\n  function description()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      string memory\\r\\n    );\\r\\n\\r\\n  function version()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256\\r\\n    );\\r\\n\\r\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\r\\n  // if they do not have data to report, instead of returning unset values\\r\\n  // which could be misinterpreted as actual reported values.\\r\\n  function getRoundData(\\r\\n    uint80 _roundId\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n  function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n     * Network: bsc\\r\\n     * Aggregator: BNB/USD\\r\\n     * Address: 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE  // Test - 0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526\\r\\n     */\\r\\n\\r\\n\\r\\ncontract SmartStepsV5{\\r\\n    \\r\\n    AggregatorV3Interface internal priceFeed;\\r\\n    using SafeMath for uint;\\r\\n    struct Deposit {\\r\\n        uint amount ;\\r\\n        uint amountInUSD;\\r\\n        uint timestamp;\\r\\n    }\\r\\n\\r\\n    struct  User {\\r\\n        address refferal_code;\\r\\n        uint amount;\\r\\n        uint TotalamountInUSD;\\r\\n        uint timestamp;\\r\\n        Deposit [] deposit;\\r\\n        uint totalIncome;\\r\\n        uint withdrawan;\\r\\n        // side : 0 = 'L\\\" && side : 1 =\\\"R\\\"\\r\\n        uint side; \\r\\n        bool buyStatus;\\r\\n        bool isRegistered;\\r\\n    }\\r\\n\\r\\n    struct MigrationLog{\\r\\n        address refferal_code;\\r\\n        uint amount;\\r\\n        uint TotalamountInUSD;\\r\\n        uint side;\\r\\n    }\\r\\n\\r\\n    bool public started;\\r\\n    bool private IsInitinalized;\\r\\n    address payable public admin;\\r\\n    uint[6] public package;\\r\\n    address payable public  withdrawAdmin;\\r\\n    mapping (address => User)  public userdata;\\r\\n    mapping (address =>MigrationLog ) public migrationLog;\\r\\n    mapping(uint=>mapping(address=>uint)) public typeWiseInvestment;\\r\\n    uint[10] public realFitPackages;\\r\\n    SmartSteps_Swap public swapContract;\\r\\n\\r\\n    function initinalize(address payable _admin,address payable _withdrawAdmin) external{\\r\\n        require(IsInitinalized ==false );\\r\\n        admin = _admin;\\r\\n        withdrawAdmin = _withdrawAdmin;\\r\\n        package = [49*1e8,99*1e8,222*1e8,444*1e8,999*1e8,2222*1e8];\\r\\n        priceFeed = AggregatorV3Interface(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE);\\r\\n        IsInitinalized = true ;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getLatestPrice() public view returns (int) {\\r\\n        (\\r\\n            /* uint80 roundID */,\\r\\n            int price,\\r\\n            /*uint startedAt */,\\r\\n            /*uint timeStamp*/,\\r\\n           /* uint80 answeredInRound*/\\r\\n        ) = priceFeed.latestRoundData();\\r\\n        return price;\\r\\n    }\\r\\n\\r\\n    function TotalusdPrice(int _amount) public view returns (int) {\\r\\n        int usdt = getLatestPrice();\\r\\n        return (usdt * _amount)/1e18;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function invest (address _refferal_code,uint _index,uint _side,uint packageType) public payable{\\r\\n        User storage user = userdata[msg.sender];\\r\\n        require((userdata[_refferal_code].deposit.length > 0 && _refferal_code != msg.sender) || admin == msg.sender|| userdata[_refferal_code].isRegistered==true,  \\\"No upline found\\\");\\r\\n        if (user.refferal_code == address(0) && admin != msg.sender) {\\r\\n            user.refferal_code = _refferal_code;\\r\\n        }\\r\\n        if(user.isRegistered==false && user.buyStatus==false){\\r\\n                user.side = _side;\\r\\n        } \\r\\n        if(packageType==0){\\r\\n            require(_index < package.length,\\\"you select wrong package\\\");\\r\\n            uint packageAmount = package[_index];\\r\\n            uint remaining;\\r\\n                if(user.buyStatus==true){\\r\\n                    remaining = packageAmount.sub(user.TotalamountInUSD);\\r\\n                        if(remaining==0){\\r\\n                            revert(\\\"you can't buy same package again\\\");\\r\\n                        }\\r\\n                    packageAmount = remaining;\\r\\n                }\\r\\n            require(uint256(TotalusdPrice(int(msg.value)))>= packageAmount,\\\"BNB amount does not match\\\");\\r\\n            user.TotalamountInUSD += packageAmount;\\r\\n            user.timestamp = block.timestamp;\\r\\n            uint transferAmount = getCalculatedBNbRecieved(packageAmount.mul(30).div(100));\\r\\n            swapContract.addFunds{value:transferAmount}();           \\r\\n            user.deposit.push(Deposit(msg.value , packageAmount, block.timestamp));\\r\\n            uint fee = getCalculatedBNbRecieved(packageAmount.mul(2).div(100));\\r\\n            withdrawAdmin.transfer(fee);\\r\\n            user.buyStatus = true;  \\r\\n        }else if(packageType==1){\\r\\n            require(_index < realFitPackages.length,\\\"you select wrong package\\\");\\r\\n            uint packageAmount = realFitPackages[_index];\\r\\n            uint remaining;\\r\\n            uint newAmount = typeWiseInvestment[packageType][msg.sender];\\r\\n            if(newAmount>0){\\r\\n                remaining = packageAmount.sub(newAmount);\\r\\n                    if(remaining==0){\\r\\n                        revert(\\\"you can't buy same package again\\\");\\r\\n                    }\\r\\n                packageAmount = remaining;\\r\\n            }\\r\\n            require(uint256(TotalusdPrice(int(msg.value)))>= packageAmount,\\\"BNB amount does not match\\\");      \\r\\n            user.isRegistered = true;\\r\\n            uint transferAmount = getCalculatedBNbRecieved(packageAmount.mul(70).div(100));\\r\\n            uint fee = getCalculatedBNbRecieved(packageAmount.mul(2).div(100));\\r\\n            withdrawAdmin.transfer(fee);\\r\\n            swapContract.addFunds{value:transferAmount}(); \\r\\n            typeWiseInvestment[packageType][msg.sender] += packageAmount;     \\r\\n        }else if(packageType==2){\\r\\n            require(user.isRegistered==false && user.buyStatus==false ,\\\"s\\\");\\r\\n            user.isRegistered = true;\\r\\n        }\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdraw(address _user,uint _usdamount) public {\\r\\n      require(withdrawAdmin == msg.sender,\\\"Permission denied\\\");\\r\\n      uint bnb = getCalculatedBNbRecieved(_usdamount);\\r\\n\\r\\n      userdata[_user].withdrawan += _usdamount;\\r\\n      payable(_user).transfer(bnb);\\r\\n      \\r\\n    }\\r\\n\\r\\n    \\r\\n  function migrateData(address _user,address _refferal_code,uint _amount,uint _side) public{\\r\\n        require(withdrawAdmin == msg.sender,\\\"Permission denied\\\");\\r\\n         User storage user = userdata[_user];\\r\\n        \\r\\n         MigrationLog storage mL = migrationLog[_user];\\r\\n         uint bnbAmount = getCalculatedBNbRecieved(_amount);\\r\\n         if(user.buyStatus==false){\\r\\n            user.refferal_code = _refferal_code;\\r\\n            mL.refferal_code = _refferal_code;\\r\\n            user.side = _side;\\r\\n            mL.side = _side;\\r\\n         }     \\r\\n         user.TotalamountInUSD += _amount;\\r\\n         user.amount+=bnbAmount;\\r\\n         mL.TotalamountInUSD += _amount;\\r\\n         mL.amount+=bnbAmount;\\r\\n         user.buyStatus = true;\\r\\n         user.deposit.push(Deposit(bnbAmount, _amount, block.timestamp));\\r\\n\\r\\n\\r\\n  }\\r\\n\\r\\n  function update(address _addrss) public {\\r\\n    require(msg.sender==withdrawAdmin);\\r\\n    realFitPackages =[10*1e8,20*1e8,50*1e8,100*1e8,200*1e8,500*1e8,1000*1e8,5000*1e8,25000*1e8,100000*1e8];\\r\\n    swapContract = SmartSteps_Swap(_addrss);\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n    function getDepositLength(address _useraddress) public view returns(uint){\\r\\n        User storage u = userdata[_useraddress] ;\\r\\n        return u.deposit.length;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getDeposit(uint _index ,address _useraddress) public view returns(uint,uint , uint){\\r\\n        User storage u = userdata[_useraddress] ;\\r\\n        return (u.deposit[_index].amount ,u.deposit[_index].amountInUSD ,u.deposit[_index].timestamp);\\r\\n    }\\r\\n    function getUserInfo( address _useraddress) public view returns (address ,uint ,uint){\\r\\n         User storage u2 = userdata[_useraddress];\\r\\n         return (u2.refferal_code,u2.amount,u2.timestamp);\\r\\n    }\\r\\n    \\r\\n\\r\\n    function getCalculatedBNbRecieved(uint256 _amount) public view returns(uint256) {\\r\\n\\t\\tuint256 usdt = uint256(getLatestPrice());\\r\\n\\t\\tuint256 recieved_bnb = (_amount*1e18/usdt*1e18)/1e18;\\r\\n\\t\\treturn recieved_bnb;\\r\\n\\t}\\r\\n\\r\\n    function getUserRegisterStatus(address _user) public view returns(bool isBuy , bool isRegisterd){\\r\\n        isBuy = userdata[_user].buyStatus;\\r\\n        isRegisterd = userdata[_user].isRegistered;\\r\\n    }\\r\\n\\t\\r\\n    \\r\\n       \\r\\n       \\r\\n} \\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface SmartSteps_Swap \\r\\n{\\r\\n  function addFunds() external payable;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"TotalusdPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getCalculatedBNbRecieved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_useraddress\",\"type\":\"address\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_useraddress\",\"type\":\"address\"}],\"name\":\"getDepositLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_useraddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserRegisterStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRegisterd\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_withdrawAdmin\",\"type\":\"address\"}],\"name\":\"initinalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refferal_code\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_side\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packageType\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_refferal_code\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_side\",\"type\":\"uint256\"}],\"name\":\"migrateData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrationLog\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"refferal_code\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalamountInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"side\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"package\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"realFitPackages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapContract\",\"outputs\":[{\"internalType\":\"contract SmartSteps_Swap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"typeWiseInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addrss\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userdata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"refferal_code\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalamountInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"side\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buyStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdamount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAdmin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SmartStepsV5", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}