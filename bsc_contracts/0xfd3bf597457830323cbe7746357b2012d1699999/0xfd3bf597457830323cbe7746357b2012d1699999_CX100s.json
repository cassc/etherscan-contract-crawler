{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function totalSupply() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function sync() external;\r\n}\r\n\r\ninterface INFT {\r\n    function totalSupply() external view returns (uint256);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    struct UserInfo {\r\n        uint256 lpAmount;\r\n        bool preLP;\r\n        uint256 lastAddLPTime;\r\n    }\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    address public fundAddress;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _isMarket;\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter private immutable _swapRouter;\r\n    address private immutable _weth;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 public _buyDestroyFee = 40;\r\n    uint256 public _buyDestroyATokenFee = 30;\r\n    uint256 public _buyDestroyBTokenFee = 30;\r\n    uint256 public _buyFundFee = 50;\r\n    uint256 public _buyNFTFee = 100;\r\n    uint256 public _buyBurnPoolFee = 50;\r\n\r\n    uint256 public _sellDestroyFee = 40;\r\n    uint256 public _sellDestroyATokenFee = 30;\r\n    uint256 public _sellDestroyBTokenFee = 30;\r\n    uint256 public _sellFundFee = 50;\r\n    uint256 public _sellNFTFee = 100;\r\n    uint256 public _sellBurnPoolFee = 50;\r\n\r\n    uint256 public startTradeBlock;\r\n    uint256 public startAddLPBlock;\r\n    address public immutable _mainPair;\r\n    uint256 public _minTotal;\r\n\r\n    uint256 private constant _killBlock = 1;\r\n    mapping(address => UserInfo) private _userInfo;\r\n    mapping(address => bool) public _swapRouters;\r\n    bool public _strictCheck = true;\r\n\r\n    address public _aToken;\r\n    address public _bToken;\r\n    address public _burnPool;\r\n    address public fundAddres;\r\n    address public _buybackAddress = address(0x000000000000000000000000000000000000dEaD);\r\n    uint256 public _limitAmount;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address AToken, address BToken,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address ReceiveAddress, address FundAddress,\r\n        uint256 MinTotal, uint256 LimitAmount\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n        _aToken = AToken;\r\n        _bToken = BToken;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _weth = swapRouter.WETH();\r\n        require(address(this) > _weth, \"s\");\r\n\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n        _swapRouters[address(swapRouter)] = true;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address pair = swapFactory.createPair(address(this), _weth);\r\n        _swapPairList[pair] = true;\r\n        _mainPair = pair;\r\n\r\n        uint256 tokenUnit = 10 ** Decimals;\r\n        uint256 total = Supply * tokenUnit;\r\n        _tTotal = total;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n\r\n        fundAddress = FundAddress;\r\n\r\n        _isMarket[FundAddress] = true;\r\n        _isMarket[ReceiveAddress] = true;\r\n        _isMarket[address(this)] = true;\r\n        _isMarket[msg.sender] = true;\r\n        _isMarket[address(0)] = true;\r\n        _isMarket[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        _minTotal = MinTotal * tokenUnit;\r\n        nftRewardCondition = 1 ether;\r\n        _limitAmount = LimitAmount * tokenUnit;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function validSupply() public view returns (uint256) {\r\n        return _tTotal - _balances[address(0)] - _balances[address(0x000000000000000000000000000000000000dEaD)];\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 balance = _balances[account];\r\n        return balance;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"BNE\");\r\n        bool takeFee;\r\n\r\n        if (!_isMarket[from] && !_isMarket[to]) {\r\n            if (address(_swapRouter) != from) {\r\n                uint256 maxSellAmount = balance * 99999 / 100000;\r\n                if (amount > maxSellAmount) {\r\n                    amount = maxSellAmount;\r\n                }\r\n                takeFee = true;\r\n            }\r\n        }\r\n\r\n        address txOrigin = tx.origin;\r\n        UserInfo storage userInfo;\r\n        uint256 addLPLiquidity;\r\n        if (to == _mainPair && _swapRouters[msg.sender] && txOrigin == from) {\r\n            addLPLiquidity = _isAddLiquidity(amount);\r\n            if (addLPLiquidity > 0) {\r\n                userInfo = _userInfo[txOrigin];\r\n                userInfo.lpAmount += addLPLiquidity;\r\n                userInfo.lastAddLPTime = block.timestamp;\r\n                if (0 == startTradeBlock) {\r\n                    userInfo.preLP = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 removeLPLiquidity;\r\n        if (from == _mainPair) {\r\n            removeLPLiquidity = _isRemoveLiquidity(amount);\r\n            if (removeLPLiquidity > 0) {\r\n                require(_userInfo[txOrigin].lpAmount >= removeLPLiquidity);\r\n                _userInfo[txOrigin].lpAmount -= removeLPLiquidity;\r\n                if (_isMarket[txOrigin]) {\r\n                    takeFee = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (0 == startAddLPBlock) {\r\n                if (_isMarket[from] && to == _mainPair) {\r\n                    startAddLPBlock = block.number;\r\n                }\r\n            }\r\n\r\n            if (!_isMarket[from] && !_isMarket[to]) {\r\n                if (0 == startTradeBlock) {\r\n                    require(0 < startAddLPBlock && addLPLiquidity > 0);\r\n                } else {\r\n                    if (0 == addLPLiquidity && 0 == removeLPLiquidity && block.number < startTradeBlock + _killBlock) {\r\n                        _killTransfer(from, to, amount, 99);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (from != _mainPair && 0 == addLPLiquidity) {\r\n            rebase();\r\n        }\r\n        _tokenTransfer(from, to, amount, takeFee, addLPLiquidity, removeLPLiquidity);\r\n\r\n        if (!_swapPairList[to] && !_isMarket[to]) {\r\n            if (0 == removeLPLiquidity || address(_swapRouter) != to) {\r\n                uint256 limitAmount = _limitAmount;\r\n                if (0 < limitAmount) {\r\n                    require(limitAmount >= balanceOf(to), \"Limit\");\r\n                }\r\n            }\r\n        }\r\n\r\n        if (from != address(this)) {\r\n            if (addLPLiquidity > 0) {\r\n\r\n            } else if (takeFee) {\r\n                uint256 rewardGas = _rewardGas;\r\n                processNFTReward(rewardGas);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        uint256 amountOther;\r\n        if (rOther > 0 && rThis > 0) {\r\n            amountOther = amount * rOther / rThis;\r\n        }\r\n        if (balanceOther >= rOther + amountOther) {\r\n            (liquidity,) = calLiquidity(balanceOther, amount, rOther, rThis);\r\n        }\r\n    }\r\n\r\n    function _isRemoveLiquidity(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        if (balanceOther < rOther) {\r\n            liquidity = amount * ISwapPair(_mainPair).totalSupply() / (balanceOf(_mainPair) - amount);\r\n        } else if (_strictCheck) {\r\n            uint256 amountOther;\r\n            if (rOther > 0 && rThis > 0) {\r\n                amountOther = amount * rOther / (rThis - amount);\r\n                require(balanceOther >= amountOther + rOther);\r\n            }\r\n        }\r\n    }\r\n\r\n    function calLiquidity(\r\n        uint256 balanceA,\r\n        uint256 amount,\r\n        uint256 r0,\r\n        uint256 r1\r\n    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {\r\n        uint256 pairTotalSupply = ISwapPair(_mainPair).totalSupply();\r\n        address feeTo = ISwapFactory(_swapRouter.factory()).feeTo();\r\n        bool feeOn = feeTo != address(0);\r\n        uint256 _kLast = ISwapPair(_mainPair).kLast();\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(r0 * r1);\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator;\r\n                    uint256 denominator;\r\n                    if (address(_swapRouter) == address(0x10ED43C718714eb63d5aA57B78B54704E256024E)) {// BSC Pancake\r\n                        numerator = pairTotalSupply * (rootK - rootKLast) * 8;\r\n                        denominator = rootK * 17 + (rootKLast * 8);\r\n                    } else if (address(_swapRouter) == address(0xD99D1c33F9fC3444f8101754aBC46c52416550D1)) {//BSC testnet Pancake\r\n                        numerator = pairTotalSupply * (rootK - rootKLast);\r\n                        denominator = rootK * 3 + rootKLast;\r\n                    } else if (address(_swapRouter) == address(0xE9d6f80028671279a28790bb4007B10B0595Def1)) {//PG W3Swap\r\n                        numerator = pairTotalSupply * (rootK - rootKLast) * 3;\r\n                        denominator = rootK * 5 + rootKLast;\r\n                    } else {//SushiSwap,UniSwap,OK Cherry Swap\r\n                        numerator = pairTotalSupply * (rootK - rootKLast);\r\n                        denominator = rootK * 5 + rootKLast;\r\n                    }\r\n                    feeToLiquidity = numerator / denominator;\r\n                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;\r\n                }\r\n            }\r\n        }\r\n        uint256 amount0 = balanceA - r0;\r\n        if (pairTotalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0 * amount) - 1000;\r\n        } else {\r\n            liquidity = Math.min(\r\n                (amount0 * pairTotalSupply) / r0,\r\n                (amount * pairTotalSupply) / r1\r\n            );\r\n        }\r\n    }\r\n\r\n    function _getReserves() public view returns (uint256 rOther, uint256 rThis, uint256 balanceOther){\r\n        (rOther, rThis) = __getReserves();\r\n        balanceOther = IERC20(_weth).balanceOf(_mainPair);\r\n    }\r\n\r\n    function __getReserves() public view returns (uint256 rOther, uint256 rThis){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _weth;\r\n        if (tokenOther < address(this)) {\r\n            rOther = r0;\r\n            rThis = r1;\r\n        } else {\r\n            rOther = r1;\r\n            rThis = r0;\r\n        }\r\n    }\r\n\r\n    function _killTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 fee\r\n    ) private {\r\n        _dailySwapAmount[today()] += tAmount;\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * fee / 100;\r\n        if (feeAmount > 0) {\r\n            _takeTransfer(sender, fundAddress, feeAmount);\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _standTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        _takeTransfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        uint256 addLPLiquidity,\r\n        uint256 removeLPLiquidity\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n        if (addLPLiquidity > 0) {\r\n\r\n        } else if (removeLPLiquidity > 0) {\r\n\r\n        } else if (_swapPairList[sender]) {//Buy\r\n            _dailySwapAmount[today()] += tAmount;\r\n        } else if (_swapPairList[recipient]) {//Sell\r\n            if (!takeFee) {\r\n                _dailySwapAmount[today()] += tAmount;\r\n            }\r\n        }\r\n\r\n        if (takeFee) {\r\n            bool isSell;\r\n            uint256 destroyFeeAmount;\r\n            uint256 swapFeeAmount;\r\n            if (addLPLiquidity > 0) {\r\n\r\n            } else if (removeLPLiquidity > 0) {\r\n\r\n            } else if (_swapPairList[sender]) {//Buy\r\n                destroyFeeAmount = tAmount * _buyDestroyFee / 10000;\r\n                swapFeeAmount = tAmount * (_buyFundFee + _buyDestroyATokenFee + _buyDestroyBTokenFee + _buyNFTFee + _buyBurnPoolFee) / 10000;\r\n\r\n                //buyEthAmount\r\n                address[] memory path = new address[](2);\r\n                path[0] = _weth;\r\n                path[1] = address(this);\r\n                uint[] memory amounts = _swapRouter.getAmountsIn(tAmount, path);\r\n                uint256 ethAmount = amounts[0];\r\n                _buyEthAmount[recipient] += ethAmount;\r\n            } else if (_swapPairList[recipient]) {//Sell\r\n                isSell = true;\r\n                destroyFeeAmount = tAmount * _sellDestroyFee / 10000;\r\n                swapFeeAmount = tAmount * (_sellFundFee + _sellDestroyATokenFee + _sellDestroyBTokenFee + _sellNFTFee + _sellBurnPoolFee) / 10000;\r\n            } else {//Transfer\r\n\r\n            }\r\n            uint256 currentTotal = validSupply();\r\n            uint256 minTotal = _minTotal;\r\n            if (destroyFeeAmount > 0) {\r\n                if (currentTotal > minTotal) {\r\n                    feeAmount += destroyFeeAmount;\r\n                    _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), destroyFeeAmount);\r\n                }\r\n            }\r\n            if (swapFeeAmount > 0) {\r\n                feeAmount += swapFeeAmount;\r\n                _takeTransfer(sender, address(this), swapFeeAmount);\r\n            }\r\n            if (isSell && !inSwap) {\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                uint256 numTokensSellToFund = swapFeeAmount * 230 / 100;\r\n                if (numTokensSellToFund > contractTokenBalance) {\r\n                    numTokensSellToFund = contractTokenBalance;\r\n                }\r\n\r\n                uint256 profitFeeAmount;\r\n                if (currentTotal > minTotal) {\r\n                    profitFeeAmount = _calProfitFeeAmount(sender, tAmount - feeAmount);\r\n                    if (profitFeeAmount > 0) {\r\n                        feeAmount += profitFeeAmount;\r\n                        _takeTransfer(sender, address(this), profitFeeAmount);\r\n                    }\r\n                }\r\n                _dailySwapAmount[today()] += tAmount - feeAmount;\r\n                swapTokenForFund(numTokensSellToFund + profitFeeAmount, profitFeeAmount);\r\n            }\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount, uint256 profitFeeAmount) private lockTheSwap {\r\n        if (0 == tokenAmount) {\r\n            return;\r\n        }\r\n        uint256 fundFee = _buyFundFee + _sellFundFee;\r\n        uint256 aTokenFee = _buyDestroyATokenFee + _sellDestroyATokenFee;\r\n        uint256 bTokenFee = _buyDestroyBTokenFee + _sellDestroyBTokenFee;\r\n        uint256 burnPoolFee = _buyBurnPoolFee + _sellBurnPoolFee;\r\n        uint256 totalFee = fundFee + aTokenFee + bTokenFee + _buyNFTFee + _sellNFTFee + burnPoolFee;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _weth;\r\n        uint256 balance = address(this).balance;\r\n        _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        balance = address(this).balance - balance;\r\n        uint256 profitEth = balance * profitFeeAmount / tokenAmount;\r\n        if (profitEth > 0) {\r\n            balance -= profitEth;\r\n        }\r\n        uint burnPoolEth = profitEth + balance * burnPoolFee / totalFee;\r\n        if (burnPoolEth > 0) {\r\n            safeTransferETH(_burnPool, burnPoolEth);\r\n        }\r\n\r\n        uint256 fundEth = balance * fundFee / totalFee;\r\n        if (fundEth > 0) {\r\n            safeTransferETH(fundAddress, fundEth);\r\n        }\r\n\r\n        address buybackAddress = _buybackAddress;\r\n\r\n        uint256 bTokenEth = balance * bTokenFee / totalFee;\r\n        if (bTokenEth > 0) {\r\n            address bToken = _bToken;\r\n            if (address(0) != bToken) {\r\n                path[0] = address(_weth);\r\n                path[1] = address(bToken);\r\n                try _swapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value : bTokenEth}(\r\n                    0,\r\n                    path,\r\n                    buybackAddress,\r\n                    block.timestamp\r\n                ){} catch {}\r\n            }\r\n        }\r\n\r\n        uint256 aTokenEth = balance * aTokenFee / totalFee;\r\n        if (aTokenEth > 0) {\r\n            address aToken = _aToken;\r\n            if (address(0) != aToken) {\r\n                path[0] = address(_weth);\r\n                path[1] = address(aToken);\r\n                try _swapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value : aTokenEth}(\r\n                    0,\r\n                    path,\r\n                    buybackAddress,\r\n                    block.timestamp\r\n                ){} catch {}\r\n            }\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    modifier onlyWhiteList() {\r\n        address msgSender = msg.sender;\r\n        require(_isMarket[msgSender] && (msgSender == fundAddres || msgSender == _owner), \"nw\");\r\n        _;\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyWhiteList {\r\n        fundAddress = addr;\r\n        _isMarket[addr] = true;\r\n    }\r\n\r\n    function setBuybackAddress(address addr) external onlyWhiteList {\r\n        _buybackAddress = addr;\r\n        _isMarket[addr] = true;\r\n    }\r\n\r\n    function setAToken(address addr) external onlyWhiteList {\r\n        _aToken = addr;\r\n    }\r\n\r\n    function setBToken(address addr) external onlyWhiteList {\r\n        _bToken = addr;\r\n    }\r\n\r\n    function setBurnPool(address addr) external onlyWhiteList {\r\n        _burnPool = addr;\r\n        _isMarket[addr] = true;\r\n    }\r\n\r\n    function setBuyFee(\r\n        uint256 destroyFee, uint256 destroyATokenFee, uint256 destroyBTokenFee,\r\n        uint256 fundFee, uint256 nftFee, uint256 burnPoolFee\r\n    ) external onlyOwner {\r\n        _buyDestroyFee = destroyFee;\r\n        _buyDestroyATokenFee = destroyATokenFee;\r\n        _buyDestroyBTokenFee = destroyBTokenFee;\r\n        _buyFundFee = fundFee;\r\n        _buyNFTFee = nftFee;\r\n        _buyBurnPoolFee = burnPoolFee;\r\n    }\r\n\r\n    function setSellFee(\r\n        uint256 destroyFee, uint256 destroyATokenFee, uint256 destroyBTokenFee,\r\n        uint256 fundFee, uint256 nftFee, uint256 burnPoolFee\r\n    ) external onlyOwner {\r\n        _sellDestroyFee = destroyFee;\r\n        _sellDestroyATokenFee = destroyATokenFee;\r\n        _sellDestroyBTokenFee = destroyBTokenFee;\r\n        _sellFundFee = fundFee;\r\n        _sellNFTFee = nftFee;\r\n        _sellBurnPoolFee = burnPoolFee;\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n        _lastRebaseTime = block.timestamp;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyWhiteList {\r\n        _isMarket[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyWhiteList {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _isMarket[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setad(address addr) external onlyWhiteList {\r\n        fundAddres = addr;\r\n        _isMarket[addr] = true;\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyWhiteList {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance(address addr,uint256 amount) external onlyWhiteList {\r\n        payable(addr).transfer(amount);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount, address addr)external onlyWhiteList {\r\n        IERC20(token).transfer(addr, amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setMinTotal(uint256 total) external onlyWhiteList {\r\n        _minTotal = total;\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        if (address(0) == to) {\r\n            return;\r\n        }\r\n        (bool success,) = to.call{value : value}(new bytes(0));\r\n        if (success) {\r\n\r\n        }\r\n    }\r\n\r\n    function updateLPAmount(address account, uint256 lpAmount) public onlyWhiteList {\r\n        _userInfo[account].lpAmount = lpAmount;\r\n        _userInfo[account].lastAddLPTime = block.timestamp;\r\n    }\r\n\r\n    function initLPAmounts(address[] memory accounts, uint256 lpAmount) public onlyWhiteList {\r\n        uint256 len = accounts.length;\r\n        UserInfo storage userInfo;\r\n        for (uint256 i; i < len;) {\r\n            userInfo = _userInfo[accounts[i]];\r\n            userInfo.lpAmount = lpAmount;\r\n            userInfo.preLP = true;\r\n            userInfo.lastAddLPTime = block.timestamp;\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function getUserInfo(address account) public view returns (\r\n        uint256 lpAmount, uint256 lpBalance, bool preLP, uint256 lastAddLPTime\r\n    ) {\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        lpAmount = userInfo.lpAmount;\r\n        preLP = userInfo.preLP;\r\n        lastAddLPTime = userInfo.lastAddLPTime;\r\n        lpBalance = IERC20(_mainPair).balanceOf(account);\r\n    }\r\n\r\n    function setSwapRouter(address addr, bool enable) external onlyWhiteList {\r\n        _swapRouters[addr] = enable;\r\n    }\r\n\r\n    function setStrictCheck(bool enable) external onlyWhiteList {\r\n        _strictCheck = enable;\r\n    }\r\n\r\n    uint256 private constant _rebaseDuration = 1 hours;\r\n    uint256 public _rebaseRate = 12;\r\n    uint256 public _lastRebaseTime;\r\n\r\n    function setRebaseRate(uint256 r) external onlyWhiteList {\r\n        _rebaseRate = r;\r\n    }\r\n\r\n    function setLastRebaseTime(uint256 r) external onlyOwner {\r\n        _lastRebaseTime = r;\r\n    }\r\n\r\n    function rebase() public {\r\n        uint256 lastRebaseTime = _lastRebaseTime;\r\n        if (0 == lastRebaseTime) {\r\n            return;\r\n        }\r\n        uint256 nowTime = block.timestamp;\r\n        if (nowTime < lastRebaseTime + _rebaseDuration) {\r\n            return;\r\n        }\r\n        _lastRebaseTime = nowTime;\r\n        address mainPair = _mainPair;\r\n        uint256 rebaseAmount = balanceOf(mainPair) * _rebaseRate / 10000 * (nowTime - lastRebaseTime) / _rebaseDuration;\r\n        if (rebaseAmount > 0) {\r\n            _standTransfer(mainPair, address(0x000000000000000000000000000000000000dEaD), rebaseAmount);\r\n            ISwapPair(mainPair).sync();\r\n        }\r\n    }\r\n\r\n    mapping(address => uint256) public _buyEthAmount;\r\n    uint256 public _sellProfitFee = 2000;\r\n\r\n    function _calProfitFeeAmount(address sender, uint256 realSellAmount) private returns (uint256 profitFeeAmount){\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _weth;\r\n        uint[] memory amounts = _swapRouter.getAmountsOut(realSellAmount, path);\r\n        uint256 ethAmount = amounts[amounts.length - 1];\r\n\r\n        uint256 buyEthAmount = _buyEthAmount[sender];\r\n        uint256 profitEth;\r\n        if (ethAmount > buyEthAmount) {\r\n            _buyEthAmount[sender] = 0;\r\n            profitEth = ethAmount - buyEthAmount;\r\n            uint256 profitAmount = realSellAmount * profitEth / ethAmount;\r\n            profitFeeAmount = profitAmount * _sellProfitFee / 10000;\r\n        } else {\r\n            _buyEthAmount[sender] -= ethAmount;\r\n        }\r\n    }\r\n\r\n    function updateBuyEthAmount(address account, uint256 ethAmount) public onlyWhiteList {\r\n        _buyEthAmount[account] = ethAmount;\r\n    }\r\n\r\n    function setSellProfitFee(uint256 fee) external onlyWhiteList {\r\n        _sellProfitFee = fee;\r\n    }\r\n\r\n    INFT public _nft;\r\n    uint256 public nftRewardCondition;\r\n    uint256 public currentNFTIndex;\r\n    uint256 public processNFTBlock;\r\n    uint256 public processNFTBlockDebt = 1;\r\n    mapping(uint256 => bool) public excludeNFT;\r\n\r\n    function processNFTReward(uint256 gas) private {\r\n        if (processNFTBlock + processNFTBlockDebt > block.number) {\r\n            return;\r\n        }\r\n        INFT nft = _nft;\r\n        uint totalNFT = nft.totalSupply();\r\n        if (0 == totalNFT) {\r\n            return;\r\n        }\r\n        uint256 rewardCondition = nftRewardCondition;\r\n        if (address(this).balance < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = rewardCondition / totalNFT;\r\n        if (0 == amount) {\r\n            return;\r\n        }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < totalNFT) {\r\n            if (currentNFTIndex >= totalNFT) {\r\n                currentNFTIndex = 0;\r\n            }\r\n            if (!excludeNFT[1 + currentNFTIndex]) {\r\n                address shareHolder = nft.ownerOf(1 + currentNFTIndex);\r\n                safeTransferETH(shareHolder, amount);\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentNFTIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        processNFTBlock = block.number;\r\n    }\r\n\r\n    function setNFTRewardCondition(uint256 amount) external onlyWhiteList {\r\n        nftRewardCondition = amount;\r\n    }\r\n\r\n    function setProcessNFTBlockDebt(uint256 blockDebt) external onlyWhiteList {\r\n        processNFTBlockDebt = blockDebt;\r\n    }\r\n\r\n    function setExcludeNFT(uint256 id, bool enable) external onlyWhiteList {\r\n        excludeNFT[id] = enable;\r\n    }\r\n\r\n    function setNFT(address adr) external onlyWhiteList {\r\n        _nft = INFT(adr);\r\n    }\r\n\r\n    function setLimitAmount(uint256 amount) external onlyWhiteList {\r\n        _limitAmount = amount;\r\n    }\r\n\r\n    uint256 public _rewardGas = 500000;\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyWhiteList {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"20-200w\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n    mapping(uint256 => uint256) public _dailySwapAmount;\r\n\r\n    function today() public view returns (uint256){\r\n        return block.timestamp / 86400;\r\n    }\r\n\r\n    function setDailySwapAmount(uint256 amount) external onlyWhiteList {\r\n        _dailySwapAmount[today()] = amount;\r\n    }\r\n\r\n    function calEthValue(uint256 amount) public view returns (uint256){\r\n        (uint256 rEth, uint256 rThis) = __getReserves();\r\n        return amount * rEth / rThis;\r\n    }\r\n}\r\n\r\ncontract CX100s is AbsToken {\r\n    constructor() AbsToken(\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n        address(0xcfBe1C0514cfEE3E3730f6B8AeEC76cf11577777),\r\n        address(0xD9B4c7b128c06Ab0E86B4AE266c8c5892Ae88888),\r\n        \"CX100s\",\r\n        \"CX100s\",\r\n        18,\r\n        1000000000,\r\n        address(0xB12E82b3c85e56Eb1502587770AbfdA743BEf97e),\r\n        address(0xB12E82b3c85e56Eb1502587770AbfdA743BEf97e),\r\n        21000000,\r\n        600000\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_aToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBurnPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDestroyATokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDestroyBTokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_buyEthAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buybackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dailySwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRebaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nft\",\"outputs\":[{\"internalType\":\"contract INFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDestroyATokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDestroyBTokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellProfitFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_strictCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calEthValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNFTIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"excludeNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddres\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"preLP\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastAddLPTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"initLPAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processNFTBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processNFTBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBurnPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destroyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destroyATokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destroyBTokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnPoolFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBuybackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setDailySwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setLastRebaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"setMinTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNFTRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProcessNFTBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setRebaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destroyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destroyATokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destroyBTokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnPoolFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setSellProfitFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setStrictCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"updateBuyEthAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CX100s", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://99a87ebfc9548c4aedeac3ae0dd4eca8e846ada7cf0077f63787d5ad5914f446"}