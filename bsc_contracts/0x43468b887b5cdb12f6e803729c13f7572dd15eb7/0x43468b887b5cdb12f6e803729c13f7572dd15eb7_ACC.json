{"SourceCode": "{\"ACC.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport \\\"./IBRC20.sol\\\";\\r\\nimport \\\"./IAccProfessionalManagers.sol\\\";\\r\\n\\r\\ncontract ACC is IBRC20 {\\r\\n    string public constant name = \\\"Ecological chain of consumption\\\";\\r\\n    string public constant symbol = \\\"ACC\\\";\\r\\n    uint8 public constant decimals = 18;\\r\\n    uint256 public override totalSupply = 130000000 * 10**decimals;\\r\\n    uint256 public burnLimit = 13000000 * 10**decimals;\\r\\n    address constant AccProfessionalManager = 0xBdBD7aECb08BA2aAfe6bb1aFDa3ed6642cDE97B2;\\r\\n    \\r\\n    mapping (address =\\u003e uint256) balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) allowances;\\r\\n    \\r\\n    constructor () {\\r\\n        balances[msg.sender] = totalSupply;\\r\\n        emit Transfer(address(0), msg.sender, totalSupply);\\r\\n    }\\r\\n    \\r\\n    function balanceOf(address account) external view override returns(uint256 balance) {\\r\\n        balance = balances[account];\\r\\n    }\\r\\n    \\r\\n    function allowance(address account, address spender) external view override returns(uint256){\\r\\n        return allowances[account][spender];\\r\\n    }\\r\\n    \\r\\n    function transfer(address recipient, uint256 amount) external override returns(bool success) {\\r\\n        if (recipient == address(0)) {\\r\\n            return burn(msg.sender, amount);\\r\\n        }\\r\\n        require(amount \\u003e 0, \\\"ACC: amount must be greater than 0\\\");\\r\\n        require(balances[msg.sender] \\u003e= amount, \\\"ACC: Insufficient balance\\\");\\r\\n        \\r\\n        return _transfer(msg.sender, recipient, amount);\\r\\n    }\\r\\n    \\r\\n    function approve(address spender, uint256 amount) external override returns(bool success) {\\r\\n        allowances[msg.sender][spender] = amount;\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        success = true;\\r\\n    }\\r\\n    \\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns(bool success){\\r\\n        require(recipient != address(0), \\\"ACC: The destination address must not be 0\\\");\\r\\n        require(amount \\u003e 0, \\\"ACC: amount must be greater than 0\\\");\\r\\n        require(allowances[sender][msg.sender] \\u003e= amount, \\\"ACC:Insufficient authorization\\\");\\r\\n        require(balances[sender] \\u003e= amount, \\\"ACC:Insufficient balance\\\");\\r\\n        \\r\\n        allowances[sender][msg.sender] -= amount;\\r\\n\\r\\n        return _transfer(sender, recipient, amount);\\r\\n    }\\r\\n    \\r\\n    function burn(address spender, uint256 amount) internal returns (bool success) {\\r\\n        require(amount \\u003e 0, \\\"ACC: burn amount of ACC must be greater than 0\\\");\\r\\n        uint supplyAmount = totalSupply - burnLimit - balances[address(0)];\\r\\n        require(supplyAmount \\u003e 0, \\\"ACC: Destruction up to limit\\\");\\r\\n        if (supplyAmount \\u003c amount) {\\r\\n            amount = supplyAmount;\\r\\n        }\\r\\n        require(balances[spender] \\u003e= amount, \\\"ACC: Insufficient balance\\\");\\r\\n        balances[spender] -= amount;\\r\\n        balances[address(0)] += amount;\\r\\n        emit Transfer(spender, address(0), amount);\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal returns (bool){\\r\\n        balances[sender] -= amount;\\r\\n        address pairAddress = IAccProfessionalManagers(AccProfessionalManager).pairAddress();\\r\\n        address feeAddress = IAccProfessionalManagers(AccProfessionalManager).feeAddress();\\r\\n\\r\\n        if (feeAddress != address(0) \\u0026\\u0026 recipient == pairAddress) {\\r\\n            //Handling fee to be deducted\\r\\n            uint feeAmount = amount * 3 / 100;\\r\\n            uint realAmount = amount - feeAmount;\\r\\n            balances[feeAddress] += feeAmount;\\r\\n            balances[recipient] += realAmount;\\r\\n            emit Transfer(sender, feeAddress, feeAmount);\\r\\n            emit Transfer(sender, recipient, realAmount);\\r\\n        } else {\\r\\n            balances[recipient] += amount;\\r\\n            emit Transfer(sender, recipient, amount);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n}\"},\"IAccProfessionalManagers.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n\\r\\ninterface IAccProfessionalManagers {\\r\\n    event CreateProposal(uint indexed id, uint8 indexed typeNum, address indexed proposer, address  newAddress);\\r\\n    event Agree(uint indexed id, address indexed adminAccount);\\r\\n\\r\\n    function verifyAddress() external view returns (address);\\r\\n    function accAddress() external view returns (address);\\r\\n    function isManager(address) external view returns (bool);\\r\\n    function isAdmin(address adminAccount) external returns (bool);\\r\\n    function isAgree(uint id, address addressAccount) external returns (bool);\\r\\n    function proposalsOf(uint id) external returns (uint8, uint8, address, address);\\r\\n    function createProposal(uint8 typeNum, address newAddress) external returns (uint);\\r\\n    function agree(uint proposalId) external returns (bool);\\r\\n    function feeAddress() external returns (address);\\r\\n    function pairAddress() external returns (address);\\r\\n}\"},\"IBRC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {ERC20Detailed}.\\r\\n */\\r\\ninterface IBRC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ACC", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://78564bc8fb0b726d64540d0782084b2cfaa79232bc216ce83d5f26c6d52c5584"}