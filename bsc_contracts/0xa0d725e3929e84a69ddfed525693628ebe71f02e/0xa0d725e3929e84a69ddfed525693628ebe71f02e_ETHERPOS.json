{"SourceCode": "/* SPDX-License-Identifier: MIT */\r\npragma solidity 0.8.6;\r\ninterface IBEP20 {\r\nfunction getOwner() external view returns (address);\r\nfunction name() external view returns (string memory);\r\nfunction symbol() external view returns (string memory);\r\nfunction totalSupply() external view returns (uint256);\r\nfunction maxSupply() external view returns (uint256);\r\nfunction decimals() external view returns (uint8);\r\nfunction balanceOf(address account) external view returns (uint256);\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\nfunction transfer(address recipient, uint256 amount) external returns (bool);\r\nfunction allowance(address owner, address spender) external view returns (uint256);\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\ninterface ETPOS20 {\r\nfunction getReferrer(address account) external view returns (address);\r\nfunction getDatabase(address account, string memory package, string memory params) external view returns (uint256);\r\n}\r\nlibrary SafeMath {\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nrequire(c >= a, \"SafeMath: addition overflow\");\r\nreturn c;\r\n}\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n}\r\nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b <= a, errorMessage);\r\nuint256 c = a - b;\r\nreturn c;\r\n}\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nuint256 c = a * b;\r\nrequire(c / a == b, \"SafeMath: multiplication overflow\");\r\nreturn c;\r\n}\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn div(a, b, \"SafeMath: division by zero\");\r\n}\r\nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b > 0, errorMessage);\r\nuint256 c = a / b;\r\nreturn c;\r\n}\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn mod(a, b, \"SafeMath: modulo by zero\");\r\n}\r\nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b != 0, errorMessage);\r\nreturn a % b;\r\n}\r\n}\r\ncontract ETHERPOS {\r\nIBEP20 private _token;\r\nIBEP20 private _stable;\r\nETPOS20 private _contract;\r\nusing SafeMath for uint256;\r\naddress private _owner;\r\naddress private _trash;\r\nuint256 private _blockSpacing;\r\nuint256 private _blockRewards;\r\nuint256 private _blockCycling;\r\nuint256 private _blockHalving;\r\nuint256 private _forceBurning;\r\nuint256 private _maxVirtualUnit;\r\nuint256 private _maxLogicalUnit;\r\nconstructor () {\r\n_owner = msg.sender;\r\n_trash = msg.sender;\r\n_blockSpacing = 691200;\r\n_blockRewards = 4;\r\n_blockCycling = 7776000;\r\n_blockHalving = 69120000;\r\n_forceBurning = 3888000;\r\n_maxVirtualUnit = 20000000;\r\n_maxLogicalUnit = 500000000;\r\n_packages['V20']['MIN'] = 800000;\r\n_packages['V20']['MAX'] = 20000000;\r\n_packages['V20']['LOCK'] = 8000000;\r\n_packages['V50']['MIN'] = 2000000;\r\n_packages['V50']['MAX'] = 50000000;\r\n_packages['V50']['LOCK'] = 20000000;\r\n_packages['V100']['MIN'] = 4000000;\r\n_packages['V100']['MAX'] = 100000000;\r\n_packages['V100']['LOCK'] = 40000000;\r\n_packages['V500']['MIN'] = 20000000;\r\n_packages['V500']['MAX'] = 500000000;\r\n_packages['V500']['LOCK'] = 200000000;\r\n_stable = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n_contract = ETPOS20(0x7d7d82082e6B2c92e0F58bF69A96A72105498332);\r\n}\r\nfunction safeTransferFrom(\r\nIBEP20 token, address sender, address recipient, uint256 amount\r\n) private {\r\nbool sent = token.transferFrom(sender, recipient, amount);\r\nrequire(sent, \"Token transfer failed\");\r\n}\r\nfunction getToken() external view returns (address) {\r\nreturn address(_token);\r\n}\r\nfunction setToken(address _newContract) external returns (bool) {\r\nif (msg.sender == _owner) {\r\n_token = IBEP20(_newContract);\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n}\r\nfunction getStable() external view returns (address) {\r\nreturn address(_stable);\r\n}\r\nfunction setStable(address _newContract) external returns (bool) {\r\nif (msg.sender == _owner) {\r\n_stable = IBEP20(_newContract);\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n}\r\nfunction getContract() external view returns (address) {\r\nreturn address(_contract);\r\n}\r\nfunction setContract(address _newContract) external returns (bool) {\r\nif (msg.sender == _owner) {\r\n_contract = ETPOS20(_newContract);\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n}\r\nfunction getTrash() external view returns (address) {\r\nreturn address(_trash);\r\n}\r\nfunction setTrash(address _newAddress) external returns (bool) {\r\nif (msg.sender == _owner) {\r\n_trash = address(_newAddress);\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n}\r\nmapping (address => uint256) private _balances;\r\nfunction getBalance(address account) external view returns (uint256) {\r\nreturn _virtualRewards(account);\r\n}\r\nfunction setBalance(address account) external returns (bool) {\r\nif (msg.sender == address(_token)) {\r\n_actualRewards(account);\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n}\r\nmapping (string => mapping (string => uint256)) private _packages;\r\nfunction getPackage(string memory _packageIs, string memory _param) external view returns (uint256) {\r\nreturn _packages[_packageIs][_param];\r\n}\r\nfunction setPackage(string memory _packageIs, string memory _param, uint256 _value) external returns (bool) {\r\nif (msg.sender == _owner) {\r\n_packages[_packageIs][_param] = _value;\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n}\r\nfunction ownerBNB() external returns (bool) {\r\nif (msg.sender == _owner) {\r\naddress payable owner = payable(msg.sender);\r\nowner.transfer(address(this).balance);\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n}\r\nfunction ownerETPOS() external returns (bool) {\r\nif (msg.sender == _owner) {\r\n_token.transfer(_owner, _token.balanceOf(address(this)));\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n}\r\nfunction ownerBUSD() external returns (bool) {\r\nif (msg.sender == _owner) {\r\n_stable.transfer(_owner, _stable.balanceOf(address(this)));\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n}\r\nmapping (address => address) private _referrer;\r\nfunction getReferrer(address account) external view returns (address) {\r\nreturn _referrer[account];\r\n}\r\nfunction setReferrer(address account, address referrer) external returns (bool) {\r\nrequire(msg.sender == _owner, \"Error : Sender Not Owner !\");\r\n_referrer[account] = referrer;\r\nreturn true;\r\n}\r\nfunction regAccount(address referrer) external returns (bool) {\r\nrequire(_referrer[msg.sender] == address(0x0), \"Error : Referrer Already Exist !\");\r\nrequire(_referrer[referrer] != address(0x0), \"Error : Referrer Not Registered !\");\r\n_referrer[msg.sender] = referrer;\r\nreturn true;\r\n}\r\nmapping (address => mapping(string => mapping(string => uint256))) private _DATABASE;\r\nfunction getDatabase(address account, string memory package, string memory params) external view returns (uint256) {\r\nreturn _DATABASE[account][package][params];\r\n}\r\nmapping (address => bool) private _migration;\r\nfunction migrateV2() external returns (bool) {\r\nrequire(_migration[msg.sender] == false, \"Error : Already Migrated !\");\r\nrequire(_contract.getReferrer(msg.sender) != address(0), \"Error : Invalid Account !\");\r\nrequire(_contract.getDatabase(msg.sender,'V20','AMOUNT')<=_maxLogicalUnit, \"Error : Invalid Amount !\");\r\nrequire(_contract.getDatabase(msg.sender,'V50','AMOUNT')<=_maxLogicalUnit, \"Error : Invalid Amount !\");\r\nrequire(_contract.getDatabase(msg.sender,'V100','AMOUNT')<=_maxLogicalUnit, \"Error : Invalid Amount !\");\r\nrequire(_contract.getDatabase(msg.sender,'V500','AMOUNT')<=_maxLogicalUnit, \"Error : Invalid Amount !\");\r\n_referrer[msg.sender] = _contract.getReferrer(msg.sender);\r\n_DATABASE[msg.sender]['V20']['AMOUNT'] = _contract.getDatabase(msg.sender,'V20','AMOUNT');\r\n_DATABASE[msg.sender]['V20']['AUX'] = _contract.getDatabase(msg.sender,'V20','AUX');\r\n_DATABASE[msg.sender]['V20']['START'] = _contract.getDatabase(msg.sender,'V20','START');\r\n_DATABASE[msg.sender]['V20']['CURRENT'] = _contract.getDatabase(msg.sender,'V20','CURRENT');\r\n_DATABASE[msg.sender]['V20']['END'] = _contract.getDatabase(msg.sender,'V20','END');\r\n_DATABASE[msg.sender]['V20']['BURN'] = _contract.getDatabase(msg.sender,'V20','BURN');\r\n_DATABASE[msg.sender]['V20']['HALVING'] = _contract.getDatabase(msg.sender,'V20','HALVING');\r\nif (_DATABASE[msg.sender]['V20']['AMOUNT'] > _maxLogicalUnit) {\r\n_blacklists[msg.sender] = true;\r\n}\r\n_DATABASE[msg.sender]['V50']['AMOUNT'] = _contract.getDatabase(msg.sender,'V50','AMOUNT');\r\n_DATABASE[msg.sender]['V50']['AUX'] = _contract.getDatabase(msg.sender,'V50','AUX');\r\n_DATABASE[msg.sender]['V50']['START'] = _contract.getDatabase(msg.sender,'V50','START');\r\n_DATABASE[msg.sender]['V50']['CURRENT'] = _contract.getDatabase(msg.sender,'V50','CURRENT');\r\n_DATABASE[msg.sender]['V50']['END'] = _contract.getDatabase(msg.sender,'V50','END');\r\n_DATABASE[msg.sender]['V50']['BURN'] = _contract.getDatabase(msg.sender,'V50','BURN');\r\n_DATABASE[msg.sender]['V50']['HALVING'] = _contract.getDatabase(msg.sender,'V50','HALVING');\r\nif (_DATABASE[msg.sender]['V50']['AMOUNT'] > _maxLogicalUnit) {\r\n_blacklists[msg.sender] = true;\r\n}\r\n_DATABASE[msg.sender]['V100']['AMOUNT'] = _contract.getDatabase(msg.sender,'V100','AMOUNT');\r\n_DATABASE[msg.sender]['V100']['AUX'] = _contract.getDatabase(msg.sender,'V100','AUX');\r\n_DATABASE[msg.sender]['V100']['START'] = _contract.getDatabase(msg.sender,'V100','START');\r\n_DATABASE[msg.sender]['V100']['CURRENT'] = _contract.getDatabase(msg.sender,'V100','CURRENT');\r\n_DATABASE[msg.sender]['V100']['END'] = _contract.getDatabase(msg.sender,'V100','END');\r\n_DATABASE[msg.sender]['V100']['BURN'] = _contract.getDatabase(msg.sender,'V100','BURN');\r\n_DATABASE[msg.sender]['V100']['HALVING'] = _contract.getDatabase(msg.sender,'V100','HALVING');\r\nif (_DATABASE[msg.sender]['V100']['AMOUNT'] > _maxLogicalUnit) {\r\n_blacklists[msg.sender] = true;\r\n}\r\n_DATABASE[msg.sender]['V500']['AMOUNT'] = _contract.getDatabase(msg.sender,'V500','AMOUNT');\r\n_DATABASE[msg.sender]['V500']['AUX'] = _contract.getDatabase(msg.sender,'V500','AUX');\r\n_DATABASE[msg.sender]['V500']['START'] = _contract.getDatabase(msg.sender,'V500','START');\r\n_DATABASE[msg.sender]['V500']['CURRENT'] = _contract.getDatabase(msg.sender,'V500','CURRENT');\r\n_DATABASE[msg.sender]['V500']['END'] = _contract.getDatabase(msg.sender,'V500','END');\r\n_DATABASE[msg.sender]['V500']['BURN'] = _contract.getDatabase(msg.sender,'V500','BURN');\r\n_DATABASE[msg.sender]['V500']['HALVING'] = _contract.getDatabase(msg.sender,'V500','HALVING');\r\nif (_DATABASE[msg.sender]['V500']['AMOUNT'] > _maxLogicalUnit) {\r\n_blacklists[msg.sender] = true;\r\n}\r\n_migration[msg.sender] = true;\r\nreturn true;\r\n}\r\nbool private _disableStaking;\r\nfunction getPaused() external view returns (bool) {\r\nreturn _disableStaking;\r\n}\r\nfunction setPause(bool status) external returns (bool) {\r\nif (msg.sender == _owner) {\r\n_disableStaking = status;\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n}\r\nfunction newStake(string memory package, uint256 amount, uint256 aux) external payable returns (bool) {\r\nrequire(_disableStaking == false, \"Error : Staking Program Disabled !\");\r\nrequire(_referrer[msg.sender] != address(0x0), \"Error : Account Not Registered !\");\r\nrequire(amount >= _packages['V20']['MIN'] && amount <= _packages['V500']['MAX'], \"Error : Invalid Amount !\");\r\nif (keccak256(abi.encodePacked(package)) == keccak256(abi.encodePacked(\"V20\"))) {\r\nrequire(amount >= _packages['V20']['MIN'] && amount <= _packages['V20']['MAX'], \"Error : V20 Amount !\");\r\nrequire(_DATABASE[msg.sender]['V20']['AMOUNT'] == uint256(0), \"Error : Already Running Package !\");\r\n} else if (keccak256(abi.encodePacked(package)) == keccak256(abi.encodePacked(\"V50\"))) {\r\nrequire(amount >= _packages['V50']['MIN'] && amount <= _packages['V50']['MAX'], \"Error : V50 Amount !\");\r\nrequire(_DATABASE[msg.sender]['V50']['AMOUNT'] == uint256(0), \"Error : Already Running Package !\");\r\n} else if (keccak256(abi.encodePacked(package)) == keccak256(abi.encodePacked(\"V100\"))) {\r\nrequire(amount >= _packages['V100']['MIN'] && amount <= _packages['V100']['MAX'], \"Error : V100 Amount !\");\r\nrequire(_DATABASE[msg.sender]['V100']['AMOUNT'] == uint256(0), \"Error : Already Running Package !\");\r\n} else {\r\nrequire(amount >= _packages['V500']['MIN'] && amount <= _packages['V500']['MAX'], \"Error : V500 Amount !\");\r\nrequire(_DATABASE[msg.sender]['V500']['AMOUNT'] == uint256(0), \"Error : Already Running Package !\");\r\n}\r\nrequire(_DATABASE[msg.sender][package]['HALVING'] == uint256(0), \"Error : Unable To ReStake !\");\r\nrequire(_token.allowance(msg.sender, address(this)) >= amount, \"Error : Token Not Approved !\");\r\nsafeTransferFrom(_token, msg.sender, address(this), amount);\r\naddress payable _upline = payable(_referrer[msg.sender]);\r\n_stable.transfer(_upline, uint256(_packages[package]['MAX']/10)*(10**12));\r\n_DATABASE[msg.sender][package]['AMOUNT'] = amount;\r\n_DATABASE[msg.sender][package]['AUX'] = aux;\r\n_DATABASE[msg.sender][package]['START'] = block.timestamp;\r\n_DATABASE[msg.sender][package]['CURRENT'] = block.timestamp;\r\n_DATABASE[msg.sender][package]['END'] = block.timestamp + _blockCycling;\r\n_DATABASE[msg.sender][package]['BURN'] = block.timestamp + _blockCycling + _forceBurning;\r\n_DATABASE[msg.sender][package]['HALVING'] = block.timestamp + _blockHalving;\r\nif (_DATABASE[msg.sender][package]['AMOUNT'] > _maxLogicalUnit) {\r\n_blacklists[msg.sender] = true;\r\n}\r\nreturn true;\r\n}\r\nfunction extStake(string memory package, uint256 amount, uint256 aux) external payable returns (bool) {\r\nrequire(_disableStaking == false, \"Error : Staking Program Disabled !\");\r\nrequire(_DATABASE[msg.sender][package]['AMOUNT'] > 0, \"Error : Invalid Running Package !\");\r\nrequire(amount >= _packages[package]['MIN'] && amount <= (_packages[package]['MAX']-_packages[package]['LOCK']), \"Error : Invalid Amount !\");\r\nrequire(block.timestamp > _DATABASE[msg.sender][package]['END'], \"Error : Unfinished Staking Period !\");\r\nrequire(block.timestamp < _DATABASE[msg.sender][package]['BURN'], \"Error : Unable To ReStake !\");\r\nrequire(_token.allowance(msg.sender, address(this)) >= amount, \"Error : Token Not Approved !\");\r\nsafeTransferFrom(_token, msg.sender, address(this), amount);\r\naddress payable _upline = payable(_referrer[msg.sender]);\r\n_stable.transfer(_upline, uint256(_packages[package]['MAX']/10)*(10**12));\r\n_DATABASE[msg.sender][package]['AMOUNT'] = _DATABASE[msg.sender][package]['AMOUNT'] + amount;\r\n_DATABASE[msg.sender][package]['AUX'] = aux;\r\n_DATABASE[msg.sender][package]['START'] = block.timestamp;\r\n_DATABASE[msg.sender][package]['CURRENT'] = block.timestamp;\r\n_DATABASE[msg.sender][package]['END'] = block.timestamp + _blockCycling;\r\n_DATABASE[msg.sender][package]['BURN'] = block.timestamp + _blockCycling + _forceBurning;\r\nif (_DATABASE[msg.sender][package]['AMOUNT'] > _maxLogicalUnit) {\r\n_blacklists[msg.sender] = true;\r\n}\r\nreturn true;\r\n}\r\nmapping (address => bool) private _blacklists;\r\nfunction getBlacklist(address account) external view returns (bool) {\r\nreturn _blacklists[account];\r\n}\r\nfunction setBlacklist(address account, bool status) external returns (bool) {\r\nif (msg.sender == _owner) {\r\n_blacklists[account] = status;\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n}\r\nfunction _virtualRewards(address account) internal view returns (uint256) {\r\nuint256 _V20Token = _calcVirtualRewards(account, 'V20');\r\nuint256 _V50Token = _calcVirtualRewards(account, 'V50');\r\nuint256 _V100Token = _calcVirtualRewards(account, 'V100');\r\nuint256 _V500Token = _calcVirtualRewards(account, 'V500');\r\nreturn _V20Token + _V50Token + _V100Token + _V500Token;\r\n}\r\nfunction _calcVirtualRewards(address account, string memory package) internal view returns (uint256) {\r\nuint256 _newToken = 0;\r\nif (block.timestamp >= _DATABASE[account][package]['CURRENT'] && _DATABASE[account][package]['CURRENT'] <= _DATABASE[account][package]['END']) {\r\nuint256 _clockdiff = 0;\r\nif (block.timestamp < _DATABASE[account][package]['END']) {\r\n_clockdiff = block.timestamp.sub(_DATABASE[account][package]['CURRENT']);\r\n} else {\r\n_clockdiff = _DATABASE[account][package]['END'].sub(_DATABASE[account][package]['CURRENT']);\r\n}\r\nuint256 _blockdiff = uint256(_clockdiff/_blockSpacing);\r\nif (_clockdiff > 0 && _blockdiff > 0) {\r\nuint256 _energys = 0;\r\nif (block.timestamp < _DATABASE[account][package]['HALVING']) {\r\n_energys = uint256((_DATABASE[account][package]['AMOUNT']*_blockRewards)/100);\r\n} else {\r\n_energys = uint256((_DATABASE[account][package]['AMOUNT']*_blockRewards)/200);\r\n}\r\nif (_energys > _maxVirtualUnit) {\r\n_energys = _maxVirtualUnit;\r\n}\r\nuint256 _rewards = _blockdiff.mul(_energys);\r\n_newToken = _newToken + _rewards;\r\nif (_blacklists[account] == true) {\r\n_newToken = 0;\r\n}\r\n}\r\n}\r\nreturn _newToken;\r\n}\r\nfunction _actualRewards(address account) internal {\r\n_calcActualRewards(account, 'V20');\r\n_calcActualRewards(account, 'V50');\r\n_calcActualRewards(account, 'V100');\r\n_calcActualRewards(account, 'V500');\r\n}\r\nfunction _calcActualRewards(address account, string memory package) internal {\r\nuint256 _energys = uint256((_DATABASE[account][package]['AMOUNT']*_blockRewards)/100);\r\nif (_energys > _maxVirtualUnit) {\r\n_blacklists[msg.sender] = true;\r\n}\r\nif (block.timestamp < _DATABASE[account][package]['END']) {\r\nuint256 _clockdiff = block.timestamp.sub(_DATABASE[account][package]['CURRENT']);\r\nuint256 _blockdiff = uint256(_clockdiff/_blockSpacing);\r\nif (_clockdiff > 0 && _blockdiff > 0) {\r\n_DATABASE[account][package]['CURRENT'] = _DATABASE[account][package]['CURRENT'] + (_blockdiff.mul(_blockSpacing));\r\n}\r\n} else {\r\n_DATABASE[account][package]['CURRENT'] = _DATABASE[account][package]['END'];\r\n}\r\nif (block.timestamp > _DATABASE[account][package]['END'] && _DATABASE[account][package]['AMOUNT'] > _packages[package]['LOCK']) {\r\n_token.transfer(account, _DATABASE[account][package]['AMOUNT'].sub(_packages[package]['LOCK']));\r\n_DATABASE[account][package]['AMOUNT'] = _packages[package]['LOCK'];\r\n}\r\nif (block.timestamp >= _DATABASE[account][package]['BURN'] && _DATABASE[account][package]['AMOUNT'] > 0) {\r\n_token.transfer(_trash, _DATABASE[account][package]['AMOUNT']);\r\n_DATABASE[account][package]['AMOUNT'] = 0;\r\n}\r\n}\r\nfunction syncBlockConfirm(address account) external returns (bool) {\r\nrequire(_token.allowance(account, address(this)) >= 1, \"Error : Token Not Approved !\");\r\nsafeTransferFrom(_token, account, address(this), 1);\r\nreturn true;\r\n}\r\nfunction getTotalStake(address account) external view returns (uint256) {\r\nreturn _DATABASE[account]['V20']['AMOUNT'] + _DATABASE[account]['V50']['AMOUNT'] + _DATABASE[account]['V100']['AMOUNT'] + _DATABASE[account]['V500']['AMOUNT'];\r\n}\r\nfunction getActiveStake(address account) external view returns (uint256) {\r\nuint256 _slots;\r\nif (block.timestamp >= _DATABASE[account]['V20']['START'] && block.timestamp <= _DATABASE[account]['V20']['END']) {\r\n_slots = _slots + 1;\r\n}\r\nif (block.timestamp >= _DATABASE[account]['V50']['START'] && block.timestamp <= _DATABASE[account]['V50']['END']) {\r\n_slots = _slots + 1;\r\n}\r\nif (block.timestamp >= _DATABASE[account]['V100']['START'] && block.timestamp <= _DATABASE[account]['V100']['END']) {\r\n_slots = _slots + 1;\r\n}\r\nif (block.timestamp >= _DATABASE[account]['V500']['START'] && block.timestamp <= _DATABASE[account]['V500']['END']) {\r\n_slots = _slots + 1;\r\n}\r\nreturn _slots;\r\n}\r\nfunction getBlockReward(address account, string memory package) external view returns (uint256) {\r\nif (block.timestamp >= _DATABASE[account][package]['START'] && block.timestamp <= _DATABASE[account][package]['END']) {\r\nreturn uint256((_DATABASE[account][package]['AMOUNT'] * _blockRewards) / 100);\r\n} else {\r\nreturn 0;\r\n}\r\n}\r\nfunction getTotalReward(address account, string memory package) external view returns (uint256) {\r\nif (block.timestamp >= _DATABASE[account][package]['START'] && block.timestamp <= _DATABASE[account][package]['END']) {\r\nuint256 blocks = uint256((block.timestamp - _DATABASE[account][package]['START']) / _blockSpacing);\r\nuint256 rewards = uint256((_DATABASE[account][package]['AMOUNT'] * _blockRewards) / 100);\r\nreturn blocks * rewards;\r\n} else {\r\nreturn 0;\r\n}\r\n}\r\nfunction getBlockProgress(address account, string memory package) external view returns (uint256) {\r\nuint256 second = block.timestamp - _DATABASE[account][package]['START'];\r\nuint256 blocks = uint256((block.timestamp - _DATABASE[account][package]['START']) / _blockSpacing);\r\nuint256 modulus = second - blocks.mul(_blockSpacing);\r\nuint256 result = uint256((modulus * 100) / _blockSpacing);\r\nif (result > 100) {\r\nresult = 100;\r\n}\r\nreturn result;\r\n}\r\nfunction getTotalProgress(address account, string memory package) external view returns (uint256) {\r\nuint256 blocks = uint256((block.timestamp - _DATABASE[account][package]['START']) / _blockSpacing);\r\nuint256 progress = uint256((blocks * 100) / 11);\r\nif (progress > 100) {\r\nprogress = 100;\r\n}\r\nreturn progress;\r\n}\r\nfunction getActiveSlot(address account, string memory package) external view returns (bool) {\r\nif (block.timestamp >= _DATABASE[account][package]['START'] && block.timestamp <= _DATABASE[account][package]['END']) {\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n}\r\nfunction isGracePeriod(address account, string memory package) external view returns (bool) {\r\nif (block.timestamp >= _DATABASE[account][package]['END'] && block.timestamp <= _DATABASE[account][package]['BURN']) {\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n}\r\nfunction getTimestamp() external view returns (uint256) {\r\nreturn block.timestamp;\r\n}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"package\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aux\",\"type\":\"uint256\"}],\"name\":\"extStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"package\",\"type\":\"string\"}],\"name\":\"getActiveSlot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getActiveStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"package\",\"type\":\"string\"}],\"name\":\"getBlockProgress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"package\",\"type\":\"string\"}],\"name\":\"getBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"package\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"params\",\"type\":\"string\"}],\"name\":\"getDatabase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_packageIs\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_param\",\"type\":\"string\"}],\"name\":\"getPackage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"package\",\"type\":\"string\"}],\"name\":\"getTotalProgress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"package\",\"type\":\"string\"}],\"name\":\"getTotalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTotalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"package\",\"type\":\"string\"}],\"name\":\"isGracePeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"package\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aux\",\"type\":\"uint256\"}],\"name\":\"newStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerBUSD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerETPOS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"regAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_packageIs\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_param\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPackage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"setReferrer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"setStable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setTrash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"syncBlockConfirm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ETHERPOS", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1e21ebdfc84da6d065f8e11472836fd2d14b442635925bf9b2c17e4023abe538"}