{"SourceCode": "pragma solidity ^0.8.5;\r\n\r\n  interface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint256);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  }\r\n\r\n  contract Context {\r\n    constructor () { }\r\n\r\n    function _msgSender() internal view returns (address) {\r\n      return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n      this;\r\n      return msg.data;\r\n    }\r\n  }\r\n\r\n  library SafeMath {\r\n  \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n      return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n      require(b <= a, errorMessage);\r\n      uint256 c = a - b;\r\n\r\n      return c;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n      // benefit is lost if 'b' is also tested.\r\n      // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n      if (a == 0) {\r\n        return 0;\r\n      }\r\n\r\n      uint256 c = a * b;\r\n      require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n      return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n      // Solidity only automatically asserts when dividing by 0\r\n      require(b > 0, errorMessage);\r\n      uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n      return c;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n      require(b != 0, errorMessage);\r\n      return a % b;\r\n    }\r\n  }\r\n\r\n  contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev Initializes the contract setting the deployer as the initial owner.\r\n    */\r\n    constructor () {\r\n      address msgSender = _msgSender();\r\n      _owner = msgSender;\r\n      emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the address of the current owner.\r\n    */\r\n    function owner() public view returns (address) {\r\n      return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n      require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n      _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n      emit OwnershipTransferred(_owner, address(0));\r\n      _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n      require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n      emit OwnershipTransferred(_owner, newOwner);\r\n      _owner = newOwner;\r\n    }\r\n  }\r\n\r\n  contract token is Context, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n    uint8 internal _decimals;\r\n    string internal _symbol;\r\n    string internal _name;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor(){}\r\n\r\n    function decimals() external view returns (uint256) {\r\n      return _decimals;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n      return _symbol;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n      return _name;\r\n    }\r\n\r\n    /**\r\n    * @dev See {BEP20-totalSupply}.\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n      return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n      return _balances[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n      _transfer(_msgSender(), recipient, amount);\r\n      return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n      return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n      _approve(_msgSender(), spender, amount);\r\n      return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n      _transfer(sender, recipient, amount);\r\n      _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n      return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n      _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n      return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n      _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n      return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) virtual internal {\r\n      require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n      require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n      _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n      _balances[recipient] = _balances[recipient].add(amount);\r\n      emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n      require(owner != address(0), \"BEP20: approve from the zero address\");\r\n      require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n      _allowances[owner][spender] = amount;\r\n      emit Approval(owner, spender, amount);\r\n    }\r\n  }\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\ninterface iGetpair{\r\n    function getPair(address dar1,address adr2)view external returns(address adr);\r\n}\r\n\r\ncontract swapRecipient is Ownable{\r\n    constructor(){}\r\n    IBEP20 rewardsToken = IBEP20(0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c);\r\n    function withDraw() public onlyOwner{\r\n        rewardsToken.transfer(owner(),rewardsToken.balanceOf(address(this)));\r\n    }\r\n}\r\n\r\n\r\ncontract PHP is token{\r\n    using SafeMath for uint256;\r\n\r\n    IBEP20 rewardsToken = IBEP20(0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c);\r\n    IDEXRouter router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n    address BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address public pair1;\r\n    address public pair2;\r\n    address public pair3;\r\n    address public pair4;\r\n\r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping (address => bool) public isDividendExempt;\r\n    mapping (address => bool) public isPair;\r\n    mapping (address => bool) public isBot;\r\n    mapping (address => bool) public isInviter;\r\n    bool public whiteMod = false;\r\n  \r\n    mapping (address => address) public invite;\r\n    mapping (address => uint256 ) public DividendsIndex;\r\n    mapping (uint256 => address ) public IndexToDividends;\r\n    \r\n    uint256 public totalIndex = 1;\r\n    uint256 public index = 1;\r\n\r\n    uint256 public liquidityFee = 300;\r\n    uint256 public burnFee = 0;\r\n    uint256 public reflectionFee = 900;\r\n    uint256 public marketingFee = 100;\r\n    uint256 public totalSellFee = liquidityFee + burnFee + reflectionFee + marketingFee;\r\n    \r\n    uint256 public totalBuyFee = 1300;\r\n\r\n    uint256[] public inviteFees = new uint256[](10);\r\n    mapping (address => bool) public isAppointFee;\r\n    mapping (address => uint256[]) public appointFee;\r\n    \r\n    uint256 public feeDenominator = 10000;\r\n\r\n    address public market;\r\n    address public PPKBuyBack;\r\n\r\n    swapRecipient public SRT;\r\n\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor()  {\r\n        iGetpair gp = iGetpair(0xF1306F783A56F81468583DbBddeF41e9CF521f7e);\r\n\r\n        pair1 = gp.getPair(WBNB,address(this));\r\n        pair2 = gp.getPair(address(rewardsToken),address(this));\r\n        pair3 = gp.getPair(BUSD,address(this));\r\n        pair4 = gp.getPair(USDT,address(this));\r\n       \r\n        SRT = new swapRecipient();\r\n\r\n        address team = 0x88Ed3D4d37BD693c7B9CEc4A3a71B6832CaA5520;\r\n        market = 0x4Bb0d5cAD1BE2D88019b1F36A31CD7Af2222209f;\r\n        PPKBuyBack = 0x89952d4E5543697963b1c80Cab5CBe09A18bCcfc;\r\n\r\n        _setInviteFees(500,300,200,0,0,\r\n                    0,0,0,0,0);\r\n\r\n        isFeeExempt[team] = true;\r\n        isFeeExempt[market] = true;\r\n        isFeeExempt[PPKBuyBack] = true;\r\n        isFeeExempt[DEAD] = true;\r\n        isFeeExempt[address(this)] = true;\r\n\r\n        isInviter[team] = true;\r\n\r\n        isDividendExempt[pair1] = true;\r\n        isDividendExempt[pair2] = true;\r\n        isDividendExempt[pair3] = true;\r\n        isDividendExempt[pair4] = true;\r\n        isDividendExempt[DEAD] = true;\r\n        isDividendExempt[address(this)] = true;\r\n\r\n        isPair[pair1] = true;\r\n        isPair[pair2] = true;\r\n        isPair[pair3] = true;\r\n        isPair[pair4] = true;\r\n\r\n        _name = \"people help people\";\r\n        _symbol = \"people help people\";\r\n        _decimals = 9;\r\n        _totalSupply = 30000000 * (10 ** _decimals);\r\n        _balances[team] = _totalSupply;\r\n\r\n        setIndex(team,true);\r\n        emit Transfer(address(0), team, _totalSupply);\r\n      \r\n    }\r\n    function changeMod(bool bl) public onlyOwner{\r\n      whiteMod = bl;\r\n    }\r\n    function setIsInviter(address[] memory adrs,bool bl)public onlyOwner{\r\n      for(uint256 i=0;i<adrs.length;i++){\r\n        isInviter[adrs[i]] = bl;\r\n      }\r\n    }\r\n    function setAppointFee(address adr,\r\n                           uint256 f0,uint256 f1,uint256 f2,uint256 f3,uint256 f4,\r\n                           uint256 f5,uint256 f6,uint256 f7,uint256 f8,uint256 f9) public onlyOwner{\r\n        isAppointFee[adr] = true;\r\n        appointFee[adr] = new uint256[](10);\r\n        appointFee[adr][0] = f0 ; appointFee[adr][1] = f1 ; appointFee[adr][2] = f2 ; appointFee[adr][3] = f3 ; appointFee[adr][4] = f4 ;\r\n        appointFee[adr][5] = f5 ; appointFee[adr][6] = f6 ; appointFee[adr][7] = f7 ; appointFee[adr][8] = f8 ; appointFee[adr][9] = f9 ;\r\n\r\n    }\r\n    function rmAppointFee(address adr)public onlyOwner{\r\n        isAppointFee[adr] = false;\r\n    }\r\n    function _setInviteFees(uint256 f0,uint256 f1,uint256 f2,uint256 f3,uint256 f4,\r\n                           uint256 f5,uint256 f6,uint256 f7,uint256 f8,uint256 f9) internal  {\r\n        inviteFees[0] = f0 ; inviteFees[1] = f1 ; inviteFees[2] = f2 ; inviteFees[3] = f3 ; inviteFees[4] = f4 ;\r\n        inviteFees[5] = f5 ; inviteFees[6] = f6 ; inviteFees[7] = f7 ; inviteFees[8] = f8 ; inviteFees[9] = f9 ;\r\n    }\r\n\r\n    function setInviteFees(uint256 f0,uint256 f1,uint256 f2,uint256 f3,uint256 f4,\r\n                           uint256 f5,uint256 f6,uint256 f7,uint256 f8,uint256 f9)public onlyOwner{\r\n        _setInviteFees(f0,f1,f2,f3,f4,\r\n                    f5,f6,f7,f8,f9);\r\n    }\r\n\r\n    function rmFee()public{\r\n          require(msg.sender == market,\"\");\r\n          liquidityFee = 0;\r\n          burnFee = 0;\r\n          reflectionFee = 0;\r\n          marketingFee = 0;\r\n          totalSellFee = 0;\r\n        \r\n          _setInviteFees(0,0,0,0,0,\r\n                    0,0,0,0,0);\r\n          totalBuyFee = 0;\r\n    }\r\n    function changeFee(\r\n        uint256  _liquidityFee ,\r\n        uint256  _burnFee ,\r\n        uint256  _reflectionFee ,\r\n        uint256  _marketingFee ,\r\n        uint256  _totalSellFee ,\r\n        uint256  _totalBuyFee\r\n    )public onlyOwner{\r\n        liquidityFee = _liquidityFee;\r\n        burnFee = _burnFee;\r\n        reflectionFee = _reflectionFee;\r\n        marketingFee = _marketingFee;\r\n        totalSellFee = _totalSellFee;\r\n\r\n        totalBuyFee = _totalBuyFee;\r\n    }\r\n    function setIsPair(address adr,bool bl)public onlyOwner{\r\n        isPair[adr] = bl;\r\n    }\r\n    function setBot(address[] memory adrs,bool bl) public onlyOwner{\r\n      for(uint256 i = 0;i<adrs.length;i++){\r\n\t\t    isBot[adrs[i]] = bl;\r\n        isDividendExempt[adrs[i]] =bl;\r\n      }\r\n\t  }\r\n    function setFeeExempt(address[] memory adrs,bool bl)public onlyOwner{\r\n      for(uint256 i=0;i<adrs.length;i++){\r\n          isFeeExempt[adrs[i]] = bl;\r\n        }\r\n    }\r\n    function setIsDividendExempt(address adr , bool bl)public onlyOwner{\r\n        isDividendExempt[adr] = bl;\r\n    }\r\n    function canSetInvite(address adr) public view returns(bool){\r\n        return invite[adr] == address(0)\r\n        && balanceOf(adr) == 0;\r\n    }\r\n    function setInvite(address from,address to) internal {\r\n        invite[to] = from;\r\n    }\r\n    function reSetInvite(address from,address to) public onlyOwner {\r\n        invite[to] = from;\r\n    }\r\n    function changeMarket(address adr) public {\r\n        require(msg.sender == market,\"\");\r\n        market = adr;\r\n    }\r\n    function changePPKBuyBack(address adr) public {\r\n        require(msg.sender == PPKBuyBack,\"\");\r\n        PPKBuyBack = adr;\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount) override internal {\r\n        require(amount > 1,\"\");\r\n        require(!isBot[sender],\"\");\r\n        if(amount == balanceOf(sender)){amount -= 1;}\r\n\r\n        if(inSwap){\r\n            super._transfer(sender, recipient, amount); \r\n            return;\r\n        }\r\n\r\n        if( !isPair[sender] && !isPair[recipient] && canSetInvite(recipient)){\r\n          if(whiteMod){\r\n            if(isInviter[sender]){\r\n              setInvite(sender,recipient);\r\n            }\r\n          }else{\r\n            setInvite(sender,recipient);\r\n          }\r\n        }\r\n\r\n        if(isFeeExempt[sender] || isFeeExempt[recipient]){\r\n            super._transfer(sender, recipient, amount); \r\n        }else{\r\n\r\n            if(shouldSwap()){swapToDividends();}\r\n\r\n            uint256 feeAmount = 0;\r\n            //buy\r\n            if(isPair[sender]){\r\n                if(totalBuyFee > 0){\r\n                    feeAmount = amount.mul(totalBuyFee).div(feeDenominator);\r\n                    _takeInviterFee(sender,recipient,feeAmount);\r\n                }\r\n                _splitOtherToken();\r\n            }\r\n            //sell\r\n            if(isPair[recipient]){\r\n                if(totalSellFee > 0){\r\n                    feeAmount = amount.mul(totalSellFee).div(feeDenominator);\r\n                    super._transfer(sender,address(this),feeAmount);\r\n                }\r\n                _splitOtherToken();\r\n            }\r\n            //transfer\r\n            if(!isPair[sender] && !isPair[recipient]){\r\n                if(totalBuyFee > 0){\r\n                    feeAmount = amount.mul(totalBuyFee).div(feeDenominator);\r\n                    super._transfer(sender,address(this),feeAmount);\r\n                }\r\n            }\r\n            amount -= feeAmount;\r\n            super._transfer(sender,recipient,amount);  \r\n        }\r\n\r\n        \r\n        if(balanceOf(sender) <= 1){setIndex(sender,false);}\r\n        if(balanceOf(recipient) > 1){setIndex(recipient,true);}\r\n    }\r\n\r\n    function shouldSwap() internal view returns (bool) {\r\n        return msg.sender != pair2\r\n        && !inSwap\r\n        && balanceOf(address(this)) >= swapThreshold();\r\n    }\r\n\r\n    function swapThreshold() public view returns(uint256){\r\n        uint256 nump = balanceOf(pair2) + balanceOf(pair1);\r\n        if(nump > 0){\r\n            return nump.div(1000);\r\n        }else{\r\n            return totalSupply() ; \r\n        }\r\n    }\r\n\r\n    function swapToRewardToken(uint256 amount) private {\r\n\r\n        _approve(address(this),address(router),amount);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(rewardsToken);\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(SRT),\r\n            block.timestamp\r\n        );\r\n        SRT.withDraw();\r\n\r\n    }\r\n\r\n    function swapToDividends() internal swapping {\r\n\r\n        uint256 swapamount = balanceOf( address(this) );\r\n        uint256 totalFee  = totalSellFee;\r\n        uint256 burnamount = swapamount.mul(burnFee).div(totalFee);\r\n        if(burnamount > 0){\r\n            super._transfer(address(this), DEAD, burnamount);\r\n            swapamount = swapamount.sub(burnamount);}\r\n\r\n        uint256 dynamicLiquidityFee = liquidityFee;\r\n        uint256 amountToLiquify = swapamount.mul(dynamicLiquidityFee).div(totalFee.sub(burnFee)).div(2);\r\n        uint256 amountToSwap = swapamount.sub(amountToLiquify);\r\n\r\n        uint256 beforAmount = rewardsToken.balanceOf(address(this));\r\n\r\n        swapToRewardToken(amountToSwap);\r\n\r\n        uint256 newAmount = rewardsToken.balanceOf(address(this)) - beforAmount;\r\n\r\n        uint256 totalTokenFee = totalFee.sub(burnFee).sub(dynamicLiquidityFee.div(2));\r\n        uint256 amountTokenLiquidity = newAmount.mul(dynamicLiquidityFee).div(totalTokenFee).div(2);\r\n        uint256 amountTokenReflection = newAmount.mul(reflectionFee).div(totalTokenFee);\r\n        uint256 amountTokenMarketing = newAmount.sub(amountTokenLiquidity).sub(amountTokenReflection);\r\n        uint256 mk1 = amountTokenMarketing.div(2);\r\n        uint256 mk2 = amountTokenMarketing.sub(mk1);\r\n\r\n        rewardsToken.transfer(PPKBuyBack,mk1);\r\n        rewardsToken.transfer(market,mk2);\r\n\r\n        if(amountToLiquify > 0){\r\n\r\n            _approve(address(this),address(router),amountToLiquify);\r\n            rewardsToken.approve(address(router),amountTokenLiquidity);\r\n\r\n            router.addLiquidity(\r\n                address(this),\r\n                address(rewardsToken),\r\n                amountToLiquify,\r\n                amountTokenLiquidity,\r\n                0,\r\n                0,\r\n                DEAD,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n    \r\n\r\n    function _takeInviterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 feeAmount\r\n    ) private {\r\n        address inviter;\r\n        address invitees = recipient;\r\n        uint256 totalFeeAmount = feeAmount;\r\n        uint256 inviteAmount;\r\n\r\n        for(uint256 i = 0;i < 10;i++){\r\n            inviter = invite[invitees];\r\n            if(inviter == address(0)){\r\n                i = 10;\r\n            }else{\r\n                if(isAppointFee[inviter]){\r\n                    inviteAmount = feeAmount.mul(appointFee[inviter][i]).div(totalBuyFee);\r\n                }else{\r\n                    inviteAmount = feeAmount.mul(inviteFees[i]).div(totalBuyFee);\r\n                }\r\n                if(inviteAmount > totalFeeAmount){inviteAmount = totalFeeAmount;}\r\n                if(inviteAmount > 0){\r\n                    super._transfer(sender,inviter,inviteAmount);\r\n                    if(balanceOf(inviter) > 1){setIndex(inviter,true);}\r\n                    totalFeeAmount -= inviteAmount;\r\n                }\r\n                invitees = inviter;\r\n\r\n                if(totalFeeAmount == 0){\r\n                    i = 10;\r\n                }\r\n            }\r\n        }\r\n        if(totalFeeAmount > 0){\r\n            super._transfer(sender,address(this),totalFeeAmount);\r\n        }\r\n    }\r\n\r\n    function setIndex(address adr,bool bl) internal {\r\n        if(bl){\r\n            if(DividendsIndex[adr] == 0){\r\n                DividendsIndex[adr] = totalIndex;\r\n                IndexToDividends[totalIndex] = adr;\r\n                totalIndex += 1;\r\n            }\r\n        }else{\r\n            if(DividendsIndex[adr] != 0){\r\n                totalIndex -= 1;\r\n                uint256 _index = DividendsIndex[adr];\r\n                address endAdr = IndexToDividends[totalIndex];\r\n\r\n                IndexToDividends[_index] =  endAdr;\r\n                DividendsIndex[endAdr] = _index;\r\n\r\n                IndexToDividends[totalIndex] = address(0);\r\n                DividendsIndex[adr] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _splitOtherToken() private {\r\n        uint256 thisAmount = rewardsToken.balanceOf(address(this));\r\n        if(thisAmount >= 1 * 10**9){\r\n            _splitOtherTokenSecond(thisAmount);\r\n        }\r\n    }\r\n    function _splitOtherTokenSecond(uint256 thisAmount) private {\r\n        uint256 rewardAmount;\r\n        address rewardAdr;\r\n        for(uint256 i=0;i<8;i++){\r\n            rewardAdr = IndexToDividends[index];\r\n            if(!isDividendExempt[rewardAdr]){\r\n                rewardAmount = balanceOf(rewardAdr).mul(thisAmount).div(totalSupply());\r\n                if(rewardAmount > 10){\r\n                    try rewardsToken.transfer(rewardAdr,rewardAmount) {} catch {}\r\n                }\r\n            }\r\n            index += 1;\r\n            if(index == totalIndex){\r\n                index = 1;\r\n                i = 8;\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"DividendsIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IndexToDividends\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PPKBuyBack\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SRT\",\"outputs\":[{\"internalType\":\"contract swapRecipient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"appointFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"canSetInvite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalBuyFee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"changeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bl\",\"type\":\"bool\"}],\"name\":\"changeMod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"changePPKBuyBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invite\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inviteFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAppointFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInviter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"reSetInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"rmAppointFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rmFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"f0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f6\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f7\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f8\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f9\",\"type\":\"uint256\"}],\"name\":\"setAppointFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"bl\",\"type\":\"bool\"}],\"name\":\"setBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"bl\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"f0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f6\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f7\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f8\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f9\",\"type\":\"uint256\"}],\"name\":\"setInviteFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bl\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"bl\",\"type\":\"bool\"}],\"name\":\"setIsInviter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bl\",\"type\":\"bool\"}],\"name\":\"setIsPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteMod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PHP", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f85c9acf1c459da9dfc1ce242f5b4fc5ce1d3a6b4bac90641c3827a035db46e8"}