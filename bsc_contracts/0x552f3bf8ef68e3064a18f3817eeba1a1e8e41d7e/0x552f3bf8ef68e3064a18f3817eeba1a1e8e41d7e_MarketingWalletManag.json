{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n// File: contracts/interface/IPancakeswapRouter.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPancakeswapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interface/IPancakeswapPair.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPancakeswapPair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts/interface/IPancakeswapFactory.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPancakeswapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/VRFV2WrapperInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface VRFV2WrapperInterface {\r\n  /**\r\n   * @return the request ID of the most recent VRF V2 request made by this wrapper. This should only\r\n   * be relied option within the same transaction that the request was made.\r\n   */\r\n  function lastRequestId() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Calculates the price of a VRF request with the given callbackGasLimit at the current\r\n   * @notice block.\r\n   *\r\n   * @dev This function relies on the transaction gas price which is not automatically set during\r\n   * @dev simulation. To estimate the price at a specific gas price, use the estimatePrice function.\r\n   *\r\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\r\n   */\r\n  function calculateRequestPrice(uint32 _callbackGasLimit) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Estimates the price of a VRF request with a specific gas limit and gas price.\r\n   *\r\n   * @dev This is a convenience function that can be called in simulation to better understand\r\n   * @dev pricing.\r\n   *\r\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\r\n   * @param _requestGasPriceWei is the gas price in wei used for the estimation.\r\n   */\r\n  function estimateRequestPrice(uint32 _callbackGasLimit, uint256 _requestGasPriceWei) external view returns (uint256);\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n\r\n  function name() external view returns (string memory tokenName);\r\n\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n\r\n  function transferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  ) external returns (bool success);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool success);\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/VRFV2WrapperConsumerBase.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/** *******************************************************************************\r\n * @notice Interface for contracts using VRF randomness through the VRF V2 wrapper\r\n * ********************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Create VRF V2 requests without the need for subscription management. Rather than creating\r\n * @dev and funding a VRF V2 subscription, a user can use this wrapper to create one off requests,\r\n * @dev paying up front rather than at fulfillment.\r\n *\r\n * @dev Since the price is determined using the gas price of the request transaction rather than\r\n * @dev the fulfillment transaction, the wrapper charges an additional premium on callback gas\r\n * @dev usage, in addition to some extra overhead costs associated with the VRFV2Wrapper contract.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFV2WrapperConsumerBase. The consumer must be funded\r\n * @dev with enough LINK to make the request, otherwise requests will revert. To request randomness,\r\n * @dev call the 'requestRandomness' function with the desired VRF parameters. This function handles\r\n * @dev paying for the request based on the current pricing.\r\n *\r\n * @dev Consumers must implement the fullfillRandomWords function, which will be called during\r\n * @dev fulfillment with the randomness result.\r\n */\r\nabstract contract VRFV2WrapperConsumerBase {\r\n  LinkTokenInterface internal immutable LINK;\r\n  VRFV2WrapperInterface internal immutable VRF_V2_WRAPPER;\r\n\r\n  /**\r\n   * @param _link is the address of LinkToken\r\n   * @param _vrfV2Wrapper is the address of the VRFV2Wrapper contract\r\n   */\r\n  constructor(address _link, address _vrfV2Wrapper) {\r\n    LINK = LinkTokenInterface(_link);\r\n    VRF_V2_WRAPPER = VRFV2WrapperInterface(_vrfV2Wrapper);\r\n  }\r\n\r\n  /**\r\n   * @dev Requests randomness from the VRF V2 wrapper.\r\n   *\r\n   * @param _callbackGasLimit is the gas limit that should be used when calling the consumer's\r\n   *        fulfillRandomWords function.\r\n   * @param _requestConfirmations is the number of confirmations to wait before fulfilling the\r\n   *        request. A higher number of confirmations increases security by reducing the likelihood\r\n   *        that a chain re-org changes a published randomness outcome.\r\n   * @param _numWords is the number of random words to request.\r\n   *\r\n   * @return requestId is the VRF V2 request ID of the newly created randomness request.\r\n   */\r\n  function requestRandomness(\r\n    uint32 _callbackGasLimit,\r\n    uint16 _requestConfirmations,\r\n    uint32 _numWords\r\n  ) internal returns (uint256 requestId) {\r\n    LINK.transferAndCall(\r\n      address(VRF_V2_WRAPPER),\r\n      VRF_V2_WRAPPER.calculateRequestPrice(_callbackGasLimit),\r\n      abi.encode(_callbackGasLimit, _requestConfirmations, _numWords)\r\n    );\r\n    return VRF_V2_WRAPPER.lastRequestId();\r\n  }\r\n\r\n  /**\r\n   * @notice fulfillRandomWords handles the VRF V2 wrapper response. The consuming contract must\r\n   * @notice implement it.\r\n   *\r\n   * @param _requestId is the VRF V2 request ID.\r\n   * @param _randomWords is the randomness result.\r\n   */\r\n  function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal virtual;\r\n\r\n  function rawFulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) external {\r\n    require(msg.sender == address(VRF_V2_WRAPPER), \"only VRF V2 wrapper can fulfill\");\r\n    fulfillRandomWords(_requestId, _randomWords);\r\n  }\r\n}\r\n\r\n// File: contracts/interface/IBEP20.sol\r\n\r\n\r\n\r\npragma solidity >=0.4.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/v2/DrawManager.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DrawManager is VRFV2WrapperConsumerBase, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    struct DrawEntry {\r\n        address user;\r\n        uint256 startIndex;\r\n        uint256 ticketCount;\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256 totalTicketCount;\r\n        uint256 busdBalance;\r\n        uint256 roundNumber;\r\n        uint256 roundTicketCount;\r\n    }\r\n\r\n    struct RngRequestStatus {\r\n        uint256 paid;\r\n        bool fulfilled;\r\n        uint256[] randomWords;\r\n    }\r\n\r\n    address public constant LINK_TOKEN = 0x404460C6A5EdE2D891e8297795264fDe62ADBB75;\r\n    address public constant VRF_WRAPPER = 0x721DFbc5Cfe53d32ab00A9bdFa605d3b8E1f3f42;\r\n\r\n    uint256 private constant INITIAL_DRAW_TIME = 946728000;\r\n    uint256 private constant DRAW_TIME_BUFFER = 86400;\r\n\r\n    uint256 public constant MIN_BUY_AMOUNT = 25 * 10**18;\r\n    uint256 public constant BUY_AWARD_TOLERANCE = 10**12;\r\n    uint256 public constant MIN_AWARD_AMOUNT = 10 * 10**18;\r\n    uint256 public constant MAX_WINNER_COUNT = 50;\r\n    uint256 public constant TICKET_BUSD_PRICE = 10**18;\r\n\r\n    IBEP20 public immutable moox;\r\n    IBEP20 public busd;\r\n    address public immutable mooxStakeManager;\r\n    IPancakeswapPair public immutable pancakeswapBusdPair;\r\n    IPancakeswapRouter public pancakeswapRouter;\r\n\r\n    uint256 public roundCount = 1;\r\n    uint256 public ticketCounter;\r\n    uint256 public entryCounter;\r\n    uint256 public drawTime = INITIAL_DRAW_TIME;\r\n\r\n    mapping(address => UserInfo) public userInfoMap;\r\n    mapping(uint256 => DrawEntry) public drawEntryMap;\r\n\r\n    uint256 public rngRequestId;\r\n    mapping(uint256 => RngRequestStatus) public rngRequestStatusMap;\r\n\r\n    address public marketingWallet;\r\n    address public marketingWalletSetter;\r\n    address public charityWallet;\r\n    address public charityWalletSetter;\r\n\r\n    event TicketAward(address indexed user, uint256 mooxAmount, uint256 ticketCount, uint256 awardType);\r\n    event UseTicket(address indexed user, uint256 round, uint256 startIndex, uint256 ticketCount);\r\n    event TransferTicket(address indexed sender, address indexed receiver, uint256 ticketCount);\r\n    event BuyTicket(address indexed buyer, uint256 ticketCount);\r\n    event AwardUser(uint256 indexed roundCount, uint256 ticketNumber, address indexed winner, uint256 award);\r\n    event CompleteDraw(\r\n        uint256 indexed roundCount,\r\n        uint256 drawTime,\r\n        uint256 ticketCount,\r\n        uint256 winnerCount,\r\n        uint256 totalMooxAward,\r\n        uint256 totalBusdAward\r\n    );\r\n    event MooxTransferFailed(address to, uint256 amount);\r\n    event SetMarketingWalletSetter(address setter);\r\n    event SetMarketingWallet(address setter, address wallet);\r\n    event SetCharityWalletSetter(address setter);\r\n    event SetCharityWallet(address setter, address wallet);\r\n\r\n    constructor(\r\n        address _creator,\r\n        address _mooxStakeManager,\r\n        IBEP20 _busd,\r\n        IPancakeswapPair _pancakeswapBusdPair,\r\n        IPancakeswapRouter _pancakeswapRouter\r\n    ) VRFV2WrapperConsumerBase(LINK_TOKEN, VRF_WRAPPER) {\r\n        require(_creator != address(0), 'DrawManager: Zero wallet address');\r\n\r\n        moox = IBEP20(msg.sender);\r\n        mooxStakeManager = _mooxStakeManager;\r\n        pancakeswapBusdPair = _pancakeswapBusdPair;\r\n        pancakeswapRouter = _pancakeswapRouter;\r\n        busd = _busd;\r\n\r\n        require(busd.approve(address(pancakeswapRouter), type(uint256).max), 'DrawManager: Cannot approve BUSD');\r\n\r\n        charityWalletSetter = _creator;\r\n        marketingWalletSetter = _creator;\r\n    }\r\n\r\n    function processBuyAward(uint256 _amount) external nonReentrant {\r\n        require(msg.sender == address(moox), 'DrawManager: Not allowed');\r\n\r\n        (uint256 mooxReserve, uint256 busdReserve) = _getReserves();\r\n\r\n        uint256 busdAmount = busdReserve.mul(_amount).mul(10000).div(mooxReserve.sub(_amount).mul(9975)).add(1);\r\n\r\n        if (busdReserve.add(busdAmount) > busd.balanceOf(address(pancakeswapBusdPair))) {\r\n            return;\r\n        }\r\n\r\n        UserInfo storage userInfo = userInfoMap[tx.origin];\r\n        uint256 totalBusdBalance = userInfo.busdBalance.add(busdAmount);\r\n        uint256 totalBusdAmount = userInfo.busdBalance.add(busdAmount).add(BUY_AWARD_TOLERANCE);\r\n\r\n        if (totalBusdAmount >= MIN_BUY_AMOUNT) {\r\n            uint256 ticketCount = totalBusdAmount.div(MIN_BUY_AMOUNT);\r\n            uint256 spentBusdAmount = MIN_BUY_AMOUNT.mul(ticketCount);\r\n\r\n            userInfo.totalTicketCount += ticketCount;\r\n\r\n            if (totalBusdBalance > spentBusdAmount) {\r\n                userInfo.busdBalance = totalBusdBalance.sub(spentBusdAmount);\r\n            } else {\r\n                userInfo.busdBalance = 0;\r\n            }\r\n\r\n            emit TicketAward(tx.origin, _amount, ticketCount, 1);\r\n        } else {\r\n            userInfo.busdBalance = totalBusdBalance;\r\n        }\r\n    }\r\n\r\n    function useTicket(uint256 _ticketCount) external nonReentrant {\r\n        require(drawTime > block.timestamp, 'DrawManager: Time is up');\r\n\r\n        UserInfo storage userInfo = userInfoMap[msg.sender];\r\n\r\n        uint256 userTicketCount = userInfo.totalTicketCount;\r\n\r\n        require(userTicketCount >= _ticketCount, 'DrawManager: Invalid ticket count');\r\n\r\n        drawEntryMap[entryCounter] = DrawEntry({\r\n            user: msg.sender,\r\n            startIndex: ticketCounter,\r\n            ticketCount: _ticketCount\r\n        });\r\n\r\n        emit UseTicket(msg.sender, roundCount, ticketCounter, _ticketCount);\r\n\r\n        entryCounter += 1;\r\n        ticketCounter += _ticketCount;\r\n\r\n        userInfo.totalTicketCount -= _ticketCount;\r\n\r\n        if (userInfo.roundNumber < roundCount) {\r\n            userInfo.roundNumber = roundCount;\r\n            userInfo.roundTicketCount = _ticketCount;\r\n        } else {\r\n            userInfo.roundTicketCount += _ticketCount;\r\n        }\r\n    }\r\n\r\n    function buyTicket(\r\n        uint256 _ticketCount,\r\n        uint256 minMooxAmount,\r\n        bool _joinDraw\r\n    ) external nonReentrant {\r\n        require(drawTime > INITIAL_DRAW_TIME, 'DrawManager: Not started');\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(busd);\r\n        path[1] = address(moox);\r\n\r\n        uint256 busdAmount = _ticketCount.mul(TICKET_BUSD_PRICE);\r\n\r\n        require(busd.transferFrom(msg.sender, address(this), busdAmount), 'DrawManager: BUSD transfer error');\r\n\r\n        if (busd.allowance(address(this), address(pancakeswapRouter)) < busdAmount) {\r\n            require(busd.approve(address(pancakeswapRouter), type(uint256).max), 'DrawManager: Cannot approve BUSD');\r\n        }\r\n\r\n        pancakeswapRouter.swapExactTokensForTokens(busdAmount, minMooxAmount, path, address(this), block.timestamp);\r\n\r\n        emit BuyTicket(msg.sender, _ticketCount);\r\n\r\n        if (_joinDraw) {\r\n            require(drawTime > block.timestamp, 'DrawManager: Time is up');\r\n\r\n            drawEntryMap[entryCounter] = DrawEntry({\r\n                user: msg.sender,\r\n                startIndex: ticketCounter,\r\n                ticketCount: _ticketCount\r\n            });\r\n\r\n            emit UseTicket(msg.sender, roundCount, ticketCounter, _ticketCount);\r\n\r\n            entryCounter += 1;\r\n            ticketCounter += _ticketCount;\r\n\r\n            UserInfo storage userInfo = userInfoMap[msg.sender];\r\n\r\n            if (userInfo.roundNumber < roundCount) {\r\n                userInfo.roundNumber = roundCount;\r\n                userInfo.roundTicketCount = _ticketCount;\r\n            } else {\r\n                userInfo.roundTicketCount += _ticketCount;\r\n            }\r\n        } else {\r\n            userInfoMap[msg.sender].totalTicketCount += _ticketCount;\r\n        }\r\n    }\r\n\r\n    function transferTicket(uint256 _ticketCount, address _receiver) external nonReentrant {\r\n        require(\r\n            _ticketCount > 0 && userInfoMap[msg.sender].totalTicketCount >= _ticketCount,\r\n            'DrawManager: Invalid ticket count'\r\n        );\r\n\r\n        userInfoMap[msg.sender].totalTicketCount -= _ticketCount;\r\n        userInfoMap[_receiver].totalTicketCount += _ticketCount;\r\n\r\n        emit TransferTicket(msg.sender, _receiver, _ticketCount);\r\n    }\r\n\r\n    function processStakeAward(address _user, uint256 _count) external nonReentrant {\r\n        require(msg.sender == mooxStakeManager, 'DrawManager: Not allowed');\r\n\r\n        userInfoMap[_user].totalTicketCount += _count;\r\n\r\n        emit TicketAward(_user, 0, _count, 2);\r\n    }\r\n\r\n    function requestRandomNumber(\r\n        uint32 _callbackGasLimit,\r\n        uint16 _requestConfirmations,\r\n        uint32 _randomNumberCount\r\n    ) external returns (uint256 requestId) {\r\n        require(drawTime > INITIAL_DRAW_TIME && drawTime <= block.timestamp, 'DrawManager: Invalid time');\r\n\r\n        uint256 requestPrice = VRF_V2_WRAPPER.calculateRequestPrice(_callbackGasLimit);\r\n\r\n        require(LINK.transferFrom(msg.sender, address(this), requestPrice), 'DrawManager: Cannot transfer LINK');\r\n\r\n        requestId = requestRandomness(_callbackGasLimit, _requestConfirmations, _randomNumberCount);\r\n\r\n        rngRequestStatusMap[requestId] = RngRequestStatus({\r\n            paid: requestPrice,\r\n            randomWords: new uint256[](0),\r\n            fulfilled: false\r\n        });\r\n\r\n        rngRequestId = requestId;\r\n    }\r\n\r\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {\r\n        require(rngRequestStatusMap[_requestId].paid > 0, 'DrawManager: Rng request not paid');\r\n\r\n        rngRequestStatusMap[_requestId].fulfilled = true;\r\n        rngRequestStatusMap[_requestId].randomWords = _randomWords;\r\n    }\r\n\r\n    function draw() external nonReentrant {\r\n        require(drawTime > INITIAL_DRAW_TIME && drawTime <= block.timestamp, 'DrawManager: Invalid time');\r\n\r\n        uint256 roundTicketCount = ticketCounter;\r\n        (uint256 awardToGiveaway, uint256 awardInBusd, uint256 roundWinnerCount) = getCurrentAwardAndWinnerCount();\r\n\r\n        if (roundTicketCount <= 0) {\r\n            emit CompleteDraw(roundCount, block.timestamp, roundTicketCount, 0, awardToGiveaway, awardInBusd);\r\n\r\n            rngRequestId = 0;\r\n            ticketCounter = 0;\r\n            entryCounter = 0;\r\n            roundCount += 1;\r\n            drawTime += block.timestamp.sub(drawTime).div(DRAW_TIME_BUFFER).add(1).mul(DRAW_TIME_BUFFER);\r\n\r\n            return;\r\n        }\r\n\r\n        require(awardToGiveaway > 0, 'DrawManager: Invalid award amount');\r\n\r\n        uint256 randomNumber = 0;\r\n        uint256 partitionLength = 1;\r\n        uint256 partitionCount = 0;\r\n        uint256 remainder = 0;\r\n\r\n        if (roundTicketCount > roundWinnerCount) {\r\n            require(rngRequestId != 0, 'DrawManager: Update random number');\r\n            require(rngRequestStatusMap[rngRequestId].fulfilled, 'DrawManager: Random number in process');\r\n\r\n            randomNumber = rngRequestStatusMap[rngRequestId].randomWords[0];\r\n            partitionLength = roundTicketCount.div(roundWinnerCount);\r\n            remainder = roundTicketCount.mod(roundWinnerCount);\r\n            partitionCount = roundWinnerCount.sub(remainder);\r\n        } else {\r\n            roundWinnerCount = roundTicketCount;\r\n        }\r\n\r\n        address[] memory winners = new address[](roundWinnerCount);\r\n        uint256[] memory winnerTicketNumbers = new uint256[](roundWinnerCount);\r\n\r\n        for (uint256 i = 0; i < roundWinnerCount; i++) {\r\n            uint256 winnerTicketIndex = i;\r\n            uint256 winnerEntryIndex = 0;\r\n\r\n            if (roundTicketCount > roundWinnerCount) {\r\n                if (i < partitionCount) {\r\n                    uint256 winnerStartIndex = i.mul(partitionLength);\r\n\r\n                    if (partitionLength > 1) {\r\n                        uint256 nextRandom = uint256(keccak256(abi.encode(randomNumber, i)));\r\n                        winnerTicketIndex = winnerStartIndex.add(nextRandom.mod(partitionLength));\r\n                    } else {\r\n                        winnerTicketIndex = winnerStartIndex;\r\n                    }\r\n                } else if (remainder > 0) {\r\n                    uint256 winnerStartIndex = partitionCount.mul(partitionLength).add(\r\n                        i.sub(partitionCount).mul(partitionLength.add(1))\r\n                    );\r\n\r\n                    uint256 nextRandom = uint256(keccak256(abi.encode(randomNumber, i)));\r\n                    winnerTicketIndex = winnerStartIndex.add(nextRandom.mod(partitionLength.add(1)));\r\n                }\r\n            }\r\n\r\n            uint256 low = 0;\r\n            uint256 high = entryCounter;\r\n\r\n            while (low <= high) {\r\n                uint256 mid = low + ((high - low) / 2);\r\n\r\n                if (drawEntryMap[mid].startIndex + drawEntryMap[mid].ticketCount - 1 < winnerTicketIndex) {\r\n                    low = mid + 1;\r\n                } else if (drawEntryMap[mid].startIndex > winnerTicketIndex) {\r\n                    high = mid - 1;\r\n                } else {\r\n                    winnerEntryIndex = mid;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            winners[i] = drawEntryMap[winnerEntryIndex].user;\r\n            winnerTicketNumbers[i] = winnerTicketIndex;\r\n        }\r\n\r\n        uint256 award = awardToGiveaway.div(roundWinnerCount);\r\n\r\n        for (uint256 i = 0; i < roundWinnerCount; i++) {\r\n            if (moox.transfer(winners[i], award)) {\r\n                emit AwardUser(roundCount, winnerTicketNumbers[i], winners[i], award);\r\n            } else {\r\n                emit MooxTransferFailed(winners[i], award);\r\n            }\r\n        }\r\n\r\n        emit CompleteDraw(\r\n            roundCount,\r\n            block.timestamp,\r\n            roundTicketCount,\r\n            roundWinnerCount,\r\n            awardToGiveaway,\r\n            awardInBusd\r\n        );\r\n\r\n        rngRequestId = 0;\r\n        ticketCounter = 0;\r\n        entryCounter = 0;\r\n        roundCount += 1;\r\n        drawTime += block.timestamp.sub(drawTime).div(DRAW_TIME_BUFFER).add(1).mul(DRAW_TIME_BUFFER);\r\n\r\n        if (marketingWallet != address(0) && !moox.transfer(marketingWallet, awardToGiveaway.div(5))) {\r\n            emit MooxTransferFailed(marketingWallet, awardToGiveaway.div(5));\r\n        }\r\n\r\n        if (charityWallet != address(0) && !moox.transfer(charityWallet, awardToGiveaway.div(10))) {\r\n            emit MooxTransferFailed(charityWallet, awardToGiveaway.div(10));\r\n        }\r\n    }\r\n\r\n    function calculateTicketCount(uint256 _amount) external view returns (uint256) {\r\n        return _calculateTicketCount(_amount, 0);\r\n    }\r\n\r\n    function calculateTicketCountForAddress(uint256 _amount, address _account) external view returns (uint256) {\r\n        return _calculateTicketCount(_amount, userInfoMap[_account].busdBalance);\r\n    }\r\n\r\n    function _calculateTicketCount(uint256 _mooxAmount, uint256 _busdAmount) internal view returns (uint256) {\r\n        (uint256 mooxReserve, uint256 busdReserve) = _getReserves();\r\n\r\n        if (_mooxAmount >= mooxReserve) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 busdAmount = busdReserve.mul(_mooxAmount).mul(10000).div(mooxReserve.sub(_mooxAmount).mul(9975)).add(1);\r\n\r\n        busdAmount = busdAmount.add(_busdAmount).add(BUY_AWARD_TOLERANCE);\r\n\r\n        uint256 ticketCount = 0;\r\n\r\n        if (busdAmount >= MIN_BUY_AMOUNT) {\r\n            ticketCount = busdAmount.div(MIN_BUY_AMOUNT);\r\n        }\r\n\r\n        return ticketCount;\r\n    }\r\n\r\n    function _getReserves() internal view returns (uint256 mooxReserve, uint256 busdReserve) {\r\n        (uint256 reserveA, uint256 reserveB, ) = pancakeswapBusdPair.getReserves();\r\n\r\n        (mooxReserve, busdReserve) = address(moox) < address(busd) ? (reserveA, reserveB) : (reserveB, reserveA);\r\n    }\r\n\r\n    function getCurrentAwardAndWinnerCount()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 awardInMoox,\r\n            uint256 awardInBusd,\r\n            uint256 winnerCount\r\n        )\r\n    {\r\n        uint256 mooxBalance = moox.balanceOf(address(this));\r\n\r\n        if (mooxBalance <= 0) {\r\n            return (0, 0, 0);\r\n        }\r\n\r\n        uint256 totalAward = moox.balanceOf(address(this)).div(3).mul(85).div(100);\r\n\r\n        (uint256 mooxReserve, uint256 busdReserve) = _getReserves();\r\n\r\n        if (mooxReserve <= 0 || busdReserve <= 0) {\r\n            return (0, 0, 0);\r\n        }\r\n\r\n        uint256 amountInWithFee = totalAward.mul(9975);\r\n        uint256 numerator = amountInWithFee.mul(busdReserve);\r\n        uint256 denominator = mooxReserve.mul(10000).add(amountInWithFee);\r\n\r\n        uint256 totalAwardInBusd = numerator / denominator;\r\n\r\n        if (totalAwardInBusd <= MIN_AWARD_AMOUNT) {\r\n            awardInBusd = totalAwardInBusd;\r\n            awardInMoox = totalAward;\r\n            winnerCount = 1;\r\n\r\n            return (awardInMoox, awardInBusd, winnerCount);\r\n        }\r\n\r\n        winnerCount = totalAwardInBusd.div(MIN_AWARD_AMOUNT);\r\n\r\n        if (winnerCount > MAX_WINNER_COUNT) {\r\n            awardInBusd = totalAwardInBusd;\r\n            awardInMoox = totalAward;\r\n            winnerCount = MAX_WINNER_COUNT;\r\n\r\n            return (awardInMoox, awardInBusd, winnerCount);\r\n        }\r\n\r\n        awardInBusd = MIN_AWARD_AMOUNT.mul(winnerCount);\r\n        awardInMoox = totalAward.mul(awardInBusd).div(totalAwardInBusd);\r\n    }\r\n\r\n    function getUserTotalTicketCount(address _user) external view returns (uint256) {\r\n        return userInfoMap[_user].totalTicketCount;\r\n    }\r\n\r\n    function getUserRoundTicketCount(address _user) external view returns (uint256) {\r\n        UserInfo storage userInfo = userInfoMap[_user];\r\n\r\n        if (userInfo.roundNumber < roundCount) {\r\n            return 0;\r\n        }\r\n\r\n        return userInfo.roundTicketCount;\r\n    }\r\n\r\n    function getRandomNumber() external view returns (uint256) {\r\n        if (rngRequestId == 0 || !rngRequestStatusMap[rngRequestId].fulfilled) {\r\n            return 0;\r\n        }\r\n\r\n        return rngRequestStatusMap[rngRequestId].randomWords[0];\r\n    }\r\n\r\n    function startDraw() external {\r\n        require(msg.sender == marketingWalletSetter, 'DrawManager: Not allowed');\r\n        require(drawTime == INITIAL_DRAW_TIME, 'DrawManager: Already set');\r\n\r\n        drawTime += block.timestamp.sub(drawTime).div(DRAW_TIME_BUFFER).add(1).mul(DRAW_TIME_BUFFER);\r\n    }\r\n\r\n    function setMarketingWalletSetter(address _setter) external {\r\n        require(_setter != address(0), 'DrawManager: Invalid address');\r\n        require(msg.sender == marketingWalletSetter, 'DrawManager: Not allowed');\r\n\r\n        marketingWalletSetter = _setter;\r\n\r\n        emit SetMarketingWalletSetter(_setter);\r\n    }\r\n\r\n    function setMarketingWallet(address _wallet) external {\r\n        require(_wallet != address(0), 'DrawManager: Invalid address');\r\n        require(msg.sender == marketingWalletSetter, 'DrawManager: Not allowed');\r\n\r\n        marketingWallet = _wallet;\r\n\r\n        emit SetMarketingWallet(msg.sender, _wallet);\r\n    }\r\n\r\n    function setCharityWalletSetter(address _setter) external {\r\n        require(_setter != address(0), 'DrawManager: Invalid address');\r\n        require(msg.sender == charityWalletSetter, 'DrawManager: Not allowed');\r\n\r\n        charityWalletSetter = _setter;\r\n\r\n        emit SetCharityWalletSetter(_setter);\r\n    }\r\n\r\n    function setCharityWallet(address _wallet) external {\r\n        require(_wallet != address(0), 'DrawManager: Invalid address');\r\n        require(msg.sender == charityWalletSetter, 'DrawManager: Not allowed');\r\n\r\n        charityWallet = _wallet;\r\n\r\n        emit SetCharityWallet(msg.sender, _wallet);\r\n    }\r\n\r\n    function setDrawTime(uint256 _time) external {\r\n        drawTime = _time;\r\n    }\r\n}\r\n\r\n// File: contracts/v2/MarketingWalletManager.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ncontract MarketingWalletManager is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    IBEP20 public constant MOOX = IBEP20(0x30b832E2E98463d9130B822Bd9F294287Edd0422);\r\n    DrawManager public constant DRAW_MANAGER = DrawManager(0xCc52BE74E94c2AFEF596B8a9f95A35e0A8fecC21);\r\n\r\n    address public marketingWallet;\r\n    address public marketingWalletSetter;\r\n\r\n    event SetMarketingWalletSetter(address setter);\r\n    event SetMarketingWallet(address setter, address wallet);\r\n\r\n    constructor() {\r\n        marketingWalletSetter = msg.sender;\r\n    }\r\n\r\n    function draw() external {\r\n        DRAW_MANAGER.draw();\r\n\r\n        transferMoox();\r\n    }\r\n\r\n    function transferMoox() public nonReentrant {\r\n        MOOX.transfer(marketingWallet, MOOX.balanceOf(address(this)).div(4));\r\n        MOOX.transfer(address(DRAW_MANAGER), MOOX.balanceOf(address(this)));\r\n    }\r\n\r\n    function setMarketingWalletSetter(address _setter) external {\r\n        require(_setter != address(0), 'DrawManager: Invalid address');\r\n        require(msg.sender == marketingWalletSetter, 'DrawManager: Not allowed');\r\n\r\n        marketingWalletSetter = _setter;\r\n\r\n        emit SetMarketingWalletSetter(_setter);\r\n    }\r\n\r\n    function setMarketingWallet(address _wallet) external {\r\n        require(_wallet != address(0), 'DrawManager: Invalid address');\r\n        require(msg.sender == marketingWalletSetter, 'DrawManager: Not allowed');\r\n\r\n        marketingWallet = _wallet;\r\n\r\n        emit SetMarketingWallet(msg.sender, _wallet);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"SetMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"}],\"name\":\"SetMarketingWalletSetter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DRAW_MANAGER\",\"outputs\":[{\"internalType\":\"contract DrawManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MOOX\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"draw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWalletSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_setter\",\"type\":\"address\"}],\"name\":\"setMarketingWalletSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferMoox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MarketingWalletManager", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://55f14f74f989c1d15e4b2d301b9578f93ac5a6e5356ada11461503e9e4abd58a"}