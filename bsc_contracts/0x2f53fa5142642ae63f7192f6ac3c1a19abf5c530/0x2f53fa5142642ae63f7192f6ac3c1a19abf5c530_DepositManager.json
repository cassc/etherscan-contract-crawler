{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract DepositManager {\r\n    address public owner;\r\n    uint256 public maxDepositAddresses;\r\n    address public usdtAddress;\r\n\r\n    struct DepositRecord {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    mapping(address => DepositRecord[]) public ethDepositRecords;\r\n    mapping(address => bool) public isDepositAddress;\r\n    address[] public depositAddresses;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    event EthDepositReceived(address indexed depositAddress, uint256 amount, uint256 timestamp);\r\n    event UsdtDepositReceived(address indexed depositAddress, uint256 amount, uint256 timestamp);\r\n    event DepositAddressGenerated(address indexed depositAddress);\r\n\r\n    constructor(uint256 _maxDepositAddresses, address _usdtAddress) {\r\n        owner = msg.sender;\r\n        maxDepositAddresses = _maxDepositAddresses;\r\n        usdtAddress = _usdtAddress;\r\n    }\r\n    \r\n    // This function returns the balance of USDT for a given address.\r\n    function checkUSDTBalance(address _addressToCheck) public view returns (uint256) {\r\n        IERC20 token = IERC20(usdtAddress);\r\n        return token.balanceOf(_addressToCheck);\r\n    }\r\n\r\n    function generateMultipleDepositAddresses(uint256 count) external onlyOwner {\r\n        require(count > 0, \"Count must be greater than 0\");\r\n        require(depositAddresses.length + count <= maxDepositAddresses, \"Not enough available deposit addresses\");\r\n\r\n        for (uint256 i = 0; i < count; i++) {\r\n            DepositProxy depositAddress = new DepositProxy(owner, address(this), usdtAddress);\r\n            isDepositAddress[address(depositAddress)] = true;\r\n            depositAddresses.push(address(depositAddress));\r\n            emit DepositAddressGenerated(address(depositAddress));\r\n        }\r\n    }\r\n\r\n    function logEthDeposit(address depositAddress, uint256 amount) external {\r\n        require(isDepositAddress[depositAddress], \"Not a valid deposit address\");\r\n        require(msg.sender == depositAddress, \"Only deposit proxy can log deposits\");\r\n\r\n        ethDepositRecords[depositAddress].push(DepositRecord({\r\n            amount: amount,\r\n            timestamp: block.timestamp\r\n        }));\r\n\r\n        emit EthDepositReceived(depositAddress, amount, block.timestamp);\r\n    }\r\n\r\n\r\n    function withdrawEth(uint256 amount) external onlyOwner {\r\n        require(amount > 0, \"Withdraw amount must be greater than 0\");\r\n        require(address(this).balance >= amount, \"Insufficient contract balance\");\r\n\r\n        payable(owner).transfer(amount);\r\n    }\r\n\r\n    function withdrawAllUsdt() external onlyOwner {\r\n        for (uint256 i = 0; i < depositAddresses.length; i++) {\r\n            DepositProxy(payable(depositAddresses[i])).withdrawUsdt(owner);\r\n        }\r\n    }\r\n\r\n    function getDepositAddresses() external view returns (address[] memory) {\r\n        return depositAddresses;\r\n    }\r\n\r\n    function getEthDepositRecords(address depositAddress) external view returns (DepositRecord[] memory) {\r\n        return ethDepositRecords[depositAddress];\r\n    }\r\n}\r\n\r\ncontract DepositProxy {\r\n    address public owner;\r\n    address public manager;\r\n    address public usdtAddress;\r\n\r\n    struct DepositRecord {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    DepositRecord[] public usdtDepositRecords;\r\n\r\n\r\n    constructor(address _owner, address _manager, address _usdtAddress) {\r\n        owner = _owner;\r\n        manager = _manager;\r\n        usdtAddress = _usdtAddress;\r\n    }\r\n\r\n    receive() external payable {\r\n        // Log the deposit in the manager before forwarding the funds.\r\n        DepositManager(manager).logEthDeposit(address(this), msg.value);\r\n        (bool success, ) = owner.call{value: msg.value}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n\r\n    function withdrawUsdt(address recipient) external {\r\n        require(msg.sender == manager, \"Only the manager can withdraw USDT\");\r\n        IERC20 usdt = IERC20(usdtAddress);\r\n        uint256 balance = usdt.balanceOf(address(this));\r\n        require(usdt.transfer(recipient, balance), \"Failed to withdraw USDT\");\r\n    }\r\n\r\n\r\n    function getUsdtDepositRecords() external view returns (DepositRecord[] memory) {\r\n        return usdtDepositRecords;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDepositAddresses\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositAddress\",\"type\":\"address\"}],\"name\":\"DepositAddressGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EthDepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UsdtDepositReceived\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressToCheck\",\"type\":\"address\"}],\"name\":\"checkUSDTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ethDepositRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"generateMultipleDepositAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositAddress\",\"type\":\"address\"}],\"name\":\"getEthDepositRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DepositManager.DepositRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDepositAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"logEthDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DepositManager", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000271000000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://21ec0638358cf86b1721092a3755f13213f43738c40143d7357a52c64887efe5"}