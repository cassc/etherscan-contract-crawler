{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/DividendDistributor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDividendDistributor {\\n    function setDistributionCriteria(\\n        uint256 _minPeriod,\\n        uint256 _minDistribution\\n    ) external;\\n\\n    function setShare(address shareholder, uint256 amount) external;\\n\\n    function deposit(uint256 amount) external;\\n\\n    function process(uint256 gas) external;\\n\\n    function purge(address receiver) external;\\n}\\n\\ncontract DividendDistributor is IDividendDistributor {\\n    address public _token;\\n\\n    struct Share {\\n        uint256 amount;\\n        uint256 totalExcluded;\\n        uint256 totalRealised;\\n    }\\n\\n    IERC20 public REWARD;\\n\\n    address[] shareholders;\\n    mapping(address => uint256) shareholderIndexes;\\n    mapping(address => uint256) shareholderClaims;\\n\\n    mapping(address => Share) public shares;\\n\\n    uint256 public totalShares;\\n    uint256 public totalDividends;\\n    uint256 public totalDistributed;\\n    uint256 public dividendsPerShare;\\n    uint256 public dividendsPerShareAccuracyFactor = 10**36;\\n\\n    uint256 public minPeriod = 1 * 60;\\n    uint256 public minDistribution = 1 * (10**3);\\n\\n    uint256 currentIndex;\\n\\n    bool initialized;\\n\\n    modifier onlyToken() {\\n        require(msg.sender == _token);\\n        _;\\n    }\\n\\n    constructor(address rewardToken) {\\n        _token = msg.sender;\\n        REWARD = IERC20(rewardToken);\\n    }\\n\\n    receive() external payable {}\\n\\n    function setDistributionCriteria(\\n        uint256 _minPeriod,\\n        uint256 _minDistribution\\n    ) external override onlyToken {\\n        minPeriod = _minPeriod;\\n        minDistribution = _minDistribution;\\n    }\\n\\n    function purge(address receiver) external override onlyToken {\\n        uint256 balance = REWARD.balanceOf(address(this));\\n        REWARD.transfer(receiver, balance);\\n    }\\n\\n    function setShare(address shareholder, uint256 amount)\\n        external\\n        override\\n        onlyToken\\n    {\\n        if (shares[shareholder].amount > 0) {\\n            distributeDividend(shareholder);\\n        }\\n\\n        if (amount > 0 && shares[shareholder].amount == 0) {\\n            addShareholder(shareholder);\\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\\n            removeShareholder(shareholder);\\n        }\\n\\n        totalShares = (totalShares - (shares[shareholder].amount)) + amount;\\n        shares[shareholder].amount = amount;\\n        shares[shareholder].totalExcluded = getCumulativeDividends(\\n            shares[shareholder].amount\\n        );\\n    }\\n\\n    function deposit(uint256 amount) external override onlyToken {\\n        totalDividends = totalDividends + amount;\\n        dividendsPerShare =\\n            dividendsPerShare +\\n            ((dividendsPerShareAccuracyFactor * amount) / totalShares);\\n    }\\n\\n    function process(uint256 gas) external override onlyToken {\\n        uint256 shareholderCount = shareholders.length;\\n\\n        if (shareholderCount == 0) {\\n            return;\\n        }\\n\\n        uint256 gasUsed = 0;\\n        uint256 gasLeft = gasleft();\\n\\n        uint256 iterations = 0;\\n\\n        while (gasUsed < gas && iterations < shareholderCount) {\\n            if (currentIndex >= shareholderCount) {\\n                currentIndex = 0;\\n            }\\n\\n            if (shouldDistribute(shareholders[currentIndex])) {\\n                distributeDividend(shareholders[currentIndex]);\\n            }\\n\\n            gasUsed = gasUsed + (gasLeft - gasleft());\\n            gasLeft = gasleft();\\n            currentIndex++;\\n            iterations++;\\n        }\\n    }\\n\\n    function shouldDistribute(address shareholder)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            shareholderClaims[shareholder] + minPeriod < block.timestamp &&\\n            getUnpaidEarnings(shareholder) > minDistribution;\\n    }\\n\\n    function distributeDividend(address shareholder) internal {\\n        if (shares[shareholder].amount == 0) {\\n            return;\\n        }\\n\\n        uint256 amount = getUnpaidEarnings(shareholder);\\n        if (amount > 0) {\\n            totalDistributed = totalDistributed + amount;\\n            REWARD.transfer(shareholder, amount);\\n            shareholderClaims[shareholder] = block.timestamp;\\n            shares[shareholder].totalRealised =\\n                shares[shareholder].totalRealised +\\n                amount;\\n            shares[shareholder].totalExcluded = getCumulativeDividends(\\n                shares[shareholder].amount\\n            );\\n        }\\n    }\\n\\n    function claimDividend() external {\\n        distributeDividend(msg.sender);\\n    }\\n\\n    function getUnpaidEarnings(address shareholder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (shares[shareholder].amount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 shareholderTotalDividends = getCumulativeDividends(\\n            shares[shareholder].amount\\n        );\\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\\n\\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\\n            return 0;\\n        }\\n\\n        return shareholderTotalDividends - shareholderTotalExcluded;\\n    }\\n\\n    function getHolderDetails(address holder)\\n        public\\n        view\\n        returns (\\n            uint256 lastClaim,\\n            uint256 unpaidEarning,\\n            uint256 totalReward,\\n            uint256 holderIndex\\n        )\\n    {\\n        lastClaim = shareholderClaims[holder];\\n        unpaidEarning = getUnpaidEarnings(holder);\\n        totalReward = shares[holder].totalRealised;\\n        holderIndex = shareholderIndexes[holder];\\n    }\\n\\n    function getCumulativeDividends(uint256 share)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (share * dividendsPerShare) / (dividendsPerShareAccuracyFactor);\\n    }\\n\\n    function getLastProcessedIndex() external view returns (uint256) {\\n        return currentIndex;\\n    }\\n\\n    function getNumberOfTokenHolders() external view returns (uint256) {\\n        return shareholders.length;\\n    }\\n\\n    function getShareHoldersList() external view returns (address[] memory) {\\n        return shareholders;\\n    }\\n\\n    function totalDistributedRewards() external view returns (uint256) {\\n        return totalDistributed;\\n    }\\n\\n    function addShareholder(address shareholder) internal {\\n        shareholderIndexes[shareholder] = shareholders.length;\\n        shareholders.push(shareholder);\\n    }\\n\\n    function removeShareholder(address shareholder) internal {\\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\\n            shareholders.length - 1\\n        ];\\n        shareholderIndexes[\\n            shareholders[shareholders.length - 1]\\n        ] = shareholderIndexes[shareholder];\\n        shareholders.pop();\\n\\n        delete shareholderIndexes[shareholder];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/FlokiCFO.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./DividendDistributor.sol\\\";\\n\\ncontract FlokiCFO is IERC20, Ownable {\\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address ZERO = 0x0000000000000000000000000000000000000000;\\n\\n    address public REDFLOKI = 0x3c0fE6c4aCd3a21615a51372D2A430Eb68cCde43;\\n    address public FLOKICEO = 0x45289007706E7Ee7B42b1fA506661d97740Edfb4;\\n\\n    string constant _name = \\\"Floki CFO\\\";\\n    string constant _symbol = \\\"FlokiCFO\\\";\\n    uint8 constant _decimals = 9;\\n\\n    uint256 _totalSupply = 1000000000 * (10 ** _decimals);\\n\\n    mapping(address => uint256) _balances;\\n    mapping(address => mapping(address => uint256)) _allowances;\\n\\n    mapping(address => bool) public isFeeExempt;\\n    mapping(address => bool) public isDividendExempt;\\n    mapping(address => bool) public isAuthorized;\\n\\n    address public marketingWallet;\\n\\n    // Fees\\n\\n    uint256 public buyRedRewardFee = 0;\\n    uint256 public buyCEORewardFee = 0;\\n    uint256 public buyMarketingFee = 0;\\n    uint256 public buyTotalFee = 0;\\n\\n    uint256 public sellRedRewardFee = 3;\\n    uint256 public sellCEORewardFee = 3;\\n    uint256 public sellMarketingFee = 4;\\n    uint256 public sellTotalFee = 10;\\n\\n    IUniswapV2Router02 public router;\\n    address public pair;\\n\\n    uint256 public listingTime;\\n\\n    DividendDistributor public redFlockiDividendTracker;\\n    DividendDistributor public flokiCEODividendTracker;\\n\\n    uint256 distributorGas = 500000;\\n\\n    bool public getTransferFees = false;\\n\\n    uint256 public swapThreshold = (_totalSupply * 1) / 10000; // 0.001% of supply\\n    bool public contractSwapEnabled = true;\\n    bool public isTradeEnabled = false;\\n    bool inContractSwap;\\n    modifier swapping() {\\n        inContractSwap = true;\\n        _;\\n        inContractSwap = false;\\n    }\\n\\n    event SetIsDividendExempt(address holder, bool status);\\n    event SetIsFeeExempt(address holder, bool status);\\n    event AddAuthorizedWallet(address holder, bool status);\\n    event SetDoContractSwap(bool status);\\n    event DoContractSwap(uint256 amount, uint256 time);\\n    event ChangeDistributionCriteria(\\n        uint256 minPeriod,\\n        uint256 minDistribution\\n    );\\n\\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\\n\\n    constructor() {\\n        router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n        pair = IUniswapV2Factory(router.factory()).createPair(\\n            router.WETH(),\\n            address(this)\\n        );\\n        _allowances[address(this)][address(router)] = type(uint256).max;\\n\\n        redFlockiDividendTracker = new DividendDistributor(REDFLOKI);\\n        flokiCEODividendTracker = new DividendDistributor(FLOKICEO);\\n\\n        marketingWallet = 0x2433E36dC7D27606d9e863B5194380e2BE42a720;\\n\\n        address deployer = 0xa6a8a4c9AAf02bF15A4386821FDA61A99A58437a;\\n\\n        isFeeExempt[deployer] = true;\\n        isFeeExempt[address(this)] = true;\\n        isFeeExempt[marketingWallet] = true;\\n\\n        isDividendExempt[deployer] = true;\\n        isDividendExempt[pair] = true;\\n        isDividendExempt[address(this)] = true;\\n        isDividendExempt[ZERO] = true;\\n        isDividendExempt[DEAD] = true;\\n\\n        isDividendExempt[marketingWallet] = true;\\n\\n        isAuthorized[deployer] = true;\\n        isAuthorized[address(this)] = true;\\n        isAuthorized[ZERO] = true;\\n        isAuthorized[DEAD] = true;\\n\\n        isAuthorized[marketingWallet] = true;\\n\\n        _balances[deployer] = _totalSupply;\\n        emit Transfer(address(0), deployer, _totalSupply);\\n    }\\n\\n    receive() external payable {}\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function allowance(\\n        address holder,\\n        address spender\\n    ) external view override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function approveMax(address spender) external returns (bool) {\\n        return approve(spender, type(uint256).max);\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        return _transferFrom(msg.sender, recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\\n            require(\\n                _allowances[sender][msg.sender] >= amount,\\n                \\\"Insufficient Allowance\\\"\\n            );\\n            _allowances[sender][msg.sender] =\\n                _allowances[sender][msg.sender] -\\n                amount;\\n        }\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        if (!isTradeEnabled) require(isAuthorized[sender], \\\"Trading disabled\\\");\\n        if (inContractSwap) {\\n            return _basicTransfer(sender, recipient, amount);\\n        }\\n\\n        if (shouldDoContractSwap()) {\\n            doContractSwap();\\n        }\\n\\n        require(_balances[sender] >= amount, \\\"Insufficient Balance\\\");\\n        _balances[sender] = _balances[sender] - amount;\\n\\n        uint256 amountReceived = shouldTakeFee(sender, recipient)\\n            ? takeFee(sender, recipient, amount)\\n            : amount;\\n        _balances[recipient] = _balances[recipient] + amountReceived;\\n\\n        if (!isDividendExempt[sender]) {\\n            try\\n                redFlockiDividendTracker.setShare(sender, _balances[sender])\\n            {} catch {}\\n        }\\n\\n        if (!isDividendExempt[recipient]) {\\n            try\\n                redFlockiDividendTracker.setShare(\\n                    recipient,\\n                    _balances[recipient]\\n                )\\n            {} catch {}\\n        }\\n\\n        try redFlockiDividendTracker.process(distributorGas) {} catch {}\\n\\n        // flockiCEO\\n        if (!isDividendExempt[sender]) {\\n            try\\n                flokiCEODividendTracker.setShare(sender, _balances[sender])\\n            {} catch {}\\n        }\\n\\n        if (!isDividendExempt[recipient]) {\\n            try\\n                flokiCEODividendTracker.setShare(\\n                    recipient,\\n                    _balances[recipient]\\n                )\\n            {} catch {}\\n        }\\n\\n        try flokiCEODividendTracker.process(distributorGas) {} catch {}\\n\\n        emit Transfer(sender, recipient, amountReceived);\\n        return true;\\n    }\\n\\n    function takeFee(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        uint256 feeToken;\\n\\n        if (recipient == pair) feeToken = (amount * sellTotalFee) / 100;\\n        else feeToken = (amount * buyTotalFee) / 100;\\n\\n        _balances[address(this)] = _balances[address(this)] + feeToken;\\n        emit Transfer(sender, address(this), feeToken);\\n\\n        return (amount - feeToken);\\n    }\\n\\n    function _basicTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        require(_balances[sender] >= amount, \\\"Insufficient Balance\\\");\\n        _balances[sender] = _balances[sender] - amount;\\n\\n        _balances[recipient] = _balances[recipient] + amount;\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function shouldTakeFee(\\n        address sender,\\n        address to\\n    ) internal view returns (bool) {\\n        if (!getTransferFees) {\\n            if (sender != pair && to != pair) return false;\\n        }\\n        if (isFeeExempt[sender] || isFeeExempt[to]) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function shouldDoContractSwap() internal view returns (bool) {\\n        return (msg.sender != pair &&\\n            !inContractSwap &&\\n            contractSwapEnabled &&\\n            sellTotalFee != 0 &&\\n            _balances[address(this)] >= swapThreshold);\\n    }\\n\\n    function isRewardExcluded(address _wallet) public view returns (bool) {\\n        return isDividendExempt[_wallet];\\n    }\\n\\n    function isFeeExcluded(address _wallet) public view returns (bool) {\\n        return isFeeExempt[_wallet];\\n    }\\n\\n    function doContractSwap() internal swapping {\\n        uint256 contractTokenBalance = _balances[address(this)];\\n\\n        uint256 tokensToMarketing = (contractTokenBalance * sellMarketingFee) /\\n            sellTotalFee;\\n        uint256 tokensToRedRewards = (contractTokenBalance * sellRedRewardFee) /\\n            sellTotalFee;\\n\\n        uint256 tokensToCeoRewards = contractTokenBalance -\\n            tokensToMarketing -\\n            tokensToRedRewards;\\n\\n        if (tokensToRedRewards > 0) {\\n            swapTokensForTokens(tokensToRedRewards, REDFLOKI);\\n\\n            uint256 swappedRewardTokens = IERC20(REDFLOKI).balanceOf(\\n                address(this)\\n            );\\n            IERC20(REDFLOKI).transfer(\\n                address(redFlockiDividendTracker),\\n                swappedRewardTokens\\n            );\\n            try\\n                redFlockiDividendTracker.deposit(swappedRewardTokens)\\n            {} catch {}\\n        }\\n        if (tokensToCeoRewards > 0) {\\n            swapTokensForTokens(tokensToCeoRewards, FLOKICEO);\\n\\n            uint256 swappedRewardTokens = IERC20(FLOKICEO).balanceOf(\\n                address(this)\\n            );\\n            IERC20(FLOKICEO).transfer(\\n                address(flokiCEODividendTracker),\\n                swappedRewardTokens\\n            );\\n            try flokiCEODividendTracker.deposit(swappedRewardTokens) {} catch {}\\n        }\\n        if (tokensToMarketing > 0) {\\n            swapTokensForEth(tokensToMarketing);\\n\\n            uint256 swappedTokens = address(this).balance;\\n\\n            if (swappedTokens > 0)\\n                payable(marketingWallet).transfer(swappedTokens);\\n        }\\n    }\\n\\n    // All tax wallets receive BUSD instead of BNB\\n    function swapTokensForTokens(\\n        uint256 tokenAmount,\\n        address tokenToSwap\\n    ) private {\\n        address[] memory path = new address[](3);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n        path[2] = tokenToSwap;\\n        _approve(address(this), address(router), tokenAmount);\\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of tokens\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private {\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n        _approve(address(this), address(router), tokenAmount);\\n        // make the swap\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function setIsDividendExempt(\\n        address holder,\\n        bool exempt\\n    ) external onlyOwner {\\n        require(\\n            holder != address(this) && holder != pair,\\n            \\\"can not add pair and token address as share holder\\\"\\n        );\\n        isDividendExempt[holder] = exempt;\\n        if (exempt) {\\n            redFlockiDividendTracker.setShare(holder, 0);\\n            flokiCEODividendTracker.setShare(holder, 0);\\n        } else {\\n            redFlockiDividendTracker.setShare(holder, _balances[holder]);\\n            flokiCEODividendTracker.setShare(holder, _balances[holder]);\\n        }\\n\\n        emit SetIsDividendExempt(holder, exempt);\\n    }\\n\\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\\n        isFeeExempt[holder] = exempt;\\n\\n        emit SetIsFeeExempt(holder, exempt);\\n    }\\n\\n    function setDoContractSwap(bool _enabled) external onlyOwner {\\n        contractSwapEnabled = _enabled;\\n\\n        emit SetDoContractSwap(_enabled);\\n    }\\n\\n    function setDistributionCriteria(\\n        uint256 _minPeriod,\\n        uint256 _minDistribution\\n    ) external onlyOwner {\\n        redFlockiDividendTracker.setDistributionCriteria(\\n            _minPeriod,\\n            _minDistribution\\n        );\\n        flokiCEODividendTracker.setDistributionCriteria(\\n            _minPeriod,\\n            _minDistribution\\n        );\\n\\n        emit ChangeDistributionCriteria(_minPeriod, _minDistribution);\\n    }\\n\\n    function setDistributorSettings(uint256 gas) external onlyOwner {\\n        require(gas < 750000);\\n        distributorGas = gas;\\n    }\\n\\n    function changeMarketingWallet(address _wallet) external onlyOwner {\\n        marketingWallet = _wallet;\\n    }\\n\\n    function changeBuyFees(\\n        uint256 _buyRedRewardFee,\\n        uint256 _buyCEORewardFee,\\n        uint256 _marketingFee\\n    ) external onlyOwner {\\n        require(\\n            (listingTime + 7 days) <= block.timestamp,\\n            \\\"can not change fees for 7 days\\\"\\n        );\\n        buyRedRewardFee = _buyRedRewardFee;\\n        buyMarketingFee = _marketingFee;\\n        buyCEORewardFee = _buyCEORewardFee;\\n\\n        buyTotalFee = _buyRedRewardFee + _marketingFee + _buyCEORewardFee;\\n\\n        require(buyTotalFee <= 10, \\\"Total fees can not greater than 10%\\\");\\n    }\\n\\n    function changeSellFees(\\n        uint256 _sellRedRewardFee,\\n        uint256 _sellCEORewardFee,\\n        uint256 _marketingFee\\n    ) external onlyOwner {\\n        require(\\n            (listingTime + 7 days) <= block.timestamp,\\n            \\\"can not change fees for 7 days\\\"\\n        );\\n        sellRedRewardFee = _sellRedRewardFee;\\n        sellCEORewardFee = _sellCEORewardFee;\\n        sellMarketingFee = _marketingFee;\\n\\n        sellTotalFee = _sellRedRewardFee + _marketingFee + _sellCEORewardFee;\\n\\n        require(sellTotalFee <= 10, \\\"Total fees can not greater than 10%\\\");\\n    }\\n\\n    function enableTrading() external onlyOwner {\\n        require(!isTradeEnabled, \\\"Trading already enabled\\\");\\n        isTradeEnabled = true;\\n        listingTime = block.timestamp;\\n    }\\n\\n    function setAuthorizedWallets(\\n        address _wallet,\\n        bool _status\\n    ) external onlyOwner {\\n        isAuthorized[_wallet] = _status;\\n    }\\n\\n    function rescueBNB() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0, \\\"No enough BNB to transfer\\\");\\n\\n        payable(msg.sender).transfer(balance);\\n    }\\n\\n    function changeGetFeesOnTransfer(bool _status) external onlyOwner {\\n        getTransferFees = _status;\\n    }\\n\\n    function changePair(address _pair) external onlyOwner {\\n        pair = _pair;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AddAuthorizedWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDistribution\",\"type\":\"uint256\"}],\"name\":\"ChangeDistributionCriteria\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"DoContractSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetDoContractSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetIsDividendExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetIsFeeExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLOKICEO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDFLOKI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCEORewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRedRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyRedRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyCEORewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"changeBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"changeGetFeesOnTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"changePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellRedRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellCEORewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"changeSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flokiCEODividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransferFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isFeeExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isRewardExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redFlockiDividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellCEORewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRedRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAuthorizedWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setDoContractSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FlokiCFO", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}