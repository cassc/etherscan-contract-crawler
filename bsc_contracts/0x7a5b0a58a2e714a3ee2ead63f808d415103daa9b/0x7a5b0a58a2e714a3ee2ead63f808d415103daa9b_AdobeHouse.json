{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @title IStakingContract\r\n * @dev Interface for the staking contract.\r\n */\r\ninterface IStakingContract {\r\n    /**\r\n     * @dev Stake tokens.\r\n     * @param staker The address of the user staking tokens.\r\n     * @param amount The amount of tokens to stake.\r\n     */\r\n    function stakeTokens(address staker, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Unstake tokens.\r\n     * @param staker The address of the user unstaking tokens.\r\n     */\r\n    function unstakeTokens(address staker) external;\r\n\r\n    /**\r\n     * @dev Generate reward tokens for a specific user.\r\n     * @param recipient The address of the user receiving reward tokens.\r\n     * @param amount The amount of reward tokens to generate.\r\n     */\r\n    function generateReward(address recipient, uint256 amount) external;\r\n}\r\n\r\n/**\r\n * @title AdobeHouse\r\n * @dev The AdobeHouse token contract.\r\n */\r\ncontract AdobeHouse {\r\n    string public constant name = \"AdobeHouse\";\r\n    string public constant symbol = \"ADOBE\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public constant MAX_SUPPLY = 1000000000 * 10**uint256(decimals);\r\n    uint256 public constant PRESALE_SUPPLY = 100000000 * 10**uint256(decimals);\r\n\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n    uint256 private totalSupply_;\r\n\r\n    address private contractOwner;\r\n    address private stakingContract;\r\n    address private newContractAddress; // New contract address for upgrade\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor() {\r\n        contractOwner = msg.sender;\r\n        balances[msg.sender] = PRESALE_SUPPLY;\r\n        totalSupply_ = PRESALE_SUPPLY;\r\n        emit Transfer(address(0), msg.sender, PRESALE_SUPPLY);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total supply of the token.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the balance of the specified account.\r\n     * @param account The address to query the balance for.\r\n     * @return The balance of the account.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers tokens from the caller's account to the recipient's account.\r\n     * @param recipient The address to transfer tokens to.\r\n     * @param amount The amount of tokens to transfer.\r\n     * @return True if the transfer is successful, false otherwise.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        require(recipient != address(0), \"Cannot transfer to zero address\");\r\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\r\n\r\n        balances[msg.sender] -= amount;\r\n        balances[recipient] += amount;\r\n        emit Transfer(msg.sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens that the spender is allowed to spend on behalf of the owner.\r\n     * @param ownerAddr The address that owns the tokens.\r\n     * @param spender The address that is allowed to spend the tokens.\r\n     * @return The remaining allowance for the spender.\r\n     */\r\n    function allowance(address ownerAddr, address spender) public view returns (uint256) {\r\n        return allowances[ownerAddr][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Approves the spender to spend a specified amount of tokens on behalf of the caller.\r\n     * @param spender The address that is allowed to spend the tokens.\r\n     * @param amount The amount of tokens the spender is allowed to spend.\r\n     * @return True if the approval is successful, false otherwise.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfers tokens from the sender to the recipient using the allowance mechanism.\r\n     * @param sender The address to transfer tokens from.\r\n     * @param recipient The address to transfer tokens to.\r\n     * @param amount The amount of tokens to transfer.\r\n     * @return True if the transfer is successful, false otherwise.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        require(recipient != address(0), \"Cannot transfer to zero address\");\r\n        require(balances[sender] >= amount, \"Insufficient balance\");\r\n        require(allowances[sender][msg.sender] >= amount, \"Insufficient allowance\");\r\n\r\n        balances[sender] -= amount;\r\n        balances[recipient] += amount;\r\n        allowances[sender][msg.sender] -= amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address of the staking contract.\r\n     * @param _stakingContract The address of the staking contract.\r\n     */\r\n    function setStakingContract(address _stakingContract) external {\r\n        require(_stakingContract != address(0), \"Invalid staking contract address\");\r\n        require(msg.sender == contractOwner, \"Only the contract owner can set the staking contract\");\r\n\r\n        stakingContract = _stakingContract;\r\n    }\r\n\r\n    /**\r\n     * @dev Stakes a specified amount of tokens.\r\n     * @param amount The amount of tokens to stake.\r\n     */\r\n    function stakeTokens(uint256 amount) external {\r\n        require(stakingContract != address(0), \"Staking contract not set\");\r\n\r\n        // Perform the transfer from the sender to the staking contract\r\n        transfer(stakingContract, amount);\r\n\r\n        // Call the stakeTokens function in the staking contract\r\n        IStakingContract(stakingContract).stakeTokens(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Unstakes tokens from the staking contract.\r\n     */\r\n    function unstakeTokens() external {\r\n        require(stakingContract != address(0), \"Staking contract not set\");\r\n\r\n        // Call the unstakeTokens function in the staking contract\r\n        IStakingContract(stakingContract).unstakeTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Generates reward tokens for the caller.\r\n     * @param amount The amount of reward tokens to generate.\r\n     */\r\n    function generateReward(uint256 amount) external {\r\n        require(stakingContract != address(0), \"Staking contract not set\");\r\n        \r\n        // Call the generateReward function in the staking contract\r\n        IStakingContract(stakingContract).generateReward(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the contract owner.\r\n     */\r\n    function getContractOwner() public view returns (address) {\r\n        return contractOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the contract owner to sell tokens during the ICO period.\r\n     * @param recipient The address to transfer the sold tokens to.\r\n     * @param amount The amount of tokens to sell.\r\n     */\r\n    function sellTokens(address recipient, uint256 amount) external {\r\n        require(msg.sender == contractOwner, \"Only the contract owner can sell tokens\");\r\n        require(amount <= PRESALE_SUPPLY, \"Not enough tokens available for sale\");\r\n        require(balances[contractOwner] >= amount, \"Insufficient balance\");\r\n\r\n        balances[contractOwner] -= amount;\r\n        balances[recipient] += amount;\r\n        emit Transfer(contractOwner, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Initiates the contract upgrade by setting the new contract address.\r\n     * @param _newContractAddress The address of the new contract.\r\n     */\r\n    function initiateUpgrade(address _newContractAddress) external {\r\n        require(msg.sender == contractOwner, \"Only the contract owner can initiate an upgrade\");\r\n        require(_newContractAddress != address(0), \"Invalid new contract address\");\r\n\r\n        newContractAddress = _newContractAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Finalizes the contract upgrade by transferring balances and ownership to the new contract.\r\n     */\r\n    function finalizeUpgrade() external {\r\n        require(msg.sender == contractOwner, \"Only the contract owner can finalize the upgrade\");\r\n        require(newContractAddress != address(0), \"No new contract address set\");\r\n\r\n        // Transfer balances to the new contract\r\n        balances[newContractAddress] = balances[contractOwner];\r\n        totalSupply_ = totalSupply_ - balances[contractOwner];\r\n\r\n        // Transfer ownership to the new contract\r\n        contractOwner = newContractAddress;\r\n\r\n        emit Transfer(contractOwner, newContractAddress, balances[newContractAddress]);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"generateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContractAddress\",\"type\":\"address\"}],\"name\":\"initiateUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AdobeHouse", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f0e9b521bcf5b72ec66f5702b4e0888abc83c629588fce1643cf9e9a84b7f12e"}