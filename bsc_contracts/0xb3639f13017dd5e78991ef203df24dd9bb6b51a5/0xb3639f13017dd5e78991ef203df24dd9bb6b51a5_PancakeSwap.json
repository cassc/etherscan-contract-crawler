{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n\r\ncontract PancakeSwap {\r\n  address public owner;\r\n  address private constant BISWAP_FACTORY = 0x858E3312ed3A876947EA49d572A7C42DE08af7EE;\r\n  address private constant PANCAKE_ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n  address private constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n  address private constant USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n  IPancakeFactory private constant factory = IPancakeFactory(BISWAP_FACTORY);\r\n  IPancakeRouter private constant router = IPancakeRouter(PANCAKE_ROUTER);\r\n  IPancakePair private immutable pair;\r\n\r\n  constructor() {\r\n    // any BUSD pair, as we only borrowing BUSD. here we choose BUSD/USDT pair\r\n    pair = IPancakePair(factory.getPair(BUSD, USDT));\r\n    owner = msg.sender;\r\n  }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the contract deployer can call this function\");\r\n        _;\r\n    }\r\n\r\n  function withdrawDeposit() external onlyOwner {\r\n    uint256 contractBalance = IERC20(BUSD).balanceOf(address(this));\r\n    IERC20(BUSD).transfer(owner, contractBalance);\r\n  }\r\n\r\n  function swapTokens(uint _amt, address token0, address token1, uint8 slippagePercentage) internal returns (uint amountOut) {\r\n    address[] memory path = new address[](2);\r\n    path[0] = token0;\r\n    path[1] = token1;\r\n\r\n    IERC20(token0).approve(address(router), _amt);\r\n\r\n    uint256[] memory amountsOut = router.getAmountsOut(_amt, path);\r\n    uint256 _amountOut = amountsOut[amountsOut.length - 1];\r\n\r\n    uint256 amountOutMin = _amountOut * (100 - slippagePercentage) / 100; // Applying a slippage tolerance of slippagePercentage\r\n    uint256 deadline = block.timestamp + 1 hours;\r\n\r\n    uint[] memory amounts = router.swapExactTokensForTokens(_amt, amountOutMin, path, address(this), deadline);\r\n\r\n    return amounts[1];\r\n  }\r\n\r\n  // make sure you have enough BUSD in your smart contract to perform swaps\r\n  function swap(uint busdAmount, address _otherAddress, uint8 slippagePercentage) external {\r\n    uint amountReceived = swapTokens(busdAmount, BUSD, _otherAddress, slippagePercentage); // perform first swap from borrowed BUSD to OTHER token\r\n    swapTokens(amountReceived, _otherAddress, BUSD, slippagePercentage); // perform second swap from received OTHER token to BUSD\r\n  }\r\n}\r\n\r\ninterface IPancakePair {\r\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\ninterface IPancakeFactory {\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IPancakeRouter {\r\n  function swapExactTokensForTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint);\r\n\r\n  function balanceOf(address account) external view returns (uint);\r\n\r\n  function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n\r\n  function approve(address spender, uint amount) external returns (bool);\r\n\r\n  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"busdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_otherAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"slippagePercentage\",\"type\":\"uint8\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PancakeSwap", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "byzantium", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f08264b79054ede56116df9286392a4e2a5e8357c60631856216495ca3c95041"}