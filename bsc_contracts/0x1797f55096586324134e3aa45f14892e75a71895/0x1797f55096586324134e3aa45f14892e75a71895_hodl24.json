{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity = 0.8.9;\r\n\r\ninterface IDEXRouter {\r\n\r\n        \r\n    //Token to Token SWAP\r\n        function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n\r\n}\r\n\r\ninterface IBEP20 {\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n  function getRoundData(uint80 _roundId) external view returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData() external view returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\ncontract hodl24 {\r\n\r\n    //TOKENS\r\n    IBEP20 USDT_token;\r\n    IBEP20 BTCB_token;\r\n    IBEP20 CAKE_token;\r\n    IBEP20 ETH_token;\r\n    IBEP20 SOL_token;\r\n    IBEP20 WBNB_token;\r\n\r\n    IDEXRouter router;\r\n    AggregatorV3Interface internal USDT_dataFeed;\r\n    AggregatorV3Interface internal BTCB_dataFeed;\r\n    AggregatorV3Interface internal CAKE_dataFeed;\r\n    AggregatorV3Interface internal ETH_dataFeed;\r\n    AggregatorV3Interface internal SOL_dataFeed;\r\n    AggregatorV3Interface internal WBNB_dataFeed;\r\n\r\n    address payable public owner;\r\n    uint256 public lastWithdrawal;\r\n    uint256 public lockedDays;\r\n    bool public locking;\r\n\r\n    \r\n\r\n    address private USDT_token_address  =   0x55d398326f99059fF775485246999027B3197955; \r\n    address private BTCB_token_address  =   0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c;   \r\n    address private CAKE_token_address  =   0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;    \r\n    address private ETH_token_address   =   0x2170Ed0880ac9A755fd29B2688956BD959F933F8;\r\n    address private SOL_token_address   =   0x570A5D26f7765Ecb712C0924E4De545B89fD43dF;    \r\n    address private WBNB_token_address  =   0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n    uint256 private USDT_token_balance;\r\n    uint256 private BTCB_token_balance;\r\n    uint256 private CAKE_token_balance;\r\n    uint256 private ETH_token_balance;\r\n    uint256 private SOL_token_balance;\r\n    uint256 private WBNB_token_balance;\r\n\r\n    address public router_address       = 0x10ED43C718714eb63d5aA57B78B54704E256024E; //PCS\r\n \r\n    constructor() {\r\n        \r\n        //Set Router\r\n        router = IDEXRouter(router_address);\r\n\r\n        //Set Tokens\r\n        USDT_token      = IBEP20(USDT_token_address);\r\n        BTCB_token      = IBEP20(BTCB_token_address);\r\n        CAKE_token      = IBEP20(CAKE_token_address);\r\n        ETH_token       = IBEP20(ETH_token_address);\r\n        SOL_token       = IBEP20(SOL_token_address);\r\n        WBNB_token      = IBEP20(WBNB_token_address);\r\n\r\n        //Owner\r\n        owner = payable(msg.sender);\r\n\r\n        //Lock\r\n        lastWithdrawal = 0;\r\n        lockedDays = 5 minutes; //testLock on launch\r\n        locking = false;\r\n\r\n\r\n        USDT_dataFeed = AggregatorV3Interface(0xB97Ad0E74fa7d920791E90258A6E2085088b4320);        \r\n        BTCB_dataFeed = AggregatorV3Interface(0x264990fbd0A4796A3E3d8E37C4d5F87a3aCa5Ebf);        \r\n        CAKE_dataFeed = AggregatorV3Interface(0xB6064eD41d4f67e353768aA239cA86f4F73665a1);        \r\n        ETH_dataFeed = AggregatorV3Interface(0x9ef1B8c0E4F7dc8bF5719Ea496883DC6401d5b2e);        \r\n        SOL_dataFeed = AggregatorV3Interface(0x0E8a53DD9c13589df6382F13dA6B3Ec8F919B323);        \r\n        WBNB_dataFeed = AggregatorV3Interface(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE); //8\r\n        \r\n\r\n   \r\n    }\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the contract owner can call this function\");\r\n        _;\r\n    }\r\n    modifier isLocked() {\r\n        require(block.timestamp >= lastWithdrawal + lockedDays, \"Withdrawal is Locked try later\"); //update\r\n        _;\r\n    }\r\n\r\n    function updatePCSRouterAddress(address _addrs) public onlyOwner{\r\n        router_address = _addrs;\r\n    }\r\n\r\n    function updateOwner(address _OwnerAddrs) public onlyOwner{\r\n        owner = payable(_OwnerAddrs);\r\n    }\r\n\r\n    function startLock(uint256 _numDays) public onlyOwner{\r\n        //can only use once\r\n        require(locking == false, \"Time locking has started already!\");\r\n        \r\n        locking = true;\r\n\r\n        lastWithdrawal = block.timestamp;\r\n        lockedDays = _numDays * 1 days;\r\n        \r\n    }\r\n\r\n\r\n\r\n/////////////////////\r\n\r\n    function DepositFunds(uint256 _amountInUSD) public {\r\n        \r\n        //you must apporve this contract to spend USDT...blah blah\r\n        uint256 _dollarsWifWei = _amountInUSD * (10**18);\r\n        require(USDT_token.transferFrom(msg.sender, address(this), _dollarsWifWei), \"Transfer failed\");\r\n\r\n\r\n        splitBuy(_dollarsWifWei);\r\n        \r\n\r\n    }\r\n\r\n\r\n\r\n    function splitBuy(uint256 _amount) public onlyOwner {\r\n        \r\n        uint256 _split = _amount  / 6 ;\r\n\r\n    //buy BTCB\r\n        \r\n        address[] memory BTCBpath = new address[](2);\r\n        BTCBpath[0] = USDT_token_address;\r\n        BTCBpath[1] = BTCB_token_address;\r\n\r\n        USDT_token.approve(router_address, _split);\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens\r\n        (_split, 1, BTCBpath, address(this), block.timestamp);\r\n\r\n\r\n\r\n    //buy CAKE\r\n        \r\n        address[] memory CAKEpath = new address[](2);\r\n        CAKEpath[0] = USDT_token_address;\r\n        CAKEpath[1] = CAKE_token_address;\r\n\r\n        USDT_token.approve(router_address, _split);\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens\r\n        (_split, 1, CAKEpath, address(this), block.timestamp);\r\n\r\n    //buy ETH\r\n        \r\n        address[] memory ETHpath = new address[](2);\r\n        ETHpath[0] = USDT_token_address;\r\n        ETHpath[1] = ETH_token_address;\r\n\r\n        USDT_token.approve(router_address, _split);\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens\r\n        (_split, 1, ETHpath, address(this), block.timestamp);\r\n\r\n    //buy SOL\r\n        \r\n        address[] memory SOLpath = new address[](2);\r\n        SOLpath[0] = USDT_token_address;\r\n        SOLpath[1] = SOL_token_address;\r\n\r\n        USDT_token.approve(router_address, _split);\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens\r\n        (_split, 1, SOLpath, address(this), block.timestamp);\r\n\r\n    //buy WBNB\r\n        \r\n        address[] memory WBNBpath = new address[](2);\r\n        WBNBpath[0] = USDT_token_address;\r\n        WBNBpath[1] = WBNB_token_address;\r\n\r\n        USDT_token.approve(router_address, _split);\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens\r\n        (_split, 1, WBNBpath, address(this), block.timestamp);\r\n\r\n    }\r\n\r\n\r\n    function swapToUSDT() public onlyOwner{\r\n\r\n    //sell BTCB    \r\n        address[] memory BTCButpath = new address[](2);\r\n        BTCButpath[0] = BTCB_token_address;\r\n        BTCButpath[1] = USDT_token_address;\r\n\r\n        BTCB_token.approve(router_address, getBTCBBalance());\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens\r\n        (getBTCBBalance(), 1, BTCButpath, address(this), block.timestamp);\r\n        \r\n    //sell CAKE    \r\n        address[] memory CAKEOutpath = new address[](2);\r\n        CAKEOutpath[0] = CAKE_token_address;\r\n        CAKEOutpath[1] = USDT_token_address;\r\n\r\n        CAKE_token.approve(router_address, getCAKEBalance());\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens\r\n        (getCAKEBalance(), 1, CAKEOutpath, address(this), block.timestamp);\r\n        \r\n    //sell ETH    \r\n        address[] memory ETHOutpath = new address[](2);\r\n        ETHOutpath[0] = ETH_token_address;\r\n        ETHOutpath[1] = USDT_token_address;\r\n\r\n        ETH_token.approve(router_address, getETHBalance());\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens\r\n        (getETHBalance(), 1, ETHOutpath, address(this), block.timestamp);\r\n        \r\n    //sell SOL    \r\n        address[] memory SOLOutpath = new address[](2);\r\n        SOLOutpath[0] = SOL_token_address;\r\n        SOLOutpath[1] = USDT_token_address;\r\n\r\n        SOL_token.approve(router_address, getSOLBalance());\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens\r\n        (getSOLBalance(), 1, SOLOutpath, address(this), block.timestamp);\r\n\r\n    //sell WBNB    \r\n        address[] memory WBNBOutpath = new address[](2);\r\n        WBNBOutpath[0] = WBNB_token_address;\r\n        WBNBOutpath[1] = USDT_token_address;\r\n\r\n        WBNB_token.approve(router_address, getWBNBBalance());\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens\r\n        (getWBNBBalance(), 1, WBNBOutpath, address(this), block.timestamp);\r\n       \r\n       \r\n    }\r\n\r\n\r\n\r\n//********************\r\n//******BALANCE*******\r\n//********************\r\n\r\n    function getUSDTBalance() public view returns (uint256 _usdts){\r\n        _usdts = USDT_token.balanceOf(address(this));\r\n        return _usdts;\r\n    }\r\n\r\n    function getBTCBBalance() public view returns (uint256 _btcbs){\r\n        _btcbs = BTCB_token.balanceOf(address(this));\r\n        return _btcbs;\r\n    }\r\n\r\n    function getCAKEBalance() public view returns (uint256 _cakes){\r\n        _cakes = CAKE_token.balanceOf(address(this));\r\n        return _cakes;\r\n    }\r\n\r\n    function getETHBalance() public view returns (uint256 _eths){\r\n        _eths = ETH_token.balanceOf(address(this));\r\n        return _eths;\r\n    }\r\n\r\n    function getSOLBalance() public view returns (uint256 _sols){\r\n        _sols = SOL_token.balanceOf(address(this));\r\n        return  _sols;\r\n    }\r\n\r\n    function getWBNBBalance() public view returns (uint256 _wbnbs){\r\n        _wbnbs = WBNB_token.balanceOf(address(this));\r\n        return _wbnbs;\r\n    }\r\n\r\n//********************\r\n//******WITHDRAW******\r\n//********************\r\n\r\n    function withdraw_USDT() public onlyOwner isLocked{\r\n        require(USDT_token.balanceOf(address(this)) > 0, \"No USDT in contract!\");\r\n        require(USDT_token.transfer(msg.sender, USDT_token.balanceOf(address(this))), \"Transfer Failed\");  \r\n\r\n        lastWithdrawal = block.timestamp;\r\n    }\r\n\r\n    function withdraw_BTCB() public onlyOwner isLocked{\r\n        require(BTCB_token.balanceOf(address(this)) > 0, \"No BTCB in contract!\");\r\n        require(BTCB_token.transfer(msg.sender, BTCB_token.balanceOf(address(this))), \"Transfer Failed\"); \r\n\r\n        lastWithdrawal = block.timestamp;\r\n    }\r\n\r\n    function withdraw_CAKE() public onlyOwner isLocked{\r\n        require(CAKE_token.balanceOf(address(this)) > 0, \"No CAKE in contract!\");\r\n        require(CAKE_token.transfer(msg.sender, CAKE_token.balanceOf(address(this))), \"Transfer Failed\"); \r\n\r\n        lastWithdrawal = block.timestamp;\r\n    }\r\n\r\n    function withdraw_ETH() public onlyOwner isLocked{\r\n        require(ETH_token.balanceOf(address(this)) > 0, \"No ETH in contract!\");\r\n        require(ETH_token.transfer(msg.sender, ETH_token.balanceOf(address(this))), \"Transfer Failed\"); \r\n\r\n        lastWithdrawal = block.timestamp;\r\n    }\r\n\r\n    function withdraw_SOL() public onlyOwner isLocked{\r\n        require(SOL_token.balanceOf(address(this)) > 0, \"No SOL in contract!\");\r\n        require(SOL_token.transfer(msg.sender, SOL_token.balanceOf(address(this))), \"Transfer Failed\"); \r\n\r\n        lastWithdrawal = block.timestamp;\r\n    }\r\n\r\n    function withdraw_WBNB() public onlyOwner isLocked{\r\n        require(WBNB_token.balanceOf(address(this)) > 0, \"No WBNB in contract!\");\r\n        require(WBNB_token.transfer(msg.sender, WBNB_token.balanceOf(address(this))), \"Transfer Failed\"); \r\n\r\n        lastWithdrawal = block.timestamp;\r\n    }\r\n\r\n    function liquidate() public onlyOwner isLocked{\r\n        \r\n        swapToUSDT();\r\n        getUSDTBalance();\r\n        withdraw_USDT();\r\n\r\n        //Reset Lock\r\n        lastWithdrawal = 0;\r\n        lockedDays = 0; \r\n        locking = false;\r\n\r\n        //Use StartLock function to resume lock\r\n    }\r\n\r\n    function rebalance() public onlyOwner {\r\n\r\n        swapToUSDT();\r\n        splitBuy(getUSDTBalance());\r\n    }\r\n\r\n\r\n//***********************\r\n//******PRICE FEEDS******\r\n//***********************\r\n\r\n\r\n\r\nfunction PriceOfUSDT() private view returns (int) {\r\n// prettier-ignore\r\n        (\r\n            /* uint80 roundID */,\r\n            int answer,\r\n            /*uint startedAt*/,\r\n            /*uint timeStamp*/,\r\n            /*uint80 answeredInRound*/\r\n        ) = USDT_dataFeed.latestRoundData();\r\n        return answer;\r\n}\r\n\r\nfunction PriceOfBTCB() private view returns (int) {\r\n// prettier-ignore\r\n        (\r\n            /* uint80 roundID */,\r\n            int answer,\r\n            /*uint startedAt*/,\r\n            /*uint timeStamp*/,\r\n            /*uint80 answeredInRound*/\r\n        ) = BTCB_dataFeed.latestRoundData();\r\n        return answer;\r\n}\r\n\r\nfunction PriceOfCAKE() private view returns (int) {\r\n// prettier-ignore\r\n        (\r\n            /* uint80 roundID */,\r\n            int answer,\r\n            /*uint startedAt*/,\r\n            /*uint timeStamp*/,\r\n            /*uint80 answeredInRound*/\r\n        ) = CAKE_dataFeed.latestRoundData();\r\n        return answer;\r\n}\r\n\r\nfunction PriceOfETH() private view returns (int) {\r\n// prettier-ignore\r\n        (\r\n            /* uint80 roundID */,\r\n            int answer,\r\n            /*uint startedAt*/,\r\n            /*uint timeStamp*/,\r\n            /*uint80 answeredInRound*/\r\n        ) = ETH_dataFeed.latestRoundData();\r\n        return answer;\r\n}\r\n\r\nfunction PriceOfSOL() private view returns (int) {\r\n// prettier-ignore\r\n        (\r\n            /* uint80 roundID */,\r\n            int answer,\r\n            /*uint startedAt*/,\r\n            /*uint timeStamp*/,\r\n            /*uint80 answeredInRound*/\r\n        ) = SOL_dataFeed.latestRoundData();\r\n        return answer;\r\n}\r\n\r\nfunction PriceOfWBNB() private view returns (int) {\r\n// prettier-ignore\r\n        (\r\n            /* uint80 roundID */,\r\n            int answer,\r\n            /*uint startedAt*/,\r\n            /*uint timeStamp*/,\r\n            /*uint80 answeredInRound*/\r\n        ) = WBNB_dataFeed.latestRoundData();\r\n        return answer;\r\n}\r\n\r\n\r\nfunction TotalBalInDollars() public view returns(uint256 totalBal){\r\n\r\n    totalBal =  (uint256(PriceOfUSDT()) * getUSDTBalance()) + (uint256(PriceOfBTCB()) * getBTCBBalance())\r\n                +\r\n                (uint256(PriceOfCAKE()) * getCAKEBalance()) + (uint256(PriceOfETH()) * getETHBalance()) \r\n                +\r\n                (uint256(PriceOfSOL()) * getSOLBalance()) + (uint256(PriceOfWBNB()) * getWBNBBalance()); \r\n\r\n    return (totalBal / 10**8);\r\n\r\n}\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountInUSD\",\"type\":\"uint256\"}],\"name\":\"DepositFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalBalInDollars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBTCBBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_btcbs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCAKEBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cakes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_eths\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSOLBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_sols\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWBNBBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_wbnbs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"splitBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"}],\"name\":\"startLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_OwnerAddrs\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addrs\",\"type\":\"address\"}],\"name\":\"updatePCSRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_BTCB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_CAKE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_ETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_SOL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_USDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_WBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "hodl24", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7bda6d0cd6f0b5f951c61dae52e060b29ae8917e07c066276f6d63c1ecf3b7ce"}