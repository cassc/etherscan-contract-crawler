{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"},\"BEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.4.0;\\n\\nimport \\u0027./Ownable.sol\\u0027;\\nimport \\u0027./Context.sol\\u0027;\\nimport \\u0027./IBEP20.sol\\u0027;\\nimport \\u0027./SafeMath.sol\\u0027;\\n\\n/**\\n * @dev Implementation of the {IBEP20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {BEP20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of BEP20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IBEP20-approve}.\\n */\\ncontract BEP20 is Context, IBEP20, Ownable {\\n    using SafeMath for uint256;\\n\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    uint8 private _setupDecimals = 18;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = _setupDecimals;\\n    }\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external override view returns (address) {\\n        return owner();\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public override view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public override view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n    * @dev Returns the number of decimals used to get its user representation.\\n    */\\n    function decimals() public override view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-totalSupply}.\\n     */\\n    function totalSupply() public override view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-balanceOf}.\\n     */\\n    function balanceOf(address account) virtual public override view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {BEP20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) virtual public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-allowance}.\\n     */\\n    function allowance(address owner, address spender) virtual public override view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {BEP20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) virtual public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {BEP20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom (address sender, address recipient, uint256 amount) virtual public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(amount, \\u0027BEP20: transfer amount exceeds allowance\\u0027)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {BEP20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {BEP20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\u0027BEP20: decreased allowance below zero\\u0027));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\\n     * the total supply.\\n     *\\n     * Requirements\\n     *\\n     * - `msg.sender` must be the token owner\\n     */\\n    function mint(uint256 amount) public onlyOwner returns (bool) {\\n        _mint(_msgSender(), amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer (address sender, address recipient, uint256 amount) virtual internal {\\n        require(sender != address(0), \\u0027BEP20: transfer from the zero address\\u0027);\\n        require(recipient != address(0), \\u0027BEP20: transfer to the zero address\\u0027);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\u0027BEP20: transfer amount exceeds balance\\u0027);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\u0027BEP20: mint to the zero address\\u0027);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\u0027BEP20: burn from the zero address\\u0027);\\n\\n        _balances[account] = _balances[account].sub(amount, \\u0027BEP20: burn amount exceeds balance\\u0027);\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve (address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\u0027BEP20: approve from the zero address\\u0027);\\n        require(spender != address(0), \\u0027BEP20: approve to the zero address\\u0027);\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller\\u0027s allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\u0027BEP20: burn amount exceeds allowance\\u0027));\\n    }\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"},\"IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.4;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"IUFXReferral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IUFXReferral {\\n    /**\\n     * @dev Record referral.\\n     */\\n    function recordReferral(address user, address referrer) external;\\n\\n    /**\\n     * @dev Record referral commission.\\n     */\\n    function recordReferralCommission(address referrer, uint256 commission) external;\\n\\n    /**\\n     * @dev Get the referrer address that referred the user.\\n     */\\n    function getReferrer(address user) external view returns (address);\\n}\"},\"IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.2;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"},\"MasterChef_FINAL_VERSION.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\nimport \\\"./IUFXReferral.sol\\\";\\nimport \\\"./UFXToken.sol\\\";\\nimport \\u0027./IBEP20.sol\\u0027;\\nimport \\u0027./SafeBEP20.sol\\u0027;\\nimport \\u0027./Ownable.sol\\u0027;\\nimport \\u0027./ReentrancyGuard.sol\\u0027;\\n\\n\\n// MasterChef is the master of UFX. He can make UFX and he is a fair guy.\\n//\\n// Note that it\\u0027s ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once UFX is sufxiciently\\n// distributed and the community can show to govern itself.\\n//\\n// Have fun reading it. Hopefully it\\u0027s bug-free. God bless.\\ncontract MasterChef is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeBEP20 for IBEP20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount;         // How many LP tokens the user has provided.\\n        uint256 rewardDebt;     // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of UFXs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accUFXPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here\\u0027s what happens:\\n        //   1. The pool\\u0027s `accUFXPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User\\u0027s `amount` gets updated.\\n        //   4. User\\u0027s `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IBEP20 lpToken;           // Address of LP token contract.\\n        uint256 allocPoint;       // How many allocation points assigned to this pool. UFX to distribute per block.\\n        uint256 lastRewardBlock;  // Last block number that UFX distribution occurs.\\n        uint256 accUfxPerShare;   // Accumulated UFX per share, times 1e12. See below.\\n        uint16 withdrawFeeBP;      // Withdraw fee in basis points\\n        uint16 depositFeeBP;\\n    }\\n\\n    // The operator is NOT the owner, is the operator of the machine\\t\\n    address private _operator;\\t\\n\\n    // The UFX TOKEN!\\n    UFXToken public ufx;\\n    // UFX tokens created per block.\\n    uint256 public ufxPerBlock;\\n    // Bonus muliplier for early UFX makers.\\n    uint256 public constant BONUS_MULTIPLIER = 1;\\n    // Deposit Fee address / Dev Address and BuyBack Wallet\\n    // address public feeAddBb;\\n    address public feeAddDev;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 =\\u003e mapping(address =\\u003e UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The block number when UFX mining starts.\\n    uint256 public startBlock;\\n    uint16 public feeDevRate = 1200;\\n\\n    // UFX referral contract address.\\n    \\n    //-----------------------------------------------------------------AlexChange\\n    // IUFXReferral public ufxReferral;\\n\\n    // Referral commission rate in basis points.\\n    //-----------------------------------------------------------------AlexChange\\n    // uint16 public referralCommissionRate = 300;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmissionRateUpdated(address indexed user, uint256 ufxPerBlock);\\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\\t\\n    // event ReferralCommissionPaid(address indexed user, address indexed referrer, uint256 commissionAmount);\\n\\n    //emergency\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n\\n    constructor(\\n        UFXToken _ufx,\\n        //-----------------------------------------------------------------AlexChange\\n        // IUFXReferral _ufxReferral,\\n        // address _feeAddBb,\\n        address _feeAddDev,\\n        uint256 _ufxPerBlock,\\n        uint256 _startBlock\\n    ) public {\\n        ufx = _ufx;\\n        //-----------------------------------------------------------------AlexChange\\n        // ufxReferral = _ufxReferral;\\n        // feeAddBb = _feeAddBb;\\n        feeAddDev = _feeAddDev;\\n        ufxPerBlock = _ufxPerBlock;\\n        startBlock = _startBlock;\\n        _operator = msg.sender;\\t\\n    }\\n\\n    // Operator CAN do modifier\\t\\n    modifier onlyOperator() {\\t\\n        require(_operator == msg.sender, \\\"operator: caller is not the operator\\\");\\t\\n        _;\\t\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    mapping(IBEP20 =\\u003e bool) public poolExistence;\\n\\n    modifier nonDuplicated(IBEP20 _lpToken) {\\n        require(poolExistence[_lpToken] == false, \\\"nonDuplicated: duplicated\\\");\\n        _;\\n    }\\n\\n    modifier poolExists(uint256 pid) {\\n        require(pid \\u003c poolInfo.length, \\\"pool inexistent\\\");\\n        _;\\n    }\\n\\n    modifier lpProtection(uint256 pid, uint256 _amount) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        uint256 maxWithdraw = lpSupply.mul(1500).div(10000);\\n        require(_amount \\u003c maxWithdraw, \\\"withdraw: _amount is higher than maximum LP withdraw\\\");\\n        _;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(uint256 _allocPoint, IBEP20 _lpToken, uint16 _withdrawFeeBP, uint16 _depositFeeBP, bool _withUpdate) public onlyOwner nonDuplicated(_lpToken) {\\n        require(_withdrawFeeBP \\u003c= 800, \\\"add: invalid deposit fee basis points\\\");\\n        require(_depositFeeBP \\u003c= 400, \\\"add: invalid deposit fee basis points\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number \\u003e startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolExistence[_lpToken] = true;\\n        poolInfo.push(PoolInfo({\\n            lpToken : _lpToken,\\n            allocPoint : _allocPoint,\\n            lastRewardBlock : lastRewardBlock,\\n            accUfxPerShare : 0,\\n            withdrawFeeBP : _withdrawFeeBP,\\n            depositFeeBP: _depositFeeBP\\n        }));\\n    }\\n\\n    // Update the given pool\\u0027s UFX allocation point and deposit fee. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint, uint16 _withdrawFeeBP, uint16 _depositFeeBP, bool _withUpdate) public onlyOwner poolExists(_pid) {\\n        require(_withdrawFeeBP \\u003c= 800, \\\"set: invalid deposit fee basis points\\\");\\n        require(_depositFeeBP \\u003c= 400, \\\"set: invalid deposit fee basis points\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].withdrawFeeBP = _withdrawFeeBP;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\\n    }\\n\\n    // View function to see pending UFXs on frontend.\\n    function pendingUfx(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accUfxPerShare = pool.accUfxPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (block.number \\u003e pool.lastRewardBlock \\u0026\\u0026 lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 ufxReward = multiplier.mul(ufxPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            accUfxPerShare = accUfxPerShare.add(ufxReward.mul(1e12).div(lpSupply));\\n        }\\n        return user.amount.mul(accUfxPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid \\u003c length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number \\u003c= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 ufxReward = multiplier.mul(ufxPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n        ufx.mint(feeAddDev, ufxReward.mul(feeDevRate).div(10000));\\n        ufx.mint(address(this), ufxReward);\\n        pool.accUfxPerShare = pool.accUfxPerShare.add(ufxReward.mul(1e12).div(lpSupply));\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to MasterChef for UFX allocation.\\n    //-----------------------------------------------------------------AlexChange\\n    //function deposit(uint256 _pid, uint256 _amount, address _referrer) public nonReentrant poolExists(_pid) {\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant poolExists(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n\\n        // Record referral if all below applies\\n        //-----------------------------------------------------------------AlexChange\\n        // if (_amount \\u003e 0 \\u0026\\u0026 address(ufxReferral) != address(0) \\u0026\\u0026 _referrer != address(0) \\u0026\\u0026 _referrer != msg.sender) {\\n        //     ufxReferral.recordReferral(msg.sender, _referrer);\\n        // }\\n\\n        // Try to harvest\\n        if (user.amount \\u003e 0) {\\n            harvest(_pid);\\n        }\\n\\n        // Thanks for RugDoc advice\\n        // Add user.amount\\n        if (_amount \\u003e 0) {\\n            if (pool.depositFeeBP \\u003e 0) {\\n                //--------------------------depositfee handling--------------------------------\\n                //ex 100LP -\\u003e (4%) 4ufx// 100 % 400 -\\u003e 40000 / 10000 =\\u003e 4ufx\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000); //4ufx\\n                // uint256 depositFeeHalf = depositFee.div(2);//2ufx\\n\\n                // pool.lpToken.safeTransfer(feeAddDev, depositFee); \\n                //4ufx -\\u003e (x) this pool send ufx to feeAddDev..(x) \\n                \\n                //it must be sender to feeAddDev\\n                pool.lpToken.safeTransferFrom(address(msg.sender), feeAddDev, depositFee);\\n\\n                // pool.lpToken.safeTransfer(feeAddBb, withdrawFeeHalf);\\n                _amount = _amount.sub(depositFee); // 96\\n                // pool.lpToken.safeTransfer(address(msg.sender), _amount);               \\n                //----------------------------------------------------------------------------\\n            }\\n                //--------------------------------Transfer except Fee-------------------------\\n                // LP ammount before\\n                uint256 before = pool.lpToken.balanceOf(address(this));\\n                // Transafer from user\\n                pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n                // LP ammount after\\n                uint256 _after = pool.lpToken.balanceOf(address(this));\\n                // Real amount of LP transfer to this address\\n                _amount = _after.sub(before);\\n                user.amount = user.amount.add(_amount);\\n                //----------------------------------------------------------------------------\\n        }\\n\\n        // Update user reward debt and emit Deposit\\n        user.rewardDebt = user.amount.mul(pool.accUfxPerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant poolExists(_pid) lpProtection(_pid, _amount){\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount \\u003e= _amount, \\\"withdraw: Amount to withdraw higher than LP balance.\\\");\\n        updatePool(_pid);\\n        \\n        // Harvest before withdraw\\n        harvest(_pid);\\n\\n        // Withdraw procedure\\n        if (_amount \\u003e 0) {\\n            user.amount = user.amount.sub(_amount);\\n            // Remove fee \\n            if (pool.withdrawFeeBP \\u003e 0) {\\n                uint256 withdrawFee = _amount.mul(pool.withdrawFeeBP).div(10000);\\n                // uint256 withdrawFeeHalf = withdrawFee.div(2);\\n                pool.lpToken.safeTransfer(feeAddDev, withdrawFee);\\n                // pool.lpToken.safeTransfer(feeAddBb, withdrawFeeHalf);\\n                _amount = _amount.sub(withdrawFee);\\n                pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n            }\\n        }\\n\\n        user.rewardDebt = user.amount.mul(pool.accUfxPerShare).div(1e12);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Safe UFX transfer function, just in case if rounding error causes pool to not have enough UFXs.\\n    function safeUfxTransfer(address _to, uint256 _amount) internal {\\n        uint256 ufxBal = ufx.balanceOf(address(this));\\n        bool transferSuccess = false;\\n        if (_amount \\u003e ufxBal) {\\n            transferSuccess = ufx.transfer(_to, ufxBal);\\n        } else {\\n            transferSuccess = ufx.transfer(_to, _amount);\\n        }\\n        require(transferSuccess, \\\"safeUfxTransfer: transfer failed\\\");\\n    }\\n\\n    // Harvest UFXs.\\n    function harvest(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        uint256 pending = user.amount.mul(pool.accUfxPerShare).div(1e12).sub(user.rewardDebt);\\n        if (pending \\u003e 0) {\\n            // send rewards\\n            safeUfxTransfer(msg.sender, pending);\\n            // payReferralCommission(msg.sender, pending);\\n        }\\n    }\\n\\n    // Pay referral commission to the referrer who referred this user.\\n    //-----------------------------------------------------------------AlexChange\\n    // function payReferralCommission(address _user, uint256 _pending) internal {\\n    //     if (address(ufxReferral) != address(0) \\u0026\\u0026 referralCommissionRate \\u003e 0) {\\n    //         address referrer = ufxReferral.getReferrer(_user);\\n    //         uint256 commissionAmount = _pending.mul(referralCommissionRate).div(10000);\\n\\n    //         if (referrer != address(0) \\u0026\\u0026 commissionAmount \\u003e 0) {\\n    //             ufx.mint(referrer, commissionAmount);\\n    //             ufxReferral.recordReferralCommission(referrer, commissionAmount);\\n    //             emit ReferralCommissionPaid(_user, referrer, commissionAmount);\\n    //         }\\n    //     }\\n    // }\\n    \\n    /**\\t\\n     * @dev Returns the address of the current operator.\\t\\n     */\\t\\n    function operator() public view returns (address) {\\t\\n        return _operator;\\t\\n    }\\n\\n    /**\\t\\n     * @dev Transfers operator of the contract to a new account (`newOperator`).\\t\\n     * Can only be called by the current operator.\\t\\n     */\\t\\n    function transferOperator(address newOperator) public onlyOperator {\\t\\n        require(lockerState() == false, \\\"Locker must be unlocked\\\");\\n        require(newOperator != address(0), \\\"transferOperator: new operator is the zero address\\\");\\t\\n        emit OperatorTransferred(_operator, newOperator);\\t\\n        _operator = newOperator;\\t\\n    }\\n\\n\\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\\n    function updateEmissionRate(uint256 _ufxPerBlock) public onlyOperator {\\n        massUpdatePools();\\n        emit EmissionRateUpdated(msg.sender, _ufxPerBlock);\\n        ufxPerBlock = _ufxPerBlock;\\n    }\\n\\n\\n    // update dev fee rate\\t\\n    function updateFeeDevRate(uint16 _newFeeDevRate) public onlyOperator {\\t\\n        require(_newFeeDevRate \\u003c= 1200, \\\"update: fee dev rate is over 20%\\\");\\t\\n        feeDevRate = _newFeeDevRate;\\t\\n    }\\n\\n    // update deposit fee rate\\t\\n    // function updateDepositFeeRate(uint16 _newFeeDevRate) public onlyOperator {\\t\\n    //     require(_newDepositFeeRate \\u003c= 800, \\\"update: fee dev rate is over 20%\\\");\\t\\n    //     feeDevRate = _newDepositFeeRate;\\t\\n    // }\\n\\n    // update fee address dev\\t\\n    function updateFeeAddDev(address _newFeeAddDev) public onlyOperator {\\t\\n        require(_newFeeAddDev != address(0), \\\"update: fee address dev is zero\\\");\\t\\n        feeAddDev = _newFeeAddDev;\\t\\n    }\\n\\n    function updateStartBlock(uint256 _newStartBlock) public onlyOperator {\\t\\n        startBlock = _newStartBlock;\\t\\n    }\\n\\n       // allow owner to finalize the presale once the presale is ended\\n    function updateUFXOwner(address newOwner) public onlyOwner {\\n        ufx.transferOwnership(newOwner);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];//ex 100 Lp\\n        \\n        if (pool.withdrawFeeBP \\u003e= 0) {\\n            //ex) user has 100lp\\n            uint256 withdrawFee = user.amount.mul(pool.withdrawFeeBP).div(10000); // 8 Lp\\n            pool.lpToken.safeTransfer(feeAddDev, withdrawFee);// send 8ufx\\n\\n\\n            uint256 afterFee = user.amount.sub(withdrawFee); // 100 - 8 =\\u003e 92 Lp\\n            pool.lpToken.safeTransfer(address(msg.sender), afterFee); \\n            emit EmergencyWithdraw(msg.sender, _pid, afterFee);\\n            user.amount = 0;\\n            user.rewardDebt = 0;\\n        }    \\n    }\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n    \\n    // The lockerOwner\\t\\n    address private _lockerOwner = 0x69faAb4bdE0c98C53c7a2b1daECa7965592570A2;\\t\\n    // unlocked firsttime\\t\\n    bool public _locker = false;\\n    \\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event ChangeLocker(bool enabled);\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    // lockerOwner\\t\\n    modifier onlyLockerOwner() {\\t\\n        require(_lockerOwner == _msgSender(), \\\"LockerOwner: caller is not the lockerOwner\\\");\\t\\n        _;\\t\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    \\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(lockerState() == false, \\\"Locker must be unlocked\\\");\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current operator.\\n     */\\n    function lockerOwner() public view returns (address) {\\n        return _lockerOwner;\\n    }\\n\\n    function changeLockerState() public onlyLockerOwner {\\n        if(lockerState() == true) {\\n            _locker = false;\\n        } else {\\n            _locker = true;\\n        }\\n\\n        emit ChangeLocker(_locker);\\n    }\\n\\n    function lockerState() public view virtual returns (bool) {\\n        return _locker;\\n    }\\n\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\"},\"SafeBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeBEP20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeBEP20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeBEP20: BEP20 operation did not succeed\\\");\\n        }\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c \\u003c a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b \\u003e a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a % b;\\n    }\\n}\"},\"UFXToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./BEP20.sol\\\";\\nimport \\\"./IUniswapV2Router02.sol\\\";\\n\\n// UFXToken with Alex Mar 14, 2022.\\ncontract UFXToken is BEP20 {\\n    // address public busdTokenAddress = 0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7;\\n    // BEP20 public BUSD = BEP20(busdTokenAddress);\\n    // uint256 BUSD_BAL = BUSD.balanceOf(address(this))\\n\\n    // Supply capped at 3.45MM -\\u003e 3450000 // 1MM -\\u003e 1,000,000 // 250MM -\\u003e 250,000,000\\n    uint256 public cap = 250000000 * 10**18; //INMUTABLE\\n    // uint256 public initialCap = 400000 * 10**18; //INMUTABLE\\n\\n\\n\\n    // The operator is NOT the owner, is the operator of the machine\\n    address private _operator;\\n\\n    // Addresses excluded from fees\\n    mapping (address =\\u003e bool) private _isExcludedFromFee;\\n\\n    // Addresses that are excluded from antiWhale\\n    mapping(address =\\u003e bool) private _excludedFromAntiWhale;\\n\\n    // In swap and liquify\\n    bool private _inSwapAndLiquify;\\n\\n    // Max holding rate in basis point. (default is 3% of total supply)\\n    // Transfers cannot result in a balance higher than the maxholdingrate*total supply\\n    // Except if the owner (masterchef) is interacting. Users would not be able to harvest rewards in edge cases\\n    // such as if an user has more than maxholding to harvest without this exception.\\n    // Addresses in the antiwhale exclude list can receive more too. This is for the liquidity pools and the token itself\\n    uint16 public maxHoldingRate = 300; // INMUTABLE \\n\\n    // Transfer tax rate in basis points. (default 4%)\\n    uint16 public transferTaxRate = 400; // INMUTABLE\\n\\n    // nftTaxRate in basis points. (default 1%)\\n    uint16 public nftTaxRate = 100; // INMUTABLE\\n\\n    // feeWallet rate % of transfer tax. (default 20% x 5% = 1% of total amount).\\n    uint16 public liquifyRate = 93; // INMUTABLE\\n\\n    // Min amount to liquify. (default 500 UFX)\\n    uint256 public minAmountToLiquify = 100 ether; // INMUTABLE\\n\\n    // PCS LP Token Address\\n    address public lpToken; // ONLY ONCE!\\n\\n    // Automatic swap and liquify enabled\\n    bool public swapAndLiquifyEnabled = true; // INMUTABLE\\n\\n    // PCS Router Address\\n    IUniswapV2Router02 private PCSRouter; // INMUTABLE\\n\\n    // devWallet -\\u003e feeWallet\\n    address public feeWallet; // INMUTABLE\\n\\n    // UFX nftWallet\\n    address public nftWallet; // INMUTABLE\\n\\n    // Trading bool\\n    bool private tradingOpen; // ONLY ONCE!\\n\\n    // Cooldown enabled?\\n    // bool private _cooldownEnabled = true; // INMUTABLE\\n\\n    // Enable MaxHolding mechanism\\n    bool private _maxHoldingEnable = true; // INMUTABLE\\n\\n    // Cooldown user mapping\\n    // mapping (address =\\u003e User) private cooldown;\\n\\n    // Burn address\\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD; // INMUTABLE\\n\\n    // User Struct, data of cooldown mapping\\n    struct User {\\n        uint256 lastTx;\\n        bool exists;\\n    }\\n\\n    // Events before Governance\\n    event MaxHoldingRateUpdated(address indexed operator, uint256 previousRate, uint256 newRate);\\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\\n    event LPTokenTransferred(address indexed previousLpToken, address indexed newLpToken);\\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\\n    event SwapAndLiquifyEnabledUpdated(address indexed operator, bool enabled);\\n    event MaxHoldingEnableUpdated(address indexed operator, bool enabled);\\n    event PCSRouterTransferred(address indexed oldPCSRouter, address indexed newPCSRouter);\\n\\n\\n\\n    // Operator CAN do modifier\\n    modifier onlyOperator() {\\n        require(_operator == msg.sender, \\\"operator: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    // Lock the swap on SwapAndLiquify\\n    modifier lockTheSwap {\\n        _inSwapAndLiquify = true;\\n        _;\\n        _inSwapAndLiquify = false;\\n    }\\n\\n    // Nulled Transfer Fee while SwapAndLiquify\\n    modifier transferTaxFree {\\n        uint16 _transferTaxRate = transferTaxRate;\\n        transferTaxRate = 0;\\n        _;\\n        transferTaxRate = _transferTaxRate;\\n    }\\n\\n    /// @dev Apply antiwhale only if the owner (masterchef) isn\\u0027t interacting.\\n    /// If the receiver isn\\u0027t excluded from antiwhale,\\n    /// check if it\\u0027s balance is over the max Holding otherwise the second condition would end up with an underflow\\n    /// and that it\\u0027s balance + the amount to receive doesn\\u0027t exceed the maxholding. This doesn\\u0027t account for transfer tax.\\n    /// if any of those two condition apply, the transfer will be rejected with the correct error message\\n    modifier antiWhale(address sender, address recipient, uint256 amount) {\\n        // Is maxHolding enabled?\\n        if(_maxHoldingEnable) {\\n            if (maxHolding() \\u003e 0 \\u0026\\u0026 sender != owner() \\u0026\\u0026 recipient != owner()) {\\n                if ( _excludedFromAntiWhale[recipient] == false ) {\\n                    require(amount \\u003c= maxHolding() - balanceOf(recipient) \\u0026\\u0026 balanceOf(recipient) \\u003c= maxHolding(), \\\"UFX::antiWhale: Transfer amount would result in a balance bigger than the maxHoldingRate\\\");\\n                }\\n            }\\n        }\\n        \\n        _;\\n    }\\n\\n    /**z\\n     * @notice Constructs the UFX token contract.\\n     */\\n    constructor(address _feeWallet,address _nftWallet ,address _PCSRouter) public BEP20(\\\"United Farmers X\\\", \\\"UFX\\\") {\\n        _operator = _msgSender();\\n        emit OperatorTransferred(address(0), _operator);\\n\\n        _excludedFromAntiWhale[msg.sender] = true;\\n        _excludedFromAntiWhale[address(0)] = true;\\n        _excludedFromAntiWhale[address(this)] = true;\\n\\n        feeWallet = address(_feeWallet);\\n        nftWallet = address(_nftWallet);\\n        \\n        PCSRouter = IUniswapV2Router02(_PCSRouter);\\n    }\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        require(ufxSupply().add(_amount) \\u003c= cap, \\\"UFX: cap exceeded\\\");\\n        _mint(_to, _amount);\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\n    }\\n\\n    /// @dev overrides transfer function to meet tokenomics of UFX\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override antiWhale(sender, recipient, amount) {\\n        // Pre-flight checks\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        // swap and liquify\\n        if (\\n            swapAndLiquifyEnabled == true\\n            \\u0026\\u0026 _inSwapAndLiquify == false\\n            \\u0026\\u0026 address(PCSRouter) != address(0)\\n            \\u0026\\u0026 lpToken != address(0)\\n            \\u0026\\u0026 sender != lpToken\\n            \\u0026\\u0026 sender != owner()\\n        ) {\\n            swapAndLiquify();\\n        }\\n\\n        if (sender == owner() || recipient == owner() || transferTaxRate == 0 || _isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\\n            super._transfer(sender, recipient, amount);\\n        } else {\\n\\n            require(tradingOpen == true, \\\"Presale not yet open.\\\");\\n\\n            // default tax is 5% of every transfer\\n            //ex 100ufx\\n            //transferTaxRate == 4%\\n            //taxAmount == 4ufx\\n            uint256 taxAmount = amount.mul(transferTaxRate).div(10000);\\n\\n            //nftAmount == 1ufx\\n            // 100ufx 1% -\\u003e 1ufx\\n            uint256 nftAmount = amount.mul(nftTaxRate).div(10000);\\n\\n            //liquifyRate == 93% // 4ufx -\\u003e 3.72(93%) \\u0026 0.28ufx(7%) -\\u003e fee wallet\\n            uint256 liquidityAmount = taxAmount.mul(liquifyRate).div(100); // 3.72UFX -\\u003e swap and liquifiy\\n            uint256 feeWalletAmount = taxAmount.sub(liquidityAmount); // 0.28ufx -\\u003e feeWallet\\n            require(taxAmount == feeWalletAmount.add(liquidityAmount), \\\"UFX::transfer: feeWalletAmount or LiquidityAmount value invalid\\\");\\n\\n            // 100 ufx - 4ufx =\\u003e 96ufx\\n            uint256 sendAmountBeforeNftAmount = amount.sub(taxAmount); // 96ufx\\n            uint256 sendAmount = sendAmountBeforeNftAmount.sub(nftAmount); // 96ufx - 1ufx\\n            require(amount == sendAmountBeforeNftAmount.add(taxAmount), \\\"UFX::transfer: Tax value invalid\\\");\\n            // default 96+4 = 100\\n          \\n\\n\\n            // Distributing UFXs (feeWallet, Liquify, Recipient)\\n            super._transfer(sender, feeWallet, feeWalletAmount); // 0.28ufx\\n            super._transfer(sender, address(this), liquidityAmount); // 3.72ufx = ufx contract\\n            super._transfer(sender, nftWallet, nftAmount); // 1ufx\\n            super._transfer(sender, recipient, sendAmount); // 96ufx -\\u003e user\\n            amount = sendAmount;           \\n        }\\n    }\\n\\n    /// @dev Swap and liquify\\n    function swapAndLiquify() private lockTheSwap transferTaxFree {\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        \\n        if (contractTokenBalance \\u003e= minAmountToLiquify) {\\n            // only min amount to liquify\\n            uint256 liquifyAmount = minAmountToLiquify;\\n\\n            // split the liquify amount into halves\\n            uint256 half = liquifyAmount.div(2);\\n            uint256 otherHalf = liquifyAmount.sub(half);\\n\\n            // capture the contract\\u0027s current ETH balance.\\n            // this is so that we can capture exactly the amount of ETH that the\\n            // swap creates, and not make the liquidity event include any ETH that\\n            // has been manually sent to the contract\\n            uint256 initialBalance = address(this).balance;\\n\\n            // swap tokens for ETH\\n            swapTokensForEth(half);\\n\\n            // how much ETH did we just swap into?\\n            uint256 newBalance = address(this).balance.sub(initialBalance);\\n\\n            // add liquidity\\n            addLiquidity(otherHalf, newBalance);\\n\\n            emit SwapAndLiquify(half, newBalance, otherHalf);\\n        }\\n    }\\n\\n    /// @dev Swap tokens for eth\\n    function swapTokensForEth(uint256 tokenAmount) private {\\n        // generate the UFX pair path of token -\\u003e weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = PCSRouter.WETH();\\n\\n        _approve(address(this), address(PCSRouter), tokenAmount);\\n\\n        // make the swap\\n        PCSRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    /// @dev Add liquidity\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        _approve(address(this), address(PCSRouter), tokenAmount);\\n\\n        // add the liquidity\\n        PCSRouter.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            operator(),\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the max holding amount.\\n     */\\n    function maxHolding() public view returns (uint256) {\\n        return cap.mul(maxHoldingRate).div(10000);\\n    }\\n\\n    /**\\n     * @dev Returns the address is excluded from antiWhale or not.\\n     */\\n    function isExcludedFromAntiWhale(address _account) public view returns (bool) {\\n        return _excludedFromAntiWhale[_account];\\n    }\\n\\n    /** NO NEED TO CHANGE MAX HOLDING ENABLED\\n     * @dev Enable / Disable Max Holding Mechanism.\\n     * Can only be called by the current operator.\\n     */\\n    // function updateMaxHoldingEnable(bool _enabled) public onlyOperator {\\n    //     emit MaxHoldingEnableUpdated(msg.sender, _enabled);\\n    //     _maxHoldingEnable = _enabled;\\n    // }\\n\\n    /** NO NEED TO CHANGE PCS ROUTER\\n     * @dev Transfers PCSRouter of the contract to a new address (`newPCSRouter`).\\n     * Can only be called by the current operator.\\n     */\\n    // function transferPCSRouter(address newPCSRouter) public onlyOperator {\\n    //     require(newPCSRouter != address(0), \\\"UFX::transferPCSRouter: new PCSRouter is the zero address\\\");\\n    //     emit PCSRouterTransferred(address(PCSRouter), newPCSRouter);\\n    //     PCSRouter = IUniswapV2Router02(newPCSRouter);\\n    // }\\n\\n    /** NO NEED TO CHANGE SWAP AND LIQUIFY\\n     * @dev Update the swapAndLiquifyEnabled.\\n     * Can only be called by the current operator.\\n     */\\n    // function updateSwapAndLiquifyEnabled(bool _enabled) public onlyOperator {\\n    //     emit SwapAndLiquifyEnabledUpdated(msg.sender, _enabled);\\n    //     swapAndLiquifyEnabled = _enabled;\\n    // }\\n\\n    /** NO NEED TO CHANGE MAX_HOLDING_RATE\\n     * @dev Update the max holding rate.\\n     * Can only be called by the current operator.\\n     */\\n    // function updateMaxHoldingRate(uint16 _maxHoldingRate) public onlyOperator {\\n    //     require(_maxHoldingRate \\u003e= 100, \\\"UFX::updateMaxHoldingRate: Max holding rate must not be below the minimum rate.\\\");\\n    //     emit MaxHoldingRateUpdated(msg.sender, _maxHoldingRate, _maxHoldingRate);\\n    //     maxHoldingRate = _maxHoldingRate;\\n    // }\\n\\n    /** \\n     * @dev Exclude or include an address from antiWhale.\\n     * Can only be called by the current operator.\\n     */\\n    function setExcludedFromAntiWhale(address _account) public onlyOperator {\\n        _excludedFromAntiWhale[_account] = true;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current operator.\\n     */\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n\\n    // /**\\n    //  * @dev Returns the bep token owner.\\n    //  */\\n    // function getOwner() external override view returns (address) {\\n    //     return owner();\\n    // }\\n\\n    // Return actual supply of rice\\n    function ufxSupply() public view returns (uint256) {\\n        return totalSupply().sub(balanceOf(BURN_ADDRESS));\\n    }\\n\\n    /**\\n     * @dev Transfers/Sets lpToken address to a new address (`newLpToken`).\\n     * Can only be called by the current operator.\\n     */\\n    function transferLpToken(address newLpToken) public onlyOperator {\\n        // Can transfer LP only once!\\n        require(lpToken == address(0), \\\"UFX: LP Token Transfer can be only be set once\\\");\\n        emit LPTokenTransferred(lpToken, newLpToken);\\n        lpToken = newLpToken;\\n    }\\n\\n    /**\\n     * @dev Transfers operator of the contract to a new account (`newOperator`).\\n     * Can only be called by the current operator.\\n     */\\n    function transferOperator(address newOperator) public onlyOperator {\\n        require(lockerState() == false, \\\"Locker must be unlocked\\\");\\n        require(newOperator != address(0), \\\"UFX::transferOperator: new operator is the zero address\\\");\\n        emit OperatorTransferred(_operator, newOperator);\\n        _operator = newOperator;\\n    }\\n\\n\\n\\n\\n\\n    \\n    /**\\n     * @dev Open trading (PCS) onlyOperator\\n     */\\n    function openTrading() public onlyOperator {\\n        // Can open trading only once!\\n        require(tradingOpen != true, \\\"UFX: Presale is already opened.\\\");\\n        tradingOpen = true;\\n    }\\n\\n    /**\\n     * @dev Add to exclude from fee.\\n     * Can only be called by the current operator.\\n     */\\n    function setExcludeFromFee(address _account) public onlyOperator {\\n        _isExcludedFromFee[_account] = true;\\n    }\\n\\n    // To receive BNB from SwapRouter when swapping\\n    receive() external payable {}\\n\\n    // Copied and modified from YAM code:\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\n    // Which is copied and modified from COMPOUND:\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\n\\n    /// @dev A record of each accounts delegate\\n    mapping (address =\\u003e address) internal _delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping (address =\\u003e mapping (uint32 =\\u003e Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address =\\u003e uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract\\u0027s domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address =\\u003e uint) public nonces;\\n\\n      /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account\\u0027s vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegator The address to get delegatee for\\n     */\\n    function delegates(address delegator)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _delegates[delegator];\\n    }\\n\\n    /**\\n    * @notice Delegate votes from `msg.sender` to `delegatee`\\n    * @param delegatee The address to delegate votes to\\n    */\\n    function delegate(address delegatee) external {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint nonce,\\n        uint expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n    {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name())),\\n                getChainId(),\\n                address(this)\\n            )\\n        );\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                DELEGATION_TYPEHASH,\\n                delegatee,\\n                nonce,\\n                expiry\\n            )\\n        );\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                structHash\\n            )\\n        );\\n\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"UFX::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"UFX::delegateBySig: invalid nonce\\\");\\n        require(now \\u003c= expiry, \\\"UFX::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints \\u003e 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(blockNumber \\u003c block.number, \\\"UFX::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock \\u003c= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock \\u003e blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper \\u003e lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock \\u003c blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee)\\n        internal\\n    {\\n        address currentDelegate = _delegates[delegator];\\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying UFXs (not scaled);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\\n        if (srcRep != dstRep \\u0026\\u0026 amount \\u003e 0) {\\n            if (srcRep != address(0)) {\\n                // decrease old representative\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint256 srcRepOld = srcRepNum \\u003e 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                // increase new representative\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint256 dstRepOld = dstRepNum \\u003e 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint256 oldVotes,\\n        uint256 newVotes\\n    )\\n        internal\\n    {\\n        uint32 blockNumber = safe32(block.number, \\\"UFX::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints \\u003e 0 \\u0026\\u0026 checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n \\u003c 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract UFXToken\",\"name\":\"_ufx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddDev\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ufxPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ChangeLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ufxPerBlock\",\"type\":\"uint256\"}],\"name\":\"EmissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_locker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_withdrawFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeLockerState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddDev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDevRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingUfx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accUfxPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"withdrawFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_withdrawFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ufx\",\"outputs\":[{\"internalType\":\"contract UFXToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ufxPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ufxPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeAddDev\",\"type\":\"address\"}],\"name\":\"updateFeeAddDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newFeeDevRate\",\"type\":\"uint16\"}],\"name\":\"updateFeeDevRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStartBlock\",\"type\":\"uint256\"}],\"name\":\"updateStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"updateUFXOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterChef", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ce2392bd358233796e60719a31b87e113ce76f8d000000000000000000000000c549d41af7bc6e632e92adb944d16b32bab4b0e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f5111c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0d6570b310e21531503d82a6cba2864eed371d71646ce7b5f2bdceb617c1640b"}