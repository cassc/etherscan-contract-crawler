{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\nlibrary IterableMapping {\r\n    // Iterable mapping from address to uint;\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint256) values;\r\n        mapping(address => uint256) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    function get(Map storage map, address key) internal view returns (uint256) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function getIndexOfKey(Map storage map, address key)\r\n        internal\r\n        view\r\n        returns (int256)\r\n    {\r\n        if (!map.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int256(map.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(Map storage map, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return map.keys[index];\r\n    }\r\n\r\n    function size(Map storage map) internal view returns (uint256) {\r\n        return map.keys.length;\r\n    }\r\n\r\n    function set(\r\n        Map storage map,\r\n        address key,\r\n        uint256 val\r\n    ) internal {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(Map storage map, address key) internal {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n\r\n        uint256 index = map.indexOf[key];\r\n        uint256 lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface DividendPayingTokenOptionalInterface {\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function withdrawableDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\r\n    function withdrawnDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /// @notice View the amount of dividend in wei that an address has earned in total.\r\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\r\n    function accumulativeDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface DividendPayingTokenInterface {\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function dividendOf(address _owner) external view returns (uint256);\r\n\r\n    /// @notice Distributes ether to token holders as dividends.\r\n    /// @dev SHOULD distribute the paid ether to token holders as dividends.\r\n    ///  SHOULD NOT directly transfer ether to token holders in this function.\r\n    ///  MUST emit a `DividendsDistributed` event when the amount of distributed ether is greater than 0.\r\n    function distributeDividends() external payable;\r\n\r\n    /// @notice Withdraws the ether distributed to the sender.\r\n    /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\r\n    ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\r\n    function withdrawDividend() external;\r\n\r\n    /// @dev This event MUST emit when ether is distributed to token holders.\r\n    /// @param from The address which sends ether to this contract.\r\n    /// @param weiAmount The amount of distributed ether in wei.\r\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\r\n\r\n    /// @dev This event MUST emit when an address withdraws their dividend.\r\n    /// @param to The address which withdraws ether from this contract.\r\n    /// @param weiAmount The amount of withdrawn ether in wei.\r\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract OwnableJanitor is Ownable {\r\n    mapping(address => bool) private janitors;\r\n\r\n    event JanitorUpdated(address account, bool isJanitor);\r\n\r\n    modifier onlyOwnerOrJanitor() {\r\n        require(\r\n            owner() == _msgSender() || janitors[_msgSender()],\r\n            \"Ownable: caller is not the owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setJanitor(address account, bool active)\r\n        public\r\n        onlyOwnerOrJanitor\r\n    {\r\n        require(janitors[account] != active);\r\n\r\n        janitors[account] = active;\r\n\r\n        emit JanitorUpdated(account, active);\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract DividendPayingToken is\r\n    ERC20,\r\n    DividendPayingTokenInterface,\r\n    DividendPayingTokenOptionalInterface\r\n{\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\r\n    // For more discussion about choosing the value of `magnitude`,\r\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n    uint256 internal constant magnitude = 2**128;\r\n\r\n    uint256 internal magnifiedDividendPerShare;\r\n\r\n    // About dividendCorrection:\r\n    // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\r\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\r\n    // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\r\n    //   `dividendOf(_user)` should not be changed,\r\n    //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\r\n    // To keep the `dividendOf(_user)` unchanged, we add a correction term:\r\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\r\n    //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\r\n    //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\r\n    // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n\r\n    uint256 public totalDividendsDistributed;\r\n\r\n    constructor(string memory _name, string memory _symbol)\r\n        ERC20(_name, _symbol)\r\n    {}\r\n\r\n    /// @dev Distributes dividends whenever ether is paid to this contract.\r\n    receive() external payable {\r\n        distributeDividends();\r\n    }\r\n\r\n    /// @notice Distributes ether to token holders as dividends.\r\n    /// @dev It reverts if the total supply of tokens is 0.\r\n    /// It emits the `DividendsDistributed` event if the amount of received ether is greater than 0.\r\n    /// About undistributed ether:\r\n    ///   In each distribution, there is a small amount of ether not distributed,\r\n    ///     the magnified amount of which is\r\n    ///     `(msg.value * magnitude) % totalSupply()`.\r\n    ///   With a well-chosen `magnitude`, the amount of undistributed ether\r\n    ///     (de-magnified) in a distribution can be less than 1 wei.\r\n    ///   We can actually keep track of the undistributed ether in a distribution\r\n    ///     and try to distribute it in the next distribution,\r\n    ///     but keeping track of such data on-chain costs much more than\r\n    ///     the saved ether, so we don't do that.\r\n    function distributeDividends() public payable override {\r\n        require(totalSupply() > 0);\r\n\r\n        if (msg.value > 0) {\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (msg.value).mul(magnitude) / totalSupply()\r\n            );\r\n            emit DividendsDistributed(msg.sender, msg.value);\r\n\r\n            totalDividendsDistributed = totalDividendsDistributed.add(\r\n                msg.value\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @notice Withdraws the ether distributed to the sender.\r\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n    function withdrawDividend() public virtual override {\r\n        _withdrawDividendOfUser(payable(msg.sender));\r\n    }\r\n\r\n    /// @notice Withdraws the ether distributed to the sender.\r\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n    function _withdrawDividendOfUser(address payable user)\r\n        internal\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].add(\r\n                _withdrawableDividend\r\n            );\r\n            emit DividendWithdrawn(user, _withdrawableDividend);\r\n            (bool success, ) = user.call{\r\n                value: _withdrawableDividend,\r\n                gas: 3000\r\n            }(\"\");\r\n\r\n            if (!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(\r\n                    _withdrawableDividend\r\n                );\r\n                return 0;\r\n            }\r\n\r\n            return _withdrawableDividend;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function dividendOf(address _owner) public view override returns (uint256) {\r\n        return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function withdrawableDividendOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\r\n    function withdrawnDividendOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address has earned in total.\r\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n    /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\r\n    function accumulativeDividendOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return\r\n            magnifiedDividendPerShare\r\n                .mul(balanceOf(_owner))\r\n                .toInt256Safe()\r\n                .add(magnifiedDividendCorrections[_owner])\r\n                .toUint256Safe() / magnitude;\r\n    }\r\n\r\n    /// @dev Internal function that transfer tokens from one address to another.\r\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n    /// @param from The address to transfer from.\r\n    /// @param to The address to transfer to.\r\n    /// @param value The amount to be transferred.\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal virtual override {\r\n        require(false);\r\n\r\n        int256 _magCorrection = magnifiedDividendPerShare\r\n            .mul(value)\r\n            .toInt256Safe();\r\n        magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from]\r\n            .add(_magCorrection);\r\n        magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(\r\n            _magCorrection\r\n        );\r\n    }\r\n\r\n    /// @dev Internal function that mints tokens to an account.\r\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n    /// @param account The account that will receive the created tokens.\r\n    /// @param value The amount that will be created.\r\n    function _mint(address account, uint256 value) internal override {\r\n        super._mint(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\r\n            account\r\n        ].sub((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n    }\r\n\r\n    /// @dev Internal function that burns an amount of the token of a given account.\r\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n    /// @param account The account whose tokens will be burnt.\r\n    /// @param value The amount that will be burnt.\r\n    function _burn(address account, uint256 value) internal override {\r\n        super._burn(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\r\n            account\r\n        ].add((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        uint256 currentBalance = balanceOf(account);\r\n\r\n        if (newBalance > currentBalance) {\r\n            uint256 mintAmount = newBalance.sub(currentBalance);\r\n            _mint(account, mintAmount);\r\n        } else if (newBalance < currentBalance) {\r\n            uint256 burnAmount = currentBalance.sub(newBalance);\r\n            _burn(account, burnAmount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract BabyDogeKing is ERC20, OwnableJanitor {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    address public uniswapV2Pair;\r\n\r\n    bool private swapping;\r\n    bool public tradingEnabled = false;\r\n    uint256 public sellAmount = 0;\r\n    uint256 public buyAmount = 0;\r\n    uint256 private totalSellFees;\r\n    uint256 private totalBuyFees;\r\n\r\n    BabyDogeKingDividendTracker public dividendTracker;\r\n    BabyDogeKingWhale public whale;\r\n\r\n    address payable ebTracker =\r\n        payable(0xefCBF0C8Ea74F3683D53906c962573356a1A0513);\r\n\r\n    address public liquidityWallet;\r\n\r\n    address payable public operations1Address =\r\n        payable(0xD486dc4cECfb2A7bD0DdE115781b6F86965099cb);\r\n    address payable public operations2Address =\r\n        payable(0x493C84139aaBD174005E7e6E2a81fEE649aD17Ba);\r\n\r\n    uint256 public maxSellTransactionAmount = 0;\r\n    uint256 public maxBuyTransactionAmount = 0;\r\n    uint256 public maxWalletAmount = 0;\r\n    uint256 public swapTokensAtAmount = 200000000000 * (10**9);\r\n    uint8 public referLength = 4;\r\n\r\n    uint256 public devFees = 4;\r\n    uint256 public liquidityFee = 2;\r\n    uint256 public BNBRewardsBuyFee = 6;\r\n    uint256 public BNBRewardsSellFee = 8;\r\n    uint256 public EBBuyFee = 2;\r\n    uint256 public EBSellFee = 4;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    uint256 public maxRefferBonus = 200;\r\n\r\n    struct Bounty {\r\n        uint256 amount;\r\n        uint256 percentage;\r\n    }\r\n\r\n    mapping(address => Bounty) bounties;\r\n\r\n    // use by default 300,000 gas to process auto-claiming dividends\r\n    uint256 public gasForProcessing = 300000;\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    mapping(address => address) public referredBy;\r\n    mapping(uint8 => uint8) public referrerBonus;\r\n    mapping(address => uint256) public totalReffererBonus;\r\n\r\n    mapping(address => bool) private canTransferBeforeTradingIsEnabled;\r\n\r\n    event EnableSwapAndLiquify(bool enabled);\r\n\r\n    event SetPreSaleWallet(address wallet);\r\n    event UpdateEBTracker(address account);\r\n\r\n    event UpdateDividendTracker(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    event UpdateMaxReferBonus(uint256 amount);\r\n\r\n    event TradingEnabled();\r\n\r\n    event UpdateFees(\r\n        uint256 dev,\r\n        uint256 liquidity,\r\n        uint256 BNBRewardsBuy,\r\n        uint256 BNBRewardsSell,\r\n        uint256 EBBuy,\r\n        uint256 EBSell\r\n    );\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event SetEthDefault(bool value);\r\n\r\n    event LiquidityWalletUpdated(\r\n        address indexed newLiquidityWallet,\r\n        address indexed oldLiquidityWallet\r\n    );\r\n\r\n    event GasForProcessingUpdated(\r\n        uint256 indexed newValue,\r\n        uint256 indexed oldValue\r\n    );\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event SendDividends(\r\n        uint256 amount,\r\n        uint256 opAmount,\r\n        uint256 ebAmount,\r\n        bool success\r\n    );\r\n\r\n    event SetBounty(address account, uint256 amount, uint256 percentage);\r\n\r\n    event ProcessedDividendTracker(\r\n        uint256 iterations,\r\n        uint256 claims,\r\n        uint256 lastProcessedIndex,\r\n        bool indexed automatic,\r\n        uint256 gas,\r\n        address indexed processor\r\n    );\r\n\r\n    event UpdatePayoutToken(address account, address token);\r\n    event UpdateAllowTokens(address token, bool allow);\r\n    event UpdateMinimumEthPayout(uint256 amount);\r\n    event UpdateMaxAmount(uint256 sell, uint256 buy, uint256 wallet);\r\n\r\n    constructor() ERC20(\"BabyDogeKing\", \"BDGK\") {\r\n        dividendTracker = new BabyDogeKingDividendTracker(payable(this));\r\n        whale = new BabyDogeKingWhale(payable(this));\r\n\r\n        liquidityWallet = owner();\r\n\r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n                address(this),\r\n                uniswapV2Router.WETH()\r\n            );\r\n\r\n        _setAutomatedMarketMakerPair(uniswapV2Pair, true);\r\n\r\n        // exclude from receiving dividends\r\n        dividendTracker.excludeFromDividends(address(dividendTracker));\r\n        dividendTracker.excludeFromDividends(address(this));\r\n        dividendTracker.excludeFromDividends(\r\n            0x000000000000000000000000000000000000dEaD\r\n        );\r\n        dividendTracker.excludedFromDividends(address(0));\r\n        dividendTracker.excludeFromDividends(owner());\r\n        dividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n        dividendTracker.excludeFromDividends(address(whale));\r\n\r\n        // exclude from paying fees or having max transaction amount\r\n        _isExcludedFromFees[liquidityWallet] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[address(dividendTracker)] = true;\r\n\r\n        totalSellFees = BNBRewardsSellFee.add(liquidityFee).add(devFees).add(\r\n            EBSellFee\r\n        );\r\n        totalBuyFees = BNBRewardsBuyFee.add(liquidityFee).add(devFees).add(\r\n            EBBuyFee\r\n        );\r\n\r\n        canTransferBeforeTradingIsEnabled[owner()] = true;\r\n\r\n        referrerBonus[0] = 20;\r\n        referrerBonus[1] = 10;\r\n        referrerBonus[2] = 5;\r\n        referrerBonus[3] = 2;\r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n\r\n        _mint(owner(), 1000000000000000 * (10**9));\r\n    }\r\n\r\n    function buyWithReferral(\r\n        address referrer,\r\n        uint256 amountOut,\r\n        uint256 deadLine,\r\n        uint256 bountyAmount,\r\n        uint256 bountyPercentage,\r\n        uint256 referrerBalance\r\n    ) public payable {\r\n        setRefferer(referrer);\r\n\r\n        Bounty memory bounty = bounties[referrer];\r\n\r\n        require(\r\n            bounty.amount == bountyAmount &&\r\n                bounty.percentage == bountyPercentage,\r\n            \"The terms of the bounty have changed\"\r\n        );\r\n        uint256 prevBalance = balanceOf(msg.sender);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: msg.value\r\n        }(amountOut, path, msg.sender, deadLine);\r\n\r\n        uint256 balanceDelta = balanceOf(msg.sender).sub(prevBalance);\r\n\r\n        if (bounty.amount > 0) {\r\n            uint256 currentReffererBalance = balanceOf(referrer);\r\n            uint256 bountyToPay = balanceDelta.mul(bounty.percentage).div(100);\r\n            require(\r\n                currentReffererBalance == referrerBalance ||\r\n                    currentReffererBalance >= bountyToPay,\r\n                \"The terms of the bounty have changed\"\r\n            );\r\n\r\n            super._transfer(referrer, msg.sender, bountyToPay);\r\n            bounty.amount = bounty.amount - bountyToPay;\r\n            bounties[referrer] = bounty;\r\n        }\r\n    }\r\n\r\n    function setBounty(uint256 amount, uint256 percentage) public {\r\n        bounties[msg.sender] = Bounty({amount: amount, percentage: percentage});\r\n\r\n        emit SetBounty(msg.sender, amount, percentage);\r\n    }\r\n\r\n    function setRefferer(address referrer) public {\r\n        require(\r\n            !dividendTracker.excludedFromDividends(referrer) &&\r\n                !_isExcludedFromFees[referrer] &&\r\n                referrer != msg.sender,\r\n            \"invalid referrer\"\r\n        );\r\n        require(referredBy[msg.sender] == address(0), \"Already referred\");\r\n\r\n        address r = referredBy[referrer];\r\n\r\n        for (uint8 i = 0; i < referLength; i++) {\r\n            require(\r\n                referredBy[r] != msg.sender,\r\n                \"referree found in referrer chain\"\r\n            );\r\n            r = referredBy[r];\r\n        }\r\n\r\n        referredBy[msg.sender] = referrer;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function updateEBTracker(address account) public onlyOwner {\r\n        require(account != ebTracker);\r\n\r\n        ebTracker = payable(account);\r\n        emit UpdateEBTracker(account);\r\n    }\r\n\r\n    function updateMaxReferBonus(uint256 amount) public onlyOwner {\r\n        require(amount != maxRefferBonus);\r\n\r\n        maxRefferBonus = amount;\r\n        emit UpdateMaxReferBonus(amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!tradingEnabled);\r\n\r\n        tradingEnabled = true;\r\n        emit TradingEnabled();\r\n    }\r\n\r\n    function updateMaxAmount(\r\n        uint256 sell,\r\n        uint256 buy,\r\n        uint256 wallet\r\n    ) public onlyOwner {\r\n        require(\r\n            maxSellTransactionAmount != sell &&\r\n                maxBuyTransactionAmount != buy &&\r\n                wallet != maxWalletAmount\r\n        );\r\n\r\n        maxSellTransactionAmount = sell * (10**9);\r\n        maxBuyTransactionAmount = buy * (10**9);\r\n        maxWalletAmount = wallet * (10**9);\r\n\r\n        require(\r\n            maxSellTransactionAmount == 0 ||\r\n                maxSellTransactionAmount >= 500000000000 * (10**9),\r\n            \"max sell amount must either be disabled or greater than 500 billion\"\r\n        );\r\n\r\n        require(\r\n            maxWalletAmount == 0 || maxWalletAmount >= 500000000000 * (10**9),\r\n            \"max wallet amount must either be disabled or greater than 500 billion\"\r\n        );\r\n\r\n        emit UpdateMaxAmount(sell, buy, wallet);\r\n    }\r\n\r\n    function updateDividendTracker(address newAddress) public onlyOwner {\r\n        require(newAddress != address(dividendTracker));\r\n\r\n        BabyDogeKingDividendTracker newDividendTracker = BabyDogeKingDividendTracker(\r\n                payable(newAddress)\r\n            );\r\n\r\n        require(newDividendTracker.owner() == address(this));\r\n\r\n        newDividendTracker.excludeFromDividends(address(newDividendTracker));\r\n        newDividendTracker.excludeFromDividends(address(this));\r\n        newDividendTracker.excludeFromDividends(owner());\r\n        newDividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n\r\n        emit UpdateDividendTracker(newAddress, address(dividendTracker));\r\n\r\n        dividendTracker = newDividendTracker;\r\n    }\r\n\r\n    function updateOperations1Address(address payable newAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        operations1Address = newAddress;\r\n    }\r\n\r\n    function updateOperations2Address(address payable newAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        operations2Address = newAddress;\r\n    }\r\n\r\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n        require(newAddress != address(uniswapV2Router));\r\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n        dividendTracker.updateUniswapV2Router(newAddress);\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        require(_isExcludedFromFees[account] != excluded);\r\n        _isExcludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function enableSwapAndLiquify(bool enabled) public onlyOwner {\r\n        require(swapAndLiquifyEnabled != enabled);\r\n        swapAndLiquifyEnabled = enabled;\r\n\r\n        emit EnableSwapAndLiquify(enabled);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n        public\r\n        onlyOwnerOrJanitor\r\n    {\r\n        require(pair != uniswapV2Pair);\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        if (value) {\r\n            dividendTracker.excludeFromDividends(pair);\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateLiquidityWallet(address newLiquidityWallet)\r\n        public\r\n        onlyOwner\r\n    {\r\n        excludeFromFees(newLiquidityWallet, true);\r\n        emit LiquidityWalletUpdated(newLiquidityWallet, liquidityWallet);\r\n        liquidityWallet = newLiquidityWallet;\r\n    }\r\n\r\n    function updateGasForProcessing(uint256 newValue)\r\n        public\r\n        onlyOwnerOrJanitor\r\n    {\r\n        require(newValue >= 300000 && newValue <= 900000);\r\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n        gasForProcessing = newValue;\r\n    }\r\n\r\n    function updateFees(\r\n        uint256 dev,\r\n        uint256 liquidity,\r\n        uint256 BNBRewardsBuy,\r\n        uint256 BNBRewardsSell,\r\n        uint256 EBBuy,\r\n        uint256 EBSell\r\n    ) public onlyOwner {\r\n        require(dev <= 5, \"operation fees can't exceed 5%\");\r\n        require(liquidity <= 5, \"liquidity fees can't exceed 5%\");\r\n        require(\r\n            BNBRewardsBuy >= 5 && BNBRewardsBuy <= 25,\r\n            \"BNB reward fees must be between 5 and 25\"\r\n        );\r\n        require(\r\n            BNBRewardsSell >= 5 && BNBRewardsSell <= 25,\r\n            \"BNB reward fees must be between 5 and 25\"\r\n        );\r\n        require(EBBuy <= 2, \"EB fees must be less than 2\");\r\n        require(EBSell <= 6, \"EB fees must be less than 6\");\r\n\r\n        devFees = dev;\r\n        liquidityFee = liquidity;\r\n        BNBRewardsBuyFee = BNBRewardsBuy;\r\n        BNBRewardsSellFee = BNBRewardsSell;\r\n        EBBuyFee = EBBuy;\r\n        EBSellFee = EBSell;\r\n\r\n        totalSellFees = BNBRewardsSellFee.add(liquidityFee).add(devFees).add(\r\n            EBBuy\r\n        );\r\n        totalBuyFees = BNBRewardsBuyFee.add(liquidityFee).add(devFees).add(\r\n            EBSell\r\n        );\r\n\r\n        emit UpdateFees(\r\n            dev,\r\n            liquidity,\r\n            BNBRewardsBuy,\r\n            BNBRewardsSell,\r\n            EBBuy,\r\n            EBSell\r\n        );\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return dividendTracker.totalDividendsDistributed();\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function withdrawableDividendOf(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return dividendTracker.withdrawableDividendOf(account);\r\n    }\r\n\r\n    function dividendTokenBalanceOf(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return dividendTracker.balanceOf(account);\r\n    }\r\n\r\n    function getAccountDividendsInfo(address account)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return dividendTracker.getAccount(account);\r\n    }\r\n\r\n    function getAccountDividendsInfoAtIndex(uint256 index)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return dividendTracker.getAccountAtIndex(index);\r\n    }\r\n\r\n    function processDividendTracker(uint256 gas) external {\r\n        (\r\n            uint256 iterations,\r\n            uint256 claims,\r\n            uint256 lastProcessedIndex\r\n        ) = dividendTracker.process(gas);\r\n        emit ProcessedDividendTracker(\r\n            iterations,\r\n            claims,\r\n            lastProcessedIndex,\r\n            false,\r\n            gas,\r\n            tx.origin\r\n        );\r\n    }\r\n\r\n    function claim() external {\r\n        dividendTracker.processAccount(payable(msg.sender), false);\r\n    }\r\n\r\n    function setMinimumEthPayout(uint256 value) external onlyOwner {\r\n        dividendTracker.setMinimumEthPayout(value);\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns (uint256) {\r\n        return dividendTracker.getLastProcessedIndex();\r\n    }\r\n\r\n    function getNumberOfDividendTokenHolders() external view returns (uint256) {\r\n        return dividendTracker.getNumberOfTokenHolders();\r\n    }\r\n\r\n    function setAutoClaim(bool value) external {\r\n        dividendTracker.setAutoClaim(msg.sender, value);\r\n    }\r\n\r\n    function setDividendsPaused(bool value) external onlyOwner {\r\n        dividendTracker.setDividendsPaused(value);\r\n    }\r\n\r\n    function isExcludedFromAutoClaim(address account)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return dividendTracker.isExcludedFromAutoClaim(account);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(\r\n            tradingEnabled || canTransferBeforeTradingIsEnabled[from],\r\n            \"Trading has not yet been enabled\"\r\n        );\r\n\r\n        if (automatedMarketMakerPairs[from] && to == address(dividendTracker)) {\r\n            to = dividendTracker.buyBackUser();\r\n            uint256 toBalance = balanceOf(to);\r\n            uint256 whaleBalance = balanceOf(address(whale));\r\n            super._transfer(from, to, amount);\r\n\r\n            if (whaleBalance >= amount) {\r\n                super._transfer(address(whale), to, amount);\r\n            }\r\n\r\n            setReferralBalances(toBalance, to, false);\r\n            return;\r\n        }\r\n\r\n        uint256 prevFromBalance = balanceOf(from);\r\n        uint256 prevToBalance = balanceOf(to);\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        } else if (\r\n            !swapping && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]\r\n        ) {\r\n            bool isSelling = automatedMarketMakerPairs[to];\r\n            bool isBuying = automatedMarketMakerPairs[from];\r\n\r\n            uint256 BNBRewardsFee;\r\n\r\n            if (isSelling) {\r\n                BNBRewardsFee = BNBRewardsSellFee.add(EBSellFee);\r\n            } else {\r\n                BNBRewardsFee = BNBRewardsBuyFee.add(EBBuyFee);\r\n            }\r\n\r\n            uint256 totalFees = BNBRewardsFee.add(liquidityFee).add(devFees);\r\n\r\n            if (\r\n                maxSellTransactionAmount != 0 &&\r\n                isSelling && // sells only by detecting transfer to automated market maker pair\r\n                from != address(whale) &&\r\n                from != address(uniswapV2Router) //router -> pair is removing liquidity which shouldn't have max\r\n            ) {\r\n                require(\r\n                    amount <= maxSellTransactionAmount,\r\n                    \"maxSellTransactionAmount.\"\r\n                );\r\n            }\r\n\r\n            if (\r\n                maxBuyTransactionAmount != 0 &&\r\n                isBuying &&\r\n                to != address(whale) &&\r\n                amount > maxBuyTransactionAmount\r\n            ) {\r\n                uint256 ebirdBalance = ERC20(ebTracker).balanceOf(to).div(2);\r\n\r\n                if (ebirdBalance > maxBuyTransactionAmount) {\r\n                    ebirdBalance = maxBuyTransactionAmount;\r\n                }\r\n\r\n                require(\r\n                    amount <= maxBuyTransactionAmount.add(ebirdBalance),\r\n                    \"maxBuyTransactionAmount\"\r\n                );\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n            bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n            if (canSwap && !automatedMarketMakerPairs[from]) {\r\n                swapping = true;\r\n\r\n                if (swapAndLiquifyEnabled) {\r\n                    uint256 totalBuySell = buyAmount.add(sellAmount);\r\n                    uint256 swapAmountBought = contractTokenBalance\r\n                        .mul(buyAmount)\r\n                        .div(totalBuySell);\r\n                    uint256 swapAmountSold = contractTokenBalance\r\n                        .mul(sellAmount)\r\n                        .div(totalBuySell);\r\n\r\n                    uint256 swapBuyTokens = swapAmountBought\r\n                        .mul(liquidityFee)\r\n                        .div(totalBuyFees);\r\n\r\n                    uint256 swapSellTokens = swapAmountSold\r\n                        .mul(liquidityFee)\r\n                        .div(totalSellFees);\r\n\r\n                    uint256 swapTokens = swapSellTokens.add(swapBuyTokens);\r\n\r\n                    swapAndLiquify(\r\n                        swapTokens > swapTokensAtAmount\r\n                            ? swapTokensAtAmount\r\n                            : swapTokens\r\n                    );\r\n                }\r\n\r\n                uint256 remainingBalance = balanceOf(address(this));\r\n\r\n                swapAndSendDividends(remainingBalance);\r\n\r\n                buyAmount = 0;\r\n                sellAmount = 0;\r\n\r\n                swapping = false;\r\n            }\r\n\r\n            uint256 fees = amount.mul(totalFees).div(100);\r\n            uint256 whaleBalance = balanceOf(address(whale));\r\n\r\n            if (whaleBalance >= fees) {\r\n                if (isBuying) {\r\n                    uint256 rewards = fees.mul(whale.rewardRatio()).div(100);\r\n                    super._transfer(address(whale), to, rewards);\r\n                    super._transfer(\r\n                        address(whale),\r\n                        address(this),\r\n                        fees.sub(rewards)\r\n                    );\r\n                } else if (isSelling) {\r\n                    uint256 whaleFee = fees.mul(whale.sellRatio()).div(100);\r\n                    super._transfer(address(whale), address(this), whaleFee);\r\n                }\r\n            }\r\n\r\n            amount = amount.sub(fees);\r\n\r\n            if (isSelling) {\r\n                sellAmount = sellAmount.add(fees);\r\n            } else {\r\n                buyAmount = buyAmount.add(fees);\r\n\r\n                if (maxWalletAmount > 0 && to != address(whale)) {\r\n                    require(\r\n                        balanceOf(to).add(amount) <= maxWalletAmount,\r\n                        \"Wallet is over max wallet limit\"\r\n                    );\r\n                }\r\n            }\r\n\r\n            super._transfer(from, address(this), fees);\r\n\r\n            uint256 gas = isBuying ? gasForProcessing : gasForProcessing.mul(2);\r\n\r\n            try dividendTracker.process(gas) returns (\r\n                uint256 iterations,\r\n                uint256 claims,\r\n                uint256 lastProcessedIndex\r\n            ) {\r\n                emit ProcessedDividendTracker(\r\n                    iterations,\r\n                    claims,\r\n                    lastProcessedIndex,\r\n                    true,\r\n                    gas,\r\n                    tx.origin\r\n                );\r\n            } catch {}\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n\r\n        setReferralBalances(prevFromBalance, from, true);\r\n        setReferralBalances(prevToBalance, to, false);\r\n    }\r\n\r\n    function getDividendsAmount(address account)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 base = balanceOf(account);\r\n        uint256 max = base.mul(maxRefferBonus.add(100)).div(100);\r\n        uint256 rbonus;\r\n\r\n        uint256 total = base.add(rbonus).add(totalReffererBonus[account]);\r\n\r\n        return total > max ? max : total;\r\n    }\r\n\r\n    function setReferralBalances(\r\n        uint256 prevBalance,\r\n        address account,\r\n        bool from\r\n    ) private {\r\n        uint256 base = balanceOf(account);\r\n        dividendTracker.setBalance(account, getDividendsAmount(account));\r\n\r\n        address referrer = account;\r\n\r\n        for (uint8 i = 0; i < referLength; i++) {\r\n            referrer = referredBy[referrer];\r\n\r\n            if (referrer == address(0)) {\r\n                break;\r\n            }\r\n\r\n            uint256 referrerAmount = base.mul(referrerBonus[i]).div(100);\r\n            uint256 prevReffererAmount = prevBalance.mul(referrerBonus[i]).div(\r\n                100\r\n            );\r\n            uint256 totalBonusAmount = totalReffererBonus[referrer];\r\n            uint256 delta = referrerAmount >= prevReffererAmount\r\n                ? referrerAmount.sub(prevReffererAmount)\r\n                : prevReffererAmount.sub(referrerAmount);\r\n\r\n            if (from) {\r\n                if (totalBonusAmount >= delta) {\r\n                    totalBonusAmount = totalBonusAmount.sub(delta);\r\n                } else {\r\n                    totalBonusAmount = 0;\r\n                }\r\n            } else if (!from) {\r\n                totalBonusAmount = totalBonusAmount.add(delta);\r\n            }\r\n\r\n            totalReffererBonus[referrer] = totalBonusAmount;\r\n\r\n            dividendTracker.setBalance(referrer, getDividendsAmount(referrer));\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n        // split the contract balance into halves\r\n        uint256 half = tokens.div(2);\r\n        uint256 otherHalf = tokens.sub(half);\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function updatePayoutToken(address token) public {\r\n        require(balanceOf(msg.sender) > 0);\r\n        require(token != address(this));\r\n\r\n        dividendTracker.updatePayoutToken(msg.sender, token);\r\n        emit UpdatePayoutToken(msg.sender, token);\r\n    }\r\n\r\n    function getPayoutToken(address account) public view returns (address) {\r\n        return dividendTracker.getPayoutToken(account);\r\n    }\r\n\r\n    function updateAllowTokens(address token, bool allow)\r\n        public\r\n        onlyOwnerOrJanitor\r\n    {\r\n        require(token != address(this));\r\n\r\n        dividendTracker.updateAllowTokens(token, allow);\r\n        emit UpdateAllowTokens(token, allow);\r\n    }\r\n\r\n    function setEthDefault(bool ethDefault) public onlyOwnerOrJanitor {\r\n        dividendTracker.setEthDefault(ethDefault);\r\n\r\n        emit SetEthDefault(ethDefault);\r\n    }\r\n\r\n    function getAllowTokens(address token) public view returns (bool) {\r\n        return dividendTracker.getAllowTokens(token);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            liquidityWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function forceSwapAndSendDividends(uint256 tokens) public onlyOwner {\r\n        uint256 totalAmount = buyAmount.add(sellAmount);\r\n        uint256 fromBuy = tokens.mul(buyAmount).div(totalAmount);\r\n        uint256 fromSell = tokens.mul(sellAmount).div(totalAmount);\r\n\r\n        swapAndSendDividends(tokens);\r\n\r\n        buyAmount = buyAmount.sub(fromBuy);\r\n        sellAmount = sellAmount.sub(fromSell);\r\n    }\r\n\r\n    function swapAndSendDividends(uint256 tokens) private {\r\n        swapTokensForEth(tokens);\r\n        uint256 totalAmount = buyAmount.add(sellAmount);\r\n        uint256 balance = address(this).balance;\r\n\r\n        uint256 dividendsFromBuy = balance\r\n            .mul(buyAmount)\r\n            .div(totalAmount)\r\n            .mul(BNBRewardsBuyFee)\r\n            .div(BNBRewardsBuyFee.add(devFees).add(EBBuyFee));\r\n\r\n        uint256 dividendsFromSell = balance\r\n            .mul(sellAmount)\r\n            .div(totalAmount)\r\n            .mul(BNBRewardsSellFee)\r\n            .div(BNBRewardsSellFee.add(devFees).add(EBSellFee));\r\n\r\n        uint256 dividends = dividendsFromBuy.add(dividendsFromSell);\r\n        uint256 forWhale = dividends.div(2);\r\n\r\n        (bool success, ) = address(dividendTracker).call{\r\n            value: dividends.sub(forWhale)\r\n        }(\"\");\r\n        (bool successWhale, ) = address(whale).call{value: forWhale}(\"\");\r\n\r\n        (uint256 ebDividends, bool ebSuccess) = sendEBDividends();\r\n\r\n        balance = address(this).balance;\r\n        uint256 half = balance.div(2);\r\n        uint256 otherHalf = balance - half;\r\n        (bool successOp1, ) = address(operations1Address).call{value: half}(\"\");\r\n\r\n        (bool successOp2, ) = address(operations2Address).call{\r\n            value: otherHalf\r\n        }(\"\");\r\n\r\n        emit SendDividends(\r\n            dividends,\r\n            balance,\r\n            ebDividends,\r\n            success && successOp1 && successOp2 && ebSuccess && successWhale\r\n        );\r\n    }\r\n\r\n    function sendEBDividends() private returns (uint256, bool) {\r\n        uint256 totalAmount = buyAmount.add(sellAmount);\r\n        uint256 balance = address(this).balance;\r\n\r\n        uint256 ebDividendsFromBuy = balance\r\n            .mul(buyAmount)\r\n            .div(totalAmount)\r\n            .mul(EBBuyFee)\r\n            .div(EBBuyFee.add(devFees));\r\n        uint256 ebDividendsFromSell = balance\r\n            .mul(sellAmount)\r\n            .div(totalAmount)\r\n            .mul(EBSellFee)\r\n            .div(EBSellFee.add(devFees));\r\n\r\n        uint256 ebDividends = ebDividendsFromBuy.add(ebDividendsFromSell);\r\n        bool ebSuccess = true;\r\n\r\n        if (ebDividends > 0) {\r\n            (ebSuccess, ) = address(ebTracker).call{value: ebDividends}(\"\");\r\n        }\r\n\r\n        return (ebDividends, ebSuccess);\r\n    }\r\n\r\n    function buyBack(\r\n        uint256 amount,\r\n        uint256 slippage,\r\n        uint256 rewardRatio,\r\n        uint256 sellRatio\r\n    ) external onlyOwnerOrJanitor {\r\n        whale.buyBack(amount, slippage, rewardRatio, sellRatio);\r\n    }\r\n\r\n    function swapForEth(uint256 amount) external onlyOwnerOrJanitor {\r\n        whale.swapForEth(amount);\r\n    }\r\n\r\n    function whaleRewardRatio() external view returns (uint256) {\r\n        return whale.rewardRatio();\r\n    }\r\n\r\n    function whaleSellRatio() external view returns (uint256) {\r\n        return whale.sellRatio();\r\n    }\r\n\r\n    function sendEthToContract(uint256 amount) external onlyOwnerOrJanitor {\r\n        whale.sendToContract(amount);\r\n    }\r\n\r\n    function whaleBurn(uint256 amount) external onlyOwnerOrJanitor {\r\n        whale.burnBabyBurn(amount);\r\n    }\r\n}\r\n\r\ncontract BabyDogeKingWhale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    BabyDogeKing public babyDogeKing;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    uint256 public rewardRatio;\r\n    uint256 public sellRatio;\r\n\r\n    event BuyBack(uint256 amount, uint256 tokenAmount);\r\n    event SwapForEth(uint256 amount, uint256 ethAmount);\r\n    event SendToContract(uint256 amount);\r\n    event Burn(uint256 amount);\r\n\r\n    constructor(address payable mainContract) {\r\n        babyDogeKing = BabyDogeKing(mainContract);\r\n\r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n    }\r\n\r\n    function buyBack(\r\n        uint256 amount,\r\n        uint256 slippage,\r\n        uint256 _rewardRatio,\r\n        uint256 _sellRatio\r\n    ) external onlyOwner {\r\n        require(\r\n            _rewardRatio <= 100,\r\n            \"reward ratio must be less than or equal to 100\"\r\n        );\r\n        require(\r\n            _sellRatio <= 100,\r\n            \"sell ratio must be less than or equal to 100\"\r\n        );\r\n        rewardRatio = _rewardRatio;\r\n        sellRatio = _sellRatio;\r\n        uint256 actualAmmount = amount * (10**17); // 1 == 0.1 eth\r\n        require(actualAmmount <= address(this).balance);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(babyDogeKing);\r\n        uint256 amountOut = 0;\r\n\r\n        if (slippage != 0) {\r\n            uint256[] memory amounts = uniswapV2Router.getAmountsOut(\r\n                actualAmmount,\r\n                path\r\n            );\r\n\r\n            amountOut = amounts[1].mul(slippage).div(100);\r\n        }\r\n\r\n        uint256 balance = babyDogeKing.balanceOf(address(this));\r\n\r\n        uniswapV2Router.swapExactETHForTokens{value: actualAmmount}(\r\n            amountOut,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        emit BuyBack(\r\n            actualAmmount,\r\n            babyDogeKing.balanceOf(address(this)).sub(balance)\r\n        );\r\n    }\r\n\r\n    function swapForEth(uint256 amount) external onlyOwner {\r\n        uint256 actualAmmount = amount * (10**9);\r\n\r\n        require(actualAmmount <= babyDogeKing.balanceOf(address(this)));\r\n\r\n        uint256 balance = address(this).balance;\r\n\r\n        swapTokensForEth(actualAmmount);\r\n\r\n        uint256 received = address(this).balance.sub(balance);\r\n\r\n        (bool success, ) = address(babyDogeKing).call{value: received}(\"\");\r\n\r\n        require(success, \"Transfer to contract failed\");\r\n\r\n        emit SwapForEth(actualAmmount, received);\r\n    }\r\n\r\n    function sendToContract(uint256 amount) external onlyOwner {\r\n        (bool success, ) = address(babyDogeKing).call{value: amount}(\"\");\r\n        require(success);\r\n\r\n        emit SendToContract(amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(babyDogeKing);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        babyDogeKing.approve(address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function burnBabyBurn(uint256 amount) external onlyOwner {\r\n        babyDogeKing.transfer(\r\n            0x000000000000000000000000000000000000dEaD,\r\n            amount\r\n        );\r\n\r\n        emit Burn(amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n\r\ncontract BabyDogeKingDividendTracker is DividendPayingToken, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    IterableMapping.Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n\r\n    mapping(address => bool) public excludedFromDividends;\r\n    mapping(address => bool) public excludedFromAutoClaim;\r\n    mapping(address => address) public payoutToken;\r\n    mapping(address => bool) public allowTokens;\r\n    bool public dividendsPaused = false;\r\n    bool public ethDefault = false;\r\n    address public buyBackUser;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    BabyDogeKing public babyDogeKing;\r\n\r\n    mapping(address => uint256) public lastClaimTimes;\r\n\r\n    uint256 public immutable minimumTokenBalanceForDividends;\r\n    uint256 public minimumEthPayout;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event Claim(\r\n        address indexed account,\r\n        uint256 amount,\r\n        bool indexed automatic\r\n    );\r\n    event DividendsPaused(bool paused);\r\n\r\n    constructor(address payable mainContract)\r\n        DividendPayingToken(\r\n            \"BabyDogeKing_Dividend_Tracker\",\r\n            \"BabyDogeKing_Dividend_Tracker\"\r\n        )\r\n    {\r\n        babyDogeKing = BabyDogeKing(mainContract);\r\n        minimumTokenBalanceForDividends = 10000000000 * (10**9);\r\n        minimumEthPayout = 5 * (10**15); // 0.0005 eth/bnb\r\n\r\n        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function _transfer(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) internal pure override {\r\n        require(false, \"BabyDogeKing_Dividend_Tracker: No transfers allowed\");\r\n    }\r\n\r\n    function withdrawDividend() public pure override {\r\n        require(\r\n            false,\r\n            \"BabyDogeKing_Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main BabyDogeKing contract.\"\r\n        );\r\n    }\r\n\r\n    function isExcludedFromAutoClaim(address account)\r\n        external\r\n        view\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return excludedFromAutoClaim[account];\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        require(!excludedFromDividends[account]);\r\n        excludedFromDividends[account] = true;\r\n\r\n        _setBalance(account, 0);\r\n        tokenHoldersMap.remove(account);\r\n\r\n        emit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function setAutoClaim(address account, bool value) external onlyOwner {\r\n        excludedFromAutoClaim[account] = value;\r\n    }\r\n\r\n    function setEthDefault(bool value) external onlyOwner {\r\n        require(ethDefault != value);\r\n\r\n        ethDefault = value;\r\n    }\r\n\r\n    function setMinimumEthPayout(uint256 value) external onlyOwner {\r\n        require(minimumEthPayout != value);\r\n\r\n        minimumEthPayout = value;\r\n    }\r\n\r\n    function setDividendsPaused(bool value) external onlyOwner {\r\n        require(dividendsPaused != value);\r\n        dividendsPaused = value;\r\n        emit DividendsPaused(value);\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns (uint256) {\r\n        return lastProcessedIndex;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns (uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n    function getAccount(address _account)\r\n        public\r\n        view\r\n        returns (\r\n            address account,\r\n            int256 index,\r\n            int256 iterationsUntilProcessed,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime\r\n        )\r\n    {\r\n        account = _account;\r\n\r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n\r\n        iterationsUntilProcessed = -1;\r\n\r\n        if (index >= 0) {\r\n            if (uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(\r\n                    int256(lastProcessedIndex)\r\n                );\r\n            } else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length >\r\n                    lastProcessedIndex\r\n                    ? tokenHoldersMap.keys.length.sub(lastProcessedIndex)\r\n                    : 0;\r\n\r\n                iterationsUntilProcessed = index.add(\r\n                    int256(processesUntilEndOfArray)\r\n                );\r\n            }\r\n        }\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        lastClaimTime = lastClaimTimes[account];\r\n    }\r\n\r\n    function getAccountAtIndex(uint256 index)\r\n        public\r\n        view\r\n        returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        if (index >= tokenHoldersMap.size()) {\r\n            return (\r\n                0x0000000000000000000000000000000000000000,\r\n                -1,\r\n                -1,\r\n                0,\r\n                0,\r\n                0\r\n            );\r\n        }\r\n\r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n        return getAccount(account);\r\n    }\r\n\r\n    function setBalance(address account, uint256 newBalance)\r\n        external\r\n        onlyOwner\r\n    {\r\n        if (excludedFromDividends[account]) {\r\n            return;\r\n        }\r\n\r\n        if (newBalance < minimumTokenBalanceForDividends) {\r\n            tokenHoldersMap.remove(account);\r\n            _setBalance(account, 0);\r\n\r\n            return;\r\n        }\r\n\r\n        _setBalance(account, newBalance);\r\n\r\n        tokenHoldersMap.set(account, newBalance);\r\n    }\r\n\r\n    function process(uint256 gas)\r\n        public\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n        if (numberOfTokenHolders == 0 || dividendsPaused) {\r\n            return (0, 0, lastProcessedIndex);\r\n        }\r\n\r\n        uint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n        uint256 gasUsed = 0;\r\n\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 claims = 0;\r\n\r\n        while (gasUsed < gas && iterations < numberOfTokenHolders) {\r\n            _lastProcessedIndex++;\r\n\r\n            if (_lastProcessedIndex >= numberOfTokenHolders) {\r\n                _lastProcessedIndex = 0;\r\n            }\r\n\r\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n            if (!excludedFromAutoClaim[account]) {\r\n                if (processAccount(payable(account), true)) {\r\n                    claims++;\r\n                }\r\n            }\r\n\r\n            iterations++;\r\n\r\n            uint256 newGasLeft = gasleft();\r\n\r\n            if (gasLeft > newGasLeft) {\r\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n            }\r\n\r\n            gasLeft = newGasLeft;\r\n        }\r\n\r\n        lastProcessedIndex = _lastProcessedIndex;\r\n\r\n        return (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        if (dividendsPaused) {\r\n            return false;\r\n        }\r\n\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n        if (amount > 0) {\r\n            lastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n    }\r\n\r\n    function updatePayoutToken(address account, address token)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            allowTokens[token] || token == address(0),\r\n            \"Token not in allow list\"\r\n        );\r\n        payoutToken[account] = token;\r\n    }\r\n\r\n    function getPayoutToken(address account) public view returns (address) {\r\n        return payoutToken[account];\r\n    }\r\n\r\n    function updateAllowTokens(address token, bool allow) public onlyOwner {\r\n        allowTokens[token] = allow;\r\n    }\r\n\r\n    function getAllowTokens(address token) public view returns (bool) {\r\n        return allowTokens[token];\r\n    }\r\n\r\n    function swapForTokens(\r\n        address tokenAddress,\r\n        address account,\r\n        uint256 ammount\r\n    ) private returns (bool) {\r\n        bool success;\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = tokenAddress;\r\n\r\n        try\r\n            uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n                value: ammount\r\n            }(\r\n                0, // accept any amount of Tokens\r\n                path,\r\n                account,\r\n                block.timestamp\r\n            )\r\n        {\r\n            success = true;\r\n        } catch {\r\n            success = false;\r\n        }\r\n\r\n        return success;\r\n    }\r\n\r\n    function _withdrawDividendOfUser(address payable user)\r\n        internal\r\n        override\r\n        returns (uint256)\r\n    {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend >= minimumEthPayout) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].add(\r\n                _withdrawableDividend\r\n            );\r\n\r\n            address tokenAddress = payoutToken[user];\r\n            bool success;\r\n\r\n            if (tokenAddress == address(0) || !allowTokens[tokenAddress]) {\r\n                if (ethDefault) {\r\n                    (success, ) = user.call{\r\n                        value: _withdrawableDividend,\r\n                        gas: 3000\r\n                    }(\"\");\r\n                } else {\r\n                    buyBackUser = user;\r\n                    success = swapForTokens(\r\n                        address(babyDogeKing),\r\n                        address(this),\r\n                        _withdrawableDividend\r\n                    );\r\n                    buyBackUser = address(0);\r\n                }\r\n            } else {\r\n                success = swapForTokens(\r\n                    tokenAddress,\r\n                    user,\r\n                    _withdrawableDividend\r\n                );\r\n            }\r\n\r\n            if (!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(\r\n                    _withdrawableDividend\r\n                );\r\n                return 0;\r\n            } else {\r\n                emit DividendWithdrawn(user, _withdrawableDividend);\r\n            }\r\n\r\n            return _withdrawableDividend;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"EnableSwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isJanitor\",\"type\":\"bool\"}],\"name\":\"JanitorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"opAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ebAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"SetBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetEthDefault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"SetPreSaleWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"UpdateAllowTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UpdateEBTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BNBRewardsBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BNBRewardsSell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EBBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EBSell\",\"type\":\"uint256\"}],\"name\":\"UpdateFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wallet\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxReferBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateMinimumEthPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UpdatePayoutToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNBRewardsBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BNBRewardsSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EBBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EBSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellRatio\",\"type\":\"uint256\"}],\"name\":\"buyBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bountyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bountyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerBalance\",\"type\":\"uint256\"}],\"name\":\"buyWithReferral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract BabyDogeKingDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"enableSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"forceSwapAndSendDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAllowTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPayoutToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromAutoClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRefferBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operations1Address\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operations2Address\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referLength\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referredBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"referrerBonus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendEthToContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutoClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setDividendsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"ethDefault\",\"type\":\"bool\"}],\"name\":\"setEthDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setJanitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinimumEthPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"setRefferer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapForEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReffererBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"updateAllowTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateEBTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BNBRewardsBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BNBRewardsSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EBBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EBSell\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"}],\"name\":\"updateLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMaxReferBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateOperations1Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateOperations2Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updatePayoutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whale\",\"outputs\":[{\"internalType\":\"contract BabyDogeKingWhale\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"whaleBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whaleRewardRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whaleSellRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BabyDogeKing", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3c73dea578474cd752171e7187381acbe05a78f272290dab743f5825d7f803dd"}