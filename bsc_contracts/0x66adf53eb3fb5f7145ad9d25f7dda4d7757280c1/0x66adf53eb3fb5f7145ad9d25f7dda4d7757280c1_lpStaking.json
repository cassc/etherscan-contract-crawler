{"SourceCode": "{\"Context.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"Staking.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract lpStaking is Ownable {\\nusing SafeMath for uint256;\\n    IERC20 rpg;\\n    IERC20 rpgLp;\\n    uint256 public tokenPerBlock;\\n    uint256 public commonLp;\\n    uint256 public commonAmount;\\n    uint256 public commonLength;\\n    uint256 public startBlock;\\n    uint256 public lastCalcBlock;\\n    uint256 public deactivationTime;\\n    bool public isFarmActive;\\n    mapping(uint8 =\\u003e uint256) public tiers;\\n    mapping(address =\\u003e bool) managers;\\n    mapping(address =\\u003e user) public Users;\\n\\n    struct Rank {\\n        address player;\\n        uint8 rank;\\n    }\\n\\n    struct user {\\n        userFunds prev;\\n        userFunds curr;\\n        uint256 unclaimed;\\n        uint256 multiplier;\\n    }\\n\\n    struct userFunds {\\n        uint256 startBlock;\\n        uint256 amount;\\n    }\\n\\n    modifier onlyManager() {\\n        require(managers[_msgSender()], \\\"Staking: onlyManager\\\");\\n        _;\\n    }\\n\\n    modifier onlyIsFarmActive() {\\n        require(isFarmActive, \\\"Staking: Farm is not active\\\");\\n        _;\\n    }\\n\\n    event LogUserRank(address user, uint8 rank);\\n    event Claim(address user, uint256 amount);\\n    event Deposit(address user, uint256 bonus);\\n    event Withdraw(address user, uint256 lpAmount, uint256 bonus);\\n    event EmergencyWithdraw(address user, uint256 lpAmount);\\n\\n    constructor(\\n        uint256 _tokenPerBlock,\\n        address _rpg,\\n        address _rpgLp\\n    ) {\\n        rpg = IERC20(_rpg);\\n        rpgLp = IERC20(_rpgLp);\\n        tokenPerBlock = _tokenPerBlock;\\n        managers[msg.sender] = true;\\n        isFarmActive = false;\\n        tiers[1] = 100;\\n        tiers[2] = 150;\\n        tiers[3] = 175;\\n        tiers[4] = 200;\\n    }\\n\\n    function addManager(address _manager) external onlyOwner {\\n        require(!managers[_manager], \\\"This address is already a manager\\\");\\n        managers[_manager] = true;\\n    }\\n\\n    function removeManager(address _manager) external onlyOwner {\\n        require(managers[_manager], \\\"This address is not a manager\\\");\\n        managers[_manager] = false;\\n    }\\n\\n    function changeTokenPerBlock(uint256 _newAmountWei) external onlyOwner {\\n        require(_newAmountWei \\u003c 1*1e18, \\\"Amount is too big\\\");\\n        require(_newAmountWei \\u003e= 1e9, \\\"Amount is too low\\\");\\n        tokenPerBlock = _newAmountWei;\\n    }\\n\\n    function deactivateFarm() external onlyOwner {\\n        require(isFarmActive,\\\"Farm is already deactivated\\\");\\n        isFarmActive = false;\\n        deactivationTime = block.number;\\n    }\\n\\n    function reactivateFarm() external onlyOwner {\\n        require(!isFarmActive,\\\"Farm is active\\\");\\n        isFarmActive = true;\\n        startBlock = block.number - 1;\\n        lastCalcBlock = block.number - 1;\\n        commonLength = 1;\\n        commonAmount = tokenPerBlock;\\n    }\\n\\n    function initFarm() external onlyOwner {\\n        require(!isFarmActive,\\\"Farm is active\\\");\\n        isFarmActive = true;\\n    }\\n\\n    function deposit(uint256 _amount) external onlyIsFarmActive {\\n        require(_amount \\u003e 0, \\\"Zero amount is not allowed\\\");\\n        address sender = _msgSender();\\n        if (commonLp == 0) {\\n            startBlock = block.number - 1;\\n            lastCalcBlock = block.number - 1;\\n            commonLength = 1;\\n            commonAmount = tokenPerBlock;\\n        }\\n        if (Users[sender].multiplier == 0) {\\n            Users[sender].multiplier = tiers[4];\\n        }\\n        rpgLp.transferFrom(sender, address(this), _amount);\\n        commonLp += _amount;\\n        if (Users[sender].curr.amount \\u003e 0) {\\n            claim();\\n        }\\n        Users[sender].curr.amount += _amount;\\n        Users[sender].curr.startBlock = block.number;\\n        emit Deposit(sender, _amount);\\n    }\\n\\n    function withdraw() external {\\n        address sender = _msgSender();\\n        require(Users[sender].multiplier != 0, \\\"User is not exist\\\");\\n        uint256 bonus;\\n        uint256 amount;\\n        if (Users[sender].unclaimed \\u003e 0) {\\n            bonus += Users[sender].unclaimed;\\n            Users[sender].unclaimed = 0;\\n        }\\n        if (Users[sender].curr.amount \\u003e 0) {\\n            bonus += userCalc(Users[sender].curr).mul(100).div(tiers[4]);\\n            amount += Users[sender].curr.amount;\\n            Users[sender].curr.amount = 0;\\n        }\\n        if (Users[sender].prev.amount \\u003e 0) {\\n            bonus += userCalc(Users[sender].prev).mul(100).div(\\n                Users[sender].multiplier\\n            );\\n            amount += Users[sender].prev.amount;\\n            Users[sender].prev.amount = 0;\\n        }\\n        Users[sender].curr.startBlock = block.number;\\n        Users[sender].prev.startBlock = block.number;\\n        if (bonus \\u003e= commonAmount) {\\n            bonus = commonAmount;\\n            commonAmount = 0;\\n        } else {\\n            commonAmount -= bonus;\\n        }\\n        require(amount \\u003e 0, \\\"Nothing to withdraw\\\");\\n        if (bonus \\u003e 0) {\\n            rpg.transfer(sender, bonus);\\n        }\\n        rpgLp.transfer(sender, amount);\\n        commonLp -= amount;\\n        emit Withdraw(sender, amount, bonus);\\n    }\\n\\n    function processRankingUpdate(bytes calldata data)\\n        external\\n        onlyManager\\n        onlyIsFarmActive\\n    {\\n        Rank[] memory temp;\\n        temp = abi.decode(data, (Rank[]));\\n\\n        uint256 length = temp.length;\\n        for (uint256 i = 0; i \\u003c length; i++) {\\n            Rank memory object = temp[i];\\n            uint256 r;\\n            address p = object.player;\\n            if (object.rank \\u003e 4) {\\n                r = tiers[4];\\n            } else if (object.rank \\u003c 1) {\\n                r = tiers[1];\\n            } else {\\n                r = tiers[object.rank];\\n            }\\n            uint256 bonus;\\n            if (Users[p].prev.amount \\u003e 0) {\\n                bonus += userCalc(Users[p].prev).mul(100).div(\\n                    Users[p].multiplier\\n                );\\n            }\\n            if (Users[p].curr.amount \\u003e 0) {\\n                bonus += userCalc(Users[p].curr).mul(100).div(tiers[4]);\\n                Users[p].prev.amount += Users[p].curr.amount;\\n                Users[p].curr.amount = 0;\\n            }\\n            Users[p].prev.startBlock = block.number;\\n            Users[p].curr.startBlock = block.number;\\n            Users[p].unclaimed += bonus;\\n            Users[p].multiplier = r;\\n            emit LogUserRank(p, object.rank);\\n        }\\n    }\\n\\n    function getUserInfo(address _user) external view returns (uint256) {\\n        require(Users[_user].multiplier != 0, \\\"User is not exist\\\");\\n        uint256 bonus;\\n        uint256 mult = Users[_user].multiplier;\\n        bonus += _viewCalcUser(Users[_user].prev).mul(100).div(mult);\\n        bonus += _viewCalcUser(Users[_user].curr).mul(100).div(tiers[4]);\\n        bonus += Users[_user].unclaimed;\\n        return bonus;\\n    }\\n\\n    function emergencyWithdraw() external {\\n        address sender = _msgSender();\\n        uint256 amount;\\n        if (Users[sender].curr.amount \\u003e 0) {\\n            amount += Users[sender].curr.amount;\\n            Users[sender].curr.amount = 0;\\n        }\\n        if (Users[sender].prev.amount \\u003e 0) {\\n            amount += Users[sender].prev.amount;\\n            Users[sender].prev.amount = 0;\\n        }\\n        Users[sender].unclaimed = 0;\\n        Users[sender].curr.startBlock = block.number;\\n        Users[sender].prev.startBlock = block.number;\\n        require(amount \\u003e 0, \\\"Nothing to withdraw\\\");\\n        rpgLp.transfer(sender, amount);\\n        commonLp -= amount;\\n        emit EmergencyWithdraw(sender, amount);\\n    }\\n\\n    function removeLiquidity() external onlyOwner {\\n        require(!isFarmActive, \\\"Staking: Farm is still active\\\");\\n        uint256 balance = rpg.balanceOf(address(this));\\n        rpg.transfer(_msgSender(), balance);\\n    }\\n\\n    function claim() public onlyIsFarmActive {\\n        address sender = _msgSender();\\n        require(Users[sender].multiplier != 0, \\\"User is not exist\\\");\\n        uint256 bonus;\\n        if (Users[sender].unclaimed \\u003e 0) {\\n            bonus += Users[sender].unclaimed;\\n            Users[sender].unclaimed = 0;\\n        }\\n        if (Users[sender].curr.amount \\u003e 0) {\\n            bonus += userCalc(Users[sender].curr).mul(100).div(tiers[4]);\\n        }\\n        if (Users[sender].prev.amount \\u003e 0) {\\n            bonus += userCalc(Users[sender].prev).mul(100).div(\\n                Users[sender].multiplier\\n            );\\n        }\\n        Users[sender].curr.startBlock = block.number;\\n        Users[sender].prev.startBlock = block.number;\\n        if (bonus \\u003e= commonAmount) {\\n            bonus = commonAmount;\\n            commonAmount = 0;\\n        } else {\\n            commonAmount -= bonus;\\n        }\\n        require(bonus \\u003e 0, \\\"Nothing to claim\\\");\\n        rpg.transfer(sender, bonus);\\n        emit Claim(sender, bonus);\\n    }\\n\\n    function _viewCalcUser(userFunds memory _userFund)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 currentBlock = isFarmActive ? block.number : deactivationTime;\\n        uint256 commonLengthR = commonLength + currentBlock.sub(lastCalcBlock);\\n        uint256 commonAmountR = commonAmount +\\n            (currentBlock.sub(lastCalcBlock)).mul(tokenPerBlock);\\n        uint256 bonus = commonAmountR\\n            .mul(currentBlock.sub(_userFund.startBlock))\\n            .mul(_userFund.amount)\\n            .div(commonLp.mul(commonLengthR));\\n        return bonus;\\n    }\\n\\n    function userCalc(userFunds memory _userFund) internal returns (uint256) {\\n        uint256 currentBlock = isFarmActive ? block.number : deactivationTime;\\n        commonLength += currentBlock.sub(lastCalcBlock);\\n        commonAmount += (currentBlock.sub(lastCalcBlock)).mul(tokenPerBlock);\\n        lastCalcBlock = currentBlock;\\n        uint256 bonus = commonAmount\\n            .mul(currentBlock.sub(_userFund.startBlock))\\n            .mul(_userFund.amount)\\n            .div(commonLp.mul(commonLength));\\n        return bonus;\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rpg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rpgLp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rank\",\"type\":\"uint8\"}],\"name\":\"LogUserRank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Users\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct lpStaking.userFunds\",\"name\":\"prev\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct lpStaking.userFunds\",\"name\":\"curr\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"unclaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmountWei\",\"type\":\"uint256\"}],\"name\":\"changeTokenPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commonAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commonLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commonLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFarmActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCalcBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processRankingUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reactivateFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "lpStaking", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000001e0d17a533e5930a349c2bb71304f04f20ab12b000000000000000000000000a9c815b975b72172d220065319902b176c527d72", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://98d1f1ee914adee7be0bdb76a9c535b8f0792838b7a30c6696829f325cc95aa6"}