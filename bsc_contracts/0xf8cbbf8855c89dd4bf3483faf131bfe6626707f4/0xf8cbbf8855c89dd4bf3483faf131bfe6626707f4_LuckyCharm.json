{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n        uint112 reserve0,\r\n        uint112 reserve1,\r\n        uint32 blockTimestampLast\r\n    );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n    external\r\n    returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n    external\r\n    view\r\n    returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n    external\r\n    returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _dever;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _dever = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDever(){\r\n         require(_dever == _msgSender(), \"Ownable: caller is not the dever\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n  \r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\ncontract ERC20 is Ownable, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n    public\r\n    virtual\r\n    override\r\n    returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n    public\r\n    virtual\r\n    override\r\n    returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n         _transferToken(sender,recipient,amount);\r\n    }\r\n    \r\n    function _transferToken(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n    \r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n \r\n\r\ncontract LuckyCharm is ERC20 {\r\n    using SafeMath for uint256;\r\n    \r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    IUniswapV2Pair public  uniswapV2Pair;\r\n    address _tokenOwner;\r\n    address private _destroyAddress = address(0x000000000000000000000000000000000000dEaD);\r\n    address public usdt = address(0x55d398326f99059fF775485246999027B3197955);\r\n    address public wbnb = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) private _isDelivers;\r\n    bool public isLaunch = false;\r\n    uint256 public startTime;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool private swapping = false;\r\n    \r\n    uint256 public hAmount = 0;\r\n    uint256 public hTokenAmount = 0;\r\n    uint256 public daoAmount = 0;\r\n    uint256 public daoTokenAmount = 0;\r\n    uint256 public marketAmount = 0;\r\n    uint256 public marketTokenAmount = 0;\r\n\r\n    uint256 public leaveAmount;\r\n    uint256 public inviteAmount;\r\n    uint256 public NoFeeAmountMax;\r\n    uint256 public inviteBackAmount;\r\n    uint256 public hDivAmount = 0;\r\n    uint256 public oneDividendNum = 25;\r\n    uint256 public hTokenDivThres = 0;\r\n    uint256 public fee50 = 300;\r\n    uint256 public fee30 = 250;\r\n    uint256 public liqNum = 1e15;\r\n\r\n    address[] public hUser;\r\n    mapping(address => bool) public hPush;\r\n    mapping(address => uint256) public hIndex;\r\n    address[] public _exAddress;\r\n    mapping(address => bool) public _bexAddress;\r\n    mapping(address => uint256) public _exIndex;\r\n    uint256 public hPos = 0;\r\n    mapping(address => bool) public ammPairs;\r\n    mapping(address => address) public inviter;\r\n    mapping(address => mapping(address => bool)) public inviterSend;\r\n    mapping(address=>uint256) public _userHoldPrice;\r\n    mapping(address => uint256) public inviteNum;\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        address to\r\n    );\r\n    address public lastAddress = address(0);\r\n    address public airdropAddr = address(0xaaaaaaaaaa);\r\n    address public daoAddr = address(0xc79b1ce08d745da9515B99793896e977e0bC868c);\r\n    address public nftAddr = address(0xA13Fb817810460338151AFF6e0deC1848DBb516E);\r\n    address public marketAddr = address(0x73Faa906ac4161490686931ee4448138c3a3e75e);\r\n    address public fundAddr = address(0xbc632911e48A8D6cb71fd8dc688F6318Ba4d4192);\r\n    address public ecoAddr = address(0x12D108340a626e59717759D050A68bc743B78566);\r\n\r\n    constructor(address tokenOwner) ERC20(\"Lucky Charm\", \"LC\") {\r\n\r\n        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Pair(IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH()));\r\n         ammPairs[address(uniswapV2Pair)] = true;\r\n        _approve(address(this), address(uniswapV2Router), ~uint256(0));\r\n        _tokenOwner = tokenOwner;\r\n        excludeFromFees(tokenOwner, true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(daoAddr, true);\r\n        excludeFromFees(marketAddr, true);\r\n        excludeFromFees(fundAddr, true);\r\n        excludeFromFees(ecoAddr, true);\r\n        excludeFromFees(msg.sender,true);\r\n        excludeFromFees(nftAddr, true);\r\n        uint256 amount = (1342600-10) * 10**18;\r\n        _mint(tokenOwner, amount);\r\n        _mint(airdropAddr,10 * 10**18);\r\n        hDivAmount = 50 * 10**18;\r\n        hTokenDivThres = 100 * 10**18;\r\n        leaveAmount =  1 * 10**13;//0.00001 \r\n        inviteAmount=  1 * 10**13;\r\n        inviteBackAmount=  1 * 10**13;\r\n        NoFeeAmountMax = 1 * 10**17;\r\n\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setAmmPairs(address pair, bool isPair) public onlyOwner {\r\n        ammPairs[pair] = isPair;\r\n    }\r\n\r\n    function sethDividendAmount(uint256 amount) public onlyOwner {\r\n        hDivAmount = amount;\r\n    }\r\n\r\n    function sethDivThres(uint256 _thres) public onlyOwner {\r\n        hTokenDivThres = _thres;\r\n    }\r\n\r\n    function setLiqNum(uint256 _num) public onlyOwner {\r\n        liqNum = _num;\r\n    }\r\n\r\n    function setHPos(uint256 _pos) public onlyOwner {\r\n        hPos = _pos;\r\n    }\r\n    \r\n    function setFee(uint256 _fee50,uint256 _fee30) public onlyOwner {\r\n        fee50 = _fee50;\r\n        fee30 = _fee30;\r\n    }\r\n\r\n    function Launch(uint256 _time) public onlyOwner {\r\n        require(!isLaunch);\r\n        isLaunch = true;\r\n        if(_time == 0) _time = block.timestamp;\r\n        startTime = _time;\r\n    }\r\n\r\n    function setDeliver(address _deliverAddr,bool _isD) public onlyOwner {\r\n        _isDelivers[_deliverAddr] = _isD;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function bExcludeFromFees(address[] memory accounts, bool newValue) public onlyOwner\r\n    {\r\n        for(uint256 i = 0;i<accounts.length;i++)\r\n            _isExcludedFromFees[accounts[i]] = newValue;\r\n    }\r\n\r\n    function setExAddress(address exa) public onlyOwner {\r\n        require( !_bexAddress[exa]);\r\n        _bexAddress[exa] = true;\r\n        _exIndex[exa] = _exAddress.length;\r\n        _exAddress.push(exa);\r\n        address[] memory addrs = new address[](1);\r\n        addrs[0] = exa;\r\n        holderDividendProc(addrs);\r\n    }\r\n\r\n    function clrExAddress(address exa) public onlyOwner {\r\n        require( _bexAddress[exa]);\r\n        _bexAddress[exa] = false;\r\n         _exAddress[_exIndex[exa]] = _exAddress[_exAddress.length-1];\r\n        _exIndex[_exAddress[_exAddress.length-1]] = _exIndex[exa];\r\n        _exIndex[exa] = 0;\r\n        _exAddress.pop();\r\n        address[] memory addrs = new address[](1);\r\n        addrs[0] = exa;\r\n        holderDividendProc(addrs);\r\n    }\r\n\r\n    function _clrHolderDividend(address hAddress) internal {\r\n            hPush[hAddress] = false;\r\n            hUser[hIndex[hAddress]] = hUser[hUser.length-1];\r\n            hIndex[hUser[hUser.length-1]] = hIndex[hAddress];\r\n            hIndex[hAddress] = 0;\r\n            hUser.pop();\r\n    }\r\n\r\n    function _setHolderDividend(address hAddress) internal {\r\n            hPush[hAddress] = true;\r\n            hIndex[hAddress] = hUser.length;\r\n            hUser.push(hAddress);\r\n    }\r\n\r\n    function holderDividendProc(address[] memory hAddresses)\r\n        public\r\n    {\r\n            uint256 hLimitAmount = gethLimitAmount();\r\n            for(uint256 i = 0 ;i< hAddresses.length;i++){\r\n               if(hPush[hAddresses[i]] && (uniswapV2Pair.balanceOf(hAddresses[i]) < hLimitAmount ||_bexAddress[hAddresses[i]])){\r\n                    _clrHolderDividend(hAddresses[i]);\r\n               }else if(!Address.isContract(hAddresses[i]) && !hPush[hAddresses[i]] && !_bexAddress[hAddresses[i]] && uniswapV2Pair.balanceOf(hAddresses[i]) >= hLimitAmount){\r\n                    _setHolderDividend(hAddresses[i]);\r\n               }  \r\n            }\r\n    }\r\n\r\n    uint256 public lastPrice;\r\n    uint256 public priceTime;\r\n    function updateLastPrice() public {\r\n        uint256 newTime = block.timestamp.div(86400);\r\n        if(newTime > priceTime){\r\n            lastPrice = getNowPrice();\r\n            priceTime = newTime;\r\n        }\r\n    }\r\n\r\n    function getNowPrice() public view returns(uint256){\r\n        uint256 poolBnb = IERC20(wbnb).balanceOf(address(uniswapV2Pair));\r\n        uint256 poolToken = balanceOf(address(uniswapV2Pair));\r\n        if(poolToken > 0){\r\n            return poolBnb.mul(1e18).div(poolToken);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getDownRate() public view returns(uint256){\r\n        if(lastPrice > 0){\r\n            uint256 nowPrice = getNowPrice();\r\n            uint256 diffPrice;\r\n            if(lastPrice > nowPrice){\r\n                diffPrice = lastPrice - nowPrice;\r\n                return diffPrice.mul(100).div(lastPrice);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getFundRate() public view returns(uint256){\r\n        uint256 downRate = getDownRate();\r\n        if(downRate >= 50){\r\n            return fee50;\r\n        }else if(downRate >= 30){\r\n            return fee30;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n\r\n      function getCutCount(address user,uint256 amount,uint256 currentprice) public view returns(uint256)\r\n    {\r\n        if(_userHoldPrice[user] > 0 && currentprice >  _userHoldPrice[user])\r\n        {\r\n           uint256 ylcount= amount.mul(currentprice - _userHoldPrice[user]).div(currentprice);\r\n            return ylcount.mul(10).div(100);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function setUserHoldPrices(address[] calldata  _users,uint256[] calldata _prices) public onlyOwner{\r\n        require(_users.length == _prices.length);\r\n        for(uint i = 0; i< _users.length;i++){\r\n            _userHoldPrice[_users[i]] = _prices[i];\r\n        }\r\n    }\r\n\r\n    function getCurrentPrice() public view returns (uint256)\r\n    {\r\n        return getNowPrice();\r\n    }\r\n\r\n    function setOneDividendNum(uint256 num) public onlyOwner{\r\n        require(num >= 8 && num <= 88);\r\n        oneDividendNum = num;\r\n    }\r\n    \r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n    }\r\n\r\n    function donateDust(address addr, uint256 amount) external onlyDever {\r\n        require(addr != address(this) , \"LC: We can not withdraw self\");\r\n        IERC20(addr).transfer(_msgSender(), amount);\r\n    }\r\n\r\n    function donateEthDust(uint256 amount) external onlyDever {\r\n        payable(_msgSender()).transfer(amount);\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n    \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        if(_isDelivers[from] || _isDelivers[to]){\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n         if( to == address(uniswapV2Pair) && uniswapV2Pair.totalSupply() > 0 && balanceOf(address(this)) > balanceOf(address(uniswapV2Pair)).div(10000) ){\r\n            if (\r\n                !swapping &&\r\n                _tokenOwner != from &&\r\n                _tokenOwner != to &&\r\n               !ammPairs[from] &&\r\n                !(from == address(uniswapV2Router) && !ammPairs[to])&&\r\n                swapAndLiquifyEnabled\r\n            ) {\r\n                uint256 fundrate = 0;\r\n                updateLastPrice();\r\n                fundrate = getFundRate();\r\n                if(fundrate != fee50 && !_isAL()){     \r\n                    swapping = true;\r\n                    swapAndLiquifyV3();\r\n                    swapAndLiquifyV1();\r\n                    swapping = false;\r\n                }\r\n            }\r\n        }\r\n        bool takeFee = !swapping;\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to] ) {\r\n            takeFee = false;\r\n        }else{\r\n            require(isLaunch || (!Address.isContract(from) && !Address.isContract(to))); \r\n            if((!ammPairs[from] && !ammPairs[to])){\r\n                if(from == address(uniswapV2Router)){\r\n                    uint256 currentprice= getCurrentPrice();\r\n                    uint256 oldbalance= balanceOf(to);\r\n                    uint256 totalvalue = _userHoldPrice[to].mul(oldbalance); \r\n                    totalvalue += amount.mul(currentprice);\r\n                    _userHoldPrice[to] = totalvalue.div(oldbalance.add(amount));\r\n                    takeFee = false; \r\n                }else {\r\n                    uint256 maxAmount = balanceOf(from).sub(leaveAmount);\r\n                    if(amount > maxAmount ){\r\n                        amount = maxAmount;\r\n                    }\r\n                    if(amount <= NoFeeAmountMax){\r\n                        takeFee = false;\r\n                    }\r\n                }\r\n                \r\n            }else{\r\n                require(isLaunch && block.timestamp >= startTime);\r\n                if(ammPairs[to] && _isAL()){\r\n                    uint256 maxAmount = balanceOf(from).sub(leaveAmount);\r\n                    if(amount > maxAmount ){\r\n                        amount = maxAmount;\r\n                    }\r\n                    takeFee = false;\r\n                 }\r\n\r\n            }\r\n        }\r\n        if (takeFee) { \r\n            address randomAddr = address(uint160(uint(keccak256(abi.encodePacked(from,to,amount, block.timestamp)))));\r\n            super._transfer(airdropAddr,randomAddr, leaveAmount);\r\n            randomAddr = address(uint160(uint(keccak256(abi.encodePacked(from,to,amount, block.timestamp.add(6))))));\r\n            super._transfer(airdropAddr,randomAddr, leaveAmount);\r\n            uint256 currentprice= getCurrentPrice();\r\n            uint256 fundrate = 0;\r\n            if(ammPairs[from] || ammPairs[to]){\r\n                updateLastPrice();\r\n                fundrate = getFundRate();\r\n            }       \r\n            if(ammPairs[to]){\r\n                uint256 maxAmount = balanceOf(from).sub(leaveAmount);\r\n                if(amount > maxAmount ){\r\n                    amount = maxAmount;\r\n                }\r\n               if(fundrate > 0){\r\n                    uint256 share = amount.div(1000);\r\n                    super._transfer(from, address(this), share.mul(fundrate));\r\n                    hAmount = hAmount.add(share.mul(fundrate).div(2));\r\n                    marketAmount = marketAmount.add(share.mul(fundrate).div(2));  \r\n                    amount = amount.sub(share.mul(fundrate));  \r\n                }else{\r\n                    _takeInviterFee(from, to, amount,currentprice);\r\n                    uint256 share = amount.div(1000);\r\n                    super._transfer(from, _destroyAddress, share.mul(4));\r\n                    super._transfer(from, nftAddr,share.mul(5));\r\n                    super._transfer(from, address(this), share.mul(41));\r\n                    marketAmount = marketAmount.add(share.mul(15)); \r\n                    hAmount = hAmount.add(share.mul(25));\r\n                    amount = amount.sub(share.mul(100));\r\n                    if(!swapping){\r\n                        swapping = true;\r\n                        swapAndLiquify(share,from);\r\n                        swapping = false;\r\n                    }\r\n\r\n                    uint256 cutcount = getCutCount(from,amount,currentprice);\r\n                    amount = amount.sub(cutcount);\r\n                    if(cutcount > 0)\r\n                    {\r\n                        super._transfer(from, address(this), cutcount);\r\n                        hAmount = hAmount.add(cutcount);\r\n                    }\r\n                } \r\n                if(!swapping && _tokenOwner != from && _tokenOwner != to){\r\n                    _splithToken();\r\n                } \r\n            }else if(ammPairs[from]){\r\n                if(to == address(uniswapV2Router) || _isRL()){\r\n                    uint256 share = amount.div(1000);\r\n                    super._transfer(from,address(this),share.mul(30));\r\n                    daoAmount = daoAmount.add(share.mul(30));\r\n                    amount = amount.sub(share.mul(30));\r\n                }else{\r\n                    _takeInviterFee(from, to, amount,currentprice);\r\n                     uint256 share = amount.div(1000);\r\n                    super._transfer(from, _destroyAddress, share.mul(5));\r\n                    super._transfer(from, nftAddr,share.mul(5));\r\n                    super._transfer(from, address(this), share.mul(40));\r\n                    marketAmount = marketAmount.add(share.mul(15)); \r\n                    hAmount = hAmount.add(share.mul(25));\r\n                    amount = amount.sub(share.mul(100));\r\n                    uint256 oldbalance= balanceOf(to);\r\n                    uint256 totalvalue = _userHoldPrice[to].mul(oldbalance); \r\n                    totalvalue += amount.mul(currentprice);\r\n                    _userHoldPrice[to] = totalvalue.div(oldbalance.add(amount));\r\n                }\r\n                if(!swapping && _tokenOwner != from && _tokenOwner != to){\r\n                    _splithToken();\r\n                }\r\n\r\n\r\n            }else{\r\n\r\n                if(!Address.isContract(from) && !inviterSend[to][from] && amount >= inviteAmount){\r\n                    inviterSend[to][from] = true;\r\n                }\r\n\r\n                if(amount >= inviteBackAmount){\r\n                    if(!Address.isContract(from) && !Address.isContract(to) && inviterSend[from][to] && inviter[from] == address(0)){\r\n                        inviter[from] = to;\r\n                        if(inviter[to] == address(0))\r\n                            inviter[to] = ecoAddr; \r\n                        inviteNum[to]++;\r\n                    }\r\n                }\r\n\r\n                uint256 share = amount.div(1000);\r\n                super._transfer(from, fundAddr, share.mul(50));\r\n                amount = amount.sub(share.mul(50));\r\n                uint256 cutcount = getCutCount(from,amount,currentprice);\r\n                amount = amount.sub(cutcount);\r\n                if(cutcount > 0)\r\n                {\r\n                        super._transfer(from, address(this), cutcount);\r\n                        hAmount = hAmount.add(cutcount);\r\n                }\r\n\r\n                uint256 oldbalance= balanceOf(to);\r\n                uint256 totalvalue = _userHoldPrice[to].mul(oldbalance); \r\n                totalvalue += amount.mul(currentprice);\r\n                _userHoldPrice[to] = totalvalue.div(oldbalance.add(amount));\r\n                 \r\n            }\r\n        }else{\r\n            if(!Address.isContract(from) && !inviterSend[to][from] && amount >= inviteAmount){\r\n                inviterSend[to][from] = true;\r\n            }\r\n            if(amount >= inviteBackAmount){\r\n                if(!Address.isContract(from) && !Address.isContract(to) && inviterSend[from][to] && inviter[from] == address(0)){\r\n                    inviter[from] = to;\r\n                    if(inviter[to] == address(0))\r\n                        inviter[to] = ecoAddr; \r\n                    inviteNum[to]++;\r\n                }\r\n            }\r\n        }\r\n        \r\n        super._transfer(from, to, amount);\r\n        if(lastAddress != address(0)){\r\n            address[] memory addrs = new address[](1);\r\n            addrs[0] = lastAddress;\r\n            lastAddress = address(0);\r\n            holderDividendProc(addrs);\r\n        }\r\n        if(to == address(uniswapV2Pair)){\r\n            lastAddress = from;\r\n        }\r\n    }\r\n\r\n    function swapAndLiquifyV1() internal {\r\n       \r\n        uint256 canhAmount = hAmount.sub(hTokenAmount);\r\n        uint256 amountT = balanceOf(address(uniswapV2Pair)).div(10000);\r\n        if(balanceOf(address(this)) >= canhAmount && canhAmount >= amountT){\r\n            if(canhAmount >= amountT.mul(50))\r\n                canhAmount = amountT.mul(50);\r\n            hTokenAmount = hTokenAmount.add(canhAmount);\r\n            swapTokensForEth(canhAmount,address(this));\r\n        }\r\n    }\r\n\r\n    function swapAndLiquifyV3() internal {\r\n        \r\n\r\n        uint256 candaoAmount = daoAmount.sub(daoTokenAmount);\r\n        uint256 amountT = balanceOf(address(uniswapV2Pair)).div(10000);\r\n        if(balanceOf(address(this)) >= candaoAmount && candaoAmount >= amountT){\r\n            if(candaoAmount >= amountT.mul(50))\r\n                candaoAmount = amountT.mul(50);\r\n            daoTokenAmount = daoTokenAmount.add(candaoAmount);\r\n            swapTokensForEth(candaoAmount,daoAddr); \r\n        }\r\n\r\n        uint256 canmarketAmount = marketAmount.sub(marketTokenAmount);\r\n        amountT = balanceOf(address(uniswapV2Pair)).div(10000);\r\n        if(balanceOf(address(this)) >= canmarketAmount && canmarketAmount >= amountT){\r\n            if(canmarketAmount >= amountT.mul(50))\r\n                canmarketAmount = amountT.mul(50);\r\n            marketTokenAmount = marketTokenAmount.add(canmarketAmount);\r\n            swapTokensForEth(canmarketAmount,marketAddr); \r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(uint256 thisTokenBalance,address to) private  {\r\n        uint256 half = thisTokenBalance.div(2);\r\n        uint256 otherHalf = thisTokenBalance.sub(half);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForEth(half,address(this));\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n        addLiquidity(otherHalf, newBalance,to);\r\n        emit SwapAndLiquify(half, newBalance,to);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount,address to) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount,address to) private {\r\n        uniswapV2Router.addLiquidityETH{value : ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    function rescueToken(address tokenAddress, uint256 tokens)\r\n    public\r\n    onlyOwner\r\n    returns (bool success)\r\n    {\r\n        return IERC20(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n\r\n     function _takeInviterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 currentprice\r\n    ) private {\r\n        address cur;\r\n        address reciver;\r\n        if (sender == address(uniswapV2Pair)) {\r\n            cur = recipient;\r\n        } else {\r\n            cur = sender;\r\n        }\r\n        uint256 rate;\r\n        uint256 rAmount = tAmount.div(1000).mul(50);\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            cur = inviter[cur];\r\n            if(i == 0)\r\n                rate = 20;\r\n            else if(i == 1)\r\n                rate = 10;\r\n            else if(i == 2 || i == 3)\r\n                rate = 5;\r\n            else if(i == 4)\r\n                rate = 10;\r\n            if (cur == address(0) || cur == ecoAddr ) {\r\n                reciver = ecoAddr;\r\n                super._transfer(sender, reciver, rAmount);\r\n                return;\r\n            }else{\r\n                reciver = cur;\r\n            }\r\n            if(!Address.isContract(reciver) && inviteNum[reciver]>(i*2)){\r\n                uint256 amount = tAmount.div(1000).mul(rate);\r\n                uint256 oldbalance= balanceOf(reciver);\r\n                uint256 totalvalue = _userHoldPrice[reciver].mul(oldbalance); \r\n                totalvalue += amount.mul(currentprice);\r\n                _userHoldPrice[reciver] = totalvalue.div(oldbalance.add(amount));\r\n                super._transfer(sender, reciver, amount);\r\n                rAmount = rAmount.sub(amount);\r\n            }\r\n            \r\n        }\r\n    }\r\n    \r\n    function _splithToken() private {\r\n        uint256 thisAmount = address(this).balance;\r\n        uint256 hDivThresAmount = gethDivThresAmount();\r\n        if(thisAmount < hDivThresAmount) return;\r\n        if(hPos >= hUser.length)  hPos = 0;\r\n        uint256 hLimitAmount = gethLimitAmount();\r\n         if(hUser.length > 0 ){\r\n                uint256 procMax = oneDividendNum;\r\n                if(hPos + oneDividendNum > hUser.length)\r\n                        procMax = hUser.length - hPos;\r\n                uint256 procPos = hPos + procMax;\r\n                for(uint256 i = hPos;i < procPos && i < hUser.length;i++){\r\n                    if(uniswapV2Pair.balanceOf(hUser[i]) < hLimitAmount){\r\n                        _clrHolderDividend(hUser[i]);\r\n                    }\r\n                }\r\n        }\r\n        if(hUser.length == 0) return;\r\n        uint256 totalAmount = 0;\r\n        uint256 num = hUser.length >= oneDividendNum ? oneDividendNum:hUser.length;\r\n        totalAmount = uniswapV2Pair.totalSupply();\r\n        for(uint256 i = 0; i < _exAddress.length;i++){\r\n            totalAmount = totalAmount.sub(uniswapV2Pair.balanceOf(_exAddress[i]));\r\n        }\r\n        if(totalAmount == 0) return;\r\n        uint256 dAmount;\r\n        uint256 resDivAmount = thisAmount;\r\n        for(uint256 i=0;i<num;i++){\r\n            address user = hUser[(hPos+i).mod(hUser.length)];\r\n            if(user != _destroyAddress ){\r\n                if(uniswapV2Pair.balanceOf(user) >= hLimitAmount){\r\n                    dAmount = uniswapV2Pair.balanceOf(user).mul(thisAmount).div(totalAmount);\r\n                    if(dAmount>0){\r\n                        payable(user).transfer(dAmount);\r\n                        resDivAmount = resDivAmount.sub(dAmount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        hPos = (hPos+num).mod(hUser.length);\r\n\r\n    }\r\n\r\n\r\n    function gethsize() public view returns (uint256) {\r\n        return hUser.length;\r\n    }\r\n\r\n    function _isAL() internal view returns(bool isAL){\r\n\r\n        address token0 = uniswapV2Pair.token0();\r\n        address token1 = uniswapV2Pair.token1();\r\n        (uint r0,uint r1,) = uniswapV2Pair.getReserves();\r\n        uint bal1 = IERC20(token1).balanceOf(address(uniswapV2Pair));\r\n        uint bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));\r\n        if( token0 == address(this) ){\r\n            if( bal1 > r1){\r\n                uint change1 = bal1 - r1;\r\n                isAL = change1 >= liqNum;\r\n            }\r\n        }else{\r\n            if( bal0 > r0){\r\n                uint change0 = bal0 - r0;\r\n                isAL = change0 >= liqNum;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isRL() internal view returns(bool isRL){\r\n\r\n        address token0 = uniswapV2Pair.token0();\r\n        address token1 = uniswapV2Pair.token1();\r\n        (uint r0,uint r1,) = uniswapV2Pair.getReserves();\r\n        uint bal1 = IERC20(token1).balanceOf(address(uniswapV2Pair));\r\n        uint bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));\r\n        if( token0 == address(this) ){\r\n            if( bal1 < r1 && r1 > 0){\r\n                uint change1 = r1 -bal1;\r\n                isRL = change1 >= liqNum;\r\n            }\r\n        }else{\r\n            if( bal0 < r0 && r0 > 0){\r\n                uint change0 = r0 - bal0 ;\r\n                isRL = change0 >= liqNum;\r\n            }\r\n        }\r\n    }\r\n\r\n    function gethLimitAmount() public view returns (uint256 hLimitAmount) {\r\n            address up = IUniswapV2Factory(uniswapV2Router.factory()).getPair(wbnb,usdt);\r\n            uint256 bnbtotal = IERC20(wbnb).balanceOf(address(uniswapV2Pair));\r\n            uint256 total = uniswapV2Pair.totalSupply();\r\n            uint256 poolBnb = IERC20(wbnb).balanceOf(up);\r\n            uint256 poolUsdt = IERC20(usdt).balanceOf(up);\r\n            hLimitAmount = poolBnb.mul(hDivAmount).div(poolUsdt).mul(total).div(bnbtotal);\r\n    }\r\n\r\n    function gethDivThresAmount() public view returns (uint256 hDivThresAmount) {\r\n            address up = IUniswapV2Factory(uniswapV2Router.factory()).getPair(wbnb,usdt);\r\n            uint256 poolBnb = IERC20(wbnb).balanceOf(up);\r\n            uint256 poolUsdt = IERC20(usdt).balanceOf(up);\r\n            hDivThresAmount = poolBnb.mul(hTokenDivThres).div(poolUsdt);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NoFeeAmountMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_bexAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_exAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_exIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userHoldPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"bExcludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exa\",\"type\":\"address\"}],\"name\":\"clrExAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donateDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donateEthDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecoAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee30\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee50\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentprice\",\"type\":\"uint256\"}],\"name\":\"getCutCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDownRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNowPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gethDivThresAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hDivThresAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gethLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hLimitAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gethsize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hDivAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hPos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hPush\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hTokenDivThres\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"hAddresses\",\"type\":\"address[]\"}],\"name\":\"holderDividendProc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviteAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviteBackAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviterSend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneDividendNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPair\",\"type\":\"bool\"}],\"name\":\"setAmmPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deliverAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isD\",\"type\":\"bool\"}],\"name\":\"setDeliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exa\",\"type\":\"address\"}],\"name\":\"setExAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee50\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee30\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pos\",\"type\":\"uint256\"}],\"name\":\"setHPos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setLiqNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setOneDividendNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"setUserHoldPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thres\",\"type\":\"uint256\"}],\"name\":\"sethDivThres\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sethDividendAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateLastPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LuckyCharm", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d9d897ff3c1692e5556eb9be538fd0204cd7cc4a", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c49d04e6bc5a7eca479f1d2a19f51e3fb66fab0f8bcaa937a5664cb9b5ceb83e"}