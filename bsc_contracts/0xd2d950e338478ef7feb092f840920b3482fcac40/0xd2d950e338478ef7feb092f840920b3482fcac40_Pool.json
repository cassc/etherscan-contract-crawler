{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/pool/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport './IPool.sol';\\r\\nimport './PoolStorage.sol';\\r\\n\\r\\ncontract Pool is PoolStorage {\\r\\n\\r\\n    function setImplementation(address newImplementation) external _onlyAdmin_ {\\r\\n        require(\\r\\n            IPool(newImplementation).nameId() == keccak256(abi.encodePacked('PoolImplementation')),\\r\\n            'Pool.setImplementation: not pool implementation'\\r\\n        );\\r\\n        implementation = newImplementation;\\r\\n        emit NewImplementation(newImplementation);\\r\\n    }\\r\\n\\r\\n    function setProtocolFeeCollector(address newProtocolFeeCollector) external _onlyAdmin_ {\\r\\n        protocolFeeCollector = newProtocolFeeCollector;\\r\\n        emit NewProtocolFeeCollector(newProtocolFeeCollector);\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        _delegate();\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n\\r\\n    }\\r\\n\\r\\n    function _delegate() internal {\\r\\n        address imp = implementation;\\r\\n        assembly {\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            let result := delegatecall(gas(), imp, 0, calldatasize(), 0, 0)\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            switch result\\r\\n            case 0 { revert(0, returndatasize()) }\\r\\n            default { return(0, returndatasize()) }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/pool/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport '../utils/INameVersion.sol';\\r\\nimport '../utils/IAdmin.sol';\\r\\n\\r\\ninterface IPool is INameVersion, IAdmin {\\r\\n\\r\\n    function implementation() external view returns (address);\\r\\n\\r\\n    function protocolFeeCollector() external view returns (address);\\r\\n\\r\\n    function liquidity() external view returns (int256);\\r\\n\\r\\n    function lpsPnl() external view returns (int256);\\r\\n\\r\\n    function cumulativePnlPerLiquidity() external view returns (int256);\\r\\n\\r\\n    function protocolFeeAccrued() external view returns (int256);\\r\\n\\r\\n    function setImplementation(address newImplementation) external;\\r\\n\\r\\n    function addMarket(address market) external;\\r\\n\\r\\n    function approveSwapper(address underlying) external;\\r\\n\\r\\n    function collectProtocolFee() external;\\r\\n\\r\\n    function claimVenusLp(address account) external;\\r\\n\\r\\n    function claimVenusTrader(address account) external;\\r\\n\\r\\n    struct OracleSignature {\\r\\n        bytes32 oracleSymbolId;\\r\\n        uint256 timestamp;\\r\\n        uint256 value;\\r\\n        uint8 v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(address underlying, uint256 amount, OracleSignature[] memory oracleSignatures) external payable;\\r\\n\\r\\n    function removeLiquidity(address underlying, uint256 amount, OracleSignature[] memory oracleSignatures) external;\\r\\n\\r\\n    function addMargin(address underlying, uint256 amount, OracleSignature[] memory oracleSignatures) external payable;\\r\\n\\r\\n    function removeMargin(address underlying, uint256 amount, OracleSignature[] memory oracleSignatures) external;\\r\\n\\r\\n    function trade(string memory symbolName, int256 tradeVolume, OracleSignature[] memory oracleSignatures) external;\\r\\n\\r\\n    function liquidate(uint256 pTokenId, OracleSignature[] memory oracleSignatures) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/pool/PoolStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport '../utils/Admin.sol';\\r\\n\\r\\nabstract contract PoolStorage is Admin {\\r\\n\\r\\n    // admin will be truned in to Timelock after deployment\\r\\n\\r\\n    event NewImplementation(address newImplementation);\\r\\n\\r\\n    event NewProtocolFeeCollector(address newProtocolFeeCollector);\\r\\n\\r\\n    bool internal _mutex;\\r\\n\\r\\n    modifier _reentryLock_() {\\r\\n        require(!_mutex, 'Pool: reentry');\\r\\n        _mutex = true;\\r\\n        _;\\r\\n        _mutex = false;\\r\\n    }\\r\\n\\r\\n    address public implementation;\\r\\n\\r\\n    address public protocolFeeCollector;\\r\\n\\r\\n    // underlying => vToken, supported markets\\r\\n    mapping (address => address) public markets;\\r\\n\\r\\n    struct LpInfo {\\r\\n        address vault;\\r\\n        int256 amountB0;\\r\\n        int256 liquidity;\\r\\n        int256 cumulativePnlPerLiquidity;\\r\\n    }\\r\\n\\r\\n    // lTokenId => LpInfo\\r\\n    mapping (uint256 => LpInfo) public lpInfos;\\r\\n\\r\\n    struct TdInfo {\\r\\n        address vault;\\r\\n        int256 amountB0;\\r\\n    }\\r\\n\\r\\n    // pTokenId => TdInfo\\r\\n    mapping (uint256 => TdInfo) public tdInfos;\\r\\n\\r\\n    int256 public liquidity;\\r\\n\\r\\n    int256 public lpsPnl;\\r\\n\\r\\n    int256 public cumulativePnlPerLiquidity;\\r\\n\\r\\n    int256 public protocolFeeAccrued;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/INameVersion.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface INameVersion {\\r\\n\\r\\n    function nameId() external view returns (bytes32);\\r\\n\\r\\n    function versionId() external view returns (bytes32);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/IAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IAdmin {\\r\\n\\r\\n    event NewAdmin(address indexed newAdmin);\\r\\n\\r\\n    function admin() external view returns (address);\\r\\n\\r\\n    function setAdmin(address newAdmin) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/Admin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport './IAdmin.sol';\\r\\n\\r\\nabstract contract Admin is IAdmin {\\r\\n\\r\\n    address public admin;\\r\\n\\r\\n    modifier _onlyAdmin_() {\\r\\n        require(msg.sender == admin, 'Admin: only admin');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor () {\\r\\n        admin = msg.sender;\\r\\n        emit NewAdmin(admin);\\r\\n    }\\r\\n\\r\\n    function setAdmin(address newAdmin) external _onlyAdmin_ {\\r\\n        admin = newAdmin;\\r\\n        emit NewAdmin(newAdmin);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newProtocolFeeCollector\",\"type\":\"address\"}],\"name\":\"NewProtocolFeeCollector\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativePnlPerLiquidity\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amountB0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"liquidity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cumulativePnlPerLiquidity\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpsPnl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeAccrued\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newProtocolFeeCollector\",\"type\":\"address\"}],\"name\":\"setProtocolFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tdInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amountB0\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Pool", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x1c71bb43d1fba3e3966af422bb2e7a18d7679799", "SwarmSource": ""}