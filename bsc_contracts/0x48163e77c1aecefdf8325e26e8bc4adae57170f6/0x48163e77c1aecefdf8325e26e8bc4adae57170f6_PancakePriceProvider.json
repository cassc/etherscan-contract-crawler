{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/providers/PancakePriceProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./PriceProvider.sol\\\";\\r\\nimport \\\"../interfaces/ICoinFiatBoard.sol\\\";\\r\\nimport \\\"../interfaces/IPancakeGetter.sol\\\";\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\n\\r\\ncontract PancakePriceProvider is PriceProvider {\\r\\n    ///https://docs.pancakeswap.finance/developers/smart-contracts/pancakeswap-exchange/v2-contracts\\r\\n    address public immutable PANCAKE_V2FACTORY;\\r\\n    uint256 public immutable DEFAULT_DECIMALS;\\r\\n    address private immutable ZERO_VALUE =\\r\\n        0x0000000000000000000000000000000000000000;\\r\\n    uint256 private immutable k = 10 ** 18;\\r\\n\\r\\n    mapping(address coinAddress => address routerTokenAddress) coinRouterToken;\\r\\n    mapping(address coinAddress => address pancakePair) pancakePair;\\r\\n\\r\\n    error RouterTokenDoesNotExistInOracle(address token);\\r\\n    error CantFindPancakePair(address tokenA, address tokenB);\\r\\n\\r\\n    event CoinPairSet(address coin, address pair, address caller);\\r\\n    event CoinPairRevoked(address coin, address caller);\\r\\n    event CoinPancakePairUpdated(\\r\\n        address coinAddress,\\r\\n        address oldPair,\\r\\n        address updPair\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        address priceOracle,\\r\\n        uint256 providerNativeFiat,\\r\\n        address pancakeFactory\\r\\n    ) PriceProvider(priceOracle, providerNativeFiat) {\\r\\n        PANCAKE_V2FACTORY = pancakeFactory;\\r\\n        DEFAULT_DECIMALS = ICoinFiatBoard(ORACLE).defaultDecimals();\\r\\n    }\\r\\n\\r\\n    function setCoinRouterToken(\\r\\n        address coinAddress,\\r\\n        address routerToken\\r\\n    ) external onlyTechnicalRole {\\r\\n        _registerCoinPair(coinAddress, routerToken);\\r\\n    }\\r\\n\\r\\n    function revokeCoinRouterToken(\\r\\n        address coinAddress\\r\\n    ) external onlyTechnicalRole {\\r\\n        _revokeCoinPair(coinAddress);\\r\\n    }\\r\\n\\r\\n    function updatePancakePair(\\r\\n        address coinAddress\\r\\n    ) external onlyTechnicalRole returns (address) {\\r\\n        return _updatePancakePair(coinAddress);\\r\\n    }\\r\\n\\r\\n    function getCoinRouterToken(\\r\\n        address coinAddress\\r\\n    ) public view returns (address) {\\r\\n        return coinRouterToken[coinAddress];\\r\\n    }\\r\\n\\r\\n    function getPancakePair(address coinAddress) public view returns (address) {\\r\\n        return pancakePair[coinAddress];\\r\\n    }\\r\\n\\r\\n    function providerIncludesCoin(\\r\\n        address coinToCheck\\r\\n    ) public view override returns (bool isIncluded) {\\r\\n        isIncluded =\\r\\n            (coinRouterToken[coinToCheck] != address(0)) &&\\r\\n            (pancakePair[coinToCheck] != address(0));\\r\\n    }\\r\\n\\r\\n    function targetCoinPancakePrice(\\r\\n        address targetCoin\\r\\n    ) public view returns (uint256 pancakeCoinPrice) {\\r\\n        address pPair = pancakePair[targetCoin];\\r\\n        uint112 targetReserves;\\r\\n        uint112 routerReserves;\\r\\n\\r\\n        IPancakeGetter(pPair).token0() == targetCoin\\r\\n            ? (targetReserves, routerReserves, ) = IPancakeGetter(pPair)\\r\\n                .getReserves()\\r\\n            : (routerReserves, targetReserves, ) = IPancakeGetter(pPair)\\r\\n            .getReserves();\\r\\n\\r\\n        pancakeCoinPrice = uint256(\\r\\n            (routerReserves * k) /\\r\\n                _scaleAmount(\\r\\n                    targetReserves,\\r\\n                    IERC20(targetCoin).decimals(),\\r\\n                    IERC20(coinRouterToken[targetCoin]).decimals()\\r\\n                )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function routerTokenPriceInFiat(\\r\\n        address routerToken\\r\\n    ) public view returns (uint256 routerPriceInFiat) {\\r\\n        (, routerPriceInFiat) = IPriceOracle(ORACLE).getCoinPrice(\\r\\n            PROVIDER_FIAT,\\r\\n            routerToken,\\r\\n            ZERO_VALUE\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _getCoinPriceInProviderFiat(\\r\\n        address targetCoin\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            bool priceProvided,\\r\\n            uint256 priceInProviderFiat,\\r\\n            uint256 priceDecimals,\\r\\n            uint256 providerNativeFiat\\r\\n        )\\r\\n    {\\r\\n        providerNativeFiat = PROVIDER_FIAT;\\r\\n        priceDecimals = DEFAULT_DECIMALS;\\r\\n        priceProvided = true;\\r\\n\\r\\n        priceInProviderFiat =\\r\\n            (targetCoinPancakePrice(targetCoin) *\\r\\n                routerTokenPriceInFiat(coinRouterToken[targetCoin])) /\\r\\n            k;\\r\\n    }\\r\\n\\r\\n    function _registerCoinPair(\\r\\n        address coinAddress,\\r\\n        address routerToken\\r\\n    ) internal override {\\r\\n        if (!IPriceOracle(ORACLE).coinExistsInOracle(routerToken))\\r\\n            revert RouterTokenDoesNotExistInOracle(routerToken);\\r\\n\\r\\n        coinRouterToken[coinAddress] = routerToken;\\r\\n        emit CoinPairSet(coinAddress, routerToken, _msgSender());\\r\\n\\r\\n        _updatePancakePair(coinAddress);\\r\\n        if (pancakePair[coinAddress] == address(0))\\r\\n            revert CantFindPancakePair(coinAddress, routerToken);\\r\\n    }\\r\\n\\r\\n    function _revokeCoinPair(address coinAddress) internal override {\\r\\n        emit CoinPancakePairUpdated(\\r\\n            coinAddress,\\r\\n            pancakePair[coinAddress],\\r\\n            address(0)\\r\\n        );\\r\\n        emit CoinPairRevoked(coinAddress, _msgSender());\\r\\n\\r\\n        delete pancakePair[coinAddress];\\r\\n        delete coinRouterToken[coinAddress];\\r\\n    }\\r\\n\\r\\n    function _updatePancakePair(\\r\\n        address coinAddress\\r\\n    ) internal returns (address updPancakePair) {\\r\\n        address oldPair = pancakePair[coinAddress];\\r\\n        updPancakePair = IPancakeGetter(PANCAKE_V2FACTORY).getPair(\\r\\n            coinAddress,\\r\\n            coinRouterToken[coinAddress]\\r\\n        );\\r\\n        if (oldPair != updPancakePair) {\\r\\n            pancakePair[coinAddress] = updPancakePair;\\r\\n            emit CoinPancakePairUpdated(coinAddress, oldPair, updPancakePair);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _scaleAmount(\\r\\n        uint256 _amount,\\r\\n        uint256 _amountDecimals,\\r\\n        uint256 _decimalsToUse\\r\\n    ) internal pure returns (uint256) {\\r\\n        if (_amountDecimals < _decimalsToUse) {\\r\\n            return _amount * (10 ** (_decimalsToUse - _amountDecimals));\\r\\n        } else if (_amountDecimals > _decimalsToUse) {\\r\\n            return _amount / (10 ** (_amountDecimals - _decimalsToUse));\\r\\n        }\\r\\n        return _amount;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/providers/PriceProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IPriceOracle.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\ncontract PriceProvider is Context {\\r\\n    uint256 immutable PROVIDER_FIAT;\\r\\n    address ORACLE;\\r\\n\\r\\n    error AccessDenied(address deniedAccount);\\r\\n\\r\\n    event PriceOracleSet(address oracle, address caller);\\r\\n\\r\\n    modifier onlyTechnicalRole() {\\r\\n        if (!IPriceOracle(ORACLE).hasTechnicalRole(_msgSender()))\\r\\n            revert AccessDenied(_msgSender());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address priceOracle, uint256 providerNativeFiat) {\\r\\n        _setOracle(priceOracle);\\r\\n        PROVIDER_FIAT = providerNativeFiat;\\r\\n    }\\r\\n\\r\\n    function setOracle(address newPriceOracle) external onlyTechnicalRole {\\r\\n        _setOracle(newPriceOracle);\\r\\n    }\\r\\n\\r\\n    function providerFiat() external view returns (uint256) {\\r\\n        return PROVIDER_FIAT;\\r\\n    }\\r\\n\\r\\n    function getCoinPriceInProviderFiat(\\r\\n        address targetCoin\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bool priceProvided,\\r\\n            uint256 priceInProviderFiat,\\r\\n            uint256 priceDecimals,\\r\\n            uint256 providerNativeFiat\\r\\n        )\\r\\n    {\\r\\n        if (providerIncludesCoin(targetCoin))\\r\\n            (\\r\\n                priceProvided,\\r\\n                priceInProviderFiat,\\r\\n                priceDecimals,\\r\\n                providerNativeFiat\\r\\n            ) = _getCoinPriceInProviderFiat(targetCoin);\\r\\n    }\\r\\n\\r\\n    function providerIncludesCoin(\\r\\n        address coinToCheck\\r\\n    ) public view virtual returns (bool isIncluded) {}\\r\\n\\r\\n    function _getCoinPriceInProviderFiat(\\r\\n        address targetCoin\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (\\r\\n            bool priceProvided,\\r\\n            uint256 priceInProviderFiat,\\r\\n            uint256 priceDecimals,\\r\\n            uint256 providerNativeFiat\\r\\n        )\\r\\n    {}\\r\\n\\r\\n    function _registerCoinPair(\\r\\n        address coinAddress,\\r\\n        address pair\\r\\n    ) internal virtual {}\\r\\n\\r\\n    function _registerCoinPair(\\r\\n        address coinAddress,\\r\\n        string memory pair\\r\\n    ) internal virtual {}\\r\\n\\r\\n    function _registerCoinPair(\\r\\n        address coinAddress,\\r\\n        uint256 pair\\r\\n    ) internal virtual {}\\r\\n\\r\\n    function _revokeCoinPair(address coinAddress) internal virtual {}\\r\\n\\r\\n    function _setOracle(address newOracle) internal {\\r\\n        ORACLE = newOracle;\\r\\n        emit PriceOracleSet(newOracle, _msgSender());\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n    function hasTechnicalRole(address account) external view returns (bool);\\r\\n\\r\\n    function getPriceProvidersList() external view returns (address[] memory);\\r\\n\\r\\n    function numberOfProviders() external view returns (uint256);\\r\\n\\r\\n    function numberOfProvidersByFiat(\\r\\n        uint256 iso4217NumericCode\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getPriceProvidersListByFiat(\\r\\n        uint256 iso4217NumericCode\\r\\n    ) external view returns (address[] memory);\\r\\n\\r\\n    function coinExistsInOracle(\\r\\n        address coin\\r\\n    ) external view returns (bool isCoinExists);\\r\\n\\r\\n    function getCoinPrice(\\r\\n        uint256 fiatForPrice,\\r\\n        address targetCoin,\\r\\n        address relatedCoin\\r\\n    ) external view returns (bool priceProvided, uint256 price);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPancakeGetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPancakeGetter {\\r\\n    function getPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external view returns (address pair);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/ICoinFiatBoard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ICoinFiatBoard {\\r\\n    struct Coin {\\r\\n        string ticker;\\r\\n        address coinAddress;\\r\\n        address priceProvider;\\r\\n        uint256 staticPrice;\\r\\n        uint256 nativeFiat;\\r\\n    }\\r\\n\\r\\n    struct Fiat {\\r\\n        string currency;\\r\\n        uint256 numericCode;\\r\\n        string alphabeticCode;\\r\\n        Coin fiatCoinData;\\r\\n        /**\\r\\n        struct Coin for Fiat has such values :\\r\\n        {\\r\\n        string ticker //smart contract creates itself. by concatenation of \\\"fiatCoin\\\" & alphabeticCode (ex. \\r\\n                        USD will have ticker \\\"fiatCoinUSD\\\")\\r\\n        address coinAddress //zero address wich last three symbols are - numeric code of Fiat (ex.\\r\\n                        USD has numeric code 840, so the address has to \\r\\n                        be: 0x0000000000000000000000000000000000000840)\\r\\n        address priceProvider //ONLY Chainlink!!!\\r\\n        uint256 staticPrice //zero\\r\\n        uint256 nativeFiat //ONLY USD!!!\\r\\n        }\\r\\n         */\\r\\n    }\\r\\n\\r\\n    function getCoinConfig(\\r\\n        address coinAddress\\r\\n    ) external view returns (Coin memory);\\r\\n\\r\\n    function fiatDetails(\\r\\n        uint256 iso4217NumericCode\\r\\n    ) external view returns (Fiat memory);\\r\\n\\r\\n    function zeroValue() external view returns (address);\\r\\n\\r\\n    function defaultDecimals() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"providerNativeFiat\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pancakeFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deniedAccount\",\"type\":\"address\"}],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"CantFindPancakePair\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RouterTokenDoesNotExistInOracle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CoinPairRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CoinPairSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updPair\",\"type\":\"address\"}],\"name\":\"CoinPancakePairUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"PriceOracleSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANCAKE_V2FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetCoin\",\"type\":\"address\"}],\"name\":\"getCoinPriceInProviderFiat\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"priceProvided\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"priceInProviderFiat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerNativeFiat\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"}],\"name\":\"getCoinRouterToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"}],\"name\":\"getPancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providerFiat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinToCheck\",\"type\":\"address\"}],\"name\":\"providerIncludesCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isIncluded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"}],\"name\":\"revokeCoinRouterToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerToken\",\"type\":\"address\"}],\"name\":\"routerTokenPriceInFiat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"routerPriceInFiat\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerToken\",\"type\":\"address\"}],\"name\":\"setCoinRouterToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetCoin\",\"type\":\"address\"}],\"name\":\"targetCoinPancakePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pancakeCoinPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"}],\"name\":\"updatePancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PancakePriceProvider", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000083b0564613b336925c10b901006c7f6f26ba9e6b0000000000000000000000000000000000000000000000000000000000000348000000000000000000000000ca143ce32fe78f1f7019d7d551a6402fc5350c73", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}