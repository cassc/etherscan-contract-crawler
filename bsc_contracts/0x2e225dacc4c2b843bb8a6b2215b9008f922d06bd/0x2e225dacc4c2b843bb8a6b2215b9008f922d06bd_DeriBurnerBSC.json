{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Burner/DeriBurnerBSC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport '../token/IERC20.sol';\\r\\nimport '../utils/Admin.sol';\\r\\n\\r\\ncontract DeriBurnerBSC is Admin {\\r\\n\\r\\n    address public constant deri = 0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5;\\r\\n    address public constant wormholeBSC = 0x15a5969060228031266c64274a54e02Fbd924AbF;\\r\\n    address public constant wormholeETH = 0x6874640cC849153Cb3402D193C33c416972159Ce;\\r\\n\\r\\n    constructor () {\\r\\n        IERC20(deri).approve(wormholeBSC, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function bridgeDeriToEthereumBurner() external _onlyAdmin_ {\\r\\n        uint256 balance = IERC20(deri).balanceOf(address(this));\\r\\n        if (balance != 0) {\\r\\n            IWormhole(wormholeBSC).freeze(balance, 1, wormholeETH);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ninterface IWormhole {\\r\\n    function freeze(uint256 amount, uint256 toChainId, address toWormhole) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/Admin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport './IAdmin.sol';\\r\\n\\r\\nabstract contract Admin is IAdmin {\\r\\n\\r\\n    address public admin;\\r\\n\\r\\n    modifier _onlyAdmin_() {\\r\\n        require(msg.sender == admin, 'Admin: only admin');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor () {\\r\\n        admin = msg.sender;\\r\\n        emit NewAdmin(admin);\\r\\n    }\\r\\n\\r\\n    function setAdmin(address newAdmin) external _onlyAdmin_ {\\r\\n        admin = newAdmin;\\r\\n        emit NewAdmin(newAdmin);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/IAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IAdmin {\\r\\n\\r\\n    event NewAdmin(address indexed newAdmin);\\r\\n\\r\\n    function admin() external view returns (address);\\r\\n\\r\\n    function setAdmin(address newAdmin) external;\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeDeriToEthereumBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deri\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormholeBSC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormholeETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DeriBurnerBSC", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}