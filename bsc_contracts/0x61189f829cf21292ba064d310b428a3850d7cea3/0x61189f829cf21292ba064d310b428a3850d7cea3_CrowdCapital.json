{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBEP20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\ncontract CrowdCapital {\r\n    IBEP20 public busdToken;\r\n    address public owner;\r\n    \r\n    constructor(address _busdToken) {\r\n        busdToken = IBEP20(_busdToken);\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function Register(uint256 _amount) external {\r\n        require(_amount > 0, \"Amount should be greater than zero\");\r\n        require(busdToken.allowance(msg.sender, address(this)) >= _amount, \"Token allowance too low\");\r\n        require(busdToken.transferFrom(msg.sender, owner, _amount), \"Token transfer failed\");\r\n    }\r\n     function UpgradeLevel(uint256 _amount) external {\r\n        require(_amount > 0, \"Amount should be greater than zero\");\r\n        require(busdToken.allowance(msg.sender, address(this)) >= _amount, \"Token allowance too low\");\r\n        require(busdToken.transferFrom(msg.sender, owner, _amount), \"Token transfer failed\");\r\n    }\r\n\r\n     function UpgradeMatrix(uint256 _amount) external {\r\n        require(_amount > 0, \"Amount should be greater than zero\");\r\n        require(busdToken.allowance(msg.sender, address(this)) >= _amount, \"Token allowance too low\");\r\n        require(busdToken.transferFrom(msg.sender, owner, _amount), \"Token transfer failed\");\r\n    }\r\n\r\n    function withdraw(address To,uint256 _amount) external onlyOwner {\r\n        require(_amount > 0, \"Amount should be greater than zero\");\r\n        require(busdToken.balanceOf(address(this)) >= _amount, \"Insufficient balance\");\r\n        require(busdToken.transferFrom(owner,To, _amount), \"Token transfer failed\");\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Invalid address\");\r\n        owner = newOwner;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_busdToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UpgradeLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UpgradeMatrix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"To\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrowdCapital", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e494cb413b4830b617d67e4a55356c0604a98df1671e463fdb6c0de9398129cc"}