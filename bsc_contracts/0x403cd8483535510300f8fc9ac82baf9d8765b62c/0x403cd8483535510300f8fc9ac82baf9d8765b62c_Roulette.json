{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Casino.sol\": {\r\n      \"content\": \"/*\\r\\n*\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\r\\n*\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\r\\n*\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\\r\\n*\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\\r\\n*\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\r\\n*\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\r\\n*/\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./Token.sol\\\";\\r\\n\\r\\ncontract Roulette is Ownable{\\r\\n\\r\\n    event RouletteGame (\\r\\n        uint NumberWin,\\r\\n        bool result,\\r\\n        uint tokensEarned\\r\\n    );\\r\\n\\r\\n    ERC20 private token;\\r\\n    address public tokenAddress;\\r\\n\\r\\n    function precioTokens(uint256 _numTokens) public pure returns (uint256){\\r\\n        return _numTokens * (0.0001 ether);\\r\\n    }\\r\\n\\r\\n    function tokenBalance(address _of) public view returns (uint256){\\r\\n        return token.balanceOf(_of);\\r\\n    }\\r\\n    constructor(){\\r\\n        token =  new ERC20(\\\"CHIPS\\\", \\\"chips\\\");\\r\\n        tokenAddress = address(token);\\r\\n        token.mint(100000000);\\r\\n    }\\r\\n\\r\\n    // Visualizacion del balance de ethers del Smart Contract\\r\\n    function balanceEthersSC() public view returns (uint256){\\r\\n        return address(this).balance / 10**18;\\r\\n    }\\r\\n\\r\\n    function getAdress() public view returns (address){\\r\\n        return address(token);\\r\\n\\r\\n    }\\r\\n\\r\\n     function compraTokens(uint256 _numTokens) public payable{\\r\\n\\t\\t// User registration\\r\\n        // Establishment of the cost of the tokens to be purchased\\r\\n        // Evaluation of the money that the client pays for the tokens\\r\\n        require(msg.value >= precioTokens(_numTokens), \\\"Compra menos tokens o paga con mas ethers\\\");\\r\\n        // Creation of new tokens in case there is not enough supply\\r\\n        if  (token.balanceOf(address(this)) < _numTokens){\\r\\n            token.mint(_numTokens*100000);\\r\\n        }\\r\\n\\t\\t // Refund of excess money\\r\\n        // Smart Contract returns the remaining amount\\r\\n        payable(msg.sender).transfer(msg.value - precioTokens(_numTokens));\\r\\n        // Envio de los tokens al cliente/usuario\\r\\n        token.transfer(address(this), msg.sender, _numTokens);\\r\\n    }\\r\\n\\r\\n    // Return of tokens to the Smart Contract\\r\\n    function devolverTokens(uint _numTokens) public payable {\\r\\n        // The number of tokens must be greater than 0\\r\\n        require(_numTokens > 0, \\\"Necesitas devolver un numero de tokens mayor a 0\\\");\\r\\n        // The user must prove they have the tokens they want to return\\r\\n        require(_numTokens <= token.balanceOf(msg.sender), \\\"No tienes los tokens que deseas devolver\\\");\\r\\n        // The user transfers the tokens to the Smart Contract\\r\\n        token.transfer(msg.sender, address(this), _numTokens);\\r\\n        // The Smart Contract sends the ethers to the user\\r\\n        payable(msg.sender).transfer(precioTokens(_numTokens)); \\r\\n    }\\r\\n\\r\\n    struct Bet {\\r\\n        uint tokensBet;\\r\\n        uint tokensEarned;\\r\\n        string game;\\r\\n    }\\r\\n\\r\\n    struct RouleteResult {\\r\\n        uint NumberWin;\\r\\n        bool result;\\r\\n        uint tokensEarned;\\r\\n    }\\r\\n\\r\\n    mapping(address => Bet []) historialApuestas;\\r\\n\\r\\n    function retirarEth(uint _numEther) public payable onlyOwner {\\r\\n        // El numero de tokens debe ser mayor a 0\\r\\n        require(_numEther > 0, \\\"Necesitas devolver un numero de tokens mayor a 0\\\");\\r\\n        // El usuario debe acreditar tener los tokens que quiere devolver\\r\\n        require(_numEther <= balanceEthersSC(), \\\"No tienes los tokens que deseas devolver\\\");\\r\\n        // Transfiere los ethers solicitados al owner del smart contract'\\r\\n        payable(owner()).transfer(_numEther);\\r\\n    }\\r\\n\\r\\n    function tuHistorial(address _propietario) public view returns(Bet [] memory){\\r\\n        return historialApuestas[_propietario];\\r\\n    }\\r\\n\\r\\n    function jugarRuleta(uint _start, uint _end, uint _tokensBet) public{\\r\\n        require(_tokensBet <= token.balanceOf(msg.sender));\\r\\n        require(_tokensBet > 0);\\r\\n        uint random = uint(uint(keccak256(abi.encodePacked(block.timestamp))) % 14);\\r\\n        uint tokensEarned = 0;\\r\\n        bool win = false;\\r\\n        token.transfer(msg.sender, address(this), _tokensBet);\\r\\n        if ((random <= _end) && (random >= _start)) {\\r\\n            win = true;\\r\\n            if (random == 0) {\\r\\n                tokensEarned = _tokensBet*14;\\r\\n            } else {\\r\\n                tokensEarned = _tokensBet * 2;\\r\\n            }\\r\\n            if  (token.balanceOf(address(this)) < tokensEarned){\\r\\n            token.mint(tokensEarned*100000);\\r\\n            }\\r\\n            token.transfer( address(this), msg.sender, tokensEarned);\\r\\n        }\\r\\n            addHistorial(\\\"Roulete\\\", _tokensBet, tokensEarned, msg.sender);\\r\\n            emit RouletteGame(random, win, tokensEarned);\\r\\n    }\\r\\n\\r\\n    function addHistorial(string memory _game, uint _tokensBet,  uint _tokenEarned, address caller) internal{\\r\\n        Bet memory apuesta = Bet(_tokensBet, _tokenEarned, _game);\\r\\n        historialApuestas[caller].push(apuesta);\\r\\n    }\\r\\n\\tfunction withdrawAllETH() external onlyOwner {\\r\\n        uint256 contractBalance = address(this).balance;\\r\\n        require(contractBalance > 0, \\\"Contract has no Ether balance\\\");\\r\\n        payable(owner()).transfer(contractBalance);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/Token.sol\": {\r\n      \"content\": \"/*\\r\\n*\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\r\\n*\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\r\\n*\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\\r\\n*\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\\r\\n*\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\r\\n*\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\r\\n*/\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    //Devuelve la cantidad de tokens existentes.\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    //Devuelve la cantidad de tokens que posee una `account`.\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /* Realiza una transferencia de tokens a un destinatario.\\r\\n    Devuelve un valor booleano que indica si la operacion tuvo exito. \\r\\n    Emite un evento {Transfer}. */\\r\\n    function transfer(address from, address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /* Se emite cuando se realiza una transferencia de tokens. \\r\\n    Ten en cuenta que `value` puede ser cero. */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n}\\r\\n\\r\\n// Smart Contract de los tokens ERC20\\r\\ncontract ERC20 is IERC20 {\\r\\n\\r\\n    // Estructuras de datos\\r\\n    mapping(address => uint256) private _balances;\\r\\n    \\r\\n    // Variables\\r\\n    uint256 private _totalSupply;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    address public owner;\\r\\n\\r\\n    modifier onlyOwner(address _direccion) {\\r\\n        require(_direccion == owner, \\\"No tienes permisos para ejecutar esta funcion.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* Establece el valor del nombre y el simbolo del token. \\r\\n    El valor por defecto de {decimaes} es 18. Para seleccionar un valor diferente para\\r\\n    {decimals} debemos remplazarlo. */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    // Devuelve el nombre del token.\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    // Devuelve el simbolo del token, normalmente una version mas corta del nombre.\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /* Devuelve el numero de decimales utilizados para obtener su representacion de usuario.\\r\\n    Por ejemplo, si `decimals` es igual a `2`, un saldo de `505` tokens deberia\\r\\n    mostrarse al usuario como `5.05` (`505 / 10 ** 2`).\\r\\n    Los tokens suelen optar por un valor de 18, imitando la relacion entre\\r\\n    Ether y Wei. Este es el valor que utiliza {ERC20}, a menos que esta funcion sea\\r\\n    sea anulada. */\\r\\n    function decimals() public view virtual returns (uint8) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    // Ver: {IERC20-totalSupply}.\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    // Ver: {IERC20-balanceOf}.\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /* Ver: {IERC20-transfer}.\\r\\n    Requisitos:\\r\\n    - `to` no puede ser la direccion cero.\\r\\n    - la persona que ejecuta debe tener un saldo de al menos `amount`. */\\r\\n    function transfer(address from,address to, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 amount) public virtual onlyOwner(msg.sender) returns (bool) {\\r\\n        _mint(msg.sender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /* Mueve `amount` de tokens del `sender` al `recipient`.\\r\\n    Esta funcion interna es equivalente a {transfer}, y puede utilizarse para\\r\\n    por ejemplo, implementar fees (tarifas) automaticas de tokens, etc.\\r\\n    Emite un evento {Transfer}.\\r\\n    Requisitos:\\r\\n    - `from` y `to` no pueden ser direcciones cero.\\r\\n    - `from` debe tener un saldo de al menos `amount`. */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n        }\\r\\n        _balances[to] += amount;\\r\\n        emit Transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /* Crea tokens de `amount` y las asigna a `account`, aumentando\\r\\n    el suministro total.\\r\\n    Emite un evento {Transfer} con \\\"from\\\" como direccion cero.\\r\\n    Requisitos:\\r\\n    - `account` no puede ser la direccion cero. */\\r\\n    function _mint(address account, uint256 amount) internal virtual{\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NumberWin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensEarned\",\"type\":\"uint256\"}],\"name\":\"RouletteGame\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balanceEthersSC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokens\",\"type\":\"uint256\"}],\"name\":\"compraTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokens\",\"type\":\"uint256\"}],\"name\":\"devolverTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensBet\",\"type\":\"uint256\"}],\"name\":\"jugarRuleta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokens\",\"type\":\"uint256\"}],\"name\":\"precioTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numEther\",\"type\":\"uint256\"}],\"name\":\"retirarEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_propietario\",\"type\":\"address\"}],\"name\":\"tuHistorial\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokensBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensEarned\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"game\",\"type\":\"string\"}],\"internalType\":\"struct Roulette.Bet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Roulette", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}