{"SourceCode": "// SPDX-License-Identifier: UNLICENSED   \r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\npragma solidity ^0.6.12;\r\ninterface IRewardsRepository {\r\n    function withdraw(IBEP20 _token, address _recipient) external returns(uint256 _balance);\r\n}\r\n\r\npragma solidity ^0.6.12;\r\n\r\ncontract RewardsRepository  {\r\n\r\n    address public owner;\r\n    address public operator;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner || msg.sender == operator, \"DENIED\");\r\n        _;\r\n\r\n    }\r\n    constructor(address __owner,address _operator) public {\r\n        owner = __owner;\r\n        operator = _operator;\r\n    }\r\n\r\n    receive() external payable {} \r\n\r\n    function withdraw(IBEP20 _token, address _recipient) public onlyOwner() returns(uint256 _balance) {\r\n        _balance = _token.balanceOf(address(this));\r\n        _token.transfer(_recipient, _balance);\r\n    }\r\n\r\n    function transferOwner(address newowner) public onlyOwner() returns(bool){\r\n        owner = newowner;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value:amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value:weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address PancakePair);\r\n}\r\n\r\ninterface IPair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function factory() external view returns (address);\r\n}\r\n\r\ncontract PancakeTool {\r\n    address public PancakePair;\r\n    IRouter internal PancakeV2Router;\r\n\r\n    function initIRouter(address _router) internal {\r\n        PancakeV2Router = IRouter(_router);\r\n        PancakePair = IFactory(PancakeV2Router.factory()).createPair(\r\n            address(this),\r\n            PancakeV2Router.WETH()\r\n        );\r\n    }\r\n\r\n    function swapTokensForTokens(\r\n        uint256 tokenAmount,\r\n        address tokenDesireAddress\r\n    ) internal {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = PancakeV2Router.WETH();\r\n        path[2] = tokenDesireAddress;\r\n        PancakeV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForETH(uint256 amountDesire, address to) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = PancakeV2Router.WETH();\r\n        PancakeV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountDesire,\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getPoolInfo(address _pair)\r\n        public\r\n        view\r\n        returns (uint112 WETHAmount, uint112 TOKENAmount)\r\n    {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = IPair(_pair)\r\n            .getReserves();\r\n        WETHAmount = _reserve1;\r\n        TOKENAmount = _reserve0;\r\n        if (IPair(PancakePair).token0() == PancakeV2Router.WETH()) {\r\n            WETHAmount = _reserve0;\r\n            TOKENAmount = _reserve1;\r\n        }\r\n    }\r\n\r\n    function getPrice4ETH(uint256 amountDesire)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (uint112 WETHAmount, uint112 TOKENAmount) = getPoolInfo(PancakePair);\r\n        return (WETHAmount * amountDesire) / TOKENAmount;\r\n    }\r\n\r\n    function getLPTotal(address user,address _pair) internal view returns (uint256) {\r\n        return IBEP20(_pair).balanceOf(user);\r\n    }\r\n\r\n    function getTotalSupply(address _pair) internal view returns (uint256) {\r\n        return IBEP20(_pair).totalSupply();\r\n    }\r\n}\r\n\r\ncontract TokenDao is Context, IBEP20, Ownable, PancakeTool {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint8 public _decimals;\r\n    string public _symbol;\r\n    string public _name;\r\n\r\n    address private _PancakeRouter;\r\n    address[] private _lockAddress;\r\n    address private _making;\r\n\r\n    uint256 private _cPercent;\r\n    uint256 private rewardR;\r\n\r\n    uint256 private divBase;\r\n    uint256 private size;\r\n\r\n    uint256 private _maxDeals;\r\n    uint256 private _maxHold;\r\n\r\n    uint256 private rewardMin;\r\n    uint256 private mustRemain;\r\n    uint256 private mustRemainBase;\r\n    address public rewardPair;\r\n\r\n    mapping(address => bool) private tokenHold;\r\n    address[] private tokenHolders;\r\n\r\n    address internal manager;\r\n    uint256 internal managerR;\r\n    uint256 uRewardsInterval;\r\n    mapping(address => uint256) public uRewardsLockTime;\r\n\r\n    mapping(address => address) public upline;\r\n    mapping(address => uint256) public inviterTotalFee;\r\n    uint256 public inviteR;\r\n    uint256 public uplevel;\r\n\r\n    mapping(address => bool) public isRouter;\r\n    mapping(address => bool) public checkedIsNotRouter;\r\n    mapping(address => bool) public checkedIsNotPair;\r\n    mapping(address => uint256) public _totalLp;\r\n    mapping(address => bool) public isPair;\r\n    mapping(address => address) public otherToken;\r\n    address[] public pairKey;\r\n    mapping(address=>uint256) public tradeLockTime;\r\n    uint256 public tradeLockInterval;\r\n\r\n    mapping(address => bool) internal _excludes;\r\n    bool public startF;\r\n\r\n    struct Epoch{\r\n        uint256 epochRewards;\r\n        uint256 length;\r\n        address[] members;\r\n        uint256[] timestamps;\r\n        mapping(uint256=>address) idMembers;    // timestamp=>user\r\n        mapping(address=>uint256) membersId;    // user=>timestamp\r\n    }\r\n\r\n    struct Lottery {\r\n        uint256 startEpoch;\r\n        uint256 interval;\r\n        uint256 length;\r\n        uint256 currentEpoch;\r\n        uint256 nextEpoch;\r\n        mapping(uint256=>Epoch) epoch;\r\n        uint256[] epochTimestamps;\r\n        uint256 epochLength;\r\n        uint256 rewardNum;\r\n        uint256 totalRewards;\r\n    }\r\n\r\n    Lottery public lottery;\r\n    \r\n    uint256 internal lotteryR;\r\n    IRewardsRepository public LRewardsRepository;\r\n\r\n    struct LockRE {\r\n        uint256 start;\r\n        uint256 lock;\r\n        uint256 lockInterval;\r\n        uint256 open;\r\n        uint256 openInterval;\r\n        uint256 next;\r\n        uint256 epochInterval;\r\n        bool enable;\r\n    }\r\n\r\n    LockRE lockRe;\r\n\r\n    event RewardLogs(address indexed account, uint256 amount);\r\n\r\n    mapping(address => bool) private blackList;\r\n\r\n    constructor(\r\n        string memory __name,\r\n        string memory __symbol,\r\n        uint8 __decimals,\r\n        address _manager,\r\n        uint256 _inviteR,  \r\n        uint256 _uplevel,   \r\n        address _router, \r\n        address _usd \r\n    ) public {\r\n        _name = __name;\r\n        _symbol = __symbol;\r\n        _decimals = __decimals;\r\n        size = 1 * 10**uint256(_decimals);\r\n        _maxDeals = 200 * size;\r\n        _maxHold = 1000 * size;\r\n        rewardMin = 100 * size;\r\n        _totalSupply = 390000 * size;\r\n\r\n        // \r\n        _cPercent = 500;   \r\n        lotteryR = 100;    \r\n        rewardR = 1000;   \r\n        managerR = 3670;    \r\n        divBase = 10000;     \r\n\r\n        mustRemain = 1;    \r\n        mustRemainBase = 10000;\r\n\r\n        manager = _manager;\r\n        \r\n        uRewardsInterval = 86400;         \r\n        tradeLockInterval = 60; \r\n\r\n        inviteR = _inviteR;\r\n        uplevel = _uplevel;\r\n\r\n        uint256 _current = uint256(block.timestamp);\r\n              \r\n        lottery.interval = 86400; \r\n        lottery.epochLength = 1000;  \r\n        lottery.rewardNum = 10;   \r\n        _updateLottery(_current);\r\n\r\n        lockRe.start = _current;\r\n        lockRe.lockInterval = 172800;     \r\n        lockRe.openInterval = 3;  \r\n        lockRe.epochInterval = lockRe.lockInterval.add(lockRe.openInterval);\r\n        _updateLockRe(lockRe.start);\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        tokenHold[msg.sender] = true;\r\n        _making = msg.sender;\r\n\r\n        _PancakeRouter = _router;\r\n        initIRouter(_PancakeRouter);\r\n        rewardPair = IFactory(PancakeV2Router.factory()).createPair(\r\n            address(this),\r\n            _usd\r\n        );\r\n        _approve(address(this), _PancakeRouter, ~uint256(0));\r\n        _approve(owner(), _PancakeRouter, ~uint256(0));\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n        LRewardsRepository = IRewardsRepository(address(new RewardsRepository(msg.sender, address(this))));\r\n\r\n        checkedIsNotPair[msg.sender] = true;\r\n        checkedIsNotRouter[msg.sender] = true;\r\n        checkedIsNotPair[manager] = true;\r\n        checkedIsNotRouter[manager] = true;\r\n        checkedIsNotPair[address(this)] = true;\r\n        checkedIsNotRouter[address(this)] = true;\r\n        checkedIsNotPair[_usd] = true;\r\n        checkedIsNotRouter[_usd] = true;\r\n        checkedIsNotPair[_router] = true;\r\n        checkedIsNotPair[address(LRewardsRepository)];\r\n        checkedIsNotRouter[address(LRewardsRepository)];\r\n\r\n        isRouter[_router] = true;\r\n        isPair[PancakePair] = true;\r\n\r\n        _excludes[address(LRewardsRepository)] = true;\r\n        _excludes[msg.sender] = true;\r\n        _excludes[manager] = true;\r\n    }\r\n\r\n    modifier checkIsRouter(address _sender) {\r\n        {\r\n            if (!isRouter[_sender] && !checkedIsNotRouter[_sender]) {\r\n                if (address(_sender).isContract()) {\r\n                    IRouter _routerCheck = IRouter(\r\n                        _sender\r\n                    );\r\n                    try _routerCheck.WETH() returns (address) {\r\n                        try _routerCheck.factory() returns (address) {\r\n                            isRouter[_sender] = true;\r\n                        } catch {\r\n                            checkedIsNotRouter[_sender] = true;\r\n                        }\r\n                    } catch {\r\n                        checkedIsNotRouter[_sender] = true;\r\n                    }\r\n                } else {\r\n                    checkedIsNotRouter[_sender] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    modifier checkIsPair(address _sender) {\r\n        {\r\n            if (!isPair[_sender] && !checkedIsNotPair[_sender]) {\r\n                if (_sender.isContract()) {\r\n                    IPair _pairCheck = IPair(_sender);\r\n                    try _pairCheck.token0() returns (address) {\r\n                        try _pairCheck.token1() returns (address){\r\n                            try _pairCheck.factory() returns (address) {\r\n                                address _token0 = _pairCheck.token0();\r\n                                address _token1 = _pairCheck.token1();\r\n                                address this_token = address(this) == _token0 ? _token0 : address(this) == _token1 ? _token1 : address(0);\r\n                                if(this_token != address(0)) {\r\n\r\n                                    _updatePairStatus(_sender, true);\r\n                                    otherToken[_sender] = address(this) == _token0 ? _token1 : address(this) == _token1 ? _token0: address(0);\r\n                                } else{\r\n                                   checkedIsNotPair[_sender] = true; \r\n                                }\r\n\r\n                            } catch {\r\n                                checkedIsNotPair[_sender] = true;\r\n                            }\r\n                        } catch {\r\n                            checkedIsNotPair[_sender] = true;\r\n                        }\r\n\r\n                    } catch {\r\n                        checkedIsNotPair[_sender] = true;\r\n                    }\r\n                } else {\r\n                    checkedIsNotPair[_sender] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external override checkIsPair(msg.sender) checkIsPair(recipient)\r\n        returns (bool)\r\n    {\r\n        if (!Address.isContract(address(msg.sender)) && address(msg.sender) != owner() && !_excludes[msg.sender] && startF) {\r\n            require(\r\n                amount <= _balances[address(msg.sender)].mul(mustRemainBase.sub(mustRemain)).div(mustRemainBase)\r\n            );\r\n        }\r\n\r\n        _setUpline(recipient, msg.sender);\r\n        \r\n        _transfer(_msgSender(), recipient, amount, true);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        _updateTotalLp();\r\n        return true;\r\n    }\r\n\r\n    function setStartF(bool _enable) public returns(bool){\r\n        require(msg.sender == manager, \"TokenERR\");\r\n        startF = _enable;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override \r\n    checkIsPair(msg.sender) checkIsPair(sender) checkIsPair(recipient) \r\n    returns (bool) {\r\n        if (!address(sender).isContract() && Address.isContract(address(msg.sender)) && sender != owner() && !_excludes[sender] && startF) {\r\n            require(amount <= _balances[sender].mul(mustRemainBase.sub(mustRemain)).div(mustRemainBase));\r\n        }\r\n        if(startF && !address(sender).isContract() && isPair[recipient]&& sender != owner() && !_excludes[sender]){\r\n            uint256 current = block.timestamp;\r\n            require(tradeLockTime[sender] < current, \"SELL BANNED NOW!! NEED TO WAIT FOR NEXTTIME!\");\r\n            tradeLockTime[sender] = current.add(tradeLockInterval);\r\n        }\r\n\r\n        _transfer(sender, recipient, amount, false);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"BEP20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"BEP20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burn `amount` tokens and decreasing the total supply.\r\n     */\r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool isT\r\n    ) \r\n    checkIsRouter(sender) checkIsRouter(recipient) checkIsRouter(msg.sender) \r\n    internal {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n        uint256 current = block.timestamp;\r\n\r\n        _checkBefore(current);\r\n        address user = isRouter[sender] || isPair[sender]  ?isRouter[recipient] || isPair[recipient]   ? address(0) : recipient  : sender;\r\n\r\n        _beforeTransfer(sender, recipient, amount, user);        \r\n                \r\n        if(user != address(0) && blackList[user]){\r\n            require(isT && isPair[sender], \"You're banned\");\r\n        }\r\n\r\n        uint256 invite = 0;\r\n        uint256 rLottery = 0;\r\n        uint256 _cFee = 0;\r\n        if(startF && user != address(0) && user != owner() && !_excludes[user]){\r\n            rLottery = amount.mul(lotteryR).div(divBase);            \r\n            invite = upline[user] == address(0) ? 0 :  amount.mul(inviteR).div(divBase);\r\n            \r\n        }\r\n\r\n        if (startF && sender != owner()&& !_excludes[user]) {\r\n            _cFee = (amount / divBase) * _cPercent;\r\n        }\r\n\r\n        if(user == sender){\r\n            require(_balances[sender] >= amount.add(invite.add(rLottery.add(_cFee))), \"BEP20: transfer amount exceeds balance\");\r\n        } \r\n\r\n        _customTransfer(sender, recipient, amount);\r\n\r\n        _checkInvite(invite, user);\r\n        _checkRewards(_cFee, user);\r\n        _checkLottory(rLottery, user, current);\r\n        if(isPair[msg.sender]){\r\n            _afterTransfer(tx.origin, isT);\r\n        }\r\n        \r\n \r\n    }\r\n\r\n    function _beforeTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        address user\r\n    ) internal {\r\n        require(!blackList[sender], \"You're banned\");    \r\n        \r\n        if(!_excludes[user] && Address.isContract(msg.sender) && isPair[sender]  && _totalLp[sender] >  _getTotalLp(sender)){\r\n            require(lockRe.enable, \"Banned!\");\r\n        }\r\n        _updateTotalLp();\r\n\r\n        if (!tokenHold[recipient] && recipient == tx.origin) {\r\n            tokenHold[recipient] = true;\r\n            tokenHolders.push(recipient);\r\n        }\r\n\r\n        if (\r\n            _excludes[user] ||\r\n            !startF ||\r\n            sender == owner() ||\r\n            sender == address(this) ||\r\n            recipient == address(this)\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        if (sender == rewardPair && recipient == _PancakeRouter) {\r\n            uint256 aBalance = _balances[recipient] + amount;\r\n            require(\r\n                aBalance <= _maxHold,\r\n                \"The maximum number of holdings is 1000\"\r\n            );\r\n        } else if (sender == _PancakeRouter) {\r\n            uint256 aBalance = _balances[recipient] + amount;\r\n            require(\r\n                aBalance <= _maxHold,\r\n                \"The maximum number of holdings is 1000\"\r\n            );\r\n        } else if (recipient == rewardPair) {\r\n            require(amount <= _maxDeals, \"The maximum number of deals is 200\");\r\n        } else {\r\n            require(amount <= _maxDeals, \"The maximum number of deals is 200\");\r\n            uint256 aBalance = _balances[recipient] + amount;\r\n            require(\r\n                aBalance <= _maxHold,\r\n                \"The maximum number of holdings is 1000\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function _afterTransfer(address _user, bool isT) internal {\r\n        if(isT){\r\n            swapRewardAndsendes(_user);\r\n        }\r\n        \r\n    }\r\n\r\n    function swapRewardAndsendes(address _user) internal returns (bool) {\r\n        uint256 LPHolders = super.getLPTotal(_user, rewardPair);\r\n        if (_balances[address(this)] >= rewardMin && LPHolders >0) {\r\n            _tokenReward(_user);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _checkRewards(uint256 _cFee, address user) internal {\r\n        if(_cFee>0 && user != address(0) ){ \r\n            _customTransfer(user, address(this), _cFee);  \r\n        } \r\n    }\r\n\r\n    function _tokenReward(address _user) internal returns (bool) {\r\n        uint256 currenttime = block.timestamp;\r\n        uint256 cast = 0;\r\n        cast = cast.add(super.getLPTotal(_making, rewardPair));\r\n        cast = cast.add(super.getLPTotal(address(0x0), rewardPair));\r\n        for (uint256 i = 0; i < _lockAddress.length; i++) {\r\n            cast = cast.add(super.getLPTotal(_lockAddress[i], rewardPair));\r\n        }\r\n        uint256 reward = _balances[address(this)].mul(rewardR).div(divBase);\r\n        bool isLock = false;\r\n        for (\r\n            uint256 lockIndex = 0;\r\n            lockIndex < _lockAddress.length;\r\n            lockIndex++\r\n        ) {\r\n            if (_user == _lockAddress[lockIndex]) {\r\n                isLock = true;\r\n            }\r\n        }\r\n        if (\r\n            uRewardsLockTime[_user] <= currenttime &&\r\n            _user != address(0x0) &&\r\n            isLock == false\r\n        ) {\r\n            uint256 LPHolders = super.getLPTotal(_user, rewardPair);\r\n            if (LPHolders > 0) {\r\n                uint256 pool = super.getTotalSupply(rewardPair) - cast;\r\n                uint256 r = calculateReward(pool, reward, LPHolders);\r\n                _balances[address(this)] = _balances[address(this)].sub(\r\n                    r,\r\n                    \"BEP20: transfer amount exceeds balance\"\r\n                );\r\n                (uint256 rU, uint256 rT) = manager == address(0x0)\r\n                    ? (r, uint256(0x0))\r\n                    : (\r\n                        r.mul(divBase.sub(managerR)).div(divBase),\r\n                        r.mul(managerR).div(divBase)\r\n                    );\r\n                _balances[_user] = _balances[_user].add(rU);\r\n\r\n                if (rT > 0) {\r\n                    _balances[manager] = _balances[manager].add(rT);\r\n                    uRewardsLockTime[_user] = currenttime.add(uRewardsInterval);\r\n                }\r\n\r\n                emit Transfer(address(this), _user, rU);\r\n                emit RewardLogs(_user, rU);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _checkBefore(uint256 current) internal {\r\n        if(current >=lottery.nextEpoch) {\r\n            uint256 iBase= current.sub(lottery.nextEpoch).div(lottery.interval);\r\n            for(uint256 i=0; i<=iBase; i++) {\r\n            _updateLottery(lottery.nextEpoch);\r\n            }\r\n        }\r\n\r\n        if(current >= lockRe.next){\r\n            uint256 base = current.sub(lockRe.next).div(lockRe.epochInterval);\r\n            for(uint256 i=0; i<=base; i++){\r\n                _updateLockRe(lockRe.next);\r\n            }\r\n        }\r\n\r\n        lockRe.enable = current >= lockRe.lock && current < lockRe.open ? false :  current >= lockRe.open && current < lockRe.next ? true : false;\r\n    }\r\n\r\n    function _checkLottory(uint256 rLottery, address user,uint256 current) internal {\r\n\r\n        if(rLottery>0 && user != address(0)){\r\n                _customTransfer(user, address(LRewardsRepository), rLottery);\r\n                lottery.epoch[lottery.currentEpoch].epochRewards = lottery.epoch[lottery.currentEpoch].epochRewards.add(rLottery);\r\n                lottery.totalRewards = lottery.totalRewards.add(rLottery);\r\n                _checkLottery(current, user, lottery.epoch[lottery.currentEpoch].epochRewards, lottery.rewardNum);\r\n\r\n        }\r\n    }\r\n\r\n    function _checkInvite(uint256 invite, address user) internal {\r\n        if(invite >0 && user != address(0)) {\r\n            uint256 remain = _distributeInviteRewards(user, invite);\r\n            _customTransfer(user, address(this), remain); \r\n            \r\n        }\r\n    }\r\n\r\n    function calculateReward(\r\n        uint256 total,\r\n        uint256 reward,\r\n        uint256 holders\r\n    ) public view returns (uint256) {\r\n        return (reward * ((holders * size) / total)) / size;\r\n    }\r\n\r\n    function changeBad(address account, bool isBack)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        blackList[account] = isBack;\r\n        return true;\r\n    }\r\n\r\n    function changeRewardMin(uint256 amount) public onlyOwner returns (bool) {\r\n        rewardMin = amount;\r\n        return true;\r\n    }\r\n\r\n    function pushLockAddress(address lock) public onlyOwner returns (bool) {\r\n        _lockAddress.push(lock);\r\n        return true;\r\n    }\r\n\r\n    function viewLockAddress() public view returns (address[] memory) {\r\n        return _lockAddress;\r\n    }\r\n\r\n    function viewTokenHolders() public view returns (address[] memory) {\r\n        return tokenHolders;\r\n    }\r\n\r\n    function _setUpline(address _addr, address _up) internal {\r\n        if(_addr != address(0) && !_addr.isContract() && upline[_addr] == address(0) && _up !=address(0) && !_up.isContract() &&_balances[_addr] == 0){\r\n            upline[_addr] = _up;\r\n        }\r\n        \r\n    }\r\n\r\n    function _distributeInviteRewards(address _sender, uint256 _rewards) internal returns(uint256) {\r\n        address _upline = upline[_sender];\r\n        for(uint256 i=0; i<uplevel; i++) {\r\n            if(_upline != address(0)) {\r\n                _rewards = _rewards.div(2); \r\n                _customTransfer(_sender, _upline, _rewards); \r\n                _upline = upline[_upline];\r\n            }else{\r\n                break;\r\n            } \r\n        }\r\n\r\n        return _rewards;\r\n    }\r\n\r\n    function _customTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    event CheckEopochEvent(uint256 indexed currentTime, address indexed _user, uint256 _rewards, uint256 _rewardNum);\r\n    function _checkLottery(uint256 currentTime, address _user, uint256 _rewards, uint256 _rewardNum) internal {\r\n\r\n        if(currentTime >= lottery.currentEpoch && currentTime < lottery.nextEpoch && lottery.epoch[lottery.currentEpoch].length<lottery.epochLength) {\r\n            _addEpochMember(lottery.currentEpoch, _user, currentTime);\r\n            if( _balances[address(LRewardsRepository)] >= _rewards && lottery.epoch[lottery.currentEpoch].epochRewards >= _rewards && lottery.epoch[lottery.currentEpoch].length == lottery.epochLength && _rewardNum>0){\r\n                uint256 reward = _rewards.div(_rewardNum);\r\n                uint256 preIndex = lottery.epochLength.add(1);\r\n                uint256 rewardTl;\r\n                for(uint256 i=0;i<_rewardNum; i++) {\r\n                    uint256 index = _rand(lottery.epochLength);\r\n                    if(index == preIndex  || index >= lottery.epochLength){                        \r\n                        continue;\r\n                    }                    \r\n                    _customTransfer(address(LRewardsRepository), lottery.epoch[lottery.currentEpoch].members[index], reward);  \r\n                    rewardTl = rewardTl.add(reward);                \r\n                    preIndex = index;\r\n                    \r\n                }\r\n                if(rewardTl >= _rewards){\r\n                    rewardTl = _rewards;\r\n                }\r\n                lottery.epoch[lottery.currentEpoch].epochRewards = lottery.epoch[lottery.currentEpoch].epochRewards.sub(rewardTl);\r\n                lottery.totalRewards = lottery.totalRewards.sub(rewardTl);\r\n                _updateLottery(lottery.nextEpoch);\r\n                emit CheckEopochEvent(currentTime, _user,  _rewards,  _rewardNum);\r\n            }\r\n        } \r\n\r\n    }\r\n\r\n    function _addEpochMember(uint256 _epoch, address _user, uint256 _timestamp) internal {\r\n        lottery.epoch[_epoch].members.push(_user);\r\n        lottery.epoch[_epoch].timestamps.push(_timestamp);\r\n        lottery.epoch[_epoch].idMembers[_timestamp] = _user;\r\n        lottery.epoch[_epoch].membersId[_user] = _timestamp;\r\n        lottery.epoch[_epoch].length += 1;\r\n    }\r\n\r\n    event _UdateLotteryEvent(uint256 indexed preEpoch, uint256 indexed currentEpoch, uint256 indexed nextEpoch);\r\n    function _updateLottery(uint256 _epoch) internal {\r\n        uint256 currentTime = _epoch;\r\n        uint256 preEpoch = lottery.currentEpoch;\r\n\r\n        if(lottery.startEpoch == 0) {\r\n            lottery.startEpoch = currentTime;\r\n        }        \r\n        lottery.currentEpoch = currentTime;\r\n        lottery.epoch[currentTime].epochRewards = lottery.epoch[currentTime].epochRewards.add(lottery.epoch[preEpoch].epochRewards);\r\n        lottery.nextEpoch = lottery.currentEpoch.add(lottery.interval);\r\n        lottery.length += 1;\r\n        lottery.epochTimestamps.push(currentTime);\r\n        emit _UdateLotteryEvent(currentTime,lottery.currentEpoch, lottery.nextEpoch);\r\n    }\r\n\r\n    function _rand(uint256 _length) internal view returns(uint256) {\r\n        uint nonce = gasleft();\r\n        uint256 random = uint256(keccak256(abi.encodePacked(nonce, msg.sender, block.difficulty, block.timestamp)));\r\n        return random%_length;\r\n    }\r\n\r\n    function _updatePairStatus(address _pair, bool _isPair) internal {\r\n        isPair[_pair] = _isPair;\r\n\r\n        bool isInPairKey;\r\n        uint256 _pairIndex;\r\n        if (pairKey.length > 0) {\r\n            for (uint256 i = 0; i < pairKey.length; i++) {\r\n                if (pairKey[i] == _pair) {\r\n                    isInPairKey = true;\r\n                    _pairIndex = i;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_isPair) {\r\n            setTotalLp(_pair);\r\n            if (!isInPairKey) {\r\n                pairKey.push(_pair);\r\n            }\r\n        } else {\r\n            _totalLp[_pair] = 0;\r\n            if (isInPairKey) {\r\n                for (uint256 i = _pairIndex; i < pairKey.length; i++) {\r\n                    pairKey[i] = pairKey[i + 1];\r\n                }\r\n\r\n                pairKey.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    function setTotalLp(address _pair) public returns (bool) {\r\n        _totalLp[_pair] = _getTotalLp(_pair);\r\n        return true;\r\n    }\r\n\r\n    function _getTotalLp(address _pair) internal view returns (uint256) {\r\n        return IBEP20(_pair).totalSupply();\r\n    }\r\n\r\n    function _updateTotalLp() internal {\r\n        if (pairKey.length > 0) {\r\n            for (uint256 i = 0; i < pairKey.length; i++) {\r\n                _totalLp[pairKey[i]] = _getTotalLp(pairKey[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _updateLockRe(uint256 _start) internal {\r\n        lockRe.lock = _start;\r\n        lockRe.open = lockRe.lock.add(lockRe.lockInterval);\r\n        lockRe.next = lockRe.open.add(lockRe.openInterval);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"BEP20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            _msgSender(),\r\n            _allowances[account][_msgSender()].sub(\r\n                amount,\r\n                \"BEP20: burn amount exceeds allowance\"\r\n            )\r\n        );\r\n    }\r\n\r\n    function batchTransfer(uint256 amount, address[] memory to) public {\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            _transfer(_msgSender(), to[i], amount, false);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"__decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inviteR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_uplevel\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardNum\",\"type\":\"uint256\"}],\"name\":\"CheckEopochEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardLogs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"preEpoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentEpoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nextEpoch\",\"type\":\"uint256\"}],\"name\":\"_UdateLotteryEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LRewardsRepository\",\"outputs\":[{\"internalType\":\"contract IRewardsRepository\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holders\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBack\",\"type\":\"bool\"}],\"name\":\"changeBad\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeRewardMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkedIsNotPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkedIsNotRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"WETHAmount\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"TOKENAmount\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviteR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviterTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"otherToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lock\",\"type\":\"address\"}],\"name\":\"pushLockAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setStartF\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setTotalLp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startF\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeLockInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradeLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uRewardsLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uplevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"upline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewLockAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTokenHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenDao", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000001200000000000000000000000086a301ec6ca5083efcd9b08c3b5c7af8bf7e3eb400000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000000300000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000000000000000000000000000000000000000000a447265616d20706c616e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045241445400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aa47b6950a05385b09750f0a9d48ccddaaa3d80e08900f16ff5661b4dbea1ee0"}