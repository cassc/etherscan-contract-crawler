{"SourceCode": "{\"IERC20.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: GPLv3\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"Owner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Ownable  {\\r\\n    address public owner;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner , \\\"you are not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        owner = newOwner;\\r\\n    }\\r\\n\\r\\n}\"},\"Raajcontract.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Owner.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\nimport \\\"./Sponsor.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract Alightzone is  Ownable ,ReentrancyGuard ,Sponsor\\r\\n{\\r\\n\\r\\n    using SafeMath for uint256; \\r\\n    IERC20 public Token;\\r\\n    constructor ()  \\r\\n    {\\r\\n        Token =  IERC20(0xF67c737151dCf7641f3687BD641d070Df9D4634f);\\r\\n\\r\\n        poolAmount[1] = 30 ether;\\r\\n        poolAmount[2] = 21 ether;\\r\\n        poolAmount[3] = 4.8 ether;\\r\\n        poolAmount[4] = 12.5 ether;\\r\\n        poolAmount[5] = 24.7333333333 ether;\\r\\n\\r\\n        poolrepeat[1] = 1;\\r\\n        poolrepeat[2] = 2;\\r\\n        poolrepeat[3] = 50;\\r\\n        poolrepeat[4] = 400;\\r\\n        poolrepeat[5] = 6000;\\r\\n\\r\\n\\r\\n        DirectIncome[1] = 10 ether;\\r\\n        DirectIncome[2] = 3.5 ether;\\r\\n        DirectIncome[3] = 1 ether;\\r\\n        DirectIncome[4] = 7 ether;\\r\\n        DirectIncome[5] = 0.4583332 ether;\\r\\n        DirectIncome[6] = 1.4583332 ether;\\r\\n        DirectIncome[7] = 2.283854167 ether;\\r\\n        DirectIncome[8] = 6.533854167 ether;\\r\\n        DirectIncome[9] = 5.166666667 ether;\\r\\n        DirectIncome[10] = 18.5 ether;\\r\\n\\r\\n        InDirectIncome[1] = 0 ether;\\r\\n        InDirectIncome[2] = 10.5 ether;\\r\\n        InDirectIncome[3] = 5 ether;\\r\\n        InDirectIncome[4] = 5 ether;\\r\\n        InDirectIncome[5] = 1.0416668 ether;\\r\\n        InDirectIncome[6] = 1.0416668 ether;\\r\\n        InDirectIncome[7] = 0.9661458333 ether;\\r\\n        InDirectIncome[8] = 0.9661458333 ether;\\r\\n        InDirectIncome[9] = 0 ether;\\r\\n        InDirectIncome[10] = 0 ether;\\r\\n\\r\\n        owner = payable(msg.sender);\\r\\n        UserAddress30.push(owner);\\r\\n        Referrals30[owner].upline = owner;\\r\\n        UserAddress90.push(owner);\\r\\n        Referrals90[owner].upline = owner;\\r\\n        UserAddress350.push(owner);\\r\\n        Referrals350[owner].upline = owner;\\r\\n        UserAddressDirect.push(owner);\\r\\n        Direct_Referrals[owner].upline = owner;\\r\\n        \\r\\n    }\\r\\n         struct Userinfo \\r\\n    {\\r\\n            uint256 level;\\r\\n            uint256 pool;\\r\\n            uint256 lastUpdation;\\r\\n            uint256 directIncome;\\r\\n    }\\r\\n      \\r\\n      mapping(address =\\u003e Userinfo) public UsersInfo;\\r\\n      mapping(uint256 =\\u003e uint256) private DirectIncome;\\r\\n      mapping(uint256 =\\u003e uint256) private InDirectIncome;\\r\\n      mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) public poolrepeatation;\\r\\n      mapping(uint256 =\\u003e uint256) private poolAmount;\\r\\n      mapping(uint256 =\\u003e uint256) private poolrepeat;\\r\\n      mapping(address =\\u003e uint256) public Wallet;\\r\\n      \\r\\n\\r\\n\\r\\n    function Diposit_in_Community(address _upline) public nonReentrant \\r\\n    {\\r\\n        require(UsersInfo[msg.sender].pool == 0 , \\\"you already deposite\\\");\\r\\n        require(Is_Direct_Upline(_upline) == true , \\\"upline not found\\\");\\r\\n\\r\\n\\r\\n//........................................................................................upline.......................................\\r\\n            UserUplineList[_upline].push(msg.sender);\\r\\n            Direct_Referrals[_upline].referrals ++;\\r\\n            if(Direct_Referrals[_upline].direct \\u003c  2)\\r\\n            {\\r\\n                set_Direct_Upline(msg.sender, payable(_upline));\\r\\n                Direct_Referrals[_upline].direct += 1;\\r\\n                UserAddressDirect.push(msg.sender);\\r\\n                check_Ref_Direct[_upline].push(msg.sender);\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                (address add_One,address add_two )= check_DirectforUpline(_upline);\\r\\n            if(Direct_Referrals[add_One].direct \\u003c  2)\\r\\n            {\\r\\n                set_Direct_Upline(msg.sender, payable(add_One));\\r\\n                Direct_Referrals[add_One].direct += 1;\\r\\n                UserAddressDirect.push(msg.sender);\\r\\n                check_Ref_Direct[add_One].push(msg.sender);\\r\\n            }\\r\\n            else if (Direct_Referrals[add_two].direct \\u003c  2)\\r\\n            {\\r\\n                set_Direct_Upline(msg.sender, payable(add_two));\\r\\n                Direct_Referrals[add_two].direct += 1;\\r\\n                UserAddressDirect.push(msg.sender);\\r\\n                check_Ref_Direct[add_two].push(msg.sender);\\r\\n                Direct_Referrals[_upline].lastupline = msg.sender;\\r\\n            }\\r\\n            else \\r\\n            {\\r\\n                set_Direct_Upline(msg.sender, payable(Direct_Referrals[_upline].lastupline));\\r\\n                Direct_Referrals[Direct_Referrals[_upline].lastupline].direct += 1;\\r\\n                UserAddressDirect.push(msg.sender);\\r\\n                check_Ref_Direct[Direct_Referrals[_upline].lastupline].push(msg.sender);\\r\\n                Direct_Referrals[_upline].lastupline = msg.sender;                \\r\\n            }                      \\r\\n            }\\r\\n             Direct_Referrals[msg.sender].deposit_time = uint40(block.timestamp);        \\r\\n\\r\\n\\r\\n// .....................................................................2 Direct.........................................\\r\\n            address getaddress = Last_Ref30();\\r\\n            if(Referrals30[getaddress].direct \\u003c  2)\\r\\n            {\\r\\n                _setUpline30(msg.sender, payable(getaddress));\\r\\n                Referrals30[getaddress].direct += 1;\\r\\n                UserAddress30.push(msg.sender);\\r\\n                check_Ref_address30[getaddress].push(msg.sender);\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                ActiveID30++;\\r\\n                getaddress = Last_Ref30();\\r\\n                _setUpline30(msg.sender, payable(getaddress));\\r\\n                Referrals30[getaddress].direct += 1;\\r\\n                UserAddress30.push(msg.sender);   \\r\\n                check_Ref_address30[getaddress].push(msg.sender);          \\r\\n            }\\r\\n             Referrals30[msg.sender].deposit_time = uint40(block.timestamp);\\r\\n        \\r\\n// ...........................................................................User data.....................................\\r\\n       \\r\\n        UsersInfo[msg.sender].pool = 2;\\r\\n        UsersInfo[msg.sender].lastUpdation = uint40(block.timestamp);\\r\\n        UsersInfo[msg.sender].level = 3;\\r\\n        poolrepeatation[msg.sender][1] = 1;\\r\\n        Token.transferFrom(msg.sender,address(this),30 ether);\\r\\n\\r\\n\\r\\n\\r\\n        // ........................................................NoN working....................\\r\\n        Users30[msg.sender].L1 = ChakUpline30(msg.sender);\\r\\n        if(Users30[msg.sender].L2 != owner)\\r\\n        {\\r\\n            Users30[msg.sender].L2 = ChakUpline30(Users30[msg.sender].L1);\\r\\n        }\\r\\n        else{\\r\\n            Users30[msg.sender].L2 = owner;\\r\\n        }\\r\\n        if(Users30[msg.sender].L2 != owner)\\r\\n        {\\r\\n            Users30[msg.sender].L3 = ChakUpline30(Users30[msg.sender].L2);\\r\\n        }\\r\\n        else{\\r\\n            Users30[msg.sender].L3 = owner;\\r\\n        }\\r\\n        if(Users30[msg.sender].L3 != owner)\\r\\n        {\\r\\n            Users30[msg.sender].L4 = ChakUpline30(Users30[msg.sender].L3);\\r\\n        }\\r\\n        else{\\r\\n            Users30[msg.sender].L4 = owner;\\r\\n        }        \\r\\n        if(Users30[msg.sender].L4 != owner)\\r\\n        {\\r\\n            Users30[msg.sender].L5 = ChakUpline30(Users30[msg.sender].L4);\\r\\n        }\\r\\n        else{\\r\\n            Users30[msg.sender].L5 = owner;\\r\\n        } \\r\\n        if(Users30[msg.sender].L5 != owner)\\r\\n        {\\r\\n            Users30[msg.sender].L6 = ChakUpline30(Users30[msg.sender].L5);\\r\\n        }\\r\\n        else{\\r\\n            Users30[msg.sender].L6 = owner;\\r\\n        } \\r\\n        if(Users30[msg.sender].L6 != owner)\\r\\n        {\\r\\n            Users30[msg.sender].L7 = ChakUpline30(Users30[msg.sender].L6);\\r\\n        }\\r\\n        else{\\r\\n            Users30[msg.sender].L7 = owner;\\r\\n        }\\r\\n        if(Users30[msg.sender].L7 != owner)\\r\\n        {\\r\\n            Users30[msg.sender].L8 = ChakUpline30(Users30[msg.sender].L7);\\r\\n        }\\r\\n        else{\\r\\n            Users30[msg.sender].L8 = owner;\\r\\n        }\\r\\n        if(Users30[msg.sender].L8 != owner)\\r\\n        {\\r\\n            Users30[msg.sender].L9 = ChakUpline30(Users30[msg.sender].L8);\\r\\n        }\\r\\n        else{\\r\\n            Users30[msg.sender].L9 = owner;\\r\\n        }\\r\\n        if(Users30[msg.sender].L9 != owner)\\r\\n        {\\r\\n            Users30[msg.sender].L10 = ChakUpline30(Users30[msg.sender].L9);\\r\\n        }\\r\\n        else{\\r\\n            Users30[msg.sender].L10 = owner;\\r\\n        }\\r\\n\\r\\n// ...............................................................................Transfer Non working income.....................\\r\\n         uint256 t = 0.35 ether;\\r\\n        Token.transfer(Users30[msg.sender].L1,t);\\r\\n        Referrals30[Users30[msg.sender].L1].referralsAmount+= t;\\r\\n        Token.transfer(Users30[msg.sender].L2,t);\\r\\n        Referrals30[Users30[msg.sender].L2].referralsAmount+= t;\\r\\n        Token.transfer(Users30[msg.sender].L3,t);\\r\\n        Referrals30[Users30[msg.sender].L3].referralsAmount+= t;\\r\\n        Token.transfer(Users30[msg.sender].L4,t);\\r\\n        Referrals30[Users30[msg.sender].L4].referralsAmount+= t;\\r\\n        Token.transfer(Users30[msg.sender].L5,t);\\r\\n        Referrals30[Users30[msg.sender].L5].referralsAmount+= t;\\r\\n        Token.transfer(Users30[msg.sender].L6,t);\\r\\n        Referrals30[Users30[msg.sender].L6].referralsAmount+= t;\\r\\n        Token.transfer(Users30[msg.sender].L7,t);\\r\\n        Referrals30[Users30[msg.sender].L7].referralsAmount+= t;\\r\\n        Token.transfer(Users30[msg.sender].L8,t);\\r\\n        Referrals30[Users30[msg.sender].L8].referralsAmount+= t;\\r\\n        Token.transfer(Users30[msg.sender].L9,t);\\r\\n        Referrals30[Users30[msg.sender].L9].referralsAmount+= t;\\r\\n        Token.transfer(Users30[msg.sender].L10,t);\\r\\n        Referrals30[Users30[msg.sender].L10].referralsAmount+= t;\\r\\n\\r\\n\\r\\n// ......................................................................................working income...........................................\\r\\n\\r\\n\\r\\n            address f1 = Chak_Direct_Upline(msg.sender);\\r\\n            address f2 = Chak_Direct_Upline(f1);\\r\\n            Direct_Referrals[msg.sender].last_Direct_ref = f2;\\r\\n            Direct_Referrals[_upline].DirectAmount += 10 ether;\\r\\n            Direct_Referrals[f2].DirectAmount += 3.5 ether;\\r\\n            Token.transfer(_upline,10 ether);\\r\\n            Token.transfer(f2,3.5 ether);\\r\\n            Wallet[_upline] += 0;\\r\\n            Wallet[f2] += 10.5 ether;\\r\\n            UsersInfo[_upline].directIncome +=10 ether;\\r\\n            UsersInfo[f2].directIncome +=3.5 ether;\\r\\n            Token.transfer(owner,2.5 ether);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    function Upgrade_in_community ()  external nonReentrant\\r\\n    {\\r\\n        require(Direct_Referrals[msg.sender].direct \\u003e= 2,\\\"direct\\\");\\r\\n        require(isContract(msg.sender) == false ,\\\"this is contract\\\");\\r\\n        require(Wallet[msg.sender] \\u003e= poolAmount[UsersInfo[msg.sender].pool] , \\\"error\\\");\\r\\n        \\r\\n//....................................................................................................pool 3.....................................................................\\r\\n        if(UsersInfo[msg.sender].pool == 3)\\r\\n        {\\r\\n            if(Referrals90[msg.sender].deposit_time == 0)\\r\\n            {\\r\\n            address getaddress = Last_Ref90();\\r\\n            if(Referrals90[getaddress].direct \\u003c  2)\\r\\n            {\\r\\n                _setUpline90(msg.sender, payable(getaddress));\\r\\n                Referrals90[getaddress].direct += 1;\\r\\n                UserAddress90.push(msg.sender);\\r\\n                check_Ref_address90[getaddress].push(msg.sender);\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                ActiveID90++;\\r\\n                getaddress = Last_Ref90();\\r\\n                _setUpline90(msg.sender, payable(getaddress));\\r\\n                Referrals90[getaddress].direct += 1;\\r\\n                UserAddress90.push(msg.sender);   \\r\\n                check_Ref_address90[getaddress].push(msg.sender);          \\r\\n            }\\r\\n             Referrals90[msg.sender].deposit_time = uint40(block.timestamp);\\r\\n            }\\r\\n\\r\\n             Users90[msg.sender].L1 = ChakUpline90(msg.sender);\\r\\n        if(Users90[msg.sender].L2 != owner)\\r\\n        {\\r\\n            Users90[msg.sender].L2 = ChakUpline90(Users90[msg.sender].L1);\\r\\n        }\\r\\n        else{\\r\\n            Users90[msg.sender].L2 = owner;\\r\\n        }\\r\\n        if(Users90[msg.sender].L2 != owner)\\r\\n        {\\r\\n            Users90[msg.sender].L3 = ChakUpline90(Users90[msg.sender].L2);\\r\\n        }\\r\\n        else{\\r\\n            Users90[msg.sender].L3 = owner;\\r\\n        }\\r\\n        if(Users90[msg.sender].L3 != owner)\\r\\n        {\\r\\n            Users90[msg.sender].L4 = ChakUpline90(Users90[msg.sender].L3);\\r\\n        }\\r\\n        else{\\r\\n            Users90[msg.sender].L4 = owner;\\r\\n        }        \\r\\n        if(Users90[msg.sender].L4 != owner)\\r\\n        {\\r\\n            Users90[msg.sender].L5 = ChakUpline90(Users90[msg.sender].L4);\\r\\n        }\\r\\n        else{\\r\\n            Users90[msg.sender].L5 = owner;\\r\\n        } \\r\\n        if(Users90[msg.sender].L5 != owner)\\r\\n        {\\r\\n            Users90[msg.sender].L6 = ChakUpline90(Users90[msg.sender].L5);\\r\\n        }\\r\\n        else{\\r\\n            Users90[msg.sender].L6 = owner;\\r\\n        } \\r\\n        if(Users90[msg.sender].L6 != owner)\\r\\n        {\\r\\n            Users90[msg.sender].L7 = ChakUpline90(Users90[msg.sender].L6);\\r\\n        }\\r\\n        else{\\r\\n            Users90[msg.sender].L7 = owner;\\r\\n        }\\r\\n        if(Users90[msg.sender].L7 != owner)\\r\\n        {\\r\\n            Users90[msg.sender].L8 = ChakUpline90(Users90[msg.sender].L7);\\r\\n        }\\r\\n        else{\\r\\n            Users90[msg.sender].L8 = owner;\\r\\n        }\\r\\n        if(Users90[msg.sender].L8 != owner)\\r\\n        {\\r\\n            Users90[msg.sender].L9 = ChakUpline90(Users90[msg.sender].L8);\\r\\n        }\\r\\n        else{\\r\\n            Users90[msg.sender].L9 = owner;\\r\\n        }\\r\\n        if(Users90[msg.sender].L9 != owner)\\r\\n        {\\r\\n            Users90[msg.sender].L10 = ChakUpline90(Users90[msg.sender].L9);\\r\\n        }\\r\\n        else{\\r\\n            Users90[msg.sender].L10 = owner;\\r\\n        }\\r\\n            uint256 w = 0.04 ether;\\r\\n            Token.transfer(Users90[msg.sender].L1,w);\\r\\n            Referrals90[Users90[msg.sender].L1].referralsAmount+= w;\\r\\n            Token.transfer(Users90[msg.sender].L2,w);\\r\\n            Referrals90[Users90[msg.sender].L2].referralsAmount+= w;\\r\\n            Token.transfer(Users90[msg.sender].L3,w);\\r\\n            Referrals90[Users90[msg.sender].L3].referralsAmount+= w;\\r\\n            Token.transfer(Users90[msg.sender].L4,w);\\r\\n            Referrals90[Users90[msg.sender].L4].referralsAmount+= w;\\r\\n            Token.transfer(Users90[msg.sender].L5,w);\\r\\n            Referrals90[Users90[msg.sender].L5].referralsAmount+= w;\\r\\n            Token.transfer(Users90[msg.sender].L6,w);\\r\\n            Referrals90[Users90[msg.sender].L6].referralsAmount+= w;\\r\\n            Token.transfer(Users90[msg.sender].L7,w);\\r\\n            Referrals90[Users90[msg.sender].L7].referralsAmount+= w;\\r\\n            Token.transfer(Users90[msg.sender].L8,w);\\r\\n            Referrals90[Users90[msg.sender].L8].referralsAmount+= w;\\r\\n            Token.transfer(Users90[msg.sender].L9,w);\\r\\n            Referrals90[Users90[msg.sender].L9].referralsAmount+= w;\\r\\n            Token.transfer(Users90[msg.sender].L10,w);\\r\\n            Referrals90[Users90[msg.sender].L10].referralsAmount+= w;\\r\\n\\r\\n            Token.transfer(owner,0.4 ether);\\r\\n        }\\r\\n\\r\\n        if(UsersInfo[msg.sender].pool == 4)\\r\\n        {\\r\\n            if(Referrals350[msg.sender].deposit_time == 0)\\r\\n            {\\r\\n            address getaddress = Last_Ref350();\\r\\n            if(Referrals350[getaddress].direct \\u003c  2)\\r\\n            {\\r\\n                _setUpline350(msg.sender, payable(getaddress));\\r\\n                Referrals350[getaddress].direct += 1;\\r\\n                UserAddress350.push(msg.sender);\\r\\n                check_Ref_address350[getaddress].push(msg.sender);\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                ActiveID350++;\\r\\n                getaddress = Last_Ref350();\\r\\n                _setUpline350(msg.sender, payable(getaddress));\\r\\n                Referrals350[getaddress].direct += 1;\\r\\n                UserAddress350.push(msg.sender);   \\r\\n                check_Ref_address350[getaddress].push(msg.sender);          \\r\\n            }\\r\\n             Referrals350[msg.sender].deposit_time = uint40(block.timestamp);\\r\\n            }\\r\\n\\r\\n             Users350[msg.sender].L1 = ChakUpline350(msg.sender);\\r\\n        if(Users350[msg.sender].L2 != owner)\\r\\n        {\\r\\n            Users350[msg.sender].L2 = ChakUpline350(Users350[msg.sender].L1);\\r\\n        }\\r\\n        else{\\r\\n            Users350[msg.sender].L2 = owner;\\r\\n        }\\r\\n        if(Users350[msg.sender].L2 != owner)\\r\\n        {\\r\\n            Users350[msg.sender].L3 = ChakUpline350(Users350[msg.sender].L2);\\r\\n        }\\r\\n        else{\\r\\n            Users350[msg.sender].L3 = owner;\\r\\n        }\\r\\n\\r\\n        if(Users350[msg.sender].L3 != owner)\\r\\n        {\\r\\n            Users350[msg.sender].L4 = ChakUpline350(Users350[msg.sender].L3);\\r\\n        }\\r\\n        else{\\r\\n            Users350[msg.sender].L4 = owner;\\r\\n        }        \\r\\n\\r\\n        if(Users350[msg.sender].L4 != owner)\\r\\n        {\\r\\n            Users350[msg.sender].L5 = ChakUpline350(Users350[msg.sender].L4);\\r\\n        }\\r\\n        else{\\r\\n            Users350[msg.sender].L5 = owner;\\r\\n        } \\r\\n\\r\\n        if(Users350[msg.sender].L5 != owner)\\r\\n        {\\r\\n            Users350[msg.sender].L6 = ChakUpline350(Users350[msg.sender].L5);\\r\\n        }\\r\\n        else{\\r\\n            Users350[msg.sender].L6 = owner;\\r\\n        } \\r\\n        if(Users350[msg.sender].L6 != owner)\\r\\n        {\\r\\n            Users350[msg.sender].L7 = ChakUpline350(Users350[msg.sender].L6);\\r\\n        }\\r\\n        else{\\r\\n            Users350[msg.sender].L7 = owner;\\r\\n        }\\r\\n        if(Users350[msg.sender].L7 != owner)\\r\\n        {\\r\\n            Users350[msg.sender].L8 = ChakUpline350(Users350[msg.sender].L7);\\r\\n        }\\r\\n        else{\\r\\n            Users350[msg.sender].L8 = owner;\\r\\n        }\\r\\n        if(Users350[msg.sender].L8 != owner)\\r\\n        {\\r\\n            Users350[msg.sender].L9 = ChakUpline350(Users350[msg.sender].L8);\\r\\n        }\\r\\n        else{\\r\\n            Users350[msg.sender].L9 = owner;\\r\\n        }\\r\\n        if(Users350[msg.sender].L9 != owner)\\r\\n        {\\r\\n            Users350[msg.sender].L10 = ChakUpline350(Users350[msg.sender].L9);\\r\\n        }\\r\\n        else{\\r\\n            Users350[msg.sender].L10 = owner;\\r\\n        }\\r\\n            uint256 k = 0.075 ether;\\r\\n            Token.transfer(Users350[msg.sender].L1,k);\\r\\n            Referrals350[Users350[msg.sender].L1].referralsAmount+= k;\\r\\n            Token.transfer(Users350[msg.sender].L2,k);\\r\\n            Referrals350[Users350[msg.sender].L2].referralsAmount+= k;\\r\\n            Token.transfer(Users350[msg.sender].L3,k);\\r\\n            Referrals350[Users350[msg.sender].L3].referralsAmount+= k;\\r\\n            Token.transfer(Users350[msg.sender].L4,k);\\r\\n            Referrals350[Users350[msg.sender].L4].referralsAmount+= k;\\r\\n            Token.transfer(Users350[msg.sender].L5,k);\\r\\n            Referrals350[Users350[msg.sender].L5].referralsAmount+= k;\\r\\n            Token.transfer(Users350[msg.sender].L6,k);\\r\\n            Referrals350[Users350[msg.sender].L6].referralsAmount+= k;\\r\\n            Token.transfer(Users350[msg.sender].L7,k);\\r\\n            Referrals350[Users350[msg.sender].L7].referralsAmount+= k;\\r\\n            Token.transfer(Users350[msg.sender].L8,k);\\r\\n            Referrals350[Users350[msg.sender].L8].referralsAmount+= k;\\r\\n            Token.transfer(Users350[msg.sender].L9,k);\\r\\n            Referrals350[Users350[msg.sender].L9].referralsAmount+= k;\\r\\n            Token.transfer(Users350[msg.sender].L10,k);\\r\\n            Referrals350[Users350[msg.sender].L10].referralsAmount+= k;\\r\\n            Token.transfer(owner,1 ether);\\r\\n        }\\r\\n\\r\\n            if(UsersInfo[msg.sender].pool == 2)\\r\\n        {\\r\\n            Token.transfer(owner,3 ether);\\r\\n        }\\r\\n            if(UsersInfo[msg.sender].pool == 5)\\r\\n        {\\r\\n            Token.transfer(owner,1.066666667 ether);\\r\\n        }\\r\\n        \\r\\n        \\r\\n        // if(Direct_Referrals[msg.sender].last_Direct_ref == owner || block.timestamp \\u003e  UsersInfo[msg.sender].lastUpdation + 180 minutes )\\r\\n        // {\\r\\n        //     uint256 z = DirectIncome[UsersInfo[msg.sender].level];\\r\\n        //     uint256 x = DirectIncome[UsersInfo[msg.sender].level+1];\\r\\n        //     Direct_Referrals[owner].DirectAmount += z;\\r\\n        //     Direct_Referrals[owner].DirectAmount += x;\\r\\n        //     Token.transfer(owner, z);\\r\\n        //     Token.transfer(owner,x);\\r\\n        //     UsersInfo[owner].directIncome +=z;\\r\\n        //     UsersInfo[owner].directIncome +=x;\\r\\n        //     Wallet[owner] += InDirectIncome[UsersInfo[msg.sender].level];\\r\\n        //     Wallet[owner] += InDirectIncome[UsersInfo[msg.sender].level+1];  \\r\\n            \\r\\n        //     poolrepeatation[msg.sender][UsersInfo[msg.sender].pool]++;\\r\\n        //     Wallet[msg.sender] = Wallet[msg.sender].sub(poolAmount[UsersInfo[msg.sender].pool]);\\r\\n        //     if(poolrepeatation[msg.sender][UsersInfo[msg.sender].pool] \\u003c poolrepeat[UsersInfo[msg.sender].pool])\\r\\n        //     {\\r\\n        //         poolrepeatation[msg.sender][UsersInfo[msg.sender].pool]++;\\r\\n        //     }\\r\\n        //     else\\r\\n        //     {\\r\\n        //         UsersInfo[msg.sender].pool++;\\r\\n        //         UsersInfo[msg.sender].level += 2;\\r\\n        //         Direct_Referrals[msg.sender].last_Direct_ref = owner;\\r\\n        //     }\\r\\n        //     UsersInfo[msg.sender].lastUpdation = uint40(block.timestamp);\\r\\n        // }\\r\\n        // else\\r\\n        // {\\r\\n\\r\\n            address a = Direct_Referrals[msg.sender].last_Direct_ref;\\r\\n            address b = Chak_Direct_Upline(a);\\r\\n            address c = Chak_Direct_Upline(b);\\r\\n            address d=c;\\r\\n\\r\\n            uint256 p = DirectIncome[UsersInfo[msg.sender].level];\\r\\n            uint256 t =DirectIncome[UsersInfo[msg.sender].level+1];\\r\\n\\r\\n            Wallet[b] += InDirectIncome[UsersInfo[msg.sender].level];\\r\\n            Wallet[c] += InDirectIncome[UsersInfo[msg.sender].level+1];  \\r\\n\\r\\n            if(Wallet[b] \\u003e= 21 ether){\\r\\n            if(Direct_Referrals[b].referrals \\u003c 2)\\r\\n            {\\r\\n                 b = owner;\\r\\n            }}\\r\\n\\r\\n            if(Wallet[c] \\u003e= 21 ether){\\r\\n            if(Direct_Referrals[c].referrals \\u003c 2)\\r\\n            {\\r\\n                 c = owner;\\r\\n            }}      \\r\\n\\r\\n            Direct_Referrals[b].DirectAmount += p;\\r\\n            Direct_Referrals[c].DirectAmount += t;\\r\\n\\r\\n            Token.transfer(b,p);\\r\\n            Token.transfer(c,t);\\r\\n            UsersInfo[b].directIncome +=p;\\r\\n            UsersInfo[c].directIncome +=t;\\r\\n\\r\\n\\r\\n            \\r\\n            poolrepeatation[msg.sender][UsersInfo[msg.sender].pool]++;\\r\\n\\r\\n            Wallet[msg.sender] = Wallet[msg.sender].sub(poolAmount[UsersInfo[msg.sender].pool]);\\r\\n\\r\\n            if(poolrepeatation[msg.sender][UsersInfo[msg.sender].pool] \\u003c poolrepeat[UsersInfo[msg.sender].pool])\\r\\n            {\\r\\n                UsersInfo[msg.sender].lastUpdation = uint40(block.timestamp);\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                UsersInfo[msg.sender].pool++;\\r\\n                UsersInfo[msg.sender].level += 2;\\r\\n                Direct_Referrals[msg.sender].last_Direct_ref = d;\\r\\n            }    \\r\\n            UsersInfo[msg.sender].lastUpdation = uint40(block.timestamp);\\r\\n                   \\r\\n        // }\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n//................................................................................................Owner.....................................................\\r\\n\\r\\n\\r\\n    function Diposit_in_community_claim_owner_income (address [] calldata add) external onlyOwner \\r\\n    {\\r\\n        for (uint256 i; i \\u003c add.length; i++) {\\r\\n        require(block.timestamp \\u003e  UsersInfo[add[i]].lastUpdation + 30 days || add[i] == owner,\\\"error\\\");\\r\\n        uint256 z = Wallet[add[i]];\\r\\n        Token.transfer(owner, z);\\r\\n        Wallet[add[i]] = Wallet[add[i]]-z;\\r\\n        }\\r\\n    }\\r\\n\\r\\n        function changetoken(IERC20 _token) external onlyOwner \\r\\n    {\\r\\n        Token =_token;\\r\\n    }\\r\\n        \\r\\n\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"\\r\\n\\r\\n// SPDX-License-Identifier: GPLv3\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"Sponsor.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Owner.sol\\\";\\r\\n\\r\\n\\r\\ncontract  Sponsor is Ownable\\r\\n{\\r\\n\\r\\n\\r\\n        struct upline {\\r\\n        address  upline;\\r\\n        uint256  referrals;\\r\\n        uint256  referralsAmount;\\r\\n        uint40   deposit_time;\\r\\n        uint256  direct;\\r\\n        address lastupline;\\r\\n        address last_Direct_ref;\\r\\n        uint256 DirectAmount;\\r\\n    }\\r\\n\\r\\n    struct User \\r\\n    {\\r\\n        address L1;\\r\\n        address L2;\\r\\n        address L3;\\r\\n        address L4;\\r\\n        address L5;\\r\\n        address L6;\\r\\n        address L7;\\r\\n        address L8;\\r\\n        address L9;\\r\\n        address L10;\\r\\n    }\\r\\n\\r\\n\\r\\n      mapping(address =\\u003e upline) public Referrals30;\\r\\n      mapping(address =\\u003e upline) public Referrals90;\\r\\n      mapping(address =\\u003e upline) public Referrals350;\\r\\n      mapping(address =\\u003e upline) public Direct_Referrals;\\r\\n\\r\\n      mapping(address =\\u003e User) public Users30;\\r\\n      mapping(address =\\u003e User) public Users90;\\r\\n      mapping(address =\\u003e User) public Users350;\\r\\n\\r\\n      uint256 public total_users30;\\r\\n      uint256 public total_users90;\\r\\n      uint256 public total_users350;\\r\\n      uint256 public Direct_total_users;\\r\\n\\r\\n      mapping(address =\\u003e address []) internal UserUplineList;\\r\\n      \\r\\n      mapping(address =\\u003e address[]) public check_Ref_address30;\\r\\n      address [] internal UserAddress30;\\r\\n      uint256 public ActiveID30 = 0;\\r\\n\\r\\n      mapping(address =\\u003e address[]) public check_Ref_address90;\\r\\n      address [] internal UserAddress90;\\r\\n      uint256 public ActiveID90 = 0;\\r\\n      \\r\\n      mapping(address =\\u003e address[]) public check_Ref_address350;\\r\\n      address [] internal UserAddress350;\\r\\n      uint256 public ActiveID350 = 0;\\r\\n\\r\\n      mapping(address =\\u003e address[]) public check_Ref_Direct;\\r\\n      address [] internal UserAddressDirect;\\r\\n\\r\\n\\r\\n\\r\\n//...............................................................................................30 of tree.................................................\\r\\n    function _setUpline30(address _addr, address payable _upline) internal {\\r\\n        if(Referrals30[_addr].upline == address(0) \\u0026\\u0026 _upline != _addr \\u0026\\u0026 _addr != owner \\u0026\\u0026 (Referrals30[_upline].deposit_time \\u003e 0 || _upline == owner)) {\\r\\n            Referrals30[_addr].upline = _upline;\\r\\n            Referrals30[_upline].referrals++;\\r\\n            total_users30++;\\r\\n        }\\r\\n    }\\r\\n      function IsUpline30( address _upline) public view returns(bool status)\\r\\n    {\\r\\n        if(Referrals30[msg.sender].upline == address(0) \\u0026\\u0026 _upline != msg.sender \\u0026\\u0026 msg.sender != owner \\u0026\\u0026 (Referrals30[_upline].deposit_time \\u003e 0 || _upline == owner)) \\r\\n        {\\r\\n            status = true;  \\r\\n        }\\r\\n        return status;\\r\\n    }\\r\\n      function ChakUpline30( address _upline) public view returns(address add)\\r\\n    {\\r\\n        return Referrals30[_upline].upline;\\r\\n    }\\r\\n\\r\\n\\r\\n          function Last_Ref30() public view returns(address add)\\r\\n    {\\r\\n        return UserAddress30[ActiveID30];\\r\\n    }\\r\\n    function check_Direct30(address add) public view returns(address,address)\\r\\n    {  \\r\\n        return (check_Ref_address30[add][0],check_Ref_address30[add][1]);\\r\\n    }\\r\\n     \\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n//...............................................................................................90 of tree.................................................\\r\\n    function _setUpline90(address _addr, address payable _upline) internal {\\r\\n        if(Referrals90[_addr].upline == address(0) \\u0026\\u0026 _upline != _addr \\u0026\\u0026 _addr != owner \\u0026\\u0026 (Referrals90[_upline].deposit_time \\u003e 0 || _upline == owner)) {\\r\\n            Referrals90[_addr].upline = _upline;\\r\\n            Referrals90[_upline].referrals++;\\r\\n            total_users90++;\\r\\n        }\\r\\n    }\\r\\n      function IsUpline90( address _upline) public view returns(bool status)\\r\\n    {\\r\\n        if(Referrals90[msg.sender].upline == address(0) \\u0026\\u0026 _upline != msg.sender \\u0026\\u0026 msg.sender != owner \\u0026\\u0026 (Referrals90[_upline].deposit_time \\u003e 0 || _upline == owner)) \\r\\n        {\\r\\n            status = true;  \\r\\n        }\\r\\n        return status;\\r\\n    }\\r\\n      function ChakUpline90( address _upline) public view returns(address add)\\r\\n    {\\r\\n        return Referrals90[_upline].upline;\\r\\n    }\\r\\n          function Last_Ref90() public view returns(address add)\\r\\n    {\\r\\n        return UserAddress90[ActiveID90];\\r\\n    }\\r\\n     \\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n//...............................................................................................350 of tree.................................................\\r\\n    function _setUpline350(address _addr, address payable _upline) internal {\\r\\n        if(Referrals350[_addr].upline == address(0) \\u0026\\u0026 _upline != _addr \\u0026\\u0026 _addr != owner \\u0026\\u0026 (Referrals350[_upline].deposit_time \\u003e 0 || _upline == owner)) {\\r\\n            Referrals350[_addr].upline = _upline;\\r\\n            Referrals350[_upline].referrals++;\\r\\n            total_users350++;\\r\\n        }\\r\\n    }\\r\\n      function IsUpline350( address _upline) public view returns(bool status)\\r\\n    {\\r\\n        if(Referrals350[msg.sender].upline == address(0) \\u0026\\u0026 _upline != msg.sender \\u0026\\u0026 msg.sender != owner \\u0026\\u0026 (Referrals350[_upline].deposit_time \\u003e 0 || _upline == owner)) \\r\\n        {\\r\\n            status = true;  \\r\\n        }\\r\\n        return status;\\r\\n    }\\r\\n      function ChakUpline350( address _upline) public view returns(address add)\\r\\n    {\\r\\n        return Referrals350[_upline].upline;\\r\\n    }\\r\\n \\r\\n          function Last_Ref350() public view returns(address add)\\r\\n    {\\r\\n        return UserAddress350[ActiveID350];\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n//.........................................................................Direct upline ............................................................\\r\\n\\r\\n    //..........................................................................................Direct upline.....................................................\\r\\n\\r\\n        function set_Direct_Upline(address _addr, address payable _upline) internal {\\r\\n        if(Direct_Referrals[_addr].upline == address(0) \\u0026\\u0026 _upline != _addr \\u0026\\u0026 _addr != owner \\u0026\\u0026 (Direct_Referrals[_upline].deposit_time \\u003e 0 || _upline == owner)) {\\r\\n            Direct_Referrals[_addr].upline = _upline;\\r\\n            \\r\\n            Direct_total_users++;\\r\\n        }\\r\\n    }\\r\\n      function Is_Direct_Upline( address _upline) public view returns(bool status)\\r\\n    {   \\r\\n        if(Direct_Referrals[msg.sender].upline == address(0) \\u0026\\u0026 _upline != msg.sender \\u0026\\u0026 msg.sender != owner \\u0026\\u0026 (Direct_Referrals[_upline].deposit_time \\u003e 0 || _upline == owner)) \\r\\n        {\\r\\n            status = true;  \\r\\n        }\\r\\n        return status;\\r\\n    }\\r\\n      function Chak_Direct_Upline( address _upline) public view returns(address add)\\r\\n    {  \\r\\n        return Direct_Referrals[_upline].upline;\\r\\n    }\\r\\n    function check_DirectforUpline(address add) public view returns(address,address)\\r\\n    {  \\r\\n        return (check_Ref_Direct[add][0],check_Ref_Direct[add][1]);\\r\\n    }    \\r\\n     function checkrefList_direct() public view returns(address[] memory Direct,address[] memory tree30,address[] memory tree90,address[] memory tree350)\\r\\n    {\\r\\n        return (UserAddressDirect,UserAddress30 ,UserAddress90 ,UserAddress350);\\r\\n    }\\r\\n\\r\\n     function checkrefList(address addr) public view returns(address[] memory)\\r\\n    {\\r\\n        return UserUplineList[addr];\\r\\n    }\\r\\n        function isContract(address _address) public view returns (bool) \\r\\n    {\\r\\n        uint256 size;\\r\\n        assembly { size := extcodesize(_address) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ActiveID30\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ActiveID350\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ActiveID90\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"ChakUpline30\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"ChakUpline350\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"ChakUpline90\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"Chak_Direct_Upline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"Diposit_in_Community\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"add\",\"type\":\"address[]\"}],\"name\":\"Diposit_in_community_claim_owner_income\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Direct_Referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"deposit_time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"direct\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lastupline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"last_Direct_ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"DirectAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Direct_total_users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"IsUpline30\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"IsUpline350\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"IsUpline90\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"Is_Direct_Upline\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Last_Ref30\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Last_Ref350\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Last_Ref90\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Referrals30\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"deposit_time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"direct\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lastupline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"last_Direct_ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"DirectAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Referrals350\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"deposit_time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"direct\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lastupline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"last_Direct_ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"DirectAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Referrals90\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"deposit_time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"direct\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lastupline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"last_Direct_ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"DirectAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Upgrade_in_community\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Users30\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"L1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L5\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L6\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L7\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L8\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L9\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L10\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Users350\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"L1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L5\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L6\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L7\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L8\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L9\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L10\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Users90\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"L1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L5\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L6\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L7\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L8\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L9\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"L10\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UsersInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directIncome\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Wallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"changetoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"check_Direct30\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"check_DirectforUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"check_Ref_Direct\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"check_Ref_address30\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"check_Ref_address350\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"check_Ref_address90\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkrefList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkrefList_direct\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"Direct\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tree30\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tree90\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tree350\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolrepeatation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_users30\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_users350\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_users90\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Alightzone", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4704a271513fc84af149f875066789e756a2daa1b0bb30d3cdbe02e711e9aafe"}