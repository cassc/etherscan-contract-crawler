{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFsTay.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\n/// @title NFsTay \\r\\n/// @author Rabeeb Aqdas\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/access/Ownable.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\r\\n\\r\\n  \\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * The initial owner is set to the address provided by the deployer. This can\\r\\n * later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    /**\\r\\n     * @dev The caller account is not authorized to perform an operation.\\r\\n     */\\r\\n    error OwnableUnauthorizedAccount(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\r\\n     */\\r\\n    error OwnableInvalidOwner(address owner);\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\r\\n     */\\r\\n    constructor(address initialOwner) {\\r\\n        if (initialOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(initialOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        if (owner() != _msgSender()) {\\r\\n            revert OwnableUnauthorizedAccount(_msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        if (newOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\r\\n     * `nonReentrant` function in the call stack.\\r\\n     */\\r\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\r\\n        return _status == _ENTERED;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\n  \\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\r\\n     * caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `value` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\r\\n\\r\\n  \\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\r\\n     * reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\r\\n\\r\\n  \\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\r\\n\\r\\n  \\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\r\\n     *   a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\r\\n     *   {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\r\\n     *   a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\r\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\r\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the address zero.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n}\\r\\n\\r\\n\\r\\n///////////////////////////////////////////////Interfaces//////////////////////////////////////////////////////////\\r\\n\\r\\n\\r\\ninterface ITreasury {\\r\\n    function getMyUSDUpdatedPrice() external view returns (uint256 _myUsdPrice);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IMyUSD {\\r\\n    function mint(address recipient, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\n///////////////////////////////////////////////Errors//////////////////////////////////////////////////\\r\\n\\r\\nerror PriceNotMet(uint256 tokenId, uint256 price);\\r\\nerror ItemNotForSale(uint256 tokenId);\\r\\nerror NotListed(uint256 tokenId);\\r\\nerror AlreadyListed(uint256 tokenId);\\r\\nerror NotLister(uint256 tokenId);   \\r\\nerror YouAreSeller(uint256 tokenId);    \\r\\nerror ConditionNotMet(uint256 price);   \\r\\nerror NoProceeds();\\r\\nerror NotOwner();\\r\\nerror NotApprovedForMarketplace();\\r\\nerror PriceMustBeAboveZero();\\r\\nerror InvalidCurrency();\\r\\nerror NotEnoughBalance(uint256 amount);\\r\\nerror TransferFailed();\\r\\nerror InvalidLength();\\r\\n\\r\\ncontract NFsTay is\\r\\n    ReentrancyGuard,\\r\\n    IERC721Receiver,\\r\\n    Ownable\\r\\n{\\r\\n\\r\\n///////////////////////////////////////////////Structs//////////////////////////////////////////////////////////\\r\\n\\r\\n    struct Listing {\\r\\n        address currency;\\r\\n        uint256 price;\\r\\n        address seller;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n\\r\\n///////////////////////////////////////////////Events//////////////////////////////////////////////////\\r\\n\\r\\n    event ItemListed(\\r\\n        address indexed seller,\\r\\n        uint256 indexed tokenId,\\r\\n        address currencyAddress,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    event ItemCanceled(\\r\\n        address indexed seller,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    event ItemBought(\\r\\n        address indexed buyer,\\r\\n        uint256 indexed tokenId,\\r\\n        address currencyAddress,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n/////////////////////////////////////////State Variables/////////////////////////////////////////////\\r\\n\\r\\n    uint256 public RockApyPerSecond = 4_756_468_797_564;\\r\\n    address private usdcAddress;\\r\\n    IERC721 private _nftHelper;\\r\\n    IMyUSD private _myusdHelper;\\r\\n    ITreasury private _treasuryHelper;\\r\\n\\r\\n    mapping(uint256 => Listing) private listings;   \\r\\n\\r\\n    receive() external payable { }\\r\\n\\r\\n    constructor(\\r\\n        address _myRocksAddress,\\r\\n        address _myUsdAddress,\\r\\n        address _usdcAddress,\\r\\n        address _treasuryAddress\\r\\n    ) Ownable(_msgSender()) {\\r\\n\\r\\n        usdcAddress = _usdcAddress;\\r\\n        _nftHelper = IERC721(_myRocksAddress);\\r\\n        _myusdHelper = IMyUSD(_myUsdAddress);\\r\\n       _treasuryHelper = ITreasury(_treasuryAddress);\\r\\n    }\\r\\n\\r\\n    modifier notListed(uint256 tokenId) {\\r\\n        Listing memory listing = listings[tokenId];\\r\\n        if (listing.price > 0) revert AlreadyListed(tokenId);\\r\\n        \\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isListed(uint256 tokenId) {\\r\\n        Listing memory listing = listings[tokenId];\\r\\n        if (listing.price == 0) revert NotListed(tokenId);\\r\\n        \\r\\n        _;\\r\\n    }\\r\\n    function _currenyValidation(address currency) private view returns (bool) {\\r\\n        if(currency == address(_myusdHelper) || currency == usdcAddress || currency == address(0)) return true;\\r\\n        else return false;\\r\\n    }\\r\\n\\r\\n    modifier isOwner(\\r\\n        uint256 tokenId,\\r\\n        address spender\\r\\n    ) {\\r\\n        address owner = _nftHelper.ownerOf(tokenId);\\r\\n        if (spender != owner) revert NotLister(tokenId);\\r\\n        \\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isLister(\\r\\n        uint256 tokenId,\\r\\n        address spender\\r\\n    ) {\\r\\n        Listing memory listing = listings[tokenId];\\r\\n        if (listing.seller != spender) revert NotLister(tokenId);\\r\\n        \\r\\n        _;\\r\\n    }\\r\\n\\r\\n/////////////////////////////////////////Main Functions/////////////////////////////////////////////\\r\\n\\r\\n    /*\\r\\n     * @notice Method for listing NFT\\r\\n     * @param tokenId Token ID of NFT\\r\\n     * @param currencyAddress the address of token in which you want to sell your NFT\\r\\n     * @param price the amount at which you want to sell your NFT\\r\\n     */\\r\\n    function listItem(\\r\\n        uint256 tokenId,\\r\\n        address currencyAddress,\\r\\n        uint256 price\\r\\n    )\\r\\n        external\\r\\n        notListed(tokenId)\\r\\n        isOwner(tokenId, _msgSender())\\r\\n    {\\r\\n        if (price == 0) revert PriceMustBeAboveZero();\\r\\n        bool validation = _currenyValidation(currencyAddress);\\r\\n        if(!validation) revert InvalidCurrency();\\r\\n        IERC721 nft = _nftHelper;\\r\\n        if (nft.getApproved(tokenId) != address(this) &&\\r\\n           !nft.isApprovedForAll(_msgSender(), address(this))\\r\\n        ) revert NotApprovedForMarketplace();\\r\\n        nft.safeTransferFrom(_msgSender(), address(this), tokenId);\\r\\n        listings[tokenId] = Listing(\\r\\n            currencyAddress,\\r\\n            price,\\r\\n            _msgSender(),\\r\\n            block.timestamp\\r\\n        );\\r\\n        emit ItemListed(\\r\\n            _msgSender(),\\r\\n            tokenId,\\r\\n            currencyAddress,\\r\\n            price\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Method for cancelling listing\\r\\n     * @param tokenId Token ID of NFT\\r\\n     */\\r\\n    function cancelListing(\\r\\n        uint256 tokenId\\r\\n    )\\r\\n        external\\r\\n        isListed(tokenId)\\r\\n        isLister(tokenId, _msgSender())\\r\\n    {\\r\\n        Listing memory listedItem = listings[tokenId];\\r\\n        _nftHelper.safeTransferFrom(\\r\\n            address(this),\\r\\n            _msgSender(),\\r\\n            tokenId\\r\\n        );\\r\\n        uint256 twapPrice = _treasuryHelper.getMyUSDUpdatedPrice();       \\r\\n        if(twapPrice >= 1.01e18) {\\r\\n        uint256 time = block.timestamp - listedItem.timestamp;\\r\\n        uint256 reward = time * RockApyPerSecond;\\r\\n        _myusdHelper.mint(listedItem.seller,reward);\\r\\n        }\\r\\n        delete (listings[tokenId]);\\r\\n        emit ItemCanceled(_msgSender(), tokenId);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Method for buying listing\\r\\n     * @param tokenId Token ID of NFT that you want to buy\\r\\n     */\\r\\n    function buyItem(\\r\\n        uint256 tokenId\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        isListed(tokenId)\\r\\n        nonReentrant\\r\\n    {\\r\\n\\r\\n        Listing memory listedItem = listings[tokenId];\\r\\n        if(listedItem.seller == _msgSender()) revert YouAreSeller(tokenId);\\r\\n        if (listedItem.currency == address(0)) {\\r\\n        if (msg.value < ((listedItem.price * 11) / 10)) revert PriceNotMet(tokenId, listedItem.price);\\r\\n            \\r\\n        (bool success,) = payable(listedItem.seller).call{value : ((listedItem.price * 9) / 10)}(\\\"\\\");\\r\\n            if(!success) revert TransferFailed();\\r\\n        } else {\\r\\n            if (\\r\\n                IERC20(listedItem.currency).allowance(\\r\\n                    _msgSender(),\\r\\n                    address(this)\\r\\n                ) < ((listedItem.price * 11) / 10)\\r\\n            ) revert NotApprovedForMarketplace();\\r\\n            IERC20(listedItem.currency).transferFrom(\\r\\n                _msgSender(),\\r\\n                listedItem.seller,\\r\\n                ((listedItem.price * 9) / 10)\\r\\n            );\\r\\n            IERC20(listedItem.currency).transferFrom(\\r\\n                _msgSender(),\\r\\n                address(this),\\r\\n                ((listedItem.price * 2) / 10)\\r\\n            );\\r\\n        }\\r\\n        uint256 twapPrice = _treasuryHelper.getMyUSDUpdatedPrice();       \\r\\n        if(twapPrice >= 1.01e18) {\\r\\n        uint256 time = block.timestamp - listedItem.timestamp;\\r\\n        uint256 reward = time * RockApyPerSecond;\\r\\n        _myusdHelper.mint(listedItem.seller,reward);\\r\\n        }\\r\\n        delete (listings[tokenId]); \\r\\n        _nftHelper.safeTransferFrom(\\r\\n            address(this),\\r\\n            _msgSender(),\\r\\n            tokenId\\r\\n        );\\r\\n        emit ItemBought(\\r\\n            _msgSender(),\\r\\n            tokenId,\\r\\n            listedItem.currency,\\r\\n            listedItem.price\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Method for updating listing\\r\\n     * @param tokenId Token ID of NFT\\r\\n     * @param newPrice Price in Wei of the item\\r\\n     */\\r\\n    function updateListing(\\r\\n        uint256 tokenId,\\r\\n        address newCurrencyAddress,\\r\\n        uint256 newPrice\\r\\n    )\\r\\n        external\\r\\n        isListed(tokenId)\\r\\n        nonReentrant\\r\\n        isLister(tokenId, _msgSender())\\r\\n    {\\r\\n        if (newPrice == 0) revert PriceMustBeAboveZero();\\r\\n        \\r\\n        listings[tokenId].price = newPrice;\\r\\n        listings[tokenId].currency = newCurrencyAddress;\\r\\n        emit ItemListed(\\r\\n            _msgSender(),\\r\\n            tokenId,\\r\\n            newCurrencyAddress,\\r\\n            newPrice\\r\\n        );\\r\\n    }\\r\\n\\r\\n     /*\\r\\n     * @notice Method for collecting reward earned by listing NFT\\r\\n     * @param tokenIds[] of NFT (maximum 25)\\r\\n     */\\r\\n\\r\\n    function collectReward(uint256[] memory _tokenIds)  external {\\r\\n        uint256 length = _tokenIds.length;\\r\\n        if(length == 0 ||  length > 25) revert InvalidLength();\\r\\n        uint256 twapPrice = _treasuryHelper.getMyUSDUpdatedPrice();    \\r\\n        if(twapPrice < 1.01e18) revert ConditionNotMet(twapPrice); \\r\\n    \\r\\n        uint256 totalTime;\\r\\n        for(uint256 i ; i < length ; ++i) {\\r\\n        Listing memory listing = listings[_tokenIds[i]];\\r\\n        if (listing.price == 0) revert NotListed(_tokenIds[i]);\\r\\n        if (listing.seller != _msgSender()) revert NotLister(_tokenIds[i]);\\r\\n        \\r\\n        totalTime = totalTime + (block.timestamp - listing.timestamp);\\r\\n        listing.timestamp = block.timestamp;\\r\\n        listings[_tokenIds[i]] = listing;\\r\\n        }\\r\\n        uint256 reward = totalTime * RockApyPerSecond;\\r\\n        if(reward > 0) _myusdHelper.mint(_msgSender(),reward);\\r\\n        \\r\\n    }\\r\\n\\r\\n/////////////////////////////////////////Ony Owner Functions/////////////////////////////////////////////\\r\\n    \\r\\n     /*\\r\\n     * @notice Method for updating per second APY only for owner\\r\\n     * @param _RockApyPerSecond per second APY\\r\\n     */\\r\\n\\r\\n    function updateAprPerRock(uint256 _RockApyPerSecond) external onlyOwner {\\r\\n        RockApyPerSecond = _RockApyPerSecond;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Method for withdrawing BNB only for owner\\r\\n     */\\r\\n\\r\\n    function withdrawBNB() external onlyOwner {\\r\\n        address owner = owner();\\r\\n       uint256 amount = address(this).balance;\\r\\n        if (amount == 0) revert NotEnoughBalance(amount);\\r\\n        (bool success,) = payable(owner).call{value : amount}(\\\"\\\");\\r\\n        if(!success) revert TransferFailed();\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Method for withdrawing tokens only for owner\\r\\n     * @param address of token\\r\\n     */\\r\\n\\r\\n    function withdrawToken(address token) external onlyOwner {\\r\\n        address owner = owner();\\r\\n        bool validation = _currenyValidation(token);\\r\\n        if(!validation) revert InvalidCurrency();\\r\\n        uint256 amount = IERC20(token).balanceOf(address(this));\\r\\n        if (amount == 0) revert NotEnoughBalance(amount);\\r\\n        IERC20(token).transfer(owner, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n/////////////////////////////////////////Getter Functions/////////////////////////////////////////////\\r\\n\\r\\n    /*\\r\\n     * @notice Method for get listing\\r\\n     * @param tokenId Token ID of NFT\\r\\n     * @returns the details of listed nft\\r\\n     */\\r\\n\\r\\n    function getListing(\\r\\n        uint256 tokenId\\r\\n    ) external view returns (Listing memory) {\\r\\n        return listings[tokenId];\\r\\n    }\\r\\n\\r\\n\\r\\n    function onERC721Received(\\r\\n        address /*operator*/,\\r\\n        address /*from*/,\\r\\n        uint256 /*tokenId*/,\\r\\n        bytes calldata /*data*/\\r\\n    ) external pure override returns (bytes4) {\\r\\n        return IERC721Receiver.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_myRocksAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_myUsdAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AlreadyListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ConditionNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCurrency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedForMarketplace\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotLister\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceMustBeAboveZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"YouAreSeller\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RockApyPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"collectReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct NFsTay.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_RockApyPerSecond\",\"type\":\"uint256\"}],\"name\":\"updateAprPerRock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newCurrencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NFsTay", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006d635dc4a2a54664b54df6a63e5ee31d5b29cf6e000000000000000000000000ad9317601872de47a92a175a94feb18e72cb5bd50000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d0000000000000000000000001a2c2204fee5355080a1bcbc0f4e8add58d4b6d7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}