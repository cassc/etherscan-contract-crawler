{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/CadinuTradingCompetition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IPool {\\r\\n    function factory() external view returns (address);\\r\\n    function fee() external view returns (uint24);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface IFactory {\\r\\n    function getPool(address _token0, address _token1, uint24 _fee) external view returns (address);\\r\\n}\\r\\n\\r\\n// Errors\\r\\nerror __errorWrongTimeSetting();\\r\\nerror __errorNotSupportedFactory();\\r\\nerror __errorWrongPool();\\r\\nerror __errorRewardAlreadySet();\\r\\nerror __errorWrongCompetitionId();\\r\\nerror __errorCompetitionHasNotEnded();\\r\\nerror __errorCompetitionHasEnded();\\r\\nerror __errorWrongInput();\\r\\nerror __errorWrongReward();\\r\\nerror __errorNoReward();\\r\\nerror __errorCannotWithdrawCbon();\\r\\n\\r\\n// Cadinu Trading Competition Contract\\r\\ncontract CadinuTradingCompetition is Ownable {\\r\\n    // events\\r\\n    event StartCompetition(uint256 startTime, uint256 endTime, address pool);\\r\\n    event FactorySetting(address factoryAddress, bool isSupported);\\r\\n    event NewCompetitionLaunched(uint256 startTime, uint256 endTime, address poolAddress, uint256 rewardAmount);\\r\\n    event RewardIncreased(uint256 competitionId, uint256 increasedAmount, uint256 newReward);\\r\\n    event RewardSet(uint256 competitionId, uint256 rewardCharged);\\r\\n    event WithdrawReward(address user, uint256 withdrawnAmount);\\r\\n\\r\\n    // Data\\r\\n    address public constant CBON = 0x6e64fCF15Be3eB71C3d42AcF44D85bB119b2D98b;\\r\\n    mapping(address => bool) public supportedFactories;\\r\\n    uint256 public lastId;\\r\\n\\r\\n    struct Competitions {\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n        address poolAddress;\\r\\n        uint256 rewardAmount;\\r\\n        uint256 rewardCharged;\\r\\n        bool isBoosted;\\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        uint256 availableReward;\\r\\n        uint256 withdrawnReward;\\r\\n    }\\r\\n\\r\\n    struct Winners {\\r\\n        address[] winnerUsers;\\r\\n        uint256[] amounts;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Competitions) public cadinuCompetitions;\\r\\n    mapping(address => User) public users;\\r\\n    mapping(uint256 => Winners) winners;\\r\\n\\r\\n    // Constructor\\r\\n    constructor() Ownable(_msgSender()) {\\r\\n        lastId = 0;\\r\\n    }\\r\\n\\r\\n    // Functions\\r\\n    function factorySetting(address _factoryAddress, bool _isSupported) external onlyOwner {\\r\\n        supportedFactories[_factoryAddress] = _isSupported;\\r\\n        emit FactorySetting(_factoryAddress, _isSupported);\\r\\n    }\\r\\n\\r\\n    function startCompetition(uint256 _startTime, uint256 _endTime, address _poolAddress, uint256 _rewardAmount)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        if (_startTime >= _endTime || _startTime < block.timestamp) revert __errorWrongTimeSetting();\\r\\n        if (!supportedFactories[IPool(_poolAddress).factory()]) revert __errorNotSupportedFactory();\\r\\n        if (\\r\\n            IFactory(IPool(_poolAddress).factory()).getPool(\\r\\n                IPool(_poolAddress).token0(), IPool(_poolAddress).token1(), IPool(_poolAddress).fee()\\r\\n            ) != _poolAddress\\r\\n        ) {\\r\\n            revert __errorWrongPool();\\r\\n        }\\r\\n        cadinuCompetitions[lastId] = Competitions(_startTime, _endTime, _poolAddress, _rewardAmount, 0, false);\\r\\n        lastId += 1;\\r\\n        emit NewCompetitionLaunched(_startTime, _endTime, _poolAddress, _rewardAmount);\\r\\n    }\\r\\n\\r\\n    function increaseReward(uint256 _competitionId, uint256 _amount) external onlyOwner {\\r\\n        if (_competitionId > lastId) revert __errorWrongCompetitionId();\\r\\n        if (cadinuCompetitions[_competitionId].endTime <= block.timestamp) revert __errorCompetitionHasEnded();\\r\\n        cadinuCompetitions[_competitionId].rewardAmount += _amount;\\r\\n        cadinuCompetitions[_competitionId].isBoosted = true;\\r\\n        emit RewardIncreased(_competitionId, _amount, cadinuCompetitions[_competitionId].rewardAmount);\\r\\n    }\\r\\n\\r\\n    function setReward(uint256 _competitionId, address[] calldata _users, uint256[] calldata _rewards)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        if (_competitionId > lastId) revert __errorWrongCompetitionId();\\r\\n        if (cadinuCompetitions[_competitionId].endTime >= block.timestamp) revert __errorCompetitionHasNotEnded();\\r\\n        if (_users.length != _rewards.length) revert __errorWrongInput();\\r\\n        if (cadinuCompetitions[_competitionId].rewardCharged >= cadinuCompetitions[_competitionId].rewardAmount) {\\r\\n            revert __errorRewardAlreadySet();\\r\\n        }\\r\\n        uint256 totalReward = cadinuCompetitions[_competitionId].rewardCharged;\\r\\n        for (uint256 ii = 0; ii < _rewards.length; ++ii) {\\r\\n            totalReward += _rewards[ii];\\r\\n        }\\r\\n        if (totalReward > cadinuCompetitions[_competitionId].rewardAmount) revert __errorWrongReward();\\r\\n        cadinuCompetitions[_competitionId].rewardCharged += totalReward;\\r\\n        for (uint256 ii = 0; ii < _rewards.length; ++ii) {\\r\\n            users[_users[ii]].availableReward += _rewards[ii];\\r\\n            winners[_competitionId].winnerUsers.push(_users[ii]);\\r\\n            winners[_competitionId].amounts.push(_rewards[ii]);\\r\\n        }\\r\\n        IERC20(CBON).transferFrom(_msgSender(), address(this), totalReward);\\r\\n        emit RewardSet(_competitionId, cadinuCompetitions[_competitionId].rewardCharged);\\r\\n    }\\r\\n\\r\\n    function withdrawReward() external {\\r\\n        if (users[_msgSender()].availableReward == 0) revert __errorNoReward();\\r\\n        uint256 withdrawAmount = users[_msgSender()].availableReward;\\r\\n        users[_msgSender()].availableReward = 0;\\r\\n        users[_msgSender()].withdrawnReward += withdrawAmount;\\r\\n        IERC20(CBON).transfer(_msgSender(), withdrawAmount);\\r\\n        emit WithdrawReward(_msgSender(), withdrawAmount);\\r\\n    }\\r\\n\\r\\n    function getWinners(uint256 _competitionId) external view returns (address[] memory, uint256[] memory) {\\r\\n        return (winners[_competitionId].winnerUsers, winners[_competitionId].amounts);\\r\\n    }\\r\\n\\r\\n    function withdrawWrongToken(address _tokenAddress) external onlyOwner {\\r\\n        if (_tokenAddress == CBON) revert __errorCannotWithdrawCbon();\\r\\n        uint256 amount = IERC20(_tokenAddress).balanceOf(address(this));\\r\\n        IERC20(_tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {Context} from \\\"../utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * The initial owner is set to the address provided by the deployer. This can\\r\\n * later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    /**\\r\\n     * @dev The caller account is not authorized to perform an operation.\\r\\n     */\\r\\n    error OwnableUnauthorizedAccount(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\r\\n     */\\r\\n    error OwnableInvalidOwner(address owner);\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\r\\n     */\\r\\n    constructor(address initialOwner) {\\r\\n        if (initialOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(initialOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        if (owner() != _msgSender()) {\\r\\n            revert OwnableUnauthorizedAccount(_msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        if (newOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\r\\n     * caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `value` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorCannotWithdrawCbon\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorCompetitionHasEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorCompetitionHasNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorNoReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorNotSupportedFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorRewardAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorWrongCompetitionId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorWrongInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorWrongPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorWrongReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorWrongTimeSetting\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"name\":\"FactorySetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"NewCompetitionLaunched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"competitionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increasedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"RewardIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"competitionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardCharged\",\"type\":\"uint256\"}],\"name\":\"RewardSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"StartCompetition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CBON\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cadinuCompetitions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardCharged\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBoosted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factoryAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSupported\",\"type\":\"bool\"}],\"name\":\"factorySetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_competitionId\",\"type\":\"uint256\"}],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_competitionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_competitionId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewards\",\"type\":\"uint256[]\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"startCompetition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedFactories\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawWrongToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CadinuTradingCompetition", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}