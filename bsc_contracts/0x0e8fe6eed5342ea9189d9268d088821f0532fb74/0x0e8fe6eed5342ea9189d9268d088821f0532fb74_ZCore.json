{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/ZCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\\n    $$$$$$$$\\\\  $$$$$$\\\\   $$$$$$\\\\  $$$$$$$\\\\  $$$$$$$$\\\\ \\n    \\\\____$$  |$$  __$$\\\\ $$  __$$\\\\ $$  __$$\\\\ $$  _____|\\n        $$  / $$ /  \\\\__|$$ /  $$ |$$ |  $$ |$$ |      \\n       $$  /  $$ |      $$ |  $$ |$$$$$$$  |$$$$$\\\\    \\n      $$  /   $$ |      $$ |  $$ |$$  __$$< $$  __|   \\n     $$  /    $$ |  $$\\\\ $$ |  $$ |$$ |  $$ |$$ |      \\n    $$$$$$$$\\\\ \\\\$$$$$$  | $$$$$$  |$$ |  $$ |$$$$$$$$\\\\ \\n    \\\\________| \\\\______/  \\\\______/ \\\\__|  \\\\__|\\\\________|\\n\\n*/\\npragma solidity ^0.8.5;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./IPancake.sol\\\";\\nimport \\\"./SwapHelper.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Strings.sol\\\";\\n\\ncontract ZCore is Ownable, ERC20 {\\n      address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n      address constant ZERO = 0x0000000000000000000000000000000000000000;\\n      address constant USDT = 0x55d398326f99059fF775485246999027B3197955;\\n      address constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    string constant _name = \\\"ZCore\\\";\\n    string constant _symbol = \\\"ZCR\\\";\\n\\n    // Token supply control\\n    uint8 constant decimal = 18;\\n    uint8 constant decimalUSDT = 18;\\n    uint256 constant maxSupply = 2_500_000_000 * (10 ** decimal);\\n    bool public tradingEnabled;\\n\\n    // Fees in sell\\n    uint256 public sellfeeDevelopmentWallet = 300; // 3%\\n    uint256 public sellfeeDevelopmentWallet2 = 300; // 3%\\n    uint256 public sellfeeDevelopmentWallet3 = 500; // 5%\\n\\n    // Fees in buy\\n    uint256 public buyfeeDevelopmentWallet = 300; // 3%\\n\\n    // special wallet permissions\\n    mapping(address => bool) public exemptFee;\\n    address public liquidityPool;\\n    address public developingWallet;\\n    address public developingWallet2;\\n    address public developingWallet3;\\n\\n    SwapHelper private swapHelper;\\n\\n    address WBNB_USDT_PAIR = 0x16b9a82891338f9bA80E2D6970FddA79D1eb0daE;\\n    address WBNB_TOKEN_PAIR;\\n\\n    bool private _noReentrancy = false; \\n\\n    function getOwner() external view returns (address) { return owner(); }\\n\\n    function getsellFeeTotal() public view returns(uint256) { return sellfeeDevelopmentWallet + sellfeeDevelopmentWallet2 + sellfeeDevelopmentWallet3; }\\n    function getbuyFeeTotal() public view returns(uint256) { return buyfeeDevelopmentWallet; }\\n\\n    function getSwapHelperAddress() external view returns (address) { return address(swapHelper); }\\n    function setExemptFee(address account, bool operation) public onlyOwner { exemptFee[account] = operation; }\\n\\n    function setDevelopingWallet(address account) public onlyOwner { developingWallet = account; }\\n    function setdevelopingWallet2(address account) public onlyOwner { developingWallet2 = account; }\\n    function setdevelopingWallet3(address account) public onlyOwner { developingWallet3 = account; }\\n\\n    function setSellFeesForDevelopmentWallets(uint256 fee1, uint256 fee2, uint256 fee3) external onlyOwner {\\n        require(fee1 + fee2 + fee3 <= 1500, \\\"Total fees cannot exceed 15%\\\");\\n\\n        sellfeeDevelopmentWallet = fee1;\\n        sellfeeDevelopmentWallet2 = fee2;\\n        sellfeeDevelopmentWallet3 = fee3;\\n    }\\n\\n    function setBuyFeesForDevelopmentWallets(uint256 fee1) external onlyOwner {\\n        require(fee1 <= 1500, \\\"Total fees cannot exceed 15%\\\");\\n\\n        buyfeeDevelopmentWallet = fee1;\\n    }\\n\\n    receive() external payable { }\\n\\n    constructor() ERC20(_name, _symbol) {\\n        PancakeRouter router = PancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n        WBNB_TOKEN_PAIR = address(PancakeFactory(router.factory()).createPair(WBNB, address(this)));\\n        liquidityPool = WBNB_TOKEN_PAIR;\\n\\n        exemptFee[address(this)] = true;\\n        exemptFee[DEAD] = true;\\n        address ownerWallet = 0x7F221FAFAb5B01E43e400CF640630FF0E561A7eC;\\n        exemptFee[ownerWallet] = true;\\n\\n        developingWallet = 0x7F221FAFAb5B01E43e400CF640630FF0E561A7eC;\\n        developingWallet2 = 0x7F221FAFAb5B01E43e400CF640630FF0E561A7eC;\\n        developingWallet3 = 0x7F221FAFAb5B01E43e400CF640630FF0E561A7eC;\\n\\n        exemptFee[developingWallet] = true;\\n        exemptFee[developingWallet2] = true;\\n        exemptFee[developingWallet3] = true;\\n\\n        swapHelper = new SwapHelper();\\n        swapHelper.safeApprove(WBNB, address(this), type(uint256).max);\\n        swapHelper.transferOwnership(_msgSender());\\n\\n        _mint(ownerWallet, maxSupply);\\n        tradingEnabled = false;\\n        transferOwnership(ownerWallet);\\n    }\\n\\n    function decimals() public view override returns (uint8) { return decimal; }\\n\\n    function enableTrading() external onlyOwner {\\n        tradingEnabled = true;\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\\n    require(!_noReentrancy, \\\"ReentrancyGuard: reentrant call happens\\\");\\n    _noReentrancy = true;\\n    require(sender != address(0) && recipient != address(0), \\\"transfer from/to the zero address\\\");\\n    require(tradingEnabled || exemptFee[sender], \\\"Trading is currently disabled\\\");\\n\\n    uint256 senderBalance = _balances[sender];\\n    require(senderBalance >= amount, \\\"transfer amount exceeds your balance\\\");\\n    uint256 newSenderBalance = senderBalance - amount;\\n    \\n    _balances[sender] = newSenderBalance;\\n    uint256 feeAmount = 0;\\n    uint256 transferAmount = amount;\\n\\n\\n    if (recipient == liquidityPool) {\\n    if (!exemptFee[sender]) {\\n        feeAmount = (getsellFeeTotal() * amount) / 10000;\\n        exchangeFeeParts(feeAmount);\\n    }\\n    } else if (sender == liquidityPool) {\\n    if (!exemptFee[recipient]) {\\n        feeAmount = (getbuyFeeTotal() * amount) / 10000;\\n        _balances[developingWallet] += feeAmount;\\n        emit Transfer(sender, developingWallet, feeAmount);\\n        transferAmount -= feeAmount;\\n    }\\n    }\\n    uint256 newRecipientAmount = _balances[recipient] + (amount - feeAmount);\\n    _balances[recipient] = newRecipientAmount;\\n    \\n    _noReentrancy = false;\\n    emit Transfer(sender, recipient, transferAmount);\\n    }\\n\\n    function exchangeFeeParts(uint256 incomingFeeTokenAmount) private returns (bool) {\\n        if (incomingFeeTokenAmount == 0) return false;\\n        _balances[address(this)] += incomingFeeTokenAmount;\\n\\n        address pairWbnbToken = WBNB_TOKEN_PAIR;\\n        if (_msgSender() == pairWbnbToken) return false;\\n        uint256 feeTokenAmount = _balances[address(this)];\\n        _balances[address(this)] = 0;\\n\\n        // Gas optimization\\n        address wbnbAddress = WBNB;\\n        (uint112 reserve0, uint112 reserve1) = getTokenReserves(pairWbnbToken);\\n        bool reversed = isReversed(pairWbnbToken, wbnbAddress);\\n        if (reversed) { uint112 temp = reserve0; reserve0 = reserve1; reserve1 = temp; }\\n        _balances[pairWbnbToken] += feeTokenAmount;\\n        address swapHelperAddress = address(swapHelper);\\n        uint256 wbnbBalanceBefore = getTokenBalanceOf(wbnbAddress, swapHelperAddress);\\n\\n        uint256 wbnbAmount = getAmountOut(feeTokenAmount, reserve1, reserve0);\\n        swapToken(pairWbnbToken, reversed ? 0 : wbnbAmount, reversed ? wbnbAmount : 0, swapHelperAddress);\\n        uint256 wbnbBalanceNew = getTokenBalanceOf(wbnbAddress, swapHelperAddress);\\n        require(wbnbBalanceNew == wbnbBalanceBefore + wbnbAmount, \\\"Wrong amount of swapped on WBNB\\\");\\n\\n        // Deep Stack problem avoid\\n        {\\n            // Gas optimization\\n            address usdtAddress = USDT;\\n            address pairWbnbUsdt = WBNB_USDT_PAIR;\\n            (reserve0, reserve1) = getTokenReserves(pairWbnbUsdt);\\n            reversed = isReversed(pairWbnbUsdt, wbnbAddress);\\n            if (reversed) { uint112 temp = reserve0; reserve0 = reserve1; reserve1 = temp; }\\n\\n            uint256 usdtBalanceBefore = getTokenBalanceOf(usdtAddress, address(this));\\n            tokenTransferFrom(wbnbAddress, swapHelperAddress, pairWbnbUsdt, wbnbAmount);\\n            uint256 usdtAmount = getAmountOut(wbnbAmount, reserve0, reserve1);\\n            swapToken(pairWbnbUsdt, reversed ? usdtAmount : 0, reversed ? 0 : usdtAmount, address(this));\\n            uint256 usdtBalanceNew = getTokenBalanceOf(usdtAddress, address(this));\\n            require(usdtBalanceNew == usdtBalanceBefore + usdtAmount, \\\"Wrong amount swapped on USDT\\\");\\n\\n            uint SellFee = getsellFeeTotal();\\n            if (sellfeeDevelopmentWallet > 0) tokenTransfer(usdtAddress, developingWallet, (usdtAmount * sellfeeDevelopmentWallet) / SellFee);\\n            if (sellfeeDevelopmentWallet2 > 0) tokenTransfer(usdtAddress, developingWallet2, (usdtAmount * sellfeeDevelopmentWallet2) / SellFee);\\n            if (sellfeeDevelopmentWallet3 > 0) tokenTransfer(usdtAddress, developingWallet3, (usdtAmount * sellfeeDevelopmentWallet3) / SellFee);\\n        }\\n        return true;\\n    }\\n\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, 'Insufficient amount in');\\n        require(reserveIn > 0 && reserveOut > 0, 'Insufficient liquidity');\\n        uint256 amountInWithFee = amountIn * 9975;\\n        uint256 numerator = amountInWithFee  * reserveOut;\\n        uint256 denominator = (reserveIn * 10000) + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    function burn(uint256 amount) external {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    // gas optimization on get Token0 from a pair liquidity pool\\n    function isReversed(address pair, address tokenA) internal view returns (bool) {\\n        address token0;\\n        bool failed = false;\\n        assembly {\\n            let emptyPointer := mload(0x40)\\n            mstore(emptyPointer, 0x0dfe168100000000000000000000000000000000000000000000000000000000)\\n            failed := iszero(staticcall(gas(), pair, emptyPointer, 0x04, emptyPointer, 0x20))\\n            token0 := mload(emptyPointer)\\n        }\\n        if (failed) revert(\\\"Unable to check the direction of token from the pair\\\");\\n        return token0 != tokenA;\\n    }\\n\\n    // gas optimization on transfer token\\n    function tokenTransfer(address token, address recipient, uint256 amount) internal {\\n        bool failed = false;\\n        assembly {\\n            let emptyPointer := mload(0x40)\\n            mstore(emptyPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(emptyPointer, 0x04), recipient)\\n            mstore(add(emptyPointer, 0x24), amount)\\n            failed := iszero(call(gas(), token, 0, emptyPointer, 0x44, 0, 0))\\n        }\\n        if (failed) revert(\\\"Unable to transfer token to the address\\\");\\n    }\\n\\n    // gas optimization on transfer from token method\\n    function tokenTransferFrom(address token, address from, address recipient, uint256 amount) internal {\\n        bool failed = false;\\n        assembly {\\n            let emptyPointer := mload(0x40)\\n            mstore(emptyPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(emptyPointer, 0x04), from)\\n            mstore(add(emptyPointer, 0x24), recipient)\\n            mstore(add(emptyPointer, 0x44), amount)\\n            failed := iszero(call(gas(), token, 0, emptyPointer, 0x64, 0, 0)) \\n        }\\n        if (failed) revert(\\\"Unable to transfer from token to the address\\\");\\n    }\\n\\n    // gas optimization on swap operation using a liquidity pool\\n    function swapToken(address pair, uint amount0Out, uint amount1Out, address receiver) internal {\\n        bool failed = false;\\n        assembly {\\n            let emptyPointer := mload(0x40)\\n            mstore(emptyPointer, 0x022c0d9f00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(emptyPointer, 0x04), amount0Out)\\n            mstore(add(emptyPointer, 0x24), amount1Out)\\n            mstore(add(emptyPointer, 0x44), receiver)\\n            mstore(add(emptyPointer, 0x64), 0x80)\\n            mstore(add(emptyPointer, 0x84), 0)\\n            failed := iszero(call(gas(), pair, 0, emptyPointer, 0xa4, 0, 0))\\n        }\\n        if (failed) revert(\\\"Unable to swap to the receiver\\\");\\n    }\\n\\n    // gas optimization on get balanceOf from BEP20 or ERC20 token\\n    function getTokenBalanceOf(address token, address holder) internal view returns (uint112 tokenBalance) {\\n        bool failed = false;\\n        assembly {\\n            let emptyPointer := mload(0x40)\\n            mstore(emptyPointer, 0x70a0823100000000000000000000000000000000000000000000000000000000)\\n            mstore(add(emptyPointer, 0x04), holder)\\n            failed := iszero(staticcall(gas(), token, emptyPointer, 0x24, emptyPointer, 0x40))\\n            tokenBalance := mload(emptyPointer)\\n        }\\n        if (failed) revert(\\\"Unable to get the balance from the wallet\\\");\\n    }\\n\\n    // gas optimization on get reserves from the liquidity pool\\n    function getTokenReserves(address pairAddress) internal view returns (uint112 reserve0, uint112 reserve1) {\\n        bool failed = false;\\n        assembly {\\n            let emptyPointer := mload(0x40)\\n            mstore(emptyPointer, 0x0902f1ac00000000000000000000000000000000000000000000000000000000)\\n            failed := iszero(staticcall(gas(), pairAddress, emptyPointer, 0x4, emptyPointer, 0x40))\\n            reserve0 := mload(emptyPointer)\\n            reserve1 := mload(add(emptyPointer, 0x20))\\n        }\\n        if (failed) revert(\\\"Unable to get reserves from the pair\\\");\\n    }\\n\\n    function setWBNB_TOKEN_PAIR(address newPair) external onlyOwner { WBNB_TOKEN_PAIR = newPair; }\\n    function setWBNB_USDT_Pair(address newPair) external onlyOwner { WBNB_USDT_PAIR = newPair; }\\n    function getWBNB_TOKEN_PAIR() external view returns(address) { return WBNB_TOKEN_PAIR; }\\n    function getWBNB_USDT_Pair() external view returns(address) { return WBNB_USDT_PAIR; }\\n    event TokensReleased(address indexed beneficiary, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"/contracts/SwapHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.5;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract SwapHelper is Ownable {\\n  constructor() {}\\n\\n  function safeApprove(address token, address spender, uint256 amount) external onlyOwner { IERC20(token).approve(spender, amount); }\\n\\n  function safeWithdraw() external onlyOwner { payable(_msgSender()).transfer(address(this).balance); }\\n}\"\r\n    },\r\n    \"/contracts/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\"\r\n    },\r\n    \"/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"/contracts/IPancake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.5;\\ninterface PancakeFactory {\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface PancakeRouter {\\n  function factory() external pure returns (address);\\n}\"\r\n    },\r\n    \"/contracts/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\"\r\n    },\r\n    \"/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"/contracts/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) internal _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\"\r\n    },\r\n    \"/contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyfeeDevelopmentWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developingWallet2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developingWallet3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapHelperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWBNB_TOKEN_PAIR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWBNB_USDT_Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getbuyFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getsellFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellfeeDevelopmentWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellfeeDevelopmentWallet2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellfeeDevelopmentWallet3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"}],\"name\":\"setBuyFeesForDevelopmentWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setDevelopingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"operation\",\"type\":\"bool\"}],\"name\":\"setExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee3\",\"type\":\"uint256\"}],\"name\":\"setSellFeesForDevelopmentWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"setWBNB_TOKEN_PAIR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"setWBNB_USDT_Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setdevelopingWallet2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setdevelopingWallet3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ZCore", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}