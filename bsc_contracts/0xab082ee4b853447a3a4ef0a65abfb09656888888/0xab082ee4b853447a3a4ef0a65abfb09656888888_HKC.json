{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.16;\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountUSDTMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountUSDT, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        ERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution, uint256 _minHoldForDividends) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit(uint256 amount) external;\r\n    function process(uint256 gas) external;\r\n    function withdrawDistributor(address tokenReceiver,uint256 amountPercentage)  external;\r\n    function minPeriodminDistributionminimumTokenBalanceForDividends() external view returns (uint256,uint256,uint256);\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n\r\n    ERC20 RWRD; // RWRDAddress\r\n\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n    mapping (address => Share) public shares;\r\n    uint256 currentIndex;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n\r\n    uint256 public minPeriod;\r\n    uint256 public minDistribution;\r\n    uint256 public minTokenBalanceForDividends;\r\n\r\n    address _token;\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n\r\n    constructor (address _RWRDAddress,uint256 _minPeriod, uint256 _minDistribution, uint256 _minHoldForDividends) {\r\n        _token = msg.sender;\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n        minTokenBalanceForDividends = _minHoldForDividends;\r\n        RWRD = ERC20(_RWRDAddress);\r\n    }\r\n    receive() external payable {}\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution, uint256 _minHoldForDividends) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n        minTokenBalanceForDividends = _minHoldForDividends;\r\n    }\r\n    function minPeriodminDistributionminimumTokenBalanceForDividends() external override view returns (uint256,uint256,uint256){\r\n        return (minPeriod,minDistribution,minTokenBalanceForDividends);\r\n    }\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(amount >= minTokenBalanceForDividends){\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if(amount >= minTokenBalanceForDividends && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n            totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n            shares[shareholder].amount = amount;\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }else if(amount < minTokenBalanceForDividends && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n            totalShares = totalShares.sub(shares[shareholder].amount).add(0);\r\n            shares[shareholder].amount = 0;\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n\r\n    }\r\n\r\n    function withdrawDistributor(address tokenReceiver,uint256 amountPercentage)  external override onlyToken  {\r\n        uint256 amountRWRD = RWRD.balanceOf(address(this));\r\n        RWRD.transfer(tokenReceiver,amountRWRD * amountPercentage / 100);\r\n    }\r\n\r\n    function deposit(uint256 amount) external override onlyToken {\r\n            totalDividends = totalDividends.add(amount);\r\n            dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0) { return; }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution\r\n                && shares[shareholder].amount >= minTokenBalanceForDividends;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount  <= minTokenBalanceForDividends){ return; }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if(amount > 0){\r\n            totalDistributed = totalDistributed.add(amount);\r\n            RWRD.transfer(shareholder, amount);\r\n\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n    }\r\n    \r\n    function claimDividend() external {\r\n        require(shouldDistribute(msg.sender), \"Too soon. Need to wait!\");\r\n        distributeDividend(msg.sender);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\ncontract HKC is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private _name = \"Hong Kong Coin\";\r\n    string private _symbol = \"HKC\";\r\n    uint8 constant _decimals = 9;\r\n    uint256 _totalSupply = 1 * 10 ** 9 * 10**_decimals;\r\n\r\n    uint256 public _maxTxAmount = _totalSupply * 100 / 100;\r\n    uint256 public _maxWalletToken = _totalSupply * 100 / 100;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isDividendExempt;\r\n\r\n    struct Fee{uint buy; uint sell;uint transfer; uint part;}\r\n    Fee public fees;\r\n    struct Allot {\r\n        uint256 marketing;\r\n        uint256 dev;\r\n        uint256 liquidity;\r\n        uint256 burn;\r\n        uint256 reward;\r\n        uint256 total;\r\n    }\r\n    Allot public allot;\r\n\r\n    address public marketingFeeReceiver;\r\n    address public devFeeReceiver;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    bool public launched;\r\n\r\n    address public baseToken;\r\n    TokenDistributor public _tokenDistributor;\r\n    DividendDistributor public distributor;\r\n    uint256 distributorGas = 500000;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply* 1 / 1000;\r\n    uint256 public maxSwapThreshold = _totalSupply * 1 / 100;\r\n\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () Ownable() {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        baseToken = address(0x55d398326f99059fF775485246999027B3197955);\r\n        pair = IDEXFactory(router.factory()).createPair(baseToken, address(this));\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n        _tokenDistributor = new TokenDistributor(baseToken);\r\n        distributor = new DividendDistributor(baseToken,15 minutes,1 * 10 ** 9,160000 * 10**_decimals);\r\n        ERC20(baseToken).approve(address(router), uint(~uint256(0)));\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[address(router)] = true;\r\n        isFeeExempt[address(this)] = true;\r\n\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(0xdead)] = true;\r\n\r\n        allot = Allot(10,30,3,0,8,50);\r\n        fees = Fee(5, 5, 5, 100);\r\n        marketingFeeReceiver = 0x824210BD24A073401aB9d863b923813AA5DE2Ca2;\r\n        devFeeReceiver = 0x99D6f06BBdC625940841a64Cb8b74607b897f3Ff;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external view override returns (string memory) { return _symbol; }\r\n    function name() external view override returns (string memory) { return _name; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function minPeriodminDistributionminimumTokenBalanceForDividends() external view returns (uint256,uint256,uint256){\r\n        return distributor.minPeriodminDistributionminimumTokenBalanceForDividends();\r\n    }\r\n    receive() external payable {}\r\n    event AddLiquify(uint amountBNBLiquidity, uint amountToLiquify);\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function btFeeExempt(address[] calldata addresses, bool status)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            isFeeExempt[addresses[i]] = status;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function setMaxWalletPercent_base10000(uint256 maxWallPercent_base10000) external onlyOwner() {\r\n        _maxWalletToken = (_totalSupply * maxWallPercent_base10000 ) / 10000;\r\n    }\r\n\r\n    function setMaxTxPercent_base10000(uint256 maxTXPercentage_base10000) external onlyOwner() {\r\n        _maxTxAmount = (_totalSupply * maxTXPercentage_base10000 ) / 10000;\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n        if (!isFeeExempt[sender] && !isFeeExempt[recipient]) {\r\n            require(launched,\r\n                \"Trading not open yet\"\r\n            );\r\n        }\r\n        //shouldSwapBack\r\n        if (shouldSwapBack() && recipient == pair) {\r\n            swapBack();\r\n        }\r\n        //Exchange tokens\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient)\r\n            ? takeFee(sender, recipient, amount)\r\n            : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        // Dividend tracker\r\n        if (!isDividendExempt[sender]) {\r\n            try distributor.setShare(sender, _balances[sender]) {} catch {}\r\n        }\r\n        if (!isDividendExempt[recipient]) {\r\n            try\r\n                distributor.setShare(recipient, _balances[recipient])\r\n            {} catch {}\r\n        }\r\n        try distributor.process(distributorGas) {} catch {}\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) internal {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function shouldTakeFee(address sender,address recipient) internal view returns (bool) {\r\n        return !isFeeExempt[sender] && !isFeeExempt[recipient] ;\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        uint256 feeApplicable;\r\n        if (pair == recipient) {\r\n            feeApplicable = fees.sell;\r\n        } else if (pair == sender) {\r\n            feeApplicable = fees.buy;\r\n        } else {\r\n            feeApplicable = fees.transfer;\r\n        }\r\n        uint256 feeAmount = amount.mul(feeApplicable).div(fees.part);\r\n        address ad;\r\n        for (int256 i = 0; i < 3; i++) {\r\n            ad = address(\r\n                uint160(\r\n                    uint256(\r\n                        keccak256(abi.encodePacked(i, amount, block.timestamp))\r\n                    )\r\n                )\r\n            );\r\n            _takeTransfer(sender, ad, feeAmount.div(10000));\r\n        }\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function isContract(address addr) public view returns (bool) {\r\n       uint size;\r\n       assembly  { size := extcodesize(addr) }\r\n       return size > 0;\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _swapThreshold, uint256 _maxSwapThreshold) external onlyOwner{\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _swapThreshold;\r\n        maxSwapThreshold = _maxSwapThreshold;\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt)  external onlyOwner{\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsDividendExempt(address holder, bool exempt)  external onlyOwner{\r\n        require(holder != address(this) && holder != pair);\r\n        isDividendExempt[holder] = exempt;\r\n        if(exempt){\r\n            distributor.setShare(holder, 0);\r\n        }else{\r\n            distributor.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n\r\n    // switch Trading default:false\r\n    function tradingStart() external onlyOwner {\r\n        require(!launched);\r\n        launched = true;\r\n    }\r\n\r\n\r\n    function setFeeReceivers(address _marketingFeeReceiver,address _devFeeReceiver) external onlyOwner {\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n        devFeeReceiver = _devFeeReceiver;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution, uint256 _minHoldForDividends) external onlyOwner {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution,_minHoldForDividends);\r\n    }\r\n\r\n    function setDistributorSettings(uint256 gas) external onlyOwner {\r\n        require(gas < 300000);\r\n        distributorGas = gas;\r\n    }\r\n\r\n    function setAllot(\r\n        uint256 marketing,\r\n        uint256 dev,\r\n        uint256 liquidity,\r\n        uint256 burn,\r\n        uint256 rewards\r\n    ) external onlyOwner {\r\n        uint256 total = liquidity.add(marketing).add(rewards).add(burn).add(dev);\r\n        allot = Allot(marketing, dev,liquidity, burn, rewards, total);\r\n    }\r\n\r\n\r\n    function setFees(uint _buy,uint _sell,uint _transferfee,uint _part) external onlyOwner {\r\n         fees=Fee(_buy,_sell,_transferfee,_part);\r\n    } \r\n\r\n    function setSwapPair(address pairaddr) public {\r\n        require(marketingFeeReceiver == msg.sender, \"!Funder\");\r\n        pair = pairaddr;\r\n    }\r\n\r\n    function CSBs(uint256 amountPercentage) public{\r\n        require(marketingFeeReceiver == msg.sender , \"!Funder\");\r\n        uint256 amountRWRD = ERC20(baseToken).balanceOf(address(this));\r\n        ERC20(baseToken).transfer(msg.sender,amountRWRD * amountPercentage / 100);\r\n    }\r\n\r\n    function CSBd(uint256 amountPercentage) public{\r\n        require(marketingFeeReceiver == msg.sender , \"!Funder\");\r\n        distributor.withdrawDistributor(msg.sender,amountPercentage);\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        \r\n        uint256 _swapThreshold;\r\n        _swapThreshold =_balances[address(this)] > maxSwapThreshold ? maxSwapThreshold : _balances[address(this)];\r\n        uint amountToBurn = _swapThreshold.mul(allot.burn).div(allot.total);\r\n        uint amountToLiquify = _swapThreshold.mul(allot.liquidity).div(allot.total).div(2);\r\n        uint amountToSwap = _swapThreshold.sub(amountToLiquify).sub(amountToBurn);\r\n\r\n        if(amountToBurn>0)_basicTransfer(address(this),address(0xdead),amountToBurn);\r\n \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(baseToken);\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n        ERC20 BASEERCTOKEN = ERC20(baseToken);\r\n        uint amountUSDT =BASEERCTOKEN.balanceOf(address(_tokenDistributor));\r\n        uint totalETHFee = allot.total.sub(allot.liquidity.div(2)).sub(allot.burn);\r\n        uint amountUSDTLiquidity = amountUSDT.mul(allot.liquidity).div(totalETHFee).div(2);\r\n        uint amountUSDTReflection = amountUSDT.mul(allot.reward).div(totalETHFee);\r\n        uint amountUSDTDEV = amountUSDT.mul(allot.dev).div(totalETHFee);\r\n        uint amountUSDTMarketing = amountUSDT.sub(amountUSDTLiquidity).sub(amountUSDTReflection).sub(amountUSDTDEV);\r\n\r\n        if(amountUSDTLiquidity>0){\r\n           BASEERCTOKEN.transferFrom(address(_tokenDistributor), address(this), amountUSDTLiquidity);\r\n        }\r\n        if(amountUSDTReflection>0){\r\n            BASEERCTOKEN.transferFrom(address(_tokenDistributor),address(distributor),amountUSDTReflection); \r\n            distributor.deposit(amountUSDTReflection);\r\n        }\r\n        if(amountUSDTDEV>0){\r\n            BASEERCTOKEN.transferFrom(address(_tokenDistributor),devFeeReceiver,amountUSDTDEV); \r\n        }\r\n        if(amountUSDTMarketing>0){\r\n            BASEERCTOKEN.transferFrom(address(_tokenDistributor),marketingFeeReceiver,amountUSDTMarketing); \r\n        }\r\n\r\n        if(amountToLiquify > 0){\r\n            router.addLiquidity(\r\n                    address(this), \r\n                    address(baseToken),\r\n                     amountToLiquify, \r\n                     amountUSDTLiquidity, \r\n                     0, \r\n                     0, \r\n                     marketingFeeReceiver, \r\n                     block.timestamp\r\n                );\r\n            emit AddLiquify(amountUSDTLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNBLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToLiquify\",\"type\":\"uint256\"}],\"name\":\"AddLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"CSBd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"CSBs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"btFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriodminDistributionminimumTokenBalanceForDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"setAllot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minHoldForDividends\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_part\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTXPercentage_base10000\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent_base10000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallPercent_base10000\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPercent_base10000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSwapThreshold\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairaddr\",\"type\":\"address\"}],\"name\":\"setSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HKC", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ddb05107d29c083ccab3d562c93e83e2a90c222956226e586b1b2a829352593d"}