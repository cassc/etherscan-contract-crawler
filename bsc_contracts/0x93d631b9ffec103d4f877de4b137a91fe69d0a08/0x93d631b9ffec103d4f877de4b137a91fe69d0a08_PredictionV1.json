{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PredictionV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract PredictionV1 is Ownable, Pausable, ReentrancyGuard {\\r\\n\\r\\n    AggregatorV3Interface public oracle;\\r\\n\\r\\n    address public operatorAddress; // address of the operator\\r\\n\\r\\n    uint256 public minBetAmount = 0.01 ether; // minimum betting amount (denominated in wei)\\r\\n    uint256 public treasuryFee; // treasury rate (e.g. 200 = 2%, 150 = 1.50%)\\r\\n    uint256 public treasuryAmount; // treasury amount that was not claimed\\r\\n\\r\\n    uint256 public currentEpoch; // current epoch for prediction round\\r\\n    uint256 public oracleLatestRoundId; // converted from uint80 (Chainlink)\\r\\n\\r\\n    mapping(uint256 => mapping(address => BetInfo)) public ledger;\\r\\n    mapping(uint256 => Round) public rounds;\\r\\n    mapping(address => uint256[]) public userRounds;\\r\\n\\r\\n    enum Position {\\r\\n        Bull,\\r\\n        Bear\\r\\n    }\\r\\n\\r\\n    struct Round {\\r\\n        uint256 epoch;\\r\\n        uint256 startTimestamp;\\r\\n        uint256 lockTimestamp;\\r\\n        uint256 closeTimestamp;\\r\\n        int256 lockPrice;\\r\\n        int256 closePrice;\\r\\n        uint256 lockOracleId;\\r\\n        uint256 closeOracleId;\\r\\n        uint256 totalAmount;\\r\\n        uint256 bullAmount;\\r\\n        uint256 bearAmount;\\r\\n        uint256 rewardBaseCalAmount;\\r\\n        uint256 rewardAmount;\\r\\n        bool calculated;\\r\\n    }\\r\\n\\r\\n    struct BetInfo {\\r\\n        Position position;\\r\\n        uint256 amount;\\r\\n        bool claimed; // default false\\r\\n    }\\r\\n\\r\\n    event BetBear(address indexed sender, uint256 indexed epoch, uint256 amount);\\r\\n    event BetBull(address indexed sender, uint256 indexed epoch, uint256 amount);\\r\\n    event Claim(address indexed sender, uint256 indexed epoch, uint256 amount);\\r\\n    event EndRound(uint256 indexed epoch, uint256 indexed roundId, int256 price);\\r\\n    event LockRound(uint256 indexed epoch, uint256 indexed roundId, int256 price);\\r\\n\\r\\n    event Pause(uint256 indexed epoch);\\r\\n    event RewardsCalculated(\\r\\n        uint256 indexed epoch,\\r\\n        uint256 rewardBaseCalAmount,\\r\\n        uint256 rewardAmount,\\r\\n        uint256 treasuryAmount\\r\\n    );\\r\\n\\r\\n    event StartRound(uint256 indexed epoch);\\r\\n    event Unpause(uint256 indexed epoch);\\r\\n\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(msg.sender == operatorAddress, \\\"Not operator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier notContract() {\\r\\n        require(!_isContract(msg.sender), \\\"Contract not allowed\\\");\\r\\n        require(msg.sender == tx.origin, \\\"Proxy contract not allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _oracleAddress,\\r\\n        address _operatorAddress,\\r\\n        uint256 _treasuryFee\\r\\n    ) {\\r\\n        oracle = AggregatorV3Interface(_oracleAddress);\\r\\n        operatorAddress = _operatorAddress;\\r\\n        treasuryFee = _treasuryFee;\\r\\n    }\\r\\n\\r\\n    function betBear() external payable whenNotPaused nonReentrant notContract {\\r\\n\\r\\n        uint256 epoch = _startNewRound();\\r\\n        require(msg.value >= minBetAmount, \\\"Bet amount must be greater than minBetAmount\\\");\\r\\n        require(ledger[epoch][msg.sender].amount == 0, \\\"Can only bet once per round\\\");\\r\\n\\r\\n        // Update round data\\r\\n        uint256 amount = msg.value;\\r\\n        Round storage round = rounds[epoch];\\r\\n        round.totalAmount = round.totalAmount + amount;\\r\\n        round.bearAmount = round.bearAmount + amount;\\r\\n\\r\\n        // Update user data\\r\\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\\r\\n        betInfo.position = Position.Bear;\\r\\n        betInfo.amount = amount;\\r\\n        userRounds[msg.sender].push(epoch);\\r\\n        if (epoch > 2) _safeEndRound(epoch - 2);\\r\\n        emit BetBear(msg.sender, epoch, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function betBull() external payable whenNotPaused nonReentrant notContract {\\r\\n        uint256 epoch = _startNewRound();\\r\\n        require(epoch == currentEpoch, \\\"Bet is too early/late\\\");\\r\\n        require(msg.value >= minBetAmount, \\\"Bet amount must be greater than minBetAmount\\\");\\r\\n        require(ledger[epoch][msg.sender].amount == 0, \\\"Can only bet once per round\\\");\\r\\n\\r\\n        // Update round data\\r\\n        uint256 amount = msg.value;\\r\\n        Round storage round = rounds[epoch];\\r\\n        round.totalAmount = round.totalAmount + amount;\\r\\n        round.bullAmount = round.bullAmount + amount;\\r\\n\\r\\n        // Update user data\\r\\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\\r\\n        betInfo.position = Position.Bull;\\r\\n        betInfo.amount = amount;\\r\\n        userRounds[msg.sender].push(epoch);\\r\\n        _safeEndRound(epoch - 2);\\r\\n        emit BetBull(msg.sender, epoch, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim reward for an array of epochs\\r\\n     * @param epochs: array of epochs\\r\\n     */\\r\\n    function claim(uint256[] calldata epochs) external nonReentrant notContract {\\r\\n        uint256 reward; // Initializes reward\\r\\n\\r\\n        for (uint256 i = 0; i < epochs.length; i++) {\\r\\n            require(rounds[epochs[i]].startTimestamp != 0, \\\"Round has not started\\\");\\r\\n            require(block.timestamp > rounds[epochs[i]].closeTimestamp, \\\"Round has not ended\\\");\\r\\n\\r\\n            uint256 addedReward = 0;\\r\\n\\r\\n            require(claimable(epochs[i], msg.sender), \\\"Not eligible for claim\\\");\\r\\n            Round memory round = rounds[epochs[i]];\\r\\n            addedReward = (ledger[epochs[i]][msg.sender].amount * round.rewardAmount) / round.rewardBaseCalAmount;\\r\\n\\r\\n            ledger[epochs[i]][msg.sender].claimed = true;\\r\\n            reward += addedReward;\\r\\n\\r\\n            emit Claim(msg.sender, epochs[i], addedReward);\\r\\n        }\\r\\n\\r\\n        if (reward > 0) {\\r\\n            _safeTransferBNB(address(msg.sender), reward);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function genesisStartRound() external onlyOwner {\\r\\n\\r\\n        (uint80 currentRoundId, ) = getPriceFromOracle();\\r\\n        currentEpoch = currentEpoch + 1;\\r\\n        Round storage round = rounds[currentEpoch];\\r\\n        round.lockOracleId = currentRoundId + 25;\\r\\n        round.closeOracleId = currentRoundId + 50;\\r\\n        round.startTimestamp = block.timestamp;\\r\\n        round.epoch = currentEpoch;\\r\\n        round.totalAmount = 0;\\r\\n\\r\\n        emit StartRound(currentEpoch);\\r\\n\\r\\n    }\\r\\n\\r\\n    function genesisEndRound(uint256 epoch) external onlyOwner {\\r\\n        _safeEndRound(epoch);\\r\\n    }\\r\\n\\r\\n    function _startNewRound() internal returns(uint256) {\\r\\n\\r\\n        (uint80 currentRoundId, ) = getPriceFromOracle();\\r\\n        Round storage round = rounds[currentEpoch];\\r\\n\\r\\n        if (round.lockOracleId > uint256(currentRoundId)) return currentEpoch;\\r\\n\\r\\n        _safeLockRound(currentEpoch);\\r\\n\\r\\n        currentEpoch = currentEpoch + 1;\\r\\n        round.lockOracleId = currentRoundId + 25;\\r\\n        round.closeOracleId = currentRoundId + 50;\\r\\n        round.startTimestamp = block.timestamp;\\r\\n        round.epoch = currentEpoch;\\r\\n        round.totalAmount = 0;\\r\\n        \\r\\n        emit StartRound(currentEpoch);\\r\\n        return currentEpoch;\\r\\n        \\r\\n    }\\r\\n\\r\\n    function bettable(uint256 epoch) public view returns (bool) {\\r\\n        (uint80 currentRoundId, ) = getPriceFromOracle();\\r\\n\\r\\n        return\\r\\n            rounds[epoch].lockOracleId != 0 &&\\r\\n            rounds[epoch].lockOracleId < uint256(currentRoundId);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _safeEndRound(uint256 epoch) internal returns(uint256){\\r\\n\\r\\n        Round storage round = rounds[epoch];\\r\\n        (uint80 roundIdC, int256 priceC, , , ) = oracle.getRoundData(uint80(round.closeOracleId));\\r\\n        \\r\\n        if (priceC > 0 && !round.calculated) {\\r\\n            round.closePrice = priceC;\\r\\n            round.closeTimestamp = block.timestamp;\\r\\n            _calculateRewards(epoch);\\r\\n            emit EndRound(epoch, roundIdC, priceC);\\r\\n        }\\r\\n        return uint256(priceC);\\r\\n    }\\r\\n\\r\\n    function _safeLockRound(uint256 epoch) internal returns(uint256){\\r\\n\\r\\n        Round storage round = rounds[epoch];\\r\\n        (uint80 roundIdL, int256 priceL, , , ) = oracle.getRoundData(uint80(round.lockOracleId));\\r\\n        \\r\\n        if (priceL > 0) {\\r\\n            round.lockPrice = priceL;\\r\\n            emit LockRound(epoch, roundIdL, priceL);\\r\\n        }\\r\\n\\r\\n        return uint256(priceL);\\r\\n    }\\r\\n\\r\\n    function pause() external whenNotPaused onlyOwner {\\r\\n        _pause();\\r\\n\\r\\n        emit Pause(currentEpoch);\\r\\n    }\\r\\n\\r\\n\\r\\n    function claimTreasury() external onlyOwner {\\r\\n        uint256 currentTreasuryAmount = treasuryAmount;\\r\\n        treasuryAmount = 0;\\r\\n        _safeTransferBNB(msg.sender, currentTreasuryAmount);\\r\\n\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(uint256 amount) external onlyOwner {\\r\\n\\r\\n        _safeTransferBNB(msg.sender, amount);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice called by the admin to unpause, returns to normal state\\r\\n     * Reset genesis state. Once paused, the rounds would need to be kickstarted by genesis\\r\\n     */\\r\\n    function unpause() external whenPaused onlyOwner {\\r\\n        _unpause();\\r\\n\\r\\n        emit Unpause(currentEpoch);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Set minBetAmount\\r\\n     * @dev Callable by admin\\r\\n     */\\r\\n    function setMinBetAmount(uint256 _minBetAmount) external whenPaused onlyOwner {\\r\\n        require(_minBetAmount != 0, \\\"Must be superior to 0\\\");\\r\\n        minBetAmount = _minBetAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set operator address\\r\\n     * @dev Callable by admin\\r\\n     */\\r\\n    function setOperator(address _operatorAddress) external onlyOwner {\\r\\n        require(_operatorAddress != address(0), \\\"Cannot be zero address\\\");\\r\\n        operatorAddress = _operatorAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set Oracle address\\r\\n     * @dev Callable by admin\\r\\n     */\\r\\n    function setOracle(address _oracle) external whenPaused onlyOwner {\\r\\n        require(_oracle != address(0), \\\"Cannot be zero address\\\");\\r\\n        oracleLatestRoundId = 0;\\r\\n        oracle = AggregatorV3Interface(_oracle);\\r\\n\\r\\n        // Dummy check to make sure the interface implements this function properly\\r\\n        oracle.latestRoundData();\\r\\n    }\\r\\n\\r\\n    function setTreasuryFee(uint256 _treasuryFee) external whenPaused onlyOwner {\\r\\n        treasuryFee = _treasuryFee;\\r\\n    }\\r\\n\\r\\n\\r\\n    function recoverToken(address _token, uint256 _amount) external onlyOwner {\\r\\n        IERC20(_token).transfer(address(msg.sender), _amount);\\r\\n    }\\r\\n\\r\\n    function getUserRounds(\\r\\n        address user,\\r\\n        uint256 cursor,\\r\\n        uint256 size\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory,\\r\\n            BetInfo[] memory,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 length = size;\\r\\n\\r\\n        if (length > userRounds[user].length - cursor) {\\r\\n            length = userRounds[user].length - cursor;\\r\\n        }\\r\\n\\r\\n        uint256[] memory values = new uint256[](length);\\r\\n        BetInfo[] memory betInfo = new BetInfo[](length);\\r\\n\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            values[i] = userRounds[user][cursor + i];\\r\\n            betInfo[i] = ledger[values[i]][user];\\r\\n        }\\r\\n\\r\\n        return (values, betInfo, cursor + length);\\r\\n    }\\r\\n\\r\\n    function getUserRoundsLength(address user) external view returns (uint256) {\\r\\n        return userRounds[user].length;\\r\\n    }\\r\\n\\r\\n    function claimable(uint256 epoch, address user) public view returns (bool) {\\r\\n        (uint80 currentRoundId, ) = getPriceFromOracle();\\r\\n        BetInfo memory betInfo = ledger[epoch][user];\\r\\n        Round memory round = rounds[epoch];\\r\\n        if (round.closeOracleId > uint256(currentRoundId)) return false;\\r\\n        (, int256 priceL, , , ) = oracle.getRoundData(uint80(round.lockOracleId));\\r\\n        (, int256 priceC, , , ) = oracle.getRoundData(uint80(round.closeOracleId));\\r\\n\\r\\n        if (priceL == priceC) return false;\\r\\n        return\\r\\n            betInfo.amount != 0 &&\\r\\n            !betInfo.claimed &&\\r\\n            ((priceC > priceL && betInfo.position == Position.Bull) ||\\r\\n                (priceC < priceL && betInfo.position == Position.Bear));\\r\\n    }\\r\\n\\r\\n    function _calculateRewards(uint256 epoch) internal {\\r\\n\\r\\n        Round storage round = rounds[epoch];\\r\\n        uint256 rewardBaseCalAmount;\\r\\n        uint256 treasuryAmt;\\r\\n        uint256 rewardAmount;\\r\\n\\r\\n        // Bull wins\\r\\n        if (round.closePrice > round.lockPrice) {\\r\\n            rewardBaseCalAmount = round.bullAmount;\\r\\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\\r\\n            rewardAmount = round.totalAmount - treasuryAmt;\\r\\n        }\\r\\n        // Bear wins\\r\\n        else if (round.closePrice < round.lockPrice) {\\r\\n            rewardBaseCalAmount = round.bearAmount;\\r\\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\\r\\n            rewardAmount = round.totalAmount - treasuryAmt;\\r\\n        }\\r\\n        // House wins\\r\\n        else {\\r\\n            rewardBaseCalAmount = 0;\\r\\n            rewardAmount = 0;\\r\\n            treasuryAmt = round.totalAmount;\\r\\n        }\\r\\n        round.rewardBaseCalAmount = rewardBaseCalAmount;\\r\\n        round.rewardAmount = rewardAmount;\\r\\n        round.calculated = true;\\r\\n        // Add to treasury\\r\\n        treasuryAmount += treasuryAmt;\\r\\n\\r\\n        emit RewardsCalculated(epoch, rewardBaseCalAmount, rewardAmount, treasuryAmt);\\r\\n    }\\r\\n\\r\\n    function _safeTransferBNB(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(\\\"\\\");\\r\\n        require(success, \\\"TransferHelper: BNB_TRANSFER_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function getPriceFromOracle() public view returns (uint80, int256) {\\r\\n        (uint80 roundId, int256 price, , , ) = oracle.latestRoundData();\\r\\n        require(\\r\\n            uint256(roundId) > oracleLatestRoundId,\\r\\n            \\\"Oracle update roundId must be larger than oracleLatestRoundId\\\"\\r\\n        );\\r\\n        return (roundId, price);\\r\\n    }\\r\\n\\r\\n    function getCurrentRound() public view returns(Round memory) {\\r\\n        return rounds[currentEpoch];\\r\\n    }\\r\\n\\r\\n    function _isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetBear\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetBull\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"EndRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"LockRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardBaseCalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"StartRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"betBear\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betBull\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"bettable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"epochs\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"genesisEndRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisStartRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"lockPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"closePrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lockOracleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeOracleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bullAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bearAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBaseCalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"calculated\",\"type\":\"bool\"}],\"internalType\":\"struct PredictionV1.Round\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFromOracle\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getUserRounds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"enum PredictionV1.Position\",\"name\":\"position\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct PredictionV1.BetInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserRoundsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ledger\",\"outputs\":[{\"internalType\":\"enum PredictionV1.Position\",\"name\":\"position\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleLatestRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"lockPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"closePrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lockOracleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeOracleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bullAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bearAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBaseCalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"calculated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBetAmount\",\"type\":\"uint256\"}],\"name\":\"setMinBetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PredictionV1", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee000000000000000000000000708718ba9508bb2320a5bd01e7a3364f18adacbb000000000000000000000000000000000000000000000000000000000000012c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}