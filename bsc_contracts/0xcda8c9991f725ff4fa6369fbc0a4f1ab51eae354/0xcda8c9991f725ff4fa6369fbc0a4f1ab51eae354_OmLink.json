{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0\r\n// File: contracts\\core\\SignVerifier.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ncontract SignVerifier {\r\n\r\n    struct Message {\r\n        uint256 networkId;\r\n        address token;\r\n        address from;\r\n        address to;\r\n        uint256 amount;\r\n        uint256 nonce;\r\n        bytes signature;\r\n        address signer;\r\n    }\r\n\r\n    struct NativeMessage {\r\n        uint256 networkId;\r\n        address from;\r\n        address to;\r\n        uint256 amount;\r\n        uint256 nonce;\r\n        bytes signature;\r\n        address signer;\r\n    }\r\n\r\n    /**\r\n     * @dev function that returns the hash of the encoded message\r\n     * @param networkId ID of the network\r\n     * @param token the address of the token's contract\r\n     * @param from the address of the sender\r\n     * @param to the address of the receiver\r\n     * @param amount the amount of tokens\r\n     * @param nonce the nonce of the message\r\n     *\r\n     * @return bytes32 message hash\r\n     */\r\n    function getMessageHash(\r\n        uint256 networkId, \r\n        address token, \r\n        address from, \r\n        address to, \r\n        uint256 amount, \r\n        uint256 nonce\r\n    )\r\n        public pure returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(networkId,token,from,to,amount,nonce));\r\n    }\r\n\r\n    function getNativeMessageHash(\r\n        uint256 networkId,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 nonce\r\n    )\r\n        public pure returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(networkId,from,to,amount,nonce));\r\n    }\r\n\r\n    /**\r\n     * @dev converts the signed message to the ETH signed message format\r\n     * by appending \\x19Ethereum Signed Message:\\n32\r\n     * \r\n     * @param messageHash the hash of the message\r\n     * @return bytes32\r\n     */\r\n    function getEthSignedMessageHash(bytes32 messageHash) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", messageHash));\r\n    }\r\n    \r\n    /**\r\n     * @dev the function that verifys that a message is indeed signed by the passed signer\r\n     * \r\n     * @param finalizeMessage a struct that has the message data\r\n     * \r\n     * @return bool, true if signer is correct, false if not\r\n     *\r\n     */\r\n    function verify(\r\n        Message memory finalizeMessage\r\n    )\r\n        public pure returns (bool)\r\n    {\r\n        bytes32 messageHash_ = getMessageHash(\r\n            finalizeMessage.networkId,\r\n            finalizeMessage.token,\r\n            finalizeMessage.from,\r\n            finalizeMessage.to,\r\n            finalizeMessage.amount,\r\n            finalizeMessage.nonce);\r\n        bytes32 ethSignedMessageHash_ = getEthSignedMessageHash(messageHash_);\r\n\r\n        return recoverSigner(ethSignedMessageHash_, finalizeMessage.signature) == finalizeMessage.signer;\r\n    }\r\n\r\n    function verifyNative(\r\n        NativeMessage memory finalizeMessage\r\n    )\r\n        public pure returns (bool)\r\n    {\r\n        bytes32 messageHash_ = getNativeMessageHash(\r\n            finalizeMessage.networkId,\r\n            finalizeMessage.from,\r\n            finalizeMessage.to,\r\n            finalizeMessage.amount,\r\n            finalizeMessage.nonce\r\n        );\r\n        bytes32 ethSignedMessageHash_ = getEthSignedMessageHash(messageHash_);\r\n\r\n        return recoverSigner(ethSignedMessageHash_,finalizeMessage.signature) == finalizeMessage.signer;\r\n    }\r\n\r\n    /**\r\n     * @dev function that recovers the signer of an eth signed message hash from signature\r\n     * \r\n     * @param ethSignedMessageHash signed message hash\r\n     * @param signature signature\r\n     *\r\n     * @return address of the signer\r\n     */\r\n    function recoverSigner(bytes32 ethSignedMessageHash, bytes memory signature)\r\n        public pure returns (address)\r\n    {\r\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(signature);\r\n\r\n        return ecrecover(ethSignedMessageHash, v, r, s);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev function that splits the signature\r\n     * \r\n     * @param sig signature\r\n     * \r\n     * @return r bytes32\r\n     * @return s bytes32\r\n     * @return v uint8\r\n     */\r\n\r\n    function splitSignature(bytes memory sig)\r\n        public pure returns (bytes32 r, bytes32 s, uint8 v)\r\n    {\r\n        require(sig.length == 65, \"SignVerifier: invalid signature length\");\r\n\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\access\\IAccessControl.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Strings.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\AccessControl.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\abstract\\Guarded.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n/**\r\n * @dev Guard contract that adds extra functionality to the {AccessControl} contract\r\n * \r\n * Defines `ADMIN_ROLE`, `MINTER_ROLE`, `BURNER_ROLE`\r\n * adds `onlyOwner`, `onlyAdmin`, `onlyMinter`, `onlyBurner`, `nonPaused`, `paused` modifiers\r\n * \r\n *  */\r\n\r\nabstract contract Guarded is AccessControl{\r\n\r\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    \r\n    address private _owner;\r\n    bool private _paused;\r\n\r\n    modifier onlyOwner ()\r\n    {\r\n        require(_owner == _msgSender(), \"Guard: not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin ()\r\n    {\r\n        require(hasRole(ADMIN_ROLE, _msgSender()), \"Guard: not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMinter () {\r\n        require(hasRole(MINTER_ROLE, _msgSender()), \"Guard: not minter\");\r\n        _;\r\n    }\r\n\r\n    modifier nonPaused () {\r\n        require(!_paused, \"Guard: contract paused\");\r\n        _;\r\n    }\r\n\r\n    modifier paused () {\r\n        require(_paused, \"Guard: contract is not paused\");\r\n        _;\r\n    }\r\n\r\n    constructor()\r\n    {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _setupRole(ADMIN_ROLE, _msgSender());\r\n        _owner = _msgSender();\r\n        _paused = false;\r\n    }\r\n\r\n    function pause() public onlyAdmin nonPaused returns (bool) {\r\n        _paused = true;\r\n        emit ContractPaused(block.number,_msgSender());\r\n        return true;\r\n    }\r\n\r\n    function unpause() public onlyAdmin paused returns (bool) {\r\n        _paused = false;\r\n        emit ContractUnpaused(block.number,_msgSender());\r\n        return true;\r\n    }\r\n\r\n    function isPaused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function transferOwner (address owner) public onlyOwner returns (bool) {\r\n        grantRole(DEFAULT_ADMIN_ROLE, owner);\r\n        grantRole(ADMIN_ROLE, owner);\r\n\r\n        revokeRole(DEFAULT_ADMIN_ROLE,_owner);\r\n        revokeRole(ADMIN_ROLE,_owner);\r\n\r\n        emit OwnerChanged(_owner,owner);\r\n\r\n        _owner = owner;\r\n\r\n        return true;\r\n    }\r\n\r\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) public onlyOwner {\r\n        _setRoleAdmin(role,adminRole);\r\n    }\r\n    \r\n    event ContractPaused(uint256 blockHeight, address admin);\r\n    event ContractUnpaused(uint256 blockHeight, address admin);\r\n    event OwnerChanged(address previousOwner, address currentOwner);\r\n\r\n}\r\n\r\n// File: contracts\\abstract\\Blacklistable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n/**\r\n * @dev Blacklist module that allows receivers or transaction senders \r\n * to be blacklisted.\r\n */\r\n\r\nabstract contract Blacklistable is Guarded {\r\n\r\n    address public _blacklister;\r\n\r\n    mapping(address => bool) internal _blacklisted;\r\n\r\n    /**\r\n     * @dev Modifier that checks the msg.sender for blacklisting related operations\r\n     */\r\n    modifier onlyBlacklister() {\r\n        require(_blacklister == _msgSender(),\"Blacklistable: account is not blacklister\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier that checks the account is not blacklisted\r\n     * @param account The address to be checked\r\n     */\r\n    modifier notBlacklisted(address account) {\r\n        require(!_blacklisted[account],\"Blacklistable: account is blacklisted\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function that checks if an address is blacklisted\r\n     * @param account The address to be checked\r\n     * @return bool, true if account is blacklisted, false if not\r\n     */\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return _blacklisted[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Function that blacklists an account\r\n     * Emits {Blacklisted} event.\r\n     * \r\n     * @notice can only be called by blacklister\r\n     * @param account The address to be blacklisted\r\n     */\r\n    function blacklist(address account) public onlyBlacklister {\r\n        _blacklisted[account] = true;\r\n        emit Blacklisted(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Function that removes an address from blacklist\r\n     * Emits {UnBlacklisted} event\r\n     * \r\n     * @notice can only be called by blacklister\r\n     * @param account to be unblacklisted\r\n     */\r\n    function unBlacklist(address account) public onlyBlacklister {\r\n        _blacklisted[account] = false;\r\n        emit UnBlacklisted(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Function that updates the current blacklister account\r\n     * Emits {BlacklisterChanged} event\r\n     * \r\n     * @notice can only be called by the owner of the contract\r\n     * @param newBlacklister address that will be the new blacklister\r\n     */\r\n    function updateBlacklister(address newBlacklister) external onlyOwner {\r\n        require(\r\n            newBlacklister != address(0),\r\n            \"Blacklistable: new blacklister is the zero address\"\r\n        );\r\n        _blacklister = newBlacklister;\r\n        emit BlacklisterChanged(newBlacklister);\r\n    }\r\n\r\n    event Blacklisted(address indexed account);\r\n    event UnBlacklisted(address indexed account);\r\n    event BlacklisterChanged(address indexed newBlacklister);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /*function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }*/\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\abstract\\TokenRecover.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\nabstract contract TokenRecover is Guarded {\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    function recoverERC20(address token, address recipient, uint256 amount) public onlyOwner() returns (bool)\r\n    {\r\n        IERC20(token).safeTransfer(recipient,amount);\r\n        emit ERC20Recovered(token,recipient,amount);\r\n        return true;\r\n    }\r\n\r\n    event ERC20Recovered(address token, address recipient, uint256 amount);\r\n}\r\n\r\n// File: contracts\\includes\\Fiber.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n// Author: Osman Kuzucu\r\n// https://github.com/open-money\r\n// osman@openmoney.com.tr\r\n\r\n\r\n\r\n\r\ncontract Fiber is Guarded, Blacklistable, TokenRecover {\r\n\r\n    mapping(address => bool) public _supportedTokens;\r\n    mapping(address => bool) public _isLinkToken;\r\n\r\n    mapping (address => bool) internal _verifiedSigners;\r\n\r\n    bool private _isSupportedNative = false;\r\n\r\n    /**\r\n     * @dev modifier that checks whether the link token is supported or not\r\n     */\r\n    modifier onlySupportedToken(address contractAddress) {\r\n        require(isSupportedToken(contractAddress),\"Fiber: token not supported\");\r\n        _;\r\n    }\r\n\r\n    /** \r\n     * @dev modifier that checks the signature is from a verified signer\r\n     */\r\n    modifier onlyVerifiedSigner(address signer) {\r\n        require(_verifiedSigners[signer] == true,\"Tracked:signer is not verified\");\r\n        _;\r\n    }\r\n\r\n    modifier isSupportedNative() {\r\n        require(_isSupportedNative,\"Fiber: Native not supported\");\r\n        _;\r\n    }\r\n\r\n    function isVerifiedSigner (address signer) public view returns (bool){\r\n        return _verifiedSigners[signer];\r\n    }\r\n\r\n    function isSupportedToken (address contractAddress) public view returns (bool)\r\n    {\r\n        return _supportedTokens[contractAddress];\r\n    }\r\n\r\n    /** \r\n     * @dev function tat adds a new verified signer\r\n     * called only by the owner\r\n     */\r\n    function addVerifiedSigner (address signer) public onlyOwner() returns (bool)\r\n    {\r\n        _verifiedSigners[signer] = true;\r\n        return true;\r\n    }\r\n\r\n    /** \r\n     * @dev function that removes a verified signer\r\n     * called only by the owner\r\n     */\r\n    function removeVerifiedSigner (address signer) public onlyOwner() returns (bool) {\r\n        _verifiedSigners[signer] = false;\r\n        return true;\r\n    }\r\n\r\n    /** \r\n     * @dev function that checks whether the token is LinkToken or not\r\n     */\r\n    function isLinkToken (address contractAddress) public view returns (bool) {\r\n        return _isLinkToken[contractAddress];\r\n    }\r\n\r\n    /**\r\n     * @dev function that adds supported token\r\n     */\r\n    function addSupportedToken (address contractAddress, bool isLToken) public onlyOwner returns (bool)\r\n    {\r\n        emit SupportedTokenAdded(contractAddress,isLToken, msg.sender);\r\n        return _addSupportedToken(contractAddress,isLToken);\r\n    }\r\n\r\n    /**\r\n     * @dev function that removes supported token\r\n     */\r\n    function removeSupportedToken (address contractAddress) public onlyOwner returns (bool)\r\n    {\r\n        emit SupportedTokenRemoved(contractAddress, msg.sender);\r\n        return _removeSupportedToken (contractAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev internal function that adds supported token\r\n     */\r\n    function _addSupportedToken (address contractAddress,bool isLToken) internal virtual returns (bool)\r\n    {\r\n        _supportedTokens[contractAddress] = true;\r\n        _isLinkToken[contractAddress] = isLToken;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev internal function that removes supported token\r\n     */\r\n    function _removeSupportedToken (address contractAddress) internal virtual returns (bool)\r\n    {\r\n        _supportedTokens[contractAddress] = false;\r\n        _isLinkToken[contractAddress] = false;\r\n        return true;\r\n    }\r\n\r\n    function changeNativeSupport(bool newValue) public onlyOwner() returns (bool)\r\n    {\r\n        _isSupportedNative = newValue;\r\n        return true;\r\n    }\r\n\r\n    event SupportedTokenAdded(address contractAddress, bool isLToken, address admin);\r\n    event SupportedTokenRemoved(address contractAddress, address admin);\r\n\r\n}\r\n\r\n// File: contracts\\includes\\Tracked.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n/**\r\n * @title omLink tracking contract \r\n *\r\n * @author Osman Kuzucu - osman@openmoney.com.tr\r\n * https://github.com/nithronium\r\n * \r\n * @dev this contract tracks the nonces and eliminates duplicate minting\r\n */\r\ncontract Tracked {\r\n\r\n    /** \r\n     * \r\n     * @dev struct for a given nonce with `token` and `nonce`\r\n     *\r\n     */\r\n    struct nonceDataStruct {\r\n        bool _isUsed;\r\n        uint256 _inBlock;\r\n    }\r\n\r\n    /** \r\n     * \r\n     * @dev struct for the nonces per token address\r\n     *\r\n     */\r\n    struct contractTrackerStruct {\r\n        uint256 _biggestWithdrawNonce;\r\n        uint256 _depositNonce;\r\n        mapping (uint256 => nonceDataStruct) _nonces;\r\n    }\r\n\r\n    mapping (address => contractTrackerStruct) internal _tracker;\r\n\r\n    contractTrackerStruct _nativeTracker;\r\n\r\n\r\n    /**\r\n     * @dev modifier that checks whethether a nonce is used or not \r\n     * \r\n     * @param token token contract address\r\n     * @param nonce nonce to query\r\n     *\r\n     */\r\n    modifier nonUsedNonce(address token, uint nonce) {\r\n        require(_tracker[token]._nonces[nonce]._isUsed == false, \"Tracker: nonce already used\");\r\n        _;\r\n    }\r\n\r\n    modifier nonUsedNativeNonce(uint nonce) {\r\n        require(_nativeTracker._nonces[nonce]._isUsed == false,\"Tracker: native nonce already used\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev function that marks a nonce as used\r\n     *\r\n     * emits {NonceUsed} event\r\n     * \r\n     * @param token token contract address\r\n     * @param nonce the nonce to be marked as used\r\n     * \r\n     */\r\n    function useNonce(address token, uint nonce) internal nonUsedNonce(token,nonce) {\r\n        _tracker[token]._nonces[nonce]._isUsed = true;\r\n        _tracker[token]._nonces[nonce]._inBlock = block.number;\r\n\r\n        /**\r\n         * Sets the contract's biggest withdraw nonce \r\n         * if current withdraw nonce is the known biggest one\r\n         * \r\n         * this is for information purposes only\r\n         */\r\n        if(nonce > _tracker[token]._biggestWithdrawNonce) {\r\n            _tracker[token]._biggestWithdrawNonce = nonce;\r\n        }\r\n\r\n        emit NonceUsed(token,nonce,block.number);\r\n    }\r\n\r\n    /**\r\n     * @dev gets information about the given withdrawal nonce \r\n     * of the any given token\r\n     *\r\n     * @param token token contract address\r\n     * @param nonce nonce to be queried\r\n     * \r\n     * @return (bool,uint256) \r\n     * \r\n     */\r\n    function getNonceData(address token, uint256 nonce) public view returns (bool,uint256) {\r\n        return(_tracker[token]._nonces[nonce]._isUsed,_tracker[token]._nonces[nonce]._inBlock);\r\n    }\r\n\r\n    /**\r\n     * @dev checks if a withdraw nonce has been used before\r\n     * \r\n     * @param token token contract address\r\n     * @param nonce nonce to be queried\r\n     * \r\n     * @return bool\r\n     *\r\n     */\r\n    function isUsedNonce(address token, uint256 nonce) public view returns (bool) {\r\n        return(_tracker[token]._nonces[nonce]._isUsed);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @dev increments the deposit nonce of the given token\r\n     * \r\n     * @param token token contract address\r\n     * \r\n     */\r\n    function depositNonce(address token) internal {\r\n        _tracker[token]._depositNonce+=1;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @dev gets the current deposit nonce of the given token\r\n     *\r\n     * @param token token contract address\r\n     * \r\n     * @return uint256\r\n     */\r\n    function getDepositNonce (address token) public view returns (uint256) {\r\n        return _tracker[token]._depositNonce;\r\n    }\r\n\r\n    function nativeDepositNonce() internal {\r\n        _nativeTracker._depositNonce+=1;\r\n    }\r\n\r\n    function getNativeDepositNonce() public view returns (uint256) {\r\n        return _nativeTracker._depositNonce;\r\n    }\r\n\r\n    function isUsedNativeNonce(uint256 nonce) public view returns (bool) {\r\n        return(_nativeTracker._nonces[nonce]._isUsed);\r\n    }\r\n\r\n    function useNativeNonce(uint nonce) internal nonUsedNativeNonce(nonce) {\r\n        _nativeTracker._nonces[nonce]._isUsed = true;\r\n        _nativeTracker._nonces[nonce]._inBlock = block.number;\r\n\r\n        /**\r\n         * Sets the contract's biggest withdraw nonce \r\n         * if current withdraw nonce is the known biggest one\r\n         * \r\n         * this is for information purposes only\r\n         */\r\n        if(nonce > _nativeTracker._biggestWithdrawNonce) {\r\n            _nativeTracker._biggestWithdrawNonce = nonce;\r\n        }\r\n\r\n        emit NativeNonceUsed(nonce,block.number);\r\n    }\r\n\r\n    event NonceUsed(address token, uint256 nonce, uint256 blockNumber);\r\n    event NativeNonceUsed(uint256 nonce, uint256 blockNumber);\r\n}\r\n\r\n// File: contracts\\omLink.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n// Author: Osman Kuzucu\r\n// https://github.com/open-money\r\n// osman@openmoney.com.tr\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev required interface for ERC20 compatible tokens\r\n * @notice the ERC20 is not fully implemented as omLink just requires 4 methods\r\n *\r\n */\r\n\r\ninterface ERC20Tokens {\r\n    function burnFrom(address account, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function mintTo(address account, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract OmLink is Fiber, SignVerifier, Tracked\r\n{\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n     * @dev chain ID of the contract where it is deployed\r\n     *\r\n     */\r\n    uint256 public _chainId;\r\n\r\n    /**\r\n     * @dev finalizer struct because of the compiler error\r\n     * this struct is used for finalizing the transaction on the target chain\r\n     * \r\n     */\r\n    struct finalizer {\r\n        uint256 toChain;\r\n        address from;\r\n        address to;\r\n        uint256 amount;\r\n        address tokenAddress;\r\n        uint256 nonce;\r\n        address signer;\r\n        bytes signature;\r\n    }\r\n\r\n    /** \r\n     * @dev set chainId\r\n     * \r\n     */\r\n    constructor(uint256 chainId) {\r\n        _chainId = chainId;\r\n    }\r\n\r\n\r\n    /** \r\n     * @dev deposit function\r\n     * \r\n     * emits {LinkStarted} event\r\n     * \r\n     * @param toChain target chain id\r\n     * @param token token contract address\r\n     * @param to receiver address\r\n     * @param amount amount of tokens to be transferred\r\n     *\r\n     * @return bool \r\n     */\r\n    function deposit(\r\n        uint256 toChain,\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) public \r\n        onlySupportedToken(token) \r\n        notBlacklisted(msg.sender)\r\n        notBlacklisted(to)\r\n        nonPaused()\r\n        returns (bool) {\r\n\r\n            /** \r\n             *\r\n             * @dev Checks whether a token is LinkToken or not,\r\n             * if the token is not LinkToken, it tansfers tokens from the user to the omLink contract\r\n             * \r\n             */\r\n            if(isLinkToken(token)) {\r\n                require(ERC20Tokens(token).burnFrom(msg.sender,amount),\"omLink: cannot burn tokens\");\r\n            } else {\r\n                IERC20(token).safeTransferFrom(msg.sender,address(this),amount);\r\n            }\r\n\r\n            /**\r\n             * \r\n             * @dev increment the deposit nonce of the said token so that \r\n             * backend servers won't reprocess the same events\r\n             * this is required for event handling\r\n             *\r\n             */\r\n            depositNonce(token);\r\n\r\n\r\n            emit LinkStarted(toChain,token,msg.sender,to,amount,getDepositNonce(token));\r\n\r\n            //in case contract is called by another contract later\r\n            return true;\r\n    }\r\n\r\n    /**\r\n     * @dev deposit function for native tokens\r\n     * \r\n     * emits {LinkStarted} event with address(0) as contract address\r\n     * \r\n     * @param toChain target chain id\r\n     * @param to receiving address\r\n     * @param amount receiving amount\r\n     *\r\n     * @return bool\r\n     *\r\n     */\r\n    function depositNative(\r\n        uint256 toChain,\r\n        address to,\r\n        uint256 amount\r\n    ) payable public \r\n        isSupportedNative()\r\n        notBlacklisted(msg.sender)\r\n        notBlacklisted(to)\r\n        nonPaused()\r\n        returns (bool) {\r\n            /**\r\n             * @dev checks whether the amount calling the function \r\n             * is equal with the actual transacted native token\r\n             * reverts if not\r\n             *\r\n             * @notice because the native token deposit is already \r\n             * credited with the transaction, we don't require \r\n             * any transfer event\r\n             */\r\n            require(msg.value == amount,\"omLink: wrong native amount\");\r\n\r\n            /**\r\n             * @dev increments the native deposit nonce\r\n             *\r\n             */\r\n            nativeDepositNonce();\r\n\r\n            emit LinkStarted(toChain,address(0),msg.sender,to,amount,getNativeDepositNonce());\r\n\r\n            return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @dev implementation of the link finalizer, this function processes \r\n     * the coupon provided by the verified signer backend and mints & transfers \r\n     * the signed amount to the receiving address\r\n     * \r\n     * Checks for whether the token is supported with `onlySupportedToken` modifier\r\n     * Checks for blacklis with `notBlacklisted` modifier\r\n     * Checks for whether contract is paused with `nonPaused` modifier\r\n     * Checks whether the signature is from a verified signer with `onlyVerifiedSigner` modifier\r\n     * \r\n     * @param toChain the chainId of the receiving chain\r\n     * @param token the contract address of the token\r\n     * @param from the sender\r\n     * @param to the receiver\r\n     * @param amount the amount of tokens to be minted & transferred from\r\n     * @param nonce the nonce of the transaction coupon\r\n     * @param signature the signed message from the server\r\n     * @param signer the address of the coupon signer\r\n     * \r\n     * @return bool \r\n     */\r\n    function finalize(\r\n        uint256 toChain,\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 nonce,\r\n        bytes memory signature,\r\n        address signer\r\n    ) public \r\n        onlySupportedToken(token) \r\n        notBlacklisted(msg.sender)\r\n        notBlacklisted(to)\r\n        nonPaused()\r\n        onlyVerifiedSigner(signer)\r\n        returns (bool) {\r\n\r\n\r\n            /** \r\n             * \r\n             * @dev makes sure that the coupon is being processed by the correct chain\r\n             * and the nonce is not used before\r\n             */\r\n            require(_chainId == toChain,\"omLink:incorrect chain\");\r\n            require(!isUsedNonce(token,nonce),\"Tracked:used nonce\");\r\n\r\n            /** \r\n             * \r\n             * @dev passing function parameters to the `messageStruct_` element \r\n             * to solve the Stack too deep error and verifies whether the message is real or not\r\n             *\r\n             * \r\n             */\r\n            \r\n            Message memory messageStruct_;\r\n\r\n            messageStruct_.networkId = toChain;\r\n            messageStruct_.token = token;\r\n            messageStruct_.from = from;\r\n            messageStruct_.to = to;\r\n            messageStruct_.amount = amount;\r\n            messageStruct_.nonce = nonce;\r\n            messageStruct_.signature = signature;\r\n            messageStruct_.signer = signer;\r\n\r\n            require(verify(messageStruct_),\"omLink: signature cant be verified\");\r\n\r\n            /** \r\n             * \r\n             * @dev uses the nonce on the current token address\r\n             * and mints the token if it's mintable, transfers if not.\r\n             */\r\n\r\n            useNonce(token,nonce);\r\n\r\n            if( isLinkToken(token) ) {\r\n                ERC20Tokens(token).mintTo(to,amount);\r\n            } else {\r\n                IERC20(token).safeTransfer(to,amount);\r\n            }\r\n\r\n            /** \r\n             * \r\n             * @dev emits {LinkFinalized} event to make sure the backend \r\n             * server also processes the coupon as used\r\n             * \r\n             */\r\n            emit LinkFinalized(\r\n                messageStruct_.networkId,\r\n                messageStruct_.token,\r\n                messageStruct_.from,\r\n                messageStruct_.to,\r\n                messageStruct_.amount,\r\n                messageStruct_.nonce,\r\n                messageStruct_.signer);\r\n\r\n            return true;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @dev implementation of the link finalizer on receiving native currency\r\n     * this function processes the coupon provided by the verified signer and \r\n     * transfers the amount of native tokens to the receiving address\r\n     *\r\n     * Checks for whether native token bridging is supported on deployed network\r\n     * Checks whether the sending or receiving address is blacklisted\r\n     * Checks for signature provided and signer\r\n     *\r\n     * @param toChain the chainId of the receiving chain\r\n     * @param from the sender\r\n     * @param to the receiver\r\n     * @param amount the amount of tokens to be minted & transferred from\r\n     * @param nonce the nonce of the transaction coupon\r\n     * @param signature the signed message from the server\r\n     * @param signer the address of the coupon signer\r\n     * \r\n     * @return bool\r\n     * */\r\n    function finalizeNative(\r\n        uint256 toChain,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 nonce,\r\n        bytes memory signature,\r\n        address signer\r\n    ) public \r\n        isSupportedNative()\r\n        notBlacklisted(msg.sender)\r\n        notBlacklisted(to)\r\n        nonPaused()\r\n        onlyVerifiedSigner(signer)\r\n        returns (bool) {\r\n            require(_chainId == toChain,\"omLink:incorrect chain\");\r\n            require(!isUsedNativeNonce(nonce),\"Tracked:used nonce\");\r\n\r\n            NativeMessage memory messageStruct_;\r\n\r\n            messageStruct_.networkId = toChain;\r\n            messageStruct_.from = from;\r\n            messageStruct_.to = to;\r\n            messageStruct_.amount = amount;\r\n            messageStruct_.nonce = nonce;\r\n            messageStruct_.signature = signature;\r\n            messageStruct_.signer = signer;\r\n\r\n            require(verifyNative(messageStruct_),\"omLink: message cant be verified\");\r\n            require(address(this).balance >= amount,\"omLink: not enough native\");\r\n\r\n            useNativeNonce(nonce);\r\n\r\n            address payable receiver = payable(to);\r\n            receiver.transfer(amount);\r\n\r\n            emit LinkFinalized(\r\n                messageStruct_.networkId,\r\n                address(0),\r\n                messageStruct_.from,\r\n                messageStruct_.to,\r\n                messageStruct_.amount,\r\n                messageStruct_.nonce,\r\n                messageStruct_.signer\r\n            );\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n    function invalidateNonce(address token, uint256 nonce) public onlyOwner returns (bool) {\r\n        \r\n        require(!isUsedNonce(token,nonce),\"Tracked:used nonce\");\r\n        useNonce(token,nonce);\r\n\r\n        emit NonceInvalidated(_chainId,token,msg.sender,nonce,block.number);\r\n        return true;\r\n    }\r\n\r\n    function invalidateNative(uint256 nonce) public onlyOwner returns (bool) {\r\n        require(!isUsedNativeNonce(nonce),\"Tracked:used nonce\");\r\n        useNativeNonce(nonce);\r\n\r\n        emit NativeNonceInvalidated(_chainId,msg.sender,nonce,block.number);\r\n        return true;\r\n    }\r\n\r\n\r\n    event LinkStarted(uint256 toChain, address tokenAddress, address from, address to, uint256 amount, uint256 indexed depositNonce);\r\n    event LinkFinalized(uint256 chainId, address tokenAddress, address from, address to, uint256 amount, uint256 indexed nonce, address signer);\r\n    \r\n    event NonceInvalidated(uint256 chainId, address tokenAddress, address owner, uint256 indexed nonce, uint atBlock);\r\n    event NativeNonceInvalidated(uint256 chainId, address owner, uint256 indexed nonce, uint atBlock);\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBlacklister\",\"type\":\"address\"}],\"name\":\"BlacklisterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ContractPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ContractUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"LinkFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"LinkStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"atBlock\",\"type\":\"uint256\"}],\"name\":\"NativeNonceInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"NativeNonceUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"atBlock\",\"type\":\"uint256\"}],\"name\":\"NonceInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"NonceUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLToken\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SupportedTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SupportedTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnBlacklisted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_blacklister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isLinkToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLToken\",\"type\":\"bool\"}],\"name\":\"addSupportedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"addVerifiedSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"changeNativeSupport\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"finalizeNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDepositNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"networkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNativeDepositNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"networkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getNativeMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getNonceData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"invalidateNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"invalidateNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isLinkToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isSupportedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"isUsedNativeNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"isUsedNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isVerifiedSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ethSignedMessageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"removeSupportedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"removeVerifiedSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBlacklister\",\"type\":\"address\"}],\"name\":\"updateBlacklister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"networkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"internalType\":\"struct SignVerifier.Message\",\"name\":\"finalizeMessage\",\"type\":\"tuple\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"networkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"internalType\":\"struct SignVerifier.NativeMessage\",\"name\":\"finalizeMessage\",\"type\":\"tuple\"}],\"name\":\"verifyNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "OmLink", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000038", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fed5aaaf41dd4d62ba5bb8d4af02b73523fa3cf8eac2aafe986a37e788d59ab7"}