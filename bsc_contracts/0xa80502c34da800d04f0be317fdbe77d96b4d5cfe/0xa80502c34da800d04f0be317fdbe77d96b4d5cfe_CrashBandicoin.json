{"SourceCode": "// \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588    \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588      \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588                   \r\n// \u2588\u2588   \u2588\u2588 \u2588\u2588      \u2588\u2588    \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588    \u2588\u2588     \u2588\u2588  \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588   \u2588\u2588                  \r\n// \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588    \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588    \u2588\u2588   \u2588\u2588    \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588 \u2588\u2588  \u2588\u2588                   \r\n// \u2588\u2588   \u2588\u2588 \u2588\u2588       \u2588\u2588  \u2588\u2588  \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588    \u2588\u2588  \u2588\u2588     \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588  \u2588\u2588 \u2588\u2588                   \r\n// \u2588\u2588   \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588   \u2588\u2588\u2588\u2588    \r\n\r\n// SAFU CONTRACT BY REVOLUZION\r\n\r\n//Revoluzion Ecosystem\r\n//WEB: https://revoluzion.io\r\n//DAPP: https://revoluzion.app\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.16;\r\n\r\n// Library\r\n\r\nabstract contract Ownable {\r\n    \r\n    // DATA\r\n\r\n    address private _owner;\r\n\r\n    // MODIFIER\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    // EVENT\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // FUNCTION\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// Interface\r\n\r\ninterface IERC20 {\r\n    \r\n    //EVENT \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // FUNCTION\r\n\r\n    function name() external view returns (string memory);\r\n    \r\n    function symbol() external view returns (string memory);\r\n    \r\n    function decimals() external view returns (uint8);\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IFactory {\r\n\r\n    // FUNCTION\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n\r\n    // FUNCTION\r\n\r\n    function WETH() external pure returns (address);\r\n        \r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n    \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable;\r\n}\r\n\r\n// Token\r\n\r\ncontract CrashBandicoin is Ownable, IERC20 {\r\n\r\n    // DATA\r\n\r\n    string private constant NAME = \"Crash Bandicoin\";\r\n    string private constant SYMBOL = \"CBC\";\r\n\r\n    uint8 private constant DECIMALS = 9;\r\n\r\n    uint256 private _totalSupply;\r\n    \r\n    uint256 public constant FEEDENOMINATOR = 10_000;\r\n\r\n    uint256 public buyMarketingFee = 200;\r\n    uint256 public buyNitroFee = 100;\r\n    uint256 public sellMarketingFee = 200;\r\n    uint256 public sellNitroFee = 100;\r\n    uint256 public transferMarketingFee = 0;\r\n    uint256 public transferNitroFee = 0;\r\n    uint256 public marketingFeeCollected = 0;\r\n    uint256 public nitroFeeCollected = 0;\r\n    uint256 public totalFeeCollected = 0;\r\n    uint256 public marketingFeeRedeemed = 0;\r\n    uint256 public nitroFeeRedeemed = 0;\r\n    uint256 public totalFeeRedeemed = 0;\r\n    uint256 public minSwap = 100_000 gwei;\r\n\r\n    bool private constant ISCBC = true;\r\n\r\n    bool public tradeEnabled = false;\r\n    bool public isFeeActive = false;\r\n    bool public isFeeLocked = false;\r\n    bool public isSwapEnabled = false;\r\n    bool public inSwap = false;\r\n\r\n    address public immutable projectOwner;\r\n\r\n    address public constant ZERO = address(0);\r\n    address public constant DEAD = address(0xdead);\r\n\r\n    address public nitroReceiver = 0x1c1851ff52E3AEcC7bEc524a0fB2F3F8F1616946;\r\n    address public marketingReceiver = 0xE9aDAA0C22979d3DA28d77EE255756a522641796;\r\n\r\n    address public pair;\r\n    address public presaleAddress;\r\n    address public presaleFactory;\r\n    \r\n    IRouter public router;\r\n\r\n    // MAPPING\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public isExcludeFromFees;\r\n\r\n    // MODIFIER\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n\r\n    constructor(\r\n        address routerAddress,\r\n        address projectOwnerAddress\r\n    ) Ownable () {\r\n        require(projectOwnerAddress != ZERO, \"Cannot set project owner address as zero address.\");\r\n        _mint(msg.sender, 1_000_000_000 gwei);\r\n        projectOwner = projectOwnerAddress;\r\n\r\n        isExcludeFromFees[routerAddress] = true;\r\n        router = IRouter(routerAddress);\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n    }\r\n\r\n    // EVENT\r\n\r\n    event UpdateRouter(address oldRouter, address newRouter, uint256 timestamp);\r\n\r\n    event UpdateMinSwap(uint256 oldMinSwap, uint256 newMinSwap, uint256 timestamp);\r\n\r\n    event UpdateFeeActive(bool oldStatus, bool newStatus, uint256 timestamp);\r\n\r\n    event UpdateSwapEnabled(bool oldStatus, bool newStatus, uint256 timestamp);\r\n\r\n    event UpdateMarketingReceiver(address oldMarketingReceiver, address newMarketingReceiver, uint256 timestamp);\r\n    \r\n    event UpdateNitroReceiver(address oldNitroReceiver, address newNitroReceiver, uint256 timestamp);\r\n\r\n    event UpdateBuyFee(uint256 oldMarketingFee, uint256 oldNitroFee, uint256 newMarketingFee, uint256 newNitroFee, uint256 timestamp);\r\n\r\n    event UpdateSellFee(uint256 oldMarketingFee, uint256 oldNitroFee, uint256 newMarketingFee, uint256 newNitroFee, uint256 timestamp);\r\n\r\n    event UpdateTransferFee(uint256 oldMarketingFee, uint256 oldNitroFee, uint256 newMarketingFee, uint256 newNitroFee, uint256 timestamp);\r\n\r\n    event AutoRedeem(uint256 marketingFeeDistribution, uint256 nitroFeeDistribution, uint256 amountToRedeem, uint256 timestamp);\r\n\r\n    event SetPresaleAddress(address adr, uint256 timestamp);\r\n\r\n    event SetPresaleFactory(address adr, uint256 timestamp);\r\n\r\n    event NativeTransfer(address beneficiary, uint256 amount);\r\n\r\n    // FUNCTION\r\n\r\n    /* General */\r\n\r\n    receive() external payable {}\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!tradeEnabled, \"Enable Trading: Trading already enabled.\");\r\n        require(!isFeeActive, \"Finalize Presale: Fee already active.\");\r\n        require(!isSwapEnabled, \"Finalize Presale: Swap already enabled.\");\r\n        tradeEnabled = true;\r\n        isFeeActive = true;\r\n        isSwapEnabled = true;\r\n    }\r\n\r\n    function finalizePresale() external onlyOwner {\r\n        require(!isFeeActive, \"Finalize Presale: Fee already active.\");\r\n        require(!isSwapEnabled, \"Finalize Presale: Swap already enabled.\");\r\n        isFeeActive = true;\r\n        isSwapEnabled = true;\r\n    }\r\n\r\n    function lockFees() external onlyOwner {\r\n        require(!isFeeLocked, \"Lock Fees: All fees were already locked.\");\r\n        isFeeLocked = true;\r\n    }\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function redeemAllMarketingFee() external {\r\n        uint256 amountToRedeem = marketingFeeCollected - marketingFeeRedeemed;\r\n        \r\n        _redeemMarketingFee(amountToRedeem);\r\n    }\r\n\r\n    function redeemPartialMarketingFee(uint256 amountToRedeem) external {\r\n        require(amountToRedeem <= marketingFeeCollected - marketingFeeRedeemed, \"Redeem Partial Marketing Fee: Insufficient marketing fee collected.\");\r\n        \r\n        _redeemMarketingFee(amountToRedeem);\r\n    }\r\n\r\n    function _redeemMarketingFee(uint256 amountToRedeem) internal swapping { \r\n        marketingFeeRedeemed += amountToRedeem;\r\n        totalFeeRedeemed += amountToRedeem;\r\n \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), amountToRedeem);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToRedeem,\r\n            0,\r\n            path,\r\n            marketingReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function redeemAllNitroFee() external {\r\n        uint256 amountToRedeem = nitroFeeCollected - nitroFeeRedeemed;\r\n        \r\n        _redeemNitroFee(amountToRedeem);\r\n    }\r\n\r\n    function redeemPartialNitroFee(uint256 amountToRedeem) external {\r\n        require(amountToRedeem <= nitroFeeCollected - nitroFeeRedeemed, \"Redeem Partial Nitro Fee: Insufficient nitro fee collected.\");\r\n        \r\n        _redeemNitroFee(amountToRedeem);\r\n    }\r\n\r\n    function _redeemNitroFee(uint256 amountToRedeem) internal swapping { \r\n        nitroFeeRedeemed += amountToRedeem;\r\n        totalFeeRedeemed += amountToRedeem;\r\n \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), amountToRedeem);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToRedeem,\r\n            0,\r\n            path,\r\n            nitroReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /* Check */\r\n\r\n    function isCBC() external pure returns (bool) {\r\n        return ISCBC;\r\n    }\r\n\r\n    function circulatingSupply() external view returns (uint256) {\r\n        return totalSupply() - balanceOf(DEAD) - balanceOf(ZERO);\r\n    }\r\n\r\n    /* Update */\r\n\r\n    function updateRouter(address newRouter) external onlyOwner {\r\n        require(address(router) != newRouter, \"Update Router: This is the current router address.\");\r\n        address oldRouter = address(router);\r\n        router = IRouter(newRouter);\r\n        emit UpdateRouter(oldRouter, newRouter, block.timestamp);\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n    }\r\n\r\n    function updateMinSwap(uint256 newMinSwap) external onlyOwner {\r\n        require(minSwap != newMinSwap, \"Update Min Swap: This is the current value of min swap.\");\r\n        uint256 oldMinSwap = minSwap;\r\n        minSwap = newMinSwap;\r\n        emit UpdateMinSwap(oldMinSwap, newMinSwap, block.timestamp);\r\n    }\r\n\r\n    function updateBuyFee(uint256 newMarketingFee, uint256 newNitroFee) external onlyOwner {\r\n        require(!isFeeLocked, \"Update Buy Fee: All buy fees were locked and cannot be updated.\");\r\n        require(newMarketingFee + newNitroFee <= 1000, \"Update Buy Fee: Total fees cannot exceed 10%.\");\r\n        uint256 oldMarketingFee = buyMarketingFee;\r\n        uint256 oldNitroFee = buyNitroFee;\r\n        buyMarketingFee = newMarketingFee;\r\n        buyNitroFee = newNitroFee;\r\n        emit UpdateBuyFee(oldMarketingFee, oldNitroFee, newMarketingFee, newNitroFee, block.timestamp);\r\n    }\r\n\r\n    function updateSellFee(uint256 newMarketingFee, uint256 newNitroFee) external onlyOwner {\r\n        require(!isFeeLocked, \"Update Sell Fee: All sell fees were locked and cannot be updated.\");\r\n        require(newMarketingFee + newNitroFee <= 1000, \"Update Sell Fee: Total fees cannot exceed 10%.\");\r\n        uint256 oldMarketingFee = sellMarketingFee;\r\n        uint256 oldNitroFee = sellNitroFee;\r\n        sellMarketingFee = newMarketingFee;\r\n        sellNitroFee = newNitroFee;\r\n        emit UpdateSellFee(oldMarketingFee, oldNitroFee, newMarketingFee, newNitroFee, block.timestamp);\r\n    }\r\n\r\n    function updateTransferFee(uint256 newMarketingFee, uint256 newNitroFee) external onlyOwner {\r\n        require(!isFeeLocked, \"Update Transfer Fee: All transfer fees were locked and cannot be updated.\");\r\n        require(newMarketingFee + newNitroFee <= 1000, \"Update Transfer Fee: Total fees cannot exceed 10%.\");\r\n        uint256 oldMarketingFee = transferMarketingFee;\r\n        uint256 oldNitroFee = transferNitroFee;\r\n        transferMarketingFee = newMarketingFee;\r\n        transferNitroFee = newNitroFee;\r\n        emit UpdateTransferFee(oldMarketingFee, oldNitroFee, newMarketingFee, newNitroFee, block.timestamp);\r\n    }\r\n\r\n    function updateFeeActive(bool newStatus) external onlyOwner {\r\n        require(isFeeActive != newStatus, \"Update Fee Active: This is the current state for the fee.\");\r\n        bool oldStatus = isFeeActive;\r\n        isFeeActive = newStatus;\r\n        emit UpdateFeeActive(oldStatus, newStatus, block.timestamp);\r\n    }\r\n\r\n    function updateSwapEnabled(bool newStatus) external onlyOwner {\r\n        require(isSwapEnabled != newStatus, \"Update Swap Enabled: This is the current state for the swap.\");\r\n        bool oldStatus = isSwapEnabled;\r\n        isSwapEnabled = newStatus;\r\n        emit UpdateSwapEnabled(oldStatus, newStatus, block.timestamp);\r\n    }\r\n\r\n    function updateMarketingReceiver(address newMarketingReceiver) external onlyOwner {\r\n        require(marketingReceiver != newMarketingReceiver, \"Update Marketing Receiver: This is the current marketing receiver address.\");\r\n        require(!isContract(newMarketingReceiver), \"Update Marketing Receiver: Cannot set contract or EOA as marketing receiver address.\");\r\n        address oldMarketingReceiver = marketingReceiver;\r\n        marketingReceiver = newMarketingReceiver;\r\n        emit UpdateMarketingReceiver(oldMarketingReceiver, newMarketingReceiver, block.timestamp);\r\n    }\r\n\r\n    function updateNitroReceiver(address newNitroReceiver) external onlyOwner {\r\n        require(nitroReceiver != newNitroReceiver, \"Update Nitro Receiver: This is the current nitro receiver address.\");\r\n        require(!isContract(newNitroReceiver), \"Update Nitro Receiver: Cannot set contract or EOA as nitro receiver address.\");\r\n        address oldNitroReceiver = nitroReceiver;\r\n        nitroReceiver = newNitroReceiver;\r\n        emit UpdateNitroReceiver(oldNitroReceiver, newNitroReceiver, block.timestamp);\r\n    }\r\n\r\n    function setPresaleFactory(address adr) external onlyOwner {\r\n        require(adr != address(0), \"Set Presale Factory: Cannot set zero address as presale factory address.\");\r\n        require(adr != presaleFactory, \"Set Presale Factory: Cannot set the same address.\");\r\n        presaleFactory = adr;\r\n        isExcludeFromFees[adr] = true;\r\n        emit SetPresaleFactory(adr, block.timestamp);\r\n    }\r\n\r\n    function setPresaleAddress(address adr) external onlyOwner {\r\n        require(adr != address(0), \"Set Presale Address: Cannot set zero address as presale address.\");\r\n        require(adr != presaleAddress, \"Set Presale Address: Cannot set the same address.\");\r\n        presaleAddress = adr;\r\n        isExcludeFromFees[adr] = true;\r\n        emit SetPresaleAddress(adr, block.timestamp);\r\n    }\r\n\r\n    function setExcludeFromFees(address user, bool status) external onlyOwner {\r\n        require(isExcludeFromFees[user] != status, \"Set Exclude From Fees: This is the current state for this address.\");\r\n        isExcludeFromFees[user] = status;\r\n    }\r\n\r\n    /* Fee */\r\n\r\n    function takeBuyFee(address from, uint256 amount) internal swapping returns (uint256) {\r\n        uint256 feeTotal = buyMarketingFee + buyNitroFee;\r\n        uint256 feeAmount = amount * feeTotal / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - feeAmount;\r\n        tallyBuyFee(from, feeAmount, feeTotal);\r\n        return newAmount;\r\n    }\r\n\r\n    function takeSellFee(address from, uint256 amount) internal swapping returns (uint256) {\r\n        uint256 feeTotal = sellMarketingFee + sellNitroFee;\r\n        uint256 feeAmount = amount * feeTotal / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - feeAmount;\r\n        tallySellFee(from, feeAmount, feeTotal);\r\n        return newAmount;\r\n    }\r\n\r\n    function takeTransferFee(address from, uint256 amount) internal swapping returns (uint256) {\r\n        uint256 feeTotal = transferMarketingFee + transferNitroFee;\r\n        uint256 feeAmount = amount * feeTotal / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - feeAmount;\r\n        tallyTransferFee(from, feeAmount, feeTotal);\r\n        return newAmount;\r\n    }\r\n\r\n    function tallyBuyFee(address from, uint256 amount, uint256 fee) internal swapping {\r\n        uint256 collectMarketing = amount * buyMarketingFee / fee;\r\n        uint256 collectNitro = amount - collectMarketing;\r\n        tallyCollection(collectMarketing, collectNitro, amount);\r\n        \r\n        _balances[from] -= amount;\r\n        _balances[address(this)] += amount;\r\n    }\r\n\r\n    function tallySellFee(address from, uint256 amount, uint256 fee) internal swapping {\r\n        uint256 collectMarketing = amount * sellMarketingFee / fee;\r\n        uint256 collectNitro = amount - collectMarketing;\r\n        tallyCollection(collectMarketing, collectNitro, amount);\r\n        \r\n        _balances[from] -= amount;\r\n        _balances[address(this)] += amount;\r\n    }\r\n\r\n    function tallyTransferFee(address from, uint256 amount, uint256 fee) internal swapping {\r\n        uint256 collectMarketing = amount * transferMarketingFee / fee;\r\n        uint256 collectNitro = amount - collectMarketing;\r\n        tallyCollection(collectMarketing, collectNitro, amount);\r\n\r\n        _balances[from] -= amount;\r\n        _balances[address(this)] += amount;\r\n    }\r\n\r\n    function tallyCollection(uint256 collectMarketing, uint256 collectNitro, uint256 amount) internal swapping {\r\n        marketingFeeCollected += collectMarketing;\r\n        nitroFeeCollected += collectNitro;\r\n        totalFeeCollected += amount;\r\n\r\n    }\r\n\r\n    function autoRedeem(uint256 amountToRedeem) public swapping {  \r\n        uint256 marketingToRedeem = marketingFeeCollected - marketingFeeRedeemed;\r\n        uint256 totalToRedeem = totalFeeCollected - totalFeeRedeemed;\r\n\r\n        uint256 marketingFeeDistribution = amountToRedeem * marketingToRedeem / totalToRedeem;\r\n        uint256 nitroFeeDistribution = amountToRedeem - marketingFeeDistribution;\r\n        uint256 redeemAmount = amountToRedeem;\r\n\r\n        marketingFeeRedeemed += marketingFeeDistribution;\r\n        nitroFeeRedeemed += nitroFeeDistribution;\r\n        totalFeeRedeemed += amountToRedeem;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), redeemAmount);\r\n    \r\n        emit AutoRedeem(marketingFeeDistribution, nitroFeeDistribution, redeemAmount, block.timestamp);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            marketingFeeDistribution,\r\n            0,\r\n            path,\r\n            marketingReceiver,\r\n            block.timestamp\r\n        );\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            nitroFeeDistribution,\r\n            0,\r\n            path,\r\n            nitroReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /* Buyback */\r\n\r\n    function triggerZeusBuyback(uint256 amount) external onlyOwner {\r\n        buyTokens(amount, DEAD);\r\n    }\r\n\r\n    function buyTokens(uint256 amount, address to) internal swapping {\r\n        require(msg.sender != DEAD, \"Buy Tokens: Dead address cannot call this function.\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(this);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: amount\r\n        }(0, path, to, block.timestamp);\r\n    }\r\n\r\n    /* ERC20 Standard */\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return NAME;\r\n    }\r\n    \r\n    function symbol() external view virtual override returns (string memory) {\r\n        return SYMBOL;\r\n    }\r\n    \r\n    function decimals() external view virtual override returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n    \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address to, uint256 amount) external virtual override returns (bool) {\r\n        address provider = msg.sender;\r\n        return _transfer(provider, to, amount);\r\n    }\r\n    \r\n    function allowance(address provider, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[provider][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address provider = msg.sender;\r\n        _approve(provider, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        return _transfer(from, to, amount);\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        address provider = msg.sender;\r\n        _approve(provider, spender, allowance(provider, spender) + addedValue);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        address provider = msg.sender;\r\n        uint256 currentAllowance = allowance(provider, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(provider, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(address provider, address spender, uint256 amount) internal virtual {\r\n        require(provider != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[provider][spender] = amount;\r\n        emit Approval(provider, spender, amount);\r\n    }\r\n    \r\n    function _spendAllowance(address provider, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(provider, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(provider, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Additional */\r\n\r\n    function _basicTransfer(address from, address to, uint256 amount ) internal returns (bool) {\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    /* Overrides */\r\n \r\n    function _transfer(address from, address to, uint256 amount) internal virtual returns (bool) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (!tradeEnabled) {\r\n            require(msg.sender == projectOwner || msg.sender == presaleFactory || msg.sender == owner() || msg.sender == presaleAddress, \"ERC20: Only operator, owner or presale addresses can call this function since trading is not yet enabled.\");\r\n\r\n            if (from == owner()) {\r\n                require(to != pair, \"ERC20: Owner and operator are not allowed to sell if trading is not yet enabled.\");\r\n            }\r\n        }\r\n\r\n        if (inSwap || isExcludeFromFees[from]) {\r\n            return _basicTransfer(from, to, amount);\r\n        }\r\n\r\n        if (from != pair && isSwapEnabled && totalFeeCollected - totalFeeRedeemed >= minSwap) {\r\n            autoRedeem(minSwap);\r\n        }\r\n\r\n        uint256 newAmount = amount;\r\n\r\n        if (isFeeActive && !isExcludeFromFees[from]) {\r\n            newAmount = _beforeTokenTransfer(from, to, amount);\r\n        }\r\n\r\n        require(_balances[from] >= newAmount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = _balances[from] - newAmount;\r\n            _balances[to] += newAmount;\r\n        }\r\n\r\n        emit Transfer(from, to, newAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal swapping virtual returns (uint256) {\r\n        if (from == pair && (buyMarketingFee + buyNitroFee > 0)) {\r\n            return takeBuyFee(from, amount);\r\n        }\r\n        if (to == pair && (sellMarketingFee + sellNitroFee > 0)) {\r\n            return takeSellFee(from, amount);\r\n        }\r\n        if (from != pair && to != pair && (transferMarketingFee + transferNitroFee > 0)) {\r\n            return takeTransferFee(from, amount);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    /* Miscellaneous */\r\n\r\n    function wTokens(IERC20 tokenAddress) external onlyOwner {\r\n        require(address(this) != address(tokenAddress), \"Cannot withdraw CBC token from this smart contract.\");\r\n        require(\r\n            IERC20(tokenAddress).transfer(\r\n                msg.sender,\r\n                IERC20(tokenAddress).balanceOf(address(this))\r\n            ),\r\n            \"WithdrawTokens: Transfer transaction might fail.\"\r\n        );\r\n    }\r\n\r\n    function wNative() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function dropDifferentSpecificTokens(IERC20 tokenAddress, address[] memory recipients, uint256[] memory amount) external returns (bool) {\r\n       for (uint256 i = 0; i < recipients.length; i++) {\r\n            require(recipients[i] != address(0));\r\n            require(IERC20(tokenAddress).transfer(recipients[i], amount[i]));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function dropSimilarSpecificTokens(IERC20 tokenAddress, address[] memory recipients, uint256 amount) external returns (bool) {\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            require(recipients[i] != address(0));\r\n            require(IERC20(tokenAddress).transfer(recipients[i], amount));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function dropDifferentSpecificNative(address[] memory recipients, uint256[] memory amount) external payable returns (bool) {\r\n        uint256 total = 0;\r\n        for(uint256 j = 0; j < amount.length; j++) {\r\n            total = total + amount[j];\r\n        }\r\n        require(total <= msg.value, \"Amount sent to be dropped is too low than total airdrop.\");\r\n        require(recipients.length == amount.length, \"The length of recipient array is not equal to the length of native token airdrop array.\");\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            require(recipients[i] != address(0), \"Cannot transfer the airdrop native token to zero address.\");\r\n            payable(recipients[i]).transfer(amount[i]);\r\n            emit NativeTransfer(recipients[i], amount[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function dropSimilarSpecificNative(address[] memory recipients, uint256 amount) external payable returns (bool) {\r\n        uint256 total = amount * recipients.length;\r\n        require(total <= msg.value, \"Amount sent to be dropped is too low than total airdrop.\");\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            require(recipients[i] != address(0), \"Cannot transfer the airdrop native token to zero address.\");\r\n            payable(recipients[i]).transfer(amount);\r\n            emit NativeTransfer(recipients[i], amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectOwnerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFeeDistribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nitroFeeDistribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AutoRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetPresaleAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetPresaleFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldNitroFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNitroFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateBuyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateFeeActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMarketingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMarketingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateMarketingReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateMinSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldNitroReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newNitroReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateNitroReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldNitroFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNitroFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateSellFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateSwapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldNitroFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNitroFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateTransferFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEEDENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"autoRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyNitroFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"dropDifferentSpecificNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"dropDifferentSpecificTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"dropSimilarSpecificNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"dropSimilarSpecificTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCBC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nitroFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nitroFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nitroReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAllMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAllNitroFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"redeemPartialMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"redeemPartialNitroFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellNitroFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setPresaleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setPresaleFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferNitroFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"triggerZeusBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newNitroFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"updateFeeActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingReceiver\",\"type\":\"address\"}],\"name\":\"updateMarketingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinSwap\",\"type\":\"uint256\"}],\"name\":\"updateMinSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newNitroReceiver\",\"type\":\"address\"}],\"name\":\"updateNitroReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newNitroFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newNitroFee\",\"type\":\"uint256\"}],\"name\":\"updateTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"wTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CrashBandicoin", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000b9fcb42c7fc486cd3148c89217f1e3910b0b3965", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6e11c295d4173658d40d6609387487e61fd8e9b77ff689365b8ed35aae77a382"}