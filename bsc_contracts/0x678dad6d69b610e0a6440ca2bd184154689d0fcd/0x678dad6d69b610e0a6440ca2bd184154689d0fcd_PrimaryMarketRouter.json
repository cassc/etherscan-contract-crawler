{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/fund/PrimaryMarketRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../fund/ShareStaking.sol\\\";\\n\\nimport \\\"../interfaces/IPrimaryMarketRouter.sol\\\";\\nimport \\\"../interfaces/IPrimaryMarketV3.sol\\\";\\nimport \\\"../interfaces/ISwapRouter.sol\\\";\\nimport \\\"../interfaces/IStableSwap.sol\\\";\\nimport \\\"../interfaces/IWrappedERC20.sol\\\";\\n\\ncontract PrimaryMarketRouter is IPrimaryMarketRouter, ITrancheIndexV2 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IPrimaryMarketV3 public immutable primaryMarket;\\n    IFundV3 public immutable fund;\\n    IERC20 private immutable _tokenUnderlying;\\n    address private immutable _tokenB;\\n\\n    constructor(address pm) public {\\n        primaryMarket = IPrimaryMarketV3(pm);\\n        IFundV3 fund_ = IPrimaryMarketV3(pm).fund();\\n        fund = fund_;\\n        _tokenUnderlying = IERC20(fund_.tokenUnderlying());\\n        _tokenB = fund_.tokenB();\\n    }\\n\\n    /// @dev Get redemption with StableSwap getQuoteOut interface.\\n    function getQuoteOut(uint256 baseIn) external view override returns (uint256 quoteOut) {\\n        (quoteOut, ) = primaryMarket.getRedemption(baseIn);\\n    }\\n\\n    /// @dev Get creation for QUEEN with StableSwap getQuoteIn interface.\\n    function getQuoteIn(uint256 baseOut) external view override returns (uint256 quoteIn) {\\n        quoteIn = primaryMarket.getCreationForQ(baseOut);\\n    }\\n\\n    /// @dev Get creation with StableSwap getBaseOut interface.\\n    function getBaseOut(uint256 quoteIn) external view override returns (uint256 baseOut) {\\n        baseOut = primaryMarket.getCreation(quoteIn);\\n    }\\n\\n    /// @dev Get redemption for underlying with StableSwap getBaseIn interface.\\n    function getBaseIn(uint256 quoteOut) external view override returns (uint256 baseIn) {\\n        baseIn = primaryMarket.getRedemptionForUnderlying(quoteOut);\\n    }\\n\\n    /// @dev Create QUEEN with StableSwap buy interface.\\n    ///      Underlying should have already been sent to this contract\\n    function buy(\\n        uint256 version,\\n        uint256 baseOut,\\n        address recipient,\\n        bytes calldata\\n    ) external override returns (uint256 realBaseOut) {\\n        uint256 routerQuoteBalance = IERC20(_tokenUnderlying).balanceOf(address(this));\\n        IERC20(_tokenUnderlying).safeTransfer(address(primaryMarket), routerQuoteBalance);\\n        realBaseOut = primaryMarket.create(recipient, baseOut, version);\\n    }\\n\\n    /// @dev Redeem QUEEN with StableSwap sell interface.\\n    ///      QUEEN should have already been sent to this contract\\n    function sell(\\n        uint256 version,\\n        uint256 quoteOut,\\n        address recipient,\\n        bytes calldata\\n    ) external override returns (uint256 realQuoteOut) {\\n        uint256 routerBaseBalance = fund.trancheBalanceOf(TRANCHE_Q, address(this));\\n        realQuoteOut = primaryMarket.redeem(recipient, routerBaseBalance, quoteOut, version);\\n    }\\n\\n    function create(\\n        address recipient,\\n        uint256 underlying,\\n        uint256 minOutQ,\\n        uint256 version\\n    ) public payable override returns (uint256 outQ) {\\n        if (msg.value > 0) {\\n            require(msg.value == underlying); // sanity check\\n            IWrappedERC20(address(_tokenUnderlying)).deposit{value: msg.value}();\\n            _tokenUnderlying.safeTransfer(address(primaryMarket), msg.value);\\n        } else {\\n            IERC20(_tokenUnderlying).safeTransferFrom(\\n                msg.sender,\\n                address(primaryMarket),\\n                underlying\\n            );\\n        }\\n\\n        outQ = primaryMarket.create(recipient, minOutQ, version);\\n    }\\n\\n    function createAndStake(\\n        uint256 underlying,\\n        uint256 minOutQ,\\n        address staking,\\n        uint256 version\\n    ) external payable override {\\n        // Create QUEEN\\n        uint256 outQ = create(staking, underlying, minOutQ, version);\\n        // Stake QUEEN\\n        ShareStaking(staking).deposit(TRANCHE_Q, outQ, msg.sender, version);\\n    }\\n\\n    function createSplitAndStake(\\n        uint256 underlying,\\n        uint256 minOutQ,\\n        address router,\\n        address quoteAddress,\\n        uint256 minLpOut,\\n        address staking,\\n        uint256 version\\n    ) external payable override {\\n        // Create QUEEN\\n        uint256 outQ = create(address(this), underlying, minOutQ, version);\\n        _splitAndStake(outQ, router, quoteAddress, minLpOut, staking, version);\\n    }\\n\\n    function splitAndStake(\\n        uint256 inQ,\\n        address router,\\n        address quoteAddress,\\n        uint256 minLpOut,\\n        address staking,\\n        uint256 version\\n    ) external override {\\n        fund.trancheTransferFrom(TRANCHE_Q, msg.sender, address(this), inQ, version);\\n        _splitAndStake(inQ, router, quoteAddress, minLpOut, staking, version);\\n    }\\n\\n    function _splitAndStake(\\n        uint256 inQ,\\n        address router,\\n        address quoteAddress,\\n        uint256 minLpOut,\\n        address staking,\\n        uint256 version\\n    ) private {\\n        // Split QUEEN into BISHOP and ROOK\\n        uint256 outB = primaryMarket.split(address(this), inQ, version);\\n        // Add BISHOP to stable swap\\n        {\\n            IStableSwap swap = ISwapRouter(router).getSwap(_tokenB, quoteAddress);\\n            fund.trancheTransfer(TRANCHE_B, address(swap), outB, version);\\n            uint256 lpOut = swap.addLiquidity(version, msg.sender);\\n            require(lpOut >= minLpOut, \\\"Insufficient output\\\");\\n        }\\n\\n        if (staking == address(0)) {\\n            fund.trancheTransfer(TRANCHE_R, msg.sender, outB, version);\\n        } else {\\n            // Stake rook\\n            fund.trancheTransfer(TRANCHE_R, staking, outB, version);\\n            ShareStaking(staking).deposit(TRANCHE_R, outB, msg.sender, version);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/fund/ShareStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../utils/SafeDecimalMath.sol\\\";\\nimport \\\"../utils/CoreUtility.sol\\\";\\n\\nimport \\\"../interfaces/IFundV3.sol\\\";\\nimport \\\"../interfaces/IChessController.sol\\\";\\nimport \\\"../interfaces/IChessSchedule.sol\\\";\\nimport \\\"../interfaces/ITrancheIndexV2.sol\\\";\\nimport \\\"../interfaces/IVotingEscrow.sol\\\";\\n\\ncontract ShareStaking is ITrancheIndexV2, CoreUtility {\\n    using Math for uint256;\\n    using SafeMath for uint256;\\n    using SafeDecimalMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event Deposited(uint256 tranche, address account, uint256 amount);\\n    event Withdrawn(uint256 tranche, address account, uint256 amount);\\n\\n    uint256 private constant MAX_ITERATIONS = 500;\\n\\n    uint256 private constant REWARD_WEIGHT_B = 2;\\n    uint256 private constant REWARD_WEIGHT_R = 1;\\n    uint256 private constant REWARD_WEIGHT_Q = 3;\\n    uint256 private constant MAX_BOOSTING_FACTOR = 3e18;\\n    uint256 private constant MAX_BOOSTING_FACTOR_MINUS_ONE = MAX_BOOSTING_FACTOR - 1e18;\\n\\n    IFundV3 public immutable fund;\\n\\n    /// @notice The Chess release schedule contract.\\n    IChessSchedule public immutable chessSchedule;\\n\\n    /// @notice The controller contract.\\n    IChessController public immutable chessController;\\n\\n    IVotingEscrow private immutable _votingEscrow;\\n\\n    /// @notice Timestamp when rewards start.\\n    uint256 public immutable rewardStartTimestamp;\\n\\n    /// @dev Per-fund CHESS emission rate. The product of CHESS emission rate\\n    ///      and weekly percentage of the fund\\n    uint256 private _rate;\\n\\n    /// @dev Total amount of user shares, i.e. sum of all entries in `_balances`.\\n    uint256[TRANCHE_COUNT] private _totalSupplies;\\n\\n    /// @dev Rebalance version of `_totalSupplies`.\\n    uint256 private _totalSupplyVersion;\\n\\n    /// @dev Amount of shares staked by each user.\\n    mapping(address => uint256[TRANCHE_COUNT]) private _balances;\\n\\n    /// @dev Rebalance version mapping for `_balances`.\\n    mapping(address => uint256) private _balanceVersions;\\n\\n    /// @dev Mapping of rebalance version => split ratio.\\n    mapping(uint256 => uint256) private _historicalSplitRatio;\\n\\n    /// @dev 1e27 * \u222b(rate(t) / totalWeight(t) dt) from the latest rebalance till checkpoint.\\n    uint256 private _invTotalWeightIntegral;\\n\\n    /// @dev Final `_invTotalWeightIntegral` before each rebalance.\\n    ///      These values are accessed in a loop in `_userCheckpoint()` with bounds checking.\\n    ///      So we store them in a fixed-length array, in order to make compiler-generated\\n    ///      bounds checking on every access cheaper. The actual length of this array is stored in\\n    ///      `_historicalIntegralSize` and should be explicitly checked when necessary.\\n    uint256[65535] private _historicalIntegrals;\\n\\n    /// @dev Actual length of the `_historicalIntegrals` array, which always equals to the number of\\n    ///      historical rebalances after `checkpoint()` is called.\\n    uint256 private _historicalIntegralSize;\\n\\n    /// @dev Timestamp when checkpoint() is called.\\n    uint256 private _checkpointTimestamp;\\n\\n    /// @dev Snapshot of `_invTotalWeightIntegral` per user.\\n    mapping(address => uint256) private _userIntegrals;\\n\\n    /// @dev Mapping of account => claimable rewards.\\n    mapping(address => uint256) private _claimableRewards;\\n\\n    uint256 private _workingSupply;\\n    mapping(address => uint256) private _workingBalances;\\n\\n    constructor(\\n        address fund_,\\n        address chessSchedule_,\\n        address chessController_,\\n        address votingEscrow_,\\n        uint256 rewardStartTimestamp_\\n    ) public {\\n        fund = IFundV3(fund_);\\n        chessSchedule = IChessSchedule(chessSchedule_);\\n        chessController = IChessController(chessController_);\\n        _votingEscrow = IVotingEscrow(votingEscrow_);\\n        rewardStartTimestamp = rewardStartTimestamp_;\\n        _checkpointTimestamp = block.timestamp;\\n    }\\n\\n    function getRate() external view returns (uint256) {\\n        return _rate / 1e18;\\n    }\\n\\n    /// @notice Return weight of given balance with respect to rewards.\\n    /// @param amountQ Amount of QUEEN\\n    /// @param amountB Amount of BISHOP\\n    /// @param amountR Amount of ROOK\\n    /// @param splitRatio Split ratio\\n    /// @return Rewarding weight of the balance\\n    function weightedBalance(\\n        uint256 amountQ,\\n        uint256 amountB,\\n        uint256 amountR,\\n        uint256 splitRatio\\n    ) public pure returns (uint256) {\\n        return\\n            amountQ\\n                .mul(REWARD_WEIGHT_Q)\\n                .multiplyDecimal(splitRatio)\\n                .add(amountB.mul(REWARD_WEIGHT_B))\\n                .add(amountR.mul(REWARD_WEIGHT_R))\\n                .div(REWARD_WEIGHT_Q);\\n    }\\n\\n    function totalSupply(uint256 tranche) external view returns (uint256) {\\n        uint256 totalSupplyQ = _totalSupplies[TRANCHE_Q];\\n        uint256 totalSupplyB = _totalSupplies[TRANCHE_B];\\n        uint256 totalSupplyR = _totalSupplies[TRANCHE_R];\\n\\n        uint256 version = _totalSupplyVersion;\\n        uint256 rebalanceSize = _fundRebalanceSize();\\n        if (version < rebalanceSize) {\\n            (totalSupplyQ, totalSupplyB, totalSupplyR) = _fundBatchRebalance(\\n                totalSupplyQ,\\n                totalSupplyB,\\n                totalSupplyR,\\n                version,\\n                rebalanceSize\\n            );\\n        }\\n\\n        if (tranche == TRANCHE_Q) {\\n            return totalSupplyQ;\\n        } else if (tranche == TRANCHE_B) {\\n            return totalSupplyB;\\n        } else {\\n            return totalSupplyR;\\n        }\\n    }\\n\\n    function trancheBalanceOf(uint256 tranche, address account) external view returns (uint256) {\\n        uint256 amountQ = _balances[account][TRANCHE_Q];\\n        uint256 amountB = _balances[account][TRANCHE_B];\\n        uint256 amountR = _balances[account][TRANCHE_R];\\n\\n        if (tranche == TRANCHE_Q) {\\n            if (amountQ == 0 && amountB == 0 && amountR == 0) return 0;\\n        } else if (tranche == TRANCHE_B) {\\n            if (amountB == 0) return 0;\\n        } else {\\n            if (amountR == 0) return 0;\\n        }\\n\\n        uint256 version = _balanceVersions[account];\\n        uint256 rebalanceSize = _fundRebalanceSize();\\n        if (version < rebalanceSize) {\\n            (amountQ, amountB, amountR) = _fundBatchRebalance(\\n                amountQ,\\n                amountB,\\n                amountR,\\n                version,\\n                rebalanceSize\\n            );\\n        }\\n\\n        if (tranche == TRANCHE_Q) {\\n            return amountQ;\\n        } else if (tranche == TRANCHE_B) {\\n            return amountB;\\n        } else {\\n            return amountR;\\n        }\\n    }\\n\\n    function balanceVersion(address account) external view returns (uint256) {\\n        return _balanceVersions[account];\\n    }\\n\\n    function workingSupply() external view returns (uint256) {\\n        uint256 version = _totalSupplyVersion;\\n        uint256 rebalanceSize = _fundRebalanceSize();\\n        if (version < rebalanceSize) {\\n            (uint256 totalSupplyQ, uint256 totalSupplyB, uint256 totalSupplyR) =\\n                _fundBatchRebalance(\\n                    _totalSupplies[TRANCHE_Q],\\n                    _totalSupplies[TRANCHE_B],\\n                    _totalSupplies[TRANCHE_R],\\n                    version,\\n                    rebalanceSize\\n                );\\n            return weightedBalance(totalSupplyQ, totalSupplyB, totalSupplyR, fund.splitRatio());\\n        } else {\\n            return _workingSupply;\\n        }\\n    }\\n\\n    function workingBalanceOf(address account) external view returns (uint256) {\\n        uint256 version = _balanceVersions[account];\\n        uint256 rebalanceSize = _fundRebalanceSize();\\n        uint256 workingBalance = _workingBalances[account]; // gas saver\\n        if (version < rebalanceSize || workingBalance == 0) {\\n            uint256[TRANCHE_COUNT] storage balance = _balances[account];\\n            uint256 amountQ = balance[TRANCHE_Q];\\n            uint256 amountB = balance[TRANCHE_B];\\n            uint256 amountR = balance[TRANCHE_R];\\n            if (version < rebalanceSize) {\\n                (amountQ, amountB, amountR) = _fundBatchRebalance(\\n                    amountQ,\\n                    amountB,\\n                    amountR,\\n                    version,\\n                    rebalanceSize\\n                );\\n            }\\n            return weightedBalance(amountQ, amountB, amountR, fund.splitRatio());\\n        } else {\\n            return workingBalance;\\n        }\\n    }\\n\\n    function _fundRebalanceSize() internal view returns (uint256) {\\n        return fund.getRebalanceSize();\\n    }\\n\\n    function _fundDoRebalance(\\n        uint256 amountQ,\\n        uint256 amountB,\\n        uint256 amountR,\\n        uint256 index\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return fund.doRebalance(amountQ, amountB, amountR, index);\\n    }\\n\\n    function _fundBatchRebalance(\\n        uint256 amountQ,\\n        uint256 amountB,\\n        uint256 amountR,\\n        uint256 fromIndex,\\n        uint256 toIndex\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return fund.batchRebalance(amountQ, amountB, amountR, fromIndex, toIndex);\\n    }\\n\\n    /// @dev Stake share tokens. A user could send QUEEN before deposit().\\n    ///      The contract first measures how much tranche share it has received,\\n    ///      then transfer the rest from the user\\n    /// @param tranche Tranche of the share\\n    /// @param amount The amount to deposit\\n    /// @param recipient Address that receives deposit\\n    /// @param version The current rebalance version\\n    function deposit(\\n        uint256 tranche,\\n        uint256 amount,\\n        address recipient,\\n        uint256 version\\n    ) external {\\n        _checkpoint(version);\\n        _userCheckpoint(recipient, version);\\n        _balances[recipient][tranche] = _balances[recipient][tranche].add(amount);\\n        uint256 oldTotalSupply = _totalSupplies[tranche];\\n        _totalSupplies[tranche] = oldTotalSupply.add(amount);\\n        _updateWorkingBalance(recipient, version);\\n        uint256 spareAmount = fund.trancheBalanceOf(tranche, address(this)).sub(oldTotalSupply);\\n        if (spareAmount < amount) {\\n            // Retain the rest of share token (version is checked by the fund)\\n            fund.trancheTransferFrom(\\n                tranche,\\n                msg.sender,\\n                address(this),\\n                amount - spareAmount,\\n                version\\n            );\\n        } else {\\n            require(version == _fundRebalanceSize(), \\\"Invalid version\\\");\\n        }\\n        emit Deposited(tranche, recipient, amount);\\n    }\\n\\n    /// @notice Unstake tranche tokens.\\n    /// @param tranche Tranche of the share\\n    /// @param amount The amount to withdraw\\n    /// @param version The current rebalance version\\n    function withdraw(\\n        uint256 tranche,\\n        uint256 amount,\\n        uint256 version\\n    ) external {\\n        _checkpoint(version);\\n        _userCheckpoint(msg.sender, version);\\n        _balances[msg.sender][tranche] = _balances[msg.sender][tranche].sub(\\n            amount,\\n            \\\"Insufficient balance to withdraw\\\"\\n        );\\n        _totalSupplies[tranche] = _totalSupplies[tranche].sub(amount);\\n        _updateWorkingBalance(msg.sender, version);\\n        // version is checked by the fund\\n        fund.trancheTransfer(tranche, msg.sender, amount, version);\\n        emit Withdrawn(tranche, msg.sender, amount);\\n    }\\n\\n    /// @notice Transform share balance to a given rebalance version, or to the latest version\\n    ///         if `targetVersion` is zero.\\n    /// @param account Account of the balance to rebalance\\n    /// @param targetVersion The target rebalance version, or zero for the latest version\\n    function refreshBalance(address account, uint256 targetVersion) external {\\n        uint256 rebalanceSize = _fundRebalanceSize();\\n        if (targetVersion == 0) {\\n            targetVersion = rebalanceSize;\\n        } else {\\n            require(targetVersion <= rebalanceSize, \\\"Target version out of bound\\\");\\n        }\\n        _checkpoint(rebalanceSize);\\n        _userCheckpoint(account, targetVersion);\\n    }\\n\\n    /// @notice Return claimable rewards of an account till now.\\n    ///\\n    ///         This function should be call as a \\\"view\\\" function off-chain to get\\n    ///         the return value, e.g. using `contract.claimableRewards.call(account)` in web3\\n    ///         or `contract.callStatic.claimableRewards(account)` in ethers.js.\\n    /// @param account Address of an account\\n    /// @return Amount of claimable rewards\\n    function claimableRewards(address account) external returns (uint256) {\\n        uint256 rebalanceSize = _fundRebalanceSize();\\n        _checkpoint(rebalanceSize);\\n        _userCheckpoint(account, rebalanceSize);\\n        return _claimableRewards[account];\\n    }\\n\\n    /// @notice Claim the rewards for an account.\\n    /// @param account Account to claim its rewards\\n    function claimRewards(address account) external {\\n        uint256 rebalanceSize = _fundRebalanceSize();\\n        _checkpoint(rebalanceSize);\\n        _userCheckpoint(account, rebalanceSize);\\n        uint256 amount = _claimableRewards[account];\\n        _claimableRewards[account] = 0;\\n        chessSchedule.mint(account, amount);\\n        _updateWorkingBalance(account, rebalanceSize);\\n    }\\n\\n    /// @notice Synchronize an account's locked Chess with `VotingEscrow`\\n    ///         and update its working balance.\\n    /// @param account Address of the synchronized account\\n    function syncWithVotingEscrow(address account) external {\\n        uint256 rebalanceSize = _fundRebalanceSize();\\n        _checkpoint(rebalanceSize);\\n        _userCheckpoint(account, rebalanceSize);\\n        _updateWorkingBalance(account, rebalanceSize);\\n    }\\n\\n    /// @dev Transform total supplies to the latest rebalance version and make a global reward checkpoint.\\n    /// @param rebalanceSize The number of existing rebalances. It must be the same as\\n    ///                       `fund.getRebalanceSize()`.\\n    function _checkpoint(uint256 rebalanceSize) private {\\n        uint256 timestamp = _checkpointTimestamp;\\n        if (timestamp >= block.timestamp) {\\n            return;\\n        }\\n\\n        uint256 integral = _invTotalWeightIntegral;\\n        uint256 endWeek = _endOfWeek(timestamp);\\n        uint256 version = _totalSupplyVersion;\\n        uint256 rebalanceTimestamp;\\n        if (version < rebalanceSize) {\\n            rebalanceTimestamp = fund.getRebalanceTimestamp(version);\\n        } else {\\n            rebalanceTimestamp = type(uint256).max;\\n        }\\n        uint256 rate = _rate;\\n        uint256 totalSupplyQ = _totalSupplies[TRANCHE_Q];\\n        uint256 totalSupplyB = _totalSupplies[TRANCHE_B];\\n        uint256 totalSupplyR = _totalSupplies[TRANCHE_R];\\n        uint256 weight = _workingSupply;\\n        uint256 timestamp_ = timestamp; // avoid stack too deep\\n\\n        for (uint256 i = 0; i < MAX_ITERATIONS && timestamp_ < block.timestamp; i++) {\\n            uint256 endTimestamp = rebalanceTimestamp.min(endWeek).min(block.timestamp);\\n\\n            if (weight > 0 && endTimestamp > rewardStartTimestamp) {\\n                integral = integral.add(\\n                    rate\\n                        .mul(endTimestamp.sub(timestamp_.max(rewardStartTimestamp)))\\n                        .decimalToPreciseDecimal()\\n                        .div(weight)\\n                );\\n            }\\n\\n            if (endTimestamp == rebalanceTimestamp) {\\n                uint256 oldSize = _historicalIntegralSize;\\n                _historicalIntegrals[oldSize] = integral;\\n                _historicalIntegralSize = oldSize + 1;\\n\\n                integral = 0;\\n                (totalSupplyQ, totalSupplyB, totalSupplyR) = _fundDoRebalance(\\n                    totalSupplyQ,\\n                    totalSupplyB,\\n                    totalSupplyR,\\n                    version\\n                );\\n\\n                version++;\\n                {\\n                    // Reset total weight boosting after the first rebalance\\n                    uint256 splitRatio = fund.historicalSplitRatio(version);\\n                    weight = weightedBalance(totalSupplyQ, totalSupplyB, totalSupplyR, splitRatio);\\n                    _historicalSplitRatio[version] = splitRatio;\\n                }\\n\\n                if (version < rebalanceSize) {\\n                    rebalanceTimestamp = fund.getRebalanceTimestamp(version);\\n                } else {\\n                    rebalanceTimestamp = type(uint256).max;\\n                }\\n            }\\n            if (endTimestamp == endWeek) {\\n                rate = chessSchedule.getRate(endWeek).mul(\\n                    chessController.getFundRelativeWeight(address(this), endWeek)\\n                );\\n                if (endWeek < rewardStartTimestamp && endWeek + 1 weeks > rewardStartTimestamp) {\\n                    // Rewards start in the middle of the next week. We adjust the rate to\\n                    // compensate for the period between `endWeek` and `rewardStartTimestamp`.\\n                    rate = rate.mul(1 weeks).div(endWeek + 1 weeks - rewardStartTimestamp);\\n                }\\n                endWeek += 1 weeks;\\n            }\\n\\n            timestamp_ = endTimestamp;\\n        }\\n\\n        _checkpointTimestamp = block.timestamp;\\n        _invTotalWeightIntegral = integral;\\n        _rate = rate;\\n        if (_totalSupplyVersion != rebalanceSize) {\\n            _totalSupplies[TRANCHE_Q] = totalSupplyQ;\\n            _totalSupplies[TRANCHE_B] = totalSupplyB;\\n            _totalSupplies[TRANCHE_R] = totalSupplyR;\\n            _totalSupplyVersion = rebalanceSize;\\n            // Reset total working weight before any boosting if rebalance ever triggered\\n            _workingSupply = weight;\\n        }\\n    }\\n\\n    /// @dev Transform a user's balance to a given rebalance version and update this user's rewards.\\n    ///\\n    ///      In most cases, the target version is the latest version and this function cumulates\\n    ///      rewards till now. When this function is called from `refreshBalance()`,\\n    ///      `targetVersion` can be an older version, in which case rewards are cumulated till\\n    ///      the end of that version (i.e. timestamp of the transaction triggering the rebalance\\n    ///      with index `targetVersion`).\\n    ///\\n    ///      This function should always be called after `_checkpoint()` is called, so that\\n    ///      the global reward checkpoint is guarenteed up to date.\\n    /// @param account Account to update\\n    /// @param targetVersion The target rebalance version\\n    function _userCheckpoint(address account, uint256 targetVersion) private {\\n        uint256 oldVersion = _balanceVersions[account];\\n        if (oldVersion > targetVersion) {\\n            return;\\n        }\\n        uint256 userIntegral = _userIntegrals[account];\\n        uint256 integral;\\n        // This scope is to avoid the \\\"stack too deep\\\" error.\\n        {\\n            // We assume that this function is always called immediately after `_checkpoint()`,\\n            // which guarantees that `_historicalIntegralSize` equals to the number of historical\\n            // rebalances.\\n            uint256 rebalanceSize = _historicalIntegralSize;\\n            integral = targetVersion == rebalanceSize\\n                ? _invTotalWeightIntegral\\n                : _historicalIntegrals[targetVersion];\\n        }\\n        if (userIntegral == integral && oldVersion == targetVersion) {\\n            // Return immediately when the user's rewards have already been updated to\\n            // the target version.\\n            return;\\n        }\\n\\n        uint256 rewards = _claimableRewards[account];\\n        uint256[TRANCHE_COUNT] storage balance = _balances[account];\\n        uint256 weight = _workingBalances[account];\\n        uint256 balanceQ = balance[TRANCHE_Q];\\n        uint256 balanceB = balance[TRANCHE_B];\\n        uint256 balanceR = balance[TRANCHE_R];\\n        for (uint256 i = oldVersion; i < targetVersion; i++) {\\n            rewards = rewards.add(\\n                weight.multiplyDecimalPrecise(_historicalIntegrals[i].sub(userIntegral))\\n            );\\n            if (balanceQ != 0 || balanceB != 0 || balanceR != 0) {\\n                (balanceQ, balanceB, balanceR) = _fundDoRebalance(balanceQ, balanceB, balanceR, i);\\n            }\\n            userIntegral = 0;\\n\\n            // Reset per-user weight boosting after the first rebalance\\n            weight = weightedBalance(balanceQ, balanceB, balanceR, _historicalSplitRatio[i + 1]);\\n        }\\n        rewards = rewards.add(weight.multiplyDecimalPrecise(integral.sub(userIntegral)));\\n        address account_ = account; // Fix the \\\"stack too deep\\\" error\\n        _claimableRewards[account_] = rewards;\\n        _userIntegrals[account_] = integral;\\n\\n        if (oldVersion < targetVersion) {\\n            balance[TRANCHE_Q] = balanceQ;\\n            balance[TRANCHE_B] = balanceB;\\n            balance[TRANCHE_R] = balanceR;\\n            _balanceVersions[account_] = targetVersion;\\n            _workingBalances[account_] = weight;\\n        }\\n    }\\n\\n    /// @dev Calculate working balance, which depends on the amount of staked tokens and veCHESS.\\n    ///      Before this function is called, both `_checkpoint()` and `_userCheckpoint(account)`\\n    ///      should be called to update `_workingSupply` and `_workingBalances[account]` to\\n    ///      the latest rebalance version.\\n    /// @param account User address\\n    /// @param rebalanceSize The number of existing rebalances. It must be the same as\\n    ///                       `fund.getRebalanceSize()`.\\n    function _updateWorkingBalance(address account, uint256 rebalanceSize) private {\\n        uint256 splitRatio = _historicalSplitRatio[rebalanceSize];\\n        if (splitRatio == 0) {\\n            // Read it from the fund in case that it's not initialized yet, e.g. when we reach here\\n            // for the first time and `rebalanceSize` is zero.\\n            splitRatio = fund.historicalSplitRatio(rebalanceSize);\\n            _historicalSplitRatio[rebalanceSize] = splitRatio;\\n        }\\n        uint256 weightedSupply =\\n            weightedBalance(\\n                _totalSupplies[TRANCHE_Q],\\n                _totalSupplies[TRANCHE_B],\\n                _totalSupplies[TRANCHE_R],\\n                splitRatio\\n            );\\n        uint256[TRANCHE_COUNT] storage balance = _balances[account];\\n        uint256 newWorkingBalance =\\n            weightedBalance(balance[TRANCHE_Q], balance[TRANCHE_B], balance[TRANCHE_R], splitRatio);\\n        uint256 veBalance = _votingEscrow.balanceOf(account);\\n        if (veBalance > 0) {\\n            uint256 veTotalSupply = _votingEscrow.totalSupply();\\n            uint256 maxWorkingBalance = newWorkingBalance.multiplyDecimal(MAX_BOOSTING_FACTOR);\\n            uint256 boostedWorkingBalance =\\n                newWorkingBalance.add(\\n                    weightedSupply\\n                        .mul(veBalance)\\n                        .multiplyDecimal(MAX_BOOSTING_FACTOR_MINUS_ONE)\\n                        .div(veTotalSupply)\\n                );\\n            newWorkingBalance = maxWorkingBalance.min(boostedWorkingBalance);\\n        }\\n\\n        _workingSupply = _workingSupply.sub(_workingBalances[account]).add(newWorkingBalance);\\n        _workingBalances[account] = newWorkingBalance;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPrimaryMarketRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IFundV3.sol\\\";\\nimport \\\"../interfaces/IStableSwap.sol\\\";\\n\\ninterface IPrimaryMarketRouter is IStableSwapCore {\\n    function create(\\n        address recipient,\\n        uint256 underlying,\\n        uint256 minOutQ,\\n        uint256 version\\n    ) external payable returns (uint256 outQ);\\n\\n    function createAndStake(\\n        uint256 underlying,\\n        uint256 minOutQ,\\n        address staking,\\n        uint256 version\\n    ) external payable;\\n\\n    function createSplitAndStake(\\n        uint256 underlying,\\n        uint256 minOutQ,\\n        address router,\\n        address quoteAddress,\\n        uint256 minLpOut,\\n        address staking,\\n        uint256 version\\n    ) external payable;\\n\\n    function splitAndStake(\\n        uint256 inQ,\\n        address router,\\n        address quoteAddress,\\n        uint256 minLpOut,\\n        address staking,\\n        uint256 version\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPrimaryMarketV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"./IFundV3.sol\\\";\\n\\ninterface IPrimaryMarketV3 {\\n    function fund() external view returns (IFundV3);\\n\\n    function getCreation(uint256 underlying) external view returns (uint256 outQ);\\n\\n    function getCreationForQ(uint256 minOutQ) external view returns (uint256 underlying);\\n\\n    function getRedemption(uint256 inQ) external view returns (uint256 underlying, uint256 fee);\\n\\n    function getRedemptionForUnderlying(uint256 minUnderlying) external view returns (uint256 inQ);\\n\\n    function getSplit(uint256 inQ) external view returns (uint256 outB);\\n\\n    function getSplitForB(uint256 minOutB) external view returns (uint256 inQ);\\n\\n    function getMerge(uint256 inB) external view returns (uint256 outQ, uint256 feeQ);\\n\\n    function getMergeForQ(uint256 minOutQ) external view returns (uint256 inB);\\n\\n    function canBeRemovedFromFund() external view returns (bool);\\n\\n    function create(\\n        address recipient,\\n        uint256 minOutQ,\\n        uint256 version\\n    ) external returns (uint256 outQ);\\n\\n    function redeem(\\n        address recipient,\\n        uint256 inQ,\\n        uint256 minUnderlying,\\n        uint256 version\\n    ) external returns (uint256 underlying);\\n\\n    function redeemAndUnwrap(\\n        address recipient,\\n        uint256 inQ,\\n        uint256 minUnderlying,\\n        uint256 version\\n    ) external returns (uint256 underlying);\\n\\n    function queueRedemption(\\n        address recipient,\\n        uint256 inQ,\\n        uint256 minUnderlying,\\n        uint256 version\\n    ) external returns (uint256 underlying, uint256 index);\\n\\n    function claimRedemptions(address account, uint256[] calldata indices)\\n        external\\n        returns (uint256 underlying);\\n\\n    function claimRedemptionsAndUnwrap(address account, uint256[] calldata indices)\\n        external\\n        returns (uint256 underlying);\\n\\n    function split(\\n        address recipient,\\n        uint256 inQ,\\n        uint256 version\\n    ) external returns (uint256 outB);\\n\\n    function merge(\\n        address recipient,\\n        uint256 inB,\\n        uint256 version\\n    ) external returns (uint256 outQ);\\n\\n    function settle(uint256 day) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"./IStableSwap.sol\\\";\\n\\ninterface ISwapRouter {\\n    function getSwap(address baseToken, address quoteToken) external view returns (IStableSwap);\\n\\n    function getAmountsOut(uint256 amount, address[] memory path)\\n        external\\n        view\\n        returns (\\n            uint256[] memory amounts,\\n            IStableSwap[] memory swaps,\\n            bool[] memory isBuy\\n        );\\n\\n    function getAmountsIn(uint256 amount, address[] memory path)\\n        external\\n        view\\n        returns (\\n            uint256[] memory amounts,\\n            IStableSwap[] memory swaps,\\n            bool[] memory isBuy\\n        );\\n\\n    function addLiquidity(\\n        address baseToken,\\n        address quoteToken,\\n        uint256 baseDelta,\\n        uint256 quoteDelta,\\n        uint256 minMintAmount,\\n        uint256 version,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address[] calldata path,\\n        address recipient,\\n        address staking,\\n        uint256[] calldata versions,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 maxAmountIn,\\n        address[] calldata path,\\n        address recipient,\\n        address staking,\\n        uint256[] calldata versions,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokensUnwrap(\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address[] calldata path,\\n        address recipient,\\n        uint256[] calldata versions,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokensUnwrap(\\n        uint256 amountOut,\\n        uint256 maxAmountIn,\\n        address[] calldata path,\\n        address recipient,\\n        uint256[] calldata versions,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStableSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"../interfaces/IFundV3.sol\\\";\\n\\ninterface IStableSwapCore {\\n    function getQuoteOut(uint256 baseIn) external view returns (uint256 quoteOut);\\n\\n    function getQuoteIn(uint256 baseOut) external view returns (uint256 quoteIn);\\n\\n    function getBaseOut(uint256 quoteIn) external view returns (uint256 baseOut);\\n\\n    function getBaseIn(uint256 quoteOut) external view returns (uint256 baseIn);\\n\\n    function buy(\\n        uint256 version,\\n        uint256 baseOut,\\n        address recipient,\\n        bytes calldata data\\n    ) external returns (uint256 realBaseOut);\\n\\n    function sell(\\n        uint256 version,\\n        uint256 quoteOut,\\n        address recipient,\\n        bytes calldata data\\n    ) external returns (uint256 realQuoteOut);\\n}\\n\\ninterface IStableSwap is IStableSwapCore {\\n    function fund() external view returns (IFundV3);\\n\\n    function baseTranche() external view returns (uint256);\\n\\n    function baseAddress() external view returns (address);\\n\\n    function quoteAddress() external view returns (address);\\n\\n    function allBalances() external view returns (uint256, uint256);\\n\\n    function getOraclePrice() external view returns (uint256);\\n\\n    function getCurrentD() external view returns (uint256);\\n\\n    function getCurrentPriceOverOracle() external view returns (uint256);\\n\\n    function getCurrentPrice() external view returns (uint256);\\n\\n    function getPriceOverOracleIntegral() external view returns (uint256);\\n\\n    function addLiquidity(uint256 version, address recipient) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 version,\\n        uint256 lpIn,\\n        uint256 minBaseOut,\\n        uint256 minQuoteOut\\n    ) external returns (uint256 baseOut, uint256 quoteOut);\\n\\n    function removeLiquidityUnwrap(\\n        uint256 version,\\n        uint256 lpIn,\\n        uint256 minBaseOut,\\n        uint256 minQuoteOut\\n    ) external returns (uint256 baseOut, uint256 quoteOut);\\n\\n    function removeBaseLiquidity(\\n        uint256 version,\\n        uint256 lpIn,\\n        uint256 minBaseOut\\n    ) external returns (uint256 baseOut);\\n\\n    function removeQuoteLiquidity(\\n        uint256 version,\\n        uint256 lpIn,\\n        uint256 minQuoteOut\\n    ) external returns (uint256 quoteOut);\\n\\n    function removeQuoteLiquidityUnwrap(\\n        uint256 version,\\n        uint256 lpIn,\\n        uint256 minQuoteOut\\n    ) external returns (uint256 quoteOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWrappedERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWrappedERC20 is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SafeDecimalMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint256;\\n\\n    /* Number of decimal places in the representations. */\\n    uint256 private constant decimals = 18;\\n    uint256 private constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint256 private constant UNIT = 10**uint256(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint256 private constant PRECISE_UNIT = 10**uint256(highPrecisionDecimals);\\n    uint256 private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR =\\n        10**uint256(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y).div(UNIT);\\n    }\\n\\n    function multiplyDecimalPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    function divideDecimalPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(PRECISE_UNIT).div(y);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint256 i) internal pure returns (uint256) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint256 i) internal pure returns (uint256) {\\n        uint256 quotientTimesTen = i.mul(10).div(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen = quotientTimesTen.add(10);\\n        }\\n\\n        return quotientTimesTen.div(10);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, and the max value of\\n     * uint256 on overflow.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        return c / a != b ? type(uint256).max : c;\\n    }\\n\\n    function saturatingMultiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return saturatingMul(x, y).div(UNIT);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/CoreUtility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nabstract contract CoreUtility {\\n    using SafeMath for uint256;\\n\\n    /// @dev UTC time of a day when the fund settles.\\n    uint256 internal constant SETTLEMENT_TIME = 14 hours;\\n\\n    /// @dev Return end timestamp of the trading week containing a given timestamp.\\n    ///\\n    ///      A trading week starts at UTC time `SETTLEMENT_TIME` on a Thursday (inclusive)\\n    ///      and ends at the same time of the next Thursday (exclusive).\\n    /// @param timestamp The given timestamp\\n    /// @return End timestamp of the trading week.\\n    function _endOfWeek(uint256 timestamp) internal pure returns (uint256) {\\n        return ((timestamp.add(1 weeks) - SETTLEMENT_TIME) / 1 weeks) * 1 weeks + SETTLEMENT_TIME;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFundV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITwapOracleV2.sol\\\";\\n\\ninterface IFundV3 {\\n    /// @notice A linear transformation matrix that represents a rebalance.\\n    ///\\n    ///         ```\\n    ///             [        1        0        0 ]\\n    ///         R = [ ratioB2Q  ratioBR        0 ]\\n    ///             [ ratioR2Q        0  ratioBR ]\\n    ///         ```\\n    ///\\n    ///         Amounts of the three tranches `q`, `b` and `r` can be rebalanced by multiplying the matrix:\\n    ///\\n    ///         ```\\n    ///         [ q', b', r' ] = [ q, b, r ] * R\\n    ///         ```\\n    struct Rebalance {\\n        uint256 ratioB2Q;\\n        uint256 ratioR2Q;\\n        uint256 ratioBR;\\n        uint256 timestamp;\\n    }\\n\\n    function tokenUnderlying() external view returns (address);\\n\\n    function tokenQ() external view returns (address);\\n\\n    function tokenB() external view returns (address);\\n\\n    function tokenR() external view returns (address);\\n\\n    function tokenShare(uint256 tranche) external view returns (address);\\n\\n    function primaryMarket() external view returns (address);\\n\\n    function primaryMarketUpdateProposal() external view returns (address, uint256);\\n\\n    function strategy() external view returns (address);\\n\\n    function strategyUpdateProposal() external view returns (address, uint256);\\n\\n    function underlyingDecimalMultiplier() external view returns (uint256);\\n\\n    function twapOracle() external view returns (ITwapOracleV2);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function endOfDay(uint256 timestamp) external pure returns (uint256);\\n\\n    function trancheTotalSupply(uint256 tranche) external view returns (uint256);\\n\\n    function trancheBalanceOf(uint256 tranche, address account) external view returns (uint256);\\n\\n    function trancheAllBalanceOf(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function trancheBalanceVersion(address account) external view returns (uint256);\\n\\n    function trancheAllowance(\\n        uint256 tranche,\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function trancheAllowanceVersion(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function trancheTransfer(\\n        uint256 tranche,\\n        address recipient,\\n        uint256 amount,\\n        uint256 version\\n    ) external;\\n\\n    function trancheTransferFrom(\\n        uint256 tranche,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 version\\n    ) external;\\n\\n    function trancheApprove(\\n        uint256 tranche,\\n        address spender,\\n        uint256 amount,\\n        uint256 version\\n    ) external;\\n\\n    function getRebalanceSize() external view returns (uint256);\\n\\n    function getRebalance(uint256 index) external view returns (Rebalance memory);\\n\\n    function getRebalanceTimestamp(uint256 index) external view returns (uint256);\\n\\n    function currentDay() external view returns (uint256);\\n\\n    function splitRatio() external view returns (uint256);\\n\\n    function historicalSplitRatio(uint256 version) external view returns (uint256);\\n\\n    function fundActivityStartTime() external view returns (uint256);\\n\\n    function isFundActive(uint256 timestamp) external view returns (bool);\\n\\n    function getEquivalentTotalB() external view returns (uint256);\\n\\n    function getEquivalentTotalQ() external view returns (uint256);\\n\\n    function historicalEquivalentTotalB(uint256 timestamp) external view returns (uint256);\\n\\n    function historicalNavs(uint256 timestamp) external view returns (uint256 navB, uint256 navR);\\n\\n    function extrapolateNav(uint256 price)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function doRebalance(\\n        uint256 amountQ,\\n        uint256 amountB,\\n        uint256 amountR,\\n        uint256 index\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newAmountQ,\\n            uint256 newAmountB,\\n            uint256 newAmountR\\n        );\\n\\n    function batchRebalance(\\n        uint256 amountQ,\\n        uint256 amountB,\\n        uint256 amountR,\\n        uint256 fromIndex,\\n        uint256 toIndex\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newAmountQ,\\n            uint256 newAmountB,\\n            uint256 newAmountR\\n        );\\n\\n    function refreshBalance(address account, uint256 targetVersion) external;\\n\\n    function refreshAllowance(\\n        address owner,\\n        address spender,\\n        uint256 targetVersion\\n    ) external;\\n\\n    function primaryMarketMint(\\n        uint256 tranche,\\n        address account,\\n        uint256 amount,\\n        uint256 version\\n    ) external;\\n\\n    function primaryMarketBurn(\\n        uint256 tranche,\\n        address account,\\n        uint256 amount,\\n        uint256 version\\n    ) external;\\n\\n    function shareTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    function shareTransferFrom(\\n        address spender,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (uint256 newAllowance);\\n\\n    function shareIncreaseAllowance(\\n        address sender,\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (uint256 newAllowance);\\n\\n    function shareDecreaseAllowance(\\n        address sender,\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (uint256 newAllowance);\\n\\n    function shareApprove(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    function historicalUnderlying(uint256 timestamp) external view returns (uint256);\\n\\n    function getTotalUnderlying() external view returns (uint256);\\n\\n    function getStrategyUnderlying() external view returns (uint256);\\n\\n    function getTotalDebt() external view returns (uint256);\\n\\n    function transferToStrategy(uint256 amount) external;\\n\\n    function transferFromStrategy(uint256 amount) external;\\n\\n    function reportProfit(uint256 profit, uint256 performanceFee) external;\\n\\n    function reportLoss(uint256 loss) external;\\n\\n    function primaryMarketTransferUnderlying(\\n        address recipient,\\n        uint256 amount,\\n        uint256 fee\\n    ) external;\\n\\n    function primaryMarketAddDebt(uint256 amount, uint256 fee) external;\\n\\n    function primaryMarketPayDebt(uint256 amount) external;\\n\\n    event RebalanceTriggered(\\n        uint256 indexed index,\\n        uint256 indexed day,\\n        uint256 navSum,\\n        uint256 navB,\\n        uint256 navROrZero,\\n        uint256 ratioB2Q,\\n        uint256 ratioR2Q,\\n        uint256 ratioBR\\n    );\\n    event Settled(uint256 indexed day, uint256 navB, uint256 navR, uint256 interestRate);\\n    event InterestRateUpdated(uint256 baseInterestRate, uint256 floatingInterestRate);\\n    event BalancesRebalanced(\\n        address indexed account,\\n        uint256 version,\\n        uint256 balanceQ,\\n        uint256 balanceB,\\n        uint256 balanceR\\n    );\\n    event AllowancesRebalanced(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 version,\\n        uint256 allowanceQ,\\n        uint256 allowanceB,\\n        uint256 allowanceR\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\ninterface IChessController {\\n    function getFundRelativeWeight(address account, uint256 timestamp) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChessSchedule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\ninterface IChessSchedule {\\n    function getRate(uint256 timestamp) external view returns (uint256);\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function addMinter(address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITrancheIndexV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\n/// @notice Amounts of QUEEN, BISHOP and ROOK are sometimes stored in a `uint256[3]` array.\\n///         This contract defines index of each tranche in this array.\\n///\\n///         Solidity does not allow constants to be defined in interfaces. So this contract follows\\n///         the naming convention of interfaces but is implemented as an `abstract contract`.\\nabstract contract ITrancheIndexV2 {\\n    uint256 internal constant TRANCHE_Q = 0;\\n    uint256 internal constant TRANCHE_B = 1;\\n    uint256 internal constant TRANCHE_R = 2;\\n\\n    uint256 internal constant TRANCHE_COUNT = 3;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IVotingEscrow {\\n    struct LockedBalance {\\n        uint256 amount;\\n        uint256 unlockTime;\\n    }\\n\\n    function token() external view returns (address);\\n\\n    function maxTime() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOfAtTimestamp(address account, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTimestampDropBelow(address account, uint256 threshold)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLockedBalance(address account) external view returns (LockedBalance memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITwapOracleV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"./ITwapOracle.sol\\\";\\n\\ninterface ITwapOracleV2 is ITwapOracle {\\n    function getLatest() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITwapOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\ninterface ITwapOracle {\\n    enum UpdateType {PRIMARY, SECONDARY, OWNER, CHAINLINK, UNISWAP_V2}\\n\\n    function getTwap(uint256 timestamp) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pm\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"realBaseOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutQ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outQ\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutQ\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"createAndStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutQ\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLpOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"createSplitAndStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"contract IFundV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteOut\",\"type\":\"uint256\"}],\"name\":\"getBaseIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteIn\",\"type\":\"uint256\"}],\"name\":\"getBaseOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseOut\",\"type\":\"uint256\"}],\"name\":\"getQuoteIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseIn\",\"type\":\"uint256\"}],\"name\":\"getQuoteOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryMarket\",\"outputs\":[{\"internalType\":\"contract IPrimaryMarketV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"realQuoteOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inQ\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLpOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"splitAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PrimaryMarketRouter", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ec887f1ed49ff192a8ac3fcb82e120bd6785f522", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}