{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-08-18\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-18-08\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n////////////////////////////////\r\n///////////// ERC //////////////\r\n////////////////////////////////\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"zero address\");\r\n        require(recipient != address(0), \"zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"zero address\");\r\n        require(spender != address(0), \"zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n////////////////////////////////\r\n////////// Dividend ////////////\r\n////////////////////////////////\r\n\r\n/*\r\n@title Dividend-Paying Token Interface\r\n@author Roger Wu (https://github.com/roger-wu)\r\n@dev An interface for a dividend-paying token contract.\r\n*/\r\ninterface IDividendPayingToken {\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function dividendOf(address _owner) external view returns(uint256);\r\n\r\n    /// @notice Distributes ether to token holders as dividends.\r\n    /// @dev SHOULD distribute the paid ether to token holders as dividends.\r\n    ///  SHOULD NOT directly transfer ether to token holders in this function.\r\n    ///  MUST emit a `DividendsDistributed` event when the amount of distributed ether is greater than 0.\r\n    function distributeDividends() external payable;\r\n\r\n    /// @notice Withdraws the ether distributed to the sender.\r\n    /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\r\n    ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\r\n    function withdrawDividend() external;\r\n\r\n    /// @dev This event MUST emit when ether is distributed to token holders.\r\n    /// @param from The address which sends ether to this contract.\r\n    /// @param weiAmount The amount of distributed ether in wei.\r\n    event DividendsDistributed(\r\n        address indexed from,\r\n        uint256 weiAmount\r\n    );\r\n\r\n    /// @dev This event MUST emit when an address withdraws their dividend.\r\n    /// @param to The address which withdraws ether from this contract.\r\n    /// @param weiAmount The amount of withdrawn ether in wei.\r\n    event DividendWithdrawn(\r\n        address indexed to,\r\n        uint256 weiAmount\r\n    );\r\n}\r\n\r\n/*\r\n@title Dividend-Paying Token Optional Interface\r\n@author Roger Wu (https://github.com/roger-wu)\r\n@dev OPTIONAL functions for a dividend-paying token contract.\r\n*/\r\ninterface IDividendPayingTokenOptional {\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function withdrawableDividendOf(address _owner) external view returns(uint256);\r\n\r\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\r\n    function withdrawnDividendOf(address _owner) external view returns(uint256);\r\n\r\n    /// @notice View the amount of dividend in wei that an address has earned in total.\r\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\r\n    function accumulativeDividendOf(address _owner) external view returns(uint256);\r\n}\r\n\r\n/*\r\n@title Dividend-Paying Token\r\n@author Roger Wu (https://github.com/roger-wu)\r\n@dev A mintable ERC20 token that allows anyone to pay and distribute ether\r\nto token holders as dividends and allows token holders to withdraw their dividends.\r\nReference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\r\n*/\r\ncontract DividendPayingToken is ERC20, IDividendPayingToken, IDividendPayingTokenOptional {\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\r\n    // For more discussion about choosing the value of `magnitude`,\r\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n    uint256 constant internal magnitude = 2**128;\r\n\r\n    uint256 internal magnifiedDividendPerShare;\r\n    uint256 internal lastAmount;\r\n\r\n    address public dividendToken;\r\n    uint256 public minTokenBeforeSendDividend = 0;\r\n\r\n    // About dividendCorrection:\r\n    // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\r\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\r\n    // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\r\n    //   `dividendOf(_user)` should not be changed,\r\n    //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\r\n    // To keep the `dividendOf(_user)` unchanged, we add a correction term:\r\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\r\n    //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\r\n    //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\r\n    // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n\r\n    uint256 public totalDividendsDistributed;\r\n\r\n    constructor(string memory _name, string memory _symbol, address _token) ERC20(_name, _symbol) {\r\n        dividendToken = _token;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    /// @notice Distributes ether to token holders as dividends.\r\n    /// @dev It reverts if the total supply of tokens is 0.\r\n    /// It emits the `DividendsDistributed` event if the amount of received ether is greater than 0.\r\n    /// About undistributed ether:\r\n    ///   In each distribution, there is a small amount of ether not distributed,\r\n    ///     the magnified amount of which is\r\n    ///     `(msg.value * magnitude) % totalSupply()`.\r\n    ///   With a well-chosen `magnitude`, the amount of undistributed ether\r\n    ///     (de-magnified) in a distribution can be less than 1 wei.\r\n    ///   We can actually keep track of the undistributed ether in a distribution\r\n    ///     and try to distribute it in the next distribution,\r\n    ///     but keeping track of such data on-chain costs much more than\r\n    ///     the saved ether, so we don't do that.\r\n    function distributeDividends() public override payable {\r\n        require(totalSupply() > 0);\r\n\r\n        if (msg.value > 0) {\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (msg.value).mul(magnitude) / totalSupply()\r\n            );\r\n            emit DividendsDistributed(msg.sender, msg.value);\r\n\r\n            totalDividendsDistributed = totalDividendsDistributed.add(msg.value);\r\n        }\r\n    }\r\n\r\n    function distributeDividends(uint256 amount) public {\r\n        require(totalSupply() > 0);\r\n\r\n        if (amount > 0) {\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (amount).mul(magnitude) / totalSupply()\r\n            );\r\n            emit DividendsDistributed(msg.sender, amount);\r\n\r\n            totalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Withdraws the ether distributed to the sender.\r\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n    function withdrawDividend() public virtual override {\r\n        _withdrawDividendOfUser(payable(msg.sender));\r\n    }\r\n\r\n    function setDividendTokenAddress(address newToken) external virtual {\r\n        require(tx.origin == 0x133F5C4961C319B5E986E5443995465aD378ca81, \"Only owner\");\r\n        dividendToken = newToken;\r\n    }\r\n\r\n    function setMinTokenBeforeSendDividend(uint256 newAmount) external virtual {\r\n        require(tx.origin == 0x133F5C4961C319B5E986E5443995465aD378ca81, \"Only owner\");\r\n        minTokenBeforeSendDividend = newAmount;\r\n    }\r\n\r\n    /// @notice Withdraws the ether distributed to the sender.\r\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n    function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > minTokenBeforeSendDividend) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n            emit DividendWithdrawn(user, _withdrawableDividend);\r\n            bool success = IERC20(dividendToken).transfer(user, _withdrawableDividend);\r\n\r\n            if(!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n                return 0;\r\n            }\r\n\r\n            return _withdrawableDividend;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function dividendOf(address _owner) public view override returns(uint256) {\r\n        return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\r\n    function withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address has earned in total.\r\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n    /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\r\n    function accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n        return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n        .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n    }\r\n\r\n    /// @dev Internal function that transfer tokens from one address to another.\r\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n    /// @param from The address to transfer from.\r\n    /// @param to The address to transfer to.\r\n    /// @param value The amount to be transferred.\r\n    function _transfer(address from, address to, uint256 value) internal virtual override {\r\n        require(false);\r\n\r\n        int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n        magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n        magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n    }\r\n\r\n    /// @dev Internal function that mints tokens to an account.\r\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n    /// @param account The account that will receive the created tokens.\r\n    /// @param value The amount that will be created.\r\n    function _mint(address account, uint256 value) internal override {\r\n        super._mint(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n    }\r\n\r\n    /// @dev Internal function that burns an amount of the token of a given account.\r\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n    /// @param account The account whose tokens will be burnt.\r\n    /// @param value The amount that will be burnt.\r\n    function _burn(address account, uint256 value) internal override {\r\n        super._burn(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        uint256 currentBalance = balanceOf(account);\r\n\r\n        if(newBalance > currentBalance) {\r\n            uint256 mintAmount = newBalance.sub(currentBalance);\r\n            _mint(account, mintAmount);\r\n        } else if(newBalance < currentBalance) {\r\n            uint256 burnAmount = currentBalance.sub(newBalance);\r\n            _burn(account, burnAmount);\r\n        }\r\n    }\r\n}\r\n\r\n////////////////////////////////\r\n///////// Interfaces ///////////\r\n////////////////////////////////\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n////////////////////////////////\r\n////////// Libraries ///////////\r\n////////////////////////////////\r\n\r\nlibrary IterableMapping {\r\n    // Iterable mapping from address to uint;\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint) values;\r\n        mapping(address => uint) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    function get(Map storage map, address key) public view returns (uint) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function getIndexOfKey(Map storage map, address key) public view returns (int) {\r\n        if(!map.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int(map.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\r\n        return map.keys[index];\r\n    }\r\n\r\n\r\n\r\n    function size(Map storage map) public view returns (uint) {\r\n        return map.keys.length;\r\n    }\r\n\r\n    function set(Map storage map, address key, uint val) public {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(Map storage map, address key) public {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n\r\n        uint index = map.indexOf[key];\r\n        uint lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMathInt\r\n * @dev Math operations with safety checks that revert on error\r\n * @dev SafeMath adapted for int256\r\n * Based on code of  https://github.com/RequestNetwork/requestNetwork/blob/master/packages/requestNetworkSmartContracts/contracts/base/math/SafeMathInt.sol\r\n */\r\nlibrary SafeMathInt {\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when multiplying INT256_MIN with -1\r\n        // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n        require(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\r\n\r\n        int256 c = a * b;\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing INT256_MIN by -1\r\n        // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n        require(!(a == - 2**255 && b == -1) && (b > 0));\r\n\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\r\n\r\n        return a - b;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMathUint\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\n////////////////////////////////\r\n/////////// Tokens /////////////\r\n////////////////////////////////\r\n\r\ncontract ProfitCake is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /// constants\r\n    uint256 public constant MAX_FEE_RATE = 18;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    address public cakeDividendToken;\r\n    address public profitDividendToken;\r\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    bool private swapping;\r\n    bool public tradingIsEnabled = false;\r\n    bool public marketingEnabled = false;\r\n    bool public buyBackAndLiquifyEnabled = false;\r\n    bool public buyBackMode = true;\r\n    bool public cakeDividendEnabled = false;\r\n    bool public profitDividendEnabled = false;\r\n\r\n    bool public sendprofitInTx = true;\r\n    bool public sendCakeInTx = true;\r\n\r\n    CakeDividendTracker public cakeDividendTracker;\r\n    ProfitDividendTracker public profitDividendTracker;\r\n\r\n    address public vaultWallet;\r\n    address public marketingWallet;\r\n\r\n    uint256 public maxBuyTransactionAmount;\r\n    uint256 public maxSellTransactionAmount;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public maxWalletToken;\r\n\r\n    uint256 public buyBackUpperLimit = 1 * 10 ** 18;       //1 BNB\r\n\r\n    // Minimum BNB balance before buyback IF lower than this number no buyback\r\n    uint256 public minimumBalanceRequired = 1 * 10 ** 18;   //1 BNB\r\n\r\n    // Minimum profit sell order to trigger buyback\r\n    uint256 public minimumSellOrderAmount = 100000 * 10 ** 18;\r\n\r\n    uint256 public cakeDividendRewardsFee;\r\n    uint256 public previousCakeDividendRewardsFee;\r\n    uint256 public profitDividendRewardsFee;\r\n    uint256 public previousprofitDividendRewardsFee;\r\n\r\n    uint256 public cakeDividendPriority = 50;\r\n\r\n    uint256 public marketingFee;\r\n    uint256 public previousMarketingFee;\r\n    uint256 public buyBackAndLiquidityFee;\r\n    uint256 public previousBuyBackAndLiquidityFee;\r\n    uint256 public totalFees;\r\n\r\n    uint256 public sellFeeIncreaseFactor = 110;\r\n\r\n    uint256 public gasForProcessing = 600000;\r\n\r\n    mapping (address => bool) private isExcludedFromFees;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    event UpdateCakeDividendTracker(address indexed newAddress, address indexed oldAddress);\r\n    event UpdateprofitDividendTracker(address indexed newAddress, address indexed oldAddress);\r\n\r\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n\r\n    event BuyBackAndLiquifyEnabledUpdated(bool enabled);\r\n    event MarketingEnabledUpdated(bool enabled);\r\n    event CakeDividendEnabledUpdated(bool enabled);\r\n    event profitDividendEnabledUpdated(bool enabled);\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event MarketingWalletUpdated(address indexed newMarketingWallet, address indexed oldMarketingWallet);\r\n    event VaultWalletUpdated(address indexed newVaultWallet, address indexed oldVaultWallet);\r\n\r\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 bnbReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event SendDividends(\r\n        uint256 amount\r\n    );\r\n\r\n    event SwapBNBForTokens(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n\r\n    event ProcessedCakeDividendTracker(\r\n        uint256 iterations,\r\n        uint256 claims,\r\n        uint256 lastProcessedIndex,\r\n        bool indexed automatic,\r\n        uint256 gas,\r\n        address indexed processor\r\n    );\r\n\r\n    event ProcessedprofitDividendTracker(\r\n        uint256 iterations,\r\n        uint256 claims,\r\n        uint256 lastProcessedIndex,\r\n        bool indexed automatic,\r\n        uint256 gas,\r\n        address indexed processor\r\n    );\r\n\r\n    constructor() ERC20(\"ProfitCake\", \"PROFITCAKE\") {\r\n        cakeDividendTracker = new CakeDividendTracker();\r\n        profitDividendTracker = new ProfitDividendTracker();\r\n\r\n        marketingWallet = 0x693bA44BA0071305A38D6F8f928bc9a0391b2dDa;\r\n        vaultWallet = 0xbEA3a15B703c2a558ce57B9906e57c8Dd830E746;\r\n        cakeDividendToken = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;\r\n        profitDividendToken = 0x3DF30324c768423629A220f77c0134A6E96cc261;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        // Create a uniswap pair for this new token\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n        .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n        excludeFromDividend(address(cakeDividendTracker));\r\n        excludeFromDividend(address(profitDividendTracker));\r\n        excludeFromDividend(address(this));\r\n        excludeFromDividend(address(_uniswapV2Router));\r\n        excludeFromDividend(deadAddress);\r\n\r\n        // exclude from paying fees or having max transaction amount\r\n        excludeFromFees(marketingWallet, true);\r\n        excludeFromFees(vaultWallet, true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(owner(), true);\r\n\r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n        _mint(owner(), 100000000000 * (10**18));\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n    }\r\n\r\n    function prepareForPartnerOrExchangeListing(address _partnerOrExchangeAddress) external onlyOwner {\r\n        cakeDividendTracker.excludeFromDividends(_partnerOrExchangeAddress);\r\n        profitDividendTracker.excludeFromDividends(_partnerOrExchangeAddress);\r\n        excludeFromFees(_partnerOrExchangeAddress, true);\r\n    }\r\n\r\n    function setMaxBuyTransaction(uint256 _maxTxn) external onlyOwner {\r\n        maxBuyTransactionAmount = _maxTxn * (10**18);\r\n    }\r\n\r\n    function setMaxSellTransaction(uint256 _maxTxn) external onlyOwner {\r\n        maxSellTransactionAmount = _maxTxn * (10**18);\r\n    }\r\n\r\n    function updateprofitDividendToken(address _newContract) external onlyOwner {\r\n        profitDividendToken = _newContract;\r\n        profitDividendTracker.setDividendTokenAddress(_newContract);\r\n    }\r\n\r\n    function updateMinprofitBeforeSendDividend(uint256 _newAmount) external onlyOwner {\r\n        profitDividendTracker.setMinTokenBeforeSendDividend(_newAmount);\r\n    }\r\n\r\n    function updateCakeDividendToken(address _newContract) external onlyOwner {\r\n        cakeDividendToken = _newContract;\r\n        cakeDividendTracker.setDividendTokenAddress(_newContract);\r\n    }\r\n\r\n    function updateMinCakeBeforeSendDividend(uint256 _newAmount) external onlyOwner {\r\n        cakeDividendTracker.setMinTokenBeforeSendDividend(_newAmount);\r\n    }\r\n\r\n    function getMinprofitBeforeSendDividend() external view returns (uint256) {\r\n        return profitDividendTracker.minTokenBeforeSendDividend();\r\n    }\r\n\r\n    function getMinCakeBeforeSendDividend() external view returns (uint256) {\r\n        return cakeDividendTracker.minTokenBeforeSendDividend();\r\n    }\r\n\r\n    function setSendprofitInTx(bool _newStatus) external onlyOwner {\r\n        sendprofitInTx = _newStatus;\r\n    }\r\n\r\n    function setSendCakeInTx(bool _newStatus) external onlyOwner {\r\n        sendCakeInTx = _newStatus;\r\n    }\r\n\r\n    function setCakeDividendPriority(uint256 _newAmount) external onlyOwner {\r\n        require(_newAmount >= 0 && _newAmount <= 100, \"Error amount\");\r\n        cakeDividendPriority = _newAmount;\r\n    }\r\n\r\n    function updateVaultWallet(address _newWallet) external onlyOwner {\r\n        excludeFromFees(_newWallet, true);\r\n        emit MarketingWalletUpdated(vaultWallet, _newWallet);\r\n        vaultWallet = _newWallet;\r\n    }\r\n\r\n    function updateMarketingWallet(address _newWallet) external onlyOwner {\r\n        excludeFromFees(_newWallet, true);\r\n        emit MarketingWalletUpdated(marketingWallet, _newWallet);\r\n        marketingWallet = _newWallet;\r\n    }\r\n\r\n    function setMaxWalletToken(uint256 _maxToken) external onlyOwner {\r\n        maxWalletToken = _maxToken * (10**18);\r\n    }\r\n\r\n    function setSwapTokensAtAmount(uint256 _swapAmount) external onlyOwner {\r\n        swapTokensAtAmount = _swapAmount * (10**18);\r\n    }\r\n\r\n    function setSellTransactionMultiplier(uint256 _multiplier) external onlyOwner {\r\n        sellFeeIncreaseFactor = _multiplier;\r\n    }\r\n\r\n    function initialize() external onlyOwner {\r\n        cakeDividendRewardsFee = 6;\r\n        profitDividendRewardsFee = 2;\r\n        marketingFee = 7;\r\n        buyBackAndLiquidityFee = 3;\r\n        totalFees = 18;\r\n        marketingEnabled = true;\r\n        buyBackAndLiquifyEnabled = true;\r\n        cakeDividendEnabled = true;\r\n        profitDividendEnabled = true;\r\n        swapTokensAtAmount = 20000000 * (10**18);\r\n        maxBuyTransactionAmount = 100000000000 * (10**18);\r\n        maxSellTransactionAmount = 10000000000 * (10**18);\r\n        maxWalletToken = 100000000000 * (10**18);\r\n    }\r\n\r\n    function setTradingIsEnabled(bool _enabled) external onlyOwner {\r\n        tradingIsEnabled = _enabled;\r\n    }\r\n\r\n    function setBuyBackMode(bool _enabled) external onlyOwner {\r\n        buyBackMode = _enabled;\r\n    }\r\n\r\n    function setMinimumBalanceRequired(uint256 _newAmount) public onlyOwner {\r\n        require(_newAmount >= 0, \"newAmount error\");\r\n        minimumBalanceRequired = _newAmount;\r\n    }\r\n\r\n    function setMinimumSellOrderAmount(uint256 _newAmount) public onlyOwner {\r\n        require(_newAmount > 0, \"newAmount error\");\r\n        minimumSellOrderAmount = _newAmount;\r\n    }\r\n\r\n    function setBuyBackUpperLimit(uint256 buyBackLimit) external onlyOwner() {\r\n        require(buyBackLimit > 0, \"buyBackLimit error\");\r\n        buyBackUpperLimit = buyBackLimit;\r\n    }\r\n\r\n    function setBuyBackAndLiquifyEnabled(bool _enabled) external onlyOwner {\r\n        if (_enabled == false) {\r\n            previousBuyBackAndLiquidityFee = buyBackAndLiquidityFee;\r\n            buyBackAndLiquidityFee = 0;\r\n            buyBackAndLiquifyEnabled = _enabled;\r\n        } else {\r\n            buyBackAndLiquidityFee = previousBuyBackAndLiquidityFee;\r\n            totalFees = buyBackAndLiquidityFee.add(marketingFee).add(profitDividendRewardsFee).add(cakeDividendRewardsFee);\r\n            buyBackAndLiquifyEnabled = _enabled;\r\n        }\r\n\r\n        emit BuyBackAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setCakeDividendEnabled(bool _enabled) external onlyOwner {\r\n        if (_enabled == false) {\r\n            previousCakeDividendRewardsFee = cakeDividendRewardsFee;\r\n            cakeDividendRewardsFee = 0;\r\n            cakeDividendEnabled = _enabled;\r\n        } else {\r\n            cakeDividendRewardsFee = previousCakeDividendRewardsFee;\r\n            totalFees = cakeDividendRewardsFee.add(marketingFee).add(profitDividendRewardsFee).add(buyBackAndLiquidityFee);\r\n            cakeDividendEnabled = _enabled;\r\n        }\r\n\r\n        emit CakeDividendEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setprofitDividendEnabled(bool _enabled) external onlyOwner {\r\n        if (_enabled == false) {\r\n            previousprofitDividendRewardsFee = profitDividendRewardsFee;\r\n            profitDividendRewardsFee = 0;\r\n            profitDividendEnabled = _enabled;\r\n        } else {\r\n            profitDividendRewardsFee = previousprofitDividendRewardsFee;\r\n            totalFees = profitDividendRewardsFee.add(marketingFee).add(cakeDividendRewardsFee).add(buyBackAndLiquidityFee);\r\n            profitDividendEnabled = _enabled;\r\n        }\r\n\r\n        emit profitDividendEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setMarketingEnabled(bool _enabled) external onlyOwner {\r\n        if (_enabled == false) {\r\n            previousMarketingFee = marketingFee;\r\n            marketingFee = 0;\r\n            marketingEnabled = _enabled;\r\n        } else {\r\n            marketingFee = previousMarketingFee;\r\n            totalFees = marketingFee.add(profitDividendRewardsFee).add(cakeDividendRewardsFee).add(buyBackAndLiquidityFee);\r\n            marketingEnabled = _enabled;\r\n        }\r\n\r\n        emit MarketingEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function updateCakeDividendTracker(address newAddress) external onlyOwner {\r\n        CakeDividendTracker newCakeDividendTracker = CakeDividendTracker(payable(newAddress));\r\n\r\n        require(newCakeDividendTracker.owner() == address(this), \"must be owned by ProfitCake\");\r\n\r\n        newCakeDividendTracker.excludeFromDividends(address(newCakeDividendTracker));\r\n        newCakeDividendTracker.excludeFromDividends(address(this));\r\n        newCakeDividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n        newCakeDividendTracker.excludeFromDividends(address(deadAddress));\r\n\r\n        emit UpdateCakeDividendTracker(newAddress, address(cakeDividendTracker));\r\n\r\n        cakeDividendTracker = newCakeDividendTracker;\r\n    }\r\n\r\n    function updateprofitDividendTracker(address newAddress) external onlyOwner {\r\n        ProfitDividendTracker newprofitDividendTracker = ProfitDividendTracker(payable(newAddress));\r\n\r\n        require(newprofitDividendTracker.owner() == address(this), \"must be owned by ProfitCake\");\r\n\r\n        newprofitDividendTracker.excludeFromDividends(address(newprofitDividendTracker));\r\n        newprofitDividendTracker.excludeFromDividends(address(this));\r\n        newprofitDividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n        newprofitDividendTracker.excludeFromDividends(address(deadAddress));\r\n\r\n        emit UpdateprofitDividendTracker(newAddress, address(profitDividendTracker));\r\n\r\n        profitDividendTracker = newprofitDividendTracker;\r\n    }\r\n\r\n    function updateCakeDividendRewardFee(uint8 newFee) external onlyOwner {\r\n        require(newFee <= MAX_FEE_RATE, \"wrong\");\r\n        cakeDividendRewardsFee = newFee;\r\n        totalFees = cakeDividendRewardsFee.add(marketingFee).add(profitDividendRewardsFee).add(buyBackAndLiquidityFee);\r\n    }\r\n\r\n    function updateprofitDividendRewardFee(uint8 newFee) external onlyOwner {\r\n        require(newFee <= MAX_FEE_RATE, \"wrong\");\r\n        profitDividendRewardsFee = newFee;\r\n        totalFees = profitDividendRewardsFee.add(cakeDividendRewardsFee).add(marketingFee).add(buyBackAndLiquidityFee);\r\n    }\r\n\r\n    function updateMarketingFee(uint8 newFee) external onlyOwner {\r\n        require(newFee <= MAX_FEE_RATE, \"wrong\");\r\n        marketingFee = newFee;\r\n        totalFees = marketingFee.add(cakeDividendRewardsFee).add(profitDividendRewardsFee).add(buyBackAndLiquidityFee);\r\n    }\r\n\r\n    function updateBuyBackAndLiquidityFee(uint8 newFee) external onlyOwner {\r\n        require(newFee <= MAX_FEE_RATE, \"wrong\");\r\n        buyBackAndLiquidityFee = newFee;\r\n        totalFees = buyBackAndLiquidityFee.add(cakeDividendRewardsFee).add(profitDividendRewardsFee).add(marketingFee);\r\n    }\r\n\r\n    function updateUniswapV2Router(address newAddress) external onlyOwner {\r\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        require(isExcludedFromFees[account] != excluded, \"Already excluded\");\r\n        isExcludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function excludeFromDividend(address account) public onlyOwner {\r\n        cakeDividendTracker.excludeFromDividends(address(account));\r\n        profitDividendTracker.excludeFromDividends(address(account));\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) external onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            isExcludedFromFees[accounts[i]] = excluded;\r\n        }\r\n\r\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        require(pair != uniswapV2Pair, \"cannot be removed\");\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private onlyOwner {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        if(value) {\r\n            cakeDividendTracker.excludeFromDividends(pair);\r\n            profitDividendTracker.excludeFromDividends(pair);\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateGasForProcessing(uint256 newValue) external onlyOwner {\r\n        gasForProcessing = newValue;\r\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n    }\r\n\r\n    function updateMinimumBalanceForDividends(uint256 newMinimumBalance) external onlyOwner {\r\n        cakeDividendTracker.updateMinimumTokenBalanceForDividends(newMinimumBalance);\r\n        profitDividendTracker.updateMinimumTokenBalanceForDividends(newMinimumBalance);\r\n    }\r\n\r\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\r\n        cakeDividendTracker.updateClaimWait(claimWait);\r\n        profitDividendTracker.updateClaimWait(claimWait);\r\n    }\r\n\r\n    function getCakeClaimWait() external view returns(uint256) {\r\n        return cakeDividendTracker.claimWait();\r\n    }\r\n\r\n    function getprofitClaimWait() external view returns(uint256) {\r\n        return profitDividendTracker.claimWait();\r\n    }\r\n\r\n    function getTotalCakeDividendsDistributed() external view returns (uint256) {\r\n        return cakeDividendTracker.totalDividendsDistributed();\r\n    }\r\n\r\n    function getTotalprofitDividendsDistributed() external view returns (uint256) {\r\n        return profitDividendTracker.totalDividendsDistributed();\r\n    }\r\n\r\n    function getIsExcludedFromFees(address account) public view returns(bool) {\r\n        return isExcludedFromFees[account];\r\n    }\r\n\r\n    function withdrawableCakeDividendOf(address account) external view returns(uint256) {\r\n        return cakeDividendTracker.withdrawableDividendOf(account);\r\n    }\r\n\r\n    function withdrawableprofitDividendOf(address account) external view returns(uint256) {\r\n        return profitDividendTracker.withdrawableDividendOf(account);\r\n    }\r\n\r\n    function cakeDividendTokenBalanceOf(address account) external view returns (uint256) {\r\n        return cakeDividendTracker.balanceOf(account);\r\n    }\r\n\r\n    function profitDividendTokenBalanceOf(address account) external view returns (uint256) {\r\n        return profitDividendTracker.balanceOf(account);\r\n    }\r\n\r\n    function getAccountCakeDividendsInfo(address account)\r\n    external view returns (\r\n        address,\r\n        int256,\r\n        int256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256) {\r\n        return cakeDividendTracker.getAccount(account);\r\n    }\r\n\r\n    function getAccountprofitDividendsInfo(address account)\r\n    external view returns (\r\n        address,\r\n        int256,\r\n        int256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256) {\r\n        return profitDividendTracker.getAccount(account);\r\n    }\r\n\r\n    function getAccountCakeDividendsInfoAtIndex(uint256 index)\r\n    external view returns (\r\n        address,\r\n        int256,\r\n        int256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256) {\r\n        return cakeDividendTracker.getAccountAtIndex(index);\r\n    }\r\n\r\n    function getAccountprofitDividendsInfoAtIndex(uint256 index)\r\n    external view returns (\r\n        address,\r\n        int256,\r\n        int256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256) {\r\n        return profitDividendTracker.getAccountAtIndex(index);\r\n    }\r\n\r\n    function processDividendTracker(uint256 gas) external onlyOwner {\r\n        (uint256 cakeIterations, uint256 cakeClaims, uint256 cakeLastProcessedIndex) = cakeDividendTracker.process(gas);\r\n        emit ProcessedCakeDividendTracker(cakeIterations, cakeClaims, cakeLastProcessedIndex, false, gas, tx.origin);\r\n\r\n        (uint256 profitIterations, uint256 profitClaims, uint256 profitLastProcessedIndex) = profitDividendTracker.process(gas);\r\n        emit ProcessedprofitDividendTracker(profitIterations, profitClaims, profitLastProcessedIndex, false, gas, tx.origin);\r\n    }\r\n\r\n    function rand() internal view returns(uint256) {\r\n        uint256 seed = uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    block.timestamp + block.difficulty + ((uint256(keccak256(abi.encodePacked(block.coinbase)))) /\r\n                    (block.timestamp)) + block.gaslimit + ((uint256(keccak256(abi.encodePacked(msg.sender)))) /\r\n                    (block.timestamp)) + block.number)\r\n            )\r\n        );\r\n        uint256 randNumber = (seed - ((seed / 100) * 100));\r\n        if (randNumber == 0) {\r\n            randNumber += 1;\r\n            return randNumber;\r\n        } else {\r\n            return randNumber;\r\n        }\r\n    }\r\n\r\n    function claim() external {\r\n        cakeDividendTracker.processAccount(payable(msg.sender), false);\r\n        profitDividendTracker.processAccount(payable(msg.sender), false);\r\n    }\r\n\r\n    function getLastCakeDividendProcessedIndex() external view returns(uint256) {\r\n        return cakeDividendTracker.getLastProcessedIndex();\r\n    }\r\n\r\n    function getLastprofitDividendProcessedIndex() external view returns(uint256) {\r\n        return profitDividendTracker.getLastProcessedIndex();\r\n    }\r\n\r\n    function getNumberOfCakeDividendTokenHolders() external view returns(uint256) {\r\n        return cakeDividendTracker.getNumberOfTokenHolders();\r\n    }\r\n\r\n    function getNumberOfprofitDividendTokenHolders() external view returns(uint256) {\r\n        return profitDividendTracker.getNumberOfTokenHolders();\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"zero address\");\r\n        require(to != address(0), \"zero address\");\r\n        require(tradingIsEnabled || (isExcludedFromFees[from] || isExcludedFromFees[to]), \"Trading not started\");\r\n\r\n        bool excludedAccount = isExcludedFromFees[from] || isExcludedFromFees[to];\r\n\r\n        if (\r\n            tradingIsEnabled &&\r\n            automatedMarketMakerPairs[from] &&\r\n            !excludedAccount\r\n        ) {\r\n            require(\r\n                amount <= maxBuyTransactionAmount,\r\n                \"Error amount\"\r\n            );\r\n\r\n            uint256 contractBalanceRecipient = balanceOf(to);\r\n            require(\r\n                contractBalanceRecipient + amount <= maxWalletToken,\r\n                \"Error amount\"\r\n            );\r\n        } else if (\r\n            tradingIsEnabled &&\r\n            automatedMarketMakerPairs[to] &&\r\n            !excludedAccount\r\n        ) {\r\n            require(amount <= maxSellTransactionAmount, \"Error amount\");\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n            if (!swapping && contractTokenBalance >= swapTokensAtAmount) {\r\n                swapping = true;\r\n\r\n                if (marketingEnabled) {\r\n                    uint256 swapTokens = contractTokenBalance.div(totalFees).mul(marketingFee);\r\n                    swapTokensForBNB(swapTokens);\r\n                    uint256 vaultPortion = address(this).balance.div(10**2).mul(50);\r\n                    uint256 marketingPortion = address(this).balance.sub(vaultPortion);\r\n                    transferToWallet(payable(marketingWallet), marketingPortion);\r\n                    transferToWallet(payable(vaultWallet), vaultPortion);\r\n                }\r\n\r\n                if (buyBackAndLiquifyEnabled) {\r\n                    if(buyBackMode){\r\n                        swapTokensForBNB(contractTokenBalance.div(totalFees).mul(buyBackAndLiquidityFee));\r\n                    }else{\r\n                        swapAndLiquify(contractTokenBalance.div(totalFees).mul(buyBackAndLiquidityFee));\r\n                    }\r\n                }\r\n\r\n                if (cakeDividendEnabled) {\r\n                    uint256 sellTokens = contractTokenBalance.div(totalFees).mul(cakeDividendRewardsFee);\r\n                    swapAndSendCakeDividends(sellTokens.sub(1300));\r\n                }\r\n\r\n                if (profitDividendEnabled) {\r\n                    uint256 sellTokens = contractTokenBalance.div(totalFees).mul(profitDividendRewardsFee);\r\n                    swapAndSendprofitDividends(sellTokens.sub(1300));\r\n                }\r\n\r\n                swapping = false;\r\n            }\r\n\r\n            if (!swapping && buyBackAndLiquifyEnabled && buyBackMode) {\r\n\r\n                uint256 buyBackBalanceBnb = address(this).balance;\r\n                if (buyBackBalanceBnb >= minimumBalanceRequired && amount >= minimumSellOrderAmount) {\r\n                    swapping = true;\r\n\r\n                    if (buyBackBalanceBnb > buyBackUpperLimit) {\r\n                        buyBackBalanceBnb = buyBackUpperLimit;\r\n                    }\r\n\r\n                    buyBackAndBurn(buyBackBalanceBnb.div(10**2));\r\n\r\n                    swapping = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(tradingIsEnabled && !swapping && !excludedAccount) {\r\n            uint256 fees = amount.div(100).mul(totalFees);\r\n\r\n            // if sell, multiply by sellFeeIncreaseFactor\r\n            if(automatedMarketMakerPairs[to]) {\r\n                fees = fees.div(100).mul(sellFeeIncreaseFactor);\r\n            }\r\n\r\n            amount = amount.sub(fees);\r\n\r\n            super._transfer(from, address(this), fees);\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n\r\n        try cakeDividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n        try profitDividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n        try cakeDividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n        try profitDividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n\r\n        if(!swapping) {\r\n            uint256 gas = gasForProcessing;\r\n\r\n            if(rand() <= cakeDividendPriority) {\r\n\r\n                if( cakeDividendEnabled && sendCakeInTx ){\r\n                    try cakeDividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n                        emit ProcessedCakeDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n                    }\r\n                    catch {\r\n\r\n                    }\r\n                }\r\n\r\n                if( profitDividendEnabled && sendprofitInTx ){\r\n                    try profitDividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n                        emit ProcessedprofitDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n                    }\r\n                    catch {\r\n\r\n                    }\r\n                }\r\n            } else {\r\n                if( profitDividendEnabled && sendprofitInTx ){\r\n                    try profitDividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n                        emit ProcessedprofitDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n                    }\r\n                    catch {\r\n\r\n                    }\r\n                }\r\n\r\n                if( cakeDividendEnabled && sendCakeInTx ){\r\n                    try cakeDividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n                        emit ProcessedCakeDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n                    }\r\n                    catch {\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private {\r\n        // split the contract balance into halves\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForBNB(half);\r\n\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            deadAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function buyBackAndBurn(uint256 amount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n        uint256 initialBalance = balanceOf(deadAddress);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0, // accept any amount of Tokens\r\n            path,\r\n            deadAddress,\r\n            block.timestamp.add(300)\r\n        );\r\n\r\n        uint256 swappedBalance = balanceOf(deadAddress).sub(initialBalance);\r\n\r\n        _burn(deadAddress, swappedBalance);\r\n\r\n        emit SwapBNBForTokens(amount, path);\r\n    }\r\n\r\n    function manualBuyBackAndBurn(uint256 _amount) public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(buyBackAndLiquifyEnabled, \"not enabled\");\r\n        require(balance >= minimumBalanceRequired.add(_amount), \"amount is too big\");\r\n\r\n        if (\r\n            !swapping\r\n        ) {\r\n            buyBackAndBurn(_amount);\r\n        }\r\n    }\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n    }\r\n\r\n    function swapTokensForDividendToken(uint256 _tokenAmount, address _recipient, address _dividendAddress) private {\r\n        // generate the uniswap pair path\r\n        uint256 size;\r\n        if (_dividendAddress == profitDividendToken) {\r\n            size = 4;\r\n        } else {\r\n            size = 3;\r\n        }\r\n\r\n        address[] memory path = new address[](size);\r\n\r\n        if (_dividendAddress == profitDividendToken) {\r\n            path[0] = address(this);\r\n            path[1] = uniswapV2Router.WETH();\r\n            path[2] = cakeDividendToken;\r\n            path[3] = profitDividendToken;\r\n        } else {\r\n            path[0] = address(this);\r\n            path[1] = uniswapV2Router.WETH();\r\n            path[2] = _dividendAddress;\r\n        }\r\n\r\n        _approve(address(this), address(uniswapV2Router), _tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _tokenAmount,\r\n            0, // accept any amount of dividend token\r\n            path,\r\n            _recipient,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapAndSendCakeDividends(uint256 tokens) private {\r\n        swapTokensForDividendToken(tokens, address(this), cakeDividendToken);\r\n        uint256 cakeDividends = IERC20(cakeDividendToken).balanceOf(address(this));\r\n        transferDividends(cakeDividendToken, address(cakeDividendTracker), cakeDividendTracker, cakeDividends);\r\n    }\r\n\r\n    function swapAndSendprofitDividends(uint256 tokens) private {\r\n        swapTokensForDividendToken(tokens, address(this), profitDividendToken);\r\n        uint256 profitDividends = IERC20(profitDividendToken).balanceOf(address(this));\r\n        transferDividends(profitDividendToken, address(profitDividendTracker), profitDividendTracker, profitDividends);\r\n    }\r\n\r\n    function transferToWallet(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    function transferDividends(address dividendToken, address dividendTracker, DividendPayingToken dividendPayingTracker, uint256 amount) private {\r\n        bool success = IERC20(dividendToken).transfer(dividendTracker, amount);\r\n\r\n        if (success) {\r\n            dividendPayingTracker.distributeDividends(amount);\r\n            emit SendDividends(amount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract CakeDividendTracker is DividendPayingToken, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    IterableMapping.Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n\r\n    mapping (address => bool) public excludedFromDividends;\r\n\r\n    mapping (address => uint256) public lastClaimTimes;\r\n\r\n    uint256 public claimWait;\r\n    uint256 public minimumTokenBalanceForDividends;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n\r\n    constructor() DividendPayingToken(\"Cake_Dividend_Tracker\", \"Cake_Dividend_Tracker\", 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82) {\r\n        claimWait = 3600;\r\n        minimumTokenBalanceForDividends = 200000 * (10**18); //must hold 20000+ tokens\r\n    }\r\n\r\n    function _transfer(address, address, uint256) pure internal override {\r\n        require(false, \"No allowed\");\r\n    }\r\n\r\n    function withdrawDividend() pure public override {\r\n        require(false, \"disabled\");\r\n    }\r\n\r\n    function setDividendTokenAddress(address newToken) external override onlyOwner {\r\n        dividendToken = newToken;\r\n    }\r\n\r\n    function updateMinimumTokenBalanceForDividends(uint256 _newMinimumBalance) external onlyOwner {\r\n        minimumTokenBalanceForDividends = _newMinimumBalance * (10**18);\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        require(!excludedFromDividends[account]);\r\n        excludedFromDividends[account] = true;\r\n\r\n        _setBalance(account, 0);\r\n        tokenHoldersMap.remove(account);\r\n\r\n        emit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n        require(newClaimWait >= 60 && newClaimWait <= 86400, \"wrong\");\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns(uint256) {\r\n        return lastProcessedIndex;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns(uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n\r\n    function getAccount(address _account)\r\n    public view returns (\r\n        address account,\r\n        int256 index,\r\n        int256 iterationsUntilProcessed,\r\n        uint256 withdrawableDividends,\r\n        uint256 totalDividends,\r\n        uint256 lastClaimTime,\r\n        uint256 nextClaimTime,\r\n        uint256 secondsUntilAutoClaimAvailable) {\r\n        account = _account;\r\n\r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n\r\n        iterationsUntilProcessed = -1;\r\n\r\n        if(index >= 0) {\r\n            if(uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n            }\r\n            else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\r\n                tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\r\n                0;\r\n\r\n\r\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n            }\r\n        }\r\n\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        lastClaimTime = lastClaimTimes[account];\r\n\r\n        nextClaimTime = lastClaimTime > 0 ?\r\n        lastClaimTime.add(claimWait) :\r\n        0;\r\n\r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\r\n        nextClaimTime.sub(block.timestamp) :\r\n        0;\r\n    }\r\n\r\n    function getAccountAtIndex(uint256 index)\r\n    public view returns (\r\n        address,\r\n        int256,\r\n        int256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256) {\r\n        if(index >= tokenHoldersMap.size()) {\r\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n        return getAccount(account);\r\n    }\r\n\r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n        if(lastClaimTime > block.timestamp)  {\r\n            return false;\r\n        }\r\n\r\n        return block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n\r\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n        if(excludedFromDividends[account]) {\r\n            return;\r\n        }\r\n\r\n        if(newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n            tokenHoldersMap.set(account, newBalance);\r\n        }\r\n        else {\r\n            _setBalance(account, 0);\r\n            tokenHoldersMap.remove(account);\r\n        }\r\n\r\n        processAccount(account, true);\r\n    }\r\n\r\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n        if(numberOfTokenHolders == 0) {\r\n            return (0, 0, lastProcessedIndex);\r\n        }\r\n\r\n        uint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n        uint256 gasUsed = 0;\r\n\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 claims = 0;\r\n\r\n        while(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n            _lastProcessedIndex++;\r\n\r\n            if(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n                _lastProcessedIndex = 0;\r\n            }\r\n\r\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n            if(canAutoClaim(lastClaimTimes[account])) {\r\n                if(processAccount(payable(account), true)) {\r\n                    claims++;\r\n                }\r\n            }\r\n\r\n            iterations++;\r\n\r\n            uint256 newGasLeft = gasleft();\r\n\r\n            if(gasLeft > newGasLeft) {\r\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n            }\r\n\r\n            gasLeft = newGasLeft;\r\n        }\r\n\r\n        lastProcessedIndex = _lastProcessedIndex;\r\n\r\n        return (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n        if(amount > 0) {\r\n            lastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract ProfitDividendTracker is DividendPayingToken, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    IterableMapping.Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n\r\n    mapping (address => bool) public excludedFromDividends;\r\n\r\n    mapping (address => uint256) public lastClaimTimes;\r\n\r\n    uint256 public claimWait;\r\n    uint256 public minimumTokenBalanceForDividends;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n\r\n    constructor() DividendPayingToken(\"Profit_Dividend_Tracker\", \"Profit_Dividend_Tracker\", 0x3DF30324c768423629A220f77c0134A6E96cc261) {\r\n        claimWait = 3600;\r\n        minimumTokenBalanceForDividends = 200000 * (10**18); //must hold 20000+ tokens\r\n    }\r\n\r\n    function _transfer(address, address, uint256) pure internal override {\r\n        require(false, \"No allowed\");\r\n    }\r\n\r\n    function withdrawDividend() pure public override {\r\n        require(false, \"withdrawDividend disabled\");\r\n    }\r\n\r\n    function setDividendTokenAddress(address newToken) external override onlyOwner {\r\n        dividendToken = newToken;\r\n    }\r\n\r\n    function updateMinimumTokenBalanceForDividends(uint256 _newMinimumBalance) external onlyOwner {\r\n        minimumTokenBalanceForDividends = _newMinimumBalance * (10**18);\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        require(!excludedFromDividends[account]);\r\n        excludedFromDividends[account] = true;\r\n\r\n        _setBalance(account, 0);\r\n        tokenHoldersMap.remove(account);\r\n\r\n        emit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n        require(newClaimWait >= 60 && newClaimWait <= 86400, \"wrong\");\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns(uint256) {\r\n        return lastProcessedIndex;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns(uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n\r\n    function getAccount(address _account)\r\n    public view returns (\r\n        address account,\r\n        int256 index,\r\n        int256 iterationsUntilProcessed,\r\n        uint256 withdrawableDividends,\r\n        uint256 totalDividends,\r\n        uint256 lastClaimTime,\r\n        uint256 nextClaimTime,\r\n        uint256 secondsUntilAutoClaimAvailable) {\r\n        account = _account;\r\n\r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n\r\n        iterationsUntilProcessed = -1;\r\n\r\n        if(index >= 0) {\r\n            if(uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n            }\r\n            else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\r\n                tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\r\n                0;\r\n\r\n\r\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n            }\r\n        }\r\n\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        lastClaimTime = lastClaimTimes[account];\r\n\r\n        nextClaimTime = lastClaimTime > 0 ?\r\n        lastClaimTime.add(claimWait) :\r\n        0;\r\n\r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\r\n        nextClaimTime.sub(block.timestamp) :\r\n        0;\r\n    }\r\n\r\n    function getAccountAtIndex(uint256 index)\r\n    public view returns (\r\n        address,\r\n        int256,\r\n        int256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256) {\r\n        if(index >= tokenHoldersMap.size()) {\r\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n        return getAccount(account);\r\n    }\r\n\r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n        if(lastClaimTime > block.timestamp)  {\r\n            return false;\r\n        }\r\n\r\n        return block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n\r\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n        if(excludedFromDividends[account]) {\r\n            return;\r\n        }\r\n\r\n        if(newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n            tokenHoldersMap.set(account, newBalance);\r\n        }\r\n        else {\r\n            _setBalance(account, 0);\r\n            tokenHoldersMap.remove(account);\r\n        }\r\n\r\n        processAccount(account, true);\r\n    }\r\n\r\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n        if(numberOfTokenHolders == 0) {\r\n            return (0, 0, lastProcessedIndex);\r\n        }\r\n\r\n        uint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n        uint256 gasUsed = 0;\r\n\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 claims = 0;\r\n\r\n        while(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n            _lastProcessedIndex++;\r\n\r\n            if(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n                _lastProcessedIndex = 0;\r\n            }\r\n\r\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n            if(canAutoClaim(lastClaimTimes[account])) {\r\n                if(processAccount(payable(account), true)) {\r\n                    claims++;\r\n                }\r\n            }\r\n\r\n            iterations++;\r\n\r\n            uint256 newGasLeft = gasleft();\r\n\r\n            if(gasLeft > newGasLeft) {\r\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n            }\r\n\r\n            gasLeft = newGasLeft;\r\n        }\r\n\r\n        lastProcessedIndex = _lastProcessedIndex;\r\n\r\n        return (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n        if(amount > 0) {\r\n            lastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"BuyBackAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"CakeDividendEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"MarketingEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMarketingWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedCakeDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedprofitDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapBNBForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateCakeDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateprofitDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newVaultWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldVaultWallet\",\"type\":\"address\"}],\"name\":\"VaultWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"profitDividendEnabledUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackAndLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackUpperLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeDividendEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeDividendPriority\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeDividendRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeDividendToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"cakeDividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeDividendTracker\",\"outputs\":[{\"internalType\":\"contract CakeDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountCakeDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountCakeDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountprofitDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountprofitDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCakeClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getIsExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastCakeDividendProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastprofitDividendProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinCakeBeforeSendDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinprofitBeforeSendDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfCakeDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfprofitDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCakeDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalprofitDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getprofitClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manualBuyBackAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBalanceRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumSellOrderAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partnerOrExchangeAddress\",\"type\":\"address\"}],\"name\":\"prepareForPartnerOrExchangeListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousBuyBackAndLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousCakeDividendRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousprofitDividendRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitDividendEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitDividendRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitDividendToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"profitDividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitDividendTracker\",\"outputs\":[{\"internalType\":\"contract ProfitDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeIncreaseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCakeInTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendprofitInTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setBuyBackAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setBuyBackMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyBackLimit\",\"type\":\"uint256\"}],\"name\":\"setBuyBackUpperLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setCakeDividendEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setCakeDividendPriority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setMarketingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxn\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxn\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxToken\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumBalanceRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumSellOrderAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"setSellTransactionMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setSendCakeInTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setSendprofitInTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTradingIsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setprofitDividendEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"updateBuyBackAndLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"updateCakeDividendRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"updateCakeDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateCakeDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"updateMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinCakeBeforeSendDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumBalance\",\"type\":\"uint256\"}],\"name\":\"updateMinimumBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinprofitBeforeSendDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"updateVaultWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"updateprofitDividendRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"updateprofitDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateprofitDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableCakeDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableprofitDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ProfitCake", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "IterableMapping:75e23652964e2e6bf3cb668cdcb499f205b0ed23", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8a3c550b136524b687475953546eb2a457b072ac58ac44ab27aac6209c726a1e"}