{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INaveStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface INaveStaking {\\n\\n    event Stake(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 date\\n    );\\n\\n    event Withdraw(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 date\\n    );\\n\\n    event Claim(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 date\\n    );\\n\\n    event StableCoinUpdated(\\n        address oldStablecoin,\\n        address newStablecoin,\\n        uint256 decimals,\\n        uint256 date\\n    );\\n\\n    event UpdateMinStakingAmount(\\n        address oldMinStakingAmount,\\n        address newMinStakingAmount,\\n        uint256 date\\n    );\\n\\n\\n    function stake(uint256 amount) external returns (bool);\\n\\n    function withdraw() external returns (bool);\\n\\n    function claimStablecoin() external returns (bool);\\n\\n    function updateMinimunStakingAmount(\\n      uint256 _newMinStakingAmount\\n    ) external returns(bool);\\n\\n    function updateRewardStableCoin(\\n      address _newStablecoin,\\n      uint256 _stablecoinDecimals\\n    ) external returns(bool);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.1;\\n\\nimport \\\"../libraries/DataTypes.sol\\\";\\nimport \\\"./IVaultInstance.sol\\\";\\nimport \\\"./IVaultStorage.sol\\\";\\n\\ninterface IVaultDeployer{\\n\\n    function deployVaultInstance(\\n        DataTypes.VaultMetaData memory _vaultMetaData,\\n        address _vaultCreator,\\n        uint256 _entryFeeRate,\\n        uint256 _managementFeeRate,\\n        uint256 _performanceFeeRate\\n    ) external returns(IVaultInstance);\\n\\n    function setStorage(IVaultStorage vaultStorage) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.1;\\n\\nimport \\\"./IVaultInstance.sol\\\";\\nimport \\\"./IVaultFees.sol\\\";\\nimport \\\"./IVaultValueInfo.sol\\\";\\nimport \\\"./INaveStaking.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IVaultFactory {\\n\\n    function registerVault(\\n        DataTypes.VaultMetaData calldata _vaultMetaData,\\n        uint256 _entryFeeRate,\\n        uint256 _maintenanceFeeRate,\\n        uint256 _performanceFeeRate\\n    ) external;\\n\\n    function isVaultInstance(address _vault) external view returns (bool);\\n\\n    function getVaultByName(string memory _vaultName) external view returns (IVaultInstance);\\n\\n    function getTokenByVaultName(string memory _vaultName) external view returns (address);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.1;\\n\\nimport \\\"./IVaultInstance.sol\\\";\\nimport \\\"../libraries/DataTypes.sol\\\";\\n\\ninterface IVaultFees {\\n\\n  function takeFees(\\n    IVaultInstance vaultInstance,\\n    uint256 _inputAmount\\n  ) external view returns(uint256, uint256, uint256);\\n\\n  function _manageFeesAndVaultTokens(\\n    IVaultInstance vaultInstance,\\n    uint256 _inputAmount,\\n    uint256 _preTVLInBUSD\\n  ) external view returns(uint256, uint256, uint256, uint256);\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultInstance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.1;\\n\\nimport \\\"../ShareToken.sol\\\";\\n\\ninterface IVaultInstance {\\n\\n  function depositInTokens(\\n    address _tokenIn,\\n    uint256 _amountIn\\n  ) external;\\n\\n  function deposit() external payable;\\n\\n  function withdraw(\\n    uint256 _amount,\\n    bool    _bnb,\\n    address _tokenOut\\n  ) external;\\n\\n  function editTokens(\\n      address[] memory _tokenAddresses,\\n      uint256[] memory _tokenPercents,\\n      bool _newEntryFeeRateCheck,\\n      uint256 _newEntryFeeRate\\n    ) external;\\n\\n  function getTokenPercents() external view returns(uint256[] memory);\\n\\n  function getTokenAddresses() external view returns(address[] memory);\\n\\n  function getDecimals() external view returns (uint256);\\n\\n  function getShareToken() external view returns (TEST_ShareToken);\\n\\n  function getLastFeeDate() external view returns(uint256);\\n\\n  function getExcludedFromFees(\\n    address _investor\\n  ) external view returns(bool);\\n\\n  function getShareTokenPriceWatermark() external view returns(uint256);\\n\\n  function getShareTokenSupplyWatermark() external view returns(uint256);\\n\\n  function getEntryFeeRate() external view returns (uint256);\\n\\n  function getManagementFeeRate() external view returns (uint256);\\n\\n  function getPerformanceFeeRate() external view returns (uint256);\\n\\n  function getNumInvestors() external view returns(uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.1;\\n\\nimport \\\"./IVaultFees.sol\\\";\\nimport \\\"./IVaultValueInfo.sol\\\";\\nimport \\\"./INaveStaking.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVaultStorage {\\n\\n    function isProtocolContract(address _caller) external view returns (bool);\\n\\n    function platformAddress(address _user) external view returns (bool);\\n\\n    function addToPlatform(address _user) external;\\n\\n    function removeFromPlatform(address _user) external;\\n\\n    function decimals() external view returns (uint256);\\n\\n    function setPlatformFeeRate(uint256 _newPlatformFeeRate) external;\\n\\n    function setPlatformWallet(address _newPlatformWallet) external;\\n\\n    function setMaxNumTokens(uint256 _newMaxNumTokens) external;\\n\\n    function setMaxEntryFee(uint256 _newMaxEntryFee) external;\\n\\n    function setMaxMaintenanceFee(uint256 _newMaxMaintenanceFee) external;\\n\\n    function setMaxPerformanceFee(uint256 _newMaxPerformanceFee) external;\\n\\n    function setDecimals(uint256 numDecimals) external;\\n\\n    function setAcceptedInTokens(address _tokenIn,bool _status) external;\\n\\n    function maxNumTokens() external view returns (uint256);\\n\\n    function setVaultValueInfo(IVaultValueInfo _vaultValueInfo) external;\\n\\n    function setVaultFees(IVaultFees _vaultFees) external;\\n\\n    function setNaveStaking(INaveStaking _naveStaking) external;\\n\\n    function getPlatformFeeToken() external view returns (address);\\n\\n    function getPlatformWallet() external view returns (address);\\n\\n    function getPlatformFeeRate() external view returns (uint256);\\n\\n    function acceptedInTokens(address _token) external view returns (bool);\\n\\n    function getVaultValueInfo() external view returns(IVaultValueInfo);\\n\\n    function getVaultFees() external view returns(IVaultFees);\\n\\n    function getNaveStaking() external view returns(INaveStaking);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultValueInfo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.1;\\n\\nimport \\\"../ShareToken.sol\\\";\\nimport \\\"./IVaultInstance.sol\\\";\\n\\ninterface IVaultValueInfo {\\n\\n  function _getVaultTvlInWBNB(\\n    IVaultInstance _vaultInstance\\n  ) external view\\n  returns(uint256);\\n\\n\\n  function _getVaultTvlInUSD(\\n    IVaultInstance _vaultInstance\\n  ) external view\\n  returns(uint256 tvl);\\n\\n\\n  function getShareTokenPriceInUSD(\\n    IVaultInstance _vaultInstance\\n    //uint256 numInvestors\\n  ) external view\\n  returns(uint256 shareTokenPrice);\\n\\n\\n  function getUserTVLInUSD(\\n    address _investor,\\n    IVaultInstance _vaultInstance\\n  ) external view\\n  returns(uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.1;\\n\\nimport \\\"../interfaces/INaveStaking.sol\\\";\\n\\nlibrary DataTypes {\\n\\n    struct TokenOut {\\n        address tokenAddress;\\n        uint256 percent;\\n    }\\n\\n    struct VaultMetaData {\\n        string vaultName;\\n        string shareTokenName;\\n        string shareTokenSymbol;\\n        address[] tokenAddresses;\\n        uint256[] tokenPercents;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.1;\\n\\nlibrary Errors {\\n    string public constant VL_INVALID_AMOUNT = \\\"1\\\"; // Amount must be greater than 0\\n    string public constant VL_INVALID_TOKENOUTS = \\\"2\\\"; // Token to be distributed does not exist\\n    string public constant CT_CALLER_MUST_BE_VAULT = \\\"3\\\"; // The caller of this function must be a lending pool\\n    string public constant VL_NOT_CREATOR = \\\"4\\\"; // Not vault creator\\n    string public constant VL_NOT_INVESTOR = \\\"5\\\"; // Not vault investor\\n    string public constant VL_WITHDRAW_FAILED = \\\"6\\\"; // Failed to withdraw\\n    string public constant VL_NOT_ENOUGH_AMOUNT = \\\"7\\\"; // Not enough amount\\n    string public constant EXCEED_MAX_NUMBER = \\\"8\\\"; // Exceed max number of tokens\\n    string public constant VAULT_NAME_DUP = \\\"9\\\"; // Duplicated vault name\\n    string public constant TOKEN_NAME_DUP = \\\"10\\\"; // Duplicated token name\\n    string public constant TOKEN_SYMBOL_DUP = \\\"11\\\";  // Duplicated token symbol\\n    string public constant NOT_ADMIN = \\\"12\\\"; // Not admin\\n    string public constant ZERO_PLATFORM_FEE = \\\"13\\\"; // No investors, no platform fee\\n    string public constant NOT_ZERO_ADDRESS = \\\"14\\\"; // No zero address\\n\\n    string public constant NOT_100_PERCENT = \\\"15\\\"; // No zero address \\\"Total percent must be 100.\\\"\\n    string public constant PAIR_NOT_EXIST = \\\"16\\\";//\\\"Pair must exist on the swap protocol.\\\"\\n    string public constant WALLET_NOT_ALLOWED_FOR_FEES = \\\"17\\\";//\\\"You cannot add this wallet to fees.\\\"\\n\\n    string public constant WRONG_ENTRY_FEE = \\\"18\\\"; //Too much entry fee\\n    string public constant WRONG_MAINTENANCE_FEE = \\\"19\\\"; //Too much maintenance fee\\n    string public constant WRONG_PERFORMANCE_FEE = \\\"20\\\"; //Too much performance fee\\n    string public constant VAULT_CLOSED = \\\"21\\\"; //\\\"Vault is closed.\\\"\\n    string public constant BNB_AMOUNT_0 = \\\"22\\\"; //\\\"Total amount in BNB must be >0\\\"\\n    string public constant CANNOT_SEND_TOKENS = \\\"23\\\"; //\\\"Cannot send tokens to the user.\\\"\\n    string public constant INPUT_TOKEN_NOT_ACCEPTED = \\\"24\\\"; //This token is not accepted for depositting (investing) in Vaults\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.1;\\n\\nimport \\\"./DataTypes.sol\\\";\\n\\nlibrary Utils {\\n\\n  function _yearToDayFee(uint256 _num, uint256 _decimals) internal pure returns (uint256){\\n      return (_num * _decimals) / 365;\\n  }\\n\\n  function _numdaysFromFees(uint256 _lastFeeDate) internal view returns (uint256) {\\n      return 1;//(block.timestamp - _lastFeeDate) / 60 / 60 / 24;\\n  }\\n\\n  function _checkPercents(\\n    uint256[] memory _percentList\\n  ) internal pure returns (uint256 percentSum){\\n    for (uint256 i = 0; i < _percentList.length; i++) {\\n      percentSum += _percentList[i];\\n    }\\n    return percentSum;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/ShareToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/IVaultInstance.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\n\\ncontract TEST_ShareToken is ERC20 {\\n\\n    IVaultInstance public vaultInstance;\\n\\n    event Mint(address indexed from, uint256 value);\\n    event Burn(address indexed from, uint256 value);\\n\\n    modifier onlyVault {\\n        require(\\n          msg.sender == address(vaultInstance),\\n          Errors.CT_CALLER_MUST_BE_VAULT\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        IVaultInstance _vaultInstance,\\n        string memory _shareTokenName,\\n        string memory _shareTokenSymbol\\n    ) ERC20(_shareTokenName, _shareTokenSymbol) {\\n        vaultInstance = _vaultInstance;\\n    }\\n\\n    function mint(\\n        address user,\\n        uint256 amount\\n    ) external onlyVault {\\n        require(amount != 0, Errors.VL_INVALID_AMOUNT);\\n        _mint(user, amount);\\n        emit Mint(user, amount);\\n    }\\n\\n    function burn(\\n        address user,\\n        uint256 amount\\n    ) external onlyVault {\\n        require(amount != 0, Errors.VL_INVALID_AMOUNT);\\n        _burn(user, amount);\\n        emit Burn(user, amount);\\n    }\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/VaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.1;\\n\\nimport \\\"./interfaces/IVaultFactory.sol\\\";\\nimport \\\"./interfaces/IVaultDeployer.sol\\\";\\nimport \\\"./interfaces/IVaultInstance.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./libraries/DataTypes.sol\\\";\\nimport \\\"./libraries/Utils.sol\\\";\\n\\ncontract TEST_VaultFactory is IVaultFactory {\\n    using Utils for *;\\n\\n    IVaultDeployer private _vaultDeployer;\\n\\n    uint256 public numVaults;\\n    mapping(address => bool) public vaultRegistry;\\n    mapping(string => IVaultInstance) public vaults;\\n    mapping(string => address) public tokenAddressByName; //Token Name --> Token Address\\n    mapping(string => address) public tokenAddressBySymbol; //Token Symbol --> Token Address\\n    mapping(address => address) public vaultCreators;\\n    mapping(uint256 => address) public vaultMapping;\\n\\n    constructor(\\n      IVaultDeployer vaultDeployer\\n    ) {\\n        _vaultDeployer = vaultDeployer;\\n    }\\n\\n    function registerVault(\\n        DataTypes.VaultMetaData memory _vaultMetaData,\\n        uint256 _entryFeeRate,\\n        uint256 _managementFeeRate,\\n        uint256 _performanceFeeRate\\n    ) public override {\\n\\n        require(address(vaults[_vaultMetaData.vaultName]) == address(0), Errors.VAULT_NAME_DUP);\\n        require(tokenAddressByName[_vaultMetaData.shareTokenName] == address(0), Errors.TOKEN_NAME_DUP);\\n        require(tokenAddressBySymbol[_vaultMetaData.shareTokenSymbol] == address(0), Errors.TOKEN_SYMBOL_DUP);\\n        require(_vaultMetaData.tokenAddresses.length > 0, Errors.VL_INVALID_TOKENOUTS);\\n        require(_vaultMetaData.tokenPercents.length > 0, Errors.VL_INVALID_TOKENOUTS);\\n        require(_vaultMetaData.tokenPercents.length == _vaultMetaData.tokenAddresses.length, Errors.VL_INVALID_TOKENOUTS);\\n\\n        IVaultInstance vaultInstance = _vaultDeployer.deployVaultInstance(\\n          _vaultMetaData,\\n          msg.sender,\\n          _entryFeeRate,\\n          _managementFeeRate,\\n          _performanceFeeRate\\n        );\\n\\n        vaultRegistry[address(vaultInstance)] = true;\\n        vaults[_vaultMetaData.vaultName] = vaultInstance;\\n        vaultCreators[address(vaultInstance)] = msg.sender;\\n        numVaults++;\\n        vaultMapping[numVaults] = address(vaultInstance);\\n\\n\\n\\n        address _token = address(vaultInstance.getShareToken());\\n        tokenAddressByName[_vaultMetaData.shareTokenName] = _token;\\n        tokenAddressBySymbol[_vaultMetaData.shareTokenSymbol] = _token;\\n\\n        //emit VaultRegistered(address(vault), _token, msg.sender);\\n\\n    }\\n\\n    function isVaultInstance(address _vault) public view override returns (bool) {\\n      return vaultRegistry[_vault];\\n    }\\n\\n    function getVaultByName(string memory _vaultName) public view override returns (IVaultInstance){\\n      return vaults[_vaultName];\\n    }\\n\\n    function getTokenByVaultName(string memory _vaultName) public view override returns (address){\\n      return address(IVaultInstance(vaults[_vaultName]).getShareToken());\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IVaultDeployer\",\"name\":\"vaultDeployer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_vaultName\",\"type\":\"string\"}],\"name\":\"getTokenByVaultName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_vaultName\",\"type\":\"string\"}],\"name\":\"getVaultByName\",\"outputs\":[{\"internalType\":\"contract IVaultInstance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"isVaultInstance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"shareTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"shareTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenPercents\",\"type\":\"uint256[]\"}],\"internalType\":\"struct DataTypes.VaultMetaData\",\"name\":\"_vaultMetaData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_entryFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_managementFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFeeRate\",\"type\":\"uint256\"}],\"name\":\"registerVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokenAddressByName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokenAddressBySymbol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultCreators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"contract IVaultInstance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TEST_VaultFactory", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cfd595616abc6de2778001391fb2ffb1af81ef9e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}