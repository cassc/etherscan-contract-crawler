{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public _owner;\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n   \r\n    function renounceOwnership() public  onlyOwner {\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public  onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ncontract BYDK is Context, Ownable, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => Relation) private _relation;\r\n    mapping(address => bool) private _whiteList;\r\n    mapping(address => bool) private _blacklist;\r\n    mapping(address => bool) private _braveTroopsList;\r\n\r\n    uint8 private _decimals;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _maxTxAmount;\r\n    uint256 public directRate;\r\n    uint256 public indiretRate;\r\n    uint256 public blackRate;\r\n    uint256 public sharetRate;\r\n    uint256 public liquifyRate;\r\n    uint256 public biddingRate;\r\n    uint256 public lpShareRate;\r\n    uint256 public burnMinAmount;\r\n    uint256 public denominator;\r\n    uint256 public numTokensSellToAddToLiquidity;\r\n    uint256 public limit;\r\n\r\n    address public usdt;\r\n\r\n    address public biddingAddress = 0x144255298efF5AFd8000B9fba74e4a4F2aFD6b20;\r\n    address public shareAddress = 0x2c0b21b11E24EEA70c01208C6e78b6929ec7A158;\r\n    address public lpShareAddress = 0x71E290CF4ebfd4534ee8775dCDFecE8313EAB50a;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    IUniswapV2Pair public immutable uniswapV2Pair;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    struct Relation {\r\n        address one;\r\n        address two;\r\n    }\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n    event WithdrawlUSDT(address sender, uint256 amount);\r\n    event WithdrawlERC20(address sender, uint256 amount);\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor(address router_, address usdt_) {\r\n        _owner = msg.sender;\r\n        _name = \"BY DK TOKEN\";\r\n        _symbol = \"BYDK\";\r\n        _decimals = 18;\r\n        _totalSupply = 2000000*10**_decimals;\r\n        burnMinAmount = 10000*10**_decimals;\r\n        _balances[_owner] = _totalSupply;\r\n        numTokensSellToAddToLiquidity = 1000*10**_decimals;\r\n        _maxTxAmount = 5000*10**_decimals;\r\n        limit = 1*10**_decimals;\r\n\r\n        directRate = 10;\r\n        indiretRate = 10;\r\n        blackRate = 30;\r\n        sharetRate = 20;\r\n        lpShareRate = 30;\r\n        liquifyRate = 30;   // \u6d41\u52a8\u6027\u8d39\u7528\r\n        biddingRate = 20;\r\n        denominator = 1000; // \u5206\u6bcd\r\n\r\n        _whiteList[address(this)] = true;\r\n\r\n        usdt = usdt_;\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router_);\r\n        uniswapV2Pair = IUniswapV2Pair(IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), usdt_));\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        emit Transfer(address(0), _owner, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public view virtual  returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual  returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual  returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        // \u62c9\u5165\u9ed1\u540d\u5355\u7684\u7528\u6237\u65e0\u6cd5\u8f6c\u5165\u8f6c\u51fa\u548c\u4e70\u5165\u5356\u51fa\r\n        require(!getInBlacklist(sender), \"ERC20: Blacklist cannot transfer\");\r\n        require(!getInBlacklist(recipient), \"ERC20: Blacklist cannot accept transfer\");\r\n\r\n        // \u8c94\u8c85\u9ed1\u540d\u5355\u7528\u6237\u65e0\u6cd5\u8f6c\u51fa\u3001\u8d2d\u4e70\r\n        require(!getInBraveTroops(sender), \"ERC20: User cannot transfer out\");\r\n\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        // \u4e0d\u5b58\u5728\u9ed1\u540d\u5355\u4e2d\u7684\u7528\u6237\u6709\u8f6c\u8d26\u9650\u5236\r\n        if(!getInWhiteList(sender)){\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        }\r\n           \r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        if (senderBalance == amount) {\r\n            amount -= 10;\r\n        }\r\n\r\n        // \u6dfb\u52a0\u6d41\u52a8\u6027\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\r\n        if (overMinTokenBalance && !inSwapAndLiquify && sender != address(uniswapV2Pair) && swapAndLiquifyEnabled) {\r\n            contractTokenBalance = numTokensSellToAddToLiquidity;\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n\r\n        _balances[sender] = senderBalance.sub(amount);\r\n\r\n        if (getInWhiteList(sender) || getInWhiteList(recipient) || recipient == address(uniswapV2Pair) || totalSupply() <= burnMinAmount){ // \u53d6\u6d88\u624b\u7eed\u8d39\r\n           _transferToken(sender, recipient, amount);\r\n        } else { // \u624b\u7eed\u8d39\u5206\u914d\r\n            uint256 recipientAmount = _transferRelationToken(recipient,amount);\r\n            _transferToken(sender, recipient, recipientAmount);\r\n        }\r\n\r\n        // \u53d1\u9001\u6216\u8005\u63a5\u53d7\u662f\u4ea4\u6613\u5bf9\u5730\u5740\u4ee5\u53ca\u767d\u540d\u5355\u5730\u5740\u65e0\u6cd5\u521b\u5efa\u5173\u7cfb\r\n        if (recipient != address(uniswapV2Pair) && sender != address(uniswapV2Pair) && !getInWhiteList(sender) && !getInWhiteList(recipient)){\r\n            if (amount >= limit){// \u521b\u5efa\u5173\u7cfb\u65f6\u5fc5\u987b\u8981\u6ee1\u8db3\u6700\u4f4e\u8f6c\u8d26\u9650\u5236\u624d\u80fd\u521b\u5efa\u6210\u529f\r\n                _relationEstablish(sender, recipient);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function _transferRelationToken(address recipient,uint256 amount) internal returns(uint256 recipientAmount){\r\n        uint256 directPushFree = amount.mul(directRate).div(denominator);\r\n        uint256 indirectPushFree = amount.mul(indiretRate).div(denominator);\r\n        // \u4e00\u4e8c\u4ee3\u624b\u7eed\u8d39\r\n        _relationTransfer(recipient, directPushFree, indirectPushFree);\r\n        {\r\n            uint256 liquifyFee = amount.mul(liquifyRate).div(denominator);\r\n            uint256 blackHoleFree = amount.mul(blackRate).div(denominator);\r\n            uint256 shareFree = amount.mul(sharetRate).div(denominator);\r\n            uint256 biddingFree = amount.mul(biddingRate).div(denominator);\r\n            uint256 lpShareFee = amount.mul(lpShareRate).div(denominator);\r\n            _transferToken(recipient, address(this), liquifyFee);  // \u56de\u6d41\u5230\u4ea4\u6613\u5bf9\r\n            _burn(recipient,  blackHoleFree);                      // \u9ed1\u6d1e\u9500\u6bc1\r\n            _transferToken(recipient, shareAddress, shareFree);    // \u6301\u5e01\u5206\u7ea2\r\n            _transferToken(recipient, biddingAddress, biddingFree);// \u7ade\u8d5b\u5206\u7ea2\r\n            _transferToken(recipient, lpShareAddress, lpShareFee); // lp\u56de\u6d41\u5206\u7ea2\r\n            recipientAmount = amount.sub(directPushFree + indirectPushFree + blackHoleFree + shareFree + liquifyFee + biddingFree + lpShareFee);\r\n        }\r\n    }\r\n\r\n    function _relationEstablish(address sender, address recipient) internal {\r\n        if (_relation[recipient].one == address(0)){\r\n            _relation[recipient].one = sender;\r\n            _relation[recipient].two = _relation[sender].one;\r\n        }\r\n    }\r\n\r\n    function _relationTransfer(address recipient, uint256 directPushFree, uint256 indirectPushFree) internal {\r\n        if (_relation[recipient].one != address(0)){\r\n            _transferToken(recipient, _relation[recipient].one, directPushFree);\r\n        } else {\r\n            _burn(recipient, directPushFree + indirectPushFree);\r\n            return;\r\n        }\r\n\r\n        if (_relation[recipient].two != address(0)){\r\n            _transferToken(recipient, _relation[recipient].two, indirectPushFree);\r\n        }else {\r\n            _burn(recipient, indirectPushFree);\r\n        }\r\n    }\r\n\r\n    function _transferToken(address sender, address recipient, uint256 amount) internal {\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        _totalSupply = _totalSupply.sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    function burn(uint256 value) external onlyOwner {\r\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        // split the contract balance into halves\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        // capture the contract's current usdt balance.\r\n        // this is so that we can capture exactly the amount of usdt that the\r\n        // swap creates, and not make the liquidity event include any usdt that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = IERC20(usdt).balanceOf(address(this));\r\n\r\n        // swap tokens for usdt\r\n        swapTokensForToken(half);\r\n\r\n        // how much usdt did we just swap into?\r\n        uint256 newBalance = IERC20(usdt).balanceOf(address(this)).sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(otherHalf, newBalance);\r\n        \r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForToken(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> usdt\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uint256 initialBalance = IERC20(usdt).balanceOf(_owner);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of usdt\r\n            path,\r\n            _owner,\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 newBalance = IERC20(usdt).balanceOf(_owner).sub(initialBalance);\r\n\r\n        IERC20(usdt).transferFrom(_owner, address(this), newBalance); // \u5408\u7ea6\u521b\u5efa\u5b8c\u6210\u540e_owner\u5fc5\u987b\u8981\u5148\u6388\u6743\u7ed9\u5408\u7ea6usdt\r\n    }\r\n\r\n    function addLiquidity(uint256 token0Amount, uint256 token1Amount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), token0Amount);\r\n        IERC20(usdt).approve(address(uniswapV2Router), token1Amount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidity(\r\n            address(this),\r\n            usdt,\r\n            token0Amount,\r\n            token1Amount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            _owner,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setTransferFee(\r\n        uint256 directFee_, \r\n        uint256 indirectFee_,\r\n        uint256 lpShareRate_,\r\n        uint256 blackFee_, \r\n        uint256 shareFee_, \r\n        uint256 liquifyFee_, \r\n        uint256 biddingFee_,\r\n        uint256 denominator_) external onlyOwner \r\n    {\r\n        directRate = directFee_;\r\n        indiretRate = indirectFee_;\r\n        lpShareRate = lpShareRate_;\r\n        blackRate = blackFee_;\r\n        sharetRate = shareFee_;\r\n        liquifyRate = liquifyFee_;\r\n        biddingRate = biddingFee_;\r\n        denominator = denominator_;\r\n    }\r\n\r\n    function includeWhiteList(address account) external onlyOwner{\r\n        _whiteList[account] = true;\r\n    }\r\n\r\n    function excludeWhiteList(address account) external onlyOwner{\r\n        _whiteList[account] = false;\r\n    }\r\n\r\n    function getInWhiteList(address account) public view returns(bool){\r\n        return _whiteList[account];\r\n    }\r\n\r\n    function includeBlacklist(address account) external onlyOwner {\r\n        _blacklist[account] = true;\r\n    }\r\n\r\n    function excludeBlacklist(address account) external onlyOwner {\r\n        _blacklist[account] = false;\r\n    }\r\n\r\n    function getInBlacklist(address account) public view returns(bool) {\r\n        return _blacklist[account];\r\n    }\r\n\r\n    function includeBraveTroops(address account) external onlyOwner{\r\n        _braveTroopsList[account] = true;\r\n    }\r\n\r\n    function excludeBraveTroops(address account) external onlyOwner{\r\n        _braveTroopsList[account] = false;\r\n    }\r\n\r\n    function getInBraveTroops(address account) public view returns(bool){\r\n        return _braveTroopsList[account];\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n    \r\n    function setNumTokensSellToAddToLiquidity(uint256 swapNumber) public onlyOwner {\r\n        numTokensSellToAddToLiquidity = swapNumber * 10 ** _decimals;\r\n    }\r\n\r\n    function setBurnMinAmount(uint256 minNumber) public onlyOwner {\r\n        burnMinAmount = minNumber * 10 ** _decimals;\r\n    }\r\n\r\n    function setRelationTransferLimit(uint256 limit_) public onlyOwner {\r\n        limit = limit_ * 10 ** _decimals;\r\n    }\r\n\r\n    function setMaxTransferLimit(uint256 limit_) public onlyOwner {\r\n        _maxTxAmount = limit_ * 10 ** _decimals;\r\n    }\r\n\r\n    function setCollectFeeAddress(address biddingAddress_, address shareAddress_, address lpShareAddress_) public onlyOwner{\r\n        biddingAddress = biddingAddress_;\r\n        shareAddress = shareAddress_;\r\n        lpShareAddress = lpShareAddress_;\r\n    }\r\n\r\n    function withdrawlUSDT() external onlyOwner{\r\n        uint256 usdtBalance = IERC20(usdt).balanceOf(address(this));\r\n        require(usdtBalance > 0, \"BEP20: Balance is not enough\");\r\n        IERC20(usdt).transfer(msg.sender, usdtBalance);\r\n        emit WithdrawlUSDT(msg.sender, usdtBalance);\r\n    }\r\n\r\n    function withdrawlERC20() external onlyOwner{\r\n        uint256 balance = balanceOf(address(this));\r\n        require(balance > 10, \"BEP20: Balance is not enough\");\r\n        _approve(address(this), msg.sender, balance);\r\n        transferFrom(address(this), msg.sender, balance);\r\n        emit WithdrawlERC20(msg.sender, balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawlERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawlUSDT\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biddingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biddingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeBraveTroops\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getInBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getInBraveTroops\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getInWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeBraveTroops\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indiretRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpShareAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpShareRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minNumber\",\"type\":\"uint256\"}],\"name\":\"setBurnMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"biddingAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shareAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpShareAddress_\",\"type\":\"address\"}],\"name\":\"setCollectFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"setMaxTransferLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapNumber\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"setRelationTransferLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"directFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indirectFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpShareRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blackFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquifyFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"biddingFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator_\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharetRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawlERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawlUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BYDK", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://083a8c4b156f45f01b98e6ca5d4e294d9060529ff128ab5a97165386b5ca0b7a"}