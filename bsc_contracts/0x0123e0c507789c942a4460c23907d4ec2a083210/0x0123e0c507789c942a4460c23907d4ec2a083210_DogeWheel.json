{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"DogeWheel.sol\":{\"content\":\"pragma solidity ^0.6.2;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./IUniswapV2Router.sol\\\";\\r\\nimport \\\"./DogeWheelTransferHelper.sol\\\";\\r\\nimport \\\"./IDogeWheelSniperOracle.sol\\\";\\r\\n\\r\\ncontract DogeWheel is ERC20, Ownable {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\r\\n\\tuint256 constant TAX_FREE_BUY_PERIOD = 2 minutes;\\r\\n\\r\\n\\tstruct FeeSet {\\r\\n\\t\\tuint256 marketingFee;\\r\\n\\t\\tuint256 spinWheelFee;\\r\\n\\t\\tuint256 liquidityFee;\\r\\n\\t}\\r\\n\\r\\n\\tIUniswapV2Router02 router;\\r\\n\\taddress pairAddress;\\r\\n\\r\\n\\tDogeWheelTransferHelper transferHelper;\\r\\n\\tIDogeWheelSniperOracle sniperOracle;\\r\\n\\r\\n\\tbool swapping;\\r\\n\\tbool hasLaunched;\\r\\n\\tbool public isTradingEnabled = true;\\r\\n\\r\\n\\tmapping(address =\\u003e bool) automatedMarketMakerPairs;\\r\\n\\r\\n\\taddress payable public marketingWalletAddress;\\r\\n\\taddress payable public spinWheelAddress;\\r\\n\\r\\n\\taddress deadWallet = address(57005);\\r\\n\\r\\n\\tuint256 swapTokensAtAmount = 2000000 * (10 ** 18);\\r\\n\\tuint256 public maxWalletAmount = 0;\\r\\n\\r\\n\\tFeeSet public buyFees;\\r\\n\\tFeeSet public sellFees;\\r\\n\\r\\n\\tmapping(address =\\u003e bool) isExcludedFromMaxWallet;\\r\\n\\tmapping(address =\\u003e bool) isExcludedFromFees;\\r\\n\\r\\n\\tmapping(address =\\u003e uint256) taxFreeBuyers;\\r\\n\\r\\n\\tevent ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n\\tevent SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n\\tevent MarketingWalletUpdated(address indexed wallet);\\r\\n\\tevent SpinWheelAddressUpdated(address indexed wallet);\\r\\n\\r\\n\\tconstructor() public ERC20(\\\"DogeWheel\\\", \\\"DOGEWHEEL\\\") {\\r\\n\\t\\t// create a uniswap pair for this new token\\r\\n\\t\\trouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n\\t\\tpairAddress = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());\\r\\n\\r\\n\\t\\t// create dependencies\\r\\n\\t\\ttransferHelper = new DogeWheelTransferHelper(address(router));\\r\\n\\r\\n\\t\\t// set important wallets\\r\\n\\t\\tsetAutomatedMarketMakerPair(pairAddress, true);\\r\\n\\t\\tsetMarketingWallet(payable(owner()));\\r\\n\\t\\tsetSpinWheelWallet(payable(owner()));\\r\\n\\r\\n\\t\\t// exclude from paying fees or having max transaction amount\\r\\n\\t\\texcludeFromFees(owner(), true);\\r\\n\\t\\texcludeFromFees(address(this), true);\\r\\n\\t\\texcludeFromFees(address(transferHelper), true);\\r\\n\\r\\n\\t\\t// exclude from max wallet\\r\\n\\t\\texcludeFromMaxWallet(owner(), true);\\r\\n\\t\\texcludeFromMaxWallet(address(this), true);\\r\\n\\t\\texcludeFromMaxWallet(deadWallet, true);\\r\\n\\t\\texcludeFromMaxWallet(address(0), true);\\r\\n\\t\\texcludeFromMaxWallet(address(transferHelper), true);\\r\\n\\t\\texcludeFromMaxWallet(address(router), true);\\r\\n\\r\\n\\t\\t// set default fees (marketing, spin wheel, liquidity)\\r\\n\\t\\tsetBuyFees(5, 2, 1);\\r\\n\\t\\tsetSellFees(5, 2, 1);\\r\\n\\r\\n\\t\\t// _mint is an internal function in ERC20.sol that is only called here, and CANNOT be called ever again\\r\\n\\t\\t_mint(owner(), 100000000000 * (10 ** 18));\\r\\n\\r\\n\\t\\t// set max wallet to 0.25% to start with\\r\\n\\t\\tsetMaxWalletAmount(totalSupply() / 400);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setSniperOracle(IDogeWheelSniperOracle oracle) public onlyOwner {\\r\\n\\t\\tsniperOracle = oracle;\\r\\n\\t}\\r\\n\\r\\n\\tfunction excludeFromFees(address account, bool excluded) public onlyOwner {\\r\\n\\t\\tisExcludedFromFees[account] = excluded;\\r\\n\\t\\temit ExcludeFromFees(account, excluded);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\\r\\n\\t\\tif (value == false) {\\r\\n\\t\\t\\trequire(pair != pairAddress, \\\"The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tautomatedMarketMakerPairs[pair] = value;\\r\\n\\t\\temit SetAutomatedMarketMakerPair(pair, value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setMarketingWallet(address payable wallet) public onlyOwner {\\r\\n\\t\\texcludeFromFees(wallet, true);\\r\\n\\t\\texcludeFromMaxWallet(wallet, true);\\r\\n\\r\\n\\t\\tmarketingWalletAddress = wallet;\\r\\n\\r\\n\\t\\temit MarketingWalletUpdated(wallet);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setSpinWheelWallet(address payable wallet) public onlyOwner {\\r\\n\\t\\texcludeFromFees(wallet, true);\\r\\n\\t\\texcludeFromMaxWallet(wallet, true);\\r\\n\\r\\n\\t\\tspinWheelAddress = wallet;\\r\\n\\r\\n\\t\\temit SpinWheelAddressUpdated(wallet);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setBuyFees(uint256 _marketingFee, uint256 _spinWheelFee, uint256 _liquidityFee) public onlyOwner {\\r\\n\\t\\tbuyFees = FeeSet({\\r\\n\\t\\t\\tmarketingFee: _marketingFee,\\r\\n\\t\\t\\tspinWheelFee: _spinWheelFee,\\r\\n\\t\\t\\tliquidityFee: _liquidityFee\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\tfunction setSellFees(uint256 _marketingFee, uint256 _spinWheelFee, uint256 _liquidityFee) public onlyOwner {\\r\\n\\t\\tsellFees = FeeSet({\\r\\n\\t\\t\\tmarketingFee: _marketingFee,\\r\\n\\t\\t\\tspinWheelFee: _spinWheelFee,\\r\\n\\t\\t\\tliquidityFee: _liquidityFee\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\tfunction getSumOfFeeSet(FeeSet memory set) private pure returns (uint256) {\\r\\n\\t\\treturn set.marketingFee.add(set.spinWheelFee).add(set.liquidityFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getSumOfBuyFees() public view returns (uint256) {\\r\\n\\t\\treturn getSumOfFeeSet(buyFees);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getSumOfSellFees() public view returns (uint256) {\\r\\n\\t\\treturn getSumOfFeeSet(sellFees);\\r\\n\\t}\\r\\n\\r\\n\\tfunction excludeFromMaxWallet(address account, bool value) public onlyOwner {\\r\\n\\t\\tisExcludedFromMaxWallet[account] = value;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setMaxWalletAmount(uint256 amount) public onlyOwner {\\r\\n\\t\\trequire(amount \\u003c= totalSupply(), \\\"Amount cannot be over the total supply.\\\");\\r\\n\\t\\tmaxWalletAmount = amount;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setIsTradingEnabled(bool value) external onlyOwner {\\r\\n\\t\\tisTradingEnabled = value;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transfer(address _from, address _to, uint256 _amount) internal override {\\r\\n\\t\\trequire(_from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n\\t\\trequire(_to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\t\\trequire(isTradingEnabled, \\\"Trading is disabled\\\");\\r\\n\\r\\n\\t\\tif (!hasLaunched \\u0026\\u0026 _from == owner() \\u0026\\u0026 automatedMarketMakerPairs[_to]) {\\r\\n\\t\\t\\tsniperOracle.launch();\\r\\n\\t\\t\\thasLaunched = true;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (_amount == 0) {\\r\\n\\t\\t\\tsuper._transfer(_from, _to, _amount);\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// enforce max wallet\\r\\n\\t\\tif (maxWalletAmount \\u003e 0 \\u0026\\u0026 !automatedMarketMakerPairs[_to] \\u0026\\u0026 !isExcludedFromMaxWallet[_to]) {\\r\\n\\t\\t\\trequire(balanceOf(_to).add(_amount) \\u003c= maxWalletAmount, \\\"You are transferring too many tokens, please try to transfer a smaller amount\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (!swapping) {\\r\\n\\t\\t\\t// process fees stored in contract\\r\\n\\t\\t\\tuint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\t\\t\\tbool canSwap = contractTokenBalance \\u003e= swapTokensAtAmount;\\r\\n\\t\\t\\tsniperOracle.onTransfer(_from, _to);\\r\\n\\r\\n\\t\\t\\tif (canSwap \\u0026\\u0026 !automatedMarketMakerPairs[_from] \\u0026\\u0026 _from != owner() \\u0026\\u0026 _to != owner()) {\\r\\n\\t\\t\\t\\tswapping = true;\\r\\n\\t\\t\\t\\tprocessFees(contractTokenBalance);\\r\\n\\t\\t\\t\\tswapping = false;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// process transaction tax\\r\\n\\t\\t\\tif (!isExcludedFromFees[_from] \\u0026\\u0026 !isExcludedFromFees[_to]) {\\r\\n\\t\\t\\t\\tbool isSelling = automatedMarketMakerPairs[_to];\\r\\n\\t\\t\\t\\tuint256 feePercent = (isSelling ? getSumOfSellFees() : getSumOfBuyFees()).add(sniperOracle.check(isSelling ? _from : _to));\\r\\n\\r\\n\\t\\t\\t\\t// account for tax-free buyers\\r\\n\\t\\t\\t\\tif (!isSelling \\u0026\\u0026 taxFreeBuyers[_to] \\u003e block.timestamp) {\\r\\n\\t\\t\\t\\t\\tfeePercent = 0;\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif (feePercent \\u003e 0) {\\r\\n\\t\\t\\t\\t\\tuint256 fees = _amount.mul(feePercent).div(100);\\r\\n\\t\\t\\t\\t\\t_amount = _amount.sub(fees);\\r\\n\\t\\t\\t\\t\\tsuper._transfer(_from, address(this), fees);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// transfer remaining amount as standard\\r\\n\\t\\tsuper._transfer(_from, _to, _amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction processFees(uint256 amountIn) private {\\r\\n\\t\\tuint256 totalFees = getSumOfBuyFees();\\r\\n\\t\\tif (totalFees == 0) return;\\r\\n\\r\\n\\t\\tuint256 amountOut = swapExactTokensForETH(amountIn);\\r\\n\\t\\tuint256 ethForMarketing = amountOut.mul(buyFees.marketingFee).div(totalFees);\\r\\n\\t\\tuint256 ethForSpinWheel = amountOut.mul(buyFees.spinWheelFee).div(totalFees);\\r\\n\\t\\tuint256 ethForLiquidity = amountOut.sub(ethForMarketing).sub(ethForSpinWheel);\\r\\n\\r\\n\\t\\tif (ethForMarketing \\u003e 0) {\\r\\n\\t\\t\\tmarketingWalletAddress.transfer(ethForMarketing);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (ethForSpinWheel \\u003e 0) {\\r\\n\\t\\t\\tspinWheelAddress.transfer(ethForSpinWheel);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (ethForLiquidity \\u003e 0) {\\r\\n\\t\\t\\tswapAndLiquify(ethForLiquidity);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction swapAndLiquify(uint256 amountIn) private {\\r\\n\\t\\tuint256 halfForEth = amountIn.div(2);\\r\\n\\t\\tuint256 halfForTokens = amountIn.sub(halfForEth);\\r\\n\\r\\n\\t\\tuint256 tokensOut = swapExactETHForTokens(halfForTokens, address(this));\\r\\n\\t\\t_approve(address(this), address(router), tokensOut);\\r\\n\\t\\trouter.addLiquidityETH{value: halfForEth}(address(this), tokensOut, 0, 0, address(0), block.timestamp);\\r\\n\\t}\\r\\n\\r\\n\\tfunction swapExactTokensForETH(uint256 amountIn) private returns (uint256) {\\r\\n\\t\\taddress[] memory path = new address[](2);\\r\\n\\t\\tpath[0] = address(this);\\r\\n\\t\\tpath[1] = router.WETH();\\r\\n\\r\\n\\t\\t_approve(address(this), address(router), amountIn);\\r\\n\\r\\n\\t\\tuint256 previousBalance = address(this).balance;\\r\\n\\t\\trouter.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, 0, path, address(this), block.timestamp);\\r\\n\\t\\treturn address(this).balance.sub(previousBalance);\\r\\n\\t}\\r\\n\\r\\n\\tfunction swapExactETHForTokens(uint256 amountIn, address tokenAddress) private returns (uint256) {\\r\\n\\t\\treturn transferHelper.buy{value: amountIn}(tokenAddress);\\r\\n\\t}\\r\\n\\r\\n\\tfunction addTaxFreeBuyer(address buyer) public {\\r\\n\\t\\trequire(msg.sender == spinWheelAddress, \\\"Only callable from the spin wheel address.\\\");\\r\\n\\t\\ttaxFreeBuyers[buyer] = block.timestamp + TAX_FREE_BUY_PERIOD;\\r\\n\\t}\\r\\n\\r\\n\\tfunction recover() external onlyOwner {\\r\\n\\t\\tpayable(owner()).transfer(address(this).balance);\\r\\n\\t}\\r\\n\\r\\n\\treceive() external payable {\\r\\n\\r\\n\\t}\\r\\n}\"},\"DogeWheelTransferHelper.sol\":{\"content\":\"pragma solidity ^0.6.2;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IUniswapV2Router.sol\\\";\\r\\n\\r\\ncontract DogeWheelTransferHelper is Ownable {\\r\\n\\tIUniswapV2Router02 router;\\r\\n\\r\\n\\tconstructor(address routerAddress) public {\\r\\n\\t\\trouter = IUniswapV2Router02(routerAddress);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buy(address tokenAddress) public payable onlyOwner returns (uint256) {\\r\\n\\t\\taddress self = address(this);\\r\\n\\t\\tIERC20 token = IERC20(tokenAddress);\\r\\n\\r\\n\\t\\t// create swap path\\r\\n\\t\\taddress[] memory path = new address[](2);\\r\\n\\t\\tpath[0] = router.WETH();\\r\\n\\t\\tpath[1] = tokenAddress;\\r\\n\\r\\n\\t\\t// buy tokens\\r\\n\\t\\tuint256 previousBalance = token.balanceOf(self);\\r\\n\\t\\trouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(0, path, self, block.timestamp);\\r\\n\\t\\tuint256 amountOut = token.balanceOf(self) - previousBalance;\\r\\n\\r\\n\\t\\t// transfer back to owner address\\r\\n\\t\\tuint256 previousTokenBalance = token.balanceOf(owner());\\r\\n\\t\\trequire(token.transfer(owner(), amountOut), \\\"Token transfer failed.\\\");\\r\\n\\t\\treturn token.balanceOf(owner()) - previousTokenBalance;\\r\\n\\t}\\r\\n}\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\r\\n\\tmapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n\\tmapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n\\tuint256 private _totalSupply;\\r\\n\\r\\n\\tstring private _name;\\r\\n\\tstring private _symbol;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Sets the values for {name} and {symbol}.\\r\\n\\t *\\r\\n\\t * The default value of {decimals} is 18. To select a different value for\\r\\n\\t * {decimals} you should overload it.\\r\\n\\t *\\r\\n\\t * All two of these values are immutable: they can only be set once during\\r\\n\\t * construction.\\r\\n\\t */\\r\\n\\tconstructor(string memory name_, string memory symbol_) public {\\r\\n\\t\\t_name = name_;\\r\\n\\t\\t_symbol = symbol_;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the name of the token.\\r\\n\\t */\\r\\n\\tfunction name() public view virtual override returns (string memory) {\\r\\n\\t\\treturn _name;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n\\t * name.\\r\\n\\t */\\r\\n\\tfunction symbol() public view virtual override returns (string memory) {\\r\\n\\t\\treturn _symbol;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the number of decimals used to get its user representation.\\r\\n\\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n\\t * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n\\t *\\r\\n\\t * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n\\t * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n\\t * overridden;\\r\\n\\t *\\r\\n\\t * NOTE: This information is only used for _display_ purposes: it in\\r\\n\\t * no way affects any of the arithmetic of the contract, including\\r\\n\\t * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n\\t */\\r\\n\\tfunction decimals() public view virtual override returns (uint8) {\\r\\n\\t\\treturn 18;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC20-totalSupply}.\\r\\n\\t */\\r\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\r\\n\\t\\treturn _totalSupply;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC20-balanceOf}.\\r\\n\\t */\\r\\n\\tfunction balanceOf(address account) public view virtual override returns (uint256) {\\r\\n\\t\\treturn _balances[account];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC20-transfer}.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `recipient` cannot be the zero address.\\r\\n\\t * - the caller must have a balance of at least `amount`.\\r\\n\\t */\\r\\n\\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n\\t\\t_transfer(_msgSender(), recipient, amount);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC20-allowance}.\\r\\n\\t */\\r\\n\\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n\\t\\treturn _allowances[owner][spender];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC20-approve}.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `spender` cannot be the zero address.\\r\\n\\t */\\r\\n\\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n\\t\\t_approve(_msgSender(), spender, amount);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC20-transferFrom}.\\r\\n\\t *\\r\\n\\t * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n\\t * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `sender` and `recipient` cannot be the zero address.\\r\\n\\t * - `sender` must have a balance of at least `amount`.\\r\\n\\t * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n\\t * `amount`.\\r\\n\\t */\\r\\n\\tfunction transferFrom(\\r\\n\\t\\taddress sender,\\r\\n\\t\\taddress recipient,\\r\\n\\t\\tuint256 amount\\r\\n\\t) public virtual override returns (bool) {\\r\\n\\t\\t_transfer(sender, recipient, amount);\\r\\n\\t\\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n\\t *\\r\\n\\t * This is an alternative to {approve} that can be used as a mitigation for\\r\\n\\t * problems described in {IERC20-approve}.\\r\\n\\t *\\r\\n\\t * Emits an {Approval} event indicating the updated allowance.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `spender` cannot be the zero address.\\r\\n\\t */\\r\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n\\t\\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n\\t *\\r\\n\\t * This is an alternative to {approve} that can be used as a mitigation for\\r\\n\\t * problems described in {IERC20-approve}.\\r\\n\\t *\\r\\n\\t * Emits an {Approval} event indicating the updated allowance.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `spender` cannot be the zero address.\\r\\n\\t * - `spender` must have allowance for the caller of at least\\r\\n\\t * `subtractedValue`.\\r\\n\\t */\\r\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n\\t\\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n\\t *\\r\\n\\t * This is internal function is equivalent to {transfer}, and can be used to\\r\\n\\t * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `sender` cannot be the zero address.\\r\\n\\t * - `recipient` cannot be the zero address.\\r\\n\\t * - `sender` must have a balance of at least `amount`.\\r\\n\\t */\\r\\n\\tfunction _transfer(\\r\\n\\t\\taddress sender,\\r\\n\\t\\taddress recipient,\\r\\n\\t\\tuint256 amount\\r\\n\\t) internal virtual {\\r\\n\\t\\trequire(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n\\t\\trequire(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n\\t\\t_balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n\\t\\t_balances[recipient] = _balances[recipient].add(amount);\\r\\n\\t\\temit Transfer(sender, recipient, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n\\t * the total supply.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event with `from` set to the zero address.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `account` cannot be the zero address.\\r\\n\\t */\\r\\n\\tfunction _mint(address account, uint256 amount) internal virtual {\\r\\n\\t\\trequire(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n\\t\\t_totalSupply = _totalSupply.add(amount);\\r\\n\\t\\t_balances[account] = _balances[account].add(amount);\\r\\n\\t\\temit Transfer(address(0), account, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n\\t * total supply.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event with `to` set to the zero address.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `account` cannot be the zero address.\\r\\n\\t * - `account` must have at least `amount` tokens.\\r\\n\\t */\\r\\n\\tfunction _burn(address account, uint256 amount) internal virtual {\\r\\n\\t\\trequire(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n\\t\\t_balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n\\t\\t_totalSupply = _totalSupply.sub(amount);\\r\\n\\t\\temit Transfer(account, address(0), amount);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n\\t *\\r\\n\\t * This internal function is equivalent to `approve`, and can be used to\\r\\n\\t * e.g. set automatic allowances for certain subsystems, etc.\\r\\n\\t *\\r\\n\\t * Emits an {Approval} event.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `owner` cannot be the zero address.\\r\\n\\t * - `spender` cannot be the zero address.\\r\\n\\t */\\r\\n\\tfunction _approve(\\r\\n\\t\\taddress owner,\\r\\n\\t\\taddress spender,\\r\\n\\t\\tuint256 amount\\r\\n\\t) internal virtual {\\r\\n\\t\\trequire(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n\\t\\trequire(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n\\t\\t_allowances[owner][spender] = amount;\\r\\n\\t\\temit Approval(owner, spender, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Hook that is called before any transfer of tokens. This includes\\r\\n\\t * minting and burning.\\r\\n\\t *\\r\\n\\t * Calling conditions:\\r\\n\\t *\\r\\n\\t * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n\\t * will be to transferred to `to`.\\r\\n\\t * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n\\t * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n\\t * - `from` and `to` are never both zero.\\r\\n\\t *\\r\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n\\t */\\r\\n\\tfunction _beforeTokenTransfer(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 amount\\r\\n\\t) internal virtual {}\\r\\n}\"},\"IDogeWheelSniperOracle.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n// SPDX-License-Identifier: UNLICENSED\\n\\ninterface IDogeWheelSniperOracle {\\n\\tfunction onTransfer(address _from, address _to) external;\\n\\n\\tfunction launch() external;\\n\\n\\tfunction check(address _to) external view returns (uint256);\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n\\t/**\\r\\n\\t * @dev Returns the amount of tokens in existence.\\r\\n\\t */\\r\\n\\tfunction totalSupply() external view returns (uint256);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the amount of tokens owned by `account`.\\r\\n\\t */\\r\\n\\tfunction balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n\\t *\\r\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event.\\r\\n\\t */\\r\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the remaining number of tokens that `spender` will be\\r\\n\\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n\\t * zero by default.\\r\\n\\t *\\r\\n\\t * This value changes when {approve} or {transferFrom} are called.\\r\\n\\t */\\r\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n\\t *\\r\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\r\\n\\t *\\r\\n\\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n\\t * that someone may use both the old and the new allowance by unfortunate\\r\\n\\t * transaction ordering. One possible solution to mitigate this race\\r\\n\\t * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n\\t * desired value afterwards:\\r\\n\\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n\\t *\\r\\n\\t * Emits an {Approval} event.\\r\\n\\t */\\r\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n\\t * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n\\t * allowance.\\r\\n\\t *\\r\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event.\\r\\n\\t */\\r\\n\\tfunction transferFrom(\\r\\n\\t\\taddress sender,\\r\\n\\t\\taddress recipient,\\r\\n\\t\\tuint256 amount\\r\\n\\t) external returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n\\t * another (`to`).\\r\\n\\t *\\r\\n\\t * Note that `value` may be zero.\\r\\n\\t */\\r\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n\\t * a call to {approve}. `value` is the new allowance.\\r\\n\\t */\\r\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n\\t/**\\r\\n\\t * @dev Returns the name of the token.\\r\\n\\t */\\r\\n\\tfunction name() external view returns (string memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the symbol of the token.\\r\\n\\t */\\r\\n\\tfunction symbol() external view returns (string memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the decimals places of the token.\\r\\n\\t */\\r\\n\\tfunction decimals() external view returns (uint8);\\r\\n}\"},\"IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n\\tfunction feeTo() external view returns (address);\\r\\n\\r\\n\\tfunction feeToSetter() external view returns (address);\\r\\n\\r\\n\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n\\tfunction allPairs(uint) external view returns (address pair);\\r\\n\\r\\n\\tfunction allPairsLength() external view returns (uint);\\r\\n\\r\\n\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n\\tfunction setFeeTo(address) external;\\r\\n\\r\\n\\tfunction setFeeToSetter(address) external;\\r\\n}\"},\"IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n\\tfunction factory() external pure returns (address);\\r\\n\\r\\n\\tfunction WETH() external pure returns (address);\\r\\n\\r\\n\\tfunction addLiquidity(\\r\\n\\t\\taddress tokenA,\\r\\n\\t\\taddress tokenB,\\r\\n\\t\\tuint amountADesired,\\r\\n\\t\\tuint amountBDesired,\\r\\n\\t\\tuint amountAMin,\\r\\n\\t\\tuint amountBMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n\\tfunction addLiquidityETH(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint amountTokenDesired,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n\\tfunction removeLiquidity(\\r\\n\\t\\taddress tokenA,\\r\\n\\t\\taddress tokenB,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountAMin,\\r\\n\\t\\tuint amountBMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint amountA, uint amountB);\\r\\n\\r\\n\\tfunction removeLiquidityETH(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n\\tfunction removeLiquidityWithPermit(\\r\\n\\t\\taddress tokenA,\\r\\n\\t\\taddress tokenB,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountAMin,\\r\\n\\t\\tuint amountBMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline,\\r\\n\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t) external returns (uint amountA, uint amountB);\\r\\n\\r\\n\\tfunction removeLiquidityETHWithPermit(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline,\\r\\n\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n\\tfunction swapExactTokensForTokens(\\r\\n\\t\\tuint amountIn,\\r\\n\\t\\tuint amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction swapTokensForExactTokens(\\r\\n\\t\\tuint amountOut,\\r\\n\\t\\tuint amountInMax,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\texternal\\r\\n\\tpayable\\r\\n\\treturns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n\\texternal\\r\\n\\treturns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\texternal\\r\\n\\treturns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n\\texternal\\r\\n\\tpayable\\r\\n\\treturns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\r\\n\\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\r\\n\\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\r\\n\\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n// pragma solidity \\u003e=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint amountETH);\\r\\n\\r\\n\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline,\\r\\n\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t) external returns (uint amountETH);\\r\\n\\r\\n\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\tuint amountIn,\\r\\n\\t\\tuint amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external;\\r\\n\\r\\n\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\tuint amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external payable;\\r\\n\\r\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n\\t\\tuint amountIn,\\r\\n\\t\\tuint amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external;\\r\\n}\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.6.2;\\r\\n\\r\\n// SPDX-License-Identifier: MIT License\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\ncontract Ownable is Context {\\r\\n\\taddress private _owner;\\r\\n\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n\\t */\\r\\n\\tconstructor () public {\\r\\n\\t\\taddress msgSender = _msgSender();\\r\\n\\t\\t_owner = msgSender;\\r\\n\\t\\temit OwnershipTransferred(address(0), msgSender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the address of the current owner.\\r\\n\\t */\\r\\n\\tfunction owner() public view returns (address) {\\r\\n\\t\\treturn _owner;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Throws if called by any account other than the owner.\\r\\n\\t */\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\trequire(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\r\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n\\t *\\r\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n\\t * thereby removing any functionality that is only available to the owner.\\r\\n\\t */\\r\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\r\\n\\t\\temit OwnershipTransferred(_owner, address(0));\\r\\n\\t\\t_owner = address(0);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n\\t * Can only be called by the current owner.\\r\\n\\t */\\r\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\r\\n\\t\\t_owner = newOwner;\\r\\n\\t}\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\t/**\\r\\n\\t * @dev Returns the addition of two unsigned integers, reverting on\\r\\n\\t * overflow.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity\\u0027s `+` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Addition cannot overflow.\\r\\n\\t */\\r\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\tuint256 c = a + b;\\r\\n\\t\\trequire(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n\\t * overflow (when the result is negative).\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity\\u0027s `-` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Subtraction cannot overflow.\\r\\n\\t */\\r\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n\\t * overflow (when the result is negative).\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity\\u0027s `-` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Subtraction cannot overflow.\\r\\n\\t */\\r\\n\\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\trequire(b \\u003c= a, errorMessage);\\r\\n\\t\\tuint256 c = a - b;\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n\\t * overflow.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity\\u0027s `*` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Multiplication cannot overflow.\\r\\n\\t */\\r\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\t// Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n\\t\\t// benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n\\t\\tif (a == 0) {\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 c = a * b;\\r\\n\\t\\trequire(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n\\t * division by zero. The result is rounded towards zero.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n\\t * division by zero. The result is rounded towards zero.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\trequire(b \\u003e 0, errorMessage);\\r\\n\\t\\tuint256 c = a / b;\\r\\n\\t\\t// assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n\\t * Reverts when dividing by zero.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n\\t * invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n\\t * Reverts with custom message when dividing by zero.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n\\t * invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\trequire(b != 0, errorMessage);\\r\\n\\t\\treturn a % b;\\r\\n\\t}\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"SpinWheelAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"addTaxFreeBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spinWheelFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSumOfBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSumOfSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spinWheelFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spinWheelFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsTradingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spinWheelFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDogeWheelSniperOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setSniperOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setSpinWheelWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spinWheelAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DogeWheel", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://56c600a92ad9b380aec1a5ebe8c3a9b46cd2292340af4e4a5a44f83b71cc4431"}