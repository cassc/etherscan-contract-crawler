{"SourceCode": "/**\r\n * SPDX-License-Identifier: MIT\r\n */ \r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {return msg.sender;}\r\n    function _msgData() internal view virtual returns (bytes calldata) {this; return msg.data;}\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {return a + b;}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return a - b;}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {return a * b;}\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {return a % b;}\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked { require(b <= a, errorMessage); return a - b; }\r\n    }\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) { uint256 size; assembly { size := extcodesize(account) } return size > 0;}\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");(bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {return functionCall(target, data, \"Address: low-level call failed\");}\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {return functionCallWithValue(target, data, 0, errorMessage);}\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) { return returndata; } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {revert(errorMessage);}\r\n        }\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"Only the previous owner can unlock onwership\");\r\n        require(block.timestamp > _lockTime , \"The contract is still locked\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\nabstract contract Manageable is Context {\r\n    address private _manager;\r\n    event ManagementTransferred(address indexed previousManager, address indexed newManager);\r\n    constructor(){\r\n        address msgSender = _msgSender();\r\n        _manager = msgSender;\r\n        emit ManagementTransferred(address(0), msgSender);\r\n    }\r\n    function manager() public view returns(address){ return _manager; }\r\n    modifier onlyManager(){\r\n        require(_manager == _msgSender(), \"Manageable: caller is not the manager\");\r\n        _;\r\n    }\r\n    function transferManagement(address newManager) external virtual onlyManager {\r\n        emit ManagementTransferred(_manager, newManager);\r\n        _manager = newManager;\r\n    }\r\n}\r\ninterface IPancakeV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ninterface IPancakeV2Router {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ninterface ProfileTransferRouter {\r\n    function addressHasProfile(address address_to_check) external pure returns (bool);\r\n    function transferToProfile(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external;\r\n}\r\n// File: token/Copy_ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nabstract contract Presaleable is Manageable {\r\n    bool internal isInPresale;\r\n\r\n    function setPreseableEnabled(bool value) external onlyManager {\r\n        isInPresale = value;\r\n    }\r\n\r\n    // bool internal isDonePresale;\r\n\r\n    // function setPreseableEnabled() external onlyManager {\r\n    //     require(isDonePresale == false, \"Cannot Enable Preseable again after it's done.\");\r\n    //     isInPresale = true;\r\n    // }\r\n\r\n    // function setPreseableDone() external onlyManager {\r\n    //     require(isDonePresale == false, \"Preseable is already done.\");\r\n    //     isDonePresale = true;\r\n    //     isInPresale = false;\r\n    // }\r\n}\r\n\r\nabstract contract Liquifier is Ownable, Manageable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private withdrawableBalance;\r\n\r\n    enum Env {\r\n        Testnet,\r\n        MainnetV1,\r\n        MainnetV2\r\n    }\r\n    Env private _env;\r\n\r\n    // PancakeSwap V1\r\n    address private _mainnetRouterV1Address =\r\n        0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F;\r\n    // PancakeSwap V2\r\n    address private _mainnetRouterV2Address =\r\n        0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    // Testnet\r\n    // address private _testnetRouterAddress = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1;\r\n    // PancakeSwap Testnet = https://pancake.kiemtienonline360.com/\r\n    address private _testnetRouterAddress =\r\n        0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\r\n\r\n    IPancakeV2Router internal _router;\r\n    address internal _pair;\r\n\r\n    bool private inSwapAndLiquify;\r\n    bool private swapAndLiquifyEnabled = true;\r\n\r\n    uint256 private maxTransactionAmount;\r\n    uint256 private numberOfTokensToSwapToLiquidity;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    event RouterSet(address indexed router);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event LiquidityAdded(\r\n        uint256 tokenAmountSent,\r\n        uint256 ethAmountSent,\r\n        uint256 liquidity\r\n    );\r\n\r\n    receive() external payable {}\r\n\r\n    function initializeLiquiditySwapper(\r\n        uint256 maxTx,\r\n        uint256 liquifyAmount\r\n    ) internal {\r\n        _setRouterAddress(_mainnetRouterV2Address);\r\n\r\n        maxTransactionAmount = maxTx;\r\n        numberOfTokensToSwapToLiquidity = liquifyAmount;\r\n    }\r\n\r\n    /**\r\n     * NOTE: passing the `contractTokenBalance` here is preferred to creating `balanceOfDelegate`\r\n     */\r\n    function liquify(uint256 contractTokenBalance, address sender) internal {\r\n        if (contractTokenBalance >= maxTransactionAmount)\r\n            contractTokenBalance = maxTransactionAmount;\r\n\r\n        bool isOverRequiredTokenBalance = (contractTokenBalance >=\r\n            numberOfTokensToSwapToLiquidity);\r\n\r\n        /**\r\n         * - first check if the contract has collected enough tokens to swap and liquify\r\n         * - then check swap and liquify is enabled\r\n         * - then make sure not to get caught in a circular liquidity event\r\n         * - finally, don't swap & liquify if the sender is the uniswap pair\r\n         */\r\n        if (\r\n            isOverRequiredTokenBalance &&\r\n            swapAndLiquifyEnabled &&\r\n            !inSwapAndLiquify &&\r\n            (sender != _pair)\r\n        ) {\r\n            // TODO check if the `(sender != _pair)` is necessary because that basically\r\n            // stops swap and liquify for all \"buy\" transactions\r\n            _swapAndLiquify(contractTokenBalance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev sets the router address and created the router, factory pair to enable\r\n     * swapping and liquifying (contract) tokens\r\n     */\r\n    function _setRouterAddress(address router) private {\r\n        IPancakeV2Router _newPancakeRouter = IPancakeV2Router(router);\r\n        _pair = IPancakeV2Factory(_newPancakeRouter.factory()).createPair(\r\n            address(this),\r\n            _newPancakeRouter.WETH()\r\n        );\r\n        _router = _newPancakeRouter;\r\n        emit RouterSet(router);\r\n    }\r\n\r\n    function _swapAndLiquify(uint256 amount) private lockTheSwap {\r\n        // split the contract balance into halves\r\n        uint256 half = amount.div(2);\r\n        uint256 otherHalf = amount.sub(half);\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        _swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        _addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function _swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _router.WETH();\r\n\r\n        _approveDelegate(address(this), address(_router), tokenAmount);\r\n\r\n        // make the swap\r\n        _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            // The minimum amount of output tokens that must be received for the transaction not to revert.\r\n            // 0 = accept any amount (slippage is inevitable)\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approveDelegate(address(this), address(_router), tokenAmount);\r\n\r\n        // add tahe liquidity\r\n        (uint256 tokenAmountSent, uint256 ethAmountSent, uint256 liquidity) = _router\r\n            .addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            // Bounds the extent to which the WETH/token price can go up before the transaction reverts.\r\n            // Must be <= amountTokenDesired; 0 = accept any amount (slippage is inevitable)\r\n            0,\r\n            // Bounds the extent to which the token/WETH price can go up before the transaction reverts.\r\n            // 0 = accept any amount (slippage is inevitable)\r\n            0,\r\n            // this is a centralized risk if the owner's account is ever compromised (see Certik SSL-04)\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        // fix the forever locked BNBs as per the certik's audit\r\n        /**\r\n         * The swapAndLiquify function converts half of the contractTokenBalance SafeMoon tokens to BNB.\r\n         * For every swapAndLiquify function call, a small amount of BNB remains in the contract.\r\n         * This amount grows over time with the swapAndLiquify function being called throughout the life\r\n         * of the contract. The Safemoon contract does not contain a method to withdraw these funds,\r\n         * and the BNB will be locked in the Safemoon contract forever.\r\n         */\r\n        withdrawableBalance = address(this).balance;\r\n        emit LiquidityAdded(tokenAmountSent, ethAmountSent, liquidity);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the uniswapV2 pair (router & factory) for swapping and liquifying tokens\r\n     */\r\n    function setRouterAddress(address router) external onlyManager {\r\n        _setRouterAddress(router);\r\n    }\r\n\r\n    /**\r\n     * @dev Sends the swap and liquify flag to the provided value. If set to `false` tokens collected in the contract will\r\n     * NOT be converted into liquidity.\r\n     */\r\n    function setSwapAndLiquifyEnabled(bool enabled) external onlyManager {\r\n        swapAndLiquifyEnabled = enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(swapAndLiquifyEnabled);\r\n    }\r\n\r\n    /**\r\n     * @dev The owner can withdraw ETH(BNB) collected in the contract from `swapAndLiquify`\r\n     * or if someone (accidentally) sends ETH/BNB directly to the contract.\r\n     *\r\n     * Note: This addresses the contract flaw pointed out in the Certik Audit of Safemoon (SSL-03):\r\n     *\r\n     * The swapAndLiquify function converts half of the contractTokenBalance SafeMoon tokens to BNB.\r\n     * For every swapAndLiquify function call, a small amount of BNB remains in the contract.\r\n     * This amount grows over time with the swapAndLiquify function being called\r\n     * throughout the life of the contract. The Safemoon contract does not contain a method\r\n     * to withdraw these funds, and the BNB will be locked in the Safemoon contract forever.\r\n     * https://www.certik.org/projects/safemoon\r\n     */\r\n    function withdrawLockedEth(address payable recipient) external onlyManager {\r\n        require(\r\n            recipient != address(0),\r\n            \"Cannot withdraw the ETH balance to the zero address\"\r\n        );\r\n        require(\r\n            withdrawableBalance > 0,\r\n            \"The ETH balance must be greater than 0\"\r\n        );\r\n\r\n        // prevent re-entrancy attacks\r\n        uint256 amount = withdrawableBalance;\r\n        withdrawableBalance = 0;\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Use this delegate instead of having (unnecessarily) extend `BaseObohToken` to gained access\r\n     * to the `_approve` function.\r\n     */\r\n    function _approveDelegate(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual;\r\n}\r\n\r\nabstract contract Tokenomics {\r\n    using SafeMath for uint256;\r\n\r\n    // --------------------- Token Settings ------------------- //\r\n    string internal constant NAME = \"OBO HITTAS\";\r\n    string internal constant SYMBOL = \"OBOH\";\r\n\r\n    uint16 internal constant FEES_DIVISOR = 10**3;\r\n    uint8 internal constant DECIMALS = 9;\r\n    uint256 internal constant ZEROES = 10**DECIMALS;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 internal constant TOTAL_SUPPLY = 100000000 * ZEROES;\r\n\r\n    /**\r\n     * @dev Set the maximum transaction amount allowed in a transfer.\r\n     *\r\n     * The default value is 1% of the total supply.\r\n     *\r\n     * NOTE: set the value to `TOTAL_SUPPLY` to have an unlimited max, i.e.\r\n     * `maxTransactionAmount = TOTAL_SUPPLY;`\r\n     */\r\n    // uint256 internal constant maxTransactionAmount = TOTAL_SUPPLY / 100; // 1% of the total supply\r\n    uint256 internal constant maxTransactionAmount = TOTAL_SUPPLY; // 1% of the total supply\r\n\r\n    /**\r\n     * @dev Set the maximum allowed balance in a wallet.\r\n     *\r\n     * The default value is 2% of the total supply.\r\n     *\r\n     * NOTE: set the value to 0 to have an unlimited max.\r\n     *\r\n     * IMPORTANT: This value MUST be greater than `numberOfTokensToSwapToLiquidity` set below,\r\n     * otherwise the liquidity swap will never be executed\r\n     */\r\n    // uint256 internal constant maxWalletBalance = TOTAL_SUPPLY / 50; // 2% of the total supply\r\n\r\n    /**\r\n     * @dev Set the number of tokens to swap and add to liquidity.\r\n     *\r\n     * Whenever the contract's balance reaches this number of tokens, swap & liquify will be\r\n     * executed in the very next transfer (via the `_beforeTokenTransfer`)\r\n     *\r\n     * If the `FeeType.Liquidity` is enabled in `FeesSettings`, the given % of each transaction will be first\r\n     * sent to the contract address. Once the contract's balance reaches `numberOfTokensToSwapToLiquidity` the\r\n     * `swapAndLiquify` of `Liquifier` will be executed. Half of the tokens will be swapped for ETH\r\n     * (or BNB on BSC) and together with the other half converted into a Token-ETH/Token-BNB LP Token.\r\n     *\r\n     * See: `Liquifier`\r\n     */\r\n    uint256 internal constant numberOfTokensToSwapToLiquidity =\r\n        TOTAL_SUPPLY / 1000; // 0.1% of the total supply\r\n\r\n    // TODO add update numberOfTokensToSwapToLiquidity with safety number\r\n\r\n    // --------------------- Fees Settings ------------------- //\r\n\r\n    /**\r\n     * @dev To add/edit/remove fees scroll down to the `addFees` function below\r\n     */\r\n\r\n    address internal rewardsVaultAddress =\r\n        0x74ee23bc9BBC0e98c592cb590e8c831131f2de39;\r\n    address internal teamAddress =\r\n        0xfB2b57a283799d4eAD165b1000B7652980bA9C39;\r\n    address internal oboBurnAddress =\r\n        0x23cDD0e135654AF9735d09ad1cF4D2F9441BF5D2;\r\n\r\n    address internal burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    enum FeeType {\r\n        Antiwhale,\r\n        Burn,\r\n        Liquidity,\r\n        Rfi,\r\n        External,\r\n        ExternalToETH\r\n    }\r\n    struct Fee {\r\n        FeeType name;\r\n        uint256 value;\r\n        address recipient;\r\n        uint256 total;\r\n    }\r\n\r\n    Fee[] internal fees;\r\n    uint256 internal sumOfFees;\r\n\r\n    constructor() {\r\n        _addFees();\r\n    }\r\n\r\n    function _addFee(\r\n        FeeType name,\r\n        uint256 value,\r\n        address recipient\r\n    ) internal {\r\n        require(\r\n            sumOfFees < 100 || sumOfFees + value < 100,\r\n            \"Total Fees cannot exceed 10%\"\r\n        );\r\n\r\n        fees.push(Fee(name, value, recipient, 0));\r\n        sumOfFees += value;\r\n    }\r\n\r\n    function _removeFee(uint256 index) internal {\r\n        (FeeType name, uint256 value, address recipient, ) = _getFee(index);\r\n\r\n        sumOfFees -= value;\r\n\r\n        fees[index] = fees[fees.length - 1];\r\n        fees.pop();\r\n    }\r\n\r\n    function _addFees() private {\r\n        /**\r\n         * The RFI recipient is ignored but we need to give a valid address value\r\n         *\r\n         * CAUTION: If you don't want to use RFI this implementation isn't really for you!\r\n         *      There are much more efficient and cleaner token contracts without RFI\r\n         *      so you should use one of those\r\n         *\r\n         * The value of fees is given in part per 1000 (based on the value of FEES_DIVISOR),\r\n         * e.g. for 5% use 50, for 3.5% use 35, etc.\r\n         */\r\n\r\n        _addFee(FeeType.Liquidity, 10, address(this));\r\n        _addFee(FeeType.External, 5, rewardsVaultAddress);\r\n        _addFee(FeeType.External, 5, oboBurnAddress);\r\n        _addFee(FeeType.External, 25, teamAddress);\r\n    }\r\n\r\n    function _getFeesCount() internal view returns (uint256) {\r\n        return fees.length;\r\n    }\r\n\r\n    function _getFeeStruct(uint256 index) private view returns (Fee storage) {\r\n        require(\r\n            index >= 0 && index < fees.length,\r\n            \"FeesSettings._getFeeStruct: Fee index out of bounds\"\r\n        );\r\n        return fees[index];\r\n    }\r\n\r\n    function getFee(uint256 index)\r\n        external\r\n        view\r\n        returns (\r\n            FeeType,\r\n            uint256,\r\n            address,\r\n            uint256\r\n        )\r\n    {\r\n        return _getFee(index);\r\n    }\r\n\r\n    function _getFee(uint256 index)\r\n        internal\r\n        view\r\n        returns (\r\n            FeeType,\r\n            uint256,\r\n            address,\r\n            uint256\r\n        )\r\n    {\r\n        Fee memory fee = _getFeeStruct(index);\r\n        return (fee.name, fee.value, fee.recipient, fee.total);\r\n    }\r\n\r\n    function _addFeeCollectedAmount(uint256 index, uint256 amount) internal {\r\n        Fee storage fee = _getFeeStruct(index);\r\n        fee.total = fee.total.add(amount);\r\n    }\r\n\r\n    // function getCollectedFeeTotal(uint256 index) external view returns (uint256){\r\n    function getCollectedFeeTotal(uint256 index)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Fee memory fee = _getFeeStruct(index);\r\n        return fee.total;\r\n    }\r\n}\r\n\r\nabstract contract BaseObohToken is\r\n    IERC20,\r\n    IERC20Metadata,\r\n    Ownable,\r\n    Presaleable,\r\n    Tokenomics\r\n{\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    mapping(address => bool) internal _isExcludedFromFee;\r\n\r\n    // TODO: transfer_to_profile_contract\r\n    address internal transfer_to_profile_contract_address;\r\n    bool internal has_profile_transfers_enabled = false;\r\n    bool internal has_external_profile_transfers = false;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor() {\r\n        _balances[owner()] = TOTAL_SUPPLY;\r\n\r\n        // exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        emit Transfer(address(0), owner(), TOTAL_SUPPLY);\r\n    }\r\n\r\n    /** Functions required by IERC20Metadat **/\r\n    function name() external pure override returns (string memory) {\r\n        return NAME;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    /** Functions required by IERC20Metadat - END **/\r\n    /** Functions required by IERC20 **/\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n\r\n    // function balanceOf(address account) public view override returns (uint256){\r\n    //     if (_isExcludedFromRewards[account]) return _balances[account];\r\n    //     return tokenFromReflection(_reflectedBalances[account]);\r\n    // }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    // Exclude from fee\r\n    function excludeFromFee(address address_to_exclude) external onlyOwner {\r\n        _isExcludedFromFee[address_to_exclude] = true;\r\n    }\r\n\r\n    // Include to fee\r\n    function includeInFee(address address_to_include) external onlyOwner {\r\n        _isExcludedFromFee[address_to_include] = false;\r\n    }\r\n\r\n    function setProfileTransferContractAddress(address profile_contract_address) external onlyOwner {\r\n        require(transfer_to_profile_contract_address != profile_contract_address, \"New Contract Address cannot be the same as old.\");\r\n\r\n        transfer_to_profile_contract_address = profile_contract_address;\r\n    }\r\n\r\n    function enableProfileTransfers() external onlyOwner {\r\n        has_profile_transfers_enabled = true;\r\n    }\r\n\r\n    function disableProfileTransfers() external onlyOwner {\r\n        has_profile_transfers_enabled = false;\r\n    }\r\n\r\n    function enableExternalProfileTransfers() external onlyOwner {\r\n        has_external_profile_transfers = true;\r\n    }\r\n\r\n    function disableExternalProfileTransfers() external onlyOwner {\r\n        has_external_profile_transfers = false;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /** Functions required by IERC20 - END **/\r\n\r\n    function addFee(\r\n        FeeType fee_name,\r\n        uint256 value,\r\n        address recipient\r\n    ) external onlyOwner {\r\n        _addFee(fee_name, value, recipient);\r\n    }\r\n\r\n    function removeFee(uint256 index) external onlyOwner {\r\n        _removeFee(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total sum of fees to be processed in each transaction.\r\n     *\r\n     * To separate concerns this contract (class) will take care of ONLY handling RFI, i.e.\r\n     * changing the rates and updating the holder's balance (via `_redistribute`).\r\n     * It is the responsibility of the dev/user to handle all other fees and taxes\r\n     * in the appropriate contracts (classes).\r\n     */\r\n    function _getSumOfFees(address sender, uint256 amount)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (uint256);\r\n\r\n    function _takeTransactionFees(uint256 amount) internal virtual;\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n\r\n        // indicates whether or not fee should be deducted from the transfer\r\n        bool takeFee = true;\r\n\r\n        // Transfer from wallet to wallet when both wallets have a profile\r\n        if (\r\n            !isInPresale &&\r\n            transfer_to_profile_contract_address != address(0) &&\r\n            has_profile_transfers_enabled &&\r\n            ProfileTransferRouter(transfer_to_profile_contract_address).addressHasProfile(recipient) &&\r\n            ProfileTransferRouter(transfer_to_profile_contract_address).addressHasProfile(sender)\r\n        ) {\r\n            // Call the profile transfer contract to handle the transfer\r\n            if (has_external_profile_transfers) {\r\n                ProfileTransferRouter(transfer_to_profile_contract_address).transferToProfile(\r\n                    sender,\r\n                    recipient,\r\n                    amount\r\n                );\r\n\r\n                emit Transfer(sender, recipient, amount);\r\n\r\n                _afterTokenTransfer(sender, recipient, amount);\r\n\r\n                return;\r\n            // Make the transfer locally, without fees\r\n            } else {\r\n                takeFee = false;\r\n            }\r\n        }\r\n\r\n        if (isInPresale) {\r\n            takeFee = false;\r\n        }\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 sumOfFees = _getSumOfFees(sender, amount);\r\n        if (!takeFee) {\r\n            sumOfFees = 0;\r\n        }\r\n\r\n        (uint256 tAmount, uint256 tTransferAmount) = _getValues(\r\n            amount,\r\n            sumOfFees\r\n        );\r\n\r\n        _balances[sender] = _balances[sender].sub(tAmount);\r\n        _balances[recipient] = _balances[recipient].add(tTransferAmount);\r\n\r\n        _takeFees(amount, sumOfFees);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _takeFees(uint256 amount, uint256 sumOfFees) private {\r\n        if (sumOfFees > 0 && !isInPresale) {\r\n            _takeTransactionFees(amount);\r\n        }\r\n    }\r\n\r\n    function _getValues(uint256 tAmount, uint256 feesSum)\r\n        internal\r\n        pure\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 tTotalFees = tAmount.mul(feesSum).div(FEES_DIVISOR);\r\n        uint256 tTransferAmount = tAmount.sub(tTotalFees);\r\n\r\n        return (tAmount, tTransferAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev this is really a \"soft\" burn (total supply is not reduced). RFI holders\r\n     * get two benefits from burning tokens:\r\n     *\r\n     * 1) Tokens in the burn address increase the % of tokens held by holders not\r\n     *    excluded from rewards (assuming the burn address is excluded)\r\n     * 2) Tokens in the burn address cannot be sold (which in turn draing the\r\n     *    liquidity pool)\r\n     *\r\n     *\r\n     * In RFI holders already get % of each transaction so the value of their tokens\r\n     * increases (in a way). Therefore there is really no need to do a \"hard\" burn\r\n     * (reduce the total supply). What matters (in RFI) is to make sure that a large\r\n     * amount of tokens cannot be sold = draining the liquidity pool = lowering the\r\n     * value of tokens holders own. For this purpose, transfering tokens to a (vanity)\r\n     * burn address is the most appropriate way to \"burn\".\r\n     *\r\n     * There is an extra check placed into the `transfer` function to make sure the\r\n     * burn address cannot withdraw the tokens is has (although the chance of someone\r\n     * having/finding the private key is virtually zero).\r\n     */\r\n    function burn(uint256 amount) external {\r\n        address sender = _msgSender();\r\n        require(\r\n            sender != address(0),\r\n            \"BaseObohToken: burn from the zero address\"\r\n        );\r\n        require(\r\n            sender != address(burnAddress),\r\n            \"BaseObohToken: burn from the burn address\"\r\n        );\r\n\r\n        uint256 balance = balanceOf(sender);\r\n        require(balance >= amount, \"BaseObohToken: burn amount exceeds balance\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n\r\n        _burnTokens(sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev \"Soft\" burns the specified amount of tokens by sending them\r\n     * to the burn address\r\n     */\r\n    function _burnTokens(address sender, uint256 tBurn) internal {\r\n        _balances[burnAddress] = _balances[burnAddress].add(tBurn);\r\n\r\n        /**\r\n         * @dev Emit the event so that the burn address balance is updated (on bscscan)\r\n         */\r\n        emit Transfer(sender, burnAddress, tBurn);\r\n    }\r\n\r\n    /**\r\n     * @dev A delegate which should return true if the given address is the V2 Pair and false otherwise\r\n     */\r\n    function _isV2Pair(address account) internal view virtual returns (bool);\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ncontract ObohToken is BaseObohToken, Liquifier {\r\n    using SafeMath for uint256;\r\n\r\n    // constructor(string memory _name, string memory _symbol, uint8 _decimals){\r\n    constructor() {\r\n        initializeLiquiditySwapper(\r\n            maxTransactionAmount,\r\n            numberOfTokensToSwapToLiquidity\r\n        );\r\n    }\r\n\r\n    function _isV2Pair(address account) internal view override returns (bool) {\r\n        return (account == _pair);\r\n    }\r\n\r\n    function _getSumOfFees(address sender, uint256 amount)\r\n        internal\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return sumOfFees;\r\n    }\r\n\r\n    function getSumOfFees()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return sumOfFees;\r\n    }\r\n\r\n    // function _beforeTokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) internal override {\r\n    function _beforeTokenTransfer(\r\n        address sender,\r\n        address,\r\n        uint256,\r\n        bool\r\n    ) internal {\r\n        if (!isInPresale) {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            liquify(contractTokenBalance, sender);\r\n        }\r\n    }\r\n\r\n    function _takeTransactionFees(uint256 amount) internal override {\r\n        if (isInPresale) {\r\n            return;\r\n        }\r\n\r\n        uint256 feesCount = _getFeesCount();\r\n        for (uint256 index = 0; index < feesCount; index++) {\r\n            (FeeType name, uint256 value, address recipient, ) = _getFee(index);\r\n            // no need to check value < 0 as the value is uint (i.e. from 0 to 2^256-1)\r\n            if (value == 0) continue;\r\n\r\n            if (name == FeeType.Burn) {\r\n                _burn(amount, value, index);\r\n            } else if (name == FeeType.ExternalToETH) {\r\n                _takeFeeToETH(amount, value, recipient, index);\r\n            } else {\r\n                _takeFee(amount, value, recipient, index);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _burn(\r\n        uint256 amount,\r\n        uint256 fee,\r\n        uint256 index\r\n    ) private {\r\n        uint256 tBurn = amount.mul(fee).div(FEES_DIVISOR);\r\n\r\n        _burnTokens(address(this), tBurn);\r\n        _addFeeCollectedAmount(index, tBurn);\r\n    }\r\n\r\n    function _takeFee(\r\n        uint256 amount,\r\n        uint256 fee,\r\n        address recipient,\r\n        uint256 index\r\n    ) private {\r\n        uint256 tAmount = amount.mul(fee).div(FEES_DIVISOR);\r\n\r\n        _balances[recipient] = _balances[recipient].add(tAmount);\r\n\r\n        _addFeeCollectedAmount(index, tAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev When implemented this will convert the fee amount of tokens into ETH/BNB\r\n     * and send to the recipient's wallet. Note that this reduces liquidity so it\r\n     * might be a good idea to add a % into the liquidity fee for % you take our through\r\n     * this method (just a suggestions)\r\n     */\r\n    function _takeFeeToETH(\r\n        uint256 amount,\r\n        uint256 fee,\r\n        address recipient,\r\n        uint256 index\r\n    ) private {\r\n        _takeFee(amount, fee, recipient, index);\r\n    }\r\n\r\n    function _approveDelegate(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal override {\r\n        _approve(owner, spender, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagementTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum Tokenomics.FeeType\",\"name\":\"fee_name\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"addFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableExternalProfileTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableProfileTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableExternalProfileTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableProfileTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_to_exclude\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCollectedFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"enum Tokenomics.FeeType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSumOfFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_to_include\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPreseableEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"profile_contract_address\",\"type\":\"address\"}],\"name\":\"setProfileTransferContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"transferManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawLockedEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ObohToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8bf69cdbc888a7478a977450281dac2d4112330c6799a584f5da1e8a6b3783dc"}