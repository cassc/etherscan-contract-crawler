{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.14;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract BTCFToken is IERC20,owned {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 8;\r\n    uint256 public totalSupply;\r\n\r\n    struct ConfigStruct {\r\n        uint256 minTotalSupply;\r\n        uint256 minBalance;\r\n        address  gameAddress;\r\n        address  nodeAddress;\r\n        address  superNodeAddress;\r\n        bool transferOpen;\r\n    }\r\n\r\n    ConfigStruct public Config;\r\n\r\n    mapping(address=>bool) private whiteList;\r\n    mapping(address=>bool) private blockList;\r\n    mapping(address=>bool) public swapAddressMap;\r\n    mapping(address=>address) public inviteMap;\r\n\r\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    struct FeeRateStruct{\r\n        uint40  DestroyRate;\r\n        uint40  SuperNodeRate;\r\n        uint40  NodeRate;\r\n        uint40  LPRate;\r\n        uint40  InviteFirstRate;\r\n        uint40  InviteSecondRate;\r\n        uint40  GameRate;\r\n    }\r\n\r\n    FeeRateStruct public buyFeeRate;\r\n    FeeRateStruct public sellFeeRate;\r\n\r\n    constructor(\r\n        string memory tokenName,\r\n        string memory tokenSymbol\r\n    ) {\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n\r\n        uint256 initialSupply=990000;\r\n\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);\r\n        Config.minTotalSupply = 99000 * 10 ** uint256(decimals);\r\n        Config.minBalance=1  * 10 ** uint256(decimals) / 1000;\r\n\r\n        balanceOf[msg.sender] = totalSupply;\r\n        whiteList[msg.sender]=true;\r\n        emit Transfer(address(0),msg.sender,totalSupply);\r\n\r\n        buyFeeRate.DestroyRate=0;\r\n        buyFeeRate.SuperNodeRate=10;\r\n        buyFeeRate.NodeRate=10;\r\n        buyFeeRate.LPRate=20;\r\n        buyFeeRate.InviteFirstRate=5;\r\n        buyFeeRate.InviteSecondRate=5;\r\n        buyFeeRate.GameRate=0;\r\n\r\n        sellFeeRate.DestroyRate=30;\r\n        sellFeeRate.SuperNodeRate=10;\r\n        sellFeeRate.NodeRate=10;\r\n        sellFeeRate.LPRate=20;\r\n        sellFeeRate.InviteFirstRate=0;\r\n        sellFeeRate.InviteSecondRate=0;\r\n        sellFeeRate.GameRate=10;\r\n\r\n        Config.gameAddress=msg.sender;\r\n        Config.nodeAddress=msg.sender;\r\n        Config.superNodeAddress=msg.sender;\r\n    }\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    function setConfig(uint256 minTotalSupply, uint256 minBalance,address nodeAddress,address superNodeAddress,address  gameAddress,bool transferOpen)public onlyOwner{\r\n        Config.minTotalSupply=minTotalSupply;\r\n        Config.minBalance=minBalance;\r\n        Config.nodeAddress=nodeAddress;\r\n        Config.superNodeAddress=superNodeAddress;\r\n        Config.gameAddress=gameAddress;\r\n        Config.transferOpen=transferOpen;\r\n    }\r\n\r\n    function setFeeRate(uint40 feeType,uint40  DestroyRate,uint40  SuperNodeRate,uint40  NodeRate,uint40  LPRate,uint40  InviteFirstRate,uint40  InviteSecondRate,uint40  GameRate)public onlyOwner{\r\n        if(feeType==1){\r\n            buyFeeRate.DestroyRate=DestroyRate;\r\n            buyFeeRate.SuperNodeRate=SuperNodeRate;\r\n            buyFeeRate.NodeRate=NodeRate;\r\n            buyFeeRate.LPRate=LPRate;\r\n            buyFeeRate.InviteFirstRate=InviteFirstRate;\r\n            buyFeeRate.InviteSecondRate=InviteSecondRate;\r\n            buyFeeRate.GameRate=GameRate;\r\n        }else{\r\n            sellFeeRate.DestroyRate=DestroyRate;\r\n            sellFeeRate.SuperNodeRate=SuperNodeRate;\r\n            sellFeeRate.NodeRate=NodeRate;\r\n            sellFeeRate.LPRate=LPRate;\r\n            sellFeeRate.InviteFirstRate=InviteFirstRate;\r\n            sellFeeRate.InviteSecondRate=InviteSecondRate;\r\n            sellFeeRate.GameRate=GameRate;\r\n        }\r\n    }\r\n\r\n\r\n    function setWhiteAddress(address addr,bool status)  onlyOwner public {\r\n        whiteList[addr] = status;\r\n    }\r\n\r\n    function setBlockAddress(address addr,bool status)  onlyOwner public {\r\n        blockList[addr] = status;\r\n    }\r\n\r\n    function setSwapAddress(address addr,bool status)  onlyOwner public {\r\n        swapAddressMap[addr] = status;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns(bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns(bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, allowance[sender][msg.sender]-amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns(bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"TRC20: approve from the zero address\");\r\n        require(spender != address(0), \"TRC20: approve to the zero address\");\r\n        allowance[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    function withdrawEth(address payable addr, uint256 amount) onlyOwner public{\r\n        addr.transfer(amount);\r\n    }\r\n\r\n    function withdrawToken(IERC20 token, uint256 amount)onlyOwner public returns (bool){\r\n        token.transfer(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer_default(address sender,address recipient,uint256 amount)private{\r\n        balanceOf[sender]=balanceOf[sender]-amount;\r\n        balanceOf[recipient]=balanceOf[recipient]+amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transfer_fee_check(address sender, address recipient)private view returns(FeeRateStruct memory){\r\n        FeeRateStruct memory swapFee ;\r\n        if(swapAddressMap[sender]==true){\r\n            swapFee=buyFeeRate;\r\n        }else if (swapAddressMap[recipient]==true){\r\n            swapFee=sellFeeRate;\r\n        }\r\n\r\n        if(totalSupply-balanceOf[deadAddress]<=Config.minTotalSupply){\r\n            swapFee.DestroyRate=0;\r\n        }\r\n\r\n        return swapFee;\r\n    }\r\n\r\n    event AddSuperNodeAmount(uint256 amount);\r\n    event AddNodeAmount(uint256 amount);\r\n\r\n    function _transfer_swap(address sender, address recipient, uint256 amount) private{\r\n        FeeRateStruct memory swapFee =_transfer_fee_check(sender,recipient);\r\n        uint256 feeAmount = 0;\r\n\r\n        address fromAddress;\r\n        address thisSwapAddress;\r\n        if(swapAddressMap[sender]){\r\n            fromAddress=recipient;\r\n            thisSwapAddress=sender;\r\n        }else{\r\n            fromAddress=sender;\r\n            thisSwapAddress=recipient;\r\n        }\r\n\r\n        address inviteFirst = inviteMap[fromAddress];\r\n        address inviteSecond = inviteMap[inviteFirst];\r\n\r\n        if(swapFee.InviteFirstRate>0&&inviteFirst!=address(0)){\r\n            uint256 inviteFirstAmount = amount * swapFee.InviteFirstRate / 1000;\r\n            feeAmount=feeAmount+inviteFirstAmount;\r\n            _transfer_default(sender,inviteFirst,inviteFirstAmount);\r\n        }\r\n\r\n        if(swapFee.InviteSecondRate>0&&inviteSecond!=address(0)){\r\n            uint256 inviteSecondAmount = amount * swapFee.InviteSecondRate / 1000;\r\n            feeAmount=feeAmount+inviteSecondAmount;\r\n            _transfer_default(sender,inviteSecond,inviteSecondAmount);\r\n        }\r\n\r\n        if(swapFee.GameRate>0){\r\n            uint256 gameAmount = amount * swapFee.GameRate / 1000;\r\n            feeAmount=feeAmount+gameAmount;\r\n            _transfer_default(sender,Config.gameAddress,gameAmount);\r\n        }\r\n\r\n        if(swapFee.DestroyRate>0){\r\n            uint256 thisDestroyAmount = amount * swapFee.DestroyRate / 1000;\r\n            feeAmount=feeAmount+thisDestroyAmount;\r\n            _transfer_default(sender,deadAddress,thisDestroyAmount);\r\n        }\r\n        if(swapFee.SuperNodeRate>0){\r\n            uint256 superNodeAmount = amount * swapFee.SuperNodeRate / 1000;\r\n            feeAmount=feeAmount+superNodeAmount;\r\n            _transfer_default(sender,Config.superNodeAddress,superNodeAmount);\r\n            emit AddSuperNodeAmount(superNodeAmount);\r\n        }\r\n        if(swapFee.NodeRate>0){\r\n            uint256 nodeAmount = amount * swapFee.NodeRate / 1000;\r\n            feeAmount=feeAmount+nodeAmount;\r\n            _transfer_default(sender,Config.nodeAddress,nodeAmount);\r\n            emit AddNodeAmount(nodeAmount);\r\n        }\r\n        if(swapFee.LPRate>0){\r\n            uint256 lpAmount = amount * swapFee.LPRate / 1000;\r\n            feeAmount=feeAmount+lpAmount;\r\n            _transfer_default(sender,thisSwapAddress,lpAmount);\r\n        }\r\n\r\n        uint256 toBalance = amount - feeAmount;\r\n        _transfer_default(sender,recipient,toBalance);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(blockList[sender]==false,\"Blacklist cannot transfer money\");\r\n        bindInvite(sender,recipient);\r\n\r\n        if (whiteList[sender]||whiteList[recipient]){\r\n            _transfer_default(sender,recipient,amount);\r\n            return;\r\n        }\r\n        require(Config.transferOpen==true,\"Trading is not open\");\r\n\r\n        if (swapAddressMap[sender]==true||swapAddressMap[recipient]==true) {\r\n            _transfer_swap(sender,recipient,amount);\r\n        }else{\r\n            _transfer_default(sender,recipient,amount);\r\n        }\r\n        require(balanceOf[sender]>=Config.minBalance,\"not sufficient funds\");\r\n    }\r\n\r\n\r\n    function destroyAmount(uint256 amount)   public {\r\n        uint256 hasTotal = totalSupply-Config.minTotalSupply;\r\n        if (balanceOf[deadAddress]>=hasTotal){\r\n            return;\r\n        }\r\n        if(hasTotal-balanceOf[deadAddress]<amount){\r\n            amount=hasTotal-balanceOf[deadAddress];\r\n        }\r\n        transfer(deadAddress,amount);\r\n    }\r\n\r\n    function isContract(address addr)private view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    function bindInvite(address from,address to)private {\r\n        if (inviteMap[to]!=address(0) || isContract(from) || isContract(to)){\r\n            return;\r\n        }\r\n        if ( from==to ||to==owner||from==address(0)){\r\n            return;\r\n        }\r\n\r\n        inviteMap[to]=from;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddNodeAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddSuperNodeAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"superNodeAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"transferOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeRate\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"DestroyRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"SuperNodeRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"NodeRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"LPRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"InviteFirstRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"InviteSecondRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"GameRate\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"destroyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeRate\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"DestroyRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"SuperNodeRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"NodeRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"LPRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"InviteFirstRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"InviteSecondRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"GameRate\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setBlockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"superNodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"transferOpen\",\"type\":\"bool\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"feeType\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"DestroyRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"SuperNodeRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"NodeRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"LPRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"InviteFirstRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"InviteSecondRate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"GameRate\",\"type\":\"uint40\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setSwapAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setWhiteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapAddressMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BTCFToken", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004425443460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044254434600000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1dc32f2df03df654463dfc70f7b0ac048f8b0a2ddba5020398204b25349a994b"}