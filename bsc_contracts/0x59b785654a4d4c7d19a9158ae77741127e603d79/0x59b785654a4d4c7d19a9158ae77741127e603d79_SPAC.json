{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-12-13\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-11-28\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n   \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = now + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(now > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface ILottery {\r\n    function swap() external;\r\n}\r\n\r\n\r\ncontract SPAC is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _rOwned; //balance\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee; //address excluded from fee\r\n    address[] private _excludedFromFee;\r\n\r\n    mapping (address => bool) private _isExcluded;  //address excluded from reward\r\n    address[] private _excluded;\r\n    address public _developer;\r\n\taddress public _feeer;\r\n    address public _lottery;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 3 * 10**8 * 10**18;\r\n    uint256 public _maxTxAmount = 3 * 10**8 * 10**18;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"SPAC\";\r\n    string private _symbol = \"SPAC\";\r\n    uint8 private  _decimals = 18;\r\n\r\n    uint256 public _taxFee = 15;       //\r\n    uint256 public _referFee = 0;     //2%, 1%, 1% for 1/2/3 level referer, 1% for group leader\r\n    uint256 public _developerFee = 0;  //fixed to 2%\r\n    uint256 public _lotteryFee = 0;\r\n\r\n    uint256 constant  ALLFEE_NUMBER = 4;\r\n    uint256 constant  TAXFEE_INDEX = 0;\r\n    uint256 constant  REFERFEE_INDEX = 1;\r\n    uint256 constant  DEVELOPERFEE_INDEX = 2;\r\n    uint256 constant  LOTTERYFEE_INDEX= 3;\r\n\r\n    //in rValues and tValues array, amount, transferamount, fee, liquidity, dev, lottery are organized like below.\r\n    uint256 constant AMOUNT_INDEX = 0;\r\n    uint256 constant TRANSFERAMOUNT_INDEX = 1;\r\n    uint256 constant TAX_INDEX = 2;\r\n    uint256 constant REFER_INDEX = 3;\r\n    uint256 constant DEVELOPER_INDEX = 4;\r\n    uint256 constant LOTTERY_INDEX = 5;\r\n\t\r\n\tbool public blacklistMode = true;\r\n    mapping(address => bool) public isBlacklisted;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    address public constant BLACKHOLE = 0x0000000000000000000000000000000000000001;\r\n    IERC20 public usdt = IERC20(0x55d398326f99059fF775485246999027B3197955); \r\n\t// bsc testnet IERC20(0x51657285b545F1D92D8AB80B6120498931cC9Dc7);  \r\n\t//bscmainnet IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n    uint256 constant REFER_DEPTH = 4;\r\n    struct UserInfo {\r\n        address father;\r\n        address[] childs;\r\n        uint256[REFER_DEPTH] referRewards;\r\n    }\r\n    address immutable public genesisAddress;\r\n    mapping(address => UserInfo) public userInfo;\r\n    uint256 public _numTokensToBeRefer = 10 * 10**18;\r\n    uint256 public _extraFeeForNoRefer = 0; //2% extraFee\r\n    uint256 public _groupLeaderSearchDepth = REFER_DEPTH;\r\n    uint256 _groupLeaderIndex = REFER_DEPTH - 1;\r\n\r\n    event Transfer(address indexed, address indexed, uint);\r\n    event TakeDeveloper(address indexed, uint256);\r\n\tevent ReflectFee(address indexed, uint256);\r\n    event TakeLottery(address indexed, uint256);\r\n    event TakeReferRewards(address[REFER_DEPTH], uint256[REFER_DEPTH]);\r\n    event RegisterRefer(address indexed, address indexed);\r\n\r\n\r\n    constructor (address developer, address feeer) public {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        _developer = developer;\r\n\t\t_feeer = feeer;\r\n        genesisAddress = _msgSender();\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); \r\n\t\t//bsc testnet 0xD99D1c33F9fC3444f8101754aBC46c52416550D1, \r\n\t\t//bsc mainnet: 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n        .createPair(address(this), address(usdt));\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        //exclude owner,  this contract, lotterytreasure and developer from fee\r\n        _isExcludedFromFee[_msgSender()] = true;\r\n        _excludedFromFee.push(_msgSender());\r\n\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _excludedFromFee.push(address(this));\r\n\r\n        _isExcludedFromFee[_developer] = true;\r\n        _excludedFromFee.push(_developer);\r\n\t\t\r\n\t\t_isExcludedFromFee[_feeer] = true;\r\n        _excludedFromFee.push(_feeer);\r\n\r\n        userInfo[_msgSender()].father = _msgSender();\r\n        userInfo[BLACKHOLE].father = _msgSender();\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n\r\n    function setDeveloper(address developer) public onlyOwner {\r\n        includeInFee(_developer);\r\n        _developer = developer;\r\n        excludeFromFee(developer);\r\n    }\r\n\t\r\n\tfunction setFeeer(address feeper) public onlyOwner {\r\n        includeInFee(_feeer);\r\n        _feeer = feeper;\r\n        excludeFromFee(feeper);\r\n    }\r\n\r\n    function setLottery(address lottery) public onlyOwner{\r\n        if (_lottery != address(0)){\r\n            includeInFee(_lottery);\r\n        }\r\n\r\n        if (!_isExcludedFromFee[lottery]){ //exclude lottery from fee if not excluded before\r\n            excludeFromFee(lottery);\r\n        }\r\n        _lottery = lottery;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function exluded(uint256 index) public view returns (address){\r\n        return _excluded[index];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is already included\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        require(!_isExcludedFromFee[account], \"Account is already excluded\");\r\n        _isExcludedFromFee[account] = true;\r\n        _excludedFromFee.push(account);\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        require(_isExcludedFromFee[account], \"Account is already included\");\r\n        for (uint256 i; i < _excludedFromFee.length;i++){\r\n            if (_excludedFromFee[i] == account){\r\n                _isExcludedFromFee[account] = false;\r\n                _excludedFromFee[i] = _excludedFromFee[_excludedFromFee.length - 1];\r\n                _excludedFromFee.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner {\r\n        require(taxFee < 100, \"taxFee >= 100\");\r\n        _taxFee = taxFee;\r\n    }\r\n\r\n    function setLotteryFeePercent(uint256 lotteryFee) external onlyOwner{\r\n        require(lotteryFee < 100, \"lotteryFee >= 100\");\r\n        _lotteryFee = lotteryFee;\r\n    }\r\n\r\n    function setReferFeePercent(uint256 referFee) external onlyOwner {\r\n        require(referFee < 100, \"referFee >= 100\");\r\n        _referFee = referFee;\r\n    }\r\n\r\n\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner {\r\n        require(maxTxPercent <= 10000, \"maxTxPercent > 10000\");\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10000);\r\n    }\r\n\r\n\r\n    function getValues(uint256 amount, bool hasRefer) public view returns (uint256[6] memory, uint256[6] memory){\r\n        uint256 extraFee = 0;\r\n        if (!hasRefer) {\r\n            extraFee = _extraFeeForNoRefer;\r\n        }\r\n        return _getValues(amount, _getFeeRates(extraFee));\r\n    }\r\n\r\n    function lottery() public view returns (address){\r\n        return _lottery;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) override public  onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        includeInFee(owner());\r\n        excludeFromFee(newOwner);\r\n        super.transferOwnership(newOwner);\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function _getValues(uint256 tAmount, uint256[ALLFEE_NUMBER] memory feeRates) private view returns (uint256[6] memory, uint256[6] memory) {\r\n        uint256[6] memory tValues = _getTValues(tAmount, feeRates);\r\n        uint256[6] memory rValues = _getRValues(tValues, _getRate());\r\n        return (rValues, tValues);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256[ALLFEE_NUMBER] memory feeRates) private pure returns (uint256[6] memory) {\r\n        uint256[6] memory tValues;\r\n        tValues[0] = tAmount;\r\n        tValues[2] = calculateTaxFee(tAmount, feeRates[TAXFEE_INDEX]);\r\n        tValues[3] = calculateReferFee(tAmount, feeRates[REFERFEE_INDEX]);\r\n        tValues[4] = calculateDeveloperFee(tAmount, feeRates[DEVELOPERFEE_INDEX]);\r\n        tValues[5] = calculateLotteryFee(tAmount, feeRates[LOTTERYFEE_INDEX]);\r\n        tValues[1] = tValues[0].sub(tValues[2]).sub(tValues[3]).sub(tValues[4]).sub(tValues[5]);\r\n        return tValues;\r\n    }\r\n\r\n\r\n    function _getRValues(uint256[6] memory tValues, uint256 currentRate) private pure returns (uint256[6] memory) {\r\n        uint[6] memory rValues;\r\n        rValues[0] = tValues[0].mul(currentRate);\r\n        rValues[2] = tValues[2].mul(currentRate);\r\n        rValues[3] = tValues[3].mul(currentRate);\r\n        rValues[4] = tValues[4].mul(currentRate);\r\n        rValues[5] = tValues[5].mul(currentRate);\r\n        rValues[1]  = rValues[0].sub(rValues[2]).sub(rValues[3]).sub(rValues[4]).sub(rValues[5]);\r\n        return rValues;\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    //@dev, distribute referwards, emit event\r\n    function _takeReferRewards(address recipient, uint256 rReferReward, uint256 tReferReward) private {\r\n        \r\n    }\r\n\r\n    function _takeDeveloper(uint256 rDeveloper, uint256 tDeveloper) private {\r\n        _rOwned[_developer] = _rOwned[_developer].add(rDeveloper);\r\n        if(_isExcluded[_developer])\r\n            _tOwned[_developer] = _tOwned[_developer].add(tDeveloper);\r\n        emit TakeDeveloper(_developer, tDeveloper);\r\n    }\r\n\r\n    function _takeLottery(uint256 rLottery,uint256 tLottery) private {\r\n        _rOwned[_lottery] = _rOwned[_lottery].add(rLottery);\r\n        if(_isExcluded[_lottery])\r\n            _tOwned[_lottery] = _tOwned[_lottery].add(tLottery);\r\n        emit TakeLottery(_lottery, tLottery);\r\n    }\r\n\t\r\n\tfunction _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n\t\t\r\n\t\t_rOwned[_feeer] = _rOwned[_feeer].add(rFee);\r\n        if(_isExcluded[_feeer])\r\n            _tOwned[_feeer] = _tOwned[_feeer].add(tFee);\r\n        emit Transfer(_msgSender(), _feeer, tFee);\r\n    }\r\n\r\n    function calculateTaxFee(uint256 amount, uint256 taxFee) private pure returns (uint256) {\r\n        return amount.mul(taxFee).div(\r\n            10**2\r\n        );\r\n    }\r\n\r\n    function calculateReferFee(uint256 amount, uint256 referFee) private pure returns (uint256) {\r\n        return amount.mul(referFee).div(\r\n            10**2\r\n        );\r\n    }\r\n\r\n    function calculateDeveloperFee(uint256 amount, uint256 developerFee) private pure returns (uint256) {\r\n        return amount.mul(developerFee).div(\r\n            10**2\r\n        );\r\n    }\r\n\r\n    function calculateLotteryFee(uint256 amount, uint256 lotteryFee) private pure returns (uint256) {\r\n        return amount.mul(lotteryFee).div(\r\n            10**2\r\n        );\r\n    }\r\n\r\n    function _getFeeRates(uint256 extraFee) private view returns (uint256[ALLFEE_NUMBER] memory){\r\n        uint256[ALLFEE_NUMBER] memory feeRates;\r\n        feeRates = [_taxFee, _referFee, _developerFee, _lotteryFee+extraFee];\r\n        return feeRates;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\t\r\n\tfunction enable_blacklist(bool _status) public onlyOwner {\r\n\t\tblacklistMode = _status;\r\n\t}\r\n\t\r\n\tfunction manage_blacklist(address[] calldata addresses, bool status)\r\n    public\r\n    onlyOwner\r\n\t  {\r\n\t\tfor (uint256 i; i < addresses.length; ++i) {\r\n\t\t  isBlacklisted[addresses[i]] = status;\r\n\t\t}\r\n\t  }\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if(from != owner() && to != owner())\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n\t\t\r\n\t\t// Blacklist\r\n\t\tif (blacklistMode) {\r\n\t\t  require(\r\n\t\t\t!isBlacklisted[from] && !isBlacklisted[to],\r\n\t\t\t\"Blacklisted\"\r\n\t\t  );\r\n\t\t}\r\n\t\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = false;\r\n\r\n        // only take fee in case of buying from/selling to uniswap.\r\n        if (from == uniswapV2Pair || to == uniswapV2Pair){\r\n            takeFee = true;\r\n        }\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n\r\n        if (_lottery != address(0)){\r\n            if (from != uniswapV2Pair && from != _lottery) {\r\n                ILottery(_lottery).swap();\r\n            }\r\n        }\r\n\r\n        //transfer amount, it will take tax, refer, liquidity fee\r\n        _tokenTransfer(from,to,amount,takeFee);\r\n    }\r\n\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n        uint256[ALLFEE_NUMBER] memory feeRates;\r\n        if (takeFee) {\r\n            feeRates = _getFeeRates(0);\r\n        }\r\n\r\n        if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount,feeRates);\r\n        }else if(!_isExcluded[sender] && _isExcluded[recipient]){\r\n            _transferToExcluded(sender, recipient, amount, feeRates);\r\n        }else if(_isExcluded[sender] && !_isExcluded[recipient]){\r\n            _transferFromExcluded(sender, recipient, amount, feeRates);\r\n        }else{\r\n            _transferBothExcluded(sender, recipient, amount, feeRates);\r\n        }\r\n    }\r\n\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 amount, uint256[ALLFEE_NUMBER] memory feeRates) private {\r\n        (uint256[6] memory rValues, uint256[6] memory tValues) = _getValues(amount, feeRates);\r\n        {\r\n            uint256 rAmount = rValues[AMOUNT_INDEX];\r\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        }\r\n\r\n        {\r\n            uint256 rTransferAmount = rValues[TRANSFERAMOUNT_INDEX];\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        }\r\n\r\n        {\r\n            uint256 rReferReward = rValues[REFER_INDEX];\r\n            uint256 tReferReward = tValues[REFER_INDEX];\r\n            if (tReferReward != 0){\r\n                _takeReferRewards(recipient, rReferReward, tReferReward);\r\n            }\r\n        }\r\n        {\r\n            uint256 rDeveloper = rValues[DEVELOPER_INDEX];\r\n            uint256 tDeveloper = tValues[DEVELOPER_INDEX];\r\n            if (tDeveloper != 0){\r\n                _takeDeveloper(rDeveloper, tDeveloper);\r\n            }\r\n        }\r\n        {\r\n            uint256 rLottery = rValues[LOTTERY_INDEX];\r\n            uint256 tLottery = tValues[LOTTERY_INDEX];\r\n            if (tLottery != 0){\r\n                _takeLottery(rLottery, tLottery);\r\n            }\r\n        }\r\n        {\r\n            uint256 rFee = rValues[TAX_INDEX];\r\n            uint256 tFee = tValues[TAX_INDEX];\r\n            if (tFee != 0){\r\n                _reflectFee(rFee, tFee);\r\n            }\r\n        }\r\n\r\n        uint256 tTransferAmount = tValues[TRANSFERAMOUNT_INDEX];\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 amount, uint256[ALLFEE_NUMBER] memory feeRates) private {\r\n        (uint256[6] memory rValues, uint256[6] memory tValues) = _getValues(amount, feeRates);\r\n        {\r\n            uint256 rAmount = rValues[AMOUNT_INDEX];\r\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        }\r\n\r\n        {\r\n            uint256 tTransferAmount = tValues[TRANSFERAMOUNT_INDEX];\r\n            uint256 rTransferAmount = rValues[TRANSFERAMOUNT_INDEX];\r\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        }\r\n\r\n        {\r\n            uint256 rReferReward = rValues[REFER_INDEX];\r\n            uint256 tReferReward = tValues[REFER_INDEX];\r\n            if (tReferReward != 0){\r\n                _takeReferRewards(recipient, rReferReward, tReferReward);\r\n            }\r\n        }\r\n        {\r\n            uint256 rDeveloper = rValues[DEVELOPER_INDEX];\r\n            uint256 tDeveloper = tValues[DEVELOPER_INDEX];\r\n            if (tDeveloper != 0){\r\n                _takeDeveloper(rDeveloper, tDeveloper);\r\n            }\r\n        }\r\n        {\r\n            uint256 rLottery = rValues[LOTTERY_INDEX];\r\n            uint256 tLottery = tValues[LOTTERY_INDEX];\r\n            if (tLottery != 0){\r\n                _takeLottery(rLottery, tLottery);\r\n            }\r\n        }\r\n        {\r\n            uint256 rFee = rValues[TAX_INDEX];\r\n            uint256 tFee = tValues[TAX_INDEX];\r\n            if (tFee != 0){\r\n                _reflectFee(rFee, tFee);\r\n            }\r\n        }\r\n\r\n        uint256 tTransferAmount = tValues[TRANSFERAMOUNT_INDEX];\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient,  uint256 amount, uint256[ALLFEE_NUMBER] memory feeRates) private {\r\n        (uint256[6] memory rValues, uint256[6] memory tValues) = _getValues(amount, feeRates);\r\n        {\r\n            uint256 rAmount = rValues[AMOUNT_INDEX];\r\n            _tOwned[sender] = _tOwned[sender].sub(amount);\r\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        }\r\n\r\n        {\r\n            uint256 rTransferAmount = rValues[TRANSFERAMOUNT_INDEX];\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        }\r\n\r\n        {\r\n            uint256 rReferReward = rValues[REFER_INDEX];\r\n            uint256 tReferReward = tValues[REFER_INDEX];\r\n            if (tReferReward != 0){\r\n                _takeReferRewards(recipient, rReferReward, tReferReward);\r\n            }\r\n        }\r\n        {\r\n            uint256 rDeveloper = rValues[DEVELOPER_INDEX];\r\n            uint256 tDeveloper = tValues[DEVELOPER_INDEX];\r\n            if (tDeveloper != 0){\r\n                _takeDeveloper(rDeveloper, tDeveloper);\r\n            }\r\n        }\r\n        {\r\n            uint256 rLottery = rValues[LOTTERY_INDEX];\r\n            uint256 tLottery = tValues[LOTTERY_INDEX];\r\n            if (tLottery != 0){\r\n                _takeLottery(rLottery, tLottery);\r\n            }\r\n        }\r\n        {\r\n            uint256 rFee = rValues[TAX_INDEX];\r\n            uint256 tFee = tValues[TAX_INDEX];\r\n            if (tFee != 0){\r\n                _reflectFee(rFee, tFee);\r\n            }\r\n        }\r\n        uint256 tTransferAmount = tValues[TRANSFERAMOUNT_INDEX];\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient,  uint256 amount, uint256[ALLFEE_NUMBER] memory feeRates) private {\r\n        (uint256[6] memory rValues, uint256[6] memory tValues) = _getValues(amount, feeRates);\r\n        {\r\n            uint256 rAmount = rValues[AMOUNT_INDEX];\r\n            _tOwned[sender] = _tOwned[sender].sub(amount);\r\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        }\r\n        {\r\n            uint256 tTransferAmount = tValues[TRANSFERAMOUNT_INDEX];\r\n            uint256 rTransferAmount = rValues[TRANSFERAMOUNT_INDEX];\r\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        }\r\n\r\n        {\r\n            uint256 rReferReward = rValues[REFER_INDEX];\r\n            uint256 tReferReward = tValues[REFER_INDEX];\r\n            if (tReferReward != 0){\r\n                _takeReferRewards(recipient, rReferReward, tReferReward);\r\n            }\r\n        }\r\n        {\r\n            uint256 rDeveloper = rValues[DEVELOPER_INDEX];\r\n            uint256 tDeveloper = tValues[DEVELOPER_INDEX];\r\n            if (tDeveloper != 0){\r\n                _takeDeveloper(rDeveloper, tDeveloper);\r\n            }\r\n        }\r\n        {\r\n            uint256 rLottery = rValues[LOTTERY_INDEX];\r\n            uint256 tLottery = tValues[LOTTERY_INDEX];\r\n            if (tLottery != 0){\r\n                _takeLottery(rLottery, tLottery);\r\n            }\r\n        }\r\n        {\r\n            uint256 rFee = rValues[TAX_INDEX];\r\n            uint256 tFee = tValues[TAX_INDEX];\r\n            if (tFee != 0){\r\n                _reflectFee(rFee, tFee);\r\n            }\r\n        }\r\n\r\n        uint256 tTransferAmount = tValues[TRANSFERAMOUNT_INDEX];\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"developer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ReflectFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RegisterRefer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TakeDeveloper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TakeLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[4]\",\"name\":\"\",\"type\":\"address[4]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"name\":\"TakeReferRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLACKHOLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_developer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_developerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_extraFeeForNoRefer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_groupLeaderSearchDepth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lottery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lotteryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_numTokensToBeRefer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_referFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enable_blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"exluded\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasRefer\",\"type\":\"bool\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[6]\",\"name\":\"\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manage_blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"developer\",\"type\":\"address\"}],\"name\":\"setDeveloper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeper\",\"type\":\"address\"}],\"name\":\"setFeeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lottery\",\"type\":\"address\"}],\"name\":\"setLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryFee\",\"type\":\"uint256\"}],\"name\":\"setLotteryFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referFee\",\"type\":\"uint256\"}],\"name\":\"setReferFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"father\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SPAC", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000001e73c4b9b66bac56851567fa4cef7f54f9db7a900000000000000000000000001e73c4b9b66bac56851567fa4cef7f54f9db7a9", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0b6bc18f40198a083a8dd90c8464cfff3b6e6797b31074feec3d1d307b843992"}