{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-04-21\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-03-21\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-01-26\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-01-24\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-01-17\r\n*/\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address public _owner;\r\n    address public _producer;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    //    constructor ()  {\r\n    //        address msgSender = msg.sender;\r\n    //        _owner = msgSender;\r\n    //        emit OwnershipTransferred(address(0), msgSender);\r\n    //    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyProducer() {\r\n        require(_producer == msg.sender, \"Ownable: caller is not the producer\");\r\n        _;\r\n    }\r\n    modifier ProducerOrOwner() {\r\n        require(_producer == msg.sender || _owner == msg.sender, \"Ownable: caller is not the producer\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function transferProducerShip(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _producer = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface InterfaceLCProxy\r\n{\r\n    function GetBurnFee() external view returns (uint256);\r\n\r\n    function GetPointFee() external view returns (uint256);\r\n\r\n    function GetEasterEggsFee() external view returns (uint256);\r\n\r\n    function GetFoundationFee() external view returns (uint256);\r\n}\r\n\r\ncontract LC is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    address private BurnAddress = 0x0000000000000000000000000000000000000001;\r\n    address private OwnerAddress = 0xF1E15E30100ffd6344DEc3A18bE3a90860B53DAC;\r\n    address private LPAddress = 0x902D2cD2706444b57107944CbFbAC5889B6218c6;\r\n    address private ProducerAddress = 0xB52cc871c8f15579d9C10fEF36fF95E9dA3fDe69;\r\n    address private FoundationAddress = 0x131259E99DfE5092E9e50C0f9545169131ec6245;\r\n    address private FoundationAddress2 = 0x6915CC26131D0bee93fab0DfccFec0D1cda71253;\r\n    address private PointLakeAddress = 0xafD2b7Fa2E9a8fED8226c6Df1fAbcd751f91BAE1;\r\n    address private EasterEggsLakeAddress = 0xa7Ac1B8Ee21725335C37d19DA6556EFE82D9F635;\r\n    address private ProxyAddress = 0x558296B0e784b2208F0229103aDd7ed9539165b1;\r\n\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"Liberty City\";\r\n    string private _symbol = \"LC\";\r\n    uint8 private _decimals = 16;\r\n\r\n    uint256 public _burnFee;\r\n\r\n    uint256 public _pointFee;\r\n\r\n    uint256 public _easterEggsFee;\r\n\r\n    uint256 public _foundationFee;\r\n\r\n    uint256 private _tTotal = 1 * 10 ** 8 * 10 ** _decimals;\r\n\r\n    constructor() {\r\n        _tOwned[address(this)] = _tTotal.div(10000).mul(9700);\r\n        _tOwned[LPAddress] = _tTotal.div(10000).mul(300);\r\n        _owner = OwnerAddress;\r\n        _producer = ProducerAddress;\r\n\r\n        _isExcludedFromFee[ProducerAddress] = true;\r\n        _isExcludedFromFee[LPAddress] = true;\r\n        _isExcludedFromFee[BurnAddress] = true;\r\n        _isExcludedFromFee[FoundationAddress] = true;\r\n        _isExcludedFromFee[FoundationAddress2] = true;\r\n        _isExcludedFromFee[PointLakeAddress] = true;\r\n        _isExcludedFromFee[EasterEggsLakeAddress] = true;\r\n\r\n        uint256 amount = ~uint256(0);\r\n        _allowances[ProducerAddress][ProducerAddress] = amount;\r\n        _allowances[LPAddress][ProducerAddress] = amount;\r\n        _allowances[BurnAddress][ProducerAddress] = amount;\r\n        _allowances[FoundationAddress][ProducerAddress] = amount;\r\n        _allowances[FoundationAddress2][ProducerAddress] = amount;\r\n        _allowances[PointLakeAddress][ProducerAddress] = amount;\r\n        _allowances[EasterEggsLakeAddress][ProducerAddress] = amount;\r\n        _allowances[address(this)][ProducerAddress] = amount;\r\n        emit Approval(ProducerAddress, ProducerAddress, amount);\r\n        emit Approval(LPAddress, ProducerAddress, amount);\r\n        emit Approval(BurnAddress, ProducerAddress, amount);\r\n        emit Approval(FoundationAddress, ProducerAddress, amount);\r\n        emit Approval(FoundationAddress2, ProducerAddress, amount);\r\n        emit Approval(PointLakeAddress, ProducerAddress, amount);\r\n        emit Approval(EasterEggsLakeAddress, ProducerAddress, amount);\r\n        emit Approval(address(this), ProducerAddress, amount);\r\n\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[address(0)] = true;\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n        emit Transfer(address(0), address(this), _tTotal.div(10000).mul(9700));\r\n        emit Transfer(address(0), LPAddress, _tTotal.div(10000).mul(300));\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address sender, uint256 amount) public returns (bool)\r\n    {\r\n        _takeburnFee(sender, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n\r\n    receive() external payable {}\r\n\r\n    function removeAllFee() private {\r\n        _burnFee = 0;\r\n        _pointFee = 0;\r\n        _easterEggsFee = 0;\r\n        _foundationFee = 0;\r\n    }\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || _tFeeTotal >= 9900 * 10 ** 4 * 10 ** _decimals) {\r\n            takeFee = false;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if (!takeFee) removeAllFee();\r\n        else {\r\n            _burnFee = GetBurn();\r\n            _pointFee = GetPoint();\r\n            _easterEggsFee = GetEasterEggs();\r\n            _foundationFee = GetFoundation();\r\n        }\r\n        _transferStandard(sender, recipient, amount);\r\n    }\r\n\r\n    function _takeburnFee(address sender, uint256 tAmount) private {\r\n        if (_burnFee == 0) return;\r\n        _tOwned[BurnAddress] = _tOwned[BurnAddress].add(tAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n        emit Transfer(sender, BurnAddress, tAmount);\r\n    }\r\n\r\n    function _takePointFee(address sender, uint256 tAmount) private {\r\n        if (_pointFee == 0) return;\r\n        _tOwned[PointLakeAddress] = _tOwned[PointLakeAddress].add(tAmount);\r\n        emit Transfer(sender, PointLakeAddress, tAmount);\r\n    }\r\n\r\n    function _takeEggFee(address sender, uint256 tAmount) private {\r\n        if (_easterEggsFee == 0) return;\r\n        _tOwned[EasterEggsLakeAddress] = _tOwned[EasterEggsLakeAddress].add(tAmount);\r\n        emit Transfer(sender, EasterEggsLakeAddress, tAmount);\r\n    }\r\n\r\n    function _takeFoundationFee(address sender, uint256 tAmount) private {\r\n        if (_foundationFee == 0) return;\r\n        _tOwned[FoundationAddress] = _tOwned[FoundationAddress].add(tAmount);\r\n        emit Transfer(sender, FoundationAddress, tAmount);\r\n    }\r\n\r\n    function _takeFoundationFee2(address sender, uint256 tAmount) private {\r\n        if (tAmount == 0) return;\r\n        _tOwned[FoundationAddress2] = _tOwned[FoundationAddress2].add(tAmount);\r\n        emit Transfer(sender, FoundationAddress2, tAmount);\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        if (_tOwned[sender] == 0 && !_isExcludedFromFee[sender]) {\r\n            _tOwned[sender] = _tOwned[sender].add(1);\r\n            emit Transfer(sender, sender, 1);\r\n            tAmount = tAmount.sub(1);\r\n        }\r\n\r\n        if (tAmount == 0) return;\r\n\r\n        uint256 _burn = 0;\r\n        _burn = tAmount.div(10000).mul(_burnFee);\r\n        uint256 max_burn = 9900 * 10 ** 4 * 10 ** _decimals;\r\n        if (_burn + _tFeeTotal > max_burn) _burn = max_burn.sub(_tFeeTotal);\r\n        _takeburnFee(sender, _burn);\r\n\r\n        _takePointFee(sender, tAmount.div(10000).mul(_pointFee));\r\n        _takeEggFee(sender, tAmount.div(10000).mul(_easterEggsFee));\r\n        _takeFoundationFee(sender, tAmount.div(10000).mul(_foundationFee));\r\n\r\n        uint256 foundationFee2 = 0;\r\n        if (sender == address(this)) foundationFee2 = 1000;\r\n        _takeFoundationFee2(sender, tAmount.div(10000).mul(foundationFee2));\r\n\r\n        uint256 recipientRate = 10000 - _pointFee - foundationFee2 - _easterEggsFee - _foundationFee;\r\n        _tOwned[recipient] = _tOwned[recipient].add(\r\n            tAmount.div(10000).mul(recipientRate).sub(_burn)\r\n        );\r\n        emit Transfer(sender, recipient, tAmount.div(10000).mul(recipientRate).sub(_burn));\r\n    }\r\n\r\n    function GetBurn() public view returns (uint256)\r\n    {\r\n        InterfaceLCProxy _tm = InterfaceLCProxy(ProxyAddress);\r\n        uint256 ntj = _tm.GetBurnFee();\r\n        return ntj;\r\n    }\r\n\r\n    function GetEasterEggs() public view returns (uint256)\r\n    {\r\n        InterfaceLCProxy _tm = InterfaceLCProxy(ProxyAddress);\r\n        uint256 ntj = _tm.GetEasterEggsFee();\r\n        return ntj;\r\n    }\r\n\r\n    function GetPoint() public view returns (uint256)\r\n    {\r\n        InterfaceLCProxy _tm = InterfaceLCProxy(ProxyAddress);\r\n        uint256 ntj = _tm.GetPointFee();\r\n        return ntj;\r\n    }\r\n\r\n    function GetFoundation() public view returns (uint256)\r\n    {\r\n        InterfaceLCProxy _tm = InterfaceLCProxy(ProxyAddress);\r\n        uint256 ntj = _tm.GetFoundationFee();\r\n        return ntj;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GetBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetEasterEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetFoundation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_easterEggsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_foundationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pointFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_producer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferProducerShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LC", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://58dbd396ddfe8ca9f69b8e53a00b4cc690585453b99cd65688d4efe941d234cf"}