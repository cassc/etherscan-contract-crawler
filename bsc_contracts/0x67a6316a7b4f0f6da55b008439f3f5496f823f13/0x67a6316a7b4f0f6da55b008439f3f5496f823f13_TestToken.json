{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n         return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n     /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n  /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n\r\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n/*\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract TestToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    string private _name = 'HED TOKEN';\r\n    string private _symbol = 'HED';\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply = 8800000000 * 10**uint256(_decimals);\r\n    uint256 public  _burnTotalSupply = 8779000000 * 10**uint256(_decimals);\r\n    uint256 private _burnCompany = 1000000000 * 10**uint256(_decimals);\r\n    uint256 private _applyUnionAmount = 5000000 * 10**uint256(_decimals);\r\n   \r\n    uint256 public  _lockAmount=4687000000 * 10**uint256(_decimals);\r\n    mapping(address => bool) private whiteList;\r\n    mapping(address => bool) private tradeList;\r\n    bool private  _swapStatus=true;\r\n    uint256 private _maxbuyAmount=8800000000 * 10**uint256(_decimals);\r\n\r\n    mapping(address => uint256) private buyAmountMap;\r\n    //0.5%\r\n    uint256 private _fundFee = 5;\r\n    address private _fundAddress=0x4974EB669ddA2Ce4De6c85Dc6410A97b3249a5dd;\r\n\r\n    //0.5%\r\n    uint256 private _unionFee = 5;\r\n    address private _unionAddress=0xdeE62FdA4D3Bc82aCaa2002a19b8B3aB9D61765d;\r\n\r\n    //2%\r\n    uint256 private _teamFee = 20;\r\n    \r\n    //15%\r\n    uint256 private _oldSellBurnFee = 150;\r\n    uint256 private _sellBurnFee = 150;\r\n \r\n    //0.2%\r\n    uint256 private _buyWelfareFee = 2;\r\n    address private _welfareAddress=0xC9173afaef8d1534566Cfd99812017F2BE2fD8b5;\r\n\r\n    //6.8%\r\n    uint256 private _buyBurnFee = 68;\r\n\r\n    IPancakeRouter02 public  pancakeRouter02;\r\n    address public  pancakeV2Pair;\r\n    event SwapAndLiquify(uint256 tokensSwapped,uint256 usdtReceived,uint256 tokensIntoLiqudity);\r\n    constructor () {\r\n     pancakeRouter02 = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pancakeV2Pair = IPancakeFactory(pancakeRouter02.factory()).createPair(address(this), 0x55d398326f99059fF775485246999027B3197955);\r\n        whiteList[owner()] = true;\r\n        whiteList[address(this)] = true;\r\n        _balances[0xB8481DBe44D1828cC743ACc65FfcE17dD4212117] = _totalSupply;\r\n        emit Transfer(address(0), 0xB8481DBe44D1828cC743ACc65FfcE17dD4212117, _totalSupply);\r\n    }\r\n    receive() external payable {}\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n \r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n  \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender,_msgSender(), currentAllowance.sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n    function isWhite(address addr) public view returns (bool){\r\n        return whiteList[addr];\r\n    }\r\n\r\n    function setWhite(address addr) external onlyOwner returns (bool){\r\n        whiteList[addr] = true;\r\n        return true;\r\n    }\r\n    function unWhite(address addr) external onlyOwner returns (bool){\r\n        whiteList[addr] = false;\r\n        return true;\r\n    }\r\n\r\n    function setTradeWhite(address[] memory addrs) external onlyOwner returns (uint256){\r\n        uint256 i = 0;\r\n        while (i < addrs.length) {\r\n            tradeList[addrs[i]] = true;\r\n            i++;\r\n        }\r\n        return i;\r\n    }\r\n\r\n    function unTradeWhite(address addr) external onlyOwner returns (bool){\r\n        tradeList[addr] = false;\r\n        return true;\r\n    }\r\n\r\n    function setConfig(uint256 maxBuyAmount,bool swapStatus) external onlyOwner{\r\n        _swapStatus = swapStatus;\r\n        _maxbuyAmount = maxBuyAmount;\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        if(pancakeV2Pair==recipient||pancakeV2Pair==sender){\r\n           \r\n            uint256 realRecipientAmount=amount; \r\n            if(pancakeV2Pair==recipient){\r\n                if(!_swapStatus){\r\n                    require(tradeList[sender], \"ERC20: Swap not open\");\r\n                }\r\n                if(!whiteList[sender]){\r\n                        //\u8054\u5408\u521b\u59cb\u4eba0.5%\r\n                        uint256 unionAmount= amount.mul(_unionFee).div(1000);\r\n                        _balances[_unionAddress] = _balances[_unionAddress].add(unionAmount);\r\n                        realRecipientAmount=realRecipientAmount.sub(unionAmount);\r\n                        emit Transfer(sender, _unionAddress, unionAmount);\r\n\r\n                        //\u57fa\u91d1\u4f1a0.5%\r\n                        uint256 fundAmount= amount.mul(_fundFee).div(1000);\r\n                        _balances[_fundAddress] = _balances[_fundAddress].add(fundAmount);\r\n                        realRecipientAmount=realRecipientAmount.sub(fundAmount);\r\n                        emit Transfer(sender, _fundAddress, fundAmount);\r\n\r\n                        //\u56e2\u961f\u5956\u52b12%\r\n                        uint256 teamAmount= amount.mul(_teamFee).div(1000);\r\n                        realRecipientAmount=realRecipientAmount.sub(teamAmount);\r\n                        teamRelease(sender,sender,teamAmount);\r\n\r\n                        //\u9500\u6bc1\r\n                        uint256 burnAmount= getBurnAmount(amount.mul(_sellBurnFee).div(1000));\r\n                        if(burnAmount>0){\r\n                            _balances[address(0)] = _balances[address(0)].add(burnAmount);\r\n                            realRecipientAmount=realRecipientAmount.sub(burnAmount);\r\n                            emit Transfer(sender, address(0), burnAmount);\r\n                        }\r\n                }\r\n            }else{\r\n                uint256  buyAmount= buyAmountMap[recipient].add(amount);\r\n                require(buyAmount<=_maxbuyAmount, \"ERC20: amount max\");\r\n                if(!_swapStatus){\r\n                    require(tradeList[recipient], \"ERC20: Swap not open\");\r\n                }\r\n                if(!whiteList[recipient]){\r\n                        //\u8054\u5408\u521b\u59cb\u4eba0.5%\r\n                        uint256 unionAmount= amount.mul(_unionFee).div(1000);\r\n                        _balances[_unionAddress] = _balances[_unionAddress].add(unionAmount);\r\n                        realRecipientAmount=realRecipientAmount.sub(unionAmount);\r\n                        emit Transfer(sender, _unionAddress, unionAmount);\r\n\r\n                        //\u57fa\u91d1\u4f1a0.5%\r\n                        uint256 fundAmount= amount.mul(_fundFee).div(1000);\r\n                        _balances[_fundAddress] = _balances[_fundAddress].add(fundAmount);\r\n                        realRecipientAmount=realRecipientAmount.sub(fundAmount);\r\n                        emit Transfer(sender, _fundAddress, fundAmount);\r\n\r\n                        //\u56e2\u961f\u5956\u52b12%\r\n                        uint256 teamAmount= amount.mul(_teamFee).div(1000);\r\n                        realRecipientAmount=realRecipientAmount.sub(teamAmount);\r\n                        teamRelease(sender,recipient,teamAmount);\r\n\r\n                        //\u516c\u76ca0.2%\r\n                        uint256 welfareAmount= amount.mul(_buyWelfareFee).div(1000);\r\n                         _balances[_welfareAddress] = _balances[_welfareAddress].add(welfareAmount);\r\n                        realRecipientAmount=realRecipientAmount.sub(welfareAmount);\r\n                        emit Transfer(sender, _welfareAddress, welfareAmount);\r\n                      \r\n                        //\u9500\u6bc16.8%\r\n                        uint256 burnAmount= getBurnAmount(amount.mul(_buyBurnFee).div(1000));\r\n                        if(burnAmount>0){\r\n                            _balances[address(0)] = _balances[address(0)].add(burnAmount);\r\n                            realRecipientAmount=realRecipientAmount.sub(burnAmount);\r\n                            emit Transfer(sender, address(0), burnAmount);\r\n                        }\r\n                }\r\n                buyAmountMap[recipient]=buyAmount;\r\n                //\u9501\u4ed3\u91ca\u653e\r\n                _swapLock(recipient,amount);\r\n            }\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(realRecipientAmount);\r\n            emit Transfer(sender, recipient, realRecipientAmount);\r\n        }else{\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function teamRelease(address sender,address account, uint256 awardAmount) internal {\r\n        uint256 era=1;\r\n        uint256 teamAmount=awardAmount;\r\n        while (era<=5){\r\n            address parentAddr= relationMap[account];\r\n            if(parentAddr!=address(0)){\r\n                awardAmount=awardAmount.mul(50).div(100);\r\n                _balances[parentAddr] = _balances[parentAddr].add(awardAmount);\r\n                teamAmount=teamAmount.sub(awardAmount);\r\n                account=parentAddr;\r\n                emit Transfer(sender, parentAddr, awardAmount);\r\n            }\r\n            era=era.add(1);\r\n        }\r\n        _balances[address(this)] = _balances[address(this)].add(teamAmount);\r\n        emit Transfer(sender, address(this), teamAmount);\r\n    }\r\n\r\n    mapping (address => uint256) public  swapLockMap;\r\n\r\n    function handSwapLock(address[] memory addrs, uint256[] memory values) public  onlyOwner returns (uint256) {\r\n        uint256 i = 0;\r\n        while (i < addrs.length) {\r\n            uint sendAmount = values.length == 1 ? values[0] : values[i];\r\n            if(addrs[i] != address(0) && sendAmount > 0){\r\n                swapLockMap[addrs[i]]=swapLockMap[addrs[i]].add(sendAmount);\r\n                _lockAmount=_lockAmount.sub(sendAmount);\r\n            }\r\n            i++;\r\n        }\r\n        return i;\r\n    }\r\n\r\n    function _swapLock(address account, uint256 amount) internal {\r\n        uint256 releaseAmount = amount.mul(12).div(100);\r\n        if(swapLockMap[account]>0){\r\n            if(swapLockMap[account]<=releaseAmount){\r\n                releaseAmount=swapLockMap[account];\r\n            }\r\n            _balances[address(this)] = _balances[address(this)].sub(releaseAmount);\r\n            _balances[account] = _balances[account].add(releaseAmount);\r\n            swapLockMap[account]=swapLockMap[account].sub(releaseAmount);\r\n            emit Transfer(address(this), account, releaseAmount);\r\n        }\r\n        if(_lockAmount>0){\r\n            uint256 awardAmount = amount.mul(10).div(100);\r\n            if(_lockAmount<=awardAmount){\r\n                awardAmount=_lockAmount;\r\n            }\r\n            swapLockMap[account]=swapLockMap[account].add(awardAmount);\r\n            _lockAmount=_lockAmount.sub(awardAmount);\r\n        }\r\n        releaseUnion(account,amount);\r\n    }\r\n\r\n     function releaseUnion(address addr,uint256 amount) internal {\r\n        address parentAddr= relationMap[addr];\r\n        while (parentAddr!=address(0)){\r\n            Union  storage unionDetail =  unionMap[parentAddr];\r\n            if(unionDetail.lockDate>0){\r\n                if(unionDetail.amount>0){\r\n                    uint256 releaseAmount = amount.mul(10).div(100);\r\n                    if(unionDetail.amount<=releaseAmount){\r\n                        releaseAmount=unionDetail.amount;\r\n                    }\r\n                    _balances[address(this)] = _balances[address(this)].sub(releaseAmount);\r\n                    _balances[parentAddr] = _balances[parentAddr].add(releaseAmount);\r\n                    unionDetail.amount=unionDetail.amount.sub(releaseAmount);\r\n                    emit Transfer(address(this), parentAddr, releaseAmount);\r\n                }\r\n                break;\r\n            }else {\r\n                parentAddr= relationMap[parentAddr];\r\n            }\r\n         }\r\n    }\r\n\r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n  \r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n        amount= getBurnAmount(amount);\r\n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n        _balances[address(0)] = _balances[address(0)].add(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function getBurnAmount(uint256 amount) internal returns (uint256){\r\n        if(_burnTotalSupply>0){   \r\n            if(_burnTotalSupply<=amount){\r\n                amount=_burnTotalSupply;\r\n                _buyBurnFee=0;\r\n                _sellBurnFee=0;\r\n            }\r\n            _burnTotalSupply=_burnTotalSupply.sub(amount);\r\n            uint256  num= (_balances[address(0)].add(amount)).div(_burnCompany).mul(10);\r\n            uint256 rate= _oldSellBurnFee.sub(num);\r\n            if(rate>0&&rate!=_sellBurnFee){\r\n                _sellBurnFee=rate;\r\n            }\r\n            return amount;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    mapping (address => address) private   relationMap;\r\n\r\n    mapping (address => uint256) private  inviteCountMap;\r\n\r\n\r\n    function addRelation(address parentAddr) external  returns (bool){\r\n        require(relationMap[_msgSender()] == address(0), \"Relation: address existence relation \");\r\n        require(_msgSender() != parentAddr, \"Relation: address error\");\r\n        require(inviteCountMap[_msgSender()] ==0, \"Relation: parent  existence progeny\");\r\n        if(parentAddr!=0x18EbDC5bF386c2222Cc625f3e36C4f559D3e898B){\r\n            require(relationMap[parentAddr] != address(0), \"Relation: address existence relation \");\r\n        }\r\n        relationMap[_msgSender()]=parentAddr;\r\n        inviteCountMap[parentAddr]=inviteCountMap[parentAddr].add(1);\r\n        return true;\r\n    }\r\n\r\n    function getRelation(address addr) external view returns (address,uint256){\r\n        return  (relationMap[addr],inviteCountMap[addr]);\r\n    }\r\n\r\n    struct Union {\r\n        uint256 amount;\r\n        uint256 lockDate;\r\n        uint256 endDate;\r\n    }\r\n\r\n    mapping (address => Union) private unionMap;\r\n\r\n    uint256  private  unionCount;\r\n\r\n    function applyUnion() external  returns (bool){\r\n        Union  storage unionDetail =unionMap[_msgSender()];\r\n        require(unionCount<331, \"ApplyUnion: Union not num\");\r\n        require(unionDetail.lockDate== 0, \"ApplyUnion: address existence\");\r\n        _balances[_msgSender()] = _balances[_msgSender()].sub(_applyUnionAmount, \"BEP20: applyUnion amount exceeds balance\");\r\n        _balances[address(this)] = _balances[address(this)].add(_applyUnionAmount);\r\n        uint256 totalAmount=_applyUnionAmount.add(_applyUnionAmount.mul(20).div(100));\r\n        unionMap[_msgSender()]=Union(totalAmount,block.timestamp,block.timestamp+ 180 days);\r\n        unionCount=unionCount.add(1);\r\n        emit Transfer(_msgSender(), address(this), _applyUnionAmount);\r\n        return true;\r\n    }\r\n\r\n    function setUnionEndDate(address  addr,uint256 endDate) external onlyOwner returns (bool) {\r\n        Union  storage unionDetail =unionMap[addr];\r\n        require(unionDetail.lockDate> 0, \"ApplyUnion: address existence\");\r\n        unionDetail.endDate=endDate;\r\n        return true;\r\n    }\r\n\r\n    function UnUnion() external  returns (uint256){\r\n        Union  storage unionDetail =unionMap[_msgSender()];\r\n        uint256 amount=0;\r\n        if(unionDetail.endDate<=block.timestamp&&unionDetail.amount>0){\r\n            amount=unionDetail.amount;\r\n            unionDetail.amount=0;\r\n            _balances[address(this)] = _balances[address(this)].sub(amount, \"BEP20: applyUnion amount exceeds balance\");\r\n            _balances[_msgSender()] = _balances[_msgSender()].add(amount);\r\n            emit Transfer(address(this), _msgSender(), amount);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function getUnion(address addr) external view returns (Union memory,uint256){\r\n        return (unionMap[addr],unionCount);\r\n    }\r\n\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UnUnion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parentAddr\",\"type\":\"address\"}],\"name\":\"addRelation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyUnion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getRelation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUnion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"internalType\":\"struct TestToken.Union\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"handSwapLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter02\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"swapStatus\",\"type\":\"bool\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"setTradeWhite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"setUnionEndDate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setWhite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapLockMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unTradeWhite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unWhite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TestToken", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5784ff94f2a8e35ce865c3f5ccef3b163880ab1680cb46b3d18ae1653483ac53"}