{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IDEXRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MI\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDEXRouter {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) external pure returns (uint amountB);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountOut);\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/MoonLabsVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n * \u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557    \u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n * \u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551    \u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\n * \u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551    \u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n * \u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551    \u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\\n * \u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\\n * \u255a\u2550\u255d     \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n *\\n * Moon Labs LLC reserves all rights on this code.\\n * You may not, except otherwise with prior permission and express written consent by Moon Labs LLC, copy, download, print, extract, exploit,\\n * adapt, edit, modify, republish, reproduce, rebroadcast, duplicate, distribute, or publicly display any of the content, information, or material\\n * on this smart contract for non-personal or commercial purposes, except for any other use as permitted by the applicable copyright law.\\n *\\n * This is for ERC20 tokens and should NOT be used for Uniswap LP tokens or ANY other token protocol.\\n *\\n * Website: https://www.moonlabs.site/\\n */\\n\\n/**\\n * @title A token vesting contract for NON-Rebasing ERC20 tokens\\n * @author Moon Labs LLC\\n * @notice This contract's intended purpose is for token owners to create ERC20 token locks for future or current holders that are immutable by the\\n * lock creator. Lock creators may choose to create standard or linear locks. Tokens locked in this contract remain locked until their respective\\n * unlock date without ANY exceptions. This contract is not suited to handle rebasing tokens or tokens in which a wallet's supply changes based on\\n * total supply.\\n */\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./IDEXRouter.sol\\\";\\n\\ninterface IMoonLabsReferral {\\n    function checkIfActive(string calldata code) external view returns (bool);\\n\\n    function getAddressByCode(\\n        string memory code\\n    ) external view returns (address);\\n\\n    function addRewardsEarned(string calldata code, uint commission) external;\\n}\\n\\ninterface IMoonLabsWhitelist {\\n    function getIsWhitelisted(\\n        address _address,\\n        bool pair\\n    ) external view returns (bool);\\n}\\n\\ncontract MoonLabsVesting is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    function initialize(\\n        address _mlabToken,\\n        address _feeCollector,\\n        address referralAddress,\\n        address whitelistAddress,\\n        address routerAddress\\n    ) public initializer {\\n        __Ownable_init();\\n        mlabToken = IERC20Upgradeable(_mlabToken);\\n        feeCollector = _feeCollector;\\n        referralContract = IMoonLabsReferral(referralAddress);\\n        whitelistContract = IMoonLabsWhitelist(whitelistAddress);\\n        routerContract = IDEXRouter(routerAddress);\\n        ethLockPrice = .005 ether;\\n        burnThreshold = .25 ether;\\n        codeDiscount = 10;\\n        burnPercent = 30;\\n        percentLockPrice = 30;\\n        mlabDiscountPercent = 20;\\n        nonce = 0;\\n    }\\n\\n    /*|| === STATE VARIABLES === ||*/\\n    uint public ethLockPrice; /// Price in WEI for each vesting instance when paying for lock with ETH\\n    uint public burnThreshold; /// ETH in WEI when mlabToken should be bought and sent to DEAD address\\n    uint public burnMeter; /// Current ETH in WEI for buying and burning mlabToken\\n    address public feeCollector; /// Fee collection address for paying with token percent\\n    uint64 public nonce; /// Unique lock identifier\\n    uint8 public codeDiscount; /// Discount in the percentage applied to the customer when using referral code, represented in 10s\\n    uint8 public burnPercent; /// Percent of each transaction sent to burnMeter, represented in 10s\\n    uint8 public mlabDiscountPercent; /// Percent discount of MLAB pruchases\\n    uint16 public percentLockPrice; /// Percent of deposited tokens taken for a lock that is paid for using tokens, represented in 10000s\\n    IERC20Upgradeable public mlabToken; /// Native Moon Labs token\\n    IDEXRouter public routerContract; /// Uniswap router\\n    IMoonLabsReferral public referralContract; /// Moon Labs referral contract\\n    IMoonLabsWhitelist public whitelistContract; /// Moon Labs whitelist contract\\n\\n    /*|| === STRUCTS VARIABLES === ||*/\\n    struct VestingInstance {\\n        address tokenAddress; /// Address of locked token\\n        address withdrawalAddress; /// Withdrawal address\\n        uint depositAmount; /// Total deposit amount\\n        uint withdrawnAmount; /// Total withdrawn amount\\n        uint64 startDate; /// Date when tokens start to unlock, is Linear lock if !=0.\\n        uint64 endDate; /// Date when all tokens are fully unlocked\\n    }\\n\\n    struct LockParams {\\n        uint depositAmount;\\n        uint64 startDate;\\n        uint64 endDate;\\n        address withdrawalAddress;\\n    }\\n\\n    /*|| === MAPPINGS === ||*/\\n    mapping(address => uint64[]) private withdrawalToLock; /// Withdrawal address to array of locks\\n    mapping(address => uint64[]) private tokenToLock; /// Token address to array of locks\\n    mapping(uint64 => VestingInstance) private vestingInstance; /// Nonce to vesting instance\\n\\n    /*|| === EVENTS === ||*/\\n    event LockCreated(\\n        address creator,\\n        address token,\\n        uint64 numOfLocks,\\n        uint64 nonce\\n    );\\n    event TokensWithdrawn(address owner, uint amount, uint64 nonce);\\n    event LockTransferred(address from, address to, uint64 nonce);\\n    event TokensBurned(uint amount);\\n\\n    /*|| === EXTERNAL FUNCTIONS === ||*/\\n    /**\\n     * @notice Create one or multiple lock instances for a single token. Fees are in the form of MLAB.\\n     * @param tokenAddress Contract address of the erc20 token\\n     * @param locks array of LockParams struct(s) containing:\\n     *    ownerAddress The address of the owner wallet\\n     *    withdrawalAddress The address of the withdrawer\\n     *    depositAmount Number of tokens in the lock instance\\n     *    startDate Date when tokens start to unlock, is a Linear lock if !=0.\\n     *    endDate Date when all tokens are fully unlocked\\n     * @dev Since fees are not paid for in ETH, no ETH is added to the burn meter. This function supports tokens with a transfer tax, although not recommended due to potential customer confusion\\n     */\\n    function createLockMLAB(\\n        address tokenAddress,\\n        LockParams[] calldata locks\\n    ) external {\\n        /// Calculate total deposit\\n        uint totalDeposited = _calculateTotalDeposited(locks);\\n\\n        /// Get mlab fee\\n        _buyWithMLAB(locks.length * ethLockPrice);\\n\\n        /// Check for adequate supply in sender wallet\\n        require(\\n            totalDeposited <=\\n                IERC20Upgradeable(tokenAddress).balanceOf(msg.sender),\\n            \\\"Token balance\\\"\\n        );\\n\\n        /// Transfer tokens to contract and get amount sent\\n        uint amountSent = _transferAndCalculate(tokenAddress, totalDeposited);\\n\\n        /// Create the lock instances\\n        _createLocks(tokenAddress, locks, amountSent, totalDeposited);\\n\\n        emit LockCreated(\\n            msg.sender,\\n            tokenAddress,\\n            uint64(locks.length),\\n            nonce - 1\\n        );\\n    }\\n\\n    /**\\n     * @notice Create one or multiple vesting instances for a single token. Fees are in the form of % of the token deposited.\\n     * @param tokenAddress Contract address of the erc20 token\\n     * @param locks array of LockParams struct(s) containing:\\n     *    withdrawalAddress The address of the receiving wallet\\n     *    depositAmount Number of tokens in the vesting instance\\n     *    startDate Date when tokens start to unlock, is Linear lock if !=0.\\n     *    endDate Date when all tokens are fully unlocked\\n     * @dev Since fees are not paid for in ETH, no ETH is added to the burn meter. This function supports tokens with a transfer tax, although not recommended due to potential customer confusion\\n     */\\n    function createLockPercent(\\n        address tokenAddress,\\n        LockParams[] calldata locks\\n    ) external {\\n        /// Calculate total deposit\\n        uint totalDeposited = _calculateTotalDeposited(locks);\\n\\n        /// Calculate token fee based off total token deposit\\n        uint tokenFee = MathUpgradeable.mulDiv(\\n            totalDeposited,\\n            percentLockPrice,\\n            10000\\n        );\\n\\n        /// Check for adequate supply in sender wallet\\n        require(\\n            (totalDeposited + tokenFee) <=\\n                IERC20Upgradeable(tokenAddress).balanceOf(msg.sender),\\n            \\\"Token balance\\\"\\n        );\\n\\n        /// Transfer tokens to contract and get amount sent\\n        uint amountSent = _transferAndCalculateWithFee(\\n            tokenAddress,\\n            totalDeposited,\\n            tokenFee\\n        );\\n\\n        _createLocks(tokenAddress, locks, amountSent, totalDeposited);\\n\\n        /// Transfer token fees to the collector address\\n        _transferTokensTo(tokenAddress, feeCollector, tokenFee);\\n\\n        emit LockCreated(\\n            msg.sender,\\n            tokenAddress,\\n            uint64(locks.length),\\n            nonce - 1\\n        );\\n    }\\n\\n    /**\\n     * @notice Create one or multiple vesting instances for a single token. If token is whitelisted then can be called with no value. Fees are in ETH.\\n     * @param tokenAddress Contract address of the erc20 token\\n     * @param locks array of LockParams struct(s) containing:\\n     *    withdrawalAddress The address of the receiving wallet\\n     *    depositAmount Number of tokens in the vesting instance\\n     *    startDate Date when tokens start to unlock, is Linear lock if !=0.\\n     *    endDate Date when all tokens are fully unlocked\\n     * @dev This function supports tokens with a transfer tax, although not recommended due to potential customer confusion\\n     */\\n    function createLockEth(\\n        address tokenAddress,\\n        LockParams[] calldata locks\\n    ) external payable {\\n        /// If not whitelisted then check for correct ETH value\\n        if (!whitelistContract.getIsWhitelisted(tokenAddress, false)) {\\n            require(\\n                msg.value == ethLockPrice * locks.length,\\n                \\\"Incorrect price\\\"\\n            );\\n        } else {\\n            require(msg.value == 0, \\\"Incorrect price\\\");\\n        }\\n\\n        /// Calculate total deposit\\n        uint totalDeposited = _calculateTotalDeposited(locks);\\n\\n        /// Check for adequate supply in sender wallet\\n        require(\\n            totalDeposited <=\\n                IERC20Upgradeable(tokenAddress).balanceOf(msg.sender),\\n            \\\"Token balance\\\"\\n        );\\n\\n        /// Transfer tokens to contract and get amount sent\\n        uint amountSent = _transferAndCalculate(tokenAddress, totalDeposited);\\n\\n        _createLocks(tokenAddress, locks, amountSent, totalDeposited);\\n\\n        /// Add to burn amount in ETH to burn meter\\n        _handleBurns(msg.value);\\n\\n        emit LockCreated(\\n            msg.sender,\\n            tokenAddress,\\n            uint64(locks.length),\\n            nonce - 1\\n        );\\n    }\\n\\n    /**\\n     * @notice Create one or multiple vesting instances for a single token using a referral code. Fees are in ETH.\\n     * @param tokenAddress Contract address of the erc20 token\\n     * @param locks array of LockParams struct(s) containing:\\n     *    withdrawalAddress The address of the receiving wallet\\n     *    depositAmount Number of tokens in the vesting instance\\n     *    startDate Date when tokens start to unlock, is Linear lock if !=0.\\n     *    endDate Date when all tokens are fully unlocked\\n     * @param code Referral code used for discount\\n     * @dev This function supports tokens with a transfer tax, although not recommended due to potential customer confusion\\n     */\\n    function createLockWithCodeEth(\\n        address tokenAddress,\\n        LockParams[] calldata locks,\\n        string calldata code\\n    ) external payable {\\n        /// Check for referral valid code\\n        require(referralContract.checkIfActive(code), \\\"Invalid code\\\");\\n\\n        /// Calculate referral commission\\n        uint commission = (ethLockPrice * codeDiscount * locks.length) / 100;\\n\\n        /// Check for correct message value\\n        require(\\n            msg.value == (ethLockPrice * locks.length - commission),\\n            \\\"Incorrect price\\\"\\n        );\\n\\n        /// Calculate total deposit\\n        uint totalDeposited = _calculateTotalDeposited(locks);\\n\\n        /// Check for adequate supply in sender wallet\\n        require(\\n            totalDeposited <=\\n                IERC20Upgradeable(tokenAddress).balanceOf(msg.sender),\\n            \\\"Token balance\\\"\\n        );\\n\\n        /// Transfer tokens to contract and get amount sent\\n        uint amountSent = _transferAndCalculate(tokenAddress, totalDeposited);\\n\\n        _createLocks(tokenAddress, locks, amountSent, totalDeposited);\\n\\n        /// Add to burn amount in ETH to burn meter\\n        _handleBurns(msg.value);\\n\\n        /// Distribute commission\\n        _distributeCommission(code, commission);\\n\\n        emit LockCreated(\\n            msg.sender,\\n            tokenAddress,\\n            uint64(locks.length),\\n            nonce - 1\\n        );\\n    }\\n\\n    /**\\n     * @notice Claim specified number of unlocked tokens. Will delete the lock if all tokens are withdrawn.\\n     * @param _nonce Vesting instance id of the targeted lock\\n     * @param amount Number of tokens attempting to be withdrawn\\n     */\\n    function withdrawUnlockedTokens(uint64 _nonce, uint amount) external {\\n        /// Check if the amount attempting to be withdrawn is valid\\n        require(amount <= getClaimableTokens(_nonce), \\\"Withdraw balance\\\");\\n        /// Revert 0 withdraw\\n        require(amount > 0, \\\"Withdrawn min\\\");\\n        /// Check that sender is the withdraw owner of the lock\\n        require(\\n            msg.sender == vestingInstance[_nonce].withdrawalAddress,\\n            \\\"Ownership\\\"\\n        );\\n\\n        /// Increment amount withdrawn by the amount being withdrawn\\n        vestingInstance[_nonce].withdrawnAmount += amount;\\n\\n        /// Transfer tokens from the contract to the recipient\\n        _transferTokensTo(\\n            vestingInstance[_nonce].tokenAddress,\\n            msg.sender,\\n            amount\\n        );\\n\\n        /// Delete vesting instance if withdrawn amount reaches deposit amount\\n        if (\\n            vestingInstance[_nonce].withdrawnAmount >=\\n            vestingInstance[_nonce].depositAmount\\n        ) _deleteVestingInstance(_nonce);\\n\\n        emit TokensWithdrawn(msg.sender, amount, _nonce);\\n    }\\n\\n    /**\\n     * @notice Transfer withdraw ownership of vesting instance, only callable by withdraw owner\\n     * @param _nonce ID of desired vesting instance\\n     * @param _address Address of new withdrawal address\\n     */\\n    function transferVestingOwnership(\\n        uint64 _nonce,\\n        address _address\\n    ) external {\\n        require(_address != address(0), \\\"Zero address\\\");\\n        /// Check that sender is the withdraw owner of the lock\\n        require(\\n            vestingInstance[_nonce].withdrawalAddress == msg.sender,\\n            \\\"Ownership\\\"\\n        );\\n        /// Revert same transfer\\n        require(_address != msg.sender, \\\"Same transfer\\\");\\n\\n        /// Delete mapping from the old owner to nonce of vesting instance and pop\\n        uint64[] storage withdrawArray = withdrawalToLock[msg.sender];\\n        for (uint64 i = 0; i < withdrawArray.length; i++) {\\n            if (withdrawArray[i] == _nonce) {\\n                withdrawArray[i] = withdrawArray[withdrawArray.length - 1];\\n                withdrawArray.pop();\\n                break;\\n            }\\n        }\\n\\n        /// Change withdraw owner in vesting instance to the new owner\\n        vestingInstance[_nonce].withdrawalAddress = _address;\\n\\n        /// Map nonce of transferred lock to the new owner\\n        withdrawalToLock[_address].push(_nonce);\\n\\n        emit LockTransferred(msg.sender, _address, _nonce);\\n    }\\n\\n    /**\\n     * @notice Claim ETH in contract. Owner only function.\\n     * @dev Excludes eth in the burn meter.\\n     */\\n    function claimETH() external onlyOwner {\\n        require(burnMeter <= address(this).balance, \\\"Negative widthdraw\\\");\\n        uint amount = address(this).balance - burnMeter;\\n        (bool sent, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /**\\n     * @notice Set the fee collection address. Owner only function.\\n     * @param _feeCollector Address of the fee collector\\n     */\\n    function setFeeCollector(address _feeCollector) external onlyOwner {\\n        require(_feeCollector != address(0), \\\"Zero Address\\\");\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Set the Uniswap router address. Owner only function.\\n     * @param _routerAddress Address of uniswap router\\n     */\\n    function setRouter(address _routerAddress) external onlyOwner {\\n        require(_routerAddress != address(0), \\\"Zero Address\\\");\\n        routerContract = IDEXRouter(_routerAddress);\\n    }\\n\\n    /**\\n     * @notice Set the referral contract address. Owner only function.\\n     * @param _referralAddress Address of Moon Labs referral address\\n     */\\n    function setReferralContract(address _referralAddress) external onlyOwner {\\n        require(_referralAddress != address(0), \\\"Zero Address\\\");\\n        referralContract = IMoonLabsReferral(_referralAddress);\\n    }\\n\\n    /**\\n     * @notice Set the whitelist contract address. Owner only function.\\n     * @param _whitelistAddress Address of Moon Labs whitelist address\\n     */\\n    function setWhitelistContract(\\n        address _whitelistAddress\\n    ) external onlyOwner {\\n        require(_whitelistAddress != address(0), \\\"Zero Address\\\");\\n        whitelistContract = IMoonLabsWhitelist(_whitelistAddress);\\n    }\\n\\n    /**\\n     * @notice Set the burn threshold in WEI. Owner only function.\\n     * @param _burnThreshold Amount of ETH in WEI\\n     */\\n    function setBurnThreshold(uint _burnThreshold) external onlyOwner {\\n        burnThreshold = _burnThreshold;\\n    }\\n\\n    /**\\n     * @notice Set the price for a single vesting instance in WEI. Owner only function.\\n     * @param _ethLockPrice Amount of ETH in WEI\\n     */\\n    function setLockPrice(uint _ethLockPrice) external onlyOwner {\\n        ethLockPrice = _ethLockPrice;\\n    }\\n\\n    /**\\n     * @notice Set the percentage of ETH per lock discounted on code use. Owner only function.\\n     * @param _codeDiscount Percentage represented in 10s\\n     */\\n    function setCodeDiscount(uint8 _codeDiscount) external onlyOwner {\\n        require(_codeDiscount < 100, \\\"Percentage ceiling\\\");\\n        codeDiscount = _codeDiscount;\\n    }\\n\\n    /**\\n     * @notice Set the Moon Labs native token address. Owner only function.\\n     * @param _mlabToken native moon labs token\\n     */\\n    function setMlabToken(address _mlabToken) external onlyOwner {\\n        require(_mlabToken != address(0), \\\"Zero Address\\\");\\n        mlabToken = IERC20Upgradeable(_mlabToken);\\n    }\\n\\n    /**\\n     * @notice Set the percentage of MLAB discounted per lock. Owner only function.\\n     * @param _mlabDiscountPercent Percentage represented in 10s\\n     */\\n    function setMlabDiscountPercent(\\n        uint8 _mlabDiscountPercent\\n    ) external onlyOwner {\\n        require(_mlabDiscountPercent < 100, \\\"Percentage ceiling\\\");\\n        mlabDiscountPercent = _mlabDiscountPercent;\\n    }\\n\\n    /**\\n     * @notice Set percentage of ETH per lock sent to the burn meter. Owner only function.\\n     * @param _burnPercent Percentage represented in 10s\\n     */\\n    function setBurnPercent(uint8 _burnPercent) external onlyOwner {\\n        require(_burnPercent <= 100, \\\"Max percent\\\");\\n        burnPercent = _burnPercent;\\n    }\\n\\n    /**\\n     * @notice Set the percent of deposited tokens taken for a lock that is paid for using tokens. Owner only function.\\n     * @param _percentLockPrice Percentage represented in 10000s\\n     */\\n    function setPercentLockPrice(uint16 _percentLockPrice) external onlyOwner {\\n        require(_percentLockPrice <= 10000, \\\"Max percent\\\");\\n        percentLockPrice = _percentLockPrice;\\n    }\\n\\n    /**\\n     * @notice Retrieve an array of vesting IDs tied to a single withdrawal address\\n     * @param withdrawalAddress address of desired withdraw wallet\\n     * @return Array of vesting instance IDs\\n     */\\n    function getNonceFromWithdrawalAddress(\\n        address withdrawalAddress\\n    ) external view returns (uint64[] memory) {\\n        return withdrawalToLock[withdrawalAddress];\\n    }\\n\\n    /**\\n     * @notice Retrieve an array of vesting IDs tied to a single token address\\n     * @param tokenAddress token address of desired ERC20 token\\n     * @return Array of vesting instance IDs\\n     */\\n    function getNonceFromTokenAddress(\\n        address tokenAddress\\n    ) external view returns (uint64[] memory) {\\n        return tokenToLock[tokenAddress];\\n    }\\n\\n    /**\\n     * @notice Retrieve information of a single vesting instance\\n     * @param _nonce ID of desired vesting instance\\n     * @return token address, withdrawal address, deposit amount, withdrawn amount, start date, end date\\n     */\\n    function getInstance(\\n        uint64 _nonce\\n    ) external view returns (address, address, uint, uint, uint64, uint64) {\\n        return (\\n            vestingInstance[_nonce].tokenAddress,\\n            vestingInstance[_nonce].withdrawalAddress,\\n            vestingInstance[_nonce].depositAmount,\\n            vestingInstance[_nonce].withdrawnAmount,\\n            vestingInstance[_nonce].startDate,\\n            vestingInstance[_nonce].endDate\\n        );\\n    }\\n\\n    /*|| === PUBLIC FUNCTIONS === ||*/\\n    /**\\n     * @notice Fetches price of mlab to WETH\\n     * @param amountInEth amount in ether\\n     */\\n    function getMLABFee(uint amountInEth) public view returns (uint) {\\n        ///  Get price quote via uniswap router\\n        address[] memory path = new address[](2);\\n        path[0] = routerContract.WETH();\\n        path[1] = address(mlabToken);\\n        uint[] memory amountOuts = routerContract.getAmountsOut(\\n            amountInEth,\\n            path\\n        );\\n        return\\n            MathUpgradeable.mulDiv(\\n                amountOuts[1],\\n                (100 - mlabDiscountPercent),\\n                100\\n            );\\n    }\\n\\n    /**\\n     * @notice Retrieve unlocked tokens for a vesting instance\\n     * @param _nonce ID of desired vesting instance\\n     * @return Number of unlocked tokens\\n     */\\n    function getClaimableTokens(uint64 _nonce) public view returns (uint) {\\n        uint withdrawnAmount = vestingInstance[_nonce].withdrawnAmount;\\n        uint depositAmount = vestingInstance[_nonce].depositAmount;\\n        uint64 endDate = vestingInstance[_nonce].endDate;\\n        uint64 startDate = vestingInstance[_nonce].startDate;\\n\\n        /// Check if the token balance is 0\\n        if (withdrawnAmount >= depositAmount) return 0;\\n\\n        /// Check if the lock is a normal lock\\n        if (startDate == 0)\\n            return\\n                endDate <= block.timestamp\\n                    ? depositAmount - withdrawnAmount\\n                    : 0;\\n\\n        /// If none of the above then the token is a linear lock\\n        return _calculateLinearWithdraw(_nonce);\\n    }\\n\\n    /*|| === PRIVATE FUNCTIONS === ||*/\\n    /**\\n     * @notice Private function purchases with mlab\\n     */\\n    function _buyWithMLAB(uint amountInEth) private {\\n        /// Fee in MLAB\\n        uint mlabFee = getMLABFee(amountInEth);\\n        /// Check for adequate supply in sender wallet\\n        require(mlabFee <= mlabToken.balanceOf(msg.sender), \\\"MLAB balance\\\");\\n\\n        /// Transfer tokens from sender to fee collector\\n        mlabToken.safeTransferFrom(msg.sender, feeCollector, mlabFee);\\n    }\\n\\n    /**\\n     * @notice Create single or multiple lock instances, maps nonce to lock instance, token address to nonce, owner address to nonce. Checks for valid\\n     * start date, end date, and deposit amount.\\n     * @param tokenAddress ID of desired lock instance\\n     * @param amountSent actual amount of tokens sent to the smart contract\\n     * @param totalDeposited hypothetical amount of tokens sent to the smart contract\\n     * @param locks array of LockParams struct(s) containing:\\n     *    withdrawalAddress The address of the withdrawer\\n     *    depositAmount Number of tokens in the lock instance\\n     *    startDate Date when tokens start to unlock, is a Linear lock if !=0.\\n     *    endDate Date when all tokens are fully unlocked\\n     */\\n    function _createLocks(\\n        address tokenAddress,\\n        LockParams[] calldata locks,\\n        uint amountSent,\\n        uint totalDeposited\\n    ) private {\\n        uint64 _nonce = nonce;\\n        for (uint64 i = 0; i < locks.length; i++) {\\n            uint depositAmount = locks[i].depositAmount;\\n            uint64 startDate = locks[i].startDate;\\n            uint64 endDate = locks[i].endDate;\\n            require(startDate < endDate, \\\"Start date\\\");\\n            require(endDate < 10000000000, \\\"End date\\\");\\n            require(locks[i].depositAmount > 0, \\\"Min deposit\\\");\\n            require(locks[i].withdrawalAddress != address(0), \\\"Zero address\\\");\\n\\n            /// Create a new Lock Instance and map to nonce\\n            vestingInstance[_nonce] = VestingInstance(\\n                tokenAddress,\\n                locks[i].withdrawalAddress,\\n                MathUpgradeable.mulDiv(\\n                    amountSent,\\n                    depositAmount,\\n                    totalDeposited\\n                ),\\n                0,\\n                startDate,\\n                endDate\\n            );\\n            /// Map token address to nonce\\n            tokenToLock[tokenAddress].push(_nonce);\\n            /// Map withdrawal address to nonce\\n            withdrawalToLock[locks[i].withdrawalAddress].push(_nonce);\\n\\n            /// Increment nonce\\n            _nonce++;\\n        }\\n        nonce = _nonce;\\n    }\\n\\n    /**\\n     * @notice claculates total deposit of given lock array\\n     * @param locks array of LockParams struct(s) containing:\\n     *    withdrawalAddress The address of the receiving wallet\\n     *    depositAmount Number of tokens in the vesting instance\\n     *    startDate Date when tokens start to unlock, is Linear lock if !=0.\\n     *    endDate Date when all tokens are fully unlocked\\n     * @return total deposit amount\\n     */\\n    function _calculateTotalDeposited(\\n        LockParams[] memory locks\\n    ) private pure returns (uint) {\\n        uint totalDeposited;\\n        for (uint32 i = 0; i < locks.length; i++) {\\n            totalDeposited += locks[i].depositAmount;\\n        }\\n        return totalDeposited;\\n    }\\n\\n    /**\\n     * @notice transfers tokens to contract and calcualtes amount sent\\n     * @param tokenAddress address of the token\\n     * @param amount total tokens attempting to be sent\\n     * @return total amount sent\\n     */\\n    function _transferAndCalculate(\\n        address tokenAddress,\\n        uint amount\\n    ) private returns (uint) {\\n        /// Get balance before sending tokens\\n        uint previousBal = IERC20Upgradeable(tokenAddress).balanceOf(\\n            address(this)\\n        );\\n\\n        /// Transfer tokens from sender to contract\\n        _transferTokensFrom(tokenAddress, msg.sender, amount);\\n\\n        /// Calculate amount sent based off before and after balance\\n        return\\n            IERC20Upgradeable(tokenAddress).balanceOf(address(this)) -\\n            previousBal;\\n    }\\n\\n    /**\\n     * @notice transfers tokens to contract and calcualtes amount sent with fees\\n     * @param tokenAddress address of the token\\n     * @param amount total tokens attempting to be sent\\n     * @param tokenFee fee taken for locking\\n     * @return total amount sent\\n     */\\n    function _transferAndCalculateWithFee(\\n        address tokenAddress,\\n        uint amount,\\n        uint tokenFee\\n    ) private returns (uint) {\\n        /// Get balance before sending tokens\\n        uint previousBal = IERC20Upgradeable(tokenAddress).balanceOf(\\n            address(this)\\n        );\\n\\n        /// Transfer tokens from sender to contract\\n        _transferTokensFrom(tokenAddress, msg.sender, amount + tokenFee);\\n\\n        /// Transfer token fees to the collector address\\n        _transferTokensTo(tokenAddress, feeCollector, tokenFee);\\n\\n        /// Calculate amount sent based off before and after balance\\n        return\\n            IERC20Upgradeable(tokenAddress).balanceOf(address(this)) -\\n            previousBal;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from address to this contract. Used for abstraction and readability.\\n     * @param tokenAddress token address of ERC20 to be transferred\\n     * @param from the address of wallet transferring the token\\n     * @param amount number of tokens being transferred\\n     */\\n    function _transferTokensFrom(\\n        address tokenAddress,\\n        address from,\\n        uint amount\\n    ) private {\\n        IERC20Upgradeable(tokenAddress).safeTransferFrom(\\n            from,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from this contract to an address. Used for abstraction and readability.\\n     * @param tokenAddress token address of ERC20 to be transferred\\n     * @param to address of wallet receiving the token\\n     * @param amount number of tokens being transferred\\n     */\\n    function _transferTokensTo(\\n        address tokenAddress,\\n        address to,\\n        uint amount\\n    ) private {\\n        IERC20Upgradeable(tokenAddress).safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Delete a vesting instance and the mappings belonging to it.\\n     * @param _nonce ID of desired vesting instance\\n     */\\n    function _deleteVestingInstance(uint64 _nonce) private {\\n        /// Delete mapping from the withdraw owner to nonce of vesting instance and pop\\n        uint64[] storage withdrawArray = withdrawalToLock[msg.sender];\\n        for (uint64 i = 0; i < withdrawArray.length; i++) {\\n            if (withdrawArray[i] == _nonce) {\\n                withdrawArray[i] = withdrawArray[withdrawArray.length - 1];\\n                withdrawArray.pop();\\n                break;\\n            }\\n        }\\n\\n        /// Delete mapping from the token address to nonce of vesting instance and pop\\n        uint64[] storage tokenAddress = tokenToLock[\\n            vestingInstance[_nonce].tokenAddress\\n        ];\\n        for (uint64 i = 0; i < tokenAddress.length; i++) {\\n            if (tokenAddress[i] == _nonce) {\\n                tokenAddress[i] = tokenAddress[tokenAddress.length - 1];\\n                tokenAddress.pop();\\n                break;\\n            }\\n        }\\n        /// Delete vesting instance map\\n        delete vestingInstance[_nonce];\\n    }\\n\\n    /**\\n     * @notice Distribute ETH to the owner of the referral code\\n     * @param code referral code\\n     * @param commission amount of eth to send to referral code owner\\n     */\\n    function _distributeCommission(\\n        string memory code,\\n        uint commission\\n    ) private nonReentrant {\\n        /// Get referral code owner\\n        address payable to = payable(referralContract.getAddressByCode(code));\\n        /// Send ether to code owner\\n        (bool sent, ) = to.call{value: commission}(\\\"\\\");\\n        if (sent) {\\n            /// Log rewards in the referral contract\\n            referralContract.addRewardsEarned(code, commission);\\n        }\\n    }\\n\\n    /**\\n     * @notice Buy Moon Labs native token if burn threshold is met or crossed and send to the dead address\\n     * @param value amount added to burn meter\\n     */\\n    function _handleBurns(uint value) private {\\n        burnMeter += MathUpgradeable.mulDiv(value, burnPercent, 100);\\n        /// Check if the threshold is met\\n        if (burnMeter >= burnThreshold) {\\n            /// Buy mlabToken via Uniswap router and send to the dead address\\n            address[] memory path = new address[](2);\\n            path[0] = routerContract.WETH();\\n            path[1] = address(mlabToken);\\n            uint[] memory amounts = routerContract.swapExactETHForTokens{\\n                value: burnMeter\\n            }(\\n                0,\\n                path,\\n                0x000000000000000000000000000000000000dEaD,\\n                block.timestamp + 50\\n            );\\n            /// Reset burn meter\\n            burnMeter = 0;\\n            emit TokensBurned(amounts[amounts.length - 1]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the number of unlocked tokens within a linear lock.\\n     * @param _nonce ID of desired vesting instance\\n     * @return unlockedTokens number of unlocked tokens\\n     */\\n    function _calculateLinearWithdraw(\\n        uint64 _nonce\\n    ) private view returns (uint) {\\n        uint withdrawnAmount = vestingInstance[_nonce].withdrawnAmount;\\n        uint depositAmount = vestingInstance[_nonce].depositAmount;\\n        uint64 endDate = vestingInstance[_nonce].endDate;\\n        uint64 startDate = vestingInstance[_nonce].startDate;\\n        uint64 timeBlock = endDate - startDate; /// Time from start date to end date\\n        uint64 timeElapsed = 0; // Time since tokens started to unlock\\n\\n        if (endDate <= block.timestamp) {\\n            /// Set time elapsed to time block\\n            timeElapsed = timeBlock;\\n        } else if (startDate < block.timestamp) {\\n            /// Set time elapsed to the time elapsed\\n            timeElapsed = uint64(block.timestamp) - startDate;\\n        }\\n\\n        /// Math to calculate linear unlock\\n        /**\\n    This formula will only return a negative number when the current amount is less than what can be withdrawn\\n\\n      Deposit Amount x Time Elapsed\\n      -----------------------------   -   (Withdrawn Amount)\\n               Time Block\\n    **/\\n        return\\n            MathUpgradeable.mulDiv(depositAmount, timeElapsed, timeBlock) -\\n            (withdrawnAmount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 3000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"numOfLocks\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"LockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"LockTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnMeter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"codeDiscount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"internalType\":\"struct MoonLabsVesting.LockParams[]\",\"name\":\"locks\",\"type\":\"tuple[]\"}],\"name\":\"createLockEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"internalType\":\"struct MoonLabsVesting.LockParams[]\",\"name\":\"locks\",\"type\":\"tuple[]\"}],\"name\":\"createLockMLAB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"internalType\":\"struct MoonLabsVesting.LockParams[]\",\"name\":\"locks\",\"type\":\"tuple[]\"}],\"name\":\"createLockPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"internalType\":\"struct MoonLabsVesting.LockParams[]\",\"name\":\"locks\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"createLockWithCodeEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethLockPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"getClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"getInstance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInEth\",\"type\":\"uint256\"}],\"name\":\"getMLABFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getNonceFromTokenAddress\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"getNonceFromWithdrawalAddress\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mlabToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"whitelistAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mlabDiscountPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mlabToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentLockPrice\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralContract\",\"outputs\":[{\"internalType\":\"contract IMoonLabsReferral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerContract\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_burnPercent\",\"type\":\"uint8\"}],\"name\":\"setBurnPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnThreshold\",\"type\":\"uint256\"}],\"name\":\"setBurnThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_codeDiscount\",\"type\":\"uint8\"}],\"name\":\"setCodeDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethLockPrice\",\"type\":\"uint256\"}],\"name\":\"setLockPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_mlabDiscountPercent\",\"type\":\"uint8\"}],\"name\":\"setMlabDiscountPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mlabToken\",\"type\":\"address\"}],\"name\":\"setMlabToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_percentLockPrice\",\"type\":\"uint16\"}],\"name\":\"setPercentLockPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralAddress\",\"type\":\"address\"}],\"name\":\"setReferralContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistAddress\",\"type\":\"address\"}],\"name\":\"setWhitelistContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferVestingOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistContract\",\"outputs\":[{\"internalType\":\"contract IMoonLabsWhitelist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUnlockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MoonLabsVesting", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "3000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}