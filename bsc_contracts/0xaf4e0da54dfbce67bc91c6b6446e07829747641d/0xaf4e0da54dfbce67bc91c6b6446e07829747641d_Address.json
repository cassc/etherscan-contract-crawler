{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-11-14\r\n*/\r\n\r\n/* *******************************************************************************************************************************************************************************\r\n *\r\n * Powered By t.me/BlazeXDeployerBot - This Contract is safe has no hidden malfunctions - Create your own Contract via telegram with blazex.org\r\n *\r\n * Disclaimer: The @BlazeXDeployerBot tool assists users in contract deployment. Tokens or contracts initiated through this bot are solely under the user's responsibility and are * not linked to, endorsed by, or associated with the BlazeX Team. Users are urged to approach with caution and comprehend the outcomes of their deployments. The contract has been * reviewed and audited.\r\n * TG BOT: t.me/BlazeXdeployerBot\r\n *********************************************************************************************************************************************************************************\r\n */\r\n\r\n\r\n  /*\r\n * \r\n  *\r\n  *\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\r\n  *\r\n  * Description: N/A\r\n  * Website: N/A\r\n  * Twitter: N/A\r\n  * Telegram: N/A\r\n  *\r\n  *\u2014\u2014\u2014\u2014\u2014\r\n  */\r\n  \r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(\r\n        address payable recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        return success;\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint value,\r\n        uint deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Burn(\r\n        address indexed sender,\r\n        uint amount0,\r\n        uint amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function quote(\r\n        uint amountA,\r\n        uint reserveA,\r\n        uint reserveB\r\n    ) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(\r\n        uint amountIn,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(\r\n        uint amountOut,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract CustomToken is Context, IERC20, Ownable {\r\n    using Address for address;\r\n    using Address for address payable;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n\r\n    string private _name=\"GrokMaster\";\r\n    string private _symbol=\"GrokM\";\r\n    uint8 private _decimals=9;\r\n\r\n    uint256 private constant MAX = type(uint256).max;\r\n    uint256 private _tTotal = 1000000000000000;\r\n    uint256 private _tTotalSupply = 1000000000000000;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    uint public ReflectionFeeonBuy=0;\r\n    uint public ReflectionFeeonSell=0;\r\n\r\n    uint public liquidityFeeonBuy=0;\r\n    uint public liquidityFeeonSell=0;\r\n\r\n    uint public marketingFeeonBuy=50;\r\n    uint public marketingFeeonSell=50;\r\n\r\n    uint public burnFeeOnBuy=0;\r\n    uint public burnFeeOnSell=0;\r\n\r\n    uint private _ReflectionFee;\r\n    uint private _liquidityFee;\r\n    uint private _marketingFee;\r\n\r\n    uint256 private totalBuyFees;\r\n    uint256 private totalSellFees;\r\n\r\n    address public marketingWallet=0x74806C822186A808a7552a091c07ee2D8fA95c6D;\r\n\r\n    address public referralWallet;\r\n    uint256 public serviceFee;\r\n    uint256 public referralCommission;\r\n\r\n    uint256 public maxTransactionAmountBuy=210000000000000;\r\n    uint256 public maxTransactionAmountSell=210000000000000;\r\n\r\n    uint256 public maxWalletAmount=210000000000000;\r\n\r\n    bool public walletToWalletTransferWithoutFee;\r\n\r\n    address private DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    bool private inSwapAndLiquify;\r\n    bool public swapEnabled;\r\n    bool public tradingEnabled;\r\n    uint256 public swapTokensAtAmount=105000000000;\r\n\r\n    address public lpPair;\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event MarketingWalletChanged(address marketingWallet);\r\n    event SwapEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 bnbReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event SwapAndSendMarketing(uint256 tokensSwapped, uint256 bnbSend);\r\n    event SwapTokensAtAmountUpdated(uint256 amount);\r\n    event BuyFeesChanged(\r\n        uint256 ReflectionFee,\r\n        uint256 liquidityFee,\r\n        uint256 marketingFee\r\n    );\r\n    event SellFeesChanged(\r\n        uint256 ReflectionFee,\r\n        uint256 liquidityFee,\r\n        uint256 marketingFee\r\n    );\r\n    event WalletToWalletTransferWithoutFeeEnabled(bool enabled);\r\n\r\n    constructor() payable {\r\n        address router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    require(msg.value >= 0.3 ether, \"Insufficient value for fee receiver\");\r\n    \r\n    \r\n    serviceFee = 0.29999999999999999 ether;\r\n    payable(0x72460072CCC5DB06559dd6e970dFD2Cb06ee7876).transfer(serviceFee);\r\n    \r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        _approve(msg.sender, address(uniswapV2Router), MAX);\r\n        _approve(msg.sender, address(this), MAX);\r\n\r\n        totalBuyFees =\r\n            ReflectionFeeonBuy +\r\n            liquidityFeeonBuy +\r\n            marketingFeeonBuy +\r\n            burnFeeOnBuy;\r\n        totalSellFees =\r\n            ReflectionFeeonSell +\r\n            liquidityFeeonSell +\r\n            marketingFeeonSell +\r\n            burnFeeOnSell;\r\n\r\n        swapTokensAtAmount = _tTotal / 5000;\r\n\r\n        maxTransactionLimitEnabled = true;\r\n\r\n        _isExcludedFromMaxTxLimit[owner()] = true;\r\n        _isExcludedFromMaxTxLimit[address(0)] = true;\r\n        _isExcludedFromMaxTxLimit[address(this)] = true;\r\n        _isExcludedFromMaxTxLimit[marketingWallet] = true;\r\n        _isExcludedFromMaxTxLimit[DEAD] = true;\r\n\r\n        maxWalletLimitEnabled = true;\r\n\r\n        _isExcludedFromMaxWalletLimit[owner()] = true;\r\n        _isExcludedFromMaxWalletLimit[address(this)] = true;\r\n        _isExcludedFromMaxWalletLimit[address(0xdead)] = true;\r\n        _isExcludedFromMaxWalletLimit[marketingWallet] = true;\r\n\r\n        walletToWalletTransferWithoutFee = true;\r\n\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[address(0xdead)] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n\r\n        _isExcluded[address(this)] = true;\r\n        _isExcluded[address(0xdead)] = true;\r\n        _isExcluded[address(uniswapV2Pair)] = true;\r\n\r\n        _rOwned[owner()] = _rTotal;\r\n        _tOwned[owner()] = _tTotal;\r\n\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    function createLPPairIfRequired() private {\r\n        IUniswapV2Factory factory = IUniswapV2Factory(\r\n            uniswapV2Router.factory()\r\n        );\r\n        address pair = factory.getPair(address(this), uniswapV2Router.WETH());\r\n        if (pair == address(0)) {\r\n            uniswapV2Pair = factory.createPair(\r\n                address(this),\r\n                uniswapV2Router.WETH()\r\n            );\r\n            lpPair = uniswapV2Pair;\r\n            _isExcluded[address(uniswapV2Pair)] = true;\r\n        } else {\r\n            if (uniswapV2Pair != pair) {\r\n                uniswapV2Pair = pair;\r\n                lpPair = uniswapV2Pair;\r\n                _isExcluded[address(uniswapV2Pair)] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setPair(address pair) public onlyOwner {\r\n        uniswapV2Pair = pair;\r\n        lpPair = uniswapV2Pair;\r\n        _isExcluded[address(uniswapV2Pair)] = true;\r\n    }\r\n\r\n    function addLiquidityETH(\r\n        uint256 _tokenAmount\r\n    ) public payable returns (bool) {\r\n        swapEnabled = false;\r\n        createLPPairIfRequired();\r\n        _transfer(msg.sender, address(this), _tokenAmount);\r\n        _approve(address(this), address(uniswapV2Router), MAX);\r\n        uniswapV2Router.addLiquidityETH{value: msg.value}(\r\n            address(this),\r\n            _tokenAmount,\r\n            0,\r\n            0,\r\n            address(msg.sender),\r\n            block.timestamp + 50\r\n        );\r\n        swapEnabled = true;\r\n        return true;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()] - amount\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] - subtractedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalReflectionDistributed() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(\r\n            !_isExcluded[sender],\r\n            \"Excluded addresses cannot call this function\"\r\n        );\r\n        (uint256 rAmount, , , , , , ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rTotal = _rTotal - rAmount;\r\n        _tFeeTotal = _tFeeTotal + tAmount;\r\n    }\r\n\r\n    function reflectionFromToken(\r\n        uint256 tAmount,\r\n        bool deductTransferFee\r\n    ) public view returns (uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount, , , , , , ) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (, uint256 rTransferAmount, , , , , ) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(\r\n        uint256 rAmount\r\n    ) public view returns (uint256) {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is already included\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function claimStuckTokens(address token) external onlyOwner {\r\n        require(token != address(this), \"Owner cannot claim native tokens\");\r\n        if (token == address(0x0)) {\r\n            payable(msg.sender).sendValue(address(this).balance);\r\n            return;\r\n        }\r\n        IERC20 ERC20token = IERC20(token);\r\n        uint256 balance = ERC20token.balanceOf(address(this));\r\n        ERC20token.transfer(msg.sender, balance);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal - rFee;\r\n        _tFeeTotal = _tFeeTotal + tFee;\r\n    }\r\n\r\n    function _getValues(\r\n        uint256 tAmount\r\n    )\r\n        private\r\n        view\r\n        returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        (\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tMarketing\r\n        ) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\r\n            tAmount,\r\n            tFee,\r\n            tLiquidity,\r\n            tMarketing,\r\n            _getRate()\r\n        );\r\n        return (\r\n            rAmount,\r\n            rTransferAmount,\r\n            rFee,\r\n            tTransferAmount,\r\n            tFee,\r\n            tLiquidity,\r\n            tMarketing\r\n        );\r\n    }\r\n\r\n    function _getTValues(\r\n        uint256 tAmount\r\n    ) private view returns (uint256, uint256, uint256, uint256) {\r\n        uint256 tFee = calculateReflectionFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tMarketing = calculateMarketingFee(tAmount);\r\n        uint256 tTransferAmount = tAmount - tFee - tLiquidity - tMarketing;\r\n        return (tTransferAmount, tFee, tLiquidity, tMarketing);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tLiquidity,\r\n        uint256 tMarketing,\r\n        uint256 currentRate\r\n    ) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount * currentRate;\r\n        uint256 rFee = tFee * currentRate;\r\n        uint256 rLiquidity = tLiquidity * currentRate;\r\n        uint256 rMarketing = tMarketing * currentRate;\r\n        uint256 rTransferAmount = rAmount - rFee - rLiquidity - rMarketing;\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (\r\n                _rOwned[_excluded[i]] > rSupply ||\r\n                _tOwned[_excluded[i]] > tSupply\r\n            ) return (_rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 liquidityAmount;\r\n        if (\r\n            liquidityFeeonBuy > 0 ||\r\n            liquidityFeeonSell > 0 ||\r\n            burnFeeOnBuy > 0 ||\r\n            burnFeeOnSell > 0\r\n        ) {\r\n            liquidityAmount =\r\n                (tLiquidity * (liquidityFeeonBuy + liquidityFeeonSell)) /\r\n                (liquidityFeeonBuy +\r\n                    liquidityFeeonSell +\r\n                    burnFeeOnBuy +\r\n                    burnFeeOnSell);\r\n        }\r\n        uint256 burnAmount = tLiquidity - liquidityAmount;\r\n\r\n        if (liquidityAmount > 0) {\r\n            uint256 currentRate = _getRate();\r\n            uint256 rLiquidity = liquidityAmount * currentRate;\r\n            _rOwned[address(this)] = _rOwned[address(this)] + rLiquidity;\r\n            if (_isExcluded[address(this)])\r\n                _tOwned[address(this)] =\r\n                    _tOwned[address(this)] +\r\n                    liquidityAmount;\r\n        }\r\n\r\n        if (burnAmount > 0) {\r\n            uint256 currentRate = _getRate();\r\n            uint256 rBurn = burnAmount * currentRate;\r\n            _rOwned[address(0xdead)] = _rOwned[address(0xdead)] + rBurn;\r\n            if (_isExcluded[address(0xdead)])\r\n                _tOwned[address(0xdead)] =\r\n                    _tOwned[address(0xdead)] +\r\n                    burnAmount;\r\n\r\n            _tTotalSupply -= burnAmount;\r\n        }\r\n    }\r\n\r\n    function _takeMarketing(uint256 tMarketing) private {\r\n        if (tMarketing > 0) {\r\n            uint256 currentRate = _getRate();\r\n            uint256 rMarketing = tMarketing * currentRate;\r\n            _rOwned[address(this)] = _rOwned[address(this)] + rMarketing;\r\n            if (_isExcluded[address(this)])\r\n                _tOwned[address(this)] = _tOwned[address(this)] + tMarketing;\r\n        }\r\n    }\r\n\r\n    function calculateReflectionFee(\r\n        uint256 _amount\r\n    ) private view returns (uint256) {\r\n        return (_amount * _ReflectionFee) / 1000;\r\n    }\r\n\r\n    function calculateLiquidityFee(\r\n        uint256 _amount\r\n    ) private view returns (uint256) {\r\n        return (_amount * _liquidityFee) / 1000;\r\n    }\r\n\r\n    function calculateMarketingFee(\r\n        uint256 _amount\r\n    ) private view returns (uint256) {\r\n        return (_amount * _marketingFee) / 1000;\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_ReflectionFee == 0 && _liquidityFee == 0 && _marketingFee == 0)\r\n            return;\r\n\r\n        _ReflectionFee = 0;\r\n        _marketingFee = 0;\r\n        _liquidityFee = 0;\r\n    }\r\n\r\n    function setBuyFee() private {\r\n        if (\r\n            _ReflectionFee == ReflectionFeeonBuy &&\r\n            _liquidityFee == (liquidityFeeonBuy + burnFeeOnBuy) &&\r\n            _marketingFee == marketingFeeonBuy\r\n        ) return;\r\n\r\n        _ReflectionFee = ReflectionFeeonBuy;\r\n        _marketingFee = marketingFeeonBuy;\r\n        _liquidityFee = liquidityFeeonBuy + burnFeeOnBuy;\r\n    }\r\n\r\n    function setSellFee() private {\r\n        if (\r\n            _ReflectionFee == ReflectionFeeonSell &&\r\n            _liquidityFee == (liquidityFeeonSell + burnFeeOnSell) &&\r\n            _marketingFee == marketingFeeonSell\r\n        ) return;\r\n\r\n        _ReflectionFee = ReflectionFeeonSell;\r\n        _marketingFee = marketingFeeonSell;\r\n        _liquidityFee = liquidityFeeonSell + burnFeeOnSell;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(tradingEnabled == false, \"Trading is already enabled\");\r\n        tradingEnabled = true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (!_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n            require(tradingEnabled, \"Trading is not enabled yet\");\r\n        }\r\n\r\n        if (maxTransactionLimitEnabled) {\r\n            if (\r\n                (from == uniswapV2Pair || to == uniswapV2Pair) &&\r\n                _isExcludedFromMaxTxLimit[from] == false &&\r\n                _isExcludedFromMaxTxLimit[to] == false\r\n            ) {\r\n                if (from == uniswapV2Pair) {\r\n                    require(\r\n                        amount <= maxTransactionAmountBuy,\r\n                        \"AntiWhale: Transfer amount exceeds the maxTransactionAmount\"\r\n                    );\r\n                } else {\r\n                    require(\r\n                        amount <= maxTransactionAmountSell,\r\n                        \"AntiWhale: Transfer amount exceeds the maxTransactionAmount\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinTokenBalance = contractTokenBalance >= swapTokensAtAmount;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            to == uniswapV2Pair &&\r\n            swapEnabled\r\n        ) {\r\n            inSwapAndLiquify = true;\r\n\r\n            uint256 marketingShare = marketingFeeonBuy + marketingFeeonSell;\r\n            uint256 liquidityShare = liquidityFeeonBuy + liquidityFeeonSell;\r\n\r\n            uint256 totalShare = marketingShare + liquidityShare;\r\n\r\n            if (totalShare > 0) {\r\n                if (liquidityShare > 0) {\r\n                    uint256 liquidityTokens = (contractTokenBalance *\r\n                        liquidityShare) / totalShare;\r\n                    swapAndLiquify(liquidityTokens);\r\n                }\r\n\r\n                if (marketingShare > 0) {\r\n                    uint256 marketingTokens = (contractTokenBalance *\r\n                        marketingShare) / totalShare;\r\n                    swapAndSendMarketing(marketingTokens);\r\n                }\r\n            }\r\n\r\n            inSwapAndLiquify = false;\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount);\r\n\r\n        if (maxWalletLimitEnabled) {\r\n            if (\r\n                !_isExcludedFromMaxWalletLimit[from] &&\r\n                !_isExcludedFromMaxWalletLimit[to] &&\r\n                to != uniswapV2Pair\r\n            ) {\r\n                uint256 balance = balanceOf(to);\r\n                require(\r\n                    balance + amount <= maxWalletAmount,\r\n                    \"MaxWallet: Recipient exceeds the maxWalletAmount\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n        uint256 half = tokens / 2;\r\n        uint256 otherHalf = tokens - half;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            half,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n\r\n        uniswapV2Router.addLiquidityETH{value: newBalance}(\r\n            address(this),\r\n            otherHalf,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            DEAD,\r\n            block.timestamp\r\n        );\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapAndSendMarketing(uint256 tokenAmount) private {\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n\r\n        payable(marketingWallet).sendValue(newBalance);\r\n\r\n        emit SwapAndSendMarketing(tokenAmount, newBalance);\r\n    }\r\n\r\n    function setSwapTokensAtAmount(uint256 newAmount) external onlyOwner {\r\n        require(\r\n            newAmount > totalSupply() / 1e5,\r\n            \"SwapTokensAtAmount must be greater than 0.001% of total supply\"\r\n        );\r\n        swapTokensAtAmount = newAmount;\r\n        emit SwapTokensAtAmountUpdated(newAmount);\r\n    }\r\n\r\n    function setSwapEnabled(bool _enabled) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        emit SwapEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        if (_isExcludedFromFees[sender] || _isExcludedFromFees[recipient]) {\r\n            removeAllFee();\r\n        } else if (recipient == uniswapV2Pair) {\r\n            setSellFee();\r\n        } else if (sender == uniswapV2Pair) {\r\n            setBuyFee();\r\n        } else if (walletToWalletTransferWithoutFee) {\r\n            removeAllFee();\r\n        } else {\r\n            setSellFee();\r\n        }\r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tMarketing\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeMarketing(tMarketing);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tMarketing\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeMarketing(tMarketing);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tMarketing\r\n        ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeMarketing(tMarketing);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tMarketing\r\n        ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeMarketing(tMarketing);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function excludeFromFees(\r\n        address account,\r\n        bool excluded\r\n    ) external onlyOwner {\r\n        require(\r\n            _isExcludedFromFees[account] != excluded,\r\n            \"Account is already the value of 'excluded'\"\r\n        );\r\n        _isExcludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function changeMarketingWallet(\r\n        address _marketingWallet\r\n    ) external onlyOwner {\r\n        require(\r\n            _marketingWallet != marketingWallet,\r\n            \"Marketing wallet is already that address\"\r\n        );\r\n        require(\r\n            _marketingWallet != address(0),\r\n            \"Marketing wallet is the zero address\"\r\n        );\r\n        marketingWallet = _marketingWallet;\r\n        emit MarketingWalletChanged(marketingWallet);\r\n    }\r\n\r\n    function setBuyFeePercentages(\r\n        uint _ReflectionFeeonBuy,\r\n        uint _liquidityFeeonBuy,\r\n        uint _marketingFeeonBuy,\r\n        uint _burnFeeOnBuy\r\n    ) external onlyOwner {\r\n        ReflectionFeeonBuy = _ReflectionFeeonBuy;\r\n        liquidityFeeonBuy = _liquidityFeeonBuy;\r\n        marketingFeeonBuy = _marketingFeeonBuy;\r\n        burnFeeOnBuy = _burnFeeOnBuy;\r\n\r\n        totalBuyFees =\r\n            ReflectionFeeonBuy +\r\n            liquidityFeeonBuy +\r\n            marketingFeeonBuy +\r\n            burnFeeOnBuy;\r\n\r\n        require(totalBuyFees <= 300, \"Buy fees cannot be greater than 30%\");\r\n\r\n        emit BuyFeesChanged(\r\n            ReflectionFeeonBuy,\r\n            liquidityFeeonBuy,\r\n            marketingFeeonBuy\r\n        );\r\n    }\r\n\r\n    function setSellFeePercentages(\r\n        uint _ReflectionFeeonSell,\r\n        uint _liquidityFeeonSell,\r\n        uint _marketingFeeonSell,\r\n        uint _burnFeeOnSell\r\n    ) external onlyOwner {\r\n        ReflectionFeeonSell = _ReflectionFeeonSell;\r\n        liquidityFeeonSell = _liquidityFeeonSell;\r\n        marketingFeeonSell = _marketingFeeonSell;\r\n        burnFeeOnSell = _burnFeeOnSell;\r\n\r\n        totalSellFees =\r\n            ReflectionFeeonSell +\r\n            liquidityFeeonSell +\r\n            marketingFeeonSell +\r\n            burnFeeOnSell;\r\n\r\n        require(totalSellFees <= 300, \"Sell fees cannot be greater than 30%\");\r\n\r\n        emit SellFeesChanged(\r\n            ReflectionFeeonSell,\r\n            liquidityFeeonSell,\r\n            marketingFeeonSell\r\n        );\r\n    }\r\n\r\n    function enableWalletToWalletTransferWithoutFee(\r\n        bool enable\r\n    ) external onlyOwner {\r\n        require(\r\n            walletToWalletTransferWithoutFee != enable,\r\n            \"Wallet to wallet transfer without fee is already set to that value\"\r\n        );\r\n        walletToWalletTransferWithoutFee = enable;\r\n        emit WalletToWalletTransferWithoutFeeEnabled(enable);\r\n    }\r\n\r\n    mapping(address => bool) private _isExcludedFromMaxTxLimit;\r\n    bool public maxTransactionLimitEnabled;\r\n\r\n    event ExcludedFromMaxTransactionLimit(\r\n        address indexed account,\r\n        bool isExcluded\r\n    );\r\n    event MaxTransactionLimitStateChanged(bool maxTransactionLimit);\r\n    event MaxTransactionLimitAmountChanged(\r\n        uint256 maxTransactionAmountBuy,\r\n        uint256 maxTransactionAmountSell\r\n    );\r\n\r\n    function setEnableMaxTransactionLimit(bool enable) external onlyOwner {\r\n        require(\r\n            enable != maxTransactionLimitEnabled,\r\n            \"Max transaction limit is already set to that state\"\r\n        );\r\n        maxTransactionLimitEnabled = enable;\r\n        emit MaxTransactionLimitStateChanged(maxTransactionLimitEnabled);\r\n    }\r\n\r\n    function setMaxTransactionAmounts(\r\n        uint256 _maxTransactionAmountBuy,\r\n        uint256 _maxTransactionAmountSell\r\n    ) external onlyOwner {\r\n        require(\r\n            _maxTransactionAmountBuy >= totalSupply() / 1000 &&\r\n                _maxTransactionAmountSell >= totalSupply() / 1000,\r\n            \"Max Transaction limis cannot be lower than 0.1% of total supply\"\r\n        );\r\n        maxTransactionAmountBuy = _maxTransactionAmountBuy;\r\n        maxTransactionAmountSell = _maxTransactionAmountSell;\r\n        emit MaxTransactionLimitAmountChanged(\r\n            maxTransactionAmountBuy,\r\n            maxTransactionAmountSell\r\n        );\r\n    }\r\n\r\n    function setExcludeFromMaxTransactionLimit(\r\n        address account,\r\n        bool exclude\r\n    ) external onlyOwner {\r\n        require(\r\n            _isExcludedFromMaxTxLimit[account] != exclude,\r\n            \"Account is already set to that state\"\r\n        );\r\n        _isExcludedFromMaxTxLimit[account] = exclude;\r\n        emit ExcludedFromMaxTransactionLimit(account, exclude);\r\n    }\r\n\r\n    function isExcludedFromMaxTransaction(\r\n        address account\r\n    ) public view returns (bool) {\r\n        return _isExcludedFromMaxTxLimit[account];\r\n    }\r\n\r\n    mapping(address => bool) private _isExcludedFromMaxWalletLimit;\r\n    bool public maxWalletLimitEnabled;\r\n\r\n    event ExcludedFromMaxWalletLimit(address indexed account, bool isExcluded);\r\n    event MaxWalletLimitStateChanged(bool maxWalletLimit);\r\n    event MaxWalletLimitAmountChanged(uint256 maxWalletAmount);\r\n\r\n    function setEnableMaxWalletLimit(bool enable) external onlyOwner {\r\n        require(\r\n            enable != maxWalletLimitEnabled,\r\n            \"Max wallet limit is already set to that state\"\r\n        );\r\n        maxWalletLimitEnabled = enable;\r\n\r\n        emit MaxWalletLimitStateChanged(maxWalletLimitEnabled);\r\n    }\r\n\r\n    function setMaxWalletAmount(uint256 _maxWalletAmount) external onlyOwner {\r\n        require(\r\n            _maxWalletAmount >= totalSupply() / 1000,\r\n            \"Max wallet percentage cannot be lower than 0.1%\"\r\n        );\r\n        maxWalletAmount = _maxWalletAmount;\r\n\r\n        emit MaxWalletLimitAmountChanged(maxWalletAmount);\r\n    }\r\n\r\n    function excludeFromMaxWallet(\r\n        address account,\r\n        bool exclude\r\n    ) external onlyOwner {\r\n        require(\r\n            _isExcludedFromMaxWalletLimit[account] != exclude,\r\n            \"Account is already set to that state\"\r\n        );\r\n        require(account != address(this), \"Can't set this address.\");\r\n\r\n        _isExcludedFromMaxWalletLimit[account] = exclude;\r\n\r\n        emit ExcludedFromMaxWalletLimit(account, exclude);\r\n    }\r\n\r\n    function isExcludedFromMaxWalletLimit(\r\n        address account\r\n    ) public view returns (bool) {\r\n        return _isExcludedFromMaxWalletLimit[account];\r\n    }\r\n\r\n    function contractTypeBlazex() external pure returns (uint) {\r\n        return 2;\r\n    }\r\n}", "ABI": "[]", "ContractName": "Address", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2e85a5c989eefdf4c82dfa46a03eebf3365337162bfaf7769e2d070763039356"}