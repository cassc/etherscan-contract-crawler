{"SourceCode": "// SPDX-License-Identifier: none\r\npragma solidity ^0.8.8;\r\n\r\ninterface BEP20 {\r\n    function totalSupply() external view returns (uint theTotalSupply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract  arthafintechIDO{\r\n    \r\n  struct Tariff {\r\n    uint time;\r\n    uint percent;\r\n  }\r\n  \r\n  struct Deposit {\r\n    uint tariff;\r\n    uint amount;\r\n    uint at;\r\n  }\r\n  \r\n  struct Investor {\r\n    bool registered;\r\n   Deposit[] deposits;\r\n    uint invested;\r\n    uint paidAt;\r\n    uint withdrawn;\r\n  }\r\n   struct Investment {\r\n        uint256 amount;\r\n        uint256 lastClaim;\r\n        uint256 monthlyReward;\r\n        uint256 totalmonth;     \r\n    }\r\n    \r\n    struct Claim{\r\n        uint[] amounts;\r\n        uint[] times;\r\n        bool[] withdrawn;\r\n    }\r\n  \r\n  uint  MIN_DEPOSIT_USDT  ;\r\n  address public buyTokenAddr = 0xa390911B4026ae0d1b05cab0b4d070CD3BbfC74E; \r\n\r\n  uint public stage1tokenPrice ;\r\n  uint public stage1tokenPriceDecimal;\r\n  uint public stage2tokenPrice ;\r\n  uint public stage2tokenPriceDecimal;\r\n  uint public stage3tokenprice;\r\n  uint public stage3tokenPriceDecimal;\r\n  uint public stage4tokenprice; \r\n  uint public stage4tokenpriceDecimal;\r\n\r\nuint256[] public lockingTimes = [55 days, 40 days, 30 days, 2 days]; \r\n event OwnershipTransferred(address); \r\n  \r\n  address public owner = msg.sender;\r\n  address payable contractAddr = payable(address(this));\r\n\r\n  Tariff[] public tariffs;\r\n  uint public totalInvestors;\r\n  uint public totalInvested;\r\n  uint public totalWithdrawal;\r\n  uint public stagemin1 = block.timestamp;\r\n  uint public stagemax1 = block.timestamp;\r\n  uint public stagemin2 = block.timestamp;\r\n  uint public stagemax2 = block.timestamp;\r\n  uint public stagemin3 = block.timestamp;\r\n  uint public stagemax3 = block.timestamp;\r\n  uint public stagemin4 = block.timestamp;\r\n  uint public stagemax4 = block.timestamp; \r\n  uint public oneDay = 30 days; \r\n\r\n    \r\n  mapping(address => uint) userIndex;\r\n  mapping(address => Claim)  claim;\r\n  mapping(address => Investment) public investments;\r\n  mapping (address => Investor) public investors;\r\n  event DepositAt(address user, uint tariff, uint amount);\r\n  event Reinvest(address user, uint tariff, uint amount);\r\n  event Withdraw(address user, uint amount);\r\n\r\n  \r\n  constructor() {\r\n  }\r\n\r\n\r\n\r\n function buyTokenWithUSDT(uint256 _usdtAmount, uint256 _stage) external {\r\n         // Ensure a valid stage is selected\r\n\r\n        require(_stage >= 1 && _stage <= lockingTimes.length, \"Invalid stage\");\r\n\r\n    // Calculate the token value and monthly reward based on the selected stage\r\n    uint256 tokenVal;\r\n    uint256 monthlyReward;\r\n\r\n        uint256 lockTime = lockingTimes[_stage - 1];\r\n\r\n    if (_stage == 1) {\r\n        require(stagemin1 <= block.timestamp && block.timestamp <= stagemax1, \"Invalid investment period for Stage 1\");\r\n        require(_usdtAmount == 1000 * 10**18, \"Invalid investment amount for Stage 1\");\r\n        tokenVal = (_usdtAmount * 10**stage1tokenPriceDecimal) / stage1tokenPrice;\r\n        monthlyReward = (tokenVal * 10) / 100; // 10%\r\n    } else if (_stage == 2) {\r\n        require(stagemin2 <= block.timestamp && block.timestamp <= stagemax2, \"Invalid investment period for Stage 2\");\r\n        require(_usdtAmount == 500 * 10**18, \"Invalid investment amount for Stage 2\");\r\n        tokenVal = (_usdtAmount * 10**stage2tokenPriceDecimal) / stage2tokenPrice;\r\n        monthlyReward = (tokenVal * 20) / 100; // 20%\r\n    } else if (_stage == 3) {\r\n        require(stagemin3 <= block.timestamp && block.timestamp <= stagemax3, \"Invalid investment period for Stage 3\");\r\n        require(_usdtAmount == 200 * 10**18, \"Invalid investment amount for Stage 3\");\r\n        tokenVal = (_usdtAmount * 10**stage3tokenPriceDecimal) / stage3tokenprice;\r\n        monthlyReward = (tokenVal * 50) / 100; // 50%\r\n    } else if (_stage == 4) {\r\n        require(stagemin4 <= block.timestamp && block.timestamp <= stagemax4, \"Invalid investment period for Stage 4\");\r\n        require(_usdtAmount >= 50  * 10**18 &&  _usdtAmount <=1000 *10**18, \"Invalid investment amount for Stage 4\");\r\n        tokenVal = (_usdtAmount * 10**stage4tokenpriceDecimal) / stage4tokenprice;\r\n        monthlyReward = (tokenVal * 100) / 100; // 100%\r\n    } else {\r\n        revert(\"Invalid stage\");\r\n    }\r\n\r\n    // Check contract and user balances\r\n    BEP20 sendToken = BEP20(buyTokenAddr);\r\n    BEP20 receiveToken = BEP20(0x55d398326f99059fF775485246999027B3197955); // Testnet\r\n\r\n    require(sendToken.balanceOf(address(this)) >= tokenVal, \"Insufficient contract balance\");\r\n    require(receiveToken.balanceOf(msg.sender) >= _usdtAmount, \"Insufficient user USDT balance\");\r\n\r\n    // Transfer USDT from the user to the contract\r\n    receiveToken.transferFrom(msg.sender, address(this), _usdtAmount);\r\n\r\n    // Update investor information\r\n    investors[msg.sender].invested += tokenVal;\r\n    totalInvested += tokenVal;\r\n\r\n    // Emit a deposit event\r\n    emit DepositAt(msg.sender, _stage, tokenVal);\r\n\r\n    // Transfer tokens to the contract\r\n    sendToken.transfer(address(this), tokenVal);\r\n\r\n      // Ensure the user has not already invested\r\n    require(investments[msg.sender].amount == 0, \"Already invested\");\r\n\r\n    // Calculate claim details and store them\r\n    uint256 time = block.timestamp + lockTime;\r\n    uint256 claimMonth = tokenVal / monthlyReward;\r\n\r\n    investments[msg.sender] = Investment({\r\n        amount: tokenVal,\r\n        lastClaim: block.timestamp,\r\n        monthlyReward: monthlyReward,\r\n        totalmonth: claimMonth\r\n    });\r\n\r\n    for (uint256 i = 1; i <= claimMonth; i++) {\r\n        claim[msg.sender].amounts.push(monthlyReward);\r\n        claim[msg.sender].times.push(time + (i - 1) * 30 days); // 30 days in a month\r\n        claim[msg.sender].withdrawn.push(false);\r\n    }\r\n\r\n    // Reset the user's claim index\r\n    userIndex[msg.sender] = 0;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction buyTokenWithBUSD(uint256 _BUSDAmount, uint256 _stage) external {\r\n    // Ensure a valid stage is selected\r\n    require(_stage >= 1 && _stage <= lockingTimes.length, \"Invalid stage\");\r\n\r\n    // Calculate the token value and monthly reward based on the selected stage\r\n    uint256 tokenVal;\r\n    uint256 monthlyReward;\r\n\r\n    uint256 lockTime = lockingTimes[_stage - 1];\r\n\r\n    if (_stage == 1) {\r\n        require(stagemin1 <= block.timestamp && block.timestamp <= stagemax1, \"Invalid investment period for Stage 1\");\r\n        require(_BUSDAmount == 1000 * 10**18, \"Invalid investment amount for Stage 1\");\r\n        tokenVal = (_BUSDAmount * 10**stage1tokenPriceDecimal) / stage1tokenPrice;\r\n        monthlyReward = (tokenVal * 10) / 100; // 10%\r\n    } else if (_stage == 2) {\r\n        require(stagemin2 <= block.timestamp && block.timestamp <= stagemax2, \"Invalid investment period for Stage 2\");\r\n        require(_BUSDAmount == 500 * 10**18, \"Invalid investment amount for Stage 2\");\r\n        tokenVal = (_BUSDAmount * 10**stage2tokenPriceDecimal) / stage2tokenPrice;\r\n        monthlyReward = (tokenVal * 20) / 100; // 20%\r\n    } else if (_stage == 3) {\r\n        require(stagemin3 <= block.timestamp && block.timestamp <= stagemax3, \"Invalid investment period for Stage 3\");\r\n        require(_BUSDAmount == 200 * 10**18, \"Invalid investment amount for Stage 3\");\r\n        tokenVal = (_BUSDAmount * 10**stage3tokenPriceDecimal) / stage3tokenprice;\r\n        monthlyReward = (tokenVal * 50) / 100; // 50%\r\n    } else if (_stage == 4) {\r\n        require(stagemin4 <= block.timestamp && block.timestamp <= stagemax4, \"Invalid investment period for Stage 4\");\r\n        require(_BUSDAmount >= 50  * 10**18 &&  _BUSDAmount <=1000 *10**18, \"Invalid investment amount for Stage 4\");\r\n        tokenVal = (_BUSDAmount * 10**stage4tokenpriceDecimal) / stage4tokenprice;\r\n        monthlyReward = (tokenVal * 100) / 100; // 100%\r\n    } else {\r\n        revert(\"Invalid stage\");\r\n    }\r\n\r\n    // Check contract and user balances\r\n   BEP20 sendToken = BEP20(buyTokenAddr);\r\n    BEP20 receiveToken = BEP20(0xD6dBa8569B5cf36CAF127e78C7aF8cc3b869AbF9); // Testnet\r\n\r\n   require(sendToken.balanceOf(address(this)) >= tokenVal, \"Insufficient contract balance\");\r\n   require(receiveToken.balanceOf(msg.sender) >= _BUSDAmount, \"Insufficient user BUSD balance\");\r\n\r\n    // Transfer BUSD from the user to the contract\r\n    receiveToken.transferFrom(msg.sender, address(this), _BUSDAmount);\r\n\r\n    // Update investor information\r\n    investors[msg.sender].invested += tokenVal;\r\n    totalInvested += tokenVal;\r\n\r\n    // Emit a deposit event\r\n    emit DepositAt(msg.sender, _stage, tokenVal);\r\n\r\n    // Transfer tokens to the contract\r\n    sendToken.transfer(address(this), tokenVal);\r\n\r\n    // Ensure the user has not already invested\r\n    require(investments[msg.sender].amount == 0, \"Already invested\");\r\n\r\n    // Calculate claim details and store them\r\n    uint256 time = block.timestamp + lockTime;\r\n    uint256 claimMonth = tokenVal / monthlyReward;\r\n\r\n    investments[msg.sender] = Investment({\r\n        amount: tokenVal,\r\n        lastClaim: block.timestamp,\r\n        monthlyReward: monthlyReward,\r\n        totalmonth: claimMonth\r\n    });\r\n\r\n    for (uint256 i = 1; i <= claimMonth; i++) {\r\n        claim[msg.sender].amounts.push(monthlyReward);\r\n        claim[msg.sender].times.push(time + (i - 1) * 30 days); // 30 days in a month\r\n        claim[msg.sender].withdrawn.push(false);\r\n    }\r\n\r\n    // Reset the user's claim index\r\n    userIndex[msg.sender] = 0;\r\n}\r\n\r\n             // Set buy price  Stage1 \r\n    function setStage1BuyPrice(uint _price, uint _decimal) public {\r\n      require(msg.sender == owner, \"Only owner\");\r\n      stage1tokenPrice        = _price;\r\n      stage1tokenPriceDecimal = _decimal;\r\n    }\r\n\r\n            // Set buy price  Stage2\r\n      function setStage2BuyPrice(uint _price, uint _decimal) public {\r\n      require(msg.sender == owner, \"Only owner\");\r\n      stage2tokenPrice        = _price;\r\n      stage2tokenPriceDecimal = _decimal;\r\n    }\r\n\r\n            // Set buy price  Stage3\r\n     function setStage3BuyPrice(uint _price, uint _decimal) public {\r\n      require(msg.sender == owner, \"Only owner\");\r\n      stage3tokenprice        = _price;\r\n      stage3tokenPriceDecimal = _decimal;\r\n    }\r\n\r\n            // Set buy price  Stage4\r\n     function setStage4BuyPrice(uint _price, uint _decimal) public {\r\n      require(msg.sender == owner, \"Only owner\");\r\n      stage4tokenprice        = _price;\r\n      stage4tokenpriceDecimal = _decimal;\r\n    }\r\n\r\n    \r\n    // Owner Token Withdraw    \r\n    // Only owner can withdraw token \r\n    function withdrawToken(address tokenAddress, address to, uint amount) public returns(bool) {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot send to zero address\");\r\n        BEP20 _token = BEP20(tokenAddress);\r\n        _token.transfer(to, amount);\r\n        return true;\r\n    }\r\n    \r\n    // Owner BNB Withdraw\r\n    // Only owner can withdraw BNB from contract\r\n    function withdrawBNB(address payable to, uint amount) public returns(bool) {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot send to zero address\");\r\n        to.transfer(amount);\r\n        return true;\r\n    }\r\n    \r\n    // Ownership Transfer\r\n    // Only owner can call this function\r\n    function transferOwnership(address to) public returns(bool) {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot transfer ownership to zero address\");\r\n        owner = to;\r\n        emit OwnershipTransferred(to);\r\n        return true;\r\n    }\r\n       \r\n       // check Claim Deatils \r\n\r\n     function checkclaimuserDetails(address userAdd) public view returns (uint[] memory amounts, uint[] memory times, bool[] memory withdrawn) {\r\n        uint len = claim[userAdd].amounts.length;\r\n        amounts = new uint[](len);\r\n        times = new uint[](len);\r\n        withdrawn = new bool[](len);\r\n        for(uint i = 0; i <len; i++){\r\n            amounts[i] = claim[userAdd].amounts[i]; \r\n            times[i] = claim[userAdd].times[i];\r\n            withdrawn[i] = claim[userAdd].withdrawn[i];\r\n        }\r\n        return (amounts, times, withdrawn);\r\n    }  \r\n\r\n\r\nfunction claimMonthlyReward() external {\r\n    uint index = userIndex[msg.sender];\r\n    uint timeLimit = claim[msg.sender].times[index];\r\n    Investment storage investment = investments[msg.sender];\r\n    require(investment.amount > 0, \"No investment found\");\r\n    require(block.timestamp > timeLimit, \"Claim not available yet\");\r\n\r\n    BEP20 token = BEP20(buyTokenAddr);  // Declare token variable\r\n\r\n    // Update the last claim timestamp\r\n    investment.lastClaim = block.timestamp;\r\n    userIndex[msg.sender] = index + 1;\r\n    claim[msg.sender].withdrawn[index] = true;\r\n\r\n    uint256 claimReward = investment.monthlyReward;\r\n\r\n    // Transfer the monthly reward to the user\r\n    token.transfer(msg.sender, claimReward);\r\n}\r\n\r\n\r\n    // update stage1 timestame \r\n    function updateStage1Timestamps(uint _min1, uint _max2) public {\r\n    require(msg.sender == owner, \"Only owner can update timestamps\");\r\n    stagemin1 = _min1;\r\n    stagemax1 = _max2;\r\n}\r\n        // update stage2 timestamp\r\n    function updateStage2Timestamps(uint _min1, uint _max2) public {\r\n    require(msg.sender == owner, \"Only owner can update timestamps\");\r\n    stagemin2 = _min1;\r\n    stagemax2 = _max2;\r\n}\r\n        // update stage3 timestamp \r\n     function updateStage3Timestamps(uint _min1, uint _max2) public {\r\n    require(msg.sender == owner, \"Only owner can update timestamps\");\r\n    stagemin3 = _min1;\r\n    stagemax3 = _max2;\r\n}   \r\n\r\n        // update  stage 4 timestamp    \r\n    function updateStage4Timestamps(uint _min1, uint _max2) public {\r\n    require(msg.sender == owner, \"Only owner can update timestamps\");\r\n    stagemin4 = _min1;\r\n    stagemax4 = _max2;\r\n}\r\n\r\n\r\nfunction getusdtandbusdamount() public view returns (uint) {\r\n        uint  amount; \r\n\r\n        if (stagemin1 <= block.timestamp && block.timestamp <= stagemax1) {\r\n           amount = 1000;\r\n        }\r\n        if (stagemin2 <= block.timestamp && block.timestamp <= stagemax2) {\r\n           amount = 500;\r\n        }\r\n        if (stagemin3 <= block.timestamp && block.timestamp <= stagemax3) {\r\n          amount = 200;\r\n        }\r\n        if (stagemin4 <= block.timestamp && block.timestamp <= stagemax4) {\r\n           amount = 50;\r\n        //  require(amount <= 1000, \"Amount exceeds maximum for Stage 4\");\r\n        }\r\n        return amount;\r\n    }\r\n    \r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tariff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositAt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tariff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BUSDAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"buyTokenWithBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"buyTokenWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAdd\",\"type\":\"address\"}],\"name\":\"checkclaimuserDetails\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"times\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"withdrawn\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMonthlyReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getusdtandbusdamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthlyReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalmonth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockingTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"setStage1BuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"setStage2BuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"setStage3BuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"setStage4BuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage1tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage1tokenPriceDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage2tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage2tokenPriceDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage3tokenPriceDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage3tokenprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage4tokenprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage4tokenpriceDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagemax1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagemax2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagemax3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagemax4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagemin1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagemin2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagemin3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagemin4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tariffs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max2\",\"type\":\"uint256\"}],\"name\":\"updateStage1Timestamps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max2\",\"type\":\"uint256\"}],\"name\":\"updateStage2Timestamps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max2\",\"type\":\"uint256\"}],\"name\":\"updateStage3Timestamps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max2\",\"type\":\"uint256\"}],\"name\":\"updateStage4Timestamps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "arthafintechIDO", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b81e8ab154b1bcafd49f3cf0566af90156c29bc0ed55c2c063750e9959a52b25"}