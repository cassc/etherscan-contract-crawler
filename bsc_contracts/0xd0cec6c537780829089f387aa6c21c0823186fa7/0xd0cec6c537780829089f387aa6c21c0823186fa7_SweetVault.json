{"SourceCode": "/**\r\n                                                         __\r\n     _____      __      ___    ___     ___     __       /\\_\\    ___\r\n    /\\ '__`\\  /'__`\\   /'___\\ / __`\\  /'___\\ /'__`\\     \\/\\ \\  / __`\\\r\n    \\ \\ \\_\\ \\/\\ \\_\\.\\_/\\ \\__//\\ \\_\\ \\/\\ \\__//\\ \\_\\.\\_  __\\ \\ \\/\\ \\_\\ \\\r\n     \\ \\ ,__/\\ \\__/.\\_\\ \\____\\ \\____/\\ \\____\\ \\__/.\\_\\/\\_\\\\ \\_\\ \\____/\r\n      \\ \\ \\/  \\/__/\\/_/\\/____/\\/___/  \\/____/\\/__/\\/_/\\/_/ \\/_/\\/___/\r\n       \\ \\_\\\r\n        \\/_/\r\n\r\n    The sweetest DeFi portfolio manager.\r\n\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v3.4.1\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.1\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/ReentrancyGuard.sol@v3.4.1\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.1\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.1\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v3.4.1\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v3.4.1\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IFarm.sol\r\n\r\ninterface IFarm {\r\n    function poolLength() external view returns (uint256);\r\n\r\n    function userInfo(uint256 _pid, address _user) external view returns (uint256);\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\r\n\r\n    // View function to see pending CAKEs on frontend.\r\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\r\n    function pendingBSW(uint256 _pid, address _user) external view returns (uint256);\r\n    function pendingWex(uint256 _pid, address _user) external view returns (uint256);\r\n    function pendingTree(uint256 _pid, address _user) external view returns (uint256);\r\n\r\n    // Deposit LP tokens to MasterChef for CAKE allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n    function deposit(uint256 _pid, uint256 _amount, bool _withdrawRewards) external;\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n    function withdraw(uint256 _pid, uint256 _amount, bool _withdrawRewards) external;\r\n\r\n    // Stake CAKE tokens to MasterChef\r\n    function enterStaking(uint256 _amount) external;\r\n\r\n    // Withdraw CAKE tokens from STAKING.\r\n    function leaveStaking(uint256 _amount) external;\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IPancakeRouter01.sol\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IPacocaVault.sol\r\n\r\ninterface IPacocaVault {\r\n    event Deposit(address indexed sender, uint256 amount, uint256 shares, uint256 lastDepositedTime);\r\n    event Withdraw(address indexed sender, uint256 amount, uint256 shares);\r\n\r\n    function deposit(uint256 _amount) external;\r\n\r\n    function withdraw(uint256 _shares) external;\r\n\r\n    function getPricePerFullShare() external view returns (uint256);\r\n\r\n    function userInfo(address _user) external view returns (\r\n        uint256 shares,\r\n        uint256 lastDepositedTime,\r\n        uint256 pacocaAtLastUserAction,\r\n        uint256 lastUserActionTime\r\n    );\r\n}\r\n\r\n\r\n// File contracts/SweetVault.sol\r\n\r\ncontract SweetVault is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct UserInfo {\r\n        // How many assets the user has provided.\r\n        uint256 stake;\r\n        // How many staked $PACOCA user had at his last action\r\n        uint256 autoPacocaShares;\r\n        // Pacoca shares not entitled to the user\r\n        uint256 rewardDebt;\r\n        // Timestamp of last user deposit\r\n        uint256 lastDepositedTime;\r\n    }\r\n\r\n    // Addresses\r\n    address constant public WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    IERC20 constant public PACOCA = IERC20(0x55671114d774ee99D653D6C12460c780a67f1D18);\r\n    IPacocaVault immutable public AUTO_PACOCA;\r\n    IERC20 immutable public STAKED_TOKEN;\r\n\r\n    // Runtime data\r\n    mapping(address => UserInfo) public userInfo; // Info of users\r\n    uint256 public accSharesPerStakedToken; // Accumulated AUTO_PACOCA shares per staked token, times 1e18.\r\n\r\n    // Farm info\r\n    IFarm immutable public STAKED_TOKEN_FARM;\r\n    IERC20 immutable public FARM_REWARD_TOKEN;\r\n    uint256 immutable public FARM_PID;\r\n    bool immutable public IS_CAKE_STAKING;\r\n    bool immutable public IS_WAULT;\r\n    bool immutable public IS_BISWAP;\r\n\r\n    // Settings\r\n    IPancakeRouter01 immutable public router;\r\n    address[] public pathToPacoca; // Path from staked token to PACOCA\r\n    address[] public pathToWbnb; // Path from staked token to WBNB\r\n\r\n    address public treasury;\r\n    address public keeper;\r\n    uint256 public keeperFee = 50; // 0.5%\r\n    uint256 public constant keeperFeeUL = 100; // 1%\r\n\r\n    address public platform;\r\n    uint256 public platformFee;\r\n    uint256 public constant platformFeeUL = 500; // 5%\r\n\r\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public buyBackRate;\r\n    uint256 public constant buyBackRateUL = 300; // 5%\r\n\r\n    uint256 public earlyWithdrawFee = 100; // 1%\r\n    uint256 public constant earlyWithdrawFeeUL = 300; // 3%\r\n    uint256 public constant withdrawFeePeriod = 3 days;\r\n\r\n    event Deposit(address indexed user, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    event EarlyWithdraw(address indexed user, uint256 amount, uint256 fee);\r\n    event ClaimRewards(address indexed user, uint256 shares, uint256 amount);\r\n\r\n    // Setting updates\r\n    event SetPathToPacoca(address[] oldPath, address[] newPath);\r\n    event SetPathToWbnb(address[] oldPath, address[] newPath);\r\n    event SetBuyBackRate(uint256 oldBuyBackRate, uint256 newBuyBackRate);\r\n    event SetTreasury(address oldTreasury, address newTreasury);\r\n    event SetKeeper(address oldKeeper, address newKeeper);\r\n    event SetKeeperFee(uint256 oldKeeperFee, uint256 newKeeperFee);\r\n    event SetPlatform(address oldPlatform, address newPlatform);\r\n    event SetPlatformFee(uint256 oldPlatformFee, uint256 newPlatformFee);\r\n    event SetEarlyWithdrawFee(uint256 oldEarlyWithdrawFee, uint256 newEarlyWithdrawFee);\r\n\r\n    constructor(\r\n        address _autoPacoca,\r\n        address _stakedToken,\r\n        address _stakedTokenFarm,\r\n        address _farmRewardToken,\r\n        uint256 _farmPid,\r\n        bool _isCakeStaking,\r\n        address _router,\r\n        address[] memory _pathToPacoca,\r\n        address[] memory _pathToWbnb,\r\n        address _owner,\r\n        address _treasury,\r\n        address _keeper,\r\n        address _platform,\r\n        uint256 _buyBackRate,\r\n        uint256 _platformFee\r\n    ) public {\r\n        require(\r\n            _pathToPacoca[0] == address(_farmRewardToken) && _pathToPacoca[_pathToPacoca.length - 1] == address(PACOCA),\r\n            \"SweetVault: Incorrect path to PACOCA\"\r\n        );\r\n\r\n        require(\r\n            _pathToWbnb[0] == address(_farmRewardToken) && _pathToWbnb[_pathToWbnb.length - 1] == WBNB,\r\n            \"SweetVault: Incorrect path to WBNB\"\r\n        );\r\n\r\n        require(_buyBackRate <= buyBackRateUL);\r\n        require(_platformFee <= platformFeeUL);\r\n\r\n        AUTO_PACOCA = IPacocaVault(_autoPacoca);\r\n        STAKED_TOKEN = IERC20(_stakedToken);\r\n        STAKED_TOKEN_FARM = IFarm(_stakedTokenFarm);\r\n        FARM_REWARD_TOKEN = IERC20(_farmRewardToken);\r\n        FARM_PID = _farmPid;\r\n        IS_CAKE_STAKING = _isCakeStaking;\r\n        IS_WAULT = _stakedTokenFarm == 0x22fB2663C7ca71Adc2cc99481C77Aaf21E152e2D;\r\n        IS_BISWAP = _stakedTokenFarm == 0xDbc1A13490deeF9c3C12b44FE77b503c1B061739;\r\n\r\n        router = IPancakeRouter01(_router);\r\n        pathToPacoca = _pathToPacoca;\r\n        pathToWbnb = _pathToWbnb;\r\n\r\n        buyBackRate = _buyBackRate;\r\n        platformFee = _platformFee;\r\n\r\n        transferOwnership(_owner);\r\n        treasury = _treasury;\r\n        keeper = _keeper;\r\n        platform = _platform;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the keeper.\r\n     */\r\n    modifier onlyKeeper() {\r\n        require(keeper == msg.sender, \"SweetVault: caller is not the keeper\");\r\n        _;\r\n    }\r\n\r\n    // 1. Harvest rewards\r\n    // 2. Collect fees\r\n    // 3. Convert rewards to $PACOCA\r\n    // 4. Stake to pacoca auto-compound vault\r\n    function earn(\r\n        uint256 _minPlatformOutput,\r\n        uint256 _minKeeperOutput,\r\n        uint256 _minBurnOutput,\r\n        uint256 _minPacocaOutput\r\n    ) external onlyKeeper {\r\n        if (IS_CAKE_STAKING) {\r\n            STAKED_TOKEN_FARM.leaveStaking(0);\r\n        } else if (IS_WAULT) {\r\n            STAKED_TOKEN_FARM.withdraw(FARM_PID, 0, true);\r\n        } else {\r\n            STAKED_TOKEN_FARM.withdraw(FARM_PID, 0);\r\n        }\r\n\r\n        uint256 rewardTokenBalance = _rewardTokenBalance();\r\n\r\n        // Collect platform fees\r\n        if (platformFee > 0) {\r\n            _swap(\r\n                rewardTokenBalance.mul(platformFee).div(10000),\r\n                _minPlatformOutput,\r\n                pathToWbnb,\r\n                platform\r\n            );\r\n        }\r\n\r\n        // Collect keeper fees\r\n        if (keeperFee > 0) {\r\n            _swap(\r\n                rewardTokenBalance.mul(keeperFee).div(10000),\r\n                _minKeeperOutput,\r\n                pathToWbnb,\r\n                treasury\r\n            );\r\n        }\r\n\r\n        // Collect Burn fees\r\n        if (buyBackRate > 0) {\r\n            _swap(\r\n                rewardTokenBalance.mul(buyBackRate).div(10000),\r\n                _minBurnOutput,\r\n                pathToPacoca,\r\n                BURN_ADDRESS\r\n            );\r\n        }\r\n\r\n        // Convert remaining rewards to PACOCA\r\n        _swap(\r\n            _rewardTokenBalance(),\r\n            _minPacocaOutput,\r\n            pathToPacoca,\r\n            address(this)\r\n        );\r\n\r\n        uint256 previousShares = totalAutoPacocaShares();\r\n        uint256 pacocaBalance = _pacocaBalance();\r\n\r\n        _approveTokenIfNeeded(\r\n            PACOCA,\r\n            pacocaBalance,\r\n            address(AUTO_PACOCA)\r\n        );\r\n\r\n        AUTO_PACOCA.deposit(pacocaBalance);\r\n\r\n        uint256 currentShares = totalAutoPacocaShares();\r\n\r\n        accSharesPerStakedToken = accSharesPerStakedToken.add(\r\n            currentShares.sub(previousShares).mul(1e18).div(totalStake())\r\n        );\r\n    }\r\n\r\n    function deposit(uint256 _amount) external nonReentrant {\r\n        require(_amount > 0, \"SweetVault: amount must be greater than zero\");\r\n\r\n        UserInfo storage user = userInfo[msg.sender];\r\n\r\n        STAKED_TOKEN.safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        );\r\n\r\n        _approveTokenIfNeeded(\r\n            STAKED_TOKEN,\r\n            _amount,\r\n            address(STAKED_TOKEN_FARM)\r\n        );\r\n\r\n        if (IS_CAKE_STAKING) {\r\n            STAKED_TOKEN_FARM.enterStaking(_amount);\r\n        } else if (IS_WAULT) {\r\n            STAKED_TOKEN_FARM.deposit(FARM_PID, _amount, false);\r\n        } else {\r\n            STAKED_TOKEN_FARM.deposit(FARM_PID, _amount);\r\n        }\r\n\r\n        user.autoPacocaShares = user.autoPacocaShares.add(\r\n            user.stake.mul(accSharesPerStakedToken).div(1e18).sub(\r\n                user.rewardDebt\r\n            )\r\n        );\r\n        user.stake = user.stake.add(_amount);\r\n        user.rewardDebt = user.stake.mul(accSharesPerStakedToken).div(1e18);\r\n        user.lastDepositedTime = block.timestamp;\r\n\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n    function withdraw(uint256 _amount) external nonReentrant {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n\r\n        require(_amount > 0, \"SweetVault: amount must be greater than zero\");\r\n        require(user.stake >= _amount, \"SweetVault: withdraw amount exceeds balance\");\r\n\r\n        if (IS_CAKE_STAKING) {\r\n            STAKED_TOKEN_FARM.leaveStaking(_amount);\r\n        } else if (IS_WAULT) {\r\n            STAKED_TOKEN_FARM.withdraw(FARM_PID, _amount, false);\r\n        } else {\r\n            STAKED_TOKEN_FARM.withdraw(FARM_PID, _amount);\r\n        }\r\n\r\n        uint256 currentAmount = _amount;\r\n\r\n        if (block.timestamp < user.lastDepositedTime.add(withdrawFeePeriod)) {\r\n            uint256 currentWithdrawFee = currentAmount.mul(earlyWithdrawFee).div(10000);\r\n\r\n            STAKED_TOKEN.safeTransfer(treasury, currentWithdrawFee);\r\n\r\n            currentAmount = currentAmount.sub(currentWithdrawFee);\r\n\r\n            emit EarlyWithdraw(msg.sender, _amount, currentWithdrawFee);\r\n        }\r\n\r\n        user.autoPacocaShares = user.autoPacocaShares.add(\r\n            user.stake.mul(accSharesPerStakedToken).div(1e18).sub(\r\n                user.rewardDebt\r\n            )\r\n        );\r\n        user.stake = user.stake.sub(_amount);\r\n        user.rewardDebt = user.stake.mul(accSharesPerStakedToken).div(1e18);\r\n\r\n        // Withdraw pacoca rewards if user leaves\r\n        if (user.stake == 0 && user.autoPacocaShares > 0) {\r\n            _claimRewards(user.autoPacocaShares, false);\r\n        }\r\n\r\n        STAKED_TOKEN.safeTransfer(msg.sender, currentAmount);\r\n\r\n        emit Withdraw(msg.sender, currentAmount);\r\n    }\r\n\r\n    function claimRewards(uint256 _shares) external nonReentrant {\r\n        _claimRewards(_shares, true);\r\n    }\r\n\r\n    function _claimRewards(uint256 _shares, bool _update) private {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n\r\n        if (_update) {\r\n            user.autoPacocaShares = user.autoPacocaShares.add(\r\n                user.stake.mul(accSharesPerStakedToken).div(1e18).sub(\r\n                    user.rewardDebt\r\n                )\r\n            );\r\n\r\n            user.rewardDebt = user.stake.mul(accSharesPerStakedToken).div(1e18);\r\n        }\r\n\r\n        require(user.autoPacocaShares >= _shares, \"SweetVault: claim amount exceeds balance\");\r\n\r\n        user.autoPacocaShares = user.autoPacocaShares.sub(_shares);\r\n\r\n        uint256 pacocaBalanceBefore = _pacocaBalance();\r\n\r\n        AUTO_PACOCA.withdraw(_shares);\r\n\r\n        uint256 withdrawAmount = _pacocaBalance().sub(pacocaBalanceBefore);\r\n\r\n        _safePACOCATransfer(msg.sender, withdrawAmount);\r\n\r\n        emit ClaimRewards(msg.sender, _shares, withdrawAmount);\r\n    }\r\n\r\n    function getExpectedOutputs() external view returns (\r\n        uint256 platformOutput,\r\n        uint256 keeperOutput,\r\n        uint256 burnOutput,\r\n        uint256 pacocaOutput\r\n    ) {\r\n        uint256 wbnbOutput = _getExpectedOutput(pathToWbnb);\r\n        uint256 pacocaOutputWithoutFees = _getExpectedOutput(pathToPacoca);\r\n\r\n        platformOutput = wbnbOutput.mul(platformFee).div(10000);\r\n        keeperOutput = wbnbOutput.mul(keeperFee).div(10000);\r\n        burnOutput = pacocaOutputWithoutFees.mul(buyBackRate).div(10000);\r\n\r\n        pacocaOutput = pacocaOutputWithoutFees.sub(\r\n            pacocaOutputWithoutFees.mul(platformFee).div(10000).add(\r\n                pacocaOutputWithoutFees.mul(keeperFee).div(10000)\r\n            ).add(\r\n                pacocaOutputWithoutFees.mul(buyBackRate).div(10000)\r\n            )\r\n        );\r\n    }\r\n\r\n    function _getExpectedOutput(\r\n        address[] memory _path\r\n    ) private view returns (uint256) {\r\n        uint256 pending;\r\n\r\n        if (IS_WAULT) {\r\n            pending = STAKED_TOKEN_FARM.pendingWex(FARM_PID, address(this));\r\n        } else if (IS_BISWAP) {\r\n            pending = STAKED_TOKEN_FARM.pendingBSW(FARM_PID, address(this));\r\n        } else {\r\n            pending = STAKED_TOKEN_FARM.pendingCake(FARM_PID, address(this));\r\n        }\r\n\r\n        uint256 rewards = _rewardTokenBalance().add(pending);\r\n\r\n        uint256[] memory amounts = router.getAmountsOut(rewards, _path);\r\n\r\n        return amounts[amounts.length.sub(1)];\r\n    }\r\n\r\n    function balanceOf(\r\n        address _user\r\n    ) external view returns (\r\n        uint256 stake,\r\n        uint256 pacoca,\r\n        uint256 autoPacocaShares\r\n    ) {\r\n        UserInfo memory user = userInfo[_user];\r\n\r\n        uint256 pendingShares = user.stake.mul(accSharesPerStakedToken).div(1e18).sub(\r\n            user.rewardDebt\r\n        );\r\n\r\n        stake = user.stake;\r\n        autoPacocaShares = user.autoPacocaShares.add(pendingShares);\r\n        pacoca = autoPacocaShares.mul(AUTO_PACOCA.getPricePerFullShare()).div(1e18);\r\n    }\r\n\r\n    function _approveTokenIfNeeded(\r\n        IERC20 _token,\r\n        uint256 _amount,\r\n        address _spender\r\n    ) private {\r\n        if (_token.allowance(address(this), _spender) < _amount) {\r\n            _token.safeIncreaseAllowance(_spender, _amount);\r\n        }\r\n    }\r\n\r\n    function _rewardTokenBalance() private view returns (uint256) {\r\n        return FARM_REWARD_TOKEN.balanceOf(address(this));\r\n    }\r\n\r\n    function _pacocaBalance() private view returns (uint256) {\r\n        return PACOCA.balanceOf(address(this));\r\n    }\r\n\r\n    function totalStake() public view returns (uint256) {\r\n        return STAKED_TOKEN_FARM.userInfo(FARM_PID, address(this));\r\n    }\r\n\r\n    function totalAutoPacocaShares() public view returns (uint256) {\r\n        (uint256 shares, , ,) = AUTO_PACOCA.userInfo(address(this));\r\n\r\n        return shares;\r\n    }\r\n\r\n    // Safe PACOCA transfer function, just in case if rounding error causes pool to not have enough\r\n    function _safePACOCATransfer(address _to, uint256 _amount) private {\r\n        uint256 balance = _pacocaBalance();\r\n\r\n        if (_amount > balance) {\r\n            PACOCA.transfer(_to, balance);\r\n        } else {\r\n            PACOCA.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    function _swap(\r\n        uint256 _inputAmount,\r\n        uint256 _minOutputAmount,\r\n        address[] memory _path,\r\n        address _to\r\n    ) private {\r\n        _approveTokenIfNeeded(\r\n            FARM_REWARD_TOKEN,\r\n            _inputAmount,\r\n            address(router)\r\n        );\r\n\r\n        router.swapExactTokensForTokens(\r\n            _inputAmount,\r\n            _minOutputAmount,\r\n            _path,\r\n            _to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setPathToPacoca(address[] memory _path) external onlyOwner {\r\n        require(\r\n            _path[0] == address(FARM_REWARD_TOKEN) && _path[_path.length - 1] == address(PACOCA),\r\n            \"SweetVault: Incorrect path to PACOCA\"\r\n        );\r\n\r\n        address[] memory oldPath = pathToPacoca;\r\n\r\n        pathToPacoca = _path;\r\n\r\n        emit SetPathToPacoca(oldPath, pathToPacoca);\r\n    }\r\n\r\n    function setPathToWbnb(address[] memory _path) external onlyOwner {\r\n        require(\r\n            _path[0] == address(FARM_REWARD_TOKEN) && _path[_path.length - 1] == WBNB,\r\n            \"SweetVault: Incorrect path to WBNB\"\r\n        );\r\n\r\n        address[] memory oldPath = pathToWbnb;\r\n\r\n        pathToWbnb = _path;\r\n\r\n        emit SetPathToWbnb(oldPath, pathToWbnb);\r\n    }\r\n\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        address oldTreasury = treasury;\r\n\r\n        treasury = _treasury;\r\n\r\n        emit SetTreasury(oldTreasury, treasury);\r\n    }\r\n\r\n    function setKeeper(address _keeper) external onlyOwner {\r\n        address oldKeeper = keeper;\r\n\r\n        keeper = _keeper;\r\n\r\n        emit SetKeeper(oldKeeper, keeper);\r\n    }\r\n\r\n    function setKeeperFee(uint256 _keeperFee) external onlyOwner {\r\n        require(_keeperFee <= keeperFeeUL, \"SweetVault: Keeper fee too high\");\r\n\r\n        uint256 oldKeeperFee = keeperFee;\r\n\r\n        keeperFee = _keeperFee;\r\n\r\n        emit SetKeeperFee(oldKeeperFee, keeperFee);\r\n    }\r\n\r\n    function setPlatform(address _platform) external onlyOwner {\r\n        address oldPlatform = platform;\r\n\r\n        platform = _platform;\r\n\r\n        emit SetPlatform(oldPlatform, platform);\r\n    }\r\n\r\n    function setPlatformFee(uint256 _platformFee) external onlyOwner {\r\n        require(_platformFee <= platformFeeUL, \"SweetVault: Platform fee too high\");\r\n\r\n        uint256 oldPlatformFee = platformFee;\r\n\r\n        platformFee = _platformFee;\r\n\r\n        emit SetPlatformFee(oldPlatformFee, platformFee);\r\n    }\r\n\r\n    function setBuyBackRate(uint256 _buyBackRate) external onlyOwner {\r\n        require(\r\n            _buyBackRate <= buyBackRateUL,\r\n            \"SweetVault: Buy back rate too high\"\r\n        );\r\n\r\n        uint256 oldBuyBackRate = buyBackRate;\r\n\r\n        buyBackRate = _buyBackRate;\r\n\r\n        emit SetBuyBackRate(oldBuyBackRate, buyBackRate);\r\n    }\r\n\r\n    function setEarlyWithdrawFee(uint256 _earlyWithdrawFee) external onlyOwner {\r\n        require(\r\n            _earlyWithdrawFee <= earlyWithdrawFeeUL,\r\n            \"SweetVault: Early withdraw fee too high\"\r\n        );\r\n\r\n        uint256 oldEarlyWithdrawFee = earlyWithdrawFee;\r\n\r\n        earlyWithdrawFee = _earlyWithdrawFee;\r\n\r\n        emit SetEarlyWithdrawFee(oldEarlyWithdrawFee, earlyWithdrawFee);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoPacoca\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedTokenFarm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmRewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_farmPid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isCakeStaking\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_pathToPacoca\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pathToWbnb\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"EarlyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBuyBackRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyBackRate\",\"type\":\"uint256\"}],\"name\":\"SetBuyBackRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEarlyWithdrawFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEarlyWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"SetEarlyWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldKeeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"SetKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldKeeperFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newKeeperFee\",\"type\":\"uint256\"}],\"name\":\"SetKeeperFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"oldPath\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newPath\",\"type\":\"address[]\"}],\"name\":\"SetPathToPacoca\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"oldPath\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newPath\",\"type\":\"address[]\"}],\"name\":\"SetPathToWbnb\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPlatform\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPlatform\",\"type\":\"address\"}],\"name\":\"SetPlatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPlatformFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPlatformFee\",\"type\":\"uint256\"}],\"name\":\"SetPlatformFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUTO_PACOCA\",\"outputs\":[{\"internalType\":\"contract IPacocaVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FARM_PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FARM_REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_BISWAP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_CAKE_STAKING\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_WAULT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACOCA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKED_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKED_TOKEN_FARM\",\"outputs\":[{\"internalType\":\"contract IFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accSharesPerStakedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pacoca\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoPacocaShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRateUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawFeeUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPlatformOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minKeeperOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBurnOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPacocaOutput\",\"type\":\"uint256\"}],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedOutputs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"platformOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keeperOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pacocaOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperFeeUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathToPacoca\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathToWbnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeeUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"}],\"name\":\"setBuyBackRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earlyWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"setEarlyWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keeperFee\",\"type\":\"uint256\"}],\"name\":\"setKeeperFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setPathToPacoca\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setPathToWbnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"setPlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAutoPacocaShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoPacocaShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SweetVault", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d0cec3a6a0a905a643fa1b0502049fe1ebc0ee36000000000000000000000000fd1ef328a17a8e8eeaf7e4ea1ed8a108e1f2d0960000000000000000000000005c8d727b265dbafaba67e050f2f739caeeb4a6f9000000000000000000000000603c7f932ed1fc6575303d8fb018fdcbb0f39a9500000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cf0febd3f17cef5b47b0cd257acf6025c5bff3b700000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000097b36d12936fa7e2b7746d3c6e76f464466923f90000000000000000000000000552e3a7bfae95f1ae7ceb1bed4d7d5eec38ae2a000000000000000000000000d0ceee9b502320c57467918a7fb4cab1c2efc7370000000000000000000000000552e3a7bfae95f1ae7ceb1bed4d7d5eec38ae2a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000603c7f932ed1fc6575303d8fb018fdcbb0f39a95000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000055671114d774ee99d653d6c12460c780a67f1d180000000000000000000000000000000000000000000000000000000000000002000000000000000000000000603c7f932ed1fc6575303d8fb018fdcbb0f39a95000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://39255cd9462119bc6f120dd43d3f20aa8b8692c17adc3b72ae2b25dedbc53479"}