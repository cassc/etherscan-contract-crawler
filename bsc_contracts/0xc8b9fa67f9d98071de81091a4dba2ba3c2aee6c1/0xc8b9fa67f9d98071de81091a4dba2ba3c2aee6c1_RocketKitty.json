{"SourceCode": "/*\r\n\r\n                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n                        @@@@@@    @@@@@@@@@@@@@@@@@@    @@@@@@\r\n                        @@@@@      @@@@@@@@@@@@@@@@      @@@@@\r\n                        @@@@         @@@@@@@@@@@@         @@@@\r\n                        @@@           @@@@@@@@@@           @@@\r\n                        @@@      @@@@@@@@@@@@@@@@@@@@      @@@\r\n                        @@@    @@@@@@@@@@@@@@@@@@@@@@@@#   @@@\r\n                        @@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@\r\n                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n                        @@@@   @@  @ @@@@@@@@@@@@  @  @@ @@@@@\r\n                        @@@@@   @@@    @@@@@@@@    @@@   @@@@@\r\n                        @@@@@@         @@@@@@@@         @@@@@@\r\n                        @@@@@@@@@       @@@@@        @@@@@@@@@\r\n                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n                    \r\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\r\n  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551 \u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551 \u2588\u2588\u2554\u255d\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\r\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2557     \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551    \u255a\u2588\u2588\u2588\u2588\u2554\u255d \r\n  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u255d     \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2588\u2588\u2557 \u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551     \u255a\u2588\u2588\u2554\u255d  \r\n  \u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557   \u2588\u2588\u2551   \u2588\u2588\u2551  \u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551      \u2588\u2588\u2551   \r\n  \u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d   \u255a\u2550\u255d      \u255a\u2550\u255d      \u255a\u2550\u255d  \r\n  \r\n    \r\n    ROCKETKITTY is a community owned token. We've included a burn mechanism that rewards holders at 100, 200, 300, 400 and 500 holder milestones.\r\n\r\n    50     holders - NO BURN                                           -  5 BNB added to liquidity & Locked\r\n    \r\n    100    holders - 10 Quadrillion Tokens burnt (10% of total supply) - 10 BNB added to liquidity & Locked\r\n\r\n    200    holders - 10 Quadrillion Tokens burnt (10% of total supply) - 17 BNB added to liquidity & Locked\r\n\r\n    300    holders - 10 Quadrillion Tokens burnt (10% of total supply) - 17 BNB added to liquidity & Locked\r\n\r\n    400    holders - 10 Quadrillion Tokens burnt (10% of total supply) - 17 BNB added to liquidity & Locked\r\n\r\n    500    holders - 10 Quadrillion Tokens burnt (10% of total supply) - 17 BNB added to liquidity & Locked\r\n    \r\n    After 500 Hodlers %50 of Tokens will be burned!!!\r\n    \r\n    \r\n    There will be a DexSale to help with liquidity. We want to raise 100 BNB.\r\n    \r\n    75% will be added as liquidy and locked away till 2022.\r\n    \r\n    15% will go to TEAM fees, Marketing etc.\r\n    \r\n    Project TEAM will only hold 1% of supply.\r\n    \r\n    Token sale will be capped at 100 BNB with MAX buys of 2 BNB per address @ a price of 1 BNB = 100 000 000 000 000 (100 Trillion)\r\n    \r\n    As soon as the HardCap of the Token sale is met, RocketKitty will be listed on Pancakeswap with a price of 1 BNB = 50 000 000 000 000 (50 Trillion)\r\n    \r\n    RocketKitty will have a slow start with just 2 BNB added to liquidity so no whales can dump.\r\n\r\n    As more holders buy, bigger buys can be made.\r\n    \r\n    \r\n    \r\n    4% FEES PER TRANSACTION\r\n\r\n    - 2% fee per transaction auto add to the liquidity pool\r\n\r\n    - 1.2% fee per transaction auto distributed to holders\r\n\r\n    - 0.8% fee per transaction auto burned\r\n  \r\n\r\nTelegram: t.me/rocketkitty\r\nWebsite : www.rocketkitty.space\r\n\r\n\r\n  */\r\n\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\ninterface IERC20 {\r\n\r\n\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n   \r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b <= a, errorMessage);\r\n\r\n        uint256 c = a - b;\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n       \r\n\r\n        if (a == 0) {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n\r\n\r\n        uint256 c = a * b;\r\n\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b > 0, errorMessage);\r\n\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n   \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b != 0, errorMessage);\r\n\r\n        return a % b;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n\r\n        return msg.sender;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\r\n        return msg.data;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlibrary Address {\r\n\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n       \r\n\r\n        bytes32 codehash;\r\n\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\r\n       \r\n\r\n        assembly { codehash := extcodehash(account) }\r\n\r\n        return (codehash != accountHash && codehash != 0x0);\r\n\r\n    }\r\n\r\n\r\n\r\n    \r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n\r\n    }\r\n\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n\r\n\r\n      \r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n\r\n        if (success) {\r\n\r\n            return returndata;\r\n\r\n        } else {\r\n\r\n           \r\n\r\n            if (returndata.length > 0) {\r\n\r\n              \r\n\r\n                assembly {\r\n\r\n                    let returndata_size := mload(returndata)\r\n\r\n                    revert(add(32, returndata), returndata_size)\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                revert(errorMessage);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n    address private _previousOwner;\r\n\r\n    uint256 private _lockTime;\r\n\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n    constructor () internal {\r\n\r\n        address msgSender = _msgSender();\r\n\r\n        _owner = msgSender;\r\n\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n\r\n    function owner() public view returns (address) {\r\n\r\n        return _owner;\r\n\r\n    }\r\n\r\n\r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n\r\n        _owner = address(0);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        _owner = newOwner;\r\n\r\n    }\r\n\r\n\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n\r\n        return _lockTime;\r\n\r\n    }\r\n\r\n\r\n\r\n   \r\n\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n\r\n        _previousOwner = _owner;\r\n\r\n        _owner = address(0);\r\n\r\n        _lockTime = now + time;\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n\r\n    }\r\n\r\n    \r\n\r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n\r\n    function unlock() public virtual {\r\n\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n\r\n        require(now > _lockTime , \"Contract is locked until 7 days\");\r\n\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n\r\n        _owner = _previousOwner;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n\r\n    event Swap(\r\n\r\n        address indexed sender,\r\n\r\n        uint amount0In,\r\n\r\n        uint amount1In,\r\n\r\n        uint amount0Out,\r\n\r\n        uint amount1Out,\r\n\r\n        address indexed to\r\n\r\n    );\r\n\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n\r\n\r\n    function initialize(address, address) external;\r\n\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n\r\n\r\n    function addLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint amountADesired,\r\n\r\n        uint amountBDesired,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint amountTokenDesired,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n\r\n        uint amountOut,\r\n\r\n        uint amountInMax,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        payable\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        payable\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountETH);\r\n\r\n\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract RocketKitty is Context, IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    using Address for address;\r\n\r\n\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n\r\n    mapping (address => uint256) private _tOwned;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n\r\n\r\n    mapping (address => bool) private _isExcluded;\r\n\r\n    address[] private _excluded;\r\n\r\n   \r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 private _tTotal = 100000000000 * 10**6 * 10**9;\r\n\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    uint256 private _tFeeTotal;\r\n\r\n\r\n\r\n    string private _name = \"RocketKitty\";\r\n\r\n    string private _symbol = \"RK\";\r\n\r\n    uint8 private _decimals = 9;\r\n\r\n    \r\n\r\n    uint256 public _taxFee = 2;\r\n\r\n    uint256 private _previousTaxFee = _taxFee;\r\n\r\n    \r\n\r\n    uint256 public _liquidityFee = 2;\r\n\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n\r\n\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n\r\n    address public immutable uniswapV2Pair;\r\n\r\n    \r\n\r\n    bool inSwapAndLiquify;\r\n\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    \r\n\r\n    uint256 public _maxTxAmount = 500000000 * 10**6 * 10**9;\r\n\r\n    uint256 private numTokensSellToAddToLiquidity = 50000000 * 10**6 * 10**9;\r\n\r\n    \r\n\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n\r\n    event SwapAndLiquify(\r\n\r\n        uint256 tokensSwapped,\r\n\r\n        uint256 ethReceived,\r\n\r\n        uint256 tokensIntoLiqudity\r\n\r\n    );\r\n\r\n    \r\n\r\n    modifier lockTheSwap {\r\n\r\n        inSwapAndLiquify = true;\r\n\r\n        _;\r\n\r\n        inSwapAndLiquify = false;\r\n\r\n    }\r\n\r\n    \r\n\r\n    constructor () public {\r\n\r\n        _rOwned[_msgSender()] = _rTotal;\r\n\r\n        \r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F);\r\n\r\n         // Create a uniswap pair for this new token\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n\r\n\r\n        // set the rest of the contract variables\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        \r\n\r\n        //exclude owner and this contract from fee\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        \r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n\r\n    }\r\n\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n\r\n        return _name;\r\n\r\n    }\r\n\r\n\r\n\r\n    function symbol() public view returns (string memory) {\r\n\r\n        return _symbol;\r\n\r\n    }\r\n\r\n\r\n\r\n    function decimals() public view returns (uint8) {\r\n\r\n        return _decimals;\r\n\r\n    }\r\n\r\n\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n\r\n        return _tTotal;\r\n\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n\r\n        return tokenFromReflection(_rOwned[account]);\r\n\r\n    }\r\n\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\r\n        _transfer(_msgSender(), recipient, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n\r\n        return _allowances[owner][spender];\r\n\r\n    }\r\n\r\n\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n\r\n        return _isExcluded[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    function totalFees() public view returns (uint256) {\r\n\r\n        return _tFeeTotal;\r\n\r\n    }\r\n\r\n\r\n\r\n    function deliver(uint256 tAmount) public {\r\n\r\n        address sender = _msgSender();\r\n\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n\r\n        (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        _rTotal = _rTotal.sub(rAmount);\r\n\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n\r\n        if (!deductTransferFee) {\r\n\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n\r\n            return rAmount;\r\n\r\n        } else {\r\n\r\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n\r\n            return rTransferAmount;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n\r\n        uint256 currentRate =  _getRate();\r\n\r\n        return rAmount.div(currentRate);\r\n\r\n    }\r\n\r\n\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n\r\n        \r\n\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n\r\n        if(_rOwned[account] > 0) {\r\n\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n\r\n        }\r\n\r\n        _isExcluded[account] = true;\r\n\r\n        _excluded.push(account);\r\n\r\n    }\r\n\r\n\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n\r\n            if (_excluded[i] == account) {\r\n\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n\r\n                _tOwned[account] = 0;\r\n\r\n                _isExcluded[account] = false;\r\n\r\n                _excluded.pop();\r\n\r\n                break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n        function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \r\n\r\n        _takeLiquidity(tLiquidity);\r\n\r\n        _reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n    }\r\n\r\n    \r\n\r\n        function excludeFromFee(address account) public onlyOwner {\r\n\r\n        _isExcludedFromFee[account] = true;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n\r\n        _isExcludedFromFee[account] = false;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\r\n\r\n        _taxFee = taxFee;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\r\n\r\n        _liquidityFee = liquidityFee;\r\n\r\n    }\r\n\r\n   \r\n\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(\r\n\r\n            10**2\r\n\r\n        );\r\n\r\n    }\r\n\r\n\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n\r\n        swapAndLiquifyEnabled = _enabled;\r\n\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n\r\n    }\r\n\r\n    \r\n\r\n     //to recieve ETH from uniswapV2Router when swaping\r\n\r\n    receive() external payable {}\r\n\r\n\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n\r\n        _rTotal = _rTotal.sub(rFee);\r\n\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n\r\n        uint256 rFee = tFee.mul(currentRate);\r\n\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n\r\n        return (rAmount, rTransferAmount, rFee);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _getRate() private view returns(uint256) {\r\n\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n\r\n        return rSupply.div(tSupply);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n\r\n        uint256 rSupply = _rTotal;\r\n\r\n        uint256 tSupply = _tTotal;      \r\n\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n\r\n        }\r\n\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n\r\n        return (rSupply, tSupply);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n\r\n        uint256 currentRate =  _getRate();\r\n\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n\r\n        if(_isExcluded[address(this)])\r\n\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n\r\n        return _amount.mul(_taxFee).div(\r\n\r\n            10**2\r\n\r\n        );\r\n\r\n    }\r\n\r\n\r\n\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n\r\n        return _amount.mul(_liquidityFee).div(\r\n\r\n            10**2\r\n\r\n        );\r\n\r\n    }\r\n\r\n    \r\n\r\n    function removeAllFee() private {\r\n\r\n        if(_taxFee == 0 && _liquidityFee == 0) return;\r\n\r\n        \r\n\r\n        _previousTaxFee = _taxFee;\r\n\r\n        _previousLiquidityFee = _liquidityFee;\r\n\r\n        \r\n\r\n        _taxFee = 0;\r\n\r\n        _liquidityFee = 0;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function restoreAllFee() private {\r\n\r\n        _taxFee = _previousTaxFee;\r\n\r\n        _liquidityFee = _previousLiquidityFee;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n\r\n        return _isExcludedFromFee[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) private {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if(from != owner() && to != owner())\r\n\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n\r\n\r\n\r\n        // is the token balance of this contract address over the min number of\r\n\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n\r\n        // also, don't get caught in a circular liquidity event.\r\n\r\n        // also, don't swap & liquify if sender is uniswap pair.\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        \r\n\r\n        if(contractTokenBalance >= _maxTxAmount)\r\n\r\n        {\r\n\r\n            contractTokenBalance = _maxTxAmount;\r\n\r\n        }\r\n\r\n        \r\n\r\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\r\n\r\n        if (\r\n\r\n            overMinTokenBalance &&\r\n\r\n            !inSwapAndLiquify &&\r\n\r\n            from != uniswapV2Pair &&\r\n\r\n            swapAndLiquifyEnabled\r\n\r\n        ) {\r\n\r\n            contractTokenBalance = numTokensSellToAddToLiquidity;\r\n\r\n            //add liquidity\r\n\r\n            swapAndLiquify(contractTokenBalance);\r\n\r\n        }\r\n\r\n        \r\n\r\n        //indicates if fee should be deducted from transfer\r\n\r\n        bool takeFee = true;\r\n\r\n        \r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n\r\n            takeFee = false;\r\n\r\n        }\r\n\r\n        \r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n\r\n        _tokenTransfer(from,to,amount,takeFee);\r\n\r\n    }\r\n\r\n\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n\r\n        // split the contract balance into halves\r\n\r\n        uint256 half = contractTokenBalance.div(2);\r\n\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n\r\n\r\n        // capture the contract's current ETH balance.\r\n\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n\r\n        // has been manually sent to the contract\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n\r\n\r\n        // swap tokens for ETH\r\n\r\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n\r\n\r\n        // how much ETH did we just swap into?\r\n\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n\r\n\r\n        // add liquidity to uniswap\r\n\r\n        addLiquidity(otherHalf, newBalance);\r\n\r\n        \r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n\r\n    }\r\n\r\n\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n\r\n        // generate the uniswap pair path of token -> weth\r\n\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = address(this);\r\n\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n\r\n\r\n        // make the swap\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n            tokenAmount,\r\n\r\n            0, // accept any amount of ETH\r\n\r\n            path,\r\n\r\n            address(this),\r\n\r\n            block.timestamp\r\n\r\n        );\r\n\r\n    }\r\n\r\n\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\r\n        // approve token transfer to cover all possible scenarios\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n\r\n\r\n        // add the liquidity\r\n\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n\r\n            address(this),\r\n\r\n            tokenAmount,\r\n\r\n            0, // slippage is unavoidable\r\n\r\n            0, // slippage is unavoidable\r\n\r\n            owner(),\r\n\r\n            block.timestamp\r\n\r\n        );\r\n\r\n    }\r\n\r\n\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n\r\n        if(!takeFee)\r\n\r\n            removeAllFee();\r\n\r\n        \r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n\r\n            _transferFromExcluded(sender, recipient, amount);\r\n\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n\r\n            _transferToExcluded(sender, recipient, amount);\r\n\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n\r\n            _transferStandard(sender, recipient, amount);\r\n\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n\r\n            _transferBothExcluded(sender, recipient, amount);\r\n\r\n        } else {\r\n\r\n            _transferStandard(sender, recipient, amount);\r\n\r\n        }\r\n\r\n        \r\n\r\n        if(!takeFee)\r\n\r\n            restoreAllFee();\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\r\n        _takeLiquidity(tLiquidity);\r\n\r\n        _reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \r\n\r\n        _takeLiquidity(tLiquidity);\r\n\r\n        _reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \r\n\r\n        _takeLiquidity(tLiquidity);\r\n\r\n        _reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RocketKitty", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://40f72321eedd9e0a045a992a43d0f4f2f227aea6062caab51a9d0a59265fa393"}