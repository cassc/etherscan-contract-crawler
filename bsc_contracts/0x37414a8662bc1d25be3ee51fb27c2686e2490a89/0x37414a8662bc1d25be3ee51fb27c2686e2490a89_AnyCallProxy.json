{"SourceCode": "/**\r\n *Submitted for verification at snowtrace.io on 2022-02-11\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.8.6;\r\n\r\ncontract AnyCallProxy {\r\n    // Context information for destination chain targets\r\n    struct Context {\r\n        address sender;\r\n        uint256 fromChainID;\r\n    }\r\n\r\n    // Packed fee information (only 1 storage slot)\r\n    struct FeeData {\r\n        uint128 accruedFees;\r\n        uint128 premium;\r\n    }\r\n\r\n    // Packed MPC transfer info (only 1 storage slot)\r\n    struct TransferData {\r\n        uint96 effectiveTime;\r\n        address pendingMPC;\r\n    }\r\n\r\n    // Extra cost of execution (SSTOREs.SLOADs,ADDs,etc..)\r\n    // TODO: analysis to verify the correct overhead gas usage\r\n    uint256 constant EXECUTION_OVERHEAD = 100000;\r\n\r\n    address public mpc;\r\n    TransferData private _transferData;\r\n\r\n    mapping(address => bool) public blacklist;\r\n    mapping(address => mapping(address => mapping(uint256 => bool))) public whitelist;\r\n    \r\n    Context public context;\r\n\r\n    mapping(address => uint256) public executionBudget;\r\n    FeeData private _feeData;\r\n\r\n    event LogAnyCall(\r\n        address indexed from,\r\n        address indexed to,\r\n        bytes data,\r\n        address _fallback,\r\n        uint256 indexed toChainID\r\n    );\r\n\r\n    event LogAnyExec(\r\n        address indexed from,\r\n        address indexed to,\r\n        bytes data,\r\n        bool success,\r\n        bytes result,\r\n        address _fallback,\r\n        uint256 indexed fromChainID\r\n    );\r\n\r\n    event Deposit(address indexed account, uint256 amount);\r\n    event Withdrawl(address indexed account, uint256 amount);\r\n    event SetBlacklist(address indexed account, bool flag);\r\n    event SetWhitelist(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed toChainID,\r\n        bool flag\r\n    );\r\n    event TransferMPC(address oldMPC, address newMPC, uint256 effectiveTime);\r\n    event UpdatePremium(uint256 oldPremium, uint256 newPremium);\r\n\r\n    constructor(address _mpc, uint128 _premium) {\r\n        mpc = _mpc;\r\n        _feeData.premium = _premium;\r\n\r\n        emit TransferMPC(address(0), _mpc, block.timestamp);\r\n        emit UpdatePremium(0, _premium);\r\n    }\r\n\r\n    /// @dev Access control function\r\n    modifier onlyMPC() {\r\n        require(msg.sender == mpc); // dev: only MPC\r\n        _;\r\n    }\r\n\r\n    /// @dev Charge an account for execution costs on this chain\r\n    /// @param _from The account to charge for execution costs\r\n    modifier charge(address _from) {\r\n        uint256 gasUsed = gasleft() + EXECUTION_OVERHEAD;\r\n        _;\r\n        uint256 totalCost = (gasUsed - gasleft()) * (tx.gasprice + _feeData.premium);\r\n\r\n        executionBudget[_from] -= totalCost;\r\n        _feeData.accruedFees += uint128(totalCost);\r\n    }\r\n\r\n    /**\r\n        @notice Submit a request for a cross chain interaction\r\n        @param _to The target to interact with on `_toChainID`\r\n        @param _data The calldata supplied for the interaction with `_to`\r\n        @param _fallback The address to call back on the originating chain\r\n            if the cross chain interaction fails\r\n        @param _toChainID The target chain id to interact with\r\n    */\r\n    function anyCall(\r\n        address _to,\r\n        bytes calldata _data,\r\n        address _fallback,\r\n        uint256 _toChainID\r\n    ) external {\r\n        require(!blacklist[msg.sender]); // dev: caller is blacklisted\r\n        require(whitelist[msg.sender][_to][_toChainID]); // dev: request denied\r\n\r\n        emit LogAnyCall(msg.sender, _to, _data, _fallback, _toChainID);\r\n    }\r\n\r\n    /**\r\n        @notice Execute a cross chain interaction\r\n        @dev Only callable by the MPC\r\n        @param _from The request originator\r\n        @param _to The cross chain interaction target\r\n        @param _data The calldata supplied for interacting with target\r\n        @param _fallback The address to call on `_fromChainID` if the interaction fails\r\n        @param _fromChainID The originating chain id\r\n    */\r\n    function anyExec(\r\n        address _from,\r\n        address _to,\r\n        bytes calldata _data,\r\n        address _fallback,\r\n        uint256 _fromChainID\r\n    ) external charge(_from) onlyMPC {\r\n        context = Context({sender: _from, fromChainID: _fromChainID});\r\n        (bool success, bytes memory result) = _to.call(_data);\r\n        context = Context({sender: address(0), fromChainID: 0});\r\n\r\n        emit LogAnyExec(_from, _to, _data, success, result, _fallback, _fromChainID);\r\n\r\n        // Call the fallback on the originating chain with the call information (to, data)\r\n        // _from, _fromChainID, _toChainID can all be identified via contextual info\r\n        if (!success && _fallback != address(0)) {\r\n            emit LogAnyCall(\r\n                _from,\r\n                _fallback,\r\n                abi.encodeWithSignature(\"anyFallback(address,bytes)\", _to, _data),\r\n                address(0),\r\n                _fromChainID\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @notice Deposit native currency crediting `_account` for execution costs on this chain\r\n    /// @param _account The account to deposit and credit for\r\n    function deposit(address _account) external payable {\r\n        executionBudget[_account] += msg.value;\r\n        emit Deposit(_account, msg.value);\r\n    }\r\n\r\n    /// @notice Withdraw a previous deposit from your account\r\n    /// @param _amount The amount to withdraw from your account\r\n    function withdraw(uint256 _amount) external {\r\n        executionBudget[msg.sender] -= _amount;\r\n        emit Withdrawl(msg.sender, _amount);\r\n        (bool success,) = msg.sender.call{value: _amount}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    /// @notice Withdraw all accrued execution fees\r\n    /// @dev The MPC is credited in the native currency\r\n    function withdrawAccruedFees() external {\r\n        uint256 fees = _feeData.accruedFees;\r\n        _feeData.accruedFees = 0;\r\n        (bool success,) = mpc.call{value: fees}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    /// @notice Set the whitelist premitting an account to issue a cross chain request\r\n    /// @param _from The account which will submit cross chain interaction requests\r\n    /// @param _to The target of the cross chain interaction\r\n    /// @param _toChainID The target chain id\r\n    function setWhitelist(\r\n        address _from,\r\n        address _to,\r\n        uint256 _toChainID,\r\n        bool _flag\r\n    ) external onlyMPC {\r\n        require(_toChainID != block.chainid, \"AnyCall: Forbidden\");\r\n        whitelist[_from][_to][_toChainID] = _flag;\r\n        emit SetWhitelist(_from, _to, _toChainID, _flag);\r\n    }\r\n\r\n    /// @notice Set an account's blacklist status\r\n    /// @dev A simpler way to deactive an account's permission to issue\r\n    ///     cross chain requests without updating the whitelist\r\n    /// @param _account The account to update blacklist status of\r\n    /// @param _flag The blacklist state to put `_account` in\r\n    function setBlacklist(address _account, bool _flag) external onlyMPC {\r\n        blacklist[_account] = _flag;\r\n        emit SetBlacklist(_account, _flag);\r\n    }\r\n\r\n    /// @notice Set the premimum for cross chain executions\r\n    /// @param _premium The premium per gas\r\n    function setPremium(uint128 _premium) external onlyMPC {\r\n        emit UpdatePremium(_feeData.premium, _premium);\r\n        _feeData.premium = _premium;\r\n    }\r\n\r\n    /// @notice Initiate a transfer of MPC status\r\n    /// @param _newMPC The address of the new MPC\r\n    function changeMPC(address _newMPC) external onlyMPC {\r\n        mpc = _newMPC;\r\n    }\r\n\r\n    /// @notice Get the total accrued fees in native currency\r\n    /// @dev Fees increase when executing cross chain requests\r\n    function accruedFees() external view returns(uint128) {\r\n        return _feeData.accruedFees;\r\n    }\r\n\r\n    /// @notice Get the gas premium cost\r\n    /// @dev This is similar to priority fee in eip-1559, except instead of going\r\n    ///     to the miner it is given to the MPC executing cross chain requests\r\n    function premium() external view returns(uint128) {\r\n        return _feeData.premium;\r\n    }\r\n\r\n    /// @notice Get the effective time at which pendingMPC may become MPC\r\n    function effectiveTime() external view returns(uint256) {\r\n        return _transferData.effectiveTime;\r\n    }\r\n    \r\n    /// @notice Get the address of the pending MPC\r\n    function pendingMPC() external view returns(address) {\r\n        return _transferData.pendingMPC;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mpc\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_premium\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_fallback\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"LogAnyCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_fallback\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"}],\"name\":\"LogAnyExec\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"SetBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"SetWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMPC\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMPC\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveTime\",\"type\":\"uint256\"}],\"name\":\"TransferMPC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPremium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPremium\",\"type\":\"uint256\"}],\"name\":\"UpdatePremium\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawl\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accruedFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_fallback\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toChainID\",\"type\":\"uint256\"}],\"name\":\"anyCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_fallback\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromChainID\",\"type\":\"uint256\"}],\"name\":\"anyExec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMPC\",\"type\":\"address\"}],\"name\":\"changeMPC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"context\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"effectiveTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executionBudget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMPC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_premium\",\"type\":\"uint128\"}],\"name\":\"setPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toChainID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAccruedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AnyCallProxy", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007ff2c8fd909a0f0eab4611343a2197083c5247340000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7b26eb335aed0c1e83479492f6ef7e18621db4515ed7bf7e3d5ce185c9ae4959"}