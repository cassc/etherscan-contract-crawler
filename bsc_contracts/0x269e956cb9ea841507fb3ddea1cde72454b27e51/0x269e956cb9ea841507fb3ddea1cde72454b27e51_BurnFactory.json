{"SourceCode": "/**\r\n burnedfi.com - burn Factory\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        /**\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);*/\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return set._values[index];\r\n    }\r\n\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    function values(AddressSet storage set)\r\n        internal\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n\r\ncontract BurnFactory is Context, Ownable {\r\n    using SafeMath for uint256;\r\n    address public WETH;\r\n    mapping(address => bool)  public uniswapV2Router;\r\n    mapping(address => IUniswapV2Factory)  public uniswapV2Factory;\r\n    \r\n    uint256 public callPay = 0.1 ether;\r\n    uint256 public callFee = 0.005 ether;\r\n    mapping(address => uint256) public subscribeList;\r\n    address public burnContract = 0x19c018e13CFf682e729CC7b5Fb68c8A641bf98A4;\r\n    address public pancakeContract = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    //0x10ED43C718714eb63d5aA57B78B54704E256024E //bsc network\r\n    //0xD99D1c33F9fC3444f8101754aBC46c52416550D1 //testbscnetwork\r\n    function checkSubscribe(address addr,uint256 fee) private{\r\n        if(block.timestamp > subscribeList[addr]){\r\n            require(msg.value >= fee, \"INSUFFICIENT_BALANCE\");\r\n        }\r\n    }\r\n    constructor() {\r\n        _owner = _msgSender();\r\n        IUniswapV2Router02 _route = IUniswapV2Router02(pancakeContract); \r\n        WETH = _route.WETH();\r\n        address factory = _route.factory();\r\n        uniswapV2Factory[address(_route)] = IUniswapV2Factory(factory);\r\n        uniswapV2Router[address(_route)] = true;\r\n    }\r\n    \r\n    function setCallPay(uint256 _price) external onlyOwner {\r\n        callPay = _price;\r\n    }\r\n\r\n    function setCallFee(uint256 _price) external onlyOwner {\r\n        callFee = _price;\r\n    }\r\n    function setRoute(address _addr) external onlyOwner {\r\n        IUniswapV2Router02 _route = IUniswapV2Router02(_addr); \r\n        address factory = _route.factory();\r\n        uniswapV2Factory[address(_route)] = IUniswapV2Factory(factory);\r\n        uniswapV2Router[address(_route)] = true;\r\n    }\r\n    function getPools(\r\n        address routeAddr,\r\n        address[] calldata path\r\n    ) public view returns (address token0,address token1,uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast,uint256 totalSupply) {\r\n        require(uniswapV2Router[routeAddr], \"uniswapV2Router is not\");\r\n        return _getPools(routeAddr,path);\r\n    }\r\n    function _getPools(\r\n        address routeAddr,\r\n        address[] calldata path\r\n    ) private view returns (\r\n        address token0,\r\n        address token1,\r\n        uint112 reserve0,\r\n        uint112 reserve1,\r\n        uint32 blockTimestampLast,\r\n        uint256 totalSupply\r\n        ) {\r\n        require(uniswapV2Router[routeAddr], \"uniswapV2Router is not\");\r\n        address pair = uniswapV2Factory[routeAddr].getPair(path[path.length - 2], path[path.length - 1]);\r\n        IUniswapV2Pair v2pair  = IUniswapV2Pair(pair);\r\n        (\r\n            reserve0,\r\n            reserve1,\r\n            blockTimestampLast\r\n        ) = v2pair.getReserves();\r\n        token0 = v2pair.token0();\r\n        token1 = v2pair.token1();\r\n        totalSupply = v2pair.totalSupply();\r\n    }\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address routeAddr,\r\n        address[] calldata path\r\n    ) public view returns (uint256 deserved) {\r\n        require(uniswapV2Router[routeAddr], \"uniswapV2Router is not\");\r\n        IUniswapV2Router02 _route = IUniswapV2Router02(routeAddr);\r\n        uint256 canValue = amountIn;\r\n        deserved = _route.getAmountsOut(canValue, path)[path.length - 1];\r\n    }\r\n    function gotTax(uint256 amountIn,address routeAddr,address[] calldata path) public payable  {\r\n        require(uniswapV2Router[routeAddr], \"uniswapV2Router is not\");\r\n        IUniswapV2Router02 _route = IUniswapV2Router02(routeAddr);\r\n        (uint256 deserved,uint256 totalAmount,uint256 balance) = _bySwap(_route,amountIn,payable( msg.sender),path,0);\r\n        uint256 _tax =  totalAmount.mul(100).div(deserved);\r\n        string memory str = string(abi.encodePacked(uintToStr(_tax),\":\",uintToStr(balance),\":\",uintToStr(totalAmount),\":\",uintToStr(deserved)));\r\n        require(false, str);\r\n    }\r\n    mapping(address => bool) public tokens;\r\n    function setFeeToken(\r\n        address addr,\r\n        bool flag\r\n    ) external onlyOwner {\r\n        tokens[addr] = flag;\r\n    }\r\n\r\n    function swapTokensForEth(\r\n        address addr,\r\n        uint256 amountIn,\r\n        uint256 slippage\r\n    ) external {\r\n        // generate the uniswap pair path of token -> weth\r\n        require(slippage < 10,\"slippage\");\r\n        require(tokens[addr],\"tokens is not set\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = addr;\r\n        path[1] = WETH;\r\n        IUniswapV2Router02 _route = IUniswapV2Router02(pancakeContract); \r\n        WETH = _route.WETH();\r\n        IERC20 token = IERC20(addr);\r\n        if(amountIn ==0){\r\n            amountIn = token.balanceOf(address(this));\r\n        }\r\n        uint256 balance = payable(burnContract).balance;\r\n        uint256 deserved = _route.getAmountsOut(amountIn, path)[path.length - 1];\r\n        token.approve(address(_route), amountIn);\r\n        // make the swap\r\n        _route.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountIn,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            burnContract,\r\n            block.timestamp\r\n        );\r\n        uint256 totalAmount = payable(burnContract).balance - balance;\r\n        require(((deserved * slippage) / 100) + totalAmount > deserved, \"slippage\");\r\n    }\r\n    \r\n    function receiveETH(uint256 amount) external {\r\n        if (amount == 0) {\r\n            amount = payable(address(this)).balance;\r\n        }\r\n        payable(address(burnContract)).transfer(amount);\r\n    }\r\n\r\n    function uintToStr(uint _i) internal pure returns (string memory) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len;\r\n        while (_i != 0) {\r\n            k = k-1;\r\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n    function normalSwap(uint256 amountIn,uint256 amountOutMin,address routeAddr,address payable to,address[] calldata path,uint256 free) external payable {\r\n        require(uniswapV2Router[routeAddr], \"uniswapV2Router is not\");\r\n        IUniswapV2Router02 _route = IUniswapV2Router02(routeAddr);\r\n        (,uint256 totalAmount,) = _bySwap(_route,amountIn,to,path,free);\r\n        require(totalAmount >= amountOutMin,\"INSUFFICIENT_OUTPUT_AMOUNT\");\r\n    }\r\n    function _bySwap(IUniswapV2Router02 _route,uint256 amountIn,address to,address[] calldata path,uint256 free) private  \r\n    returns(uint256 deserved,uint256 totalAmount,uint256 balance) {\r\n        if (path[0] != WETH) {\r\n            IERC20 inToken = IERC20(path[0]);\r\n            if(amountIn==0){\r\n                amountIn = inToken.balanceOf(msg.sender);\r\n            }\r\n            inToken.transferFrom(msg.sender, address(this), amountIn);\r\n            inToken.approve(address(_route), amountIn);\r\n        }else{\r\n            amountIn = msg.value;\r\n        }\r\n        IERC20 token = IERC20(path[path.length - 1]);\r\n        if(path[path.length - 1] == WETH){\r\n            balance = payable(to).balance;\r\n        }else{\r\n            balance = token.balanceOf(to);\r\n        }\r\n        if(free > 0 && tokens[path[0]]){\r\n            amountIn = amountIn.sub(amountIn.mul(free).div(10000));\r\n        }\r\n        deserved = _route.getAmountsOut(amountIn, path)[path.length - 1];\r\n        if (path[0] == WETH) {\r\n            _route.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountIn}(0, path, to, block.timestamp);\r\n        }else if(path[path.length - 1] == WETH){\r\n            _route.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, 0, path, to, block.timestamp);\r\n        } else {\r\n            _route.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, 0, path, to, block.timestamp);\r\n        }\r\n        totalAmount = (path[path.length - 1] == WETH ? payable(to).balance : token.balanceOf(to)) - balance;\r\n    }\r\n    function manyTokensBuy(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        uint256 count,\r\n        uint256 slippage,\r\n        bool checkTax,\r\n        address routeAddr,\r\n        address[] memory accounts,\r\n        address[] calldata path\r\n    ) external payable {\r\n        require(uniswapV2Router[routeAddr], \"uniswapV2Router is not\");\r\n        IUniswapV2Router02 _route = IUniswapV2Router02(routeAddr);\r\n        if (checkTax && msg.value >= callFee) {\r\n            _checkTax(_route,path,slippage);\r\n        }\r\n        if (accounts.length == 0) {\r\n            accounts = new address[](1);\r\n            accounts[0] = msg.sender;\r\n        }\r\n        uint256 canValue = amountIn * count * accounts.length;\r\n        if (path[0] != WETH) {\r\n            IERC20 inToken = IERC20(path[0]);\r\n            if(count==1 && amountIn ==0 && accounts.length == 1){\r\n                amountIn = inToken.balanceOf(msg.sender);\r\n                canValue = amountIn;\r\n            }\r\n            inToken.transferFrom(msg.sender, address(this), canValue);\r\n            inToken.approve(address(_route), canValue);\r\n        }\r\n        \r\n        _manyTokensBuy(_route,amountIn,amountOutMin,count,slippage,accounts,path);\r\n        uint256 fee = path[0] == WETH ? (checkTax ? canValue + callFee : canValue) + callFee \r\n        : checkTax ? callFee + callFee : callFee;\r\n        checkSubscribe(msg.sender,fee);\r\n    }\r\n    \r\n    function _manyTokensBuy(\r\n        IUniswapV2Router02 _route,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        uint256 count,\r\n        uint256 slippage,\r\n        address[] memory accounts,\r\n        address[] calldata path\r\n    ) private  {\r\n        IERC20 token = IERC20(path[path.length - 1]);\r\n        uint256 canValue = amountIn * count * accounts.length;\r\n        uint256 deserved = _route.getAmountsOut(canValue, path)[path.length - 1];\r\n        uint256 balance;\r\n        uint256 totalAmount;\r\n        for (uint256 ai = 0; ai < accounts.length; ai++) {\r\n            balance = token.balanceOf(accounts[ai]);\r\n            for (uint256 ci = 0; ci < count; ci++) {\r\n                if (path[0] == WETH) {\r\n                    _route.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountIn}(0, path, accounts[ai], block.timestamp);\r\n                }else if(path[path.length - 1] == WETH){\r\n                    \r\n                    _route.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, 0, path, accounts[ai], block.timestamp);\r\n                } else {\r\n                    _route.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, 0, path, accounts[ai], block.timestamp);\r\n                }\r\n            }\r\n            totalAmount += token.balanceOf(accounts[ai]) - balance;\r\n        }\r\n        \r\n        require(((deserved * slippage) / 100) + totalAmount > deserved, \"slippage\");\r\n        require(totalAmount>=amountOutMin, \"amountOutMin\");\r\n    }\r\n    \r\n    function _checkTax(IUniswapV2Router02 _route,address[] calldata _tempPath,uint256 slippage) private  {\r\n        address[] memory path = toWETHPath(_tempPath);\r\n        IERC20 token = IERC20(path[path.length - 1]);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        _route.swapExactETHForTokensSupportingFeeOnTransferTokens{value: callFee}(0, path, address(this), block.timestamp);\r\n        balance = token.balanceOf(address(this)) - balance;\r\n        path = reversePath(path);\r\n        token.approve(address(_route), balance);\r\n        uint256 deserved = _route.getAmountsOut(balance, path)[path.length - 1];\r\n        uint256 Amount = payable(address(this)).balance;\r\n        _route.swapExactTokensForETHSupportingFeeOnTransferTokens(balance, 0, path, address(this), block.timestamp);\r\n        uint256 totalAmount = payable(address(this)).balance - Amount;\r\n        require(((deserved * (slippage)) / 100) + totalAmount > deserved, unicode\"slippage\");\r\n    }\r\n\r\n    function manyTransferToken(\r\n        address tokenAddress,\r\n        address[] calldata accounts,\r\n        uint256[] calldata amounts,\r\n        uint256 count\r\n    ) external payable {\r\n        require(msg.value >= callFee, \"INSUFFICIENT_BALANCE\");\r\n        IERC20 token = IERC20(tokenAddress);\r\n        if(count==0){\r\n            count = 1;\r\n        }\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            for(uint256 j = 0; j < count; j++){\r\n                if(token.balanceOf(msg.sender)>=amounts[i]){\r\n                    token.transferFrom(msg.sender,accounts[i], amounts[i]);\r\n                }\r\n            }\r\n        }\r\n        checkSubscribe(msg.sender, callFee);\r\n    }\r\n    function manyTransferETH(address[] calldata accounts, uint256[] calldata amounts,uint256 count) external payable {\r\n        uint256 total;\r\n        if(count==0){\r\n            count=1;\r\n        }\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            for(uint256 j = 0; j < count; j++){\r\n                payable(accounts[i]).transfer(amounts[i]);\r\n                total += amounts[i];\r\n            }\r\n        }\r\n        checkSubscribe(msg.sender, total+ callFee);\r\n    }\r\n    function toPath(address[] calldata _tempPath)private view returns (address[] memory _path) {\r\n        if (_tempPath[0] != WETH) {\r\n            _path = new address[](_tempPath.length + 1);\r\n            _path[0] = WETH;\r\n            for (uint256 i = 0; i < _tempPath.length; i++) {\r\n                _path[i + 1] = _tempPath[i];\r\n            }\r\n        } else {\r\n            _path = _tempPath;\r\n        }\r\n    }\r\n    function toWETHPath(address[] calldata _tempPath) private view returns (address[] memory _path) {\r\n        if (_tempPath[0] != WETH) {\r\n            _path = new address[](_tempPath.length + 1);\r\n            _path[0] = WETH;\r\n            for (uint256 i = 0; i < _tempPath.length; i++) {\r\n                _path[i + 1] = _tempPath[i];\r\n            }\r\n        } else {\r\n            _path = _tempPath;\r\n        }\r\n    }\r\n    function reversePath(address[] memory _tempPath) private pure returns (address[] memory _path) {\r\n        _path = new address[](_tempPath.length);\r\n        for (uint256 i = 0; i < _tempPath.length; i++) {\r\n            _path[_tempPath.length - i - 1] = _tempPath[i];\r\n        }\r\n    }\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callPay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"routeAddr\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deserved\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routeAddr\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"routeAddr\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"gotTax\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"checkTax\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"routeAddr\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"manyTokensBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"manyTransferETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"manyTransferToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"routeAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"free\",\"type\":\"uint256\"}],\"name\":\"normalSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receiveETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setCallFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setCallPay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscribeList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"swapTokensForEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BurnFactory", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://13ef36258358bad61b05a97c211e8acadcca07ff1e38469003c9e08a9ba7c7ba"}