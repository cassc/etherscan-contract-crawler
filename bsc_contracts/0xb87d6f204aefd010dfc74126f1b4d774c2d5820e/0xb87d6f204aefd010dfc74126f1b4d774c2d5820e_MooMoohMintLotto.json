{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner,address indexed spender,uint256 value);\r\n}\r\n\r\ninterface INFT {\r\n    function totalSupply() external view returns (uint256);\r\n    function ownerOf(uint256 tokenid) external view returns (address);\r\n    function getResultEndcode(uint256 nftIndex,uint256 amountReward) external view returns (uint256);\r\n    function ProcessTokenRequest(address account) external returns (bool);\r\n}\r\n\r\ninterface IMOOUP {\r\n    function getROIAccount(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IMOOUSER {\r\n    function getUserUpline(address account,uint256 level) external view returns (address[] memory);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract permission {\r\n\r\n    address private _owner;\r\n    mapping(address => mapping(string => bytes32)) private _permit;\r\n\r\n    modifier forRole(string memory str) {\r\n        require(checkpermit(msg.sender,str),\"Permit Revert!\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        newpermit(msg.sender,\"owner\");\r\n        newpermit(msg.sender,\"permit\");\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) { return _owner; }\r\n    function newpermit(address adr,string memory str) internal { _permit[adr][str] = bytes32(keccak256(abi.encode(adr,str))); }\r\n    function clearpermit(address adr,string memory str) internal { _permit[adr][str] = bytes32(keccak256(abi.encode(\"null\"))); }\r\n    function checkpermit(address adr,string memory str) public view returns (bool) {\r\n        if(_permit[adr][str]==bytes32(keccak256(abi.encode(adr,str)))){ return true; }else{ return false; }\r\n    }\r\n\r\n    function grantRole(address adr,string memory role) public forRole(\"owner\") returns (bool) { newpermit(adr,role); return true; }\r\n    function revokeRole(address adr,string memory role) public forRole(\"owner\") returns (bool) { clearpermit(adr,role); return true; }\r\n\r\n    function transferOwnership(address adr) public forRole(\"owner\") returns (bool) {\r\n        newpermit(adr,\"owner\");\r\n        clearpermit(msg.sender,\"owner\");\r\n        _owner = adr;\r\n        return true;\r\n    }\r\n\r\n    function renounceOwnership() public forRole(\"owner\") returns (bool) {\r\n        newpermit(address(0),\"owner\");\r\n        clearpermit(msg.sender,\"owner\");\r\n        _owner = address(0);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MooMoohMintLotto is permission {\r\n\r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    address moouserAddress = 0x91EdA823eeddc18d89Ec5124517bA7F14820Ad86;\r\n    address mooAddress = 0x6d6F4afbe38A04d15399EabB47Edfdd78c12D729;\r\n    address MooUpAddress = 0xf08133A1a2a0301832A03DF8D8F0C4406E39c5E6;\r\n    address MooGlassNFT = 0x1D2424ccda2Cb5858184B42d3c4Ab17fAecF3d78;\r\n\r\n    IMOOUSER public user;\r\n    IERC20 public moo;\r\n    IMOOUP public mooup;\r\n    INFT public nft;\r\n\r\n    IDEXRouter router;\r\n\r\n    uint256 public esmitGAS = 5e15;\r\n    uint256 public depositAmount = 1_000_000 * 1e6;\r\n    uint256 public depositUSDTNeed = 3 * 1e18;\r\n\r\n    address[] dappWallet = [\r\n        0xc5Fca183AC0952417FDdB47dD9d9738E62D258d9,\r\n        0xF0Df31a1A123a63c8DC50B9d89e0eF59Ad80b621,\r\n        0xe21877a5263561BbEBFe9dc6C423e8C949bD8fE2,\r\n        0xB7Db5A08856D2B0DAd03194aBd91deF1DD8eC0D6,\r\n        0xF20fa0984Bc34Bb297C598942D3122084994AD1D\r\n    ];\r\n\r\n    address exGasCover = dappWallet[0];\r\n\r\n    uint256[] dappAmount = [\r\n        3 * 1e18 * 35 / 1000,\r\n        3 * 1e18 * 35 / 1000,\r\n        3 * 1e18 * 35 / 1000,\r\n        3 * 1e18 * 50 / 1000,\r\n        3 * 1e18 * 150 / 1000\r\n    ];\r\n\r\n    address[] overFilledWallet = [\r\n        0xc5Fca183AC0952417FDdB47dD9d9738E62D258d9,\r\n        0xF0Df31a1A123a63c8DC50B9d89e0eF59Ad80b621,\r\n        0xe21877a5263561BbEBFe9dc6C423e8C949bD8fE2,\r\n        0xB7Db5A08856D2B0DAd03194aBd91deF1DD8eC0D6\r\n    ];\r\n\r\n    mapping(address => mapping(uint256 => uint256)) public modAmount;\r\n    mapping(address => mapping(address => uint256)) public claimedAmount;\r\n    mapping(address => mapping(uint256 => mapping(uint256 => bool))) public wasClaimed;\r\n    mapping(address => mapping(address => mapping(uint256 => uint256))) public claimedMatching;\r\n\r\n    bool locked;\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n\r\n    }\r\n\r\n    constructor() {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        user = IMOOUSER(moouserAddress);\r\n        moo = IERC20(mooAddress);\r\n        mooup = IMOOUP(MooUpAddress);\r\n        nft = INFT(MooGlassNFT);\r\n        modAmount[mooAddress][1_000_000 * 1e6] = 10;\r\n        modAmount[mooAddress][10_000_000 * 1e6] = 100;\r\n        modAmount[mooAddress][100_000_000 * 1e6] = 1000;\r\n        modAmount[mooAddress][1_000_000_000 * 1e6] = 10000;\r\n        modAmount[mooAddress][10_000_000_000 * 1e6] = 100000;\r\n        modAmount[mooAddress][50_000_000_000 * 1e6] = 200000;\r\n        modAmount[USDT][5 * 1e18] = 10;\r\n        modAmount[USDT][20 * 1e18] = 100;\r\n        modAmount[USDT][100 * 1e18] = 1000;\r\n        modAmount[USDT][1000 * 1e18] = 10000;\r\n        modAmount[USDT][10000 * 1e18] = 100000;\r\n        modAmount[USDT][100000 * 1e18] = 200000;\r\n    }\r\n\r\n    function mintMooMint(address account) public payable noReentrant returns (bool) {\r\n        uint256 amount = msg.value - esmitGAS;\r\n        require(amount>=getBNBFromUSDT(depositUSDTNeed),\"Not Enough USDT Amount Need!\");\r\n        moo.transferFrom(msg.sender,address(this),depositAmount);\r\n        moo.transfer(msg.sender,1_00_000 * 1e6);\r\n        nft.ProcessTokenRequest(account);\r\n        swapUSDT(amount*90/100,depositUSDTNeed);\r\n        (bool success,) = exGasCover.call{ value: esmitGAS }('');\r\n        require(success);\r\n        swapMoo(amount*10/100);\r\n        IERC20 usdt = IERC20(USDT);\r\n        for(uint256 i = 0; i < dappWallet.length; i++){\r\n            usdt.transfer(dappWallet[i],dappAmount[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function swapMoo(uint256 amountETH) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = mooAddress;\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: amountETH }(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapUSDT(uint256 amountETH,uint256 minAmount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = USDT;\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: amountETH }(\r\n            minAmount,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getBNBFromUSDT(uint256 usdtAmount) public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = USDT;\r\n        uint[] memory result = router.getAmountsIn(usdtAmount,path);\r\n        return result[0];\r\n    }\r\n\r\n    function claimWinnerMooMint(uint256 tokenid,uint256 roundid,uint256 rewardAmount,address rewardToken) public noReentrant returns (bool) {\r\n        uint256 winnerSelector = nft.getResultEndcode(roundid,rewardAmount);\r\n        require(roundid>=9 && roundid % modAmount[rewardToken][rewardAmount] == 0,\"Round Id Invalid Mod %!\");\r\n        require(tokenid==winnerSelector,\"You Are Not The Winner!\");\r\n        require(!wasClaimed[rewardToken][roundid][rewardAmount],\"This Round Was Claimed!\");\r\n        address ownerNft = nft.ownerOf(tokenid);\r\n        IERC20 reward = IERC20(rewardToken);\r\n        wasClaimed[rewardToken][roundid][rewardAmount] = true;\r\n        reward.transfer(ownerNft,rewardAmount*80/100);\r\n        reward.transfer(owner(),rewardAmount*20/100);\r\n        claimedAmount[ownerNft][rewardToken] += rewardAmount;\r\n        address[] memory upline = new address[](10);\r\n        upline = user.getUserUpline(ownerNft,10);\r\n        for(uint256 i = 0; i < 10; i++){\r\n            if(upline[i]!=address(0)){\r\n                if(i==0){\r\n                    uint256 rewardDividend = rewardAmount/10;\r\n                    reward.transfer(upline[i],rewardDividend);\r\n                    claimedMatching[upline[i]][rewardToken][i] += rewardDividend;\r\n                }else{\r\n                    uint256 rewardDividend = rewardAmount/100;\r\n                    reward.transfer(upline[i],rewardDividend);\r\n                    claimedMatching[upline[i]][rewardToken][i] += rewardDividend;\r\n                }\r\n            }else{\r\n                uint256 rewardDividend = rewardAmount/100/overFilledWallet.length;\r\n                for(uint j = 0; j < overFilledWallet.length; j++){\r\n                    reward.transfer(overFilledWallet[j],rewardDividend);\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function renderWinnerInterface(uint256[] memory eachNft,uint256[] memory eachRewardAmount,address rewardToken) public view returns (uint256[] memory,bool[] memory) {\r\n        require(eachNft.length==eachRewardAmount.length,\"Length Does Not Match!\");\r\n        uint256 len = eachNft.length;\r\n        uint256[] memory result = new uint256[](len);\r\n        bool[] memory isClaimed = new bool[](len);\r\n        uint256 maxSupply = nft.totalSupply();\r\n        for(uint256 i = 0; i < len; i++){\r\n            if(eachNft[i] < maxSupply){\r\n                result[i] = nft.getResultEndcode(eachNft[i],eachRewardAmount[i]);\r\n                isClaimed[i] = wasClaimed[rewardToken][eachNft[i]][eachRewardAmount[i]];\r\n            }else{\r\n                break;\r\n            }\r\n        }\r\n        return (result,isClaimed);\r\n    }\r\n\r\n    function updateRoundMod(address tokenAddress,uint256 reward,uint256 mod) public forRole(\"owner\") returns (bool) {\r\n        modAmount[tokenAddress][reward] = mod;\r\n        return true;\r\n    }\r\n\r\n    function updateDepositValue(uint256 tokenNeed,uint256 USDTNeed,uint256 gas) public forRole(\"owner\") returns (bool) {\r\n        esmitGAS = gas;\r\n        depositAmount = tokenNeed;\r\n        depositUSDTNeed = USDTNeed;\r\n        return true;\r\n    }\r\n\r\n    function updateContract(address[] memory ca) public forRole(\"owner\") returns (bool) {\r\n        user = IMOOUSER(ca[0]);\r\n        moo = IERC20(ca[1]);\r\n        mooup = IMOOUP(ca[2]);\r\n        nft = INFT(ca[3]);\r\n        return true;\r\n    }\r\n\r\n    function updateWallet(address[] memory wallets,uint256[] memory amounts,address[] memory overFilleds) public forRole(\"owner\") returns (bool) {\r\n        require(wallets.length==amounts.length,\"Length Does Not Match!\");\r\n        dappWallet = wallets;\r\n        dappAmount = amounts;\r\n        overFilledWallet = overFilleds;\r\n        return true;\r\n    }\r\n\r\n    function callWithData(address to,bytes memory data) public forRole(\"owner\") returns (bytes memory) {\r\n        (bool success,bytes memory result) = to.call(data);\r\n        require(success);\r\n        return result;\r\n    }\r\n\r\n    function callWithValue(address to,bytes memory data,uint256 amount) public forRole(\"owner\") returns (bytes memory) {\r\n        (bool success,bytes memory result) = to.call{ value: amount }(data);\r\n        require(success);\r\n        return result;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callWithData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"callWithValue\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"checkpermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"claimWinnerMooMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedMatching\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositUSDTNeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esmitGAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"getBNBFromUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"grantRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"mintMooMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"modAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mooup\",\"outputs\":[{\"internalType\":\"contract IMOOUP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract INFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"eachNft\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"eachRewardAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"renderWinnerInterface\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"revokeRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"ca\",\"type\":\"address[]\"}],\"name\":\"updateContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenNeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"USDTNeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"updateDepositValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mod\",\"type\":\"uint256\"}],\"name\":\"updateRoundMod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"overFilleds\",\"type\":\"address[]\"}],\"name\":\"updateWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"user\",\"outputs\":[{\"internalType\":\"contract IMOOUSER\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MooMoohMintLotto", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://08f1eb99a47667d517432d1a5dfd65e65be1d5cce17bd5b910b7197db19486cb"}