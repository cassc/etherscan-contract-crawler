{"SourceCode": "// SPDX-License-Identifier: None\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface BEP20 {\r\n    function totalSupply() external view returns (uint theTotalSupply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    \r\n}\r\n\r\ncontract ArthaMultiSender {\r\n\r\n   address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function sendMultiple(address payable[] memory _addresses, uint[] memory _amounts) external payable {\r\n        require(msg.sender == owner, \"Only Owner\");\r\n        require(_addresses.length == _amounts.length, \"The length of addresses and amounts must be the same\");\r\n\r\n        for(uint i = 0; i < _addresses.length; i++) {\r\n            _addresses[i].transfer(_amounts[i]);\r\n        }\r\n    }\r\n\r\n  function getBalances(BEP20 token, address[] calldata addresses) external view returns (uint256[] memory, uint256[] memory) {\r\n    uint256[]  memory tokenBalances = new uint256[](addresses.length);\r\n    uint256[] memory bnbBalances = new uint256[](addresses.length);\r\n\r\n    uint256 length = addresses.length;\r\n    tokenBalances = new uint256[] (length);\r\n    bnbBalances = new uint256[] (length);\r\n\r\n    for (uint256 i = 0; i < addresses.length; i++) {\r\n        tokenBalances[i] = token.balanceOf(addresses[i]);\r\n        bnbBalances[i] = addresses[i].balance;\r\n    }\r\n\r\n    return (tokenBalances, bnbBalances);\r\n}\r\n\r\n\r\n    function transferOwnership(address _to) external {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        address oldOwner  = owner;\r\n        owner = _to;\r\n        emit OwnershipTransferred(oldOwner,_to);\r\n    }\r\n\r\n    // Only owner can withdraw token \r\n    function withdrawToken(address tokenAddress, address to, uint amount) public returns(bool) {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot send to zero address\");\r\n        BEP20 _token = BEP20(tokenAddress);\r\n        _token.transfer(to, amount);\r\n        return true;\r\n    }\r\n    \r\n    // Owner BNB Withdraw\r\n    // Only owner can withdraw BNB from contract\r\n    function withdrawBNB(address payable to, uint amount) public returns(bool) {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot send to zero address\");\r\n        to.transfer(amount);\r\n        return true;\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract BEP20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"sendMultiple\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ArthaMultiSender", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://48ad49f8571c568f4623963204a662e016d285ad5e80b5fe9296011d288dc8ea"}