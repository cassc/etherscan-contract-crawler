{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ccip/KreepyKrittersPortal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {KreepyKrittersPortalTypes} from \\\"./KreepyKrittersPortalTypes.sol\\\";\\nimport {KreepyKrittersPortalEncoder} from \\\"./KreepyKrittersPortalEncoder.sol\\\";\\nimport {CCIPApprovedSource, ConfirmedOwner} from \\\"./CCIPApprovedSource.sol\\\";\\nimport {BytesLib} from \\\"./BytesLib.sol\\\";\\nimport {IOnTokenBurnedListener} from \\\"./IOnTokenBurnedListener.sol\\\";\\nimport {IBurnable} from \\\"./IBurnable.sol\\\";\\nimport {IMaxSupply} from \\\"./IMaxSupply.sol\\\";\\nimport {IERC20, Recoverable} from \\\"./Recoverable.sol\\\";\\n\\n/**\\n * @title KreepyKritters Portal (https://kreepykritters.io/)\\n *\\n * @notice CCIP cross chain bridge to transfer KreepyKritters NFTs between different chains.\\n * When transfering NFTs, the NFTs are locked on the source chain in this contract\\n * and unlocked on the destination chain.\\n *\\n * @dev When deploying on a new chain, the entire non-burned\\n * supply of the collection has to be minted into this conract.\\n * This contract supports synchronization of burns on different chains, by either manually calling\\n * {notifyBurn} or automatically on each burn in case the NFT contract on the chain has a\\n * {IOnTokenBurnedListener} interface.\\n * This contract is gas optimized for uint16 tokenIds and requires tokenIds to start at 1.\\n * This contract has emergency recover methods callable by the owner. These methods are\\n * meant to be used in case of a critical bug which requires migration to a new Portal contract.\\n * Due to the nature of these methods, it is strongly recommended to transfer the ownership to\\n * a multisig wallet after the initial setup is completed.\\n */\\ncontract KreepyKrittersPortal is\\n    CCIPReceiver,\\n    CCIPApprovedSource,\\n    IOnTokenBurnedListener,\\n    Pausable,\\n    ReentrancyGuard,\\n    Recoverable,\\n    KreepyKrittersPortalEncoder,\\n    KreepyKrittersPortalTypes\\n{\\n    using BytesLib for bytes;\\n\\n    address public immutable token;\\n    address private immutable link;\\n    uint256 private immutable maxSupply;\\n    bool private immutable transferToDeadAsBurn;\\n\\n    mapping(uint64 chainSelector => address portals) public crossChainTarget;\\n    mapping(uint64 chainSelector => bool) public transferEnabled;\\n    mapping(address => bool) public burnOperators;\\n    bytes public burnListenerExtraArgs;\\n    uint64 public burnListenerDestinationChainSelector;\\n    uint256 public fundEthOnReceiverForFreshWallet;\\n    uint64 private processingMessageFrom;\\n    bytes32 private processingMessageId;\\n\\n    modifier onlyBurnOperator() {\\n        if (!burnOperators[msg.sender]) revert OnlyBurnOperator();\\n        _;\\n    }\\n\\n    modifier processingMessage(uint64 chainSelector, bytes32 messageId) {\\n        processingMessageFrom = chainSelector;\\n        processingMessageId = messageId;\\n        _;\\n        processingMessageFrom = 0;\\n        processingMessageId = 0;\\n    }\\n\\n    /**\\n     * @dev Create a new KreepyKritters Portal for this chain.\\n     * The same contract can be used on source and all destination chains.\\n     * In case this is not the source chain, this contract expects the entire non-burned supply\\n     * of the collection to be minted into this contract.\\n     * This contract is gas optimized for uint16 tokenIds and requires tokenIds to start at 1.\\n     * @param _router CCIP router\\n     * @param _link LINK token address\\n     * @param _token NFT token this contract is transfering cross chain\\n     * @param _transferToDeadAsBurn Whether 'burn' on this chain means that the NFT is sent to 0xdead\\n     */\\n    constructor(\\n        address _router,\\n        address _link,\\n        address _token,\\n        bool _transferToDeadAsBurn,\\n        address _owner\\n    ) CCIPReceiver(_router) ConfirmedOwner(_owner) {\\n        token = _token;\\n        link = _link;\\n        maxSupply = IMaxSupply(_token).maxSupply();\\n        transferToDeadAsBurn = _transferToDeadAsBurn;\\n        IERC20(_link).approve(_router, type(uint256).max);\\n\\n        if (maxSupply >= type(uint16).max) revert MaxSupplyTooHigh(maxSupply);\\n    }\\n\\n    /**\\n     * @dev Allows receiving native tokens for use in funding fresh wallets.\\n     * See {setFundEthOnReceiverForFreshWallet}.\\n     */\\n    receive() external payable {}\\n\\n    /* -----------------------*/\\n    /* --- User interface --- */\\n    /* -----------------------*/\\n\\n    /**\\n     * @notice Transfer NFTs to `destinationChainSelector`.\\n     * Payment for CCIP service is payed in native tokens, use {getTransferFee} to calculate fees.\\n     * Users need to set NFT approval for this contract once via {ERC721-setApprovalForAll}.\\n     * @dev NFTs are locked in this contract on the source chain and unlocked on the destination chain.\\n     * @param destinationChainSelector CCIP chain selector for destination chain.\\n     * @param data Encoded transfer data of sender, recipient and tokenIds, can be obtained via {KreepyKrittersPortalEncoder-encodeTransfer}.\\n     * @param extraArgs CCIP extraArgs, encoding gasLimit on destination chain and possibly future protocol options.\\n     */\\n    function transfer(\\n        uint64 destinationChainSelector,\\n        bytes memory data,\\n        bytes calldata extraArgs\\n    ) external payable whenNotPaused nonReentrant {\\n        address target = crossChainTarget[destinationChainSelector];\\n        if (target == address(0))\\n            revert InvalidDestinationChainSelector(destinationChainSelector);\\n\\n        if (!transferEnabled[destinationChainSelector])\\n            revert TransferNotEnabled(destinationChainSelector);\\n\\n        uint256 command = data.readUInt8(OFFSET_COMMAND);\\n        if (command != COMMAND_UNLOCK)\\n            revert InvalidCommandEncoding(command, COMMAND_UNLOCK);\\n\\n        address sender = data.readAddress(OFFSET_SENDER);\\n        if (sender != msg.sender)\\n            revert InvalidSenderEncoding(sender, msg.sender);\\n\\n        address recipient = data.readAddress(OFFSET_UNLOCK_RECIPIENT);\\n\\n        {\\n            uint256 length = (data.length - OFFSET_UNLOCK_TOKENIDS) /\\n                SIZE_TOKENID;\\n            uint256 tokenId;\\n            for (uint256 i = 0; i < length; ) {\\n                unchecked {\\n                    tokenId = data.readUInt16(\\n                        OFFSET_UNLOCK_TOKENIDS + i * SIZE_TOKENID\\n                    );\\n                }\\n                IERC721(token).transferFrom(msg.sender, address(this), tokenId);\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n\\n        Client.EVM2AnyMessage memory message = Client.EVM2AnyMessage({\\n            receiver: abi.encode(target),\\n            data: data,\\n            tokenAmounts: new Client.EVMTokenAmount[](0),\\n            extraArgs: extraArgs,\\n            feeToken: address(0)\\n        });\\n        uint256 fee = IRouterClient(i_router).getFee(\\n            destinationChainSelector,\\n            message\\n        );\\n\\n        if (fee > msg.value) revert InsufficientFees();\\n\\n        bytes32 messageId = IRouterClient(i_router).ccipSend{value: fee}(\\n            destinationChainSelector,\\n            message\\n        );\\n\\n        emit TransferInitiated(\\n            msg.sender,\\n            recipient,\\n            destinationChainSelector,\\n            messageId\\n        );\\n\\n        if (msg.value > fee) {\\n            Address.sendValue(payable(msg.sender), msg.value - fee);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate CCIP fees charged by {transfer} for the given parameters.\\n     * @param destinationChainSelector CCIP chain selector for destination chain.\\n     * @param data Encoded transfer data of sender, recipient and tokenIds, can be obtained via {KreepyKrittersPortalEncoder-encodeTransfer}.\\n     * @param extraArgs CCIP extraArgs, encoding gasLimit on destination chain and possibly future protocol options.\\n     * @return fee in native gas token\\n     */\\n    function getTransferFee(\\n        uint64 destinationChainSelector,\\n        bytes memory data,\\n        bytes calldata extraArgs\\n    ) external view returns (uint256 fee) {\\n        address target = crossChainTarget[destinationChainSelector];\\n        if (target == address(0))\\n            revert InvalidDestinationChainSelector(destinationChainSelector);\\n\\n        if (!transferEnabled[destinationChainSelector])\\n            revert TransferNotEnabled(destinationChainSelector);\\n\\n        uint256 command = data.readUInt8(OFFSET_COMMAND);\\n        if (command != COMMAND_UNLOCK)\\n            revert InvalidCommandEncoding(command, COMMAND_UNLOCK);\\n\\n        Client.EVM2AnyMessage memory message = Client.EVM2AnyMessage({\\n            receiver: abi.encode(target),\\n            data: data,\\n            tokenAmounts: new Client.EVMTokenAmount[](0),\\n            extraArgs: extraArgs,\\n            feeToken: address(0)\\n        });\\n        fee = IRouterClient(i_router).getFee(destinationChainSelector, message);\\n    }\\n\\n    /* ------------------------*/\\n    /* --- Admin interface --- */\\n    /* ------------------------*/\\n\\n    /**\\n     * @notice Transfer a users NFTs to `destinationChainSelector`.\\n     * Payment for CCIP service is payed in link stored in this contract.\\n     * The user needs to have set NFT approval for this contract via {ERC721-setApprovalForAll}.\\n     * Only callable by owner.\\n     * @dev NFTs are locked in this contract on the source chain and unlocked on the destination chain.\\n     * @param destinationChainSelector CCIP chain selector for destination chain.\\n     * @param data Encoded transfer data of sender, recipient and tokenIds, can be obtained via {KreepyKrittersPortalEncoder-encodeTransfer}.\\n     * @param extraArgs CCIP extraArgs, encoding gasLimit on destination chain and possibly future protocol options.\\n     */\\n    function transferFor(\\n        uint64 destinationChainSelector,\\n        bytes memory data,\\n        bytes calldata extraArgs\\n    ) external onlyOwner whenNotPaused nonReentrant {\\n        address target = crossChainTarget[destinationChainSelector];\\n        if (target == address(0)) {\\n            revert InvalidDestinationChainSelector(destinationChainSelector);\\n        }\\n        if (!transferEnabled[destinationChainSelector]) {\\n            revert TransferNotEnabled(destinationChainSelector);\\n        }\\n\\n        uint256 command = data.readUInt8(OFFSET_COMMAND);\\n        if (command != COMMAND_UNLOCK)\\n            revert InvalidCommandEncoding(command, COMMAND_UNLOCK);\\n\\n        address sender = data.readAddress(OFFSET_SENDER);\\n        if (sender != msg.sender)\\n            revert InvalidSenderEncoding(sender, msg.sender);\\n\\n        address owner = data.readAddress(OFFSET_UNLOCK_RECIPIENT);\\n\\n        uint256 length = (data.length - OFFSET_UNLOCK_TOKENIDS) / SIZE_TOKENID;\\n        uint256 tokenId;\\n        for (uint256 i = 0; i < length; ) {\\n            unchecked {\\n                tokenId = data.readUInt16(\\n                    OFFSET_UNLOCK_TOKENIDS + i * SIZE_TOKENID\\n                );\\n            }\\n            IERC721(token).transferFrom(owner, address(this), tokenId);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        Client.EVM2AnyMessage memory message = Client.EVM2AnyMessage({\\n            receiver: abi.encode(target),\\n            data: data,\\n            tokenAmounts: new Client.EVMTokenAmount[](0),\\n            extraArgs: extraArgs,\\n            feeToken: link\\n        });\\n\\n        bytes32 messageId = IRouterClient(i_router).ccipSend(\\n            destinationChainSelector,\\n            message\\n        );\\n\\n        emit TransferInitiated(\\n            msg.sender,\\n            owner,\\n            destinationChainSelector,\\n            messageId\\n        );\\n    }\\n\\n    /**\\n     * @notice Configure the target CCIP message receiver on the given destination chain.\\n     * Only callable by owner.\\n     * @param chainSelector CCIP chain selector of destination chain to configure.\\n     * @param target Contract address to send messages to when targeting destination chain.\\n     */\\n    function setCrossChainTarget(\\n        uint64 chainSelector,\\n        address target\\n    ) external onlyOwner {\\n        crossChainTarget[chainSelector] = target;\\n        emit CrossChainTagetChanged(chainSelector, target);\\n    }\\n\\n    /**\\n     * @notice Enable/Disable transfers from this contract to destination chain given by `chainSelector`.\\n     * Only callable by owner.\\n     * @param chainSelector CCIP chain selector of destination chain to configure.\\n     * @param enabled the new state for the given destination chain.\\n     */\\n    function setTransferEnabled(\\n        uint64 chainSelector,\\n        bool enabled\\n    ) external onlyOwner {\\n        transferEnabled[chainSelector] = enabled;\\n        emit TransferEnabledChanged(chainSelector, enabled);\\n    }\\n\\n    /**\\n     * @notice Configure `operator`'s `isBurnOperator` state.\\n     * Only callable by owner.\\n     * @dev BurnOperators can call notifyBurn, which spends this contracts link balance.\\n     * @param operator wallet to set isBurnOperator state.\\n     * @param isBurnOperator new isBurnOperator state.\\n     */\\n    function setBurnOperator(\\n        address operator,\\n        bool isBurnOperator\\n    ) external onlyOwner {\\n        burnOperators[operator] = isBurnOperator;\\n        emit BurnOperatorChanged(operator, isBurnOperator);\\n    }\\n\\n    /**\\n     * @notice Configure parameters for the autoburn listener.\\n     * Only callable by owner.\\n     * @param _burnListenerDestinationChainSelector chain selector of chain to notify in case of observed burn event.\\n     * @param _burnListenerExtraArgs CCIP extraArgs used to send the burn notification.\\n     */\\n    function setBurnListenerNotifier(\\n        uint64 _burnListenerDestinationChainSelector,\\n        bytes calldata _burnListenerExtraArgs\\n    ) external onlyOwner {\\n        burnListenerDestinationChainSelector = _burnListenerDestinationChainSelector;\\n        burnListenerExtraArgs = _burnListenerExtraArgs;\\n        emit BurnListenerNotifierChanged(\\n            _burnListenerDestinationChainSelector,\\n            _burnListenerExtraArgs\\n        );\\n    }\\n\\n    /**\\n     * @notice Configure amount of native gas tokens which will be sent to recipients of\\n     * NFT transfers in case the recipient wallet does not have any gas.\\n     * Only callable by owner.\\n     * @param _fundEthOnReceiverForFreshWallet amount of native gas tokens in wei.\\n     */\\n    function setFundEthOnReceiverForFreshWallet(\\n        uint256 _fundEthOnReceiverForFreshWallet\\n    ) external onlyOwner {\\n        fundEthOnReceiverForFreshWallet = _fundEthOnReceiverForFreshWallet;\\n        emit FundEthOnReceiverForFreshWalletChanged(\\n            _fundEthOnReceiverForFreshWallet\\n        );\\n    }\\n\\n    /**\\n     * @notice Pause all functionality of this contract.\\n     * Only callable by owner.\\n     */\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Resume all functionality of this contract.\\n     * Only callable by owner.\\n     */\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    /* --------------------------------*/\\n    /* --- Burn operator interface --- */\\n    /* --------------------------------*/\\n\\n    /**\\n     * @notice Notify cross chain portal instance on `destinationChainSelector` that tokens were burned on this chain.\\n     * Payment for CCIP service is payed in link stored in this contract.\\n     * Only callable by BurnOperators.\\n     * @dev After validation that the given tokenIds are burned on this chain, they will be burned on the destination chain too.\\n     * @param destinationChainSelector CCIP chain selector for destination chain.\\n     * @param data Encoded brun data of sender and tokenIds, can be obtained via {KreepyKrittersPortalEncoder-encodeBurn}.\\n     * @param extraArgs CCIP extraArgs, encoding gasLimit on destination chain and possibly future protocol options.\\n     */\\n    function notifyBurned(\\n        uint64 destinationChainSelector,\\n        bytes memory data,\\n        bytes calldata extraArgs\\n    ) external onlyBurnOperator whenNotPaused {\\n        address target = crossChainTarget[destinationChainSelector];\\n        if (target == address(0)) {\\n            revert InvalidDestinationChainSelector(destinationChainSelector);\\n        }\\n\\n        uint256 command = data.readUInt8(OFFSET_COMMAND);\\n        if (command != COMMAND_BURN)\\n            revert InvalidCommandEncoding(command, COMMAND_BURN);\\n\\n        address sender = data.readAddress(OFFSET_SENDER);\\n        if (sender != msg.sender)\\n            revert InvalidSenderEncoding(sender, msg.sender);\\n\\n        uint256 length = (data.length - OFFSET_BURN_TOKENIDS) / SIZE_TOKENID;\\n        uint256 tokenId;\\n        for (uint256 i = 0; i < length; ) {\\n            unchecked {\\n                tokenId = data.readUInt16(\\n                    OFFSET_BURN_TOKENIDS + i * SIZE_TOKENID\\n                );\\n            }\\n            if (!_isBurned(tokenId)) revert NotBurned(tokenId);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _notifyBurned(destinationChainSelector, target, data, extraArgs);\\n    }\\n\\n    /* ----------------------------------*/\\n    /* --- IOnBurnListener interface --- */\\n    /* ----------------------------------*/\\n\\n    function onTokenBurned(uint256 tokenId) external override {\\n        if (msg.sender != token) revert InvalidListenerCaller(msg.sender);\\n\\n        uint64 _burnListenerDestinationChainSelector = burnListenerDestinationChainSelector;\\n        uint64 _processingMessageFrom = processingMessageFrom;\\n        if (\\n            _burnListenerDestinationChainSelector == 0 ||\\n            _processingMessageFrom == _burnListenerDestinationChainSelector\\n        ) return;\\n        address _target = crossChainTarget[\\n            _burnListenerDestinationChainSelector\\n        ];\\n        if (_target == address(0)) return;\\n\\n        bytes memory data = new bytes(OFFSET_BURN_TOKENIDS + SIZE_TOKENID);\\n        data.writeUInt8(OFFSET_COMMAND, COMMAND_BURN);\\n        data.writeAddress(OFFSET_SENDER, msg.sender);\\n        data.writeUInt16(OFFSET_BURN_TOKENIDS, tokenId);\\n\\n        _notifyBurned(\\n            _burnListenerDestinationChainSelector,\\n            _target,\\n            data,\\n            burnListenerExtraArgs\\n        );\\n    }\\n\\n    /* -----------------------*/\\n    /* --- CCIP interface --- */\\n    /* -----------------------*/\\n\\n    function _ccipReceive(\\n        Client.Any2EVMMessage memory message\\n    )\\n        internal\\n        override\\n        onlyApprovedSource(message.sourceChainSelector, message.sender)\\n        processingMessage(message.sourceChainSelector, message.messageId)\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        uint256 command = message.data.readUInt8(0);\\n        if (command == COMMAND_UNLOCK) {\\n            _processUnlockMessage(message.data);\\n        } else if (command == COMMAND_BURN) {\\n            _processBurnMessage(message.data);\\n        } else {\\n            revert UnknownCommand(command);\\n        }\\n    }\\n\\n    /* ---------------------------*/\\n    /* --- Internal interface --- */\\n    /* ---------------------------*/\\n\\n    /**\\n     * @dev Fund fresh wallets with gas tokens when configured to do so via\\n     * {setFundEthOnReceiverForFreshWallet}.\\n     */\\n    function _fundFreshWallet(address recipient) internal {\\n        uint256 _fundEthOnReceiverForFreshWallet = fundEthOnReceiverForFreshWallet;\\n        if (\\n            _fundEthOnReceiverForFreshWallet > 0 &&\\n            address(this).balance >= _fundEthOnReceiverForFreshWallet &&\\n            recipient.balance == 0\\n        ) {\\n            Address.sendValue(\\n                payable(recipient),\\n                _fundEthOnReceiverForFreshWallet\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Burn `tokenId` from managed NFT.\\n     * Depending on {transferToDeadAsBurn} set in constructor, this will transfer to 0xdead\\n     * or call the burn method on the NFT contract.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        if (_isBurned(tokenId)) return;\\n        if (transferToDeadAsBurn) {\\n            IERC721(token).transferFrom(\\n                address(this),\\n                address(0xdead),\\n                tokenId\\n            );\\n        } else {\\n            IBurnable(token).burn(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Send a notification to destination chain that some tokens were burned on this chain.\\n     * @param destinationChainSelector destination chain CCIP selector.\\n     * @param messageReceiver contract on destination chain to handle the message.\\n     * @param data encoded burn data from {KreepyKrittersPortalEncoder-encodeBurn}.\\n     * @param extraArgs encoded CCIP extraArgs with gasLimit, strict mode and possibly future protocol options.\\n     */\\n    function _notifyBurned(\\n        uint64 destinationChainSelector,\\n        address messageReceiver,\\n        bytes memory data,\\n        bytes memory extraArgs\\n    ) internal {\\n        Client.EVM2AnyMessage memory message = Client.EVM2AnyMessage({\\n            receiver: abi.encode(messageReceiver),\\n            data: data,\\n            tokenAmounts: new Client.EVMTokenAmount[](0),\\n            extraArgs: extraArgs,\\n            feeToken: link\\n        });\\n\\n        bytes32 messageId = IRouterClient(i_router).ccipSend(\\n            destinationChainSelector,\\n            message\\n        );\\n\\n        emit BurnInitiated(msg.sender, destinationChainSelector, messageId);\\n    }\\n\\n    /**\\n     * @dev Process the transfer message which was received over CCIP from a different source chain.\\n     * Transfers tokens from this contract to the recipient specified in the message.\\n     * Optionally funds fresh wallets with gas tokens when configured ({setFundEthOnReceiverForFreshWallet}).\\n     * @param data encoded burn data ({KreepyKrittersPortalEncoder-encodeTransfer} / {KreepyKrittersPortalEncoder-decodeTransfer})\\n     */\\n    function _processUnlockMessage(bytes memory data) internal {\\n        uint256 length = (data.length - OFFSET_UNLOCK_TOKENIDS) / SIZE_TOKENID;\\n\\n        address sender = data.readAddress(OFFSET_SENDER);\\n        address recipient = data.readAddress(OFFSET_UNLOCK_RECIPIENT);\\n        uint256 tokenId;\\n\\n        for (uint256 i = 0; i < length; ) {\\n            unchecked {\\n                tokenId = data.readUInt16(\\n                    OFFSET_UNLOCK_TOKENIDS + i * SIZE_TOKENID\\n                );\\n            }\\n            IERC721(token).safeTransferFrom(address(this), recipient, tokenId);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _fundFreshWallet(recipient);\\n\\n        emit TransferProcessed(\\n            sender,\\n            recipient,\\n            processingMessageFrom,\\n            processingMessageId\\n        );\\n    }\\n\\n    /**\\n     * @dev Process the burn message which was received over CCIP from a different source chain.\\n     * @param data encoded burn data ({KreepyKrittersPortalEncoder-encodeBurn} / {KreepyKrittersPortalEncoder-decodeBurn})\\n     */\\n    function _processBurnMessage(bytes memory data) internal {\\n        uint256 length = (data.length - OFFSET_BURN_TOKENIDS) / SIZE_TOKENID;\\n        address sender = data.readAddress(OFFSET_SENDER);\\n        uint256 tokenId;\\n\\n        for (uint256 i = 0; i < length; ) {\\n            unchecked {\\n                tokenId = data.readUInt16(\\n                    OFFSET_BURN_TOKENIDS + i * SIZE_TOKENID\\n                );\\n            }\\n            _burn(tokenId);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit BurnProcessed(sender, processingMessageFrom, processingMessageId);\\n    }\\n\\n    /**\\n     * @dev Verify that a tokenId is burned on this chain.\\n     * This is true when it does not exist and ownerOf(tokenId) fails, or when its owned by 0xdead.\\n     * @param tokenId tokenId to check\\n     */\\n    function _isBurned(uint256 tokenId) internal view returns (bool) {\\n        if (tokenId == 0 || tokenId > maxSupply) revert InvalidTokenId(tokenId);\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSignature(\\\"ownerOf(uint256)\\\", [tokenId])\\n        );\\n        return !success || abi.decode(data, (address)) == address(0xdead);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ccip/KreepyKrittersPortalTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Error and typedefinitions of KreepyKrittersPortal \\n */\\ninterface KreepyKrittersPortalTypes {\\n    error InvalidListenerCaller(address caller);\\n    error InvalidDestinationChainSelector(uint64 chainSelector);\\n    error InvalidTokenId(uint256 tokenId);\\n    error NotBurned(uint256 tokenId);\\n    error OnlySelf();\\n    error OnlyExternal();\\n    error OnlyBurnOperator();\\n    error InsufficientFees();\\n    error TransferNotEnabled(uint64 chainSelector);\\n    error InvalidCommandEncoding(uint256 command, uint256 expected);\\n    error InvalidSenderEncoding(address sender, address expetced);\\n    error UnknownCommand(uint256 command);\\n    error MaxSupplyTooHigh(uint256 maxSupply);\\n\\n    event CrossChainTagetChanged(uint64 chainSelector, address target);\\n    event TransferEnabledChanged(uint64 chainSelector, bool enabled);\\n    event BurnOperatorChanged(address operator, bool isBurnOperator);\\n    event FundEthOnReceiverForFreshWalletChanged(\\n        uint256 newFundEthOnReceiverForFreshWallet\\n    );\\n    event BurnListenerNotifierChanged(\\n        uint64 burnListenerDestinationChainSelector,\\n        bytes burnListenerExtraArgs\\n    );\\n    event TransferInitiated(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint64 destinationChainSelector,\\n        bytes32 indexed messageId\\n    );\\n    event TransferProcessed(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint64 sourceChainSelector,\\n        bytes32 indexed messageId\\n    );\\n    event BurnInitiated(\\n        address indexed sender,\\n        uint64 destinationChainSelector,\\n        bytes32 indexed messageId\\n    );\\n    event BurnProcessed(\\n        address indexed sender,\\n        uint64 sourceChainSelector,\\n        bytes32 indexed messageId\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/ccip/KreepyKrittersPortalEncoder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {BytesLib} from \\\"./BytesLib.sol\\\";\\n\\n/**\\n * @title KreepyKrittersPortalEncoder to encode/decode ccip message data.\\n * @dev On CCIP and some L2 chains specifically, calldata size is a main contributor\\n * to gas costs. This encoder provides a size and gas optimized packing of message\\n * parameters.\\n */\\ncontract KreepyKrittersPortalEncoder {\\n    using BytesLib for bytes;\\n\\n    uint256 internal constant COMMAND_UNLOCK = 1;\\n    uint256 internal constant COMMAND_BURN = 2;\\n\\n    uint256 internal constant OFFSET_COMMAND = 0;\\n    uint256 internal constant OFFSET_SENDER = 1;\\n    uint256 internal constant OFFSET_UNLOCK_RECIPIENT = 21;\\n    uint256 internal constant OFFSET_UNLOCK_TOKENIDS = 41;\\n    uint256 internal constant OFFSET_BURN_TOKENIDS = 21;\\n    uint256 internal constant SIZE_TOKENID = 2;\\n\\n    /**\\n     * @dev Encode cross chain token transfer message data\\n     * @param sender sender of the transaction\\n     * @param recipient recipient of the unlocked NFTs on destination chain\\n     * @param tokenIds tokenIds to transfer\\n     */\\n    function encodeTransfer(\\n        address sender,\\n        address recipient,\\n        uint256[] memory tokenIds\\n    ) external pure returns (bytes memory data) {\\n        uint256 length = tokenIds.length;\\n        data = new bytes(OFFSET_UNLOCK_TOKENIDS + length * SIZE_TOKENID);\\n\\n        data.writeUInt8(OFFSET_COMMAND, COMMAND_UNLOCK);\\n        data.writeAddress(OFFSET_SENDER, sender);\\n        data.writeAddress(OFFSET_UNLOCK_RECIPIENT, recipient);\\n\\n        for (uint256 i = 0; i < length; ) {\\n            unchecked {\\n                data.writeUInt16(\\n                    OFFSET_UNLOCK_TOKENIDS + i * SIZE_TOKENID,\\n                    tokenIds[i]\\n                );\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode cross chain token transfer message data\\n     * @param data encoded transfer message data\\n     * @return sender sender of the transaction\\n     * @return recipient recipient of the unlocked NFTs on destination chain\\n     * @return tokenIds tokenIds to transfer\\n     */\\n    function decodeTransfer(\\n        bytes memory data\\n    )\\n        external\\n        pure\\n        returns (address sender, address recipient, uint256[] memory tokenIds)\\n    {\\n        uint256 length = (data.length - OFFSET_UNLOCK_TOKENIDS) / SIZE_TOKENID;\\n        tokenIds = new uint256[](length);\\n\\n        sender = data.readAddress(OFFSET_SENDER);\\n        recipient = data.readAddress(OFFSET_UNLOCK_RECIPIENT);\\n\\n        for (uint256 i = 0; i < length; ) {\\n            unchecked {\\n                tokenIds[i] = data.readUInt16(\\n                    OFFSET_UNLOCK_TOKENIDS + i * SIZE_TOKENID\\n                );\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Encode cross chain token burn message data\\n     * @param sender sender of the transaction\\n     * @param tokenIds tokenIds to transfer\\n     */\\n    function encodeBurn(\\n        address sender,\\n        uint256[] memory tokenIds\\n    ) external pure returns (bytes memory data) {\\n        uint256 length = tokenIds.length;\\n        data = new bytes(OFFSET_BURN_TOKENIDS + length * SIZE_TOKENID);\\n\\n        data.writeUInt8(OFFSET_COMMAND, COMMAND_BURN);\\n        data.writeAddress(OFFSET_SENDER, sender);\\n        for (uint256 i = 0; i < length; ) {\\n            unchecked {\\n                data.writeUInt16(\\n                    OFFSET_BURN_TOKENIDS + i * SIZE_TOKENID,\\n                    tokenIds[i]\\n                );\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode cross chain token burn message data\\n     * @param data encoded transfer message data\\n     * @return sender sender of the transaction\\n     * @return tokenIds tokenIds to burn\\n     */\\n    function decodeBurn(\\n        bytes memory data\\n    ) external pure returns (address sender, uint256[] memory tokenIds) {\\n        uint256 length = (data.length - OFFSET_BURN_TOKENIDS) / SIZE_TOKENID;\\n        tokenIds = new uint256[](length);\\n\\n        sender = data.readAddress(OFFSET_SENDER);\\n\\n        for (uint256 i = 0; i < length; ) {\\n            unchecked {\\n                tokenIds[i] = data.readUInt16(\\n                    OFFSET_BURN_TOKENIDS + i * SIZE_TOKENID\\n                );\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ccip/CCIPApprovedSource.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwner} from \\\"@chainlink/contracts-ccip/src/v0.8/ConfirmedOwner.sol\\\";\\n\\nabstract contract CCIPApprovedSource is ConfirmedOwner {\\n    error SourceNotApproved(uint64 chainSelector, address sender);\\n\\n    event SourceApproved(uint64 chainSelector, address sender);\\n    event SourceApprovalRevoked(uint64 chainSelector, address sender);\\n\\n    mapping(uint256 sourceChainAndAddress => bool) private _sources;\\n\\n    modifier onlyApprovedSource(uint64 chainSelector, bytes memory sender) {\\n        address _sender = abi.decode(sender, (address));\\n        if (!_sourceApproved(chainSelector, _sender)) revert SourceNotApproved(chainSelector, _sender);\\n        _;\\n    }\\n\\n    function approveSource(uint64 chainSelector, address sender) external onlyOwner {\\n        uint256 sourceChainAndAddress = uint256(uint160(sender)) | (chainSelector) << 160;\\n        _sources[sourceChainAndAddress] = true;\\n        emit SourceApproved(chainSelector, sender);\\n    }\\n\\n    function revokeSourceApproval(uint64 chainSelector, address sender) external onlyOwner {\\n        uint256 sourceChainAndAddress = uint256(uint160(sender)) | (chainSelector) << 160;\\n        _sources[sourceChainAndAddress] = false;\\n        emit SourceApprovalRevoked(chainSelector, sender);\\n    }\\n\\n    function sourceApproved(uint64 chainSelector, address sender) external view returns (bool) {\\n        return _sourceApproved(chainSelector, sender);\\n    }\\n\\n    function _sourceApproved(uint64 chainSelector, address sender) internal view returns (bool) {\\n        uint256 sourceChainAndAddress = uint256(uint160(sender)) | (chainSelector) << 160;\\n        return _sources[sourceChainAndAddress];\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/ccip/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary BytesLib {\\n    function writeAddress(\\n        bytes memory _data,\\n        uint256 _offset,\\n        address _address\\n    ) internal pure {\\n        assembly {\\n            let pos := add(_data, add(_offset, 20))\\n            let neighbor := and(\\n                mload(pos),\\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\\n            )\\n            mstore(\\n                pos,\\n                xor(\\n                    neighbor,\\n                    and(_address, 0xffffffffffffffffffffffffffffffffffffffff)\\n                )\\n            )\\n        }\\n    }\\n\\n    function writeUInt8(\\n        bytes memory _data,\\n        uint256 _offset,\\n        uint256 _uint8\\n    ) internal pure {\\n        assembly {\\n            let pos := add(_data, add(_offset, 1))\\n            let neighbor := and(\\n                mload(pos),\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n            )\\n\\n            mstore(pos, xor(neighbor, and(_uint8, 0xff)))\\n        }\\n    }\\n\\n    function writeUInt16(\\n        bytes memory _data,\\n        uint256 _offset,\\n        uint256 _uint16\\n    ) internal pure {\\n        assembly {\\n            let pos := add(_data, add(_offset, 2))\\n            let neighbor := and(\\n                mload(pos),\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000\\n            )\\n\\n            mstore(pos, xor(neighbor, and(_uint16, 0xffff)))\\n        }\\n    }\\n\\n    function readAddress(\\n        bytes memory _data,\\n        uint256 _offset\\n    ) internal pure returns (address _address) {\\n        assembly {\\n            _address := and(\\n                mload(add(_data, add(_offset, 20))),\\n                0xffffffffffffffffffffffffffffffffffffffff\\n            )\\n        }\\n    }\\n\\n    function readUInt16(\\n        bytes memory _data,\\n        uint256 _offset\\n    ) internal pure returns (uint256 _uint16) {\\n        assembly {\\n            _uint16 := and(mload(add(_data, add(_offset, 2))), 0xffff)\\n        }\\n    }\\n\\n    function readUInt8(\\n        bytes memory _data,\\n        uint256 _offset\\n    ) internal pure returns (uint256 _uint8) {\\n        assembly {\\n            _uint8 := and(mload(add(_data, add(_offset, 1))), 0xff)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ccip/IOnTokenBurnedListener.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOnTokenBurnedListener {\\n    function onTokenBurned(uint256 tokenId) external;\\n}\"\r\n    },\r\n    \"contracts/ccip/IBurnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBurnable {\\n    function burn(uint256 tokenId) external;\\n}\"\r\n    },\r\n    \"contracts/ccip/IMaxSupply.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMaxSupply {\\n    function maxSupply() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/ccip/Recoverable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwner} from \\\"@chainlink/contracts-ccip/src/v0.8/ConfirmedOwner.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract Recoverable is ConfirmedOwner {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Allows the owner to recover non-fungible tokens sent to the contract by mistake\\n     * @param _token: NFT token address\\n     * @param _recipient: recipient\\n     * @param _tokenIds: tokenIds\\n     * @dev Callable by owner\\n     */\\n    function recoverERC721(address _token, address _recipient, uint256[] calldata _tokenIds) external onlyOwner {\\n         for (uint256 i = 0; i < _tokenIds.length; ) {\\n            IERC721(_token).transferFrom(address(this), _recipient, _tokenIds[i]);\\n            unchecked { ++i; }\\n         }\\n    }\\n\\n    /**\\n     * @notice Allows the owner to recover tokens sent to the contract by mistake\\n     * @param _token: token address\\n     * @param _recipient: recipient\\n     * @dev Callable by owner\\n     */\\n    function recoverERC20(address _token, address _recipient) external onlyOwner {\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        require(balance != 0, \\\"Cannot recover zero balance\\\");\\n\\n        IERC20(_token).safeTransfer(_recipient, balance);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to recover eth sent to the contract by mistake\\n     * @param _recipient: recipient\\n     * @dev Callable by owner\\n     */\\n    function recoverEth(address payable _recipient) external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        require(balance != 0, \\\"Cannot recover zero balance\\\");\\n\\n        Address.sendValue(_recipient, balance);\\n    }\\n}\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_router;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_router = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return i_router address\\n  function getRouter() public view returns (address) {\\n    return address(i_router);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != address(i_router)) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit and strict = false.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // extraArgs will evolve to support new features\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit; // ATTENTION!!! MAX GAS LIMIT 4M FOR BETA TESTING\\n    bool strict; // See strict sequencing details below.\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns guaranteed execution fee for the specified message\\n  /// delivery to destination chain\\n  /// @dev returns 0 fee on invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n    * @dev Returns true if this contract implements the interface defined by\\n    * `interfaceId`. See the corresponding\\n    * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    * to learn more about how these ids are created.\\n    *\\n    * This function call must use less than 30 000 gas.\\n    */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/ConfirmedOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/ConfirmedOwnerWithProposal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/interfaces/OwnableInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_transferToDeadAsBurn\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientFees\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"command\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"InvalidCommandEncoding\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"InvalidDestinationChainSelector\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"InvalidListenerCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expetced\",\"type\":\"address\"}],\"name\":\"InvalidSenderEncoding\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"MaxSupplyTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotBurned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyBurnOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyExternal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySelf\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SourceNotApproved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"TransferNotEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"command\",\"type\":\"uint256\"}],\"name\":\"UnknownCommand\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"BurnInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"burnListenerDestinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"burnListenerExtraArgs\",\"type\":\"bytes\"}],\"name\":\"BurnListenerNotifierChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBurnOperator\",\"type\":\"bool\"}],\"name\":\"BurnOperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"BurnProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"CrossChainTagetChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFundEthOnReceiverForFreshWallet\",\"type\":\"uint256\"}],\"name\":\"FundEthOnReceiverForFreshWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SourceApprovalRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SourceApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TransferEnabledChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"TransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"TransferProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"approveSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnListenerDestinationChainSelector\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnListenerExtraArgs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnOperators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"crossChainTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"portals\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeBurn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeTransfer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"encodeBurn\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"encodeTransfer\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundEthOnReceiverForFreshWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"name\":\"getTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"name\":\"notifyBurned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"onTokenBurned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"recoverEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"revokeSourceApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_burnListenerDestinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_burnListenerExtraArgs\",\"type\":\"bytes\"}],\"name\":\"setBurnListenerNotifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBurnOperator\",\"type\":\"bool\"}],\"name\":\"setBurnOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"setCrossChainTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundEthOnReceiverForFreshWallet\",\"type\":\"uint256\"}],\"name\":\"setFundEthOnReceiverForFreshWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setTransferEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"sourceApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"transferEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"name\":\"transferFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KreepyKrittersPortal", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000536d7e53d0adeb1f20e7c81fea45d02ec9dbd698000000000000000000000000404460c6a5ede2d891e8297795264fde62adbb75000000000000000000000000eb37d7b4c0b2a1f6bc826fa32b284b8d1796354c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fab0003acc6afefb60e21b77ad788c617c8da7b4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://157ca80dede7b1863882aa414b5336e1817238a698e1107751f9c3717ed5debd"}