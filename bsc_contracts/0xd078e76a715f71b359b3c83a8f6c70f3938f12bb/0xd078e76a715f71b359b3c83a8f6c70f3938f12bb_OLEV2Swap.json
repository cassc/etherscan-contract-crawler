{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/OLEV2Swap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./common/Adminable.sol\\\";\\nimport \\\"./common/ReentrancyGuard.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract OLEV2Swap is Adminable, ReentrancyGuard {\\n    using TransferHelper for IERC20;\\n\\n    IERC20 public immutable oleV1;\\n    IERC20 public immutable oleV2;\\n    uint64 public immutable expireTime;\\n\\n    event Swapped (address account, uint amount);\\n\\n    constructor (IERC20 _oleV1, IERC20 _oleV2, uint64 _expireTime){\\n        admin = payable(msg.sender);\\n        oleV1 = _oleV1;\\n        oleV2 = _oleV2;\\n        expireTime = _expireTime;\\n    }\\n\\n    function swap(uint256 _amount) external nonReentrant(){\\n        require(expireTime > block.timestamp, 'Expired');\\n        uint oleV2BalanceBefore = oleV2.balanceOf(address(this));\\n        require(oleV2BalanceBefore >= _amount, 'NE');\\n\\n        uint oleV1BalanceBefore = oleV1.balanceOf(address(this));\\n        oleV1.safeTransferFrom(msg.sender, address(this), _amount);\\n        uint oleV1BalanceAfter = oleV1.balanceOf(address(this));\\n        require(oleV1BalanceAfter - oleV1BalanceBefore == _amount, \\\"CKP1\\\");\\n\\n        oleV2.safeTransfer(msg.sender, _amount);\\n        uint oleV2BalanceAfter = oleV2.balanceOf(address(this));\\n        require(oleV2BalanceBefore - oleV2BalanceAfter == _amount, \\\"CKP2\\\");\\n        emit Swapped(msg.sender, _amount);\\n    }\\n\\n    function recycle(address _account, uint256 _amount) external onlyAdmin {\\n        require(oleV2.balanceOf(address(this)) >= _amount, \\\"NE\\\");\\n        oleV2.safeTransfer(_account, _amount);\\n    }\\n\\n}\"\r\n    },\r\n    \"/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title TransferHelper\\n * @dev Wrappers around ERC20 operations that returns the value received by recipent and the actual allowance of approval.\\n * To use this library you can add a `using TransferHelper for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary TransferHelper {\\n    function safeTransfer(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256 amountReceived) {\\n        if (_amount > 0) {\\n            bool success;\\n            uint256 balanceBefore = _token.balanceOf(_to);\\n            (success, ) = address(_token).call(abi.encodeWithSelector(_token.transfer.selector, _to, _amount));\\n            require(success, \\\"TF\\\");\\n            uint256 balanceAfter = _token.balanceOf(_to);\\n            require(balanceAfter > balanceBefore, \\\"TF\\\");\\n            amountReceived = balanceAfter - balanceBefore;\\n        }\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256 amountReceived) {\\n        if (_amount > 0) {\\n            bool success;\\n            uint256 balanceBefore = _token.balanceOf(_to);\\n            (success, ) = address(_token).call(abi.encodeWithSelector(_token.transferFrom.selector, _from, _to, _amount));\\n            require(success, \\\"TFF\\\");\\n            uint256 balanceAfter = _token.balanceOf(_to);\\n            require(balanceAfter > balanceBefore, \\\"TFF\\\");\\n            amountReceived = balanceAfter - balanceBefore;\\n        }\\n    }\\n\\n    function safeApprove(\\n        IERC20 _token,\\n        address _spender,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        bool success;\\n        if (_token.allowance(address(this), _spender) != 0) {\\n            (success, ) = address(_token).call(abi.encodeWithSelector(_token.approve.selector, _spender, 0));\\n            require(success, \\\"AF\\\");\\n        }\\n        (success, ) = address(_token).call(abi.encodeWithSelector(_token.approve.selector, _spender, _amount));\\n        require(success, \\\"AF\\\");\\n\\n        return _token.allowance(address(this), _spender);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/common/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\ncontract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    modifier nonReentrant() {\\n        check();\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    function check() private view {\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/common/Adminable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nabstract contract Adminable {\\n    address payable public admin;\\n    address payable public pendingAdmin;\\n    address payable public developer;\\n\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor() {\\n        developer = payable(msg.sender);\\n    }\\n\\n    modifier onlyAdmin() {\\n        checkAdmin();\\n        _;\\n    }\\n    modifier onlyAdminOrDeveloper() {\\n        require(msg.sender == admin || msg.sender == developer, \\\"Only admin or dev\\\");\\n        _;\\n    }\\n\\n    function setPendingAdmin(address payable newPendingAdmin) external virtual onlyAdmin {\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n    }\\n\\n    function acceptAdmin() external virtual {\\n        require(msg.sender == pendingAdmin, \\\"Only pendingAdmin\\\");\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n        // Clear the pending value\\n        pendingAdmin = payable(0);\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n    }\\n\\n    function checkAdmin() private view {\\n        require(msg.sender == admin, \\\"caller must be admin\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_oleV1\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_oleV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_expireTime\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expireTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oleV1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oleV2\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OLEV2Swap", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a865197a84e780957422237b5d152772654341f3000000000000000000000000b7e2713cf55cf4b469b5a8421ae6fc0ed18f14670000000000000000000000000000000000000000000000000000000065e59ba0", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}