{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"},\"IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\"},\"IDAppDestination.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface IDAppDestination {\\n    function commitBalance() external;\\n\\n    /**\\n     * @dev Emitted when commitBalance function is called\\n     *\\n     */\\n    event BalanceCommit(uint256 tokenAmount, uint256 BNBAmount);\\n}\"},\"LiquidityLocker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./UniswapV2.sol\\\";\\n\\ncontract LiquidityLocker is Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    \\n    address private token;\\n    address private uniswapV2Pair;\\n\\n    constructor(address _token, address _uniswapV2Pair) public {\\n        token = _token;\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    receive() external payable {}\\n    \\n    mapping(address =\\u003e bool) private unlockVoter;\\n    address[] private voters;\\n\\n    function getVotersCount() public view returns (uint256) {\\n        return voters.length;\\n    }\\n\\n    uint256 private requiredVotesCount = 100;\\n    function startCommuniyVoting(uint256 _requiredVotesCount) public onlyOwner {\\n        require(_requiredVotesCount \\u003e= 100, \\\"vote count should be greater than 100\\\");\\n\\n        requiredVotesCount = _requiredVotesCount;\\n        for(uint i = 0; i \\u003c voters.length; i++) {\\n            unlockVoter[voters[i]] = false;\\n        }\\n        delete voters;\\n    }\\n\\n    function communityVoteToUnlock() public {\\n        require(!unlockVoter[address(msg.sender)], \\\"only unique voter is accepted\\\");\\n        unlockVoter[address(msg.sender)] = true;\\n        voters.push(address(msg.sender));\\n    }\\n\\n    // Lock logic\\n    uint256 public lockTimeout = 0;\\n    uint256 public lockNumberOfDays = 0;\\n\\n    function setLockPeriod(uint256 numberOfDays) public onlyOwner {\\n        lockNumberOfDays = numberOfDays;\\n    }\\n\\n    function lock() external {\\n        require(msg.sender == token, \\\"only token contract can initiate this function\\\");\\n        if (lockTimeout \\u003c= block.timestamp) {\\n            uint256 numberOfDays = lockNumberOfDays.mul(1 days);\\n            lockTimeout = block.timestamp.add(numberOfDays);\\n        }\\n    }\\n\\n    function unlock() public {\\n        require(lockTimeout \\u003c= block.timestamp || voters.length \\u003e= requiredVotesCount, \\\"liquidity is locked\\\");\\n\\n        uint256 liquidityAmount = IBEP20(uniswapV2Pair).balanceOf(address(this));\\n        IUniswapV2Pair(uniswapV2Pair).sync();\\n        IBEP20(uniswapV2Pair).approve(address(this), liquidityAmount);\\n        IBEP20(uniswapV2Pair).transfer(owner(), liquidityAmount);\\n\\n        if (address(this).balance \\u003e 0) {\\n            payable(owner()).transfer(address(this).balance);\\n        }\\n    }\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"},\"Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./UniswapV2.sol\\\";\\nimport \\\"./LiquidityLocker.sol\\\";\\nimport \\\"./IDAppDestination.sol\\\";\\n\\ncontract Token is Context, IBEP20, Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address =\\u003e uint256) private reflectedBalance;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    mapping (address =\\u003e bool) private _isExcludedFromFee;\\n    mapping (address =\\u003e bool) private _isExcludedFromPause;\\n   \\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private tokensTotal = 1000000000 * 10**9;\\n    uint256 private reflectedTotal = (MAX - (MAX % tokensTotal));\\n    uint256 private _tFeeTotal;\\n\\n    string private _name = \\\"Wormoon Protocol\\\";\\n    string private _symbol = \\\"WORMOON\\\";\\n    uint8 private _decimals = 9;\\n    \\n    uint256 public _taxFee = 2;\\n    uint256 private _previousTaxFee = _taxFee;\\n    \\n    uint256 public _liquidityFee = 6;\\n    uint256 private _previousLiquidityFee = _liquidityFee;\\n    \\n    uint256 public _maxTxAmount = 5000000 * 10**9;\\n\\n    // 0 Address: 0x0000000000000000000000000000000000000000\\n    // V2 Router Mainnet: 0x10ED43C718714eb63d5aA57B78B54704E256024E\\n    // V2 Router Testnet: 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\\n\\n    address private constant pancake_swap_router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\n    address private constant service_address = 0x0bFAdF12B2de0f3E1D94067859ABd92971520973;\\n    \\n    IUniswapV2Router02 public /*immutable*/ uniswapV2Router;\\n    address public /*immutable*/ uniswapV2Pair;\\n\\n    LiquidityLocker public /*immutable*/ liquidityLocker;\\n    DAppRouter public /*immutable*/ dAppRouter;\\n\\n    constructor () public {\\n        IUniswapV2Router02 router = IUniswapV2Router02(pancake_swap_router);\\n\\n        uniswapV2Router = router;\\n         // create a uniswap pair for this new token\\n        uniswapV2Pair = IUniswapV2Factory(router.factory())\\n            .createPair(address(this), router.WETH());\\n\\n        // create liquidity locker\\n        liquidityLocker =  new LiquidityLocker(address(this), uniswapV2Pair);\\n\\n        // create router for plugin-like dApps\\n        dAppRouter = new DAppRouter(address(this), uniswapV2Pair);\\n        \\n        excludeAddresses();\\n        initialDistribution();\\n        liquidityLocker.transferOwnership(owner());\\n        dAppRouter.transferOwnership(owner());\\n    }\\n\\n    function excludeAddresses() private {\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[address(dAppRouter)] = true;\\n        _isExcludedFromFee[address(liquidityLocker)] = true;\\n        _isExcludedFromFee[address(service_address)] = true;\\n\\n        _isExcludedFromPause[owner()] = true;\\n        _isExcludedFromPause[address(this)] = true;\\n        _isExcludedFromPause[address(pancake_swap_router)] = true;\\n        _isExcludedFromPause[address(uniswapV2Pair)] = true;\\n        _isExcludedFromPause[address(dAppRouter)] = true;\\n        _isExcludedFromPause[address(liquidityLocker)] = true;\\n        _isExcludedFromPause[address(service_address)] = true;\\n    }\\n\\n    function initialDistribution() private {\\n        reflectedBalance[address(this)] = reflectedTotal;\\n        emit Transfer(address(0), address(this), tokensTotal);\\n\\n        uint256 service_amount = tokensTotal.div(100).mul(5);\\n        _tokenTransfer(address(this), address(service_address), service_amount, false);\\n\\n        uint256 dApp_amount = tokensTotal.div(100).mul(5);\\n        _tokenTransfer(address(this), address(dAppRouter), dApp_amount, false);\\n    }\\n\\n    function getOwner() external view override returns(address) {\\n        return owner();\\n    }\\n\\n    function name() external view override returns(string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view override returns(string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() external view override returns(uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() external view override returns(uint256) {\\n        return tokensTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return tokenFromReflection(reflectedBalance[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function totalFees() public view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\\n        require(tAmount \\u003c= tokensTotal, \\\"Amount must be less than supply\\\");\\n        if (!deductTransferFee) {\\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\\n            return rAmount;\\n        } else {\\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\\n            return rTransferAmount;\\n        }\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n        require(rAmount \\u003c= reflectedTotal, \\\"Amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        reflectedTotal = reflectedTotal.sub(rFee);\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\n    }\\n\\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\\n    }\\n\\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\\n        uint256 tFee = calculateTaxFee(tAmount);\\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\\n        return (tTransferAmount, tFee, tLiquidity);\\n    }\\n\\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        uint256 rFee = tFee.mul(currentRate);\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n\\n    function _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        uint256 rSupply = reflectedTotal;\\n        uint256 tSupply = tokensTotal;      \\n        if (rSupply \\u003c reflectedTotal.div(tokensTotal)) return (reflectedTotal, tokensTotal);\\n        return (rSupply, tSupply);\\n    }\\n    \\n    function _takeLiquidity(uint256 tLiquidity) private {\\n        liquidityFeePool = liquidityFeePool.add(tLiquidity);\\n        uint256 currentRate =  _getRate();\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\n        reflectedBalance[address(this)] = reflectedBalance[address(this)].add(rLiquidity);\\n    }\\n    \\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_taxFee).div(100);\\n    }\\n\\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_liquidityFee).div(100);\\n    }\\n    \\n    function removeAllFee() private {\\n        if(_taxFee == 0 \\u0026\\u0026 _liquidityFee == 0) return;\\n        \\n        _previousTaxFee = _taxFee;\\n        _previousLiquidityFee = _liquidityFee;\\n        \\n        _taxFee = 0;\\n        _liquidityFee = 0;\\n    }\\n    \\n    function restoreAllFee() private {\\n        _taxFee = _previousTaxFee;\\n        _liquidityFee = _previousLiquidityFee;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"BEP20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"BEP20: transfer to the zero address\\\");\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\n        require(!isSuspiciousBotTransfer(from), \\\"Bots are not allowed to transfer tokens\\\");\\n\\n        // if transfer occurs after presale is over but before the real liquidity is added,\\n        // allow bot snipers to buy a fake liquidity\\n        if (isSuspiciousBotTransfer(to)) {\\n            _tokenTransfer(from, to, amount, true);\\n            return;\\n        }\\n\\n        bool systemTransfer = isSystemTransfer(from, to);\\n\\n        require(!isPresaleRunning || systemTransfer, \\\"Transfers are paused until the end of the presale\\\");\\n        require(!isBotProtectionRunning || systemTransfer, \\\"Transfers are paused until the end of the bot protection\\\");\\n        require(amount \\u003c= _maxTxAmount || systemTransfer, \\\"Transfer amount exceeds the maxTxAmount\\\");\\n\\n        bool takeFee = true;\\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\\n            takeFee = false;\\n        }\\n\\n        _tokenTransfer(from, to, amount, takeFee);\\n        swapAndLiquifyIfPossible(from);\\n        forwardFeeIfPossible(from, amount);\\n    }\\n\\n    function isSystemTransfer(address from, address to) private view returns(bool) {\\n        return _isExcludedFromPause[from] \\u0026\\u0026 _isExcludedFromPause[to];\\n    }\\n\\n    // this method is responsible for taking all fees, if takeFee is true\\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\\n        if(!takeFee)\\n            removeAllFee();\\n        \\n        _transferStandard(sender, recipient, amount);\\n        \\n        if(!takeFee)\\n            restoreAllFee();\\n    }\\n\\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\\n        reflectedBalance[sender] = reflectedBalance[sender].sub(rAmount);\\n        reflectedBalance[recipient] = reflectedBalance[recipient].add(rTransferAmount);\\n        _takeLiquidity(tLiquidity);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function payServiceFee(uint256 percent) private {\\n        uint256 bnbAmount = 0;\\n        if (percent == 100) {\\n            bnbAmount = address(this).balance;\\n        } else {\\n            bnbAmount = address(this).balance.div(100).mul(percent);\\n        }\\n        payable(service_address).transfer(bnbAmount);\\n    }\\n\\n    // to recieve BNB from uniswapV2Router when swaping\\n    receive() external payable {\\n        if (isPresaleRunning \\u0026\\u0026 msg.sender != address(uniswapV2Router) \\u0026\\u0026 msg.sender != uniswapV2Pair) {\\n            _presale(msg.value);\\n        }\\n    }\\n\\n    // Reward and Burn logic\\n    uint256 private constant maxRewardTokens = 500000 * 10**9;\\n\\n    function reward(address to, uint256 percentage) public onlyOwner {\\n        require(\\n            to != owner() \\u0026\\u0026 to != address(service_address),\\n            \\\"tokens can\\u0027t be transferred to contract owner or service address\\\"\\n        );\\n        require(percentage \\u003c= 100 \\u0026\\u0026 percentage \\u003e 0, \\\"percentage value is out of range\\\");\\n\\n        uint256 tokensToTransfer = maxRewardTokens.div(100).mul(percentage);\\n        _tokenTransfer(address(this), to, tokensToTransfer, false);\\n    }\\n\\n    function burn(uint256 percentage) public onlyOwner {\\n        require(balanceOf(address(this)) \\u003e 0, \\\"no tokens for burn\\\");\\n        require(percentage \\u003c= 100 \\u0026\\u0026 percentage \\u003e 0, \\\"percentage value is out of range\\\");\\n\\n        uint256 burnAmount = balanceOf(address(this)).div(100).mul(percentage);\\n        _tokenTransfer(address(this), address(0), burnAmount, false);\\n    }\\n\\n    // Presale logic\\n    event PresaleTransfer(address from, address to);\\n    event ListingFinished(uint256 tokenAmount, uint256 bnbAmount);\\n\\n    bool public isPresaleRunning = false;\\n    uint256 public presaleTimeout = 0;\\n\\n    uint256 private constant presaleTokensForBNB = 400000 * 10**9;\\n    uint256 private constant listingTokensForBNB = 380000 * 10**9; // 5% price increase \\n\\n    mapping(address =\\u003e uint256) public earlyHolders;\\n    uint256 public earlyHoldersTotalAmount = 0;\\n\\n    uint256 private presale_min = 0.1 ether;\\n    uint256 private presale_max = 10 ether;\\n    uint256 private presale_soft_cap = 100 ether;\\n    uint256 private presale_hard_cap = 500 ether;\\n\\n    function setupPresale(uint256 min, uint256 max, uint256 soft, uint256 hard) public onlyOwner {\\n        require(!isPresaleRunning, \\\"Presale is running\\\");\\n        presale_min = min;\\n        presale_max = max;\\n        presale_soft_cap = soft;\\n        presale_hard_cap = hard;\\n    }\\n\\n    function presaleEnable() public onlyOwner {\\n        isBotProtectionRunning = false;\\n        isPresaleRunning = true;\\n        presaleTimeout = block.timestamp.add(7 days);\\n    }\\n\\n    function presale() public payable {\\n        _presale(msg.value);\\n    }\\n\\n    function _presale(uint256 amount) private {\\n        require(isPresaleRunning, \\\"presale is not yet started\\\");\\n        require(block.timestamp \\u003c presaleTimeout, \\\"presale is over (timeout)\\\");\\n\\n        require(amount \\u003c= presale_max, \\\"too much BNB, the maximum amount is 10 BNB\\\");\\n        require(amount \\u003e= presale_min, \\\"too little BNB, the minimum amount is 0.1 BNB\\\");\\n\\n        require(earlyHolders[msg.sender].add(amount) \\u003c= presale_max, \\\"you\\u0027ve reached the maximum amount for the address (max 10 BNB)\\\");\\n        require(earlyHoldersTotalAmount.add(amount) \\u003c= presale_hard_cap, \\\"transfer amount exceeds hardcap\\\");\\n\\n        uint256 tokens = amount.mul(presaleTokensForBNB).div(1 ether);\\n        \\n        earlyHoldersTotalAmount = earlyHoldersTotalAmount.add(amount);\\n        earlyHolders[msg.sender] = earlyHolders[msg.sender].add(amount);\\n        \\n        // don\\u0027t take the fee during presale\\n        _tokenTransfer(address(this), msg.sender, tokens, false);\\n        emit PresaleTransfer(address(this), msg.sender);\\n    }\\n\\n    function refund() public {\\n        require(isPresaleRunning, \\\"presale is over\\\");\\n        require(block.timestamp \\u003e presaleTimeout, \\\"presale is still ongoing\\\");\\n        require(earlyHoldersTotalAmount \\u003c= presale_soft_cap, \\\"softcap has been reached, the refund option is no longer available\\\");\\n        require(earlyHolders[msg.sender] \\u003e 0, \\\"no refund is available for this address\\\");\\n        \\n        uint256 refundAmount = earlyHolders[msg.sender].mul(90).div(100);\\n    \\n        earlyHolders[msg.sender] = 0;\\n        \\n        payable(msg.sender).transfer(refundAmount);\\n    }\\n\\n    function launchListingAfterBotProtection() public onlyOwner {\\n        require(!isBotProtectionRunning, \\\"stop bot protection first\\\");\\n\\n        if (address(this).balance \\u003e earlyHoldersTotalAmount) {\\n            uint256 botProtectionPool = address(this).balance.sub(earlyHoldersTotalAmount);\\n            uint256 botProtectionFee = botProtectionPool.div(100).mul(50);\\n            payable(service_address).transfer(botProtectionFee);\\n        }\\n\\n        uint256 lpBNB = (address(this).balance).div(100).mul(80);\\n        uint256 lpToken = lpBNB.mul(listingTokensForBNB).div(1 ether);\\n        uint256 lpSupply = tokensTotal.div(100).mul(30); // 30% of total supply \\n\\n        if (lpToken \\u003e= lpSupply){\\n            lpToken = lpSupply;\\n            lpBNB = lpSupply.div(listingTokensForBNB);\\n        }\\n\\n        addLiquidity(lpToken, lpBNB);\\n        payServiceFee(100);\\n\\n        swapAndLiquifyEnabled = true;\\n        emit ListingFinished(lpToken, lpBNB);\\n    }\\n\\n    // Bot protection\\n    mapping(address =\\u003e bool) private isPotentialBot;\\n    bool private isBotProtectionRunning = false;\\n\\n    function launchBotProtection() public onlyOwner {\\n        require(block.timestamp \\u003e= presaleTimeout || earlyHoldersTotalAmount \\u003e= presale_hard_cap, \\\"bot protection can be launched after presale\\\");\\n        require(!isBotProtectionRunning, \\\"bot protection is active\\\");\\n\\n        isBotProtectionRunning = true;\\n        swapAndLiquifyEnabled = false;\\n        isPresaleRunning = false;\\n\\n        uint256 lpBNB = (address(this).balance).div(100).mul(50); // take 50% from the presale pool\\n        uint256 lpToken = lpBNB.mul(listingTokensForBNB).div(1 ether);\\n\\n        addLiquidity(lpToken, lpBNB);\\n    }\\n\\n    function stopBotProtection() public onlyOwner {\\n        require(isBotProtectionRunning, \\\"bot protection is not active\\\");\\n        isBotProtectionRunning = false;\\n\\n        uint256 totalAmount = IBEP20(uniswapV2Pair).balanceOf(address(this));\\n        IUniswapV2Pair(uniswapV2Pair).sync();\\n        IBEP20(uniswapV2Pair).approve(pancake_swap_router, totalAmount);\\n\\n        uniswapV2Router.removeLiquidityETHSupportingFeeOnTransferTokens( \\n            address(this), \\n            totalAmount, \\n            0, \\n            0, \\n            address(this), \\n            block.timestamp.add(10 minutes)\\n        );\\n    }\\n\\n    function removeFromBotList(address account) public {\\n        require(msg.sender == service_address || msg.sender == owner(), \\\"only owner or service address can use this function\\\");\\n        isPotentialBot[account] = false;\\n    }\\n\\n    function isSuspiciousBotTransfer(address sender) private returns(bool) {\\n        if (isPotentialBot[sender]) {\\n            return true;\\n        }\\n\\n        // ignore uniswapV2Pair and uniswapV2Router during locked transfer\\n        if (sender == address(uniswapV2Pair) || sender == address(uniswapV2Router)) {\\n            return false;\\n        }\\n\\n        if (_isExcludedFromPause[sender] || earlyHolders[sender] \\u003e 0) {\\n            return false;\\n        }\\n\\n        if (isBotProtectionRunning) {\\n            // transfer initiated after presale, before the real liquidity is added\\n            isPotentialBot[sender] = true;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    // DApp Router\\n    function forwardFeeIfPossible(address sender, uint256 amount) private {\\n        if (sender == uniswapV2Pair) {\\n            return;\\n        }\\n\\n        if (address(this).balance \\u003e= 1 ether) {\\n            payServiceFee(5);\\n        }\\n\\n        if (balanceOf(address(this)) \\u003e= amount) {\\n            uint256 dAppFeeTokens = amount.div(100);\\n            _tokenTransfer(address(this), address(dAppRouter), dAppFeeTokens, false);\\n            dAppRouter.forwardTokens();\\n        }\\n    }\\n\\n    // Liquidity actions\\n    uint256 public liquidityFeePool = 0;\\n    uint256 private liquifyMinTokenAmount = 500000 * 10**9;\\n\\n    bool private inSwapAndLiquify;\\n    bool private swapAndLiquifyEnabled = false;\\n\\n    modifier lockTheSwap {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\\n\\n    function swapAndLiquifyIfPossible(address sender) private {\\n        // don\\u0027t liquify if sender is uniswapV2Pair\\n        if (liquidityFeePool \\u003c liquifyMinTokenAmount || sender == uniswapV2Pair || !swapAndLiquifyEnabled || inSwapAndLiquify) {\\n            return;\\n        }\\n\\n        uint256 tokenAmount = liquidityFeePool;\\n\\n        // add 10% of the initial token amount from contract balance so we can slowly liquify leftovers\\n        if (balanceOf(address(this)) \\u003e= tokenAmount.div(10) \\u0026\\u0026 balanceOf(address(this)) \\u003e _tFeeTotal) {\\n            tokenAmount = tokenAmount.add(tokenAmount.div(10));\\n        }\\n\\n        swapAndLiquify(tokenAmount);\\n        liquidityFeePool = 0;\\n    }\\n\\n    function swapAndLiquify(uint256 tokenAmount) private lockTheSwap {\\n        // split the tokenAmount into halves\\n        uint256 halfToSell = tokenAmount.div(2);\\n        uint256 halfToLiquify = tokenAmount.sub(halfToSell);\\n\\n        uint256 initialBalance = address(this).balance;\\n\\n        // swap tokens for BNB\\n        swapTokensForBNB(halfToSell);\\n\\n        // how much BNB did we just swap into?\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\n\\n        // add liquidity to uniswap\\n        addLiquidity(halfToLiquify, newBalance);\\n        \\n        emit SwapAndLiquify(halfToSell, newBalance, halfToLiquify);\\n    }\\n\\n    function swapTokensForBNB(uint256 tokenAmount) private {\\n        // generate the uniswap pair path of token -\\u003e weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // make the swap\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\\n        uint256 tax = bnbAmount.div(50);\\n        uint256 taxedAmount = bnbAmount.sub(tax);\\n        \\n        // approve token transfer to router\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        uniswapV2Router.addLiquidityETH{value: taxedAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(this),\\n            block.timestamp.add(10 minutes)\\n        );\\n\\n        payable(service_address).transfer(tax);\\n    }\\n\\n    function lockLiquidity() public onlyOwner {\\n        uint256 liquidityAmount = IBEP20(uniswapV2Pair).balanceOf(address(this));\\n        IUniswapV2Pair(uniswapV2Pair).sync();\\n        IBEP20(uniswapV2Pair).approve(address(this), liquidityAmount);\\n        IBEP20(uniswapV2Pair).transfer(address(liquidityLocker), liquidityAmount);\\n        liquidityLocker.lock();\\n    }\\n}\\n\\ncontract DAppRouter is Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    \\n    address payable private token;\\n    address private uniswapV2Pair;\\n\\n    constructor(address payable _token,  address _uniswapV2Pair) public {\\n        token = _token;\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    receive() external payable {}\\n\\n    address public currentDAppAddress = address(0);\\n    IDAppDestination public currentDApp;\\n\\n    function makeBridge(address dAppAddress) public onlyOwner {\\n        require(dAppAddress == address(dAppAddress), \\\"invalid address\\\");\\n        currentDAppAddress = dAppAddress;\\n        currentDApp = IDAppDestination(dAppAddress);\\n    }\\n\\n    function forwardTokens() external {\\n        require(msg.sender == token || msg.sender == owner(), \\\"only token contract or owner can initiate this function\\\");\\n        if (currentDAppAddress == address(0)) {\\n            return;\\n        }\\n\\n        // transfer tokens to dApp address\\n        uint256 tokenBalance = Token(token).balanceOf(address(this));\\n        Token(token).approve(address(this), tokenBalance);\\n        Token(token).transfer(currentDAppAddress, tokenBalance);\\n\\n        // transfer bnb to dApp address\\n        payable(currentDAppAddress).transfer(address(this).balance);\\n\\n        // transfer liquidity to dApp address\\n        uint256 liquidityAmount = IBEP20(uniswapV2Pair).balanceOf(address(this));\\n        IUniswapV2Pair(uniswapV2Pair).sync();\\n        IBEP20(uniswapV2Pair).approve(address(this), liquidityAmount);\\n        IBEP20(uniswapV2Pair).transfer(owner(), liquidityAmount);\\n\\n        // tell dapp that the balance is updated\\n        currentDApp.commitBalance();\\n    }\\n}\"},\"UniswapV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n// pragma solidity \\u003e=0.5.0;\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\\n// pragma solidity \\u003e=0.5.0;\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\n// pragma solidity \\u003e=0.6.2;\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\n\\n\\n// pragma solidity \\u003e=0.6.2;\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"ListingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"PresaleTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dAppRouter\",\"outputs\":[{\"internalType\":\"contract DAppRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earlyHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyHoldersTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBotProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchListingAfterBotProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLocker\",\"outputs\":[{\"internalType\":\"contract LiquidityLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromBotList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hard\",\"type\":\"uint256\"}],\"name\":\"setupPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopBotProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://456d639a9b0452d8da7200460b90b6034a40279d9dd918b51975c057ac1ec420"}