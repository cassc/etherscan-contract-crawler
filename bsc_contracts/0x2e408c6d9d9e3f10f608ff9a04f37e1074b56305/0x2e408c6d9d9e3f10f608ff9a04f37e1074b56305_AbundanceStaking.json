{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(isContract(address(token)), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev Initializes the contract setting the deployer as the initial owner.\r\n    */\r\n    constructor () {\r\n      address msgSender = _msgSender();\r\n      _owner = msgSender;\r\n      emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the address of the current owner.\r\n    */\r\n    function owner() public view returns (address) {\r\n      return _owner;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n      require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n      _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n      require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n      emit OwnershipTransferred(_owner, newOwner);\r\n      _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    bool internal locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\ncontract AbundanceStaking is Ownable, ReentrancyGuard {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\taddress private tokenAddr = 0x55d398326f99059fF775485246999027B3197955; // USDT\r\n\r\n\taddress private ownerWallet;\r\n    address private projectWallet;\r\n\taddress private adminFeeWallet;\r\n\tIERC20 public token;\r\n\r\n\tuint256 public MIN_INVEST = 10 ether;\r\n\tuint256[] public REFERRAL_DIVIDENDS_PERCENTS = [100, 75, 50, 40, 20, 15];\r\n\tuint256 public REFERRAL_DIVIDENDS = 300;\r\n\tuint256 public MAX_REFERRAL_PERCENT = 800;\r\n\tuint256 public WITHDRAW_FEE = 20;\r\n\tuint256 public MIN_WITHDRAW = 10 ether;\r\n    uint256 public MIN_COMPOUND = 10 ether;\r\n\tuint256 public MAX_DEPOSITS = 100;\r\n\tuint256 public RATE = 75;\r\n\tuint256 public TOTAL_RETURN = 2500;\r\n\tuint256 constant public PERCENTS_DIVIDER = 1000;\r\n\tuint256 constant public TIME_STEP = 1 days;\r\n\tuint256 public A_ROUND = 14 * TIME_STEP;\r\n\tuint256 public MAX_ROUND_CALCULATION = 10;\r\n\r\n\tuint256 public totalUsers;\r\n\tuint256 public totalInvested;\r\n\tuint256 public totalWithdrawn;\r\n\tuint256 public totalReinvest;\r\n\tuint256 public totalDividendsReferral;\r\n\tuint256 public totalActiveDeposits;\r\n\tuint256 public totalInsertDividends;\r\n\tuint256 public totalExitDividends;\r\n\r\n\tuint256 public currentRound = 1;\r\n\tuint256 public lastSetRateRound = 1;\r\n\r\n\tstruct Deposit {\r\n\t\tuint256 amount;\r\n\t\tuint256 withdrawn;\r\n\t\tuint256 start;\r\n\t\tbool    reinvest;\r\n\t\tbool    isFinished;\r\n\t}\r\n\r\n\tstruct Round {\r\n\t\tuint256 tDeposit;\r\n\t\tuint256 tActiveDeposit;\r\n\t\tuint256 tWithdraw;\r\n\t\tuint256 tUsers;\r\n\t\tuint256 date;\r\n\t\tuint256 rate;\r\n\t\tuint256 tProfitDeposit;\r\n\t\tuint256 tProfitAffiliate;\r\n\t\tbool    injected;\r\n\t}\r\n\r\n\tstruct Withdrawal {\r\n\t\tuint256 amount;\r\n\t\tuint256 date;\r\n\t\tbool    status;\r\n\t\tbool    reinvest;\r\n\t}\r\n\r\n\tstruct User {\r\n\t\tDeposit[] deposits;\r\n\t\tuint256 checkpoint;\r\n\t\taddress referrer;\r\n\t\tuint256[6] levels;\r\n        uint256[6] teamTurnover;\r\n\t\tuint256[6] teamProfit;\r\n\t\tuint256 dividendsBonus;\r\n\t\tuint256 totalDividendsBonus;\r\n\t\tuint256 totalLostDividends;\r\n\t\tuint256 totalDeposit;\r\n\t\tuint256 totalWithdrawn;\r\n\t\tuint256 totalReinvest;\r\n\t\tuint256 reserve;\r\n\t\tuint256 activeDepositIndex;\r\n\t}\r\n \r\n\tmapping (address => User) public users;\r\n\tmapping (address => mapping(uint256 => Withdrawal)) public withdrawals;\r\n    mapping (uint256 => uint256) public roundRates;\r\n    mapping (uint256 => Round) public roundStats;\r\n\r\n    mapping (address => bool) public operators;\r\n\tmapping (address => bool) public blacklist;\r\n\r\n    modifier onlyAdmins() {\r\n      \trequire(owner() == _msgSender() || operators[_msgSender()] == true, \"Ownable: caller is not the owner or operator\");\r\n      \t_;\r\n    }\r\n\r\n\tmodifier notContract() {\r\n\t\trequire(!_isContract(msg.sender), \"Contract not allowed\");\r\n\t\trequire(msg.sender == tx.origin, \"Proxy contract not allowed\");\r\n\t\t_;\r\n    }\r\n\r\n\tuint256 public startDate;\r\n\tuint256 public launchDate;\r\n\r\n\r\n\tevent Newbie(address user);\r\n\tevent NewDeposit(address indexed user, uint256 amount, uint256 time);\r\n\tevent NewCompound(address indexed user, uint256 amount, uint256 time);\r\n\tevent Withdrawn(address indexed user, uint256 amount, uint256 time);\r\n\tevent RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\r\n\r\n\tconstructor() {\r\n\t\ttoken = IERC20(tokenAddr);\r\n        projectWallet = 0x9C5e5153b87C7943b423D615Ae1aa14dEF7B12fF;\r\n\t\tadminFeeWallet = 0x65A3f0eFe2e40Bd676484563aE96B85D35E180BD;\r\n\t\townerWallet = 0xa6B5BE64a803Cf6F1A18099AcA40363E63b89659;\r\n\t\t\r\n\t\toperators[msg.sender] = true;\r\n\t\tuint256 start = 1680976800; //Sat Apr 08 2023 18:00:00 GMT+0000\r\n\t\tlaunchDate = block.timestamp;\r\n\t\tstartDate  = start.sub(A_ROUND);\r\n\t}\r\n\r\n\tfunction invest(address referrer, uint256 amount) public noReentrant notContract {\r\n\t\trequire(block.timestamp > startDate,  \"round does not launch yet\");\r\n\t\trequire(block.timestamp > launchDate, \"contract does not launch yet\");\r\n\t\trequire(!blacklist[msg.sender], \"This address is in black list\");\r\n        require(amount >= MIN_INVEST, \"less than min deposit amount\");\r\n\t\trequire(amount <= token.allowance(msg.sender, address(this)),\"low allowance\");\r\n\t\ttoken.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n\t\tUser storage user = users[msg.sender];\r\n\t\trequire(user.deposits.length <= MAX_DEPOSITS, \"max 100 deposits\");\r\n\r\n\t\tupdateRoundStats();\r\n\r\n\t\tif (user.referrer == address(0)) {\r\n\t\t\tif ((users[referrer].deposits.length > 0 && referrer != msg.sender) || referrer == ownerWallet) {\r\n\t\t\t\tuser.referrer = referrer;\r\n\t\t\t}else{\r\n\t\t\t\trevert(\"Please enter valid referrer\");\r\n\t\t\t}\r\n\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 6; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tusers[upline].levels[i] = users[upline].levels[i].add(1);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (user.referrer != address(0)) {\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 6; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tusers[upline].teamTurnover[i] += amount;\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (user.deposits.length == 0) {\r\n\t\t\tuser.checkpoint = block.timestamp;\r\n\t\t\ttotalUsers++;\r\n\t\t\temit Newbie(msg.sender);\r\n\t\t}\r\n\r\n\t\tuser.deposits.push(Deposit(amount, 0, block.timestamp, false, false));\r\n\t\ttotalInvested = totalInvested.add(amount);\r\n\t\ttotalActiveDeposits = totalActiveDeposits.add(amount);\r\n\t\temit NewDeposit(msg.sender, amount, block.timestamp);\r\n\t}\r\n\r\n\tfunction withdraw() public noReentrant {\r\n\t\trequire(block.timestamp > startDate,  \"round does not launch yet\");\r\n\t\trequire(block.timestamp > launchDate, \"contract does not launch yet\");\r\n\t\trequire(withdrawals[msg.sender][cRound()].status == false, \"dividends withdrawn\");\r\n\t\trequire(!blacklist[msg.sender], \"This address is in black list\");\r\n\t\t\r\n\t\tupdateRoundStats();\r\n\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n\t\tuint256 totalAmount = calUserDividends(msg.sender);\r\n\t\tuint256 amount = totalAmount;\r\n\t\tuint256 restDB = 0;\r\n\t\tif (user.referrer != address(0)) {\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 6; i++) {\r\n\t\t\t\tuint256 refAmount = amount.mul(REFERRAL_DIVIDENDS_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tusers[upline].dividendsBonus += refAmount;\r\n\t\t\t\t\tusers[upline].totalDividendsBonus += refAmount;\r\n                    users[upline].teamProfit[i] += refAmount;\r\n\t\t\t\t\ttotalDividendsReferral += refAmount;\r\n\t\t\t\t\temit RefBonus(upline, msg.sender, i, refAmount);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} \r\n\t\t\t\telse {\r\n\t\t\t\t\trestDB += refAmount;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(restDB > 0){\r\n\t\t\ttoken.safeTransfer(projectWallet, restDB);\r\n            totalExitDividends += restDB;\r\n            totalDividendsReferral += restDB;\r\n\t\t}\r\n\r\n\t\tuint256 referralDividendsBonus = user.dividendsBonus;\r\n\t\tuint256 userActiveIdex = user.activeDepositIndex;\r\n\t\tif (referralDividendsBonus > 0) {\r\n\t\t\tfor (uint256 i = userActiveIdex; i < user.deposits.length; i++) {\r\n\t\t\t\tif(referralDividendsBonus > 0){\r\n\t\t\t\t\tuint256 depositMaxReturn = user.deposits[i].amount.mul(TOTAL_RETURN).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\tuint256 RemainingCapacity = depositMaxReturn.sub(user.deposits[i].withdrawn);\r\n\t\t\t\t\tif(RemainingCapacity > referralDividendsBonus){\r\n\t\t\t\t\t\tuser.deposits[i].withdrawn += referralDividendsBonus;\r\n\t\t\t\t\t\treferralDividendsBonus = 0;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\treferralDividendsBonus = referralDividendsBonus.sub(RemainingCapacity);\r\n\t\t\t\t\t\tuser.deposits[i].withdrawn = depositMaxReturn;\r\n\t\t\t\t\t\tuser.deposits[i].isFinished = true;\r\n\t\t\t\t\t\tuser.activeDepositIndex += 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttotalAmount = totalAmount.add(user.dividendsBonus);\r\n\t\t\tif(referralDividendsBonus > 0) {\r\n\t\t\t\tuser.totalLostDividends += referralDividendsBonus;\r\n\t\t\t\ttotalAmount = totalAmount.sub(referralDividendsBonus);\r\n\t\t\t}\r\n\t\t\tuser.dividendsBonus = 0;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 reserveAmount = user.reserve;\r\n\t\tif (reserveAmount > 0) {\r\n\t\t\tuser.reserve = 0;\r\n\t\t\ttotalAmount = totalAmount.add(reserveAmount);\r\n\t\t}\r\n\r\n\t\trequire(totalAmount >= MIN_WITHDRAW, \"less than min amount\");\r\n\r\n\t\tuint256 withdrawFee = totalAmount.mul(WITHDRAW_FEE).div(PERCENTS_DIVIDER);\r\n\r\n\t\tuint256 contractBalance = token.balanceOf(address(this));\r\n\t\tif (contractBalance < (totalAmount.add(withdrawFee))) {\r\n\t\t\trequire(contractBalance >= withdrawFee, \"Not enough contract balance\");\r\n\t\t\tuser.reserve = totalAmount.sub(contractBalance.sub(withdrawFee));\r\n\t\t\ttotalAmount = contractBalance.sub(withdrawFee);\r\n\t\t}\r\n\r\n\t\tuser.checkpoint = roundStart(lastSetRateRound + 1);\r\n\t\tuser.totalWithdrawn = user.totalWithdrawn.add(totalAmount);\r\n\t\ttotalWithdrawn = totalWithdrawn.add(totalAmount);\r\n\t\ttotalExitDividends += totalAmount;\r\n\t\twithdrawals[msg.sender][cRound()].amount = totalAmount;\r\n\t\twithdrawals[msg.sender][cRound()].date = block.timestamp;\r\n\t\twithdrawals[msg.sender][cRound()].status = true;\r\n\t\ttoken.safeTransfer(msg.sender, totalAmount);\r\n\t\ttoken.safeTransfer(adminFeeWallet, withdrawFee);\r\n\t\temit Withdrawn(msg.sender, totalAmount, block.timestamp);\r\n\t}\r\n\r\n\tfunction reinvest() public noReentrant {\t\r\n\t\trequire(block.timestamp > startDate,  \"round does not launch yet\");\r\n\t\trequire(block.timestamp > launchDate, \"contract does not launch yet\");\r\n\t\trequire(withdrawals[msg.sender][cRound()].status == false, \"dividends withdrawn\");\r\n\t\trequire(!blacklist[msg.sender], \"This address is in black list\");\r\n\t\tUser storage user = users[msg.sender];\r\n\t\trequire(user.deposits.length <= MAX_DEPOSITS, \"max 100 deposits\");\r\n\r\n\t\tupdateRoundStats();\r\n\r\n\t\tuint256 totalAmount = calUserDividends(msg.sender);\r\n\t\tuint256 amount = totalAmount;\r\n\t\tuint256 restDB = 0;\r\n\t\tif (user.referrer != address(0)) {\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 6; i++) {\r\n\t\t\t\tuint256 refAmount = amount.mul(REFERRAL_DIVIDENDS_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tusers[upline].dividendsBonus += refAmount;\r\n\t\t\t\t\tusers[upline].totalDividendsBonus += refAmount;\r\n                    users[upline].teamProfit[i] += refAmount;\r\n\t\t\t\t\ttotalDividendsReferral += refAmount;\r\n\t\t\t\t\temit RefBonus(upline, msg.sender, i, refAmount);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} \r\n\t\t\t\telse {\r\n\t\t\t\t\trestDB += refAmount;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(restDB > 0){\r\n\t\t\ttoken.safeTransfer(projectWallet, restDB);\r\n            totalExitDividends += restDB;\r\n            totalDividendsReferral += restDB;\r\n\t\t}\r\n\r\n\t\tuint256 referralDividendsBonus = user.dividendsBonus;\r\n\t\tuint256 userActiveIdex = user.activeDepositIndex;\r\n\t\tif (referralDividendsBonus > 0) {\r\n\t\t\tfor (uint256 i = userActiveIdex; i < user.deposits.length; i++) {\r\n\t\t\t\tif(referralDividendsBonus > 0){\r\n\t\t\t\t\tuint256 depositMaxReturn = user.deposits[i].amount.mul(TOTAL_RETURN).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\tuint256 RemainingCapacity = depositMaxReturn.sub(user.deposits[i].withdrawn);\r\n\t\t\t\t\tif(RemainingCapacity > referralDividendsBonus){\r\n\t\t\t\t\t\tuser.deposits[i].withdrawn += referralDividendsBonus;\r\n\t\t\t\t\t\treferralDividendsBonus = 0;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\treferralDividendsBonus = referralDividendsBonus.sub(RemainingCapacity);\r\n\t\t\t\t\t\tuser.deposits[i].withdrawn = depositMaxReturn;\r\n\t\t\t\t\t\tuser.deposits[i].isFinished = true;\r\n\t\t\t\t\t\tuser.activeDepositIndex += 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttotalAmount = totalAmount.add(user.dividendsBonus);\r\n\t\t\tif(referralDividendsBonus > 0) {\r\n\t\t\t\tuser.totalLostDividends += referralDividendsBonus;\r\n\t\t\t\ttotalAmount = totalAmount.sub(referralDividendsBonus);\r\n\t\t\t}\r\n\t\t\tuser.dividendsBonus = 0;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 reserveAmount = user.reserve;\r\n\t\tif (reserveAmount > 0) {\r\n\t\t\tuser.reserve = 0;\r\n\t\t\ttotalAmount = totalAmount.add(reserveAmount);\r\n\t\t}\r\n\r\n\t\trequire(totalAmount >= MIN_COMPOUND, \"less than min amount\");\r\n\r\n\t\tuser.deposits.push(Deposit(totalAmount, 0, block.timestamp, true, false));\r\n\t\ttotalReinvest = totalReinvest.add(totalAmount);\r\n\t\ttotalActiveDeposits = totalActiveDeposits.add(totalAmount);\r\n\t\ttotalExitDividends += totalAmount;\r\n\r\n\t\tuser.checkpoint = roundStart(lastSetRateRound + 1);\r\n\t\tuser.totalReinvest = user.totalReinvest.add(totalAmount);\r\n\r\n\t\twithdrawals[msg.sender][cRound()].amount = totalAmount;\r\n\t\twithdrawals[msg.sender][cRound()].date = block.timestamp;\r\n\t\twithdrawals[msg.sender][cRound()].status = true;\r\n\t\twithdrawals[msg.sender][cRound()].reinvest = true;\r\n\r\n\t\temit NewCompound(msg.sender, totalAmount, block.timestamp);\r\n\t}\r\n\r\n\tfunction getContractBalance() public view returns (uint256) {\r\n\t\treturn token.balanceOf(address(this));\r\n\t}\r\n\r\n\tfunction calUserDividends(address userAddress) internal returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tuint256 totalAmount;\r\n\t\tuint256 dividends = 0;\r\n\t\tuint256 cR = cRound();\r\n\t\t\r\n\t\tif(cR > 1){\r\n\t\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\t\tuint256 max = user.deposits[i].amount.mul(TOTAL_RETURN).div(PERCENTS_DIVIDER);\r\n\t\t\t\tif(user.deposits[i].withdrawn < max && !user.deposits[i].isFinished){\r\n\t\t\t\t\tfor (uint256 j = 1; j < (MAX_ROUND_CALCULATION+1) ; j++) {\r\n\t\t\t\t\t\tif(j < cR && (cR-j) > 1){\r\n\t\t\t\t\t\t\tuint256 startRound = roundStart(cR-j);\r\n\t\t\t\t\t\t\tuint256 endRound = roundStart(cR-(j-1));\r\n\t\t\t\t\t\t\tif(startRound >= user.checkpoint && startRound >= user.deposits[i].start && roundRates[cR-j] > 0){\r\n\t\t\t\t\t\t\t\tuint256 share = user.deposits[i].amount.mul(roundRates[cR-j]).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\t\t\t\tif (startRound < endRound) {\r\n\t\t\t\t\t\t\t\t\tdividends = dividends.add(share.mul(endRound.sub(startRound)).div(A_ROUND));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(user.deposits[i].withdrawn.add(dividends) >= max){\r\n\t\t\t\t\t\tdividends = max.sub(user.deposits[i].withdrawn);\r\n\t\t\t\t\t\tuser.deposits[i].withdrawn = max;\r\n\t\t\t\t\t\tuser.activeDepositIndex += 1;\r\n\t\t\t\t\t\tuser.deposits[i].isFinished;\r\n\t\t\t\t\t\ttotalActiveDeposits = totalActiveDeposits.sub(user.deposits[i].amount);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tuser.deposits[i].withdrawn += dividends;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ttotalAmount = totalAmount.add(dividends);\r\n\t\t\t\tdividends = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn totalAmount;\r\n\t}\r\n\t\r\n\tfunction getUserDividends(address userAddress) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tuint256 totalAmount;\r\n\t\tuint256 dividends = 0;\r\n\t\tuint256 cR = cRound();\r\n\t\tif(cR > 1){\r\n\t\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\t\tuint256 max = user.deposits[i].amount.mul(TOTAL_RETURN).div(PERCENTS_DIVIDER);\r\n\t\t\t\tif(user.deposits[i].withdrawn < max && !user.deposits[i].isFinished){\r\n\t\t\t\t\tfor (uint256 j = 1; j < (MAX_ROUND_CALCULATION+1); j++) {\r\n\t\t\t\t\t\tif(j < cR && (cR-j) > 1){\r\n\t\t\t\t\t\t\tuint256 startRound = roundStart(cR-j);\r\n\t\t\t\t\t\t\tuint256 endRound = roundStart(cR-(j-1));\r\n\t\t\t\t\t\t\tif(startRound >= user.checkpoint && startRound >= user.deposits[i].start && roundRates[cR-j] > 0){\r\n\t\t\t\t\t\t\t\tuint256 share = user.deposits[i].amount.mul(roundRates[cR-j]).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\t\t\t\tif (startRound < endRound) {\r\n\t\t\t\t\t\t\t\t\tdividends = dividends.add(share.mul(endRound.sub(startRound)).div(A_ROUND));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(user.deposits[i].withdrawn.add(dividends) > max){\r\n\t\t\t\t\t\tdividends = max.sub(user.deposits[i].withdrawn);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ttotalAmount = totalAmount.add(dividends);\r\n\t\t\t\tdividends = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn totalAmount;\r\n\t}\r\n\t\r\n\tfunction getUserDividendsCR(address userAddress) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tuint256 totalAmount;\r\n\t\tuint256 dividends = 0;\r\n\t\tuint256 cR = cRound();\r\n\t\tif(cR > 1){\r\n\t\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\t\tuint256 max = user.deposits[i].amount.mul(TOTAL_RETURN).div(PERCENTS_DIVIDER);\r\n\t\t\t\tif(user.deposits[i].withdrawn < max && !user.deposits[i].isFinished){\r\n\t\t\t\t\tuint256 startRound = roundStart(cR);\r\n\t\t\t\t\tuint256 endRound = roundStart(cR+1);\r\n\t\t\t\t\tif(startRound >= user.checkpoint && startRound >= user.deposits[i].start){\r\n\t\t\t\t\t\tuint256 share = user.deposits[i].amount.mul(RATE).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\t\tif (startRound < endRound) {\r\n\t\t\t\t\t\t\tdividends = dividends.add(share.mul(endRound.sub(startRound)).div(A_ROUND));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tif(user.deposits[i].withdrawn.add(dividends) > max){\r\n\t\t\t\t\t\tdividends = max.sub(user.deposits[i].withdrawn);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ttotalAmount = totalAmount.add(dividends);\r\n\t\t\t\tdividends = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn totalAmount;\r\n\t}\r\n\r\n\tfunction getUserTotalWithdrawn(address userAddress) public view returns (uint256) {\r\n\t\treturn users[userAddress].totalWithdrawn;\r\n\t}\r\n\r\n\tfunction getUserCheckpoint(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].checkpoint;\r\n\t}\r\n\r\n\tfunction getUserReferrer(address userAddress) public view returns(address) {\r\n\t\treturn users[userAddress].referrer;\r\n\t}\r\n\r\n\tfunction getUserDownlineCount(address userAddress) public view returns(uint256[6] memory referrals) {\r\n\t\treturn (users[userAddress].levels);\r\n\t}\r\n\r\n    function getUserTeamTurnover(address userAddress) public view returns(uint256[6] memory turnover) {\r\n\t\treturn (users[userAddress].teamTurnover);\r\n\t}\r\n\r\n\tfunction getUserTeamProfit(address userAddress) public view returns(uint256[6] memory teamProfit) {\r\n\t\treturn (users[userAddress].teamProfit);\r\n\t}\r\n\r\n\tfunction getUserTotalReferrals(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].levels[0]+users[userAddress].levels[1]+users[userAddress].levels[2]+users[userAddress].levels[3]+users[userAddress].levels[4]+users[userAddress].levels[5];\r\n\t}\r\n\r\n    function getUserTotalTeamTurnover(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].teamTurnover[0]+users[userAddress].teamTurnover[1]+users[userAddress].teamTurnover[2]+users[userAddress].teamTurnover[3]+users[userAddress].teamTurnover[4]+users[userAddress].teamTurnover[5];\r\n\t}\r\n\r\n\tfunction getUserTotalTeamProfit(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].teamProfit[0]+users[userAddress].teamProfit[1]+users[userAddress].teamProfit[2]+users[userAddress].teamProfit[3]+users[userAddress].teamProfit[4]+users[userAddress].teamProfit[5];\r\n\t}\r\n\r\n\tfunction getUserReferralDividendsBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].dividendsBonus;\r\n\t}\r\n\r\n\tfunction getUserReferralTotalDividendsBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalDividendsBonus;\r\n\t}\r\n\r\n\tfunction getUserTotalLostDividends(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalLostDividends;\r\n\t}\r\n\r\n\tfunction getUserAvailable(address userAddress) public view returns(uint256) {\r\n\t\treturn getUserReferralDividendsBonus(userAddress).add(getUserDividends(userAddress));\r\n\t}\r\n\r\n\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].deposits.length;\r\n\t}\r\n\r\n\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256 amount) {\r\n\t\tfor (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n\t\t\tamount = amount.add(users[userAddress].deposits[i].amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserDepositInfo(address userAddress, uint256 index) public view returns(uint256 amount, uint256 start, uint256 withdrawn, bool _reinvest) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tamount = user.deposits[index].amount;\r\n\t\tstart = user.deposits[index].start;\r\n\t\twithdrawn = user.deposits[index].withdrawn;\r\n\t\t_reinvest = user.deposits[index].reinvest;\r\n\t}\r\n\r\n\tfunction getSiteInfo() public view returns(\r\n\t\tuint256 _totalInvested,\r\n\t\tuint256 _totalWithdrawn,\r\n\t\tuint256 _totalReinvest,\r\n\t\tuint256 _totalDividendsReferral,\r\n\t\tuint256 _totalActiveDeposits\r\n\t) {\r\n\t\treturn(\r\n\t\t\ttotalInvested,\r\n\t\t\ttotalWithdrawn,\r\n\t\t\ttotalReinvest,\r\n\t\t\ttotalDividendsReferral,\r\n\t\t\ttotalActiveDeposits\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getRequiredDividends() public view returns(\r\n\t\tuint256 _investors, \r\n\t\tuint256 _affiliates\r\n\t\t) {\r\n\r\n\t\tuint256 r = roundRates[cRound() - 1] > 0 ? roundRates[cRound() - 1] : RATE;\r\n\r\n\t\t_investors  = totalActiveDeposits.mul(r).div(PERCENTS_DIVIDER);\r\n\t\t_affiliates = _investors.mul(REFERRAL_DIVIDENDS).div(PERCENTS_DIVIDER);\r\n\t\t\r\n\t}\r\n\r\n\tfunction getRequiredDividendsByRoundAndRate(uint256 _round, uint256 _rate) public view returns(\r\n\t\tuint256 _Amount\r\n\t\t) {\r\n\t\tuint256 aD = roundStats[_round].tActiveDeposit > 0 ? roundStats[_round].tActiveDeposit : totalActiveDeposits;\r\n\t\tif(aD > 0){\r\n\t\t\tuint256 tpd = aD.mul(_rate).div(PERCENTS_DIVIDER);\r\n\t\t\t_Amount = tpd.add(tpd.mul(REFERRAL_DIVIDENDS).div(PERCENTS_DIVIDER));\r\n\t\t\t_Amount += _Amount.mul(WITHDRAW_FEE).div(PERCENTS_DIVIDER);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserInfo(address userAddress) public view returns(\r\n\t\tuint256 checkpoint, \r\n\t\tuint256 tDeposit, \r\n\t\tuint256 tWithdrawn, \r\n\t\tuint256 tReferrals,\r\n\t\tuint256 tDReferrals,\r\n\t\tuint256 tReinvests,\r\n\t\tuint256 tReserve\r\n\t\t) {\r\n\t\treturn(\r\n\t\t\tgetUserCheckpoint(userAddress), \r\n\t\t\tgetUserTotalDeposits(userAddress), \r\n\t\t\tgetUserTotalWithdrawn(userAddress), \r\n\t\t\tgetUserTotalReferrals(userAddress),\r\n\t\t\tusers[userAddress].totalDividendsBonus,\r\n\t\t\tusers[userAddress].totalReinvest,\r\n\t\t\tusers[userAddress].reserve\r\n\t\t);\r\n\t}\r\n\r\n\tfunction updateRoundStats() public {\r\n\t\tif(currentRound < cRound()){\r\n\t\t\troundStats[currentRound].tDeposit = totalInvested;\r\n\t\t\troundStats[currentRound].tActiveDeposit = totalActiveDeposits;\r\n\t\t\troundStats[currentRound].tWithdraw = totalWithdrawn;\r\n\t\t\troundStats[currentRound].tUsers = totalUsers;\r\n\t\t\troundStats[currentRound].date = block.timestamp;\r\n\t\t\troundStats[currentRound].tProfitDeposit;\r\n\t\t\troundStats[currentRound].tProfitAffiliate;\r\n\t\t\tcurrentRound = cRound();\r\n\t\t}\r\n    }\r\n\r\n\tfunction getRoundStats(uint256 index) public view returns (\r\n\t\tuint256 __tDeposit,\r\n\t\tuint256 __tActiveDeposit,\r\n\t\tuint256 __tWithdraw,\r\n\t\tuint256 __tUsers,\r\n\t\tuint256 __date,\r\n\t\tuint256 __tProfitDeposit,\r\n\t\tuint256 __tProfitAffiliate\r\n\t){\r\n\t\treturn (\r\n\t\troundStats[index].tDeposit,\r\n\t\troundStats[index].tActiveDeposit,\r\n\t\troundStats[index].tWithdraw,\r\n\t\troundStats[index].tUsers,\r\n\t\troundStats[index].date,\r\n\t\troundStats[index].tProfitDeposit,\r\n\t\troundStats[index].tProfitAffiliate\r\n\t\t);\r\n\t}\r\n\r\n\tfunction cRound() public view returns (uint256) {\r\n\t\tif(block.timestamp > startDate){\r\n        \treturn ((block.timestamp - startDate) / A_ROUND) + 1;\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn 0;\r\n\t\t}\r\n    }\r\n\r\n\tfunction cRoundStart() public view returns (uint256) {\r\n\t\tif(block.timestamp > startDate){\r\n        \treturn ((cRound() - 1) * A_ROUND) + startDate;\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn startDate;\r\n\t\t}\r\n    }\r\n\r\n\tfunction roundStart(uint256 index) public view returns (uint256) {\r\n\t\tif(block.timestamp > startDate && index > 0){\r\n        \treturn ((index - 1) * A_ROUND) + startDate;\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn startDate;\r\n\t\t}\r\n    }\r\n\r\n\tfunction nextRoundStart() public view returns (uint256) {\r\n        return cRoundStart() + A_ROUND;\r\n    }\r\n\r\n\tfunction getRoundRate(uint256 index) public view returns (uint256) {\r\n        return roundRates[index];\r\n    }\r\n\r\n\tfunction getBalanceStats() public view returns (uint256, uint256, uint256){\r\n\r\n\t\tuint256 nRemain = totalInsertDividends >= totalExitDividends ? (totalInsertDividends - totalExitDividends) : 0; \r\n\t\tuint256 cb = getContractBalance();\r\n\t\tuint256 available = cb >= nRemain ? (cb - nRemain) : 0;\r\n\t\treturn (\r\n\t\t\tcb,\r\n\t\t\tavailable,\r\n\t\t\tnRemain\r\n\t\t);\r\n\t} \r\n\r\n\tfunction setRoundRate(uint256 index, uint256 rate) public onlyAdmins{\r\n\t\trequire(index < cRound(), \"invalid round number\");\r\n\t\tif(rate == 0){\r\n\t\t\troundRates[index] = RATE;\r\n\t\t\troundStats[currentRound].rate = RATE;\r\n\t\t}\r\n\t\telse{\r\n\t\t\troundRates[index] = rate;\r\n\t\t\troundStats[currentRound].rate = rate;\r\n\t\t}\r\n\r\n\t\tif(index > lastSetRateRound){\r\n\t\t\tlastSetRateRound = index;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 aD = roundStats[index].tActiveDeposit > 0 ? roundStats[index].tActiveDeposit : totalActiveDeposits;\r\n\r\n\t\tif(aD > 0){\r\n\t\t\troundStats[index].tProfitDeposit = aD.mul(roundRates[index]).div(PERCENTS_DIVIDER);\r\n\t\t\troundStats[index].tProfitAffiliate = roundStats[index].tProfitDeposit.mul(REFERRAL_DIVIDENDS).div(PERCENTS_DIVIDER);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setRoundRateWithInject(uint256 index, uint256 rate) public onlyAdmins{\r\n\t\trequire(index < cRound(), \"invalid round number\");\r\n\t\trequire(roundStats[index].injected == false, \"only one time allowed\");\r\n\t\trequire(rate >= 10 && rate <= 200, \"invalid round number\");\r\n\r\n\t\tupdateRoundStats();\r\n\r\n\t\troundRates[index] = rate;\r\n\t\troundStats[currentRound].rate = rate;\r\n\t\troundStats[index].injected = true;\r\n\r\n\t\tif(index > lastSetRateRound){\r\n\t\t\tlastSetRateRound = index;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 aD = roundStats[index].tActiveDeposit > 0 ? roundStats[index].tActiveDeposit : totalActiveDeposits;\r\n\t\tuint256 injectAmount = 0;\r\n\t\tif(aD > 0){\r\n\t\t\tuint256 tpd = aD.mul(rate).div(PERCENTS_DIVIDER);\r\n\t\t\troundStats[index].tProfitDeposit = tpd;\r\n\t\t\troundStats[index].tProfitAffiliate = tpd.mul(REFERRAL_DIVIDENDS).div(PERCENTS_DIVIDER);\r\n\t\t\tinjectAmount = tpd.add(tpd.mul(REFERRAL_DIVIDENDS).div(PERCENTS_DIVIDER));\r\n\t\t}\r\n\r\n\t\tif(injectAmount > 0){\r\n\t\t\tinjectAmount += injectAmount.mul(WITHDRAW_FEE).div(PERCENTS_DIVIDER);\r\n\t\t\tinsertDividends(injectAmount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction deactiveRound(uint256 index) public onlyAdmins{\r\n\t\trequire(index < cRound(), \"invalid round number\");\r\n\t\troundRates[index] = 0;\t\r\n\t}\r\n\r\n\tfunction insertDividends(uint256 amount) public onlyAdmins{\r\n\t\trequire(amount <= token.allowance(msg.sender, address(this)));\r\n\t\ttoken.safeTransferFrom(msg.sender, address(this), amount);\r\n\t\ttotalInsertDividends += amount;\r\n\t}\r\n\r\n\tfunction reverseDividends(uint256 amount, address to) public onlyAdmins{\r\n\t\tuint256 contractBalance = token.balanceOf(address(this));\r\n\t\tif (contractBalance < amount) {\r\n\t\t\trevert(\"Not enough contract balance\");\r\n\t\t}\r\n\t\ttoken.safeTransfer(to, amount);\r\n\t\ttotalInsertDividends -= amount;\r\n\t}\r\n\r\n\tfunction withdrawProfitShare() public onlyAdmins{\r\n\t\tUser storage user = users[ownerWallet];\r\n\r\n\t\tuint256 referralDividendsBonus = user.dividendsBonus;\r\n\t\tuint256 contractBalance = token.balanceOf(address(this));\r\n\t\tif (contractBalance < referralDividendsBonus) {\r\n\t\t\tuser.dividendsBonus = user.dividendsBonus.sub(contractBalance);\r\n\t\t\treferralDividendsBonus = contractBalance;\r\n\t\t}else{\r\n\t\t\tuser.dividendsBonus = 0;\r\n\t\t}\r\n\r\n\t\trequire(referralDividendsBonus > 0, \"Not enough profit share\");\r\n\r\n\t\ttoken.safeTransfer(ownerWallet, referralDividendsBonus);\r\n\t\tuser.totalWithdrawn += referralDividendsBonus;\r\n\t\ttotalExitDividends += referralDividendsBonus;\r\n\t\ttotalWithdrawn += referralDividendsBonus;\r\n\t}\r\n\r\n\tfunction setMinInvest(uint256 amount) public onlyAdmins{\r\n\t\tMIN_INVEST = amount;\r\n\t}\r\n\r\n\tfunction setMinWithdraw(uint256 amount) public onlyAdmins{\r\n\t\tMIN_WITHDRAW = amount;\r\n\t}\r\n\r\n\tfunction setMinCompound(uint256 amount) public onlyAdmins{\r\n\t\tMIN_COMPOUND = amount;\r\n\t}\r\n\r\n\tfunction setMaxReferralPercent(uint256 amount) public onlyAdmins{\r\n\t\trequire(MAX_REFERRAL_PERCENT < 1000, \"Wrong referral max amount\");\r\n\t\tMAX_REFERRAL_PERCENT = amount;\r\n\t}\r\n\r\n\tfunction setReferralCommission(uint256 index, uint256 amount) public onlyAdmins{\r\n\t\trequire(index < 6, \"Wrong referral index\");\r\n\t\tREFERRAL_DIVIDENDS_PERCENTS[index] = amount;\r\n\t\tuint256 referralTotalAmount;\r\n\t\tfor (uint256 i = 0; i < REFERRAL_DIVIDENDS_PERCENTS.length; i++) {\r\n\t\t\treferralTotalAmount += REFERRAL_DIVIDENDS_PERCENTS[i];\r\n\t\t}\r\n\t\trequire(referralTotalAmount <= MAX_REFERRAL_PERCENT, \"Wrong total referral commission\");\r\n\t\tREFERRAL_DIVIDENDS = referralTotalAmount;\r\n\t}\r\n\r\n\tfunction setMaxDepositCount(uint256 amount) public onlyAdmins{\r\n\t\trequire(MAX_DEPOSITS < 1000, \"Wrong max deposit count\");\r\n\t\tMAX_DEPOSITS = amount;\r\n\t}\r\n\r\n\tfunction setNewDefaultRate(uint256 amount) public onlyAdmins{\r\n\t\trequire(amount >= 10 && amount < 1000, \"Wrong rate amount\");\r\n\t\tRATE = amount;\r\n\t}\r\n\r\n\tfunction setTotalReturn(uint256 amount) public onlyAdmins{\r\n\t\trequire(amount > 1000 , \"Wrong total return amount\");\r\n\t\tTOTAL_RETURN = amount;\r\n\t}\r\n\r\n\tfunction setMaxRoundCalculation(uint256 count) public onlyAdmins{\r\n\t\trequire(count >= 1 && count <= 50, \"Wrong round for calculation\");\r\n\t\tMAX_ROUND_CALCULATION = count;\r\n\t}\r\n\r\n\tfunction setRoundDuration(uint256 roundDay) public onlyAdmins{\r\n\t\trequire(roundDay >= 1, \"Wrong round for calculation\");\r\n\t\tA_ROUND = roundDay * TIME_STEP;\r\n\t}\r\n\r\n\tfunction setLastSetRateRound(uint256 round) public onlyAdmins{\r\n\t\tlastSetRateRound = round;\r\n\t}\r\n\r\n\tfunction setProjectToken(address tokenAddress) public onlyAdmins{\r\n\t\ttoken = IERC20(tokenAddress);\r\n\t}\r\n\r\n\tfunction claimCoin(uint256 amount) public onlyAdmins{\r\n\t\tpayable(msg.sender).transfer(amount);\r\n\t}\r\n\r\n\tfunction claimProjectToken(uint256 amount, address to) public onlyAdmins{\r\n\t\ttoken.safeTransfer(to, amount);\r\n\t}\r\n\r\n\tfunction claimToken(address tokenAddress, uint256 amount, address to) public onlyAdmins{\r\n\t\tIERC20(tokenAddress).transfer(to, amount);\r\n\t}\r\n\r\n\tfunction setOperators(address _addr, bool _status) external onlyOwner{\r\n\t\toperators[_addr] = _status;\r\n\t}\r\n\r\n\tfunction addToBlacklist(address _addr) external onlyOwner{\r\n\t\tblacklist[_addr] = true;\r\n\t}\r\n\r\n\tfunction removeFromBlacklist(address _addr) external onlyOwner{\r\n\t\tblacklist[_addr] = false;\r\n\t}\r\n\r\n\tfunction _isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewCompound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_ROUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEPOSITS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REFERRAL_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ROUND_CALCULATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_COMPOUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_INVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WITHDRAW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_DIVIDENDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_DIVIDENDS_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_RETURN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cRoundStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimProjectToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deactiveRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequiredDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_investors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_affiliates\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"getRequiredDividendsByRoundAndRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoundRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoundStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"__tDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__tActiveDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__tWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__tUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__tProfitDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__tProfitAffiliate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDividendsReferral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalActiveDeposits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_reinvest\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividendsCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"referrals\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tReferrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tDReferrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tReinvests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralDividendsBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalDividendsBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTeamProfit\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"teamProfit\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTeamTurnover\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"turnover\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalLostDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalTeamProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalTeamTurnover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"insertDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSetRateRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRoundStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"reverseDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"roundStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tActiveDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tProfitDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tProfitAffiliate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"injected\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"setLastSetRateRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxDepositCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxReferralPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"setMaxRoundCalculation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinInvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNewDefaultRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setProjectToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setReferralCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundDay\",\"type\":\"uint256\"}],\"name\":\"setRoundDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRoundRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRoundRateWithInject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTotalReturn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalActiveDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividendsReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExitDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInsertDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReinvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRoundStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dividendsBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDividendsBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLostDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeDepositIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProfitShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"reinvest\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AbundanceStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bd19161dd22d01b2b58e751595bf01de05042ce17afd261a7ff7e79f71ecd65c"}