{"SourceCode": "{\"Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n\\r\\nlibrary Address {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp \\u003e\\u003e= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\r\\n            value \\u003e\\u003e= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nlibrary ECDSA {\\r\\n    enum RecoverError {\\r\\n        NoError,\\r\\n        InvalidSignature,\\r\\n        InvalidSignatureLength,\\r\\n        InvalidSignatureS,\\r\\n        InvalidSignatureV\\r\\n    }\\r\\n\\r\\n    function _throwError(RecoverError error) private pure {\\r\\n        if (error == RecoverError.NoError) {\\r\\n            return; // no error: do nothing\\r\\n        } else if (error == RecoverError.InvalidSignature) {\\r\\n            revert(\\\"ECDSA: invalid signature\\\");\\r\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\r\\n            revert(\\\"ECDSA: invalid signature length\\\");\\r\\n        } else if (error == RecoverError.InvalidSignatureS) {\\r\\n            revert(\\\"ECDSA: invalid signature \\u0027s\\u0027 value\\\");\\r\\n        } else if (error == RecoverError.InvalidSignatureV) {\\r\\n            revert(\\\"ECDSA: invalid signature \\u0027v\\u0027 value\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\r\\n        // Check the signature length\\r\\n        // - case 65: r,s,v signature (standard)\\r\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\r\\n        if (signature.length == 65) {\\r\\n            bytes32 r;\\r\\n            bytes32 s;\\r\\n            uint8 v;\\r\\n            // ecrecover takes the signature parameters, and the only way to get them\\r\\n            // currently is to use assembly.\\r\\n            assembly {\\r\\n                r := mload(add(signature, 0x20))\\r\\n                s := mload(add(signature, 0x40))\\r\\n                v := byte(0, mload(add(signature, 0x60)))\\r\\n            }\\r\\n            return tryRecover(hash, v, r, s);\\r\\n        } else if (signature.length == 64) {\\r\\n            bytes32 r;\\r\\n            bytes32 vs;\\r\\n            // ecrecover takes the signature parameters, and the only way to get them\\r\\n            // currently is to use assembly.\\r\\n            assembly {\\r\\n                r := mload(add(signature, 0x20))\\r\\n                vs := mload(add(signature, 0x40))\\r\\n            }\\r\\n            return tryRecover(hash, r, vs);\\r\\n        } else {\\r\\n            return (address(0), RecoverError.InvalidSignatureLength);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\r\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\r\\n        _throwError(error);\\r\\n        return recovered;\\r\\n    }\\r\\n\\r\\n    function tryRecover(\\r\\n        bytes32 hash,\\r\\n        bytes32 r,\\r\\n        bytes32 vs\\r\\n    ) internal pure returns (address, RecoverError) {\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n        assembly {\\r\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\r\\n            v := add(shr(255, vs), 27)\\r\\n        }\\r\\n        return tryRecover(hash, v, r, s);\\r\\n    }\\r\\n\\r\\n    function recover(\\r\\n        bytes32 hash,\\r\\n        bytes32 r,\\r\\n        bytes32 vs\\r\\n    ) internal pure returns (address) {\\r\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\r\\n        _throwError(error);\\r\\n        return recovered;\\r\\n    }\\r\\n\\r\\n    function tryRecover(\\r\\n        bytes32 hash,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal pure returns (address, RecoverError) {\\r\\n        if (uint256(s) \\u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\r\\n            return (address(0), RecoverError.InvalidSignatureS);\\r\\n        }\\r\\n        if (v != 27 \\u0026\\u0026 v != 28) {\\r\\n            return (address(0), RecoverError.InvalidSignatureV);\\r\\n        }\\r\\n\\r\\n        // If the signature is valid (and not malleable), return the signer address\\r\\n        address signer = ecrecover(hash, v, r, s);\\r\\n        if (signer == address(0)) {\\r\\n            return (address(0), RecoverError.InvalidSignature);\\r\\n        }\\r\\n\\r\\n        return (signer, RecoverError.NoError);\\r\\n    }\\r\\n\\r\\n    function recover(\\r\\n        bytes32 hash,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal pure returns (address) {\\r\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\r\\n        _throwError(error);\\r\\n        return recovered;\\r\\n    }\\r\\n\\r\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\r\\n        // 32 is the length in bytes of hash,\\r\\n        // enforced by the type signature above\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\r\\n    }\\r\\n\\r\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\r\\n    }\\r\\n\\r\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"},\"FreeCreators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Common.sol\\\";\\r\\nimport \\\"./SwapInterface.sol\\\";\\r\\n\\r\\ninterface Manager {\\r\\n    function getRecommendList(address addr) external view returns(address[] memory recommends);\\r\\n}\\r\\n\\r\\ncontract FreeCreators is Ownable, IERC20 {\\r\\n    address public constant DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n    uint256 public constant MAX_UINT256 = type(uint256).max;\\r\\n    uint256 private constant MAX_SUPPLY = ~uint128(0) / 1e4;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name = \\\"FreeCreators\\\";\\r\\n    string private _symbol = \\\"FCT\\\";\\r\\n\\r\\n    uint256 private _decimals = 18;\\r\\n\\r\\n    address public uniswapV2RouterAddress;\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n    address public uniswapV2PairBNB;\\r\\n    address public uniswapV2PairUSDT;\\r\\n    address public usdt;\\r\\n\\r\\n    address private manager;\\r\\n    address private platform;\\r\\n\\r\\n    uint8 private fundRate = 10;\\r\\n    uint8 private lpRate = 15;\\r\\n    uint8 private superRate = 10;\\r\\n    uint8 private burnRate = 15;\\r\\n    address private fundAddress;\\r\\n    address private feeAddress;\\r\\n    address private liquidityManager;\\r\\n    address private lpAddress;\\r\\n    mapping(address =\\u003e bool) private excluded;\\r\\n\\r\\n    uint256 private startTime = 1679452352;\\r\\n\\r\\n    uint256 private TOTAL_GONS;\\r\\n    uint256 public _lastRebasedTime;\\r\\n    uint256 private _gonsPerFragment;\\r\\n    uint256 public pairBalance;\\r\\n    uint256 public rebaseRate = 21447;\\r\\n\\r\\n    bool lock;\\r\\n    modifier swapLock() {\\r\\n        require(!lock, \\\"FreeCreators: swap locked\\\");\\r\\n        lock = true;\\r\\n        _;\\r\\n        lock = false;\\r\\n    }\\r\\n\\r\\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\\r\\n    event SuperBonus(uint256 amount);\\r\\n\\r\\n    constructor(uint256 _initSupply, address _usdt, address _fundAddress, address _feeAddress, address _lpAddress, address _manager, address _uniswapV2RouterAddress) {\\r\\n        require(_usdt != address(0), \\\"FreeCreators: usdt address is 0\\\");\\r\\n        require(_fundAddress != address(0), \\\"FreeCreators: fund address is 0\\\");\\r\\n        require(_uniswapV2RouterAddress != address(0), \\\"FreeCreators: router address is 0\\\");\\r\\n\\r\\n        _totalSupply = _initSupply * 10 ** _decimals;\\r\\n        TOTAL_GONS = MAX_UINT256 / 1e10 - (MAX_UINT256 / 1e10 % _totalSupply);\\r\\n        _balances[owner()] = TOTAL_GONS;\\r\\n        _gonsPerFragment = TOTAL_GONS / _totalSupply;\\r\\n\\r\\n        usdt = _usdt;\\r\\n        fundAddress = _fundAddress;\\r\\n        feeAddress = _feeAddress;\\r\\n        lpAddress = _lpAddress;\\r\\n        manager = _manager;\\r\\n        uniswapV2RouterAddress = _uniswapV2RouterAddress;\\r\\n\\r\\n        uniswapV2Router = IUniswapV2Router02(uniswapV2RouterAddress);\\r\\n        uniswapV2PairBNB = IUniswapV2Factory(uniswapV2Router.factory())\\r\\n        .createPair(address(this), uniswapV2Router.WETH());\\r\\n        uniswapV2PairUSDT = IUniswapV2Factory(uniswapV2Router.factory())\\r\\n        .createPair(address(this), usdt);\\r\\n\\r\\n        excluded[owner()] = true;\\r\\n        excluded[address(this)] = true;\\r\\n        excluded[uniswapV2RouterAddress] = true;\\r\\n        excluded[fundAddress] = true;\\r\\n        excluded[feeAddress] = true;\\r\\n        excluded[lpAddress] = true;\\r\\n        excluded[manager] = true;\\r\\n        platform = owner();\\r\\n\\r\\n        emit Transfer(address(0), owner(), _totalSupply);\\r\\n    }\\r\\n\\r\\n    function initLiquidityManager(address _liquidityManager, uint256 _minLpDealTokenCount) public onlyOwner {\\r\\n        liquidityManager = _liquidityManager;\\r\\n        excluded[liquidityManager] = true;\\r\\n        Address.functionCall(\\r\\n            liquidityManager,\\r\\n            abi.encodeWithSelector(\\r\\n                0x544b08b5,\\r\\n                uniswapV2RouterAddress,\\r\\n                address(this),\\r\\n                usdt,\\r\\n                uniswapV2PairUSDT,\\r\\n                lpAddress,\\r\\n                _minLpDealTokenCount\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function transToken(address token, address addr, uint256 amount) public {\\r\\n        require(_msgSender() == platform, \\\"FreeCreators: no permission\\\");\\r\\n        require(addr != address(0), \\\"FreeCreators: address is 0\\\");\\r\\n        require(amount \\u003e 0, \\\"FreeCreators: amount equal to 0\\\");\\r\\n        require(amount \\u003c= IERC20(token).balanceOf(address(this)), \\\"FreeCreators: insufficient balance\\\");\\r\\n        Address.functionCall(token, abi.encodeWithSelector(0xa9059cbb, addr, amount));\\r\\n    }\\r\\n\\r\\n    function setStartTime(uint256 _startTime) public onlyOwner {\\r\\n        startTime = _startTime;\\r\\n        if (_lastRebasedTime == 0) {\\r\\n            _lastRebasedTime = _startTime;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setExcluded(address _addr, bool _state) public onlyOwner {\\r\\n        excluded[_addr] = _state;\\r\\n    }\\r\\n\\r\\n    function setExcluded(address[] memory _addrs, bool _state) public onlyOwner {\\r\\n        for (uint256 i ; i \\u003c _addrs.length ; i++) {\\r\\n            address _addr = _addrs[i];\\r\\n            excluded[_addr] = _state;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setFundAddress(address _fundAddress) public onlyOwner {\\r\\n        fundAddress = _fundAddress;\\r\\n        setExcluded(fundAddress, true);\\r\\n    }\\r\\n\\r\\n    function setFeeAddress(address _feeAddress) public onlyOwner {\\r\\n        feeAddress = _feeAddress;\\r\\n        setExcluded(feeAddress, true);\\r\\n    }\\r\\n\\r\\n    function setManager(address _manager) public onlyOwner {\\r\\n        manager = _manager;\\r\\n        excluded[manager] = true;\\r\\n    }\\r\\n\\r\\n    function name() public view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view override returns (uint256) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (account == uniswapV2PairUSDT){\\r\\n            return pairBalance;\\r\\n        }else{\\r\\n            return _balances[account] / _gonsPerFragment;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 amount) public override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(currentAllowance \\u003e= subtractedValue, \\\"FreeCreators: decreased allowance below zero\\\");\\r\\n\\r\\n        _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"FreeCreators: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"FreeCreators: transfer to the zero address\\\");\\r\\n\\r\\n        _tradeControl(from, to);\\r\\n\\r\\n        uint256 fromBalance;\\r\\n        if (from == uniswapV2PairUSDT) {\\r\\n            fromBalance = pairBalance;\\r\\n        } else {\\r\\n            fromBalance = _balances[from] / _gonsPerFragment;\\r\\n        }\\r\\n        require(fromBalance \\u003e= amount, \\\"FreeCreators: transfer amount exceeds balance\\\");\\r\\n\\r\\n        _rebase(from);\\r\\n\\r\\n        if (from != uniswapV2PairUSDT \\u0026\\u0026 !lock) {\\r\\n            _swapForLiquidity();\\r\\n        }\\r\\n\\r\\n        uint256 finalAmount = _fee(from, to, amount);\\r\\n\\r\\n        _basicTransfer(from, to, finalAmount);\\r\\n    }\\r\\n\\r\\n    function _basicTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        uint256 gonAmount = amount * _gonsPerFragment;\\r\\n        if (from == uniswapV2PairUSDT){\\r\\n            pairBalance = pairBalance - amount;\\r\\n        }else{\\r\\n            _balances[from] = _balances[from] - gonAmount;\\r\\n        }\\r\\n\\r\\n        if (to == uniswapV2PairUSDT){\\r\\n            pairBalance = pairBalance + amount;\\r\\n        }else{\\r\\n            _balances[to] = _balances[to] + gonAmount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        require(owner != address(0), \\\"FreeCreators: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"FreeCreators: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance \\u003e= amount, \\\"FreeCreators: insufficient allowance\\\");\\r\\n            _approve(owner, spender, currentAllowance - amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _rebase(address from) private {\\r\\n        if (\\r\\n            _totalSupply \\u003c MAX_SUPPLY \\u0026\\u0026\\r\\n            from != uniswapV2PairUSDT  \\u0026\\u0026\\r\\n            !lock \\u0026\\u0026\\r\\n            _lastRebasedTime \\u003e 0 \\u0026\\u0026\\r\\n            block.timestamp \\u003e= (_lastRebasedTime + 15 minutes)\\r\\n        ) {\\r\\n            uint256 deltaTime = block.timestamp - _lastRebasedTime;\\r\\n            uint256 times = deltaTime / (15 minutes);\\r\\n            uint256 epoch = times * 15;\\r\\n\\r\\n            for (uint256 i = 0; i \\u003c times; i++) {\\r\\n                _totalSupply = _totalSupply\\r\\n                * (10 ** 8 + rebaseRate)\\r\\n                / (10 ** 8);\\r\\n            }\\r\\n\\r\\n            _gonsPerFragment = TOTAL_GONS / _totalSupply;\\r\\n            _lastRebasedTime = _lastRebasedTime + times * 15 minutes;\\r\\n\\r\\n            emit LogRebase(epoch, _totalSupply);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _tradeControl(address from, address to) view private {\\r\\n        if (\\r\\n            from == address(uniswapV2PairBNB) ||\\r\\n            to == address(uniswapV2PairBNB) ||\\r\\n            from == address(uniswapV2PairUSDT) ||\\r\\n            to == address(uniswapV2PairUSDT)\\r\\n        ) {\\r\\n            address addr = (from == address(uniswapV2PairBNB) || from == address(uniswapV2PairUSDT)) ? to : from;\\r\\n            if (excluded[addr]) {\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            if (startTime \\u003e block.timestamp) {\\r\\n                revert(\\\"FreeCreators: trade not started\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _fee(address from, address to, uint256 amount) private returns (uint256 finalAmount) {\\r\\n        if (from == address(uniswapV2PairUSDT) || to == address(uniswapV2PairUSDT)) {\\r\\n            address addr = (from == address(uniswapV2PairUSDT)) ? to : from;\\r\\n            if (excluded[addr]) {\\r\\n                finalAmount = amount;\\r\\n            } else {\\r\\n                if (from == address(uniswapV2PairUSDT)) {\\r\\n                    finalAmount = _countBuy(from, to, amount);\\r\\n                } else if (to == address(uniswapV2PairUSDT)) {\\r\\n                    finalAmount = _countSell(from, amount);\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            if (excluded[from]) {\\r\\n                finalAmount = amount;\\r\\n            } else {\\r\\n                uint256 fee = amount * 50 / 1000;\\r\\n                if (fee \\u003e 0) {\\r\\n                    _basicTransfer(from, feeAddress, fee);\\r\\n                }\\r\\n                finalAmount = amount - fee;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _countBuy(address from, address to, uint256 amount) private returns (uint256 finalAmount) {\\r\\n        finalAmount = amount;\\r\\n        address[] memory list = Manager(manager).getRecommendList(to);\\r\\n        for (uint256 i ; i \\u003c 6 \\u0026\\u0026 i \\u003c list.length ; i++) {\\r\\n            address account = list[i];\\r\\n            if (account == address(0)) {\\r\\n                account = feeAddress;\\r\\n            }\\r\\n            if (account == platform) {\\r\\n                account = feeAddress;\\r\\n            }\\r\\n\\r\\n            uint256 rate = 3;\\r\\n            if (i == 0) {\\r\\n                rate = 20;\\r\\n            } else if (i == 1) {\\r\\n                rate = 10;\\r\\n            } else if (i == 2) {\\r\\n                rate = 8;\\r\\n            } else if (i == 3) {\\r\\n                rate = 6;\\r\\n            }\\r\\n\\r\\n            uint256 bonus = amount * rate / 1000;\\r\\n\\r\\n            _basicTransfer(from, account, bonus);\\r\\n\\r\\n            finalAmount -= bonus;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _countSell(address from, uint256 amount) private returns (uint256 finalAmount) {\\r\\n        uint256 fundFee = amount * fundRate / 1000;\\r\\n        uint256 lpFee = amount * lpRate / 1000;\\r\\n        uint256 superFee = amount * superRate / 1000;\\r\\n        uint256 burnFee = amount * burnRate / 1000;\\r\\n\\r\\n        finalAmount = amount - fundFee - lpFee - superFee - burnFee;\\r\\n\\r\\n        if (fundFee \\u003e 0) {\\r\\n            _basicTransfer(from, fundAddress, fundFee);\\r\\n        }\\r\\n        if (lpFee \\u003e 0) {\\r\\n            _basicTransfer(from, liquidityManager, lpFee);\\r\\n        }\\r\\n        if (superFee \\u003e 0) {\\r\\n            _basicTransfer(from, manager, superFee);\\r\\n            emit SuperBonus(superFee);\\r\\n        }\\r\\n        if (burnFee \\u003e 0) {\\r\\n            _basicTransfer(from, DEAD, burnFee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _swapForLiquidity() private swapLock {\\r\\n        Address.functionCall(liquidityManager, abi.encodeWithSelector(0x7389b5fd));\\r\\n    }\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"SwapInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2RouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SuperBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRebasedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minLpDealTokenCount\",\"type\":\"uint256\"}],\"name\":\"initLiquidityManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundAddress\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2PairBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2PairUSDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2RouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FreeCreators", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000e4085aefefb8490ec3035e80798c10995baceacb000000000000000000000000e07f367a63bb560f2681e900d21246ce5a890db00000000000000000000000001c3ab199faa24687ebbb56306a5a516ee4cf5408000000000000000000000000eb664b94bace1a5a3c698e7a556bfcec90470a1a00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5da90fceb56fe6c33ad2df20adaf0f1eff26d78da544c8eb15f1c13af4507bdd"}