{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/base/reward/Gauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../interface/IGauge.sol\\\";\\nimport \\\"../../interface/IPair.sol\\\";\\nimport \\\"../../interface/IVoter.sol\\\";\\nimport \\\"../../interface/IBribe.sol\\\";\\nimport \\\"../../interface/IERC721.sol\\\";\\nimport \\\"../../interface/IVe.sol\\\";\\nimport \\\"./MultiRewardsPoolBase.sol\\\";\\n\\n/// @title Gauges are used to incentivize pools, they emit reward tokens over 7 days for staked LP tokens\\ncontract Gauge is IGauge, MultiRewardsPoolBase {\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev The ve token used for gauges\\n  address public immutable ve;\\n  address public immutable bribe;\\n  address public immutable voter;\\n\\n  mapping(address => uint) public tokenIds;\\n\\n  uint public fees0;\\n  uint public fees1;\\n\\n  event ClaimFees(address indexed from, uint claimed0, uint claimed1);\\n  event VeTokenLocked(address indexed account, uint tokenId);\\n  event VeTokenUnlocked(address indexed account, uint tokenId);\\n\\n  constructor(\\n    address _stake,\\n    address _bribe,\\n    address _ve,\\n    address _voter,\\n    address[] memory _allowedRewardTokens\\n  ) MultiRewardsPoolBase(\\n    _stake,\\n    _voter,\\n    _allowedRewardTokens\\n  ) {\\n    bribe = _bribe;\\n    ve = _ve;\\n    voter = _voter;\\n  }\\n\\n  function claimFees() external lock override returns (uint claimed0, uint claimed1) {\\n    return _claimFees();\\n  }\\n\\n  function _claimFees() internal returns (uint claimed0, uint claimed1) {\\n    address _underlying = underlying;\\n    (claimed0, claimed1) = IPair(_underlying).claimFees();\\n    if (claimed0 > 0 || claimed1 > 0) {\\n      uint _fees0 = fees0 + claimed0;\\n      uint _fees1 = fees1 + claimed1;\\n      (address _token0, address _token1) = IPair(_underlying).tokens();\\n      if (_fees0 > IMultiRewardsPool(bribe).left(_token0)) {\\n        fees0 = 0;\\n        IERC20(_token0).safeIncreaseAllowance(bribe, _fees0);\\n        IBribe(bribe).notifyRewardAmount(_token0, _fees0);\\n      } else {\\n        fees0 = _fees0;\\n      }\\n      if (_fees1 > IMultiRewardsPool(bribe).left(_token1)) {\\n        fees1 = 0;\\n        IERC20(_token1).safeIncreaseAllowance(bribe, _fees1);\\n        IBribe(bribe).notifyRewardAmount(_token1, _fees1);\\n      } else {\\n        fees1 = _fees1;\\n      }\\n\\n      emit ClaimFees(msg.sender, claimed0, claimed1);\\n    }\\n  }\\n\\n  function getReward(address account, address[] memory tokens) external override {\\n    require(msg.sender == account || msg.sender == voter, \\\"Forbidden\\\");\\n    IVoter(voter).distribute(address(this));\\n    _getReward(account, tokens, account);\\n  }\\n\\n  function depositAll(uint tokenId) external {\\n    deposit(IERC20(underlying).balanceOf(msg.sender), tokenId);\\n  }\\n\\n  function deposit(uint amount, uint tokenId) public {\\n    if (tokenId > 0) {\\n      _lockVeToken(msg.sender, tokenId);\\n    }\\n    _deposit(amount);\\n    IVoter(voter).emitDeposit(tokenId, msg.sender, amount);\\n  }\\n\\n  function withdrawAll() external {\\n    withdraw(balanceOf[msg.sender]);\\n  }\\n\\n  function withdraw(uint amount) public {\\n    uint tokenId = 0;\\n    if (amount == balanceOf[msg.sender]) {\\n      tokenId = tokenIds[msg.sender];\\n    }\\n    withdrawToken(amount, tokenId);\\n    IVoter(voter).emitWithdraw(tokenId, msg.sender, amount);\\n  }\\n\\n  function withdrawToken(uint amount, uint tokenId) public {\\n    if (tokenId > 0) {\\n      _unlockVeToken(msg.sender, tokenId);\\n    }\\n    _withdraw(amount);\\n  }\\n\\n  /// @dev Balance should be recalculated after the lock\\n  ///      For locking a new ve token withdraw all funds and deposit again\\n  function _lockVeToken(address account, uint tokenId) internal {\\n    require(IERC721(ve).ownerOf(tokenId) == account, \\\"Not ve token owner\\\");\\n    if (tokenIds[account] == 0) {\\n      tokenIds[account] = tokenId;\\n      IVoter(voter).attachTokenToGauge(tokenId, account);\\n    }\\n    require(tokenIds[account] == tokenId, \\\"Wrong token\\\");\\n    emit VeTokenLocked(account, tokenId);\\n  }\\n\\n  /// @dev Balance should be recalculated after the unlock\\n  function _unlockVeToken(address account, uint tokenId) internal {\\n    require(tokenId == tokenIds[account], \\\"Wrong token\\\");\\n    tokenIds[account] = 0;\\n    IVoter(voter).detachTokenFromGauge(tokenId, account);\\n    emit VeTokenUnlocked(account, tokenId);\\n  }\\n\\n  /// @dev Similar to Curve https://resources.curve.fi/reward-gauges/boosting-your-crv-rewards#formula\\n  function _derivedBalance(address account) internal override view returns (uint) {\\n    uint _tokenId = tokenIds[account];\\n    uint _balance = balanceOf[account];\\n    uint _derived = _balance * 40 / 100;\\n    uint _adjusted = 0;\\n    uint _supply = IERC20(ve).totalSupply();\\n    if (account == IERC721(ve).ownerOf(_tokenId) && _supply > 0) {\\n      _adjusted = (totalSupply * IVe(ve).balanceOfNFT(_tokenId) / _supply) * 60 / 100;\\n    }\\n    return Math.min((_derived + _adjusted), _balance);\\n  }\\n\\n  function notifyRewardAmount(address token, uint amount) external {\\n    // claim rewards should not ruin distribution process\\n    try Gauge(address(this)).claimFees() {} catch {}\\n    _notifyRewardAmount(token, amount);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IGauge {\\n\\n  function notifyRewardAmount(address token, uint amount) external;\\n\\n  function getReward(address account, address[] memory tokens) external;\\n\\n  function claimFees() external returns (uint claimed0, uint claimed1);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IPair {\\n\\n  // Structure to capture time period obervations every 30 minutes, used for local oracles\\n  struct Observation {\\n    uint timestamp;\\n    uint reserve0Cumulative;\\n    uint reserve1Cumulative;\\n  }\\n\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n\\n  function burn(address to) external returns (uint amount0, uint amount1);\\n\\n  function mint(address to) external returns (uint liquidity);\\n\\n  function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n\\n  function getAmountOut(uint, address) external view returns (uint);\\n\\n  function claimFees() external returns (uint, uint);\\n\\n  function tokens() external view returns (address, address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function stable() external view returns (bool);\\n\\n  function metadata() external view returns (\\n    uint dec0,\\n    uint dec1,\\n    uint r0,\\n    uint r1,\\n    bool st,\\n    address t0,\\n    address t1\\n  );\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IVoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IVoter {\\n\\n  function ve() external view returns (address);\\n\\n  function attachTokenToGauge(uint _tokenId, address account) external;\\n\\n  function detachTokenFromGauge(uint _tokenId, address account) external;\\n\\n  function emitDeposit(uint _tokenId, address account, uint amount) external;\\n\\n  function emitWithdraw(uint _tokenId, address account, uint amount) external;\\n\\n  function distribute(address _gauge) external;\\n\\n  function notifyRewardAmount(uint amount) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IBribe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IBribe {\\n\\n  function notifyRewardAmount(address token, uint amount) external;\\n\\n  function _deposit(uint amount, uint tokenId) external;\\n\\n  function _withdraw(uint amount, uint tokenId) external;\\n\\n  function getRewardForOwner(uint tokenId, address[] memory tokens) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n  /**\\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n  /**\\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n   */\\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n  /**\\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n   */\\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n  /**\\n   * @dev Returns the number of tokens in ``owner``'s account.\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @dev Returns the owner of the `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  /**\\n   * @dev Transfers `tokenId` token from `from` to `to`.\\n   *\\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  /**\\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n   * The approval is cleared when the token is transferred.\\n   *\\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n   *\\n   * Requirements:\\n   *\\n   * - The caller must own the token or be an approved operator.\\n   * - `tokenId` must exist.\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address to, uint256 tokenId) external;\\n\\n  /**\\n   * @dev Returns the account approved for `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n  /**\\n   * @dev Approve or remove `operator` as an operator for the caller.\\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n   *\\n   * Requirements:\\n   *\\n   * - The `operator` cannot be the caller.\\n   *\\n   * Emits an {ApprovalForAll} event.\\n   */\\n  function setApprovalForAll(address operator, bool _approved) external;\\n\\n  /**\\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n   *\\n   * See {setApprovalForAll}\\n   */\\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IVe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IVe {\\n\\n  enum DepositType {\\n    DEPOSIT_FOR_TYPE,\\n    CREATE_LOCK_TYPE,\\n    INCREASE_LOCK_AMOUNT,\\n    INCREASE_UNLOCK_TIME,\\n    MERGE_TYPE\\n  }\\n\\n  struct Point {\\n    int128 bias;\\n    int128 slope; // # -dweight / dt\\n    uint ts;\\n    uint blk; // block\\n  }\\n  /* We cannot really do block numbers per se b/c slope is per time, not per block\\n  * and per block could be fairly bad b/c Ethereum changes blocktimes.\\n  * What we can do is to extrapolate ***At functions */\\n\\n  struct LockedBalance {\\n    int128 amount;\\n    uint end;\\n  }\\n\\n  function token() external view returns (address);\\n\\n  function balanceOfNFT(uint) external view returns (uint);\\n\\n  function isApprovedOrOwner(address, uint) external view returns (bool);\\n\\n  function createLockFor(uint, uint, address) external returns (uint);\\n\\n  function userPointEpoch(uint tokenId) external view returns (uint);\\n\\n  function epoch() external view returns (uint);\\n\\n  function userPointHistory(uint tokenId, uint loc) external view returns (Point memory);\\n\\n  function pointHistory(uint loc) external view returns (Point memory);\\n\\n  function checkpoint() external;\\n\\n  function depositFor(uint tokenId, uint value) external;\\n\\n  function attachToken(uint tokenId) external;\\n\\n  function detachToken(uint tokenId) external;\\n\\n  function voting(uint tokenId) external;\\n\\n  function abstain(uint tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/reward/MultiRewardsPoolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../interface/IMultiRewardsPool.sol\\\";\\nimport \\\"../../lib/Math.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\nimport \\\"../../lib/CheckpointLib.sol\\\";\\nimport \\\"../Reentrancy.sol\\\";\\n\\nabstract contract MultiRewardsPoolBase is Reentrancy, IMultiRewardsPool {\\n  using SafeERC20 for IERC20;\\n  using CheckpointLib for mapping(uint => CheckpointLib.Checkpoint);\\n\\n  /// @dev Operator can add/remove reward tokens\\n  address public operator;\\n\\n  /// @dev The LP token that needs to be staked for rewards\\n  address public immutable override underlying;\\n\\n  uint public override derivedSupply;\\n  mapping(address => uint) public override derivedBalances;\\n\\n  /// @dev Rewards are released over 7 days\\n  uint internal constant DURATION = 7 days;\\n  uint internal constant PRECISION = 10 ** 18;\\n  uint internal constant MAX_REWARD_TOKENS = 10;\\n\\n  /// Default snx staking contract implementation\\n  /// https://github.com/Synthetixio/synthetix/blob/develop/contracts/StakingRewards.sol\\n\\n  /// @dev Reward rate with precision 1e18\\n  mapping(address => uint) public rewardRate;\\n  mapping(address => uint) public periodFinish;\\n  mapping(address => uint) public lastUpdateTime;\\n  mapping(address => uint) public rewardPerTokenStored;\\n\\n  mapping(address => mapping(address => uint)) public lastEarn;\\n  mapping(address => mapping(address => uint)) public userRewardPerTokenStored;\\n\\n  uint public override totalSupply;\\n  mapping(address => uint) public override balanceOf;\\n\\n  address[] public override rewardTokens;\\n  mapping(address => bool) public override isRewardToken;\\n\\n  /// @notice A record of balance checkpoints for each account, by index\\n  mapping(address => mapping(uint => CheckpointLib.Checkpoint)) public checkpoints;\\n  /// @notice The number of checkpoints for each account\\n  mapping(address => uint) public numCheckpoints;\\n  /// @notice A record of balance checkpoints for each token, by index\\n  mapping(uint => CheckpointLib.Checkpoint) public supplyCheckpoints;\\n  /// @notice The number of checkpoints\\n  uint public supplyNumCheckpoints;\\n  /// @notice A record of balance checkpoints for each token, by index\\n  mapping(address => mapping(uint => CheckpointLib.Checkpoint)) public rewardPerTokenCheckpoints;\\n  /// @notice The number of checkpoints for each token\\n  mapping(address => uint) public rewardPerTokenNumCheckpoints;\\n\\n  event Deposit(address indexed from, uint amount);\\n  event Withdraw(address indexed from, uint amount);\\n  event NotifyReward(address indexed from, address indexed reward, uint amount);\\n  event ClaimRewards(address indexed from, address indexed reward, uint amount, address recepient);\\n\\n  constructor(address _stake, address _operator, address[] memory _allowedRewardTokens) {\\n    underlying = _stake;\\n    operator = _operator;\\n    for (uint i; i < _allowedRewardTokens.length; i++) {\\n      if (_allowedRewardTokens[i] != address(0)) {\\n        _registerRewardToken(_allowedRewardTokens[i]);\\n      }\\n    }\\n  }\\n\\n  modifier onlyOperator() {\\n    require(msg.sender == operator, \\\"Not operator\\\");\\n    _;\\n  }\\n\\n  //**************************************************************************\\n  //************************ VIEWS *******************************************\\n  //**************************************************************************\\n\\n  function rewardTokensLength() external view override returns (uint) {\\n    return rewardTokens.length;\\n  }\\n\\n  function rewardPerToken(address token) external view returns (uint) {\\n    return _rewardPerToken(token);\\n  }\\n\\n  function _rewardPerToken(address token) internal view returns (uint) {\\n    if (derivedSupply == 0) {\\n      return rewardPerTokenStored[token];\\n    }\\n    return rewardPerTokenStored[token]\\n    + (\\n    (_lastTimeRewardApplicable(token) - Math.min(lastUpdateTime[token], periodFinish[token]))\\n    * rewardRate[token]\\n    / derivedSupply\\n    );\\n  }\\n\\n  function derivedBalance(address account) external view override returns (uint) {\\n    return _derivedBalance(account);\\n  }\\n\\n  function left(address token) external view override returns (uint) {\\n    if (block.timestamp >= periodFinish[token]) return 0;\\n    uint _remaining = periodFinish[token] - block.timestamp;\\n    return _remaining * rewardRate[token] / PRECISION;\\n  }\\n\\n  function earned(address token, address account) external view override returns (uint) {\\n    return _earned(token, account);\\n  }\\n\\n  //**************************************************************************\\n  //************************ OPERATOR ACTIONS ********************************\\n  //**************************************************************************\\n\\n  function registerRewardToken(address token) external onlyOperator {\\n    _registerRewardToken(token);\\n  }\\n\\n  function _registerRewardToken(address token) internal {\\n    require(rewardTokens.length < MAX_REWARD_TOKENS, \\\"Too many reward tokens\\\");\\n    require(!isRewardToken[token], \\\"Already registered\\\");\\n    isRewardToken[token] = true;\\n    rewardTokens.push(token);\\n  }\\n\\n  function removeRewardToken(address token) external onlyOperator {\\n    require(periodFinish[token] < block.timestamp, \\\"Rewards not ended\\\");\\n    require(isRewardToken[token], \\\"Not reward token\\\");\\n\\n    isRewardToken[token] = false;\\n    uint length = rewardTokens.length;\\n    require(length > 3, \\\"First 3 tokens should not be removed\\\");\\n    // keep 3 tokens as guarantee against malicious actions\\n    // assume it will be CONE + pool tokens\\n    uint i = 3;\\n    bool found = false;\\n    for (; i < length; i++) {\\n      address t = rewardTokens[i];\\n      if (t == token) {\\n        found = true;\\n        break;\\n      }\\n    }\\n    require(found, \\\"First tokens forbidden to remove\\\");\\n    rewardTokens[i] = rewardTokens[length - 1];\\n    rewardTokens.pop();\\n  }\\n\\n  //**************************************************************************\\n  //************************ USER ACTIONS ************************************\\n  //**************************************************************************\\n\\n  function _deposit(uint amount) internal virtual lock {\\n    require(amount > 0, \\\"Zero amount\\\");\\n    _increaseBalance(msg.sender, amount);\\n    IERC20(underlying).safeTransferFrom(msg.sender, address(this), amount);\\n    emit Deposit(msg.sender, amount);\\n  }\\n\\n  function _increaseBalance(address account, uint amount) internal virtual {\\n    _updateRewardForAllTokens();\\n\\n    totalSupply += amount;\\n    balanceOf[account] += amount;\\n\\n    _updateDerivedBalanceAndWriteCheckpoints(account);\\n  }\\n\\n  function _withdraw(uint amount) internal lock virtual {\\n    _decreaseBalance(msg.sender, amount);\\n    IERC20(underlying).safeTransfer(msg.sender, amount);\\n    emit Withdraw(msg.sender, amount);\\n  }\\n\\n  function _decreaseBalance(address account, uint amount) internal virtual {\\n    _updateRewardForAllTokens();\\n\\n    totalSupply -= amount;\\n    balanceOf[account] -= amount;\\n\\n    _updateDerivedBalanceAndWriteCheckpoints(account);\\n  }\\n\\n  /// @dev Implement restriction checks!\\n  function _getReward(address account, address[] memory tokens, address recipient) internal lock virtual {\\n\\n    for (uint i = 0; i < tokens.length; i++) {\\n      (rewardPerTokenStored[tokens[i]], lastUpdateTime[tokens[i]]) = _updateRewardPerToken(tokens[i], type(uint).max, true);\\n\\n      uint _reward = _earned(tokens[i], account);\\n      lastEarn[tokens[i]][account] = block.timestamp;\\n      userRewardPerTokenStored[tokens[i]][account] = rewardPerTokenStored[tokens[i]];\\n      if (_reward > 0) {\\n        IERC20(tokens[i]).safeTransfer(recipient, _reward);\\n      }\\n\\n      emit ClaimRewards(msg.sender, tokens[i], _reward, recipient);\\n    }\\n\\n    _updateDerivedBalanceAndWriteCheckpoints(account);\\n  }\\n\\n  function _updateDerivedBalanceAndWriteCheckpoints(address account) internal {\\n    uint __derivedBalance = derivedBalances[account];\\n    derivedSupply -= __derivedBalance;\\n    __derivedBalance = _derivedBalance(account);\\n    derivedBalances[account] = __derivedBalance;\\n    derivedSupply += __derivedBalance;\\n\\n    _writeCheckpoint(account, __derivedBalance);\\n    _writeSupplyCheckpoint();\\n  }\\n\\n  //**************************************************************************\\n  //************************ REWARDS CALCULATIONS ****************************\\n  //**************************************************************************\\n\\n  // earned is an estimation, it won't be exact till the supply > rewardPerToken calculations have run\\n  function _earned(address token, address account) internal view returns (uint) {\\n    // zero checkpoints means zero deposits\\n    if (numCheckpoints[account] == 0) {\\n      return 0;\\n    }\\n    // last claim rewards time\\n    uint _startTimestamp = Math.max(lastEarn[token][account], rewardPerTokenCheckpoints[token][0].timestamp);\\n\\n    // find an index of the balance that the user had on the last claim\\n    uint _startIndex = _getPriorBalanceIndex(account, _startTimestamp);\\n    uint _endIndex = numCheckpoints[account] - 1;\\n\\n    uint reward = 0;\\n\\n    // calculate previous snapshots if exist\\n    if (_endIndex > 0) {\\n      for (uint i = _startIndex; i <= _endIndex - 1; i++) {\\n        CheckpointLib.Checkpoint memory cp0 = checkpoints[account][i];\\n        CheckpointLib.Checkpoint memory cp1 = checkpoints[account][i + 1];\\n        (uint _rewardPerTokenStored0,) = _getPriorRewardPerToken(token, cp0.timestamp);\\n        (uint _rewardPerTokenStored1,) = _getPriorRewardPerToken(token, cp1.timestamp);\\n        reward += cp0.value * (_rewardPerTokenStored1 - _rewardPerTokenStored0) / PRECISION;\\n      }\\n    }\\n\\n    CheckpointLib.Checkpoint memory cp = checkpoints[account][_endIndex];\\n    (uint _rewardPerTokenStored,) = _getPriorRewardPerToken(token, cp.timestamp);\\n    reward += cp.value * (_rewardPerToken(token) - Math.max(_rewardPerTokenStored, userRewardPerTokenStored[token][account])) / PRECISION;\\n    return reward;\\n  }\\n\\n  function _derivedBalance(address account) internal virtual view returns (uint) {\\n    // supposed to be implemented in a parent contract\\n    return balanceOf[account];\\n  }\\n\\n  /// @dev Update stored rewardPerToken values without the last one snapshot\\n  ///      If the contract will get \\\"out of gas\\\" error on users actions this will be helpful\\n  function batchUpdateRewardPerToken(address token, uint maxRuns) external {\\n    (rewardPerTokenStored[token], lastUpdateTime[token]) = _updateRewardPerToken(token, maxRuns, false);\\n  }\\n\\n  function _updateRewardForAllTokens() internal {\\n    uint length = rewardTokens.length;\\n    for (uint i; i < length; i++) {\\n      address token = rewardTokens[i];\\n      (rewardPerTokenStored[token], lastUpdateTime[token]) = _updateRewardPerToken(token, type(uint).max, true);\\n    }\\n  }\\n\\n  /// @dev Should be called only with properly updated snapshots, or with actualLast=false\\n  function _updateRewardPerToken(address token, uint maxRuns, bool actualLast) internal returns (uint, uint) {\\n    uint _startTimestamp = lastUpdateTime[token];\\n    uint reward = rewardPerTokenStored[token];\\n\\n    if (supplyNumCheckpoints == 0) {\\n      return (reward, _startTimestamp);\\n    }\\n\\n    if (rewardRate[token] == 0) {\\n      return (reward, block.timestamp);\\n    }\\n    uint _startIndex = _getPriorSupplyIndex(_startTimestamp);\\n    uint _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\\n\\n    if (_endIndex > 0) {\\n      for (uint i = _startIndex; i <= _endIndex - 1; i++) {\\n        CheckpointLib.Checkpoint memory sp0 = supplyCheckpoints[i];\\n        if (sp0.value > 0) {\\n          CheckpointLib.Checkpoint memory sp1 = supplyCheckpoints[i + 1];\\n          (uint _reward, uint _endTime) = _calcRewardPerToken(\\n            token,\\n            sp1.timestamp,\\n            sp0.timestamp,\\n            sp0.value,\\n            _startTimestamp\\n          );\\n          reward += _reward;\\n          _writeRewardPerTokenCheckpoint(token, reward, _endTime);\\n          _startTimestamp = _endTime;\\n        }\\n      }\\n    }\\n\\n    // need to override the last value with actual numbers only on deposit/withdraw/claim/notify actions\\n    if (actualLast) {\\n      CheckpointLib.Checkpoint memory sp = supplyCheckpoints[_endIndex];\\n      if (sp.value > 0) {\\n        (uint _reward,) = _calcRewardPerToken(token, _lastTimeRewardApplicable(token), Math.max(sp.timestamp, _startTimestamp), sp.value, _startTimestamp);\\n        reward += _reward;\\n        _writeRewardPerTokenCheckpoint(token, reward, block.timestamp);\\n        _startTimestamp = block.timestamp;\\n      }\\n    }\\n\\n    return (reward, _startTimestamp);\\n  }\\n\\n  function _calcRewardPerToken(\\n    address token,\\n    uint lastSupplyTs1,\\n    uint lastSupplyTs0,\\n    uint supply,\\n    uint startTimestamp\\n  ) internal view returns (uint, uint) {\\n    uint endTime = Math.max(lastSupplyTs1, startTimestamp);\\n    uint _periodFinish = periodFinish[token];\\n    return (\\n    (Math.min(endTime, _periodFinish) - Math.min(Math.max(lastSupplyTs0, startTimestamp), _periodFinish))\\n    * rewardRate[token] / supply\\n    , endTime);\\n  }\\n\\n  /// @dev Returns the last time the reward was modified or periodFinish if the reward has ended\\n  function _lastTimeRewardApplicable(address token) internal view returns (uint) {\\n    return Math.min(block.timestamp, periodFinish[token]);\\n  }\\n\\n  //**************************************************************************\\n  //************************ NOTIFY ******************************************\\n  //**************************************************************************\\n\\n  function _notifyRewardAmount(address token, uint amount) internal lock virtual {\\n    require(token != underlying, \\\"Wrong token for rewards\\\");\\n    require(amount > 0, \\\"Zero amount\\\");\\n    require(isRewardToken[token], \\\"Token not allowed\\\");\\n    if (rewardRate[token] == 0) {\\n      _writeRewardPerTokenCheckpoint(token, 0, block.timestamp);\\n    }\\n    (rewardPerTokenStored[token], lastUpdateTime[token]) = _updateRewardPerToken(token, type(uint).max, true);\\n\\n    if (block.timestamp >= periodFinish[token]) {\\n      IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n      rewardRate[token] = amount * PRECISION / DURATION;\\n    } else {\\n      uint _remaining = periodFinish[token] - block.timestamp;\\n      uint _left = _remaining * rewardRate[token];\\n      // not sure what the reason was in the original solidly implementation for this restriction\\n      // however, by design probably it is a good idea against human errors\\n      require(amount > _left / PRECISION, \\\"Amount should be higher than remaining rewards\\\");\\n      IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n      rewardRate[token] = (amount * PRECISION + _left) / DURATION;\\n    }\\n\\n    periodFinish[token] = block.timestamp + DURATION;\\n    emit NotifyReward(msg.sender, token, amount);\\n  }\\n\\n  //**************************************************************************\\n  //************************ CHECKPOINTS *************************************\\n  //**************************************************************************\\n\\n  function getPriorBalanceIndex(address account, uint timestamp) external view returns (uint) {\\n    return _getPriorBalanceIndex(account, timestamp);\\n  }\\n\\n  /// @notice Determine the prior balance for an account as of a block number\\n  /// @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n  /// @param account The address of the account to check\\n  /// @param timestamp The timestamp to get the balance at\\n  /// @return The balance the account had as of the given block\\n  function _getPriorBalanceIndex(address account, uint timestamp) internal view returns (uint) {\\n    uint nCheckpoints = numCheckpoints[account];\\n    if (nCheckpoints == 0) {\\n      return 0;\\n    }\\n    return checkpoints[account].findLowerIndex(nCheckpoints, timestamp);\\n  }\\n\\n  function getPriorSupplyIndex(uint timestamp) external view returns (uint) {\\n    return _getPriorSupplyIndex(timestamp);\\n  }\\n\\n  function _getPriorSupplyIndex(uint timestamp) internal view returns (uint) {\\n    uint nCheckpoints = supplyNumCheckpoints;\\n    if (nCheckpoints == 0) {\\n      return 0;\\n    }\\n    return supplyCheckpoints.findLowerIndex(nCheckpoints, timestamp);\\n  }\\n\\n  function getPriorRewardPerToken(address token, uint timestamp) external view returns (uint, uint) {\\n    return _getPriorRewardPerToken(token, timestamp);\\n  }\\n\\n  function _getPriorRewardPerToken(address token, uint timestamp) internal view returns (uint, uint) {\\n    uint nCheckpoints = rewardPerTokenNumCheckpoints[token];\\n    if (nCheckpoints == 0) {\\n      return (0, 0);\\n    }\\n    mapping(uint => CheckpointLib.Checkpoint) storage cps = rewardPerTokenCheckpoints[token];\\n    uint lower = cps.findLowerIndex(nCheckpoints, timestamp);\\n    CheckpointLib.Checkpoint memory cp = cps[lower];\\n    return (cp.value, cp.timestamp);\\n  }\\n\\n  function _writeCheckpoint(address account, uint balance) internal {\\n    uint _timestamp = block.timestamp;\\n    uint _nCheckPoints = numCheckpoints[account];\\n\\n    if (_nCheckPoints > 0 && checkpoints[account][_nCheckPoints - 1].timestamp == _timestamp) {\\n      checkpoints[account][_nCheckPoints - 1].value = balance;\\n    } else {\\n      checkpoints[account][_nCheckPoints] = CheckpointLib.Checkpoint(_timestamp, balance);\\n      numCheckpoints[account] = _nCheckPoints + 1;\\n    }\\n  }\\n\\n  function _writeRewardPerTokenCheckpoint(address token, uint reward, uint timestamp) internal {\\n    uint _nCheckPoints = rewardPerTokenNumCheckpoints[token];\\n\\n    if (_nCheckPoints > 0 && rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp == timestamp) {\\n      rewardPerTokenCheckpoints[token][_nCheckPoints - 1].value = reward;\\n    } else {\\n      rewardPerTokenCheckpoints[token][_nCheckPoints] = CheckpointLib.Checkpoint(timestamp, reward);\\n      rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\\n    }\\n  }\\n\\n  function _writeSupplyCheckpoint() internal {\\n    uint _nCheckPoints = supplyNumCheckpoints;\\n    uint _timestamp = block.timestamp;\\n\\n    if (_nCheckPoints > 0 && supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp) {\\n      supplyCheckpoints[_nCheckPoints - 1].value = derivedSupply;\\n    } else {\\n      supplyCheckpoints[_nCheckPoints] = CheckpointLib.Checkpoint(_timestamp, derivedSupply);\\n      supplyNumCheckpoints = _nCheckPoints + 1;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IMultiRewardsPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IMultiRewardsPool {\\n\\n  function underlying() external view returns (address);\\n\\n  function derivedSupply() external view returns (uint);\\n\\n  function derivedBalances(address account) external view returns (uint);\\n\\n  function totalSupply() external view returns (uint);\\n\\n  function balanceOf(address account) external view returns (uint);\\n\\n  function rewardTokens(uint id) external view returns (address);\\n\\n  function isRewardToken(address token) external view returns (bool);\\n\\n  function rewardTokensLength() external view returns (uint);\\n\\n  function derivedBalance(address account) external view returns (uint);\\n\\n  function left(address token) external view returns (uint);\\n\\n  function earned(address token, address account) external view returns (uint);\\n\\n  function registerRewardToken(address token) external;\\n\\n  function removeRewardToken(address token) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary Math {\\n\\n  function max(uint a, uint b) internal pure returns (uint) {\\n    return a >= b ? a : b;\\n  }\\n\\n  function min(uint a, uint b) internal pure returns (uint) {\\n    return a < b ? a : b;\\n  }\\n\\n  function positiveInt128(int128 value) internal pure returns (int128) {\\n    return value < 0 ? int128(0) : value;\\n  }\\n\\n  function closeTo(uint a, uint b, uint target) internal pure returns (bool) {\\n    if (a > b) {\\n      if (a - b <= target) {\\n        return true;\\n      }\\n    } else {\\n      if (b - a <= target) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  function sqrt(uint y) internal pure returns (uint z) {\\n    if (y > 3) {\\n      z = y;\\n      uint x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint value\\n  ) internal {\\n    uint newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/CheckpointLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary CheckpointLib {\\n\\n  /// @notice A checkpoint for uint value\\n  struct Checkpoint {\\n    uint timestamp;\\n    uint value;\\n  }\\n\\n  function findLowerIndex(mapping(uint => Checkpoint) storage checkpoints, uint size, uint timestamp) internal view returns (uint) {\\n    require(size != 0, \\\"Empty checkpoints\\\");\\n\\n    // First check most recent value\\n    if (checkpoints[size - 1].timestamp <= timestamp) {\\n      return (size - 1);\\n    }\\n\\n    // Next check implicit zero value\\n    if (checkpoints[0].timestamp > timestamp) {\\n      return 0;\\n    }\\n\\n    uint lower = 0;\\n    uint upper = size - 1;\\n    while (upper > lower) {\\n      // ceil, avoiding overflow\\n      uint center = upper - (upper - lower) / 2;\\n      Checkpoint memory cp = checkpoints[center];\\n      if (cp.timestamp == timestamp) {\\n        return center;\\n      } else if (cp.timestamp < timestamp) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return lower;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/base/Reentrancy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nabstract contract Reentrancy {\\n\\n  /// @dev simple re-entrancy check\\n  uint internal _unlocked = 1;\\n\\n  modifier lock() {\\n    require(_unlocked == 1, \\\"Reentrant call\\\");\\n    _unlocked = 2;\\n    _;\\n    _unlocked = 1;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n    (bool success, bytes memory returndata) = target.call(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bribe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_allowedRewardTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed1\",\"type\":\"uint256\"}],\"name\":\"ClaimFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"VeTokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"VeTokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxRuns\",\"type\":\"uint256\"}],\"name\":\"batchUpdateRewardPerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"derivedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"derivedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPriorBalanceIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPriorRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPriorSupplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"left\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"registerRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPerTokenCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerTokenNumCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supplyCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyNumCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Gauge", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000fe6cf7a2687c5bddf302c5ccea901ba0bf71816000000000000000000000000126a54ec38e6cc4175f7587262d8129009339d56000000000000000000000000d0c1378c177e961d96c06b0e8f6e7841476c81ef000000000000000000000000c3b5d80e4c094b17603ea8bb15d2d31ff5954aae00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000e80772eaf6e2e18b651f160bc9158b2a5cafca65000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000a60205802e1b5c6ec1cafa3cacd49dfeece05ac9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}