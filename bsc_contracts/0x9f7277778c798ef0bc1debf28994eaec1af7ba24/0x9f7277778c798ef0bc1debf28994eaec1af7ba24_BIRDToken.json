{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.6.12;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Burn(address indexed owner, address indexed to, uint value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint a,\r\n        uint b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint a,\r\n        uint b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IBack {\r\n    function swapAndLiquify(uint256 contractTokenBalance) external;\r\n}\r\n\r\ncontract BEP20 is Context, Ownable, IBEP20 {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint) internal _balances;\r\n    mapping(address => mapping(address => uint)) internal _allowances;\r\n    mapping(address => bool) private _isMarketPair;\r\n    mapping(address => bool) private _isExcluded;\r\n\r\n    uint internal _totalSupply;\r\n\r\n    uint public totalBurn;\r\n\r\n    uint256 public _taxFee = 10;\r\n    uint256 public _backFee = 5;\r\n    uint256 public _burnFee = 5;\r\n    uint public _startBlock;\r\n    uint internal _blocks = 50;\r\n    bool public _txEnable = true;\r\n    bool public _txFeeEnable = false;\r\n    bool public _sellEnable = false;\r\n    bool public _sellFeeEnable = true;\r\n    bool public _buyEnable = true;\r\n    bool public _buyFeeEnable = false;\r\n    bool public _backEnable = true;\r\n    uint256 private numTokensSellToAddToLiquidity = 100 * 10**18;\r\n    bool private inSwapAndLiquify;\r\n\r\n    address public Back = 0x347b552263b583A64fa3d11Fd1DD1039f869d48A;\r\n    address public Dead = 0x000000000000000000000000000000000000dEaD;\r\n    address public wha = 0xb5Ed97AC27AFd7E7e3c6bF6c95B46A16793eDE79;\r\n    address public emergency = 0xb5Ed97AC27AFd7E7e3c6bF6c95B46A16793eDE79;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor() internal {\r\n        _isExcluded[owner()] = true;\r\n        _isExcluded[Back] = true;\r\n        _isExcluded[Dead] = true;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address towner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint)\r\n    {\r\n        return _allowances[towner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"BEP20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"BEP20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) internal {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(amount > 0, \"BEP20: transfer amount the 0\");\r\n\r\n        if (inSwapAndLiquify) {\r\n            _basicTransfer(sender, recipient, amount);\r\n        } else {\r\n            _balances[sender] = _balances[sender].sub(\r\n                amount,\r\n                \"BEP20: transfer amount exceeds balance\"\r\n            );\r\n\r\n            uint256 netAmount = amount;\r\n            bool excludedAccount = _isExcluded[sender] || _isExcluded[recipient];\r\n            if (!excludedAccount) {\r\n                if (_startBlock == 0 || block.number < (_startBlock + _blocks)) {\r\n                    require(false, \"not start\");\r\n                } else if (_isMarketPair[recipient]) {\r\n                    require(_sellEnable, \"not sell\");\r\n                    if (_sellEnable && _sellFeeEnable) {\r\n                        netAmount = _takeFees(sender, recipient, amount);\r\n                    }\r\n                } else if (_isMarketPair[sender]) {\r\n                    require(_buyEnable, \"not buy\");\r\n                    if (_buyEnable && _buyFeeEnable) {\r\n                        netAmount = _takeFees(sender, recipient, amount);\r\n                    }\r\n                } else {\r\n                    require(_txEnable, \"not transfer\");\r\n                    if (_txEnable && _txFeeEnable) {\r\n                        netAmount = _takeFees(sender, recipient, amount);\r\n                    }\r\n                }\r\n            } else if (\r\n                excludedAccount && _isMarketPair[recipient] && _startBlock == 0\r\n            ) {\r\n                _startBlock = block.number;\r\n            }\r\n\r\n            _swap();\r\n\r\n            _balances[recipient] = _balances[recipient].add(netAmount);\r\n\r\n            emit Transfer(sender, recipient, netAmount);\r\n        }\r\n    }\r\n\r\n    function _takeFees(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (uint256 netAmount) {\r\n        uint256 tax = amount.mul(_taxFee).div(100);\r\n\r\n        netAmount = amount - tax;\r\n\r\n        if (tax > 0) {\r\n            uint256 backFee = tax.mul(_backFee).div(_taxFee);\r\n            uint256 burnFee = tax - backFee;\r\n            _takeFee(sender, Back, backFee);\r\n            _burn(sender, Dead, burnFee);\r\n            emit Transfer(sender, Dead, burnFee);\r\n        }\r\n    }\r\n\r\n    function _takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tax\r\n    ) private returns (uint) {\r\n        _balances[recipient] = _balances[recipient].add(tax);\r\n        emit Transfer(sender, recipient, tax);\r\n    }\r\n\r\n    function _burn(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) private {\r\n        if (recipient == address(0) || recipient == Dead) {\r\n            totalBurn = totalBurn.add(amount);\r\n            _totalSupply = _totalSupply.sub(amount);\r\n\r\n            emit Burn(sender, Dead, amount);\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"BEP20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address towner,\r\n        address spender,\r\n        uint amount\r\n    ) internal {\r\n        require(towner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[towner][spender] = amount;\r\n        emit Approval(towner, spender, amount);\r\n    }\r\n\r\n    function _swap() internal {\r\n        uint256 contractTokenBalance = balanceOf(address(Back));\r\n        bool overMinTokenBalance = contractTokenBalance >=\r\n            numTokensSellToAddToLiquidity;\r\n        if (\r\n            _backEnable &&\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            Back != address(0)\r\n        ) {\r\n            contractTokenBalance = numTokensSellToAddToLiquidity;\r\n            // add liquidity\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        IBack(Back).swapAndLiquify(contractTokenBalance);\r\n    }\r\n\r\n    function multExcludeFrom(address[] calldata accounts) external {\r\n        require(wha == msg.sender || owner() == msg.sender, \"auth error\");\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _isExcluded[accounts[i]] = false;\r\n        }\r\n    }\r\n\r\n    function multIncludeIn(address[] calldata accounts) external {\r\n        require(wha == msg.sender || owner() == msg.sender, \"auth error\");\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _isExcluded[accounts[i]] = true;\r\n        }\r\n    }\r\n\r\n    function setBackAddr(address _addr) external onlyOwner {\r\n        require(_addr != address(0), \"zero address\");\r\n        Back = _addr;\r\n    }\r\n\r\n    function fees(\r\n        uint taxFee,\r\n        uint burnFee,\r\n        uint backFee\r\n    ) external onlyOwner {\r\n        _taxFee = taxFee;\r\n        _burnFee = burnFee;\r\n        _backFee = backFee;\r\n    }\r\n\r\n    function setBlocks(uint _num) external onlyOwner {\r\n        _blocks = _num;\r\n    }\r\n\r\n    function setStartBlock(uint _num) external onlyOwner {\r\n        _startBlock = _num;\r\n    }\r\n\r\n    function setMarketPairStatus(address account, bool newValue) external onlyOwner {\r\n        _isMarketPair[account] = newValue;\r\n    }\r\n\r\n    function getMarketPairStatus(address account) external view returns (bool) {\r\n        return _isMarketPair[account];\r\n    }\r\n\r\n    function _WHA(address _wh) external {\r\n        require(wha == msg.sender, \"auth error\");\r\n        wha = _wh;\r\n    }\r\n\r\n    function _emergencyEn(address _emergency) external {\r\n        require(emergency == msg.sender, \"auth error\");\r\n        emergency = _emergency;\r\n    }\r\n\r\n    function setSellEnable(bool newValue, bool newValue1) external onlyOwner {\r\n        _sellEnable = newValue;\r\n        _sellFeeEnable = newValue1;\r\n    }\r\n\r\n    function setBuyEnable(bool newValue, bool newValue1) external onlyOwner {\r\n        _buyEnable = newValue;\r\n        _buyFeeEnable = newValue1;\r\n    }\r\n\r\n    function setTxEnable(bool newValue, bool newValue1) external onlyOwner {\r\n        _txEnable = newValue;\r\n        _txFeeEnable = newValue1;\r\n    }\r\n\r\n    function setBackEnable(bool newValue) external onlyOwner {\r\n        _backEnable = newValue;\r\n    }\r\n}\r\n\r\ncontract BEP20Detailed is BEP20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory tname,\r\n        string memory tsymbol,\r\n        uint8 tdecimals\r\n    ) internal {\r\n        _name = tname;\r\n        _symbol = tsymbol;\r\n        _decimals = tdecimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract BIRDToken is BEP20Detailed {\r\n    constructor() public BEP20Detailed(\"BIRD\", \"BIRD\", 18) {\r\n        _totalSupply = 76000000 * (10**18);\r\n\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function takeOutTokenInCase(\r\n        address _token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) external {\r\n        require(emergency == msg.sender || owner() == msg.sender, \"auth error\");\r\n        IBEP20(_token).transfer(_to, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Back\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wh\",\"type\":\"address\"}],\"name\":\"_WHA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_backEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_backFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFeeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_emergency\",\"type\":\"address\"}],\"name\":\"_emergencyEn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFeeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_txEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_txFeeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"towner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"backFee\",\"type\":\"uint256\"}],\"name\":\"fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getMarketPairStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"multExcludeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"multIncludeIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBackAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setBackEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"newValue1\",\"type\":\"bool\"}],\"name\":\"setBuyEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setMarketPairStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"newValue1\",\"type\":\"bool\"}],\"name\":\"setSellEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"newValue1\",\"type\":\"bool\"}],\"name\":\"setTxEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"takeOutTokenInCase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wha\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BIRDToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cf8e6da49287b0aa9aa79e2535da4494d0c1ebea215f5745a26a59b0089f90df"}