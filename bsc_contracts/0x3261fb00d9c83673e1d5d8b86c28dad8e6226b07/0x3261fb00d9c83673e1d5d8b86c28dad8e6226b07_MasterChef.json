{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/OasisToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\ncontract OasisToken is ERC20Burnable, Ownable {\\n    uint256 constant CAP = 14000000 * 10 ** 18;\\n\\n    constructor () ERC20(\\\"OASIS\\\", \\\"OASIS\\\") public {\\n        _mint(msg.sender, CAP);\\n    }\\n}\"\r\n    },\r\n    \"./contracts/Migrations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.25 <0.7.0;\\n\\ncontract Migrations {\\n  address public owner;\\n  uint public last_completed_migration;\\n\\n  modifier restricted() {\\n    if (msg.sender == owner) _;\\n  }\\n\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  function setCompleted(uint completed) public restricted {\\n    last_completed_migration = completed;\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/launchpad/Whitelist.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at Etherscan.io on 2021-02-15\\n*/\\n\\npragma solidity 0.6.12; \\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Whitelist is Ownable {\\n\\n    mapping(address => bool) public whitelist;\\n    address[] public whitelistedAddresses;\\n    bool public hasWhitelisting = false;\\n\\n    event AddedToWhitelist(address[] indexed accounts);\\n    event RemovedFromWhitelist(address indexed account);\\n\\n    modifier onlyWhitelisted() {\\n        if(hasWhitelisting){\\n            require(isWhitelisted(msg.sender));\\n        }\\n        _;\\n    }\\n    \\n    constructor (bool _hasWhitelisting) public{\\n        hasWhitelisting = _hasWhitelisting;\\n    }\\n\\n    function add(address[] memory _addresses) public onlyOwner {\\n        for (uint i = 0; i < _addresses.length; i++) {\\n            require(whitelist[_addresses[i]] != true);\\n            whitelist[_addresses[i]] = true;\\n            whitelistedAddresses.push(_addresses[i]);\\n        }\\n        emit AddedToWhitelist(_addresses);\\n    }\\n\\n    function remove(address _address, uint256 _index) public onlyOwner {\\n        require(_address == whitelistedAddresses[_index]);\\n        whitelist[_address] = false;\\n        delete whitelistedAddresses[_index];\\n        emit RemovedFromWhitelist(_address);\\n    }\\n\\n    function getWhitelistedAddresses() public view returns(address[] memory) {\\n        return whitelistedAddresses;\\n    } \\n\\n    function isWhitelisted(address _address) public view returns(bool) {\\n        return whitelist[_address];\\n    }\\n}\"\r\n    },\r\n    \"./contracts/launchpad/FixedSwap.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at Etherscan.io on 2021-02-15\\n*/\\n\\npragma solidity 0.6.12; \\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./Whitelist.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n\\ncontract FixedSwap is Pausable, Whitelist {\\n    using SafeMath for uint256;\\n    uint256 increment = 0;\\n\\n    mapping(uint256 => Purchase) public purchases; /* Purchasers mapping */\\n    address[] public buyers; /* Current Buyers Addresses */\\n    uint256[] public purchaseIds; /* All purchaseIds */\\n    mapping(address => uint256[]) public myPurchases; /* Purchasers mapping */\\n\\n    ERC20 public erc20;\\n    bool public isSaleFunded = false;\\n    uint public decimals = 0;\\n    bool public unsoldTokensReedemed = false;\\n    uint256 public tradeValue; /* Price in Wei */\\n    uint256 public startDate; /* Start Date  */\\n    uint256 public endDate;  /* End Date  */\\n    uint256 public firstUnlockDate;\\n    uint256 public secondUnlockDate;\\n    uint256 public individualMinimumAmount = 0;  /* Minimum Amount Per Address */\\n    uint256 public individualMaximumAmount = 0;  /* Minimum Amount Per Address */\\n    uint256 public minimumRaise = 0;  /* Minimum Amount of Tokens that have to be sold */\\n    uint256 public tokensAllocated = 0; /* Tokens Available for Allocation - Dynamic */\\n    uint256 public tokensForSale = 0; /* Tokens Available for Sale */\\n    bool    public isTokenSwapAtomic; /* Make token release atomic or not */\\n    address payable public FEE_ADDRESS = 0x0be0481Fa21535441a77DdDB9262539Ee385fc9C; /* Default Address for Fee Percentage */\\n    uint256 public feePercentage = 1; /* Default Fee 1% */\\n\\n    struct Purchase {\\n        uint256 amount;\\n        uint256 remainingAmount;\\n        address purchaser;\\n        uint256 ethAmount;\\n        uint256 timestamp;\\n    \\n        bool wasFinalized /* Confirm the tokens were sent already */;\\n        bool reverted /* Confirm the tokens were sent already */;\\n    }\\n\\n    event PurchaseEvent(uint256 amount, address indexed purchaser, uint256 timestamp);\\n\\n    constructor(address _tokenAddress, uint256 _tradeValue, uint256 _tokensForSale, uint256 _startDate, \\n        uint256 _endDate, uint256 _individualMinimumAmount, uint256 _individualMaximumAmount, bool _isTokenSwapAtomic, uint256 _minimumRaise,\\n        uint256 _feeAmount, bool _hasWhitelisting\\n    ) public Whitelist(_hasWhitelisting) {\\n        \\n        /* Confirmations */\\n        require(block.timestamp < _endDate, \\\"End Date should be further than current date\\\");\\n        require(block.timestamp < _startDate, \\\"End Date should be further than current date\\\");\\n        require(_startDate < _endDate, \\\"End Date higher than Start Date\\\");\\n        require(_tokensForSale > 0, \\\"Tokens for Sale should be > 0\\\");\\n        require(_tokensForSale > _individualMinimumAmount, \\\"Tokens for Sale should be > Individual Minimum Amount\\\");\\n        require(_individualMaximumAmount >= _individualMinimumAmount, \\\"Individual Maximim AMount should be > Individual Minimum Amount\\\");\\n        require(_minimumRaise <= _tokensForSale, \\\"Minimum Raise should be < Tokens For Sale\\\");\\n        require(_feeAmount >= feePercentage, \\\"Fee Percentage has to be >= 1\\\");\\n        require(_feeAmount <= 99, \\\"Fee Percentage has to be < 100\\\");\\n\\n        startDate = _startDate; \\n        endDate = _endDate;\\n        tokensForSale = _tokensForSale;\\n        tradeValue = _tradeValue;\\n\\n        individualMinimumAmount = _individualMinimumAmount; \\n        individualMaximumAmount = _individualMaximumAmount; \\n        isTokenSwapAtomic = _isTokenSwapAtomic;\\n\\n        if(!_isTokenSwapAtomic){ /* If raise is not atomic swap */\\n            minimumRaise = _minimumRaise;\\n        }\\n\\n        erc20 = ERC20(_tokenAddress);\\n        decimals = erc20.decimals();\\n        feePercentage = _feeAmount;\\n    }\\n\\n    /**\\n    * Modifier to make a function callable only when the contract has Atomic Swaps not available.\\n    */\\n    modifier isNotAtomicSwap() {\\n        require(!isTokenSwapAtomic, \\\"Has to be non Atomic swap\\\");\\n        _;\\n    }\\n\\n     /**\\n    * Modifier to make a function callable only when the contract has Atomic Swaps not available.\\n    */\\n    modifier isSaleFinalized() {\\n        require(hasFinalized(), \\\"Has to be finalized\\\");\\n        _;\\n    }\\n\\n     /**\\n    * Modifier to make a function callable only when the swap time is open.\\n    */\\n    modifier isSaleOpen() {\\n        require(isOpen(), \\\"Has to be open\\\");\\n        _;\\n    }\\n\\n     /**\\n    * Modifier to make a function callable only when the contract has Atomic Swaps not available.\\n    */\\n    modifier isSalePreStarted() {\\n        require(isPreStart(), \\\"Has to be pre-started\\\");\\n        _;\\n    }\\n\\n    /**\\n    * Modifier to make a function callable only when the contract has Atomic Swaps not available.\\n    */\\n    modifier isFunded() {\\n        require(isSaleFunded, \\\"Has to be funded\\\");\\n        _;\\n    }\\n\\n\\n    /* Get Functions */\\n    function isBuyer(uint256 purchase_id) public view returns (bool) {\\n        return (msg.sender == purchases[purchase_id].purchaser);\\n    }\\n\\n    /* Get Functions */\\n    function totalRaiseCost() public view returns (uint256) {\\n        return (cost(tokensForSale));\\n    }\\n\\n    function availableTokens() public view returns (uint256) {\\n        return erc20.balanceOf(address(this));\\n    }\\n\\n    function tokensLeft() public view returns (uint256) {\\n        return tokensForSale - tokensAllocated;\\n    }\\n\\n    function hasMinimumRaise() public view returns (bool){\\n        return (minimumRaise != 0);\\n    }\\n\\n    /* Verify if minimum raise was not achieved */\\n    function minimumRaiseNotAchieved() public view returns (bool){\\n        require(cost(tokensAllocated) < cost(minimumRaise), \\\"TotalRaise is bigger than minimum raise amount\\\");\\n        return true;\\n    }\\n\\n    /* Verify if minimum raise was achieved */\\n    function minimumRaiseAchieved() public view returns (bool){\\n        if(hasMinimumRaise()){\\n            require(cost(tokensAllocated) >= cost(minimumRaise), \\\"TotalRaise is less than minimum raise amount\\\");\\n        }\\n        return true;\\n    }\\n\\n    function hasFinalized() public view returns (bool){\\n        return block.timestamp > endDate;\\n    }\\n\\n    function hasStarted() public view returns (bool){\\n        return block.timestamp >= startDate;\\n    }\\n    \\n    function isPreStart() public view returns (bool){\\n        return block.timestamp < startDate;\\n    }\\n\\n    function isOpen() public view returns (bool){\\n        return hasStarted() && !hasFinalized();\\n    }\\n\\n    function hasMinimumAmount() public view returns (bool){\\n       return (individualMinimumAmount != 0);\\n    }\\n\\n    function cost(uint256 _amount) public view returns (uint){\\n        return _amount.mul(tradeValue).div(10**decimals); \\n    }\\n\\n    function getPurchase(uint256 _purchase_id) external view returns (uint256, address, uint256, uint256, bool, bool){\\n        Purchase memory purchase = purchases[_purchase_id];\\n        return (purchase.amount, purchase.purchaser, purchase.ethAmount, purchase.timestamp, purchase.wasFinalized, purchase.reverted);\\n    }\\n\\n    function getPurchaseIds() public view returns(uint256[] memory) {\\n        return purchaseIds;\\n    }\\n\\n    function getBuyers() public view returns(address[] memory) {\\n        return buyers;\\n    }\\n\\n    function getMyPurchases(address _address) public view returns(uint256[] memory) {\\n        return myPurchases[_address];\\n    }\\n\\n    /* Fund - Pre Sale Start */\\n    function fund(uint256 _amount) public isSalePreStarted {\\n        \\n        /* Confirm transfered tokens is no more than needed */\\n        require(availableTokens().add(_amount) <= tokensForSale, \\\"Transfered tokens have to be equal or less than proposed\\\");\\n\\n        /* Transfer Funds */\\n        require(erc20.transferFrom(msg.sender, address(this), _amount), \\\"Failed ERC20 token transfer\\\");\\n        \\n        /* If Amount is equal to needed - sale is ready */\\n        if(availableTokens() == tokensForSale){\\n            isSaleFunded = true;\\n        }\\n    }\\n\\n  function setUnlockDates(uint _startDate, uint _endDate, uint _firstUnlockDate, uint _secondUnlockDate) public onlyOwner {\\n        require(firstUnlockDate == 0, \\\"already set\\\");\\n\\n        require(_startDate < _endDate && _endDate < _firstUnlockDate && _firstUnlockDate < _secondUnlockDate, \\\"invalid input\\\");\\n        firstUnlockDate = _firstUnlockDate;\\n        secondUnlockDate = _secondUnlockDate;\\n        startDate = _startDate;\\n        endDate = _endDate;\\n    }\\n\\n     function getLocked(uint256 purchase_id) public view returns(uint) {\\n        if(block.timestamp > secondUnlockDate) {\\n            return 0;\\n        }\\n\\n        if(block.timestamp > firstUnlockDate) {\\n            return purchases[purchase_id].amount * 3 / 10;\\n        }\\n\\n        if(block.timestamp > endDate) {\\n            return purchases[purchase_id].amount * 6 / 10;\\n        }\\n\\n        return  purchases[purchase_id].amount;\\n    }  \\n    \\n    /* Action Functions */\\n    function swap(uint256 _amount) payable external whenNotPaused isFunded isSaleOpen onlyWhitelisted {\\n\\n        /* Confirm Amount is positive */\\n        require(_amount > 0, \\\"Amount has to be positive\\\");\\n\\n        /* Confirm Amount is less than tokens available */\\n        require(_amount <= tokensLeft(), \\\"Amount is less than tokens available\\\");\\n            \\n        /* Confirm the user has funds for the transfer, confirm the value is equal */\\n        require(msg.value == cost(_amount), \\\"User has to cover the cost of the swap in ETH, use the cost function to determine\\\");\\n\\n        /* Confirm Amount is bigger than minimum Amount */\\n        require(_amount >= individualMinimumAmount, \\\"Amount is bigger than minimum amount\\\");\\n\\n        /* Confirm Amount is smaller than maximum Amount */\\n        require(_amount <= individualMaximumAmount, \\\"Amount is smaller than maximum amount\\\");\\n\\n        /* Verify all user purchases, loop thru them */\\n        uint256[] memory _purchases = getMyPurchases(msg.sender);\\n        uint256 purchaserTotalAmountPurchased = 0;\\n        for (uint i = 0; i < _purchases.length; i++) {\\n            Purchase memory _purchase = purchases[_purchases[i]];\\n            purchaserTotalAmountPurchased = purchaserTotalAmountPurchased.add(_purchase.amount);\\n        }\\n        require(purchaserTotalAmountPurchased.add(_amount) <= individualMaximumAmount, \\\"Address has already passed the max amount of swap\\\");\\n\\n        if(isTokenSwapAtomic){\\n            /* Confirm transfer */\\n            require(erc20.transfer(msg.sender, _amount), \\\"ERC20 transfer didn\u00b4t work\\\");\\n        }\\n        \\n        uint256 purchase_id = increment;\\n        increment = increment.add(1);\\n\\n        /* Create new purchase */\\n        Purchase memory purchase = Purchase(_amount, _amount, msg.sender, msg.value, block.timestamp, isTokenSwapAtomic /* If Atomic Swap */, false);\\n        purchases[purchase_id] = purchase;\\n        purchaseIds.push(purchase_id);\\n        myPurchases[msg.sender].push(purchase_id);\\n        buyers.push(msg.sender);\\n        tokensAllocated = tokensAllocated.add(_amount);\\n        emit PurchaseEvent(_amount, msg.sender, block.timestamp);\\n    }\\n\\n    /* Redeem tokens when the sale was finalized */\\n    function redeemTokens(uint256 purchase_id) external isNotAtomicSwap isSaleFinalized whenNotPaused {\\n        /* Confirm it exists and was not finalized */\\n        require((purchases[purchase_id].amount != 0) && !purchases[purchase_id].wasFinalized, \\\"Purchase is either 0 or finalized\\\");\\n        require(isBuyer(purchase_id), \\\"Address is not buyer\\\");\\n      \\n      uint256 unlockedAmount = purchases[purchase_id].amount.sub(getLocked(purchase_id)); \\n      uint256 claimed = purchases[purchase_id].amount.sub(purchases[purchase_id].remainingAmount); \\n      uint256 claimable = unlockedAmount - claimed;\\n\\n       require(claimable > 0, \\\"To claim must be more than 0\\\");\\n\\n        purchases[purchase_id].remainingAmount = purchases[purchase_id].remainingAmount - claimable;\\n        if ( purchases[purchase_id].remainingAmount == 0){\\n             purchases[purchase_id].wasFinalized = true;\\n        }\\n        require(erc20.transfer(msg.sender, claimable), \\\"ERC20 transfer failed\\\");\\n    }\\n\\n    /* Retrieve Minumum Amount */\\n    function redeemGivenMinimumGoalNotAchieved(uint256 purchase_id) external isSaleFinalized isNotAtomicSwap {\\n        require(hasMinimumRaise(), \\\"Minimum raise has to exist\\\");\\n        require(minimumRaiseNotAchieved(), \\\"Minimum raise has to be reached\\\");\\n        /* Confirm it exists and was not finalized */\\n        require((purchases[purchase_id].amount != 0) && !purchases[purchase_id].wasFinalized, \\\"Purchase is either 0 or finalized\\\");\\n        require(isBuyer(purchase_id), \\\"Address is not buyer\\\");\\n        purchases[purchase_id].wasFinalized = true;\\n        purchases[purchase_id].reverted = true;\\n        msg.sender.transfer(purchases[purchase_id].ethAmount);\\n    }\\n\\n    /* Admin Functions */\\n    function withdrawFunds() external onlyOwner whenNotPaused isSaleFinalized {\\n        require(minimumRaiseAchieved(), \\\"Minimum raise has to be reached\\\");\\n        FEE_ADDRESS.transfer(address(this).balance.mul(feePercentage).div(100)); /* Fee Address */\\n        msg.sender.transfer(address(this).balance);\\n    }  \\n    \\n    function withdrawUnsoldTokens() external onlyOwner isSaleFinalized {\\n        require(!unsoldTokensReedemed);\\n        uint256 unsoldTokens;\\n        if(hasMinimumRaise() && \\n            (cost(tokensAllocated) < cost(minimumRaise))){ /* Minimum Raise not reached */\\n                unsoldTokens = tokensForSale;\\n        }else{\\n            /* If minimum Raise Achieved Redeem All Tokens minus the ones */\\n            unsoldTokens = tokensForSale.sub(tokensAllocated);\\n        }\\n\\n        if(unsoldTokens > 0){\\n            unsoldTokensReedemed = true;\\n            require(erc20.transfer(msg.sender, unsoldTokens), \\\"ERC20 transfer failed\\\");\\n        }\\n    }   \\n\\n    function removeOtherERC20Tokens(address _tokenAddress, address _to) external onlyOwner isSaleFinalized {\\n        require(_tokenAddress != address(erc20), \\\"Token Address has to be diff than the erc20 subject to sale\\\"); // Confirm tokens addresses are different from main sale one\\n        ERC20 erc20Token = ERC20(_tokenAddress);\\n        require(erc20Token.transfer(_to, erc20Token.balanceOf(address(this))), \\\"ERC20 Token transfer failed\\\");\\n    } \\n\\n    /* Safe Pull function */\\n    function safePull() payable external onlyOwner whenPaused {\\n        msg.sender.transfer(address(this).balance);\\n        erc20.transfer(msg.sender, erc20.balanceOf(address(this)));\\n    }\\n}\"\r\n    },\r\n    \"./contracts/vesting/TokenVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract TokenVesting is Ownable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  event Released(uint256 amount);\\n  event Revoked();\\n\\n  // beneficiary of tokens after they are released\\n  address public beneficiary;\\n\\n  uint256 public cliff;\\n  uint256 public start;\\n  uint256 public duration;\\n\\n  bool public revocable;\\n  bool public revoked;\\n\\n  uint256 public released;\\n\\n  IERC20 public token;\\n\\n  /**\\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\\n   * of the balance will have vested.\\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\\n   * @param _duration duration in seconds of the period in which the tokens will vest\\n   * @param _revocable whether the vesting is revocable or not\\n   * @param _token address of the ERC20 token contract\\n   */\\n  constructor(\\n    address _beneficiary,\\n    uint256 _start,\\n    uint256 _cliff,\\n    uint256 _duration,\\n    bool    _revocable,\\n    address _token\\n  ) public {\\n    require(_beneficiary != address(0));\\n    require(_cliff <= _duration);\\n\\n    beneficiary = _beneficiary;\\n    start       = _start;\\n    cliff       = _start.add(_cliff);\\n    duration    = _duration;\\n    revocable   = _revocable;\\n    token       = IERC20(_token);\\n  }\\n\\n  /**\\n   * @notice Only allow calls from the beneficiary of the vesting contract\\n   */\\n  modifier onlyBeneficiary() {\\n    require(msg.sender == beneficiary);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Allow the beneficiary to change its address\\n   * @param target the address to transfer the right to\\n   */\\n  function changeBeneficiary(address target) onlyBeneficiary public {\\n    require(target != address(0));\\n    beneficiary = target;\\n  }\\n\\n  /**\\n   * @notice Transfers vested tokens to beneficiary.\\n   */\\n  function release() onlyBeneficiary public {\\n    require(now >= cliff);\\n    _releaseTo(beneficiary);\\n  }\\n\\n  /**\\n   * @notice Transfers vested tokens to a target address.\\n   * @param target the address to send the tokens to\\n   */\\n  function releaseTo(address target) onlyBeneficiary public {\\n    require(now >= cliff);\\n    _releaseTo(target);\\n  }\\n\\n  /**\\n   * @notice Transfers vested tokens to beneficiary.\\n   */\\n  function _releaseTo(address target) internal {\\n    uint256 unreleased = releasableAmount();\\n\\n    released = released.add(unreleased);\\n\\n    token.safeTransfer(target, unreleased);\\n\\n    Released(released);\\n  }\\n\\n  /**\\n   * @notice Allows the owner to revoke the vesting. Tokens already vested are sent to the beneficiary.\\n   */\\n  function revoke() onlyOwner public {\\n    require(revocable);\\n    require(!revoked);\\n\\n    // Release all vested tokens\\n    _releaseTo(beneficiary);\\n\\n    // Send the remainder to the owner\\n    token.safeTransfer(owner(), token.balanceOf(address(this)));\\n\\n    revoked = true;\\n\\n    Revoked();\\n  }\\n\\n\\n  /**\\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\\n   */\\n  function releasableAmount() public returns (uint256) {\\n    return vestedAmount().sub(released);\\n  }\\n\\n  /**\\n   * @dev Calculates the amount that has already vested.\\n   */\\n  function vestedAmount() public returns (uint256) {\\n    uint256 currentBalance = token.balanceOf(address(this));\\n    uint256 totalBalance = currentBalance.add(released);\\n\\n    if (now < cliff) {\\n      return 0;\\n    } else if (now >= start.add(duration) || revoked) {\\n      return totalBalance;\\n    } else {\\n      return totalBalance.mul(now.sub(start)).div(duration);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allow withdrawing any token other than the relevant one\\n   */\\n  function releaseForeignToken(IERC20 _token, uint256 amount) public onlyOwner {\\n    require(_token != token);\\n    _token.transfer(owner(), amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/vesting/SimpleTokenTimelock.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/TokenTimelock.sol\\\";\\n\\ncontract SimpleTokenTimelock is TokenTimelock {\\n    constructor(IERC20 token, address beneficiary, uint256 releaseTime)\\n        public\\n        TokenTimelock(token, beneficiary, releaseTime)\\n    {}\\n}\"\r\n    },\r\n    \"./contracts/staking/IRewardLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardLocker {\\n  struct VestingSchedule {\\n    uint64 startBlock;\\n    uint64 endBlock;\\n    uint128 quantity;\\n    uint128 vestedQuantity;\\n  }\\n\\n  event VestingEntryCreated(\\n    IERC20 indexed token,\\n    address indexed beneficiary,\\n    uint256 startBlock,\\n    uint256 endBlock,\\n    uint256 quantity,\\n    uint256 index\\n  );\\n\\n  event VestingEntryQueued(\\n    uint256 indexed index,\\n    IERC20 indexed token,\\n    address indexed beneficiary,\\n    uint256 quantity\\n  );\\n\\n  event Vested(\\n    IERC20 indexed token,\\n    address indexed beneficiary,\\n    uint256 vestedQuantity,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev queue a vesting schedule starting from now\\n   */\\n  function lock(\\n    IERC20 token,\\n    address account,\\n    uint256 amount\\n  ) external payable;\\n\\n  /**\\n   * @dev queue a vesting schedule\\n   */\\n  function lockWithStartBlock(\\n    IERC20 token,\\n    address account,\\n    uint256 quantity,\\n    uint256 startBlock\\n  ) external payable;\\n\\n  /**\\n   * @dev vest all completed schedules for multiple tokens\\n   */\\n  function vestCompletedSchedulesForMultipleTokens(IERC20[] calldata tokens)\\n    external\\n    returns (uint256[] memory vestedAmounts);\\n\\n  /**\\n   * @dev claim multiple tokens for specific vesting schedule,\\n   *      if schedule has not ended yet, claiming amounts are linear with vesting blocks\\n   */\\n  function vestScheduleForMultipleTokensAtIndices(\\n    IERC20[] calldata tokens,\\n    uint256[][] calldata indices\\n  )\\n    external\\n    returns (uint256[] memory vestedAmounts);\\n\\n  /**\\n   * @dev for all completed schedule, claim token\\n   */\\n  function vestCompletedSchedules(IERC20 token) external returns (uint256);\\n\\n  /**\\n   * @dev claim token for specific vesting schedule,\\n   * @dev if schedule has not ended yet, claiming amount is linear with vesting blocks\\n   */\\n  function vestScheduleAtIndices(IERC20 token, uint256[] calldata indexes)\\n    external\\n    returns (uint256);\\n\\n  /**\\n   * @dev claim token for specific vesting schedule from startIndex to endIndex\\n   */\\n  function vestSchedulesInRange(\\n    IERC20 token,\\n    uint256 startIndex,\\n    uint256 endIndex\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev length of vesting schedules array\\n   */\\n  function numVestingSchedules(address account, IERC20 token) external view returns (uint256);\\n\\n  /**\\n   * @dev get detailed of each vesting schedule\\n   */\\n  function getVestingScheduleAtIndex(\\n    address account,\\n    IERC20 token,\\n    uint256 index\\n  ) external view returns (VestingSchedule memory);\\n\\n  /**\\n   * @dev get vesting shedules array\\n   */\\n  function getVestingSchedules(address account, IERC20 token)\\n    external\\n    view\\n    returns (VestingSchedule[] memory schedules);\\n}\"\r\n    },\r\n    \"./contracts/staking/RewardLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./IRewardLocker.sol\\\";\\n\\ncontract RewardLocker is IRewardLocker, Ownable, ReentrancyGuard {\\n  using SafeMath for uint256;\\n  using SafeCast for uint256;\\n\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  struct VestingSchedules {\\n    uint256 length;\\n    mapping(uint256 => VestingSchedule) data;\\n  }\\n\\n  uint256 public MAX_REWARD_CONTRACTS_SIZE = 100;\\n  uint256 constant MAX_VESTING_DURATION = 14400000; // Safety check - 1 year\\n\\n  /// @dev whitelist of reward contracts\\n  mapping(IERC20 => EnumerableSet.AddressSet) internal rewardContractsPerToken;\\n\\n  /// @dev vesting schedule of an account\\n  mapping(address => mapping(IERC20 => VestingSchedules)) private accountVestingSchedules;\\n\\n  /// @dev An account's total escrowed balance per token to save recomputing this for fee extraction purposes\\n  mapping(address => mapping(IERC20 => uint256)) public accountEscrowedBalance;\\n\\n  /// @dev An account's total vested reward per token\\n  mapping(address => mapping(IERC20 => uint256)) public accountVestedBalance;\\n\\n  /// @dev vesting duration for earch token\\n  mapping(IERC20 => uint256) public vestingDurationPerToken;\\n\\n  /* ========== EVENTS ========== */\\n  event RewardContractAdded(address indexed rewardContract, IERC20 indexed token, bool isAdded);\\n  event SetVestingDuration(IERC20 indexed token, uint64 vestingDuration);\\n  event Vest(IERC20 indexed token, uint256 totalVesting);\\n  event UpdateMaxContractSize(uint256 size);\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  modifier onlyRewardsContract(IERC20 token) {\\n    require(rewardContractsPerToken[token].contains(msg.sender), 'only reward contract');\\n    _;\\n  }\\n\\n  /**\\n   * @notice Add a whitelisted rewards contract\\n   */\\n  function addRewardsContract(IERC20 token, address _rewardContract) external onlyOwner {\\n    require(\\n      rewardContractsPerToken[token].length() < MAX_REWARD_CONTRACTS_SIZE,\\n      'rewardContracts is too long'\\n    );\\n    require(rewardContractsPerToken[token].add(_rewardContract), '_rewardContract is added');\\n\\n    emit RewardContractAdded(_rewardContract, token, true);\\n  }\\n\\n  /**\\n   * @notice Remove a whitelisted rewards contract\\n   */\\n  function removeRewardsContract(IERC20 token, address _rewardContract) external onlyOwner {\\n    require(rewardContractsPerToken[token].remove(_rewardContract), '_rewardContract is removed');\\n\\n    emit RewardContractAdded(_rewardContract, token, false);\\n  }\\n\\n  function setVestingDuration(IERC20 token, uint64 _vestingDuration) external onlyOwner {\\n    require(_vestingDuration <= MAX_VESTING_DURATION, \\\"!overmax\\\");\\n    vestingDurationPerToken[token] = _vestingDuration;\\n\\n    emit SetVestingDuration(token, _vestingDuration);\\n  }\\n\\n  function lock(\\n    IERC20 token,\\n    address account,\\n    uint256 quantity\\n  ) external override payable nonReentrant {\\n    _lockWithStartBlock(token, account, quantity, _blockNumber());\\n  }\\n\\n  /**\\n   * @dev vest all completed schedules for multiple tokens\\n   */\\n  function vestCompletedSchedulesForMultipleTokens(IERC20[] calldata tokens)\\n    external\\n    override\\n    returns (uint256[] memory vestedAmounts)\\n  {\\n    vestedAmounts = new uint256[](tokens.length);\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      vestedAmounts[i] = vestCompletedSchedules(tokens[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev claim multiple tokens for specific vesting schedule,\\n   *      if schedule has not ended yet, claiming amounts are linear with vesting blocks\\n   */\\n  function vestScheduleForMultipleTokensAtIndices(\\n    IERC20[] calldata tokens,\\n    uint256[][] calldata indices\\n  ) external override returns (uint256[] memory vestedAmounts) {\\n    require(tokens.length == indices.length, 'tokens.length != indices.length');\\n    vestedAmounts = new uint256[](tokens.length);\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      vestedAmounts[i] = vestScheduleAtIndices(tokens[i], indices[i]);\\n    }\\n  }\\n\\n  function lockWithStartBlock(\\n    IERC20 token,\\n    address account,\\n    uint256 quantity,\\n    uint256 startBlock\\n  ) external override payable onlyRewardsContract(token) nonReentrant {\\n    _lockWithStartBlock(token, account, quantity, startBlock);\\n  }\\n  \\n  function _lockWithStartBlock(\\n    IERC20 token,\\n    address account,\\n    uint256 quantity,\\n    uint256 startBlock\\n  ) internal onlyRewardsContract(token) {\\n    require(quantity > 0, '0 quantity');\\n\\n    if (token == IERC20(0)) {\\n      require(msg.value == quantity, 'Invalid msg.value');\\n    } else {\\n      // transfer token from reward contract to lock contract\\n      uint256 beforeDeposit = token.balanceOf(address(this));\\n      token.safeTransferFrom(msg.sender, address(this), quantity);\\n      uint256 afterDeposit = token.balanceOf(address(this));\\n      quantity = afterDeposit.sub(beforeDeposit);\\n    }\\n\\n    VestingSchedules storage schedules = accountVestingSchedules[account][token];\\n    uint256 schedulesLength = schedules.length;\\n    uint256 endBlock = startBlock.add(vestingDurationPerToken[token]);\\n\\n    // combine with the last schedule if they have the same start & end blocks\\n    if (schedulesLength > 0) {\\n      VestingSchedule storage lastSchedule = schedules.data[schedulesLength - 1];\\n      if (lastSchedule.startBlock == startBlock && lastSchedule.endBlock == endBlock) {\\n        lastSchedule.quantity = uint256(lastSchedule.quantity).add(quantity).toUint128();\\n        accountEscrowedBalance[account][token] = accountEscrowedBalance[account][token].add(\\n          quantity\\n        );\\n        emit VestingEntryQueued(schedulesLength - 1, token, account, quantity);\\n        return;\\n      }\\n    }\\n\\n    // append new schedule\\n    schedules.data[schedulesLength] = VestingSchedule({\\n      startBlock: startBlock.toUint64(),\\n      endBlock: endBlock.toUint64(),\\n      quantity: quantity.toUint128(),\\n      vestedQuantity: 0\\n    });\\n    schedules.length = schedulesLength + 1;\\n    // record total vesting balance of user\\n    accountEscrowedBalance[account][token] = accountEscrowedBalance[account][token].add(quantity);\\n\\n    emit VestingEntryCreated(token, account, startBlock, endBlock, quantity, schedulesLength);\\n  } \\n\\n  /**\\n   * @dev Allow a user to vest all ended schedules\\n   */\\n  function vestCompletedSchedules(IERC20 token) public override returns (uint256) {\\n    VestingSchedules storage schedules = accountVestingSchedules[msg.sender][token];\\n    uint256 schedulesLength = schedules.length;\\n\\n    uint256 totalVesting = 0;\\n    for (uint256 i = 0; i < schedulesLength; i++) {\\n      VestingSchedule memory schedule = schedules.data[i];\\n      if (_blockNumber() < schedule.endBlock) {\\n        continue;\\n      }\\n      uint256 vestQuantity = uint256(schedule.quantity).sub(schedule.vestedQuantity);\\n      if (vestQuantity == 0) {\\n        continue;\\n      }\\n      schedules.data[i].vestedQuantity = schedule.quantity;\\n      totalVesting = totalVesting.add(vestQuantity);\\n\\n      emit Vested(token, msg.sender, vestQuantity, i);\\n    }\\n    _completeVesting(token, totalVesting);\\n\\n    return totalVesting;\\n  }\\n\\n  /**\\n   * @notice Allow a user to vest with specific schedule\\n   */\\n  function vestScheduleAtIndices(IERC20 token, uint256[] memory indexes)\\n    public\\n    override\\n    returns (uint256)\\n  {\\n    VestingSchedules storage schedules = accountVestingSchedules[msg.sender][token];\\n    uint256 schedulesLength = schedules.length;\\n    uint256 totalVesting = 0;\\n    for (uint256 i = 0; i < indexes.length; i++) {\\n      require(indexes[i] < schedulesLength, 'invalid schedule index');\\n      VestingSchedule memory schedule = schedules.data[indexes[i]];\\n      uint256 vestQuantity = _getVestingQuantity(schedule);\\n      if (vestQuantity == 0) {\\n        continue;\\n      }\\n      schedules.data[indexes[i]].vestedQuantity = uint256(schedule.vestedQuantity)\\n        .add(vestQuantity)\\n        .toUint128();\\n\\n      totalVesting = totalVesting.add(vestQuantity);\\n\\n      emit Vested(token, msg.sender, vestQuantity, indexes[i]);\\n    }\\n    _completeVesting(token, totalVesting);\\n    return totalVesting;\\n  }\\n\\n  function vestSchedulesInRange(\\n    IERC20 token,\\n    uint256 startIndex,\\n    uint256 endIndex\\n  ) public override returns (uint256) {\\n    require(startIndex <= endIndex, 'startIndex > endIndex');\\n    uint256[] memory indexes = new uint256[](endIndex - startIndex + 1);\\n    for (uint256 index = startIndex; index <= endIndex; index++) {\\n      indexes[index - startIndex] = index;\\n    }\\n    return vestScheduleAtIndices(token, indexes);\\n  }\\n\\n  /* ========== VIEW FUNCTIONS ========== */\\n\\n  /**\\n   * @notice The number of vesting dates in an account's schedule.\\n   */\\n  function numVestingSchedules(address account, IERC20 token)\\n    external\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    return accountVestingSchedules[account][token].length;\\n  }\\n\\n  /**\\n   * @dev manually get vesting schedule at index\\n   */\\n  function getVestingScheduleAtIndex(\\n    address account,\\n    IERC20 token,\\n    uint256 index\\n  ) external override view returns (VestingSchedule memory) {\\n    return accountVestingSchedules[account][token].data[index];\\n  }\\n\\n  /**\\n   * @dev Get all schedules for an account.\\n   */\\n  function getVestingSchedules(address account, IERC20 token)\\n    external\\n    override\\n    view\\n    returns (VestingSchedule[] memory schedules)\\n  {\\n    uint256 schedulesLength = accountVestingSchedules[account][token].length;\\n    schedules = new VestingSchedule[](schedulesLength);\\n    for (uint256 i = 0; i < schedulesLength; i++) {\\n      schedules[i] = accountVestingSchedules[account][token].data[i];\\n    }\\n  }\\n\\n  function getRewardContractsPerToken(IERC20 token)\\n    external\\n    view\\n    returns (address[] memory rewardContracts)\\n  {\\n    rewardContracts = new address[](rewardContractsPerToken[token].length());\\n    for (uint256 i = 0; i < rewardContracts.length; i++) {\\n      rewardContracts[i] = rewardContractsPerToken[token].at(i);\\n    }\\n  }\\n\\n  /* ========== INTERNAL FUNCTIONS ========== */\\n\\n  function _completeVesting(IERC20 token, uint256 totalVesting) internal {\\n    require(totalVesting != 0, '0 vesting amount');\\n    accountEscrowedBalance[msg.sender][token] = accountEscrowedBalance[msg.sender][token].sub(\\n      totalVesting\\n    );\\n    accountVestedBalance[msg.sender][token] = accountVestedBalance[msg.sender][token].add(\\n      totalVesting\\n    );\\n\\n    if (token == IERC20(0)) {\\n      (bool success, ) = msg.sender.call{value: totalVesting}('');\\n      require(success, 'fail to transfer');\\n    } else {\\n      token.safeTransfer(msg.sender, totalVesting);\\n    }\\n    emit Vest(token, totalVesting);\\n  }\\n\\n  /**\\n   * @dev implements linear vesting mechanism\\n   */\\n  function _getVestingQuantity(VestingSchedule memory schedule) internal view returns (uint256) {\\n    if (_blockNumber() >= uint256(schedule.endBlock)) {\\n      return uint256(schedule.quantity).sub(schedule.vestedQuantity);\\n    }\\n    if (_blockNumber() <= uint256(schedule.startBlock)) {\\n      return 0;\\n    }\\n    uint256 lockDuration = uint256(schedule.endBlock).sub(schedule.startBlock);\\n    uint256 passedDuration = _blockNumber() - uint256(schedule.startBlock);\\n    return passedDuration.mul(schedule.quantity).div(lockDuration).sub(schedule.vestedQuantity);\\n  }\\n\\n  /**\\n   * @dev wrap block.number so we can easily mock it\\n   */\\n  function _blockNumber() internal virtual view returns (uint256) {\\n    return block.number;\\n  }\\n\\n  /**\\n   * @dev Increase the max reward contract size\\n   */\\n  function updateMaxContractSize(uint256 _size) external onlyOwner {\\n      MAX_REWARD_CONTRACTS_SIZE = _size;\\n      emit UpdateMaxContractSize(_size);\\n  }\\n}\"\r\n    },\r\n    \"./contracts/staking/MasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./IRewardLocker.sol\\\";\\n\\n// MasterChef is the master of OASIS. He can make OASIS and he is a fair guy.\\n//\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once OASIS is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\n// For any questions contact @vinceheng on Telegram\\ncontract MasterChef is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount;           // How many LP tokens the user has provided.\\n        uint256 lastOasisPerShare;  // Oasis per share on last update\\n        uint256 unclaimed;        // Unclaimed reward in Oasis.\\n        // pending reward = user.unclaimed + (user.amount * (pool.accOasisPerShare - user.lastOasisPerShare)\\n        //\\n        // Whenever a user deposits or withdraws Staking tokens to a pool. Here's what happens:\\n        //   1. The pool's `accOasisPerShare` (and `lastOasisBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `lastOasisPerShare` gets updated.\\n        //   4. User's `amount` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken;           // Address of LP token contract.\\n        uint256 allocPoint;       // How many allocation points assigned to this pool. OASIS to distribute per block.\\n        uint256 totalDeposited;   // The total deposited by users\\n        uint256 lastRewardBlock;  // Last block number that OASIS distribution occurs.\\n        uint256 accOasisPerShare;   // Accumulated OASIS per share, times 1e18. See below.\\n        uint256 poolLimit;  \\n        uint256 unlockDate;  \\n    }\\n\\n    // The OASIS TOKEN!\\n    IERC20 public immutable oasis;\\n    address public pendingOasisOwner;\\n    address public oasisTransferOwner;\\n    address public devAddress;\\n\\n    // Contract for locking reward\\n    IRewardLocker public immutable rewardLocker;\\n\\n    // OASIS tokens created per block.\\n    uint256 public oasisPerBlock = 8 ether;\\n    uint256 public constant MAX_EMISSION_RATE = 1000 ether; // Safety check\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    uint256 public constant MAX_ALLOC_POINT = 100000; // Safety check\\n    // The block number when OASIS mining starts.\\n    uint256 public immutable startBlock;\\n\\n    event Add(address indexed user, uint256 allocPoint, IERC20 indexed token, bool massUpdatePools);\\n    event Set(address indexed user, uint256 pid, uint256 allocPoint);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, bool harvest);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, bool harvest);\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\n    event HarvestMultiple(address indexed user, uint256[] _pids, uint256 amount);\\n    event HarvestAll(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event SetDevAddress(address indexed user, address indexed newAddress);\\n    event UpdateEmissionRate(address indexed user, uint256 oasisPerBlock);\\n    event SetOasisTransferOwner(address indexed user, address indexed oasisTransferOwner);\\n    event AcceptOasisOwnership(address indexed user, address indexed newOwner);\\n    event NewPendingOasisOwner(address indexed user, address indexed newOwner);\\n\\n    constructor(\\n        IERC20 _oasis,\\n        uint256 _startBlock,\\n        IRewardLocker _rewardLocker,\\n        address _devAddress,\\n        address _oasisTransferOwner\\n    ) public {\\n        require(_devAddress != address(0), \\\"!nonzero\\\");\\n        oasis = _oasis;\\n        startBlock = _startBlock;\\n\\n        rewardLocker = _rewardLocker;\\n        devAddress = _devAddress;\\n        oasisTransferOwner = _oasisTransferOwner;\\n        \\n        IERC20(_oasis).safeApprove(address(_rewardLocker), uint256(0));\\n        IERC20(_oasis).safeIncreaseAllowance(\\n            address(_rewardLocker),\\n            uint256(-1)\\n        );\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    mapping(IERC20 => bool) public poolExistence;\\n    modifier nonDuplicated(IERC20 _lpToken) {\\n        require(poolExistence[_lpToken] == false, \\\"nonDuplicated: duplicated\\\");\\n        _;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _massUpdatePools, uint256 _poolLimit, uint256 _unlockDate) external onlyOwner nonDuplicated(_lpToken) {\\n        require(_allocPoint <= MAX_ALLOC_POINT, \\\"!overmax\\\");\\n        if (_massUpdatePools) {\\n            massUpdatePools(); // This ensures that massUpdatePools will not exceed gas limit\\n        }\\n        _lpToken.balanceOf(address(this)); // Check to make sure it's a token\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolExistence[_lpToken] = true;\\n        poolInfo.push(PoolInfo({\\n            lpToken: _lpToken,\\n            totalDeposited: 0,\\n            allocPoint: _allocPoint,\\n            lastRewardBlock: lastRewardBlock,\\n            accOasisPerShare: 0,\\n            poolLimit: _poolLimit,\\n            unlockDate: _unlockDate\\n        }));\\n        emit Add(msg.sender, _allocPoint, _lpToken, _massUpdatePools);\\n    }\\n\\n    // Update the given pool's OASIS allocation point. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint) external onlyOwner {\\n        require(_allocPoint <= MAX_ALLOC_POINT, \\\"!overmax\\\");\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        emit Set(msg.sender, _pid, _allocPoint);\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\\n        return _to.sub(_from);\\n    }\\n\\n    // View function to see pending OASIS on frontend.\\n    function pendingOasis(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accOasisPerShare = pool.accOasisPerShare;\\n        if (block.number > pool.lastRewardBlock && pool.totalDeposited != 0 && totalAllocPoint != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 oasisReward = multiplier.mul(oasisPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            accOasisPerShare = accOasisPerShare.add(oasisReward.mul(1e18).div(pool.totalDeposited));\\n        }\\n        return user.amount.mul(accOasisPerShare.sub(user.lastOasisPerShare)).div(1e18).add(user.unclaimed);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        if (pool.totalDeposited == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 oasisReward = multiplier.mul(oasisPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n      //  oasis.mint(devAddress, oasisReward.div(50)); // 2%\\n      //  oasis.mint(address(this), oasisReward);\\n        pool.accOasisPerShare = pool.accOasisPerShare.add(oasisReward.mul(1e18).div(pool.totalDeposited));\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to MasterChef for OASIS allocation.\\n    function deposit(uint256 _pid, uint256 _amount, bool _shouldHarvest) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        _updateUserReward(_pid, _shouldHarvest);\\n        if (_amount > 0) {\\n         \\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n            _amount = afterDeposit.sub(beforeDeposit);\\n\\n            user.amount = user.amount.add(_amount);\\n            pool.totalDeposited = pool.totalDeposited.add(_amount);\\n\\n            require(pool.poolLimit > 0 && pool.totalDeposited <= pool.poolLimit, \\\"Exceeded pool limit\\\");\\n        }\\n        emit Deposit(msg.sender, _pid, _amount, _shouldHarvest);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount, bool _shouldHarvest) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        require(block.timestamp > pool.unlockDate, \\\"unlock date not reached\\\");\\n       \\n        _updateUserReward(_pid, _shouldHarvest);\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalDeposited = pool.totalDeposited.sub(_amount);\\n            pool.lpToken.safeTransfer(msg.sender, _amount);\\n        }\\n        emit Withdraw(msg.sender, _pid, _amount, _shouldHarvest);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(block.timestamp > pool.unlockDate, \\\"unlock date not reached\\\");\\n\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.lastOasisPerShare = 0;\\n        user.unclaimed = 0;\\n        pool.totalDeposited = pool.totalDeposited.sub(amount);\\n        pool.lpToken.safeTransfer(msg.sender, amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n    \\n    // Update the rewards of caller, and harvests if needed\\n    function _updateUserReward(uint256 _pid, bool _shouldHarvest) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount == 0) {\\n            user.lastOasisPerShare = pool.accOasisPerShare;\\n        }\\n        uint256 pending = user.amount.mul(pool.accOasisPerShare.sub(user.lastOasisPerShare)).div(1e18).add(user.unclaimed);\\n        user.unclaimed = _shouldHarvest ? 0 : pending;\\n        if (_shouldHarvest && pending > 0) {\\n            _lockReward(msg.sender, pending);\\n            emit Harvest(msg.sender, _pid, pending);\\n        }\\n        user.lastOasisPerShare = pool.accOasisPerShare;\\n    }\\n    \\n    // Harvest one pool\\n    function harvest(uint256 _pid) external nonReentrant {\\n        _updateUserReward(_pid, true);\\n    }\\n    \\n    // Harvest specific pools into one vest\\n    function harvestMultiple(uint256[] calldata _pids) external nonReentrant {\\n        uint256 pending = 0;\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n            updatePool(_pids[i]);\\n            PoolInfo storage pool = poolInfo[_pids[i]];\\n            UserInfo storage user = userInfo[_pids[i]][msg.sender];\\n            if (user.amount == 0) {\\n                user.lastOasisPerShare = pool.accOasisPerShare;\\n            }\\n            pending = pending.add(user.amount.mul(pool.accOasisPerShare.sub(user.lastOasisPerShare)).div(1e18).add(user.unclaimed));\\n            user.unclaimed = 0;\\n            user.lastOasisPerShare = pool.accOasisPerShare;\\n        }\\n        if (pending > 0) {\\n            _lockReward(msg.sender, pending);\\n        }\\n        emit HarvestMultiple(msg.sender, _pids, pending);\\n    }\\n    \\n    // Harvest all into one vest. Will probably not be used\\n    // Can fail if pool length is too big due to massUpdatePools()\\n    function harvestAll() external nonReentrant {\\n        massUpdatePools();\\n        uint256 pending = 0;\\n        for (uint256 i = 0; i < poolInfo.length; i++) {\\n            PoolInfo storage pool = poolInfo[i];\\n            UserInfo storage user = userInfo[i][msg.sender];\\n            if (user.amount == 0) {\\n                user.lastOasisPerShare = pool.accOasisPerShare;\\n            }\\n            pending = pending.add(user.amount.mul(pool.accOasisPerShare.sub(user.lastOasisPerShare)).div(1e18).add(user.unclaimed));\\n            user.unclaimed = 0;\\n            user.lastOasisPerShare = pool.accOasisPerShare;\\n        }\\n        if (pending > 0) {\\n            _lockReward(msg.sender, pending);\\n        }\\n        emit HarvestAll(msg.sender, pending);\\n    }\\n\\n    /**\\n    * @dev Call locker contract to lock rewards\\n    */\\n    function _lockReward(address _account, uint256 _amount) internal {\\n        uint256 oasisBal = oasis.balanceOf(address(this));\\n        rewardLocker.lock(oasis, _account, _amount > oasisBal ? oasisBal : _amount);\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function setDevAddress(address _devAddress) external onlyOwner {\\n        require(_devAddress != address(0), \\\"!nonzero\\\");\\n        devAddress = _devAddress;\\n        emit SetDevAddress(msg.sender, _devAddress);\\n    }\\n    \\n    // Should never fail as long as massUpdatePools is called during add\\n    function updateEmissionRate(uint256 _oasisPerBlock) external onlyOwner {\\n        require(_oasisPerBlock <= MAX_EMISSION_RATE, \\\"!overmax\\\");\\n        massUpdatePools();\\n        oasisPerBlock = _oasisPerBlock;\\n        emit UpdateEmissionRate(msg.sender, _oasisPerBlock);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/TokenTimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./SafeERC20.sol\\\";\\n\\n/**\\n * @dev A token holder contract that will allow a beneficiary to extract the\\n * tokens after a given release time.\\n *\\n * Useful for simple vesting schedules like \\\"advisors get all of their tokens\\n * after 1 year\\\".\\n */\\ncontract TokenTimelock {\\n    using SafeERC20 for IERC20;\\n\\n    // ERC20 basic token contract being held\\n    IERC20 private _token;\\n\\n    // beneficiary of tokens after they are released\\n    address private _beneficiary;\\n\\n    // timestamp when token release is enabled\\n    uint256 private _releaseTime;\\n\\n    constructor (IERC20 token_, address beneficiary_, uint256 releaseTime_) public {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(releaseTime_ > block.timestamp, \\\"TokenTimelock: release time is before current time\\\");\\n        _token = token_;\\n        _beneficiary = beneficiary_;\\n        _releaseTime = releaseTime_;\\n    }\\n\\n    /**\\n     * @return the token being held.\\n     */\\n    function token() public view virtual returns (IERC20) {\\n        return _token;\\n    }\\n\\n    /**\\n     * @return the beneficiary of the tokens.\\n     */\\n    function beneficiary() public view virtual returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @return the time when the tokens are released.\\n     */\\n    function releaseTime() public view virtual returns (uint256) {\\n        return _releaseTime;\\n    }\\n\\n    /**\\n     * @notice Transfers tokens held by timelock to beneficiary.\\n     */\\n    function release() public virtual {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp >= releaseTime(), \\\"TokenTimelock: current time is before release time\\\");\\n\\n        uint256 amount = token().balanceOf(address(this));\\n        require(amount > 0, \\\"TokenTimelock: no tokens to release\\\");\\n\\n        token().safeTransfer(beneficiary(), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_oasis\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewardLocker\",\"name\":\"_rewardLocker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oasisTransferOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"AcceptOasisOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"massUpdatePools\",\"type\":\"bool\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"harvest\",\"type\":\"bool\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HarvestAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HarvestMultiple\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOasisOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetDevAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oasisTransferOwner\",\"type\":\"address\"}],\"name\":\"SetOasisTransferOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oasisPerBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"harvest\",\"type\":\"bool\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ALLOC_POINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_EMISSION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_massUpdatePools\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_poolLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockDate\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_shouldHarvest\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"harvestMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oasis\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oasisPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oasisTransferOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingOasis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOasisOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accOasisPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLocker\",\"outputs\":[{\"internalType\":\"contract IRewardLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oasisPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastOasisPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_shouldHarvest\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterChef", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b19289b436b2f7a92891ac391d8f52580d3087e400000000000000000000000000000000000000000000000000000000000000200000000000000000000000007020b0cf0da0933e7cf3101b050f0dc5dce0dda3000000000000000000000000690f6f1327c7565326d80cb4b3234006d4854630000000000000000000000000690f6f1327c7565326d80cb4b3234006d4854630", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8ca0495d240f341cf1c7189ceaf27bfd6f830249164bb1279c5bdd5f24f7a4d1"}