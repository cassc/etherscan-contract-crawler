{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-09-06\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n// Come to our TG https://t.me/dokentoken\r\n\r\npragma solidity ^0.7.6;\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    // K8u#El(o)nG3a#t!e c&oP0Y\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n}\r\n\r\n// DividendContract\r\n// contract DividendDistributor is IDividendDistributor {\r\n//     using SafeMath for uint256;\r\n\r\n//     address _token;\r\n\r\n//     struct Share {\r\n//         uint256 amount;\r\n//         uint256 totalExcluded;\r\n//         uint256 totalRealised;\r\n//     }\r\n    \r\n//     IERC20 BUSD = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n//     address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n//     IDEXRouter router;\r\n\r\n//     address[] shareholders;\r\n//     mapping (address => uint256) shareholderIndexes;\r\n//     mapping (address => uint256) shareholderClaims;\r\n\r\n//     mapping (address => Share) public shares;\r\n    \r\n//     uint256 public totalShares;\r\n//     uint256 public totalDividends;\r\n//     uint256 public totalDistributed;\r\n//     uint256 public dividendsPerShare;\r\n//     uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n\r\n//     uint256 public minPeriod = 40 minutes;\r\n//     uint256 public minDistribution = 1 * (10 ** 18);\r\n\r\n//     uint256 currentIndex;\r\n\r\n//     bool initialized;\r\n//     modifier initialization() {\r\n//         require(!initialized);\r\n//         _;\r\n//         initialized = true;\r\n//     }\r\n\r\n//     modifier onlyToken() {\r\n//         require(msg.sender == _token); _;\r\n//     }\r\n\r\n//     constructor (address _router) {\r\n//         address routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        \r\n//         router = _router != address(0)\r\n//             ? IDEXRouter(_router)\r\n//             : IDEXRouter(routerAddress);\r\n//         _token = msg.sender;\r\n//     }\r\n    \r\n//     receive() external payable { }\r\n    \r\n//     function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\r\n//         minPeriod = _minPeriod;\r\n//         minDistribution = _minDistribution;\r\n//     }\r\n\r\n//     function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n//         if(shares[shareholder].amount > 0){\r\n//             distributeDividend(shareholder);\r\n//         }\r\n\r\n//         if(amount > 0 && shares[shareholder].amount == 0){\r\n//             addShareholder(shareholder);\r\n//         }else if(amount == 0 && shares[shareholder].amount > 0){\r\n//             removeShareholder(shareholder);\r\n//         }\r\n\r\n//         totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n//         shares[shareholder].amount = amount;\r\n//         shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n//     }\r\n\r\n//     // CHANGE\r\n//     function deposit() external payable override onlyToken {\r\n//         uint256 balanceBefore = BUSD.balanceOf(address(this));\r\n\r\n//         address[] memory path = new address[](2);\r\n//         path[0] = WBNB;\r\n//         path[1] = address(BUSD);\r\n\r\n//         router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n//             0,\r\n//             path,\r\n//             address(this),\r\n//             block.timestamp\r\n//         );\r\n\r\n//         uint256 amount = BUSD.balanceOf(address(this)).sub(balanceBefore);\r\n\r\n//         totalDividends = totalDividends.add(amount);\r\n//         dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n//     }\r\n\r\n//     function process(uint256 gas) external override onlyToken {\r\n//         uint256 shareholderCount = shareholders.length;\r\n\r\n//         if(shareholderCount == 0) { return; }\r\n\r\n//         uint256 gasUsed = 0;\r\n//         uint256 gasLeft = gasleft();\r\n\r\n//         uint256 iterations = 0;\r\n\r\n//         while(gasUsed < gas && iterations < shareholderCount) {\r\n//             if(currentIndex >= shareholderCount){\r\n//                 currentIndex = 0;\r\n//             }\r\n\r\n//             if(shouldDistribute(shareholders[currentIndex])){\r\n//                 distributeDividend(shareholders[currentIndex]);\r\n//             }\r\n\r\n//             gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n//             gasLeft = gasleft();\r\n//             currentIndex++;\r\n//             iterations++;\r\n//         }\r\n//     }\r\n\r\n//     function shouldDistribute(address shareholder) internal view returns (bool) {\r\n//         return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n//                 && getUnpaidEarnings(shareholder) > minDistribution;\r\n//     }\r\n\r\n//     function distributeDividend(address shareholder) internal {\r\n//         if(shares[shareholder].amount == 0){ return; }\r\n\r\n//         uint256 amount = getUnpaidEarnings(shareholder);\r\n//         if(amount > 0){\r\n//             totalDistributed = totalDistributed.add(amount);\r\n//             BUSD.transfer(shareholder, amount);\r\n//             shareholderClaims[shareholder] = block.timestamp;\r\n//             shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n//             shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n//         }\r\n//     }\r\n\r\n//     function claimDividend(address claimer) external returns (bool){\r\n//         if(shouldDistribute(claimer)){\r\n//             distributeDividend(claimer);\r\n//             return true;\r\n//         }else{\r\n//             return false;\r\n//         }\r\n//     }\r\n    \r\n//     function getDividendStats(address holder) public view returns (uint256 [3] memory){\r\n//         return [\r\n//             getUnpaidEarnings(holder),\r\n//             shares[holder].totalExcluded,\r\n//             shares[holder].totalRealised\r\n//         ];\r\n//     }\r\n//     function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n//         if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n//         uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n//         uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n//         if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n//         return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n//     }\r\n\r\n//     function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n//         return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n//     }\r\n\r\n//     function addShareholder(address shareholder) internal {\r\n//         shareholderIndexes[shareholder] = shareholders.length;\r\n//         shareholders.push(shareholder);\r\n//     }\r\n\r\n//     function removeShareholder(address shareholder) internal {\r\n//         shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n//         shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n//         shareholders.pop();\r\n//     }\r\n    \r\n    \r\n// }\r\n\r\n// CHANGE\r\ncontract DoKENV2 is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // CONSTANT ADDRESSES\r\n    //address BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    string constant _name = \"DoKEN V2\";\r\n    string constant _symbol = \"DKN\";\r\n    uint8 constant _decimals = 18;\r\n\r\n    uint256 _totalSupply = 1000000000000 * (10 ** _decimals); // 1,000,000,000,000\r\n    \r\n    // LIMITTER\r\n    uint256 public _maxBuyTxAmount = (_totalSupply * 10) / 1000; // 1%\r\n    uint256 public _maxSellTxAmount = (_totalSupply * 10) / 1000; // 1%\r\n    uint256 public _maxWalletSize = (_totalSupply * 20) / 1000; // 2%\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n    mapping (address => bool) isDividendExempt;\r\n    mapping (address => bool) public isBlacklisted;\r\n    \r\n    // Buy & Sell Lock timer\r\n    bool buyLockDisabled = false;\r\n    bool sellLockDisabled = false;\r\n    mapping (address => uint256) private _sellLock;\r\n    mapping (address => uint256) private _buyLock;\r\n    mapping (address => bool) isSellLockExempt;\r\n    mapping (address => bool) isBuyLockExempt;\r\n    uint256 buyLockTime = 10; // 10 seconds\r\n    uint256 sellLockTime = 10; // 10 seconds\r\n    \r\n    \r\n    // FEES\r\n    uint256 liquidityFee = 200; // 3%\r\n    uint256 buybackFee = 100;\r\n    uint256 reflectionFee = 0; // 0%\r\n    uint256 devFee = 200; // 2%\r\n    uint256 mktFee = 300; // 3%\r\n    uint256 teamFee = 100; // 1%\r\n    uint256 totalFee = 900; // liquidityFee + reflectionFee + devFee\r\n    uint256 feeDenominator = 10000;\r\n    uint256 public _sellMultiplier = 1; // cant be changed\r\n\r\n    address public autoLiquidityReceiver;\r\n    address public devFeeReceiver;\r\n    address public mktFeeReceiver;\r\n    address public teamFeeReceiver;\r\n\r\n    uint256 targetLiquidity = 25;\r\n    uint256 targetLiquidityDenominator = 100;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    uint256 public launchedAt;\r\n\r\n    uint256 buybackMultiplierNumerator = 120;\r\n    uint256 buybackMultiplierDenominator = 100;\r\n    uint256 buybackMultiplierTriggeredAt;\r\n    uint256 buybackMultiplierLength = 30 minutes;\r\n\r\n    bool public autoBuybackEnabled = false;\r\n    bool pauseBuy = false;\r\n    bool pauseSell = false;\r\n\r\n    uint256 autoBuybackCap;\r\n    uint256 autoBuybackAccumulator;\r\n    uint256 autoBuybackAmount = 100;\r\n    uint256 autoBuybackBlockPeriod;\r\n    uint256 autoBuybackBlockLast;\r\n\r\n    //DividendDistributor public distributor;\r\n    //uint256 distributorGas = 600000;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply / 2000; // 0.05%\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        devFeeReceiver = address(0x5311c06B4cde0e823d9821DE1fFd24485e9c3F2f);\r\n        mktFeeReceiver = address(0x53cA2a894406848fbB34444859013F068F52FBe1);\r\n        teamFeeReceiver = address(0x53cA2a894406848fbB34444859013F068F52FBe1);\r\n\r\n        _allowances[address(this)][address(router)] = uint256(-1);\r\n        //distributor = new DividendDistributor(address(router));\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[devFeeReceiver] = true;\r\n        isFeeExempt[mktFeeReceiver] = true;\r\n        \r\n        isTxLimitExempt[msg.sender] = true;\r\n        isTxLimitExempt[devFeeReceiver] = true;\r\n        isTxLimitExempt[mktFeeReceiver] = true;\r\n        isTxLimitExempt[DEAD] = true;\r\n        isTxLimitExempt[ZERO] = true;\r\n        //isTxLimitExempt[address(distributor)] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n       \r\n        isSellLockExempt[pair] = true;\r\n        isSellLockExempt[address(router)] = true;\r\n        isSellLockExempt[address(this)] = true;\r\n        isSellLockExempt[msg.sender] = true;\r\n        \r\n        isBuyLockExempt[pair] = true;\r\n        isBuyLockExempt[address(router)] = true;\r\n        isBuyLockExempt[address(this)] = true;\r\n        isBuyLockExempt[msg.sender] = true;\r\n        \r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD] = true;\r\n        isDividendExempt[ZERO] = true;\r\n        \r\n        autoLiquidityReceiver = owner();\r\n        \r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, uint256(-1));\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != uint256(-1)){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n        require(!isBlacklisted[sender] && !isBlacklisted[recipient], \"This address is blacklisted\");\r\n        \r\n        // coniditional Boolean\r\n        bool isTxExempted = (isTxLimitExempt[sender] || isTxLimitExempt[recipient]);\r\n        bool isContractTransfer = (sender==address(this) || recipient==address(this));\r\n        bool isLiquidityTransfer = ((sender == pair && recipient == address(router)) || (recipient == pair && sender == address(router) ));\r\n        \r\n        if(!isTxExempted && !isContractTransfer && !isLiquidityTransfer ){\r\n            txLimitter(sender,recipient, amount);\r\n        }\r\n        \r\n        if (recipient != pair && recipient != DEAD) {\r\n            require(isTxLimitExempt[recipient] || _balances[recipient] + amount <= _maxWalletSize, \"Transfer amount exceeds the bag size.\");\r\n        }\r\n\r\n        if(shouldSwapBack()){ swapBack(); }\r\n        if(shouldAutoBuyback()){ triggerAutoBuyback(); }\r\n    \r\n        uint256 amountReceived = shouldTakeFee(sender,recipient) ? takeFee(sender, recipient, amount) : amount;\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        \r\n        //if(!isDividendExempt[sender]){ try distributor.setShare(sender, _balances[sender]) {} catch {} }\r\n        //if(!isDividendExempt[recipient]){ try distributor.setShare(recipient, _balances[recipient]) {} catch {} }\r\n        \r\n        //try distributor.process(distributorGas) {} catch {}\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function pauseTx(bool _buy, bool _sell) external onlyOwner{ \r\n        pauseBuy = _buy;\r\n        pauseSell = _sell;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function txLimitter(address sender, address recipient, uint256 amount) internal {\r\n        \r\n        bool isBuy = sender == pair || sender == address(router);\r\n        bool isSell = recipient== pair || recipient == address(router);\r\n        \r\n        if(isBuy){\r\n            require(!pauseBuy,\"Buy tx is paused\");\r\n            require(amount <= _maxBuyTxAmount, \"TX Limit Exceeded\");\r\n            // apply Buy Lock\r\n            if(!buyLockDisabled && !isBuyLockExempt[recipient]) {\r\n                require(_buyLock[recipient] <= block.timestamp , \"Pls wait before another buy\" );\r\n                _buyLock[recipient] = block.timestamp+buyLockTime;\r\n            }\r\n        }\r\n        \r\n        if(isSell){\r\n            require(!pauseSell,\"Sell tx is paused\");\r\n            require(amount <= _maxSellTxAmount, \"TX Limit Exceeded\");\r\n            // apply Sell Lock\r\n            if(!sellLockDisabled && !isSellLockExempt[sender]) {\r\n                require(_sellLock[sender] <= block.timestamp , \"Pls wait before another sells\" );\r\n                _sellLock[sender] = block.timestamp+sellLockTime;\r\n            }\r\n                \r\n        }\r\n        \r\n    }\r\n    \r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\r\n    }\r\n\r\n    function getTotalFee(bool selling) public view returns (uint256) {\r\n        if(selling){ return totalFee.mul(_sellMultiplier); }\r\n        return totalFee;\r\n    }\r\n\r\n    function takeFee(address sender, address receiver, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount = amount.mul(getTotalFee(receiver == pair)).div(feeDenominator);\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n    \r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n    \r\n    function swapBack() internal swapping {\r\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;\r\n        uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(totalFee).div(2);\r\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n\r\n        uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));\r\n\r\n        uint256 amountBNBLiquidity = amountBNB.mul(dynamicLiquidityFee).div(totalBNBFee).div(2);\r\n        //uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(totalBNBFee);\r\n        uint256 amountBNBDev = amountBNB.mul(devFee).div(totalBNBFee);\r\n        uint256 amountBNBMkt = amountBNB.mul(mktFee).div(totalBNBFee);\r\n        uint256 amountBNBTeam = amountBNB.mul(teamFee).div(totalBNBFee);\r\n\r\n        //try distributor.deposit{value: amountBNBReflection}() {} catch {}\r\n        sendPayable(amountBNBDev, amountBNBMkt, amountBNBTeam);\r\n\r\n        if(amountToLiquify > 0){\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                autoLiquidityReceiver,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n\r\n    function sendPayable(uint256 amtDev, uint256 amtMkt, uint256 amtTeam) internal {\r\n        (bool successone,) = payable(devFeeReceiver).call{value: amtDev, gas: 30000}(\"\");\r\n        (bool successtwo,) = payable(mktFeeReceiver).call{value: amtMkt, gas: 30000}(\"\");\r\n        (bool successthree,) = payable(teamFeeReceiver).call{value: amtTeam, gas: 30000}(\"\");\r\n        require(successone && successtwo && successthree, \"receiver rejected ETH transfer\");\r\n    }\r\n    // used for collecting collected Tax to DevFee Address\r\n    function withdrawCollectedTax() external onlyOwner {\r\n        uint256 bal = address(this).balance; // return the native token ( BNB )\r\n        (bool success,) = payable(devFeeReceiver).call{value: bal, gas: 30000}(\"\");\r\n        require(success, \"receiver rejected ETH transfer\");\r\n    }\r\n    \r\n    function shouldAutoBuyback() internal view returns (bool) {\r\n        return msg.sender != pair\r\n            && !inSwap\r\n            && autoBuybackEnabled\r\n            && autoBuybackBlockLast + autoBuybackBlockPeriod <= block.number\r\n            && address(this).balance >= autoBuybackAmount;\r\n    }\r\n    \r\n    function triggerManualBuyback(uint256 amount, bool triggerBuybackMultiplier) external onlyOwner {\r\n        buyTokens(amount, devFeeReceiver);\r\n        if(triggerBuybackMultiplier){\r\n            buybackMultiplierTriggeredAt = block.timestamp;\r\n            emit BuybackMultiplierActive(buybackMultiplierLength);\r\n        }\r\n    }\r\n\r\n    function clearBuybackMultiplier() external onlyOwner {\r\n        buybackMultiplierTriggeredAt = 0;\r\n    }\r\n\r\n    function triggerAutoBuyback() internal {\r\n        buyTokens(autoBuybackAmount, devFeeReceiver);\r\n        autoBuybackBlockLast = block.number;\r\n        autoBuybackAccumulator = autoBuybackAccumulator.add(autoBuybackAmount);\r\n        if(autoBuybackAccumulator > autoBuybackCap){ autoBuybackEnabled = false; }\r\n    }\r\n\r\n    function buyTokens(uint256 amount, address to) internal swapping {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(this);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setAutoBuybackSettings(bool _enabled, uint256 _cap, uint256 _amount, uint256 _period) external onlyOwner {\r\n        autoBuybackEnabled = _enabled;\r\n        autoBuybackCap = _cap;\r\n        autoBuybackAccumulator = 0;\r\n        autoBuybackAmount = _amount.div(100);\r\n        autoBuybackBlockPeriod = _period;\r\n        autoBuybackBlockLast = block.number;\r\n    }\r\n\r\n    function setBuybackMultiplierSettings(uint256 numerator, uint256 denominator, uint256 length) external onlyOwner {\r\n        require(numerator / denominator <= 2 && numerator > denominator);\r\n        buybackMultiplierNumerator = numerator;\r\n        buybackMultiplierDenominator = denominator;\r\n        buybackMultiplierLength = length;\r\n    }\r\n\r\n    \r\n    /**\r\n     * \r\n     * SETTER SECTIONS\r\n     * \r\n     */\r\n\r\n    function setMaxWallet(uint256 numerator, uint256 divisor) external onlyOwner{\r\n        require(numerator > 0 && divisor > 0 && divisor <= 10000);\r\n        _maxWalletSize = _totalSupply.mul(numerator).div(divisor);\r\n    }\r\n    \r\n    function setDevFee(uint256 fee) external onlyOwner {\r\n        // total fee should not be more than 20%;\r\n        uint256 simulatedFee = fee.add(liquidityFee).add(buybackFee).add(teamFee).add(mktFee);\r\n        require(simulatedFee <= 2000, \"Fees too high !!\");\r\n        devFee = fee;\r\n        totalFee = simulatedFee;\r\n    }\r\n    function setBuybackFee(uint256 fee) external onlyOwner {\r\n        // total fee should not be more than 20%;\r\n        uint256 simulatedFee = fee.add(liquidityFee).add(devFee).add(teamFee).add(mktFee);\r\n        require(simulatedFee <= 2000, \"Fees too high !!\");\r\n        buybackFee = fee;\r\n        totalFee = simulatedFee;\r\n    }\r\n    function setLpFee(uint256 fee) external onlyOwner {\r\n        // total fee should not be more than 20%;\r\n        uint256 simulatedFee = fee.add(devFee).add(buybackFee).add(teamFee).add(mktFee);\r\n        require(simulatedFee <= 2000, \"Fees too high !!\");\r\n        liquidityFee = fee;\r\n        totalFee = simulatedFee;\r\n    }\r\n    function setTeamFee(uint256 fee) external onlyOwner {\r\n        // total fee should not be more than 20%;\r\n        uint256 simulatedFee = fee.add(devFee).add(buybackFee).add(liquidityFee).add(mktFee);\r\n        require(simulatedFee < 2000, \"Fees too high !!\");\r\n        teamFee = fee;\r\n        totalFee = simulatedFee;\r\n    }\r\n    function setMarketingFee(uint256 fee) external onlyOwner {\r\n        // total fee should not be more than 20%;\r\n        uint256 simulatedFee = fee.add(devFee).add(buybackFee).add(liquidityFee).add(teamFee);\r\n        require(simulatedFee < 2000, \"Fees too high !!\");\r\n        mktFee = fee;\r\n        totalFee = simulatedFee;\r\n    }\r\n    \r\n    function setBuyTxMaximum(uint256 max) external onlyOwner{\r\n        uint256 minimumTreshold = (_totalSupply * 7) / 1000; // 0.7% is the minimum tx limit, we cant set below this\r\n        uint256 simulatedMaxTx = (_totalSupply * max) / 1000;\r\n        require(simulatedMaxTx >= minimumTreshold, \"Tx Limit is too low\");\r\n        _maxBuyTxAmount = simulatedMaxTx;\r\n    }\r\n    \r\n    function setSellTxMaximum(uint256 max) external onlyOwner {\r\n        uint256 minimumTreshold = (_totalSupply * 7) / 1000; // 0.7% is the minimum tx limit, we cant set below this\r\n        uint256 simulatedMaxTx = (_totalSupply * max) / 1000;\r\n        require(simulatedMaxTx >= minimumTreshold, \"Tx Limit is too low\");\r\n        _maxSellTxAmount = simulatedMaxTx;\r\n    }\r\n    \r\n    function setBuyTimeLock(uint256 lockTime, bool disabled) external onlyOwner {\r\n        require(lockTime <= 600); // lock time must be less than 10 minutes\r\n        buyLockTime = lockTime;\r\n        buyLockDisabled = disabled;\r\n    }\r\n    \r\n    function setSellTimeLock(uint256 lockTime, bool disabled) external onlyOwner {\r\n        require(lockTime <= 600); // lock time must be less than 10 minutes\r\n        sellLockTime = lockTime;\r\n        sellLockDisabled = disabled;\r\n    }\r\n    \r\n    function setIsSellLockExempt(address holder, bool exempt) external onlyOwner {\r\n        isSellLockExempt[holder] = exempt;\r\n    }\r\n    \r\n    function setIsBuyLockExempt(address holder, bool exempt) external onlyOwner {\r\n        isBuyLockExempt[holder] = exempt;\r\n    }\r\n    \r\n    // function setIsDividendExempt(address holder, bool exempt) external onlyOwner {\r\n    //     isDividendExempt[holder] = exempt;\r\n    //     if(exempt){\r\n    //         distributor.setShare(holder, 0);\r\n    //     }else{\r\n    //         distributor.setShare(holder, _balances[holder]);\r\n    //     }\r\n    // }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n    \r\n    function setFeeReceivers(address _autoLiquidityReceiver, address _devFeeReceiver, address _mktFeeReceiver, address _teamFeeReceiver) external onlyOwner {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        devFeeReceiver = _devFeeReceiver;\r\n        mktFeeReceiver = _mktFeeReceiver;\r\n        teamFeeReceiver = _teamFeeReceiver;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount.div(100);\r\n    }\r\n\r\n    function setTargetLiquidity(uint256 _target, uint256 _denominator) external onlyOwner {\r\n        targetLiquidity = _target;\r\n        targetLiquidityDenominator = _denominator;\r\n    }\r\n\r\n    function addToBlackList(address[] calldata addresses) external onlyOwner {\r\n      for (uint256 i; i < addresses.length; ++i) {\r\n        isBlacklisted[addresses[i]] = true;\r\n      }\r\n    }\r\n\r\n     function removeFromBlackList(address account) external onlyOwner {\r\n        isBlacklisted[account] = false;\r\n    }\r\n\r\n    // function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external onlyOwner {\r\n    //     distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    // }\r\n\r\n    // function setDistributorSettings(uint256 gas) external onlyOwner {\r\n    //     require(gas < 1000000);\r\n    //     distributorGas = gas;\r\n    // }\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n    \r\n    // function getDividendStats(address holder) public view returns (uint256 [3] memory) {\r\n    //     return distributor.getDividendStats(holder);\r\n    // }\r\n    \r\n\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\r\n    event BuybackMultiplierActive(uint256 duration);\r\n    \r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure returns (uint8) { return _decimals; }\r\n    function symbol() external pure returns (string memory) { return _symbol; }\r\n    function name() external pure returns (string memory) { return _name; }\r\n    function getOwner() external view returns (address) { return owner(); }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"BuybackMultiplierActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxBuyTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSellTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"addToBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuybackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearBuybackMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"selling\",\"type\":\"bool\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mktFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_buy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_sell\",\"type\":\"bool\"}],\"name\":\"pauseTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setAutoBuybackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"setBuyTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setBuyTxMaximum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setBuybackFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setBuybackMultiplierSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mktFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsBuyLockExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsSellLockExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setLpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"setSellTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setSellTxMaximum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTeamFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerBuybackMultiplier\",\"type\":\"bool\"}],\"name\":\"triggerManualBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCollectedTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DoKENV2", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e275254b6e0fd57d098cc729559aea919724810ffb053bc2a65bcf1207ab1709"}