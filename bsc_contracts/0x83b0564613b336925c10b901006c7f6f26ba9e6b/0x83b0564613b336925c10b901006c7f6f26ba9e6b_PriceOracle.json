{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/PriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Access.sol\\\";\\r\\nimport \\\"./CoinFiatBoard.sol\\\";\\r\\nimport \\\"./ProvidersBoard.sol\\\";\\r\\nimport \\\"./interfaces/IPriceAdapter.sol\\\";\\r\\n\\r\\ncontract PriceOracle is Access, CoinFiatBoard, ProvidersBoard {\\r\\n    address priceAdapter;\\r\\n\\r\\n    event PriceAdapterSet(address oldAdapter, address newAdapter);\\r\\n\\r\\n    function addNewCoin(\\r\\n        address coinAddress,\\r\\n        address priceProvider,\\r\\n        uint256 priceForConfig,\\r\\n        uint256 nativeFiat\\r\\n    )\\r\\n        external\\r\\n        fiatExists(nativeFiat)\\r\\n        onlyTechnicalRole\\r\\n        properProvider(priceProvider)\\r\\n    {\\r\\n        if (coinAddress == address(0)) revert ZeroValueNotAllowed();\\r\\n\\r\\n        _addNewCoin(\\r\\n            IERC20(coinAddress).symbol(),\\r\\n            coinAddress,\\r\\n            priceProvider,\\r\\n            priceForConfig,\\r\\n            nativeFiat\\r\\n        );\\r\\n        allCoinsList.push(coinAddress);\\r\\n    }\\r\\n\\r\\n    function revokeCoin(\\r\\n        address coinAddress\\r\\n    ) external onlyTechnicalRole coinExists(coinAddress) {\\r\\n        _revokeCoin(coinAddress);\\r\\n    }\\r\\n\\r\\n    function setCoinConfigPrice(\\r\\n        address coinAddress,\\r\\n        uint256 newPriceForConfig\\r\\n    ) external onlyTechnicalRole coinExists(coinAddress) {\\r\\n        _updateCoin(coinConfig[coinAddress], newPriceForConfig);\\r\\n    }\\r\\n\\r\\n    function setCoinPriceProvider(\\r\\n        address coinAddress,\\r\\n        address newPriceProvider\\r\\n    )\\r\\n        external\\r\\n        onlyTechnicalRole\\r\\n        coinExists(coinAddress)\\r\\n        properProvider(newPriceProvider)\\r\\n    {\\r\\n        _updateCoin(coinConfig[coinAddress], newPriceProvider);\\r\\n    }\\r\\n\\r\\n    function updateCoinConfig(\\r\\n        address coinAddress,\\r\\n        address newPriceProvider,\\r\\n        uint256 newPriceForConfig,\\r\\n        uint256 newNativeFiat\\r\\n    )\\r\\n        external\\r\\n        onlyTechnicalRole\\r\\n        coinExists(coinAddress)\\r\\n        fiatExists(newNativeFiat)\\r\\n        properProvider(newPriceProvider)\\r\\n    {\\r\\n        _updateCoin(\\r\\n            coinAddress,\\r\\n            newPriceProvider,\\r\\n            newPriceForConfig,\\r\\n            newNativeFiat\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addPriceProvider(\\r\\n        address priceProvider\\r\\n    ) external onlyTechnicalRole {\\r\\n        _addPriceProvider(priceProvider);\\r\\n    }\\r\\n\\r\\n    function revokePriceProvider(\\r\\n        address priceProvider\\r\\n    ) external onlyTechnicalRole {\\r\\n        if (hasCoinsAssociatedWithProvider(priceProvider))\\r\\n            revert RemoveProviderFromAllCoins(priceProvider);\\r\\n        _revokePriceProvider(priceProvider);\\r\\n    }\\r\\n\\r\\n    function setPriceAdapter(address newAdapter) external onlyTechnicalRole {\\r\\n        address oldAdapter = priceAdapter;\\r\\n        priceAdapter = newAdapter;\\r\\n\\r\\n        emit PriceAdapterSet(oldAdapter, newAdapter);\\r\\n    }\\r\\n\\r\\n    function addFiatCurrency(\\r\\n        string calldata currency,\\r\\n        uint256 numericCode,\\r\\n        string calldata alphabeticCode,\\r\\n        address fiatCoinAddress,\\r\\n        address fiatPriceProvider,\\r\\n        uint256 fiatPriceForConfig,\\r\\n        uint256 fiatNativeFiat\\r\\n    ) external onlyTechnicalRole {\\r\\n        if (numericCode == 0) revert ZeroValueNotAllowed();\\r\\n        _addFiat(\\r\\n            currency,\\r\\n            numericCode,\\r\\n            alphabeticCode,\\r\\n            fiatCoinAddress,\\r\\n            fiatPriceProvider,\\r\\n            fiatPriceForConfig,\\r\\n            fiatNativeFiat\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function revokeFiatCurrency(\\r\\n        uint256 numericCode\\r\\n    ) external fiatExists(numericCode) onlyTechnicalRole {\\r\\n        _revokeFiat(numericCode);\\r\\n    }\\r\\n\\r\\n    function getCoinPrice(\\r\\n        uint256 fiatForPrice,\\r\\n        address targetCoin,\\r\\n        address relatedCoin\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        fiatExists(fiatForPrice)\\r\\n        coinExists(targetCoin)\\r\\n        returns (bool priceProvided, uint256 price)\\r\\n    {\\r\\n        if (!(relatedCoin == ZERO_VALUE || coinExistsInOracle(relatedCoin)))\\r\\n            revert CoinDoesNotExistInPriceOracle(relatedCoin);\\r\\n\\r\\n        (priceProvided, price) = IPriceAdapter(priceAdapter).calculatePrice(\\r\\n            fiatForPrice,\\r\\n            targetCoin,\\r\\n            relatedCoin\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function hasCoinsAssociatedWithProvider(\\r\\n        address provider\\r\\n    ) public view returns (bool hasCoins) {\\r\\n        if (allCoinsList.length > 0) {\\r\\n            for (uint256 i = 0; i < allCoinsList.length; i++) {\\r\\n                if (provider == coinConfig[allCoinsList[i]].priceProvider) {\\r\\n                    hasCoins = true;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!hasCoins && possibleFiat.length > 0) {\\r\\n            for (uint256 i = 0; i < possibleFiat.length; i++) {\\r\\n                if (\\r\\n                    provider ==\\r\\n                    fiatData[possibleFiat[i]].fiatCoinData.priceProvider\\r\\n                ) {\\r\\n                    hasCoins = true;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPriceProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPriceProvider {\\r\\n    function getCoinPriceInProviderFiat(\\r\\n        address targetCoin\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bool priceProvided,\\r\\n            uint256 priceInProviderFiat,\\r\\n            uint256 priceDecimals,\\r\\n            uint256 providerFiat\\r\\n        );\\r\\n\\r\\n    function providerIncludesCoin(\\r\\n        address coinToCheck\\r\\n    ) external view returns (bool isIncluded);\\r\\n\\r\\n    function providerFiat() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPriceAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPriceAdapter {\\r\\n    function calculatePrice(\\r\\n        uint256 fiatToUseForPrice,\\r\\n        address targetCoin,\\r\\n        address relatedCoin\\r\\n    ) external view returns (bool priceProvided, uint256 calculatedPrice);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/ICoinFiatBoard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ICoinFiatBoard {\\r\\n    struct Coin {\\r\\n        string ticker;\\r\\n        address coinAddress;\\r\\n        address priceProvider;\\r\\n        uint256 staticPrice;\\r\\n        uint256 nativeFiat;\\r\\n    }\\r\\n\\r\\n    struct Fiat {\\r\\n        string currency;\\r\\n        uint256 numericCode;\\r\\n        string alphabeticCode;\\r\\n        Coin fiatCoinData;\\r\\n        /**\\r\\n        struct Coin for Fiat has such values :\\r\\n        {\\r\\n        string ticker //smart contract creates itself. by concatenation of \\\"fiatCoin\\\" & alphabeticCode (ex. \\r\\n                        USD will have ticker \\\"fiatCoinUSD\\\")\\r\\n        address coinAddress //zero address wich last three symbols are - numeric code of Fiat (ex.\\r\\n                        USD has numeric code 840, so the address has to \\r\\n                        be: 0x0000000000000000000000000000000000000840)\\r\\n        address priceProvider //ONLY Chainlink!!!\\r\\n        uint256 staticPrice //zero\\r\\n        uint256 nativeFiat //ONLY USD!!!\\r\\n        }\\r\\n         */\\r\\n    }\\r\\n\\r\\n    function getCoinConfig(\\r\\n        address coinAddress\\r\\n    ) external view returns (Coin memory);\\r\\n\\r\\n    function fiatDetails(\\r\\n        uint256 iso4217NumericCode\\r\\n    ) external view returns (Fiat memory);\\r\\n\\r\\n    function zeroValue() external view returns (address);\\r\\n\\r\\n    function defaultDecimals() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/ProvidersBoard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/IPriceProvider.sol\\\";\\r\\n\\r\\ncontract ProvidersBoard {\\r\\n    address[] internal providersList;\\r\\n    mapping(uint256 iso4217NumericCode => address[] providersWithDefiniteFiat) providersListByFiat;\\r\\n\\r\\n    error ZeroValueNotAllowed();\\r\\n    error ImpossiblePriceProvider(address provider);\\r\\n    error PriceProviderAlreadyExists(address provider);\\r\\n    error RemoveProviderFromAllCoins(address provider);\\r\\n\\r\\n    event PriceProviderAdded(address provider);\\r\\n    event PriceProviderRevoked(address provider);\\r\\n\\r\\n    modifier properProvider(address priceProvider) {\\r\\n        if (!(priceProvider == address(0) || _validProvider(priceProvider)))\\r\\n            revert ImpossiblePriceProvider(priceProvider);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _addPriceProvider(address priceProvider) internal {\\r\\n        if (priceProvider == address(0)) revert ZeroValueNotAllowed();\\r\\n\\r\\n        if (_validProvider(priceProvider))\\r\\n            revert PriceProviderAlreadyExists(priceProvider);\\r\\n\\r\\n        providersList.push(priceProvider);\\r\\n        providersListByFiat[IPriceProvider(priceProvider).providerFiat()].push(\\r\\n            priceProvider\\r\\n        );\\r\\n        emit PriceProviderAdded(priceProvider);\\r\\n    }\\r\\n\\r\\n    function _revokePriceProvider(address priceProvider) internal {\\r\\n        if (!_validProvider(priceProvider))\\r\\n            revert ImpossiblePriceProvider(priceProvider);\\r\\n\\r\\n        address[] storage listByFiat = providersListByFiat[\\r\\n            IPriceProvider(priceProvider).providerFiat()\\r\\n        ];\\r\\n\\r\\n        for (uint256 j = 0; j < listByFiat.length; j++) {\\r\\n            if (priceProvider == listByFiat[j]) {\\r\\n                listByFiat[j] = listByFiat[listByFiat.length - 1];\\r\\n                listByFiat.pop();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < providersList.length; i++) {\\r\\n            if (priceProvider == providersList[i]) {\\r\\n                providersList[i] = providersList[providersList.length - 1];\\r\\n                providersList.pop();\\r\\n\\r\\n                emit PriceProviderRevoked(priceProvider);\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getPriceProvidersList() external view returns (address[] memory) {\\r\\n        return providersList;\\r\\n    }\\r\\n\\r\\n    function numberOfProviders() external view returns (uint256) {\\r\\n        return providersList.length;\\r\\n    }\\r\\n\\r\\n    function getPriceProvidersListByFiat(\\r\\n        uint256 iso4217NumericCode\\r\\n    ) external view returns (address[] memory) {\\r\\n        return providersListByFiat[iso4217NumericCode];\\r\\n    }\\r\\n\\r\\n    function numberOfProvidersByFiat(\\r\\n        uint256 iso4217NumericCode\\r\\n    ) external view returns (uint256) {\\r\\n        return providersListByFiat[iso4217NumericCode].length;\\r\\n    }\\r\\n\\r\\n    function _validProvider(\\r\\n        address provider\\r\\n    ) internal view returns (bool isValid) {\\r\\n        if (providersList.length > 0) {\\r\\n            uint256 counter;\\r\\n            for (uint256 i = 0; i < providersList.length; i++) {\\r\\n                if (provider == providersList[i]) {\\r\\n                    counter++;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            isValid = counter > 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/CoinFiatBoard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/ICoinFiatBoard.sol\\\";\\r\\nimport \\\"./interfaces/IPriceProvider.sol\\\";\\r\\nimport \\\"./interfaces/IERC20.sol\\\";\\r\\n\\r\\ncontract CoinFiatBoard is ICoinFiatBoard {\\r\\n    address internal immutable ZERO_VALUE =\\r\\n        0x0000000000000000000000000000000000000000;\\r\\n    uint256 internal immutable DEFAULT_DECIMALS;\\r\\n\\r\\n    address[] internal allCoinsList;\\r\\n    uint256[] public possibleFiat;\\r\\n\\r\\n    mapping(address coinAddress => Coin) coinConfig;\\r\\n    mapping(uint256 iso4217NumericCode => Fiat) fiatData;\\r\\n\\r\\n    error CoinDoesNotExistInPriceOracle(address coin);\\r\\n    error CoinAlreadyExistsInPriceOracle(address coin);\\r\\n    error CoinDoesNotExistInProvider(address priceProvider);\\r\\n\\r\\n    error FiatDoesNotExistInPriceOracle(uint256 iso4217NumericCode);\\r\\n    error FiatAlreadyExistsInPriceOracle(uint256 iso4217NumericCode);\\r\\n    error FiatDoesNotMatch();\\r\\n\\r\\n    event DecimalsSet(uint256 oldDecimals, uint256 newDecimals);\\r\\n    event CoinAdded(\\r\\n        string coinTicker,\\r\\n        address coinAddress,\\r\\n        address priceProvider,\\r\\n        uint256 priceForConfig,\\r\\n        uint256 nativeFiat\\r\\n    );\\r\\n    event CoinRevoked(address coinAddress);\\r\\n    event CoinConfigPriceUpdated(\\r\\n        uint256 oldPrice,\\r\\n        uint256 newPrice,\\r\\n        uint256 newNativeFiat\\r\\n    );\\r\\n    event CoinProviderUpdated(address oldProvider, address newProvider);\\r\\n    event CoinNativeFiatUpdated(uint256 oldNativeFiat, uint256 newNativeFiat);\\r\\n\\r\\n    event FiatAdded(Fiat);\\r\\n    event FiatRevoked(Fiat);\\r\\n\\r\\n    modifier coinExists(address coin) {\\r\\n        if (!coinExistsInOracle(coin))\\r\\n            revert CoinDoesNotExistInPriceOracle(coin);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier fiatExists(uint256 fiatNumericCode) {\\r\\n        if (!_fiatExists(fiatNumericCode))\\r\\n            revert FiatDoesNotExistInPriceOracle(fiatNumericCode);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        DEFAULT_DECIMALS = 18;\\r\\n        emit DecimalsSet(0, DEFAULT_DECIMALS);\\r\\n    }\\r\\n\\r\\n    function getCoinConfig(\\r\\n        address coinAddress\\r\\n    ) external view returns (Coin memory) {\\r\\n        return coinConfig[coinAddress];\\r\\n    }\\r\\n\\r\\n    function zeroValue() external view returns (address) {\\r\\n        return ZERO_VALUE;\\r\\n    }\\r\\n\\r\\n    function defaultDecimals() external view returns (uint256) {\\r\\n        return DEFAULT_DECIMALS;\\r\\n    }\\r\\n\\r\\n    function getAllCoinsList() external view returns (address[] memory) {\\r\\n        return allCoinsList;\\r\\n    }\\r\\n\\r\\n    function fiatExistsInOracle(\\r\\n        uint256 iso4217NumericCode\\r\\n    ) external view returns (bool) {\\r\\n        return _fiatExists(iso4217NumericCode);\\r\\n    }\\r\\n\\r\\n    function fiatDetails(\\r\\n        uint256 iso4217NumericCode\\r\\n    ) external view returns (Fiat memory) {\\r\\n        return fiatData[iso4217NumericCode];\\r\\n    }\\r\\n\\r\\n    function coinExistsInOracle(\\r\\n        address coin\\r\\n    ) public view returns (bool isCoinExists) {\\r\\n        isCoinExists = coinConfig[coin].coinAddress != address(0);\\r\\n    }\\r\\n\\r\\n    function getAllPossibleFiat() public view returns (uint256[] memory) {\\r\\n        return possibleFiat;\\r\\n    }\\r\\n\\r\\n    function _addNewCoin(\\r\\n        string memory coinTicker,\\r\\n        address coinAddress,\\r\\n        address priceProvider,\\r\\n        uint256 priceForConfig,\\r\\n        uint256 nativeFiat\\r\\n    ) internal {\\r\\n        if (coinExistsInOracle(coinAddress))\\r\\n            revert CoinAlreadyExistsInPriceOracle(coinAddress);\\r\\n        _coinProviderMatch(coinAddress, nativeFiat, priceProvider);\\r\\n\\r\\n        coinConfig[coinAddress] = Coin(\\r\\n            coinTicker,\\r\\n            coinAddress,\\r\\n            priceProvider,\\r\\n            priceForConfig,\\r\\n            nativeFiat\\r\\n        );\\r\\n\\r\\n        emit CoinAdded(\\r\\n            coinTicker,\\r\\n            coinAddress,\\r\\n            priceProvider,\\r\\n            priceForConfig,\\r\\n            nativeFiat\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _revokeCoin(address coinAddress) internal {\\r\\n        for (uint256 i = 0; i < allCoinsList.length; i++) {\\r\\n            if (coinAddress == allCoinsList[i]) {\\r\\n                allCoinsList[i] = allCoinsList[allCoinsList.length - 1];\\r\\n                allCoinsList.pop();\\r\\n\\r\\n                emit CoinRevoked(coinAddress);\\r\\n\\r\\n                delete coinConfig[coinAddress];\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _updateCoin(Coin memory coin, uint256 priceForConfig) internal {\\r\\n        uint256 oldPrice = coin.staticPrice;\\r\\n        coinConfig[coin.coinAddress].staticPrice = priceForConfig;\\r\\n\\r\\n        emit CoinConfigPriceUpdated(oldPrice, priceForConfig, coin.nativeFiat);\\r\\n    }\\r\\n\\r\\n    function _updateCoin(Coin memory coin, address priceProvider) internal {\\r\\n        _coinProviderMatch(coin.coinAddress, coin.nativeFiat, priceProvider);\\r\\n\\r\\n        address oldProvider = coin.priceProvider;\\r\\n        coinConfig[coin.coinAddress].priceProvider = priceProvider;\\r\\n\\r\\n        emit CoinProviderUpdated(oldProvider, priceProvider);\\r\\n    }\\r\\n\\r\\n    function _updateCoin(\\r\\n        address coinAddress,\\r\\n        address newPriceProvider,\\r\\n        uint256 newPriceForConfig,\\r\\n        uint256 newNativeFiat\\r\\n    ) internal {\\r\\n        uint256 oldFiat = coinConfig[coinAddress].nativeFiat;\\r\\n        coinConfig[coinAddress].nativeFiat = newNativeFiat;\\r\\n        emit CoinNativeFiatUpdated(oldFiat, newNativeFiat);\\r\\n\\r\\n        _updateCoin(coinConfig[coinAddress], newPriceForConfig);\\r\\n        _updateCoin(coinConfig[coinAddress], newPriceProvider);\\r\\n    }\\r\\n\\r\\n    function _addFiat(\\r\\n        string memory currency,\\r\\n        uint256 numericCode,\\r\\n        string memory alphabeticCode,\\r\\n        address fiatCoinAddress,\\r\\n        address fiatPriceProvider,\\r\\n        uint256 fiatPriceForConfig,\\r\\n        uint256 fiatNativeFiat\\r\\n    ) internal {\\r\\n        if (_fiatExists(numericCode))\\r\\n            revert FiatAlreadyExistsInPriceOracle(numericCode);\\r\\n\\r\\n        _addNewCoin(\\r\\n            string.concat(\\\"fiatCoin\\\", alphabeticCode),\\r\\n            fiatCoinAddress,\\r\\n            fiatPriceProvider,\\r\\n            fiatPriceForConfig,\\r\\n            fiatNativeFiat\\r\\n        );\\r\\n\\r\\n        fiatData[numericCode] = Fiat(\\r\\n            currency,\\r\\n            numericCode,\\r\\n            alphabeticCode,\\r\\n            coinConfig[fiatCoinAddress]\\r\\n        );\\r\\n\\r\\n        possibleFiat.push(numericCode);\\r\\n\\r\\n        emit FiatAdded(fiatData[numericCode]);\\r\\n    }\\r\\n\\r\\n    function _revokeFiat(uint256 _numericCode) internal {\\r\\n        if (possibleFiat.length > 0) {\\r\\n            for (uint256 i = 0; i < possibleFiat.length; i++) {\\r\\n                if (_numericCode == possibleFiat[i]) {\\r\\n                    possibleFiat[i] = possibleFiat[possibleFiat.length - 1];\\r\\n                    possibleFiat.pop();\\r\\n\\r\\n                    emit FiatRevoked(fiatData[_numericCode]);\\r\\n\\r\\n                    delete coinConfig[\\r\\n                        fiatData[_numericCode].fiatCoinData.coinAddress\\r\\n                    ];\\r\\n                    delete fiatData[_numericCode];\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _fiatExists(\\r\\n        uint256 numericCode\\r\\n    ) internal view returns (bool isFiatExists) {\\r\\n        isFiatExists = fiatData[numericCode].numericCode != 0;\\r\\n    }\\r\\n\\r\\n    function _coinProviderMatch(\\r\\n        address coinAddress,\\r\\n        uint256 coinFiat,\\r\\n        address priceProvider\\r\\n    ) internal view {\\r\\n        if (priceProvider != ZERO_VALUE) {\\r\\n            if (coinFiat != IPriceProvider(priceProvider).providerFiat())\\r\\n                revert FiatDoesNotMatch();\\r\\n            if (\\r\\n                !IPriceProvider(priceProvider).providerIncludesCoin(coinAddress)\\r\\n            ) revert CoinDoesNotExistInProvider(priceProvider);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/Access.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Access is Ownable {\\r\\n    mapping(address => bool) technicalRole;\\r\\n\\r\\n    error AccessDenied(address deniedAccount);\\r\\n\\r\\n    event TechnicalRoleGranted(address account, address caller);\\r\\n    event TechnicalaRoleRevoked(address account, address caller);\\r\\n\\r\\n    modifier ownerOrTechnicalRole() {\\r\\n        if (!(_msgSender() == owner() || hasTechnicalRole(_msgSender())))\\r\\n            revert AccessDenied(_msgSender());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyTechnicalRole() {\\r\\n        if (!hasTechnicalRole(_msgSender())) revert AccessDenied(_msgSender());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function addTechnicalRole(address account) external ownerOrTechnicalRole {\\r\\n        if (!hasTechnicalRole(account)) {\\r\\n            technicalRole[account] = true;\\r\\n            emit TechnicalRoleGranted(account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function revokeTechnicalRole(\\r\\n        address account\\r\\n    ) external ownerOrTechnicalRole {\\r\\n        if (hasTechnicalRole(account)) {\\r\\n            technicalRole[account] = false;\\r\\n            emit TechnicalaRoleRevoked(account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function hasTechnicalRole(address account) public view returns (bool) {\\r\\n        return technicalRole[account];\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deniedAccount\",\"type\":\"address\"}],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"CoinAlreadyExistsInPriceOracle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"CoinDoesNotExistInPriceOracle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceProvider\",\"type\":\"address\"}],\"name\":\"CoinDoesNotExistInProvider\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iso4217NumericCode\",\"type\":\"uint256\"}],\"name\":\"FiatAlreadyExistsInPriceOracle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iso4217NumericCode\",\"type\":\"uint256\"}],\"name\":\"FiatDoesNotExistInPriceOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FiatDoesNotMatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ImpossiblePriceProvider\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"PriceProviderAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"RemoveProviderFromAllCoins\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValueNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"coinTicker\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceForConfig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeFiat\",\"type\":\"uint256\"}],\"name\":\"CoinAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNativeFiat\",\"type\":\"uint256\"}],\"name\":\"CoinConfigPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldNativeFiat\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNativeFiat\",\"type\":\"uint256\"}],\"name\":\"CoinNativeFiatUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newProvider\",\"type\":\"address\"}],\"name\":\"CoinProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"}],\"name\":\"CoinRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDecimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDecimals\",\"type\":\"uint256\"}],\"name\":\"DecimalsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numericCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"alphabeticCode\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"staticPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeFiat\",\"type\":\"uint256\"}],\"internalType\":\"struct ICoinFiatBoard.Coin\",\"name\":\"fiatCoinData\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct ICoinFiatBoard.Fiat\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"FiatAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numericCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"alphabeticCode\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"staticPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeFiat\",\"type\":\"uint256\"}],\"internalType\":\"struct ICoinFiatBoard.Coin\",\"name\":\"fiatCoinData\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct ICoinFiatBoard.Fiat\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"FiatRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdapter\",\"type\":\"address\"}],\"name\":\"PriceAdapterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"PriceProviderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"PriceProviderRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TechnicalRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TechnicalaRoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numericCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"alphabeticCode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"fiatCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fiatPriceProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fiatPriceForConfig\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fiatNativeFiat\",\"type\":\"uint256\"}],\"name\":\"addFiatCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceForConfig\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeFiat\",\"type\":\"uint256\"}],\"name\":\"addNewCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceProvider\",\"type\":\"address\"}],\"name\":\"addPriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addTechnicalRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"coinExistsInOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCoinExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iso4217NumericCode\",\"type\":\"uint256\"}],\"name\":\"fiatDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numericCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"alphabeticCode\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"staticPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeFiat\",\"type\":\"uint256\"}],\"internalType\":\"struct ICoinFiatBoard.Coin\",\"name\":\"fiatCoinData\",\"type\":\"tuple\"}],\"internalType\":\"struct ICoinFiatBoard.Fiat\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iso4217NumericCode\",\"type\":\"uint256\"}],\"name\":\"fiatExistsInOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCoinsList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPossibleFiat\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"}],\"name\":\"getCoinConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"staticPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeFiat\",\"type\":\"uint256\"}],\"internalType\":\"struct ICoinFiatBoard.Coin\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fiatForPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relatedCoin\",\"type\":\"address\"}],\"name\":\"getCoinPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"priceProvided\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceProvidersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iso4217NumericCode\",\"type\":\"uint256\"}],\"name\":\"getPriceProvidersListByFiat\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"hasCoinsAssociatedWithProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasCoins\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasTechnicalRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfProviders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iso4217NumericCode\",\"type\":\"uint256\"}],\"name\":\"numberOfProvidersByFiat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"possibleFiat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"}],\"name\":\"revokeCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numericCode\",\"type\":\"uint256\"}],\"name\":\"revokeFiatCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceProvider\",\"type\":\"address\"}],\"name\":\"revokePriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeTechnicalRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPriceForConfig\",\"type\":\"uint256\"}],\"name\":\"setCoinConfigPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPriceProvider\",\"type\":\"address\"}],\"name\":\"setCoinPriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdapter\",\"type\":\"address\"}],\"name\":\"setPriceAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPriceProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPriceForConfig\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newNativeFiat\",\"type\":\"uint256\"}],\"name\":\"updateCoinConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroValue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PriceOracle", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}