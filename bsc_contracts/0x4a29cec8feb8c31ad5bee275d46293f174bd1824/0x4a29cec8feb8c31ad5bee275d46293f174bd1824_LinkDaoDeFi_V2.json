{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ILinkdaoOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ninterface ILinkdaoOracle {\\r\\n    function requestPrice(string memory _name, uint256 _reqId) external payable;\\r\\n\\r\\n    function update(uint256 _reqId, uint256 priceInCents) external;\\r\\n\\r\\n    function getPrice(uint256 _reqId) external view returns (uint256);\\r\\n\\r\\n    function setWithdrawalAllowed(uint256 _isWithdrawalAllowed) external;\\r\\n\\r\\n    function getWithdrawalAllowed() external view returns (uint256);\\r\\n\\r\\n    function setDepositAllowed(uint256 _isDepositAllowed) external;\\r\\n\\r\\n    function getDepositAllowed() external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/LinkDaoStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./ILinkdaoOracle.sol\\\";\\r\\nimport \\\"./Vault.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract LinkDaoDeFi_V2 is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address public LINKDAO_TOKEN_ADDRESS;\\r\\n    address public LINKDAO_ORACLE_ADDRESS;\\r\\n    address public USDT_ADDRESS;\\r\\n\\r\\n    uint256 public constant MIN_INVESTMENT = 25 ether;\\r\\n    uint256 public constant MIN_WITHDRAW = 10 ether;\\r\\n    uint256 public constant MIN_REINVEST = 10 ether;\\r\\n\\r\\n    uint256 public constant TOTAL_PERCENTAGE = 10000; // 100%\\r\\n    uint256 public constant MAX_REWARD_PERCENTAGE = 20000; // 200%\\r\\n\\r\\n    uint256 REWARD_PERIOD = 30 days;\\r\\n    \\r\\n    uint256 public constant PACKAGE1_ROI_PERCENTAGE = 600; // 6%\\r\\n    uint256 public constant PACKAGE2_ROI_PERCENTAGE = 800; // 8%\\r\\n    uint256 public constant PACKAGE3_ROI_PERCENTAGE = 1000; // 10%\\r\\n    uint256 public constant PACKAGE4_ROI_PERCENTAGE = 1200; // 12%\\r\\n\\r\\n    uint256 public WITHDRAW_FEE = 1000; //10%\\r\\n    uint256 public USDT_RATION_INVESTMNET = 2000; //20%\\r\\n\\r\\n    uint256 public constant PACKAGE1_ROI_MIN_INVESTMENT = 25 ether;\\r\\n    uint256 public constant PACKAGE2_ROI_MIN_INVESTMENT = 100 ether;\\r\\n    uint256 public constant PACKAGE3_ROI_MIN_INVESTMENT = 200 ether;\\r\\n    uint256 public constant PACKAGE4_ROI_MIN_INVESTMENT = 500 ether;\\r\\n\\r\\n    uint256 public totalInvestment;\\r\\n    uint256 public totalInvestmentAmount;\\r\\n    uint256 public totalReward;\\r\\n    uint256 public totalInvestors;\\r\\n\\r\\n    address public LKD_BALANCE_WALLET;\\r\\n    address public USDT_BALANCE_WALLET;\\r\\n\\r\\n    uint256 public currentID;\\r\\n    uint256 public deposited_LKDReward;\\r\\n\\r\\n    struct Investor {\\r\\n        address investor;\\r\\n        uint256[4] totalInvestment;\\r\\n        uint256 totalReward;\\r\\n        uint256 startDate;\\r\\n        uint256[] userInvestments;\\r\\n    }\\r\\n\\r\\n    struct Investment {\\r\\n        address investor;\\r\\n        uint256 totalInvestment;\\r\\n        uint256 totalReward;\\r\\n        uint256 roiPercentage;\\r\\n        uint256 maxReward;\\r\\n        uint256 lkdPrice;\\r\\n        uint256 startDate;\\r\\n        uint256 lastCheckpoint;\\r\\n    }\\r\\n\\r\\n    mapping(address => Investor) public investors;\\r\\n    mapping(uint256 => Investment) public investments;\\r\\n\\r\\n    event InvestmentEvent(\\r\\n        address investor,\\r\\n        uint256 investmentNumber,\\r\\n        uint256 roiPercentage,\\r\\n        uint256 lkdPrice,\\r\\n        uint256 startDate\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        address _linkDaoToken,\\r\\n        address _linkDaoOracleAddress,\\r\\n        address _lkdBalanceWallet,\\r\\n        address _usdtAddress,\\r\\n        address _usdtBalanceWallet\\r\\n    ) Ownable(msg.sender) {\\r\\n        require(_linkDaoToken != address(0), \\\"Invalid LinkDao token address\\\");\\r\\n        require(\\r\\n            _linkDaoOracleAddress != address(0),\\r\\n            \\\"Invalid LinkDao oracle address\\\"\\r\\n        );\\r\\n        require(\\r\\n            _lkdBalanceWallet != address(0),\\r\\n            \\\"Invalid LinkDao balance address\\\"\\r\\n        );\\r\\n        require(_usdtAddress != address(0), \\\"Invalid USDT address\\\");\\r\\n        require(\\r\\n            _usdtBalanceWallet != address(0),\\r\\n            \\\"Invalid USDT balance address\\\"\\r\\n        );\\r\\n\\r\\n        LINKDAO_TOKEN_ADDRESS = _linkDaoToken;\\r\\n        LINKDAO_ORACLE_ADDRESS = _linkDaoOracleAddress;\\r\\n        LKD_BALANCE_WALLET = _lkdBalanceWallet;\\r\\n        USDT_ADDRESS = _usdtAddress;\\r\\n        USDT_BALANCE_WALLET = _usdtBalanceWallet;\\r\\n    }\\r\\n\\r\\n    function setLinkdaoOracleAddress(\\r\\n        address _linkDaoOracleAddress\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            _linkDaoOracleAddress != address(0),\\r\\n            \\\"Invalid LinkDao oracle address\\\"\\r\\n        );\\r\\n\\r\\n        LINKDAO_ORACLE_ADDRESS = _linkDaoOracleAddress;\\r\\n    }\\r\\n\\r\\n    function setLinkdaoBalanceAddress(\\r\\n        address _lkdBalanceWallet\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            _lkdBalanceWallet != address(0),\\r\\n            \\\"Invalid LinkDao balance address\\\"\\r\\n        );\\r\\n\\r\\n        LKD_BALANCE_WALLET = _lkdBalanceWallet;\\r\\n    }\\r\\n\\r\\n    function setUSDTAddress(address _usdtAddress) external onlyOwner {\\r\\n        require(_usdtAddress != address(0), \\\"Invalid USDT address\\\");\\r\\n\\r\\n        USDT_ADDRESS = _usdtAddress;\\r\\n    }\\r\\n\\r\\n    function setUSDTBalanceAddress(\\r\\n        address _usdtBalanceWallet\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            _usdtBalanceWallet != address(0),\\r\\n            \\\"Invalid USDT balance address\\\"\\r\\n        );\\r\\n\\r\\n        USDT_BALANCE_WALLET = _usdtBalanceWallet;\\r\\n    }\\r\\n\\r\\n    function getLinkdaoPrice() public view returns (uint256 price) {\\r\\n        price = ILinkdaoOracle(LINKDAO_ORACLE_ADDRESS).getPrice(0);\\r\\n    }\\r\\n\\r\\n    function getPackageROI(\\r\\n        uint256 _amount\\r\\n    ) private pure returns (uint256 packageROI, uint256 index) {\\r\\n        if (_amount >= PACKAGE4_ROI_MIN_INVESTMENT) {\\r\\n            packageROI = PACKAGE4_ROI_PERCENTAGE;\\r\\n            index = 3;\\r\\n        } else if (_amount >= PACKAGE3_ROI_MIN_INVESTMENT) {\\r\\n            packageROI = PACKAGE3_ROI_PERCENTAGE;\\r\\n            index = 2;\\r\\n        } else if (_amount >= PACKAGE2_ROI_MIN_INVESTMENT) {\\r\\n            packageROI = PACKAGE2_ROI_PERCENTAGE;\\r\\n            index = 1;\\r\\n        } else {\\r\\n            packageROI = PACKAGE1_ROI_PERCENTAGE;\\r\\n            index = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUserInvestments(\\r\\n        address _investor\\r\\n    ) public view returns (uint256[] memory) {\\r\\n        return investors[_investor].userInvestments;\\r\\n    }\\r\\n\\r\\n    function setWithdrawalFee(uint256 _updatedFee) external onlyOwner {\\r\\n        WITHDRAW_FEE = _updatedFee;\\r\\n    }\\r\\n\\r\\n    function setUSDTRatio(uint256 _updatedRatio) external onlyOwner {\\r\\n        USDT_RATION_INVESTMNET = _updatedRatio;\\r\\n    }\\r\\n\\r\\n    function investAmount(uint256 _amount) external {\\r\\n        require(\\r\\n            ILinkdaoOracle(LINKDAO_ORACLE_ADDRESS).getDepositAllowed() > 0,\\r\\n            \\\"Deposit is not allowed\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _amount >= MIN_INVESTMENT,\\r\\n            \\\"Invest amount must be greater than $25\\\"\\r\\n        );\\r\\n\\r\\n        uint256 _price = getLinkdaoPrice();\\r\\n\\r\\n        require(_price > 0, \\\"Linkdao price must be greater than 0\\\");\\r\\n\\r\\n        uint256 usdRatioAmount = _amount.mul(USDT_RATION_INVESTMNET).div(\\r\\n            TOTAL_PERCENTAGE\\r\\n        );\\r\\n\\r\\n        IERC20(USDT_ADDRESS).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            USDT_BALANCE_WALLET,\\r\\n            usdRatioAmount\\r\\n        );\\r\\n\\r\\n        uint256 _lkdAmount = _amount.sub(usdRatioAmount).mul(100).div(_price);\\r\\n\\r\\n        (uint256 packageROI, uint256 index) = getPackageROI(_amount);\\r\\n\\r\\n        if (investors[msg.sender].investor == address(0)) {\\r\\n            investors[msg.sender].investor = msg.sender;\\r\\n            investors[msg.sender].startDate = block.timestamp;\\r\\n\\r\\n            totalInvestors = totalInvestors.add(1);\\r\\n        }\\r\\n\\r\\n        totalInvestment = totalInvestment.add(1);\\r\\n        totalInvestmentAmount = totalInvestmentAmount.add(_amount);\\r\\n        investors[msg.sender].totalInvestment[index] = investors[msg.sender]\\r\\n            .totalInvestment[index]\\r\\n            .add(_amount);\\r\\n        investors[msg.sender].userInvestments.push(totalInvestment);\\r\\n\\r\\n        uint256 _maxReward = _amount.mul(2);\\r\\n\\r\\n        currentID = currentID.add(1);\\r\\n\\r\\n        investments[currentID] = Investment({\\r\\n            investor: msg.sender,\\r\\n            totalInvestment: _amount,\\r\\n            totalReward: 0,\\r\\n            roiPercentage: packageROI,\\r\\n            maxReward: _maxReward,\\r\\n            startDate: block.timestamp,\\r\\n            lkdPrice: _price,\\r\\n            lastCheckpoint: block.timestamp\\r\\n        });\\r\\n\\r\\n        emit InvestmentEvent(\\r\\n            msg.sender,\\r\\n            totalInvestment,\\r\\n            packageROI,\\r\\n            _price,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        IERC20(LINKDAO_TOKEN_ADDRESS).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _lkdAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function investAmountFrom(address _msgSender, uint256 _amount) external {\\r\\n        require(\\r\\n            _amount >= MIN_INVESTMENT,\\r\\n            \\\"Invest amount must be greater than 0\\\"\\r\\n        );\\r\\n\\r\\n        uint256 _price = getLinkdaoPrice();\\r\\n\\r\\n        uint256 usdRatioAmount = _amount.mul(USDT_RATION_INVESTMNET).div(\\r\\n            TOTAL_PERCENTAGE\\r\\n        );\\r\\n\\r\\n        IERC20(USDT_ADDRESS).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            USDT_BALANCE_WALLET,\\r\\n            usdRatioAmount\\r\\n        );\\r\\n\\r\\n        uint256 _lkdAmount = _amount.sub(usdRatioAmount).mul(100).div(_price);\\r\\n\\r\\n        (uint256 packageROI, uint256 index) = getPackageROI(_amount);\\r\\n\\r\\n        if (investors[_msgSender].investor == address(0)) {\\r\\n            investors[_msgSender].investor = _msgSender;\\r\\n            investors[_msgSender].startDate = block.timestamp;\\r\\n\\r\\n            totalInvestors = totalInvestors.add(1);\\r\\n        }\\r\\n\\r\\n        totalInvestment = totalInvestment.add(1);\\r\\n        totalInvestmentAmount = totalInvestmentAmount.add(_amount);\\r\\n        investors[_msgSender].totalInvestment[index] = investors[_msgSender]\\r\\n            .totalInvestment[index]\\r\\n            .add(_amount);\\r\\n        investors[_msgSender].userInvestments.push(totalInvestment);\\r\\n\\r\\n        uint256 _maxReward = _amount.mul(2);\\r\\n\\r\\n        currentID = currentID.add(1);\\r\\n\\r\\n        investments[currentID] = Investment({\\r\\n            investor: _msgSender,\\r\\n            totalInvestment: _amount,\\r\\n            totalReward: 0,\\r\\n            roiPercentage: packageROI,\\r\\n            maxReward: _maxReward,\\r\\n            startDate: block.timestamp,\\r\\n            lkdPrice: _price,\\r\\n            lastCheckpoint: block.timestamp\\r\\n        });\\r\\n\\r\\n        emit InvestmentEvent(\\r\\n            _msgSender,\\r\\n            totalInvestment,\\r\\n            packageROI,\\r\\n            _price,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        IERC20(LINKDAO_TOKEN_ADDRESS).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _lkdAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getLkdBalance() public view returns (uint256 balance) {\\r\\n        balance = IERC20(LINKDAO_TOKEN_ADDRESS).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getTotalProfit(\\r\\n        address _investorAddress\\r\\n    ) public view returns (uint256 totalProfit) {\\r\\n        for (\\r\\n            uint256 i = 0;\\r\\n            i < investors[_investorAddress].userInvestments.length;\\r\\n            i++\\r\\n        ) {\\r\\n            totalProfit = totalProfit.add(\\r\\n                getTotalProfitForInvestment(\\r\\n                    investors[_investorAddress].userInvestments[i]\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTotalProfitForInvestment(\\r\\n        uint256 _investmentId\\r\\n    ) public view returns (uint256 totalProfit) {\\r\\n        uint256 totalAmount = investments[_investmentId].totalInvestment;\\r\\n\\r\\n        if (totalAmount == 0) {\\r\\n            return totalProfit;\\r\\n        }\\r\\n\\r\\n        uint256 roiPercentage = investments[_investmentId].roiPercentage;\\r\\n        uint256 currentTime = block.timestamp;\\r\\n\\r\\n        uint256 timePeriod = currentTime -\\r\\n            investments[_investmentId].lastCheckpoint;\\r\\n\\r\\n        totalProfit = totalAmount.mul(roiPercentage).mul(timePeriod).div(\\r\\n            REWARD_PERIOD.mul(TOTAL_PERCENTAGE)\\r\\n        );\\r\\n\\r\\n        if (\\r\\n            investments[_investmentId].totalReward.add(totalProfit) >\\r\\n            investments[_investmentId].maxReward\\r\\n        ) {\\r\\n            totalProfit = investments[_investmentId].maxReward.sub(\\r\\n                investments[_investmentId].totalReward\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getWithdrawableTotalProfit(\\r\\n        address _investorAddress\\r\\n    ) public view returns (uint256 totalProfit) {\\r\\n        for (\\r\\n            uint256 i = 0;\\r\\n            i < investors[_investorAddress].userInvestments.length;\\r\\n            i++\\r\\n        ) {\\r\\n            totalProfit = totalProfit.add(\\r\\n                getWithdrawableTotalProfitForInvestment(\\r\\n                    investors[_investorAddress].userInvestments[i]\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getWithdrawableTotalProfitForInvestment(\\r\\n        uint256 _investmentId\\r\\n    ) public view returns (uint256 totalProfit) {\\r\\n        uint256 totalAmount = investments[_investmentId].totalInvestment;\\r\\n\\r\\n        uint256 roiPercentage = investments[_investmentId].roiPercentage;\\r\\n\\r\\n        uint256 timePeriod = block.timestamp.sub(\\r\\n            investments[_investmentId].lastCheckpoint\\r\\n        );\\r\\n\\r\\n        totalProfit = totalAmount.mul(roiPercentage).mul(timePeriod).div(\\r\\n            REWARD_PERIOD.mul(TOTAL_PERCENTAGE)\\r\\n        );\\r\\n\\r\\n        if (\\r\\n            investments[_investmentId].totalReward.add(totalProfit) >\\r\\n            investments[_investmentId].maxReward\\r\\n        ) {\\r\\n            totalProfit = investments[_investmentId].maxReward.sub(\\r\\n                investments[_investmentId].totalReward\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUserTotalInvestments(\\r\\n        address _investor\\r\\n    ) public view returns (uint256[4] memory totalInvestments) {\\r\\n        totalInvestments = investors[_investor].totalInvestment;\\r\\n    }\\r\\n\\r\\n    function getUserInvestmentsByPackage(\\r\\n        address _investor,\\r\\n        uint256 _index\\r\\n    ) public view returns (uint256 totalInvestmentItem) {\\r\\n        totalInvestmentItem = investors[_investor].totalInvestment[_index];\\r\\n    }\\r\\n\\r\\n    function withdrawReward() external {\\r\\n        require(\\r\\n            ILinkdaoOracle(LINKDAO_ORACLE_ADDRESS).getWithdrawalAllowed() > 0,\\r\\n            \\\"Withdrawal is not allowed\\\"\\r\\n        );\\r\\n        uint256 price = ILinkdaoOracle(LINKDAO_ORACLE_ADDRESS).getPrice(0);\\r\\n\\r\\n        uint256 totalRewardToRelease;\\r\\n        uint256 totalLkdToRelease;\\r\\n        for (\\r\\n            uint256 i = 0;\\r\\n            i < investors[msg.sender].userInvestments.length;\\r\\n            i++\\r\\n        ) {\\r\\n            uint256 _investmentId = investors[msg.sender].userInvestments[i];\\r\\n\\r\\n            uint256 totalRewardForInvestment = getWithdrawableTotalProfitForInvestment(\\r\\n                    _investmentId\\r\\n                );\\r\\n\\r\\n            investments[_investmentId].totalReward = investments[_investmentId]\\r\\n                .totalReward\\r\\n                .add(totalRewardForInvestment);\\r\\n\\r\\n            uint256 lkdAmount = (totalRewardForInvestment).div(price).mul(100);\\r\\n\\r\\n            totalRewardToRelease += totalRewardForInvestment;\\r\\n            totalLkdToRelease += lkdAmount;\\r\\n\\r\\n            investments[_investmentId].lastCheckpoint = block.timestamp;\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            totalRewardToRelease >= MIN_WITHDRAW,\\r\\n            \\\"Cannot withdraw less than min withdraw\\\"\\r\\n        );\\r\\n\\r\\n        investors[msg.sender].totalReward = investors[msg.sender]\\r\\n            .totalReward\\r\\n            .add(totalRewardToRelease);\\r\\n\\r\\n        totalReward = totalReward.add(totalRewardToRelease);\\r\\n\\r\\n        uint256 currentBalance = getLkdBalance();\\r\\n\\r\\n        if (currentBalance < totalLkdToRelease) {\\r\\n            YIELD_Farming(LKD_BALANCE_WALLET).withdraw(\\r\\n                totalLkdToRelease.sub(currentBalance)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 _fee = totalLkdToRelease.mul(WITHDRAW_FEE).div(\\r\\n            TOTAL_PERCENTAGE\\r\\n        );\\r\\n\\r\\n        IERC20(LINKDAO_TOKEN_ADDRESS).safeTransfer(\\r\\n            msg.sender,\\r\\n            totalLkdToRelease.sub(_fee)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawSingleReward(uint256 _investmentId) external {\\r\\n        require(\\r\\n            ILinkdaoOracle(LINKDAO_ORACLE_ADDRESS).getWithdrawalAllowed() > 0,\\r\\n            \\\"Withdrawal is not allowed\\\"\\r\\n        );\\r\\n        require(\\r\\n            investments[_investmentId].investor == msg.sender,\\r\\n            \\\"Only investor can claim the reward\\\"\\r\\n        );\\r\\n        uint256 price = ILinkdaoOracle(LINKDAO_ORACLE_ADDRESS).getPrice(0);\\r\\n\\r\\n        uint256 totalRewardToRelease = getWithdrawableTotalProfitForInvestment(\\r\\n            _investmentId\\r\\n        );\\r\\n\\r\\n        require(totalRewardToRelease > 0, \\\"No Reward to claim\\\");\\r\\n\\r\\n        investments[_investmentId].lastCheckpoint = block.timestamp;\\r\\n\\r\\n        uint256 lkdAmount = (totalRewardToRelease).div(price).mul(100);\\r\\n\\r\\n        require(\\r\\n            totalRewardToRelease >= MIN_WITHDRAW,\\r\\n            \\\"Cannot withdraw less than min withdraw\\\"\\r\\n        );\\r\\n\\r\\n        investments[_investmentId].totalReward = investments[_investmentId]\\r\\n            .totalReward\\r\\n            .add(totalRewardToRelease);\\r\\n\\r\\n        investors[msg.sender].totalReward = investors[msg.sender]\\r\\n            .totalReward\\r\\n            .add(totalRewardToRelease);\\r\\n\\r\\n        totalReward = totalReward.add(totalRewardToRelease);\\r\\n\\r\\n        uint256 currentBalance = getLkdBalance();\\r\\n\\r\\n        if (currentBalance < lkdAmount) {\\r\\n            YIELD_Farming(LKD_BALANCE_WALLET).withdraw(lkdAmount.sub(currentBalance));\\r\\n        }\\r\\n\\r\\n        uint256 _fee = lkdAmount.mul(WITHDRAW_FEE).div(TOTAL_PERCENTAGE);\\r\\n\\r\\n        IERC20(LINKDAO_TOKEN_ADDRESS).safeTransfer(\\r\\n            msg.sender,\\r\\n            lkdAmount.sub(_fee)\\r\\n        );\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = x < y ? x : y;\\r\\n    }\\r\\n\\r\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\ncontract YIELD_Farming is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address public tokenAddress;\\r\\n    mapping(address => uint256) public contractWithdrawLimits;\\r\\n    mapping(address => uint256) public contractWithdrawnAmounts;\\r\\n    mapping(address => bool) public addedContracts;\\r\\n\\r\\n    constructor(address _tokenAddress) Ownable(msg.sender) {\\r\\n        tokenAddress = _tokenAddress;\\r\\n    }\\r\\n\\r\\n    modifier onlyAddedContracts() {\\r\\n        require(\\r\\n            addedContracts[msg.sender] || msg.sender == owner(),\\r\\n            \\\"You are not authorized to withdraw these funds\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setTokenAddress(address _tokenAddress) external onlyOwner {\\r\\n        tokenAddress = _tokenAddress;\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _amount) external onlyOwner {\\r\\n        IERC20(tokenAddress).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _amount) external onlyAddedContracts {\\r\\n        require(_amount <= getTokenBalance(), \\\"Insufficient balance\\\");\\r\\n        internalWithdraw(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function setContractLimit(\\r\\n        address _contractAddress,\\r\\n        uint256 _withdrawLimit\\r\\n    ) external onlyOwner {\\r\\n        contractWithdrawLimits[_contractAddress] = _withdrawLimit;\\r\\n    }\\r\\n\\r\\n    function addContract(\\r\\n        address _contractAddress,\\r\\n        uint256 _withdrawLimit\\r\\n    ) external onlyOwner {\\r\\n        contractWithdrawLimits[_contractAddress] = _withdrawLimit;\\r\\n        addedContracts[_contractAddress] = true;\\r\\n    }\\r\\n\\r\\n    function removeContract(address _contractAddress) external onlyOwner {\\r\\n        require(addedContracts[_contractAddress], \\\"Contract address not found\\\");\\r\\n        delete contractWithdrawLimits[_contractAddress];\\r\\n        delete contractWithdrawnAmounts[_contractAddress];\\r\\n        addedContracts[_contractAddress] = false;\\r\\n    }\\r\\n\\r\\n    function internalWithdraw(\\r\\n        address _contractAddress,\\r\\n        uint256 _amount\\r\\n    ) private {\\r\\n        require(addedContracts[_contractAddress], \\\"Contract address not found\\\");\\r\\n        require(\\r\\n            contractWithdrawLimits[_contractAddress] > 0,\\r\\n            \\\"Contract address not found\\\"\\r\\n        );\\r\\n        require(\\r\\n            _amount <= contractWithdrawLimits[_contractAddress],\\r\\n            \\\"Withdrawal amount exceeds contract balance\\\"\\r\\n        );\\r\\n        contractWithdrawnAmounts[_contractAddress] = contractWithdrawnAmounts[\\r\\n            _contractAddress\\r\\n        ].add(_amount);\\r\\n\\r\\n        IERC20(tokenAddress).safeTransfer(_contractAddress, _amount);\\r\\n    }\\r\\n\\r\\n    function getTokenBalance() public view returns (uint256) {\\r\\n        return IERC20(tokenAddress).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getWithdrawLimitRemaining(\\r\\n        address _contractAddress\\r\\n    ) external view returns (uint256) {\\r\\n        return\\r\\n            contractWithdrawLimits[_contractAddress].sub(\\r\\n                contractWithdrawnAmounts[_contractAddress]\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getWithdrawnAmount(\\r\\n        address _contractAddress\\r\\n    ) external view returns (uint256) {\\r\\n        return contractWithdrawnAmounts[_contractAddress];\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkDaoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkDaoOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lkdBalanceWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtBalanceWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roiPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lkdPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"name\":\"InvestmentEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LINKDAO_ORACLE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINKDAO_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LKD_BALANCE_WALLET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REWARD_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_INVESTMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WITHDRAW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACKAGE1_ROI_MIN_INVESTMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACKAGE1_ROI_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACKAGE2_ROI_MIN_INVESTMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACKAGE2_ROI_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACKAGE3_ROI_MIN_INVESTMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACKAGE3_ROI_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACKAGE4_ROI_MIN_INVESTMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACKAGE4_ROI_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_BALANCE_WALLET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_RATION_INVESTMNET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposited_LKDReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkdaoPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLkdBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"}],\"name\":\"getTotalProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_investmentId\",\"type\":\"uint256\"}],\"name\":\"getTotalProfitForInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getUserInvestments\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserInvestmentsByPackage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalInvestmentItem\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getUserTotalInvestments\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"totalInvestments\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"}],\"name\":\"getWithdrawableTotalProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_investmentId\",\"type\":\"uint256\"}],\"name\":\"getWithdrawableTotalProfitForInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"investAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_msgSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"investAmountFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkdPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCheckpoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lkdBalanceWallet\",\"type\":\"address\"}],\"name\":\"setLinkdaoBalanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkDaoOracleAddress\",\"type\":\"address\"}],\"name\":\"setLinkdaoOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"name\":\"setUSDTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtBalanceWallet\",\"type\":\"address\"}],\"name\":\"setUSDTBalanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updatedRatio\",\"type\":\"uint256\"}],\"name\":\"setUSDTRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updatedFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestmentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_investmentId\",\"type\":\"uint256\"}],\"name\":\"withdrawSingleReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LinkDaoDeFi_V2", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008eefe7316548341e57befa99c78270577e366a21000000000000000000000000109e460b555f7c6f8f8d0ce99da240342eba33b40000000000000000000000002858554007ae052c955aebb28911835669bcc2f700000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000009152957b2897d5bc9e9615e37748a0f56a1aa7a1", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}