{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-06-13\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-06-09\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a), \"mul overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"sub overflow\");\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"add overflow\");\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256, \"abs overflow\");\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"parameter 2 can not be 0\");\r\n        return a % b;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event TransferOwnerShip(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit TransferOwnerShip(newOwner);\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Owner can not be 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenFarm is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // How many tokens the user has provided.\r\n        uint256 stakingTime; // The time at which the user staked tokens.\r\n        uint256 rewardClaimed;\r\n    }\r\n\r\n    struct PoolInfo {\r\n        address tokenAddress;\r\n        address rewardTokenAddress;\r\n        uint256 maxPoolSize;\r\n        uint256 currentPoolSize;\r\n        uint256 maxContribution;\r\n        uint256 rewardAmount;\r\n        uint256 lockDays;\r\n        bool poolType; // true for public staking, false for whitelist staking\r\n        bool poolActive;\r\n        uint256 stakeHolders;\r\n        uint256 apy;\r\n    }\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    bool lock_ = false;\r\n\r\n    uint256 public totalRewardsClaimed = 0;\r\n    // Info of each user that stakes tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    mapping(uint256 => mapping(address => bool)) public whitelistedAddress;\r\n    mapping(address => bool) public isAuthorized;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n \r\n\r\n    constructor() {}\r\n\r\n    modifier lock() {\r\n        require(!lock_, \"Process is locked\");\r\n        lock_ = true;\r\n        _;\r\n        lock_ = false;\r\n    }\r\n\r\n    function poolLength() public view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    function addPool(\r\n        address _tokenAddress,\r\n        address _rewardTokenAddress,\r\n        uint256 _maxPoolSize,\r\n        uint256 _maxContribution,\r\n        uint256 _lockDays,\r\n        bool _poolType,\r\n        bool _poolActive,\r\n        uint256 _apy\r\n    ) public onlyOwner {\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                tokenAddress: _tokenAddress,\r\n                rewardTokenAddress: _rewardTokenAddress,\r\n                maxPoolSize: _maxPoolSize,\r\n                currentPoolSize: 0,\r\n                maxContribution: _maxContribution,\r\n                rewardAmount: 0,\r\n                lockDays: _lockDays,\r\n                poolType: _poolType,\r\n                poolActive: _poolActive,\r\n                stakeHolders: 0,\r\n                apy: _apy\r\n            })\r\n        );\r\n    }\r\n\r\n    function updateMaxPoolSize(\r\n        uint256 _pid,\r\n        uint256 _maxPoolSize\r\n    ) public onlyOwner {\r\n        require(_pid < poolLength(), \"Invalid pool ID\");\r\n        require(\r\n            _maxPoolSize >= poolInfo[_pid].currentPoolSize,\r\n            \"Cannot reduce the max size below the current pool size\"\r\n        );\r\n        poolInfo[_pid].maxPoolSize = _maxPoolSize;\r\n    }\r\n\r\n    function updateMaxContribution(\r\n        uint256 _pid,\r\n        uint256 _maxContribution\r\n    ) public onlyOwner {\r\n        require(_pid < poolLength(), \"Invalid pool ID\");\r\n        poolInfo[_pid].maxContribution = _maxContribution;\r\n    }\r\n\r\n    function setIsAuthorized(\r\n        address _address,\r\n        bool _isAuthorized\r\n    ) public onlyOwner {\r\n        isAuthorized[_address] = _isAuthorized;\r\n    }\r\n\r\n    function addRewards(uint256 _pid, uint256 _amount) public onlyOwner {\r\n        require(_pid < poolLength(), \"Invalid pool ID\");\r\n\r\n        address _tokenAddress = poolInfo[_pid].rewardTokenAddress;\r\n        IBEP20 token = IBEP20(_tokenAddress);\r\n        bool success = token.transferFrom(msg.sender, address(this), _amount);\r\n        require(success, \"Transfer From failed. Please approve the token\");\r\n\r\n        poolInfo[_pid].rewardAmount += _amount;\r\n    }\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) public {\r\n        require(\r\n            isAuthorized[msg.sender],\r\n            \"You are not authorized to add pool token data\"\r\n        );\r\n        require(_pid <= poolLength(), \"Invalid pool ID\");\r\n\r\n        poolInfo[_pid - 1].rewardAmount += _amount;\r\n    }\r\n\r\n\r\n    function updateLockDays(uint256 _pid, uint256 _lockDays) public onlyOwner {\r\n        require(_pid < poolLength(), \"Invalid pool ID\");\r\n        require(\r\n            poolInfo[_pid].currentPoolSize == 0,\r\n            \"Cannot change lock time after people started staking\"\r\n        );\r\n        poolInfo[_pid].lockDays = _lockDays;\r\n    }\r\n\r\n    // this function is to withdraw extra tokens locked in the contract.\r\n    function withdrawLockedTokens(\r\n        address _tokenAddress\r\n    ) external onlyOwner returns (bool) {\r\n        IBEP20 token = IBEP20(_tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n\r\n        bool success = token.transfer(msg.sender, balance);\r\n        return success;\r\n    }\r\n\r\n    function updateApy(uint256 _pid, uint256 _apy) public onlyOwner {\r\n        require(_pid < poolLength(), \"Invalid pool ID\");\r\n        poolInfo[_pid].apy = _apy;\r\n    }\r\n\r\n    function updatePoolType(uint256 _pid, bool _poolType) public onlyOwner {\r\n        require(_pid < poolLength(), \"Invalid pool ID\");\r\n        poolInfo[_pid].poolType = _poolType;\r\n    }\r\n\r\n    function updatePoolActive(uint256 _pid, bool _poolActive) public onlyOwner {\r\n        require(_pid < poolLength(), \"Invalid pool ID\");\r\n        poolInfo[_pid].poolActive = _poolActive;\r\n    }\r\n\r\n    function addWhitelist(\r\n        uint256 _pid,\r\n        address[] memory _whitelistAddresses\r\n    ) public onlyOwner {\r\n        require(_pid < poolLength(), \"Invalid pool ID\");\r\n        uint256 length = _whitelistAddresses.length;\r\n        require(length <= 200, \"Can add only 200 wl at a time\");\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address _whitelistAddress = _whitelistAddresses[i];\r\n            whitelistedAddress[_pid][_whitelistAddress] = true;\r\n        }\r\n    }\r\n\r\n    function emergencyLock(bool _lock) public onlyOwner {\r\n        lock_ = _lock;\r\n    }\r\n\r\n    function getUserLockTime(\r\n        uint256 _pid,\r\n        address _user\r\n    ) public view returns (uint256) {\r\n        return\r\n            (userInfo[_pid][_user].stakingTime).add(\r\n                (poolInfo[_pid].lockDays).mul(1 days)\r\n            );\r\n    }\r\n\r\n    function stakeTokens(uint256 _pid, uint256 _amount) public {\r\n        require(_pid < poolLength(), \"Invalid pool ID\");\r\n        require(poolInfo[_pid].poolActive, \"Pool is not active\");\r\n        require(\r\n            poolInfo[_pid].currentPoolSize.add(_amount) <=\r\n                poolInfo[_pid].maxPoolSize,\r\n            \"Staking exceeds max pool size\"\r\n        );\r\n        require(\r\n            (userInfo[_pid][msg.sender].amount).add(_amount) <=\r\n                poolInfo[_pid].maxContribution,\r\n            \"Max Contribution exceeds\"\r\n        );\r\n        if (poolInfo[_pid].poolType == false) {\r\n            require(\r\n                whitelistedAddress[_pid][msg.sender],\r\n                \"You are not whitelisted for this pool\"\r\n            );\r\n        }\r\n\r\n        address _tokenAddress = poolInfo[_pid].tokenAddress;\r\n        IBEP20 token = IBEP20(_tokenAddress);\r\n        bool success = token.transferFrom(msg.sender, address(this), _amount);\r\n        require(success, \"Transfer From failed. Please approve the token\");\r\n\r\n        poolInfo[_pid].currentPoolSize = (poolInfo[_pid].currentPoolSize).add(\r\n            _amount\r\n        );\r\n        uint256 _stakingTime = block.timestamp;\r\n        _amount = _amount.add(userInfo[_pid][msg.sender].amount);\r\n        uint256 _rewardClaimed = 0;\r\n\r\n        if(userInfo[_pid][msg.sender].amount == 0){\r\n            poolInfo[_pid].stakeHolders++; \r\n        }\r\n\r\n        userInfo[_pid][msg.sender] = UserInfo({\r\n            amount: _amount,\r\n            stakingTime: _stakingTime,\r\n            rewardClaimed: _rewardClaimed\r\n        });\r\n    }\r\n\r\n    function claimableRewards(\r\n        uint256 _pid,\r\n        address _user\r\n    ) public view returns (uint256) {\r\n        require(_pid < poolLength(), \"Invalid pool ID\");\r\n\r\n        uint256 lockDays = (block.timestamp -\r\n            userInfo[_pid][_user].stakingTime) / 1 days;\r\n        \r\n        if(lockDays > poolInfo[_pid].lockDays){\r\n            lockDays = poolInfo[_pid].lockDays;\r\n        }\r\n\r\n        uint256 _refundValue = ((userInfo[_pid][_user].amount *\r\n            poolInfo[_pid].apy *\r\n            lockDays) / (100 * 365));\r\n        return _refundValue;\r\n    }\r\n\r\n    // this function will return APY in % to base 10000. Divide the returned value by 100 in frontend to get final value\r\n    function getApy (uint256 _pid) public view returns (uint256){\r\n        require(_pid < poolLength(), \"Invalid pool ID\");\r\n        return poolInfo[_pid].apy;\r\n    }\r\n\r\n    function unstakeTokens(uint256 _pid) public {\r\n        require(_pid < poolLength(), \"Invalid pool ID\");\r\n        require(\r\n            userInfo[_pid][msg.sender].amount > 0,\r\n            \"You don't have any staked tokens\"\r\n        );\r\n        require(\r\n            userInfo[_pid][msg.sender].stakingTime > 0,\r\n            \"You don't have any staked tokens\"\r\n        );\r\n        require(\r\n            getUserLockTime(_pid, msg.sender) < block.timestamp,\r\n            \"Your maturity time is not reached\"\r\n        );\r\n\r\n        address _tokenAddress = poolInfo[_pid].tokenAddress;\r\n        IBEP20 token = IBEP20(_tokenAddress);\r\n        address _rewardTokenAddress = poolInfo[_pid].rewardTokenAddress;\r\n        IBEP20 rewardToken = IBEP20(_rewardTokenAddress);\r\n        uint256 _amount = userInfo[_pid][msg.sender].amount;\r\n\r\n        uint256 _refundValue = claimableRewards(_pid, msg.sender);\r\n        userInfo[_pid][msg.sender].rewardClaimed = _refundValue;\r\n        poolInfo[_pid].rewardAmount -= _refundValue;\r\n        poolInfo[_pid].currentPoolSize = (poolInfo[_pid].currentPoolSize).sub(\r\n            userInfo[_pid][msg.sender].amount\r\n        );\r\n        userInfo[_pid][msg.sender].amount = 0;\r\n        poolInfo[_pid].stakeHolders--;\r\n\r\n        bool success1 = token.transfer(msg.sender, _amount);\r\n        bool success2 = rewardToken.transfer(msg.sender, _refundValue);\r\n        require(success1 && success2, \"Transfer failed\");\r\n    }\r\n\r\n\r\n\r\n    // this function is to withdraw BNB sent to this address by mistake\r\n    function withdrawEth() external onlyOwner returns (bool) {\r\n        uint256 balance = address(this).balance;\r\n        (bool success, ) = payable(msg.sender).call{value: balance}(\"\");\r\n        return success;\r\n    }\r\n\r\n    // this function is to withdraw BEP20 tokens sent to this address by mistake\r\n    function withdrawBEP20(\r\n        address _tokenAddress\r\n    ) external onlyOwner returns (bool) {\r\n        IBEP20 token = IBEP20(_tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        bool success = token.transfer(msg.sender, balance);\r\n        return success;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnerShip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPoolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDays\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_poolType\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_poolActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_whitelistAddresses\",\"type\":\"address[]\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"emergencyLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getApy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPoolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPoolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDays\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"poolType\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"poolActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakeHolders\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAuthorized\",\"type\":\"bool\"}],\"name\":\"setIsAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"}],\"name\":\"updateApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDays\",\"type\":\"uint256\"}],\"name\":\"updateLockDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxContribution\",\"type\":\"uint256\"}],\"name\":\"updateMaxContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPoolSize\",\"type\":\"uint256\"}],\"name\":\"updateMaxPoolSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_poolActive\",\"type\":\"bool\"}],\"name\":\"updatePoolActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_poolType\",\"type\":\"bool\"}],\"name\":\"updatePoolType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawBEP20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawLockedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenFarm", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://814f85c5a0b9a1c38d92f090505720ae9dfcbfd89792544688e253e0dc95f9dd"}