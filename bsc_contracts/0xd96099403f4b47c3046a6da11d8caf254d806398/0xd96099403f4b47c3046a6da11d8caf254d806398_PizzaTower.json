{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PizzaTower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\n// contract interface\\ninterface NftMintInterface {\\n    // function definition of the method we want to interact with\\n    function mint(address to) external;\\n}\\n\\ncontract PizzaTower {\\n    struct Tower {\\n        uint256 coins;\\n        uint256 money;\\n        uint256 money2;\\n        uint256 yield;\\n        uint256 timestamp;\\n        uint256 hrs;\\n        address ref;\\n        uint256 refs;\\n        uint256 refDeps;\\n        uint8[8] chefs;\\n    }\\n    mapping(address => Tower) public towers;\\n    uint256 public totalChefs;\\n    uint256 public totalTowers;\\n    uint256 public totalInvested;\\n    address public manager = 0x4439783Efa4B079485ff2e47B7e97825b6801C1a;\\n    uint256 public startUNIX;\\n    NftMintInterface public NFTContract= NftMintInterface(0xaa085866Effa02f2F4D18F03Aa2A2154A0cE7a8F);\\n  \\n    constructor(uint256 startDate){\\n        require(startDate > 0);\\n        startUNIX = startDate;\\n    }\\n\\n    function addCoins(address ref) public payable {\\n        require(block.timestamp > startUNIX, \\\"We are not live yet!\\\");\\n        uint256 coins = msg.value / 2e13;\\n        require(coins > 0, \\\"Zero coins\\\");\\n        address user = msg.sender;\\n        totalInvested += msg.value;\\n        if (towers[user].timestamp == 0) {\\n            totalTowers++;\\n            ref = towers[ref].timestamp == 0 ? manager : ref;\\n            towers[ref].refs++;\\n            towers[user].ref = ref;\\n            towers[user].timestamp = block.timestamp;\\n            NFTContract.mint(msg.sender);\\n        }\\n        ref = towers[user].ref;\\n        towers[ref].coins += (coins * 7) / 100;\\n        towers[ref].money += (coins * 100 * 3) / 100;\\n        towers[ref].refDeps += coins;\\n        towers[user].coins += coins;\\n        payable(manager).transfer((msg.value * 10) / 100);\\n    }\\n\\n    function withdrawMoney() public {\\n        address user = msg.sender;\\n        uint256 money = towers[user].money;\\n        towers[user].money = 0;\\n        uint256 amount = money * 2e11;\\n        payable(user).transfer(address(this).balance < amount ? address(this).balance : amount);\\n    }\\n\\n    function collectMoney() public {\\n        address user = msg.sender;\\n        syncTower(user);\\n        towers[user].hrs = 0;\\n        towers[user].money += towers[user].money2;\\n        towers[user].money2 = 0;\\n    }\\n\\n    function upgradeTower(uint256 floorId) public {\\n        require(floorId < 8, \\\"Max 8 floors\\\");\\n        address user = msg.sender;\\n        syncTower(user);\\n        towers[user].chefs[floorId]++;\\n        totalChefs++;\\n        uint256 chefs = towers[user].chefs[floorId];\\n        towers[user].coins -= getUpgradePrice(floorId, chefs);\\n        towers[user].yield += getYield(floorId, chefs);\\n    }\\n\\n\\n    function getChefs(address addr) public view returns (uint8[8] memory) {\\n        return towers[addr].chefs;\\n    }\\n\\n    function syncTower(address user) internal {\\n        require(towers[user].timestamp > 0, \\\"User is not registered\\\");\\n        if (towers[user].yield > 0) {\\n            uint256 hrs = block.timestamp / 3600 - towers[user].timestamp / 3600;\\n            if (hrs + towers[user].hrs > 24) {\\n                hrs = 24 - towers[user].hrs;\\n            }\\n            towers[user].money2 += hrs * towers[user].yield;\\n            towers[user].hrs += hrs;\\n        }\\n        towers[user].timestamp = block.timestamp;\\n    }\\n\\n    function getUpgradePrice(uint256 floorId, uint256 chefId) internal pure returns (uint256) {\\n        if (chefId == 1) return [500, 1500, 4500, 13500, 40500, 120000, 365000, 1000000][floorId];\\n        if (chefId == 2) return [625, 1800, 5600, 16800, 50600, 150000, 456000, 1200000][floorId];\\n        if (chefId == 3) return [780, 2300, 7000, 21000, 63000, 187000, 570000, 1560000][floorId];\\n        if (chefId == 4) return [970, 3000, 8700, 26000, 79000, 235000, 713000, 2000000][floorId];\\n        if (chefId == 5) return [1200, 3600, 11000, 33000, 98000, 293000, 890000, 2500000][floorId];\\n        revert(\\\"Incorrect chefId\\\");\\n    }\\n\\n    function getYield(uint256 floorId, uint256 chefId) internal pure returns (uint256) {\\n        if (chefId == 1) return [41, 130, 399, 1220, 3750, 11400, 36200, 104000][floorId];\\n        if (chefId == 2) return [52, 157, 498, 1530, 4700, 14300, 45500, 126500][floorId];\\n        if (chefId == 3) return [65, 201, 625, 1920, 5900, 17900, 57200, 167000][floorId];\\n        if (chefId == 4) return [82, 264, 780, 2380, 7400, 22700, 72500, 216500][floorId];\\n        if (chefId == 5) return [103, 318, 995, 3050, 9300, 28700, 91500, 275000][floorId];\\n        revert(\\\"Incorrect chefId\\\");\\n    }\\n}\\n\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NFTContract\",\"outputs\":[{\"internalType\":\"contract NftMintInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"addCoins\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getChefs\",\"outputs\":[{\"internalType\":\"uint8[8]\",\"name\":\"\",\"type\":\"uint8[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startUNIX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChefs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"towers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"money\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"money2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hrs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refDeps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"floorId\",\"type\":\"uint256\"}],\"name\":\"upgradeTower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PizzaTower", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000064c8faf9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}