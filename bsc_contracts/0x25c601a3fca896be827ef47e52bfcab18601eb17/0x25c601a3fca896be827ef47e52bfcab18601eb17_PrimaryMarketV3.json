{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/fund/PrimaryMarketV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../utils/SafeDecimalMath.sol\\\";\\n\\nimport \\\"../interfaces/IPrimaryMarketV3.sol\\\";\\nimport \\\"../interfaces/ITrancheIndexV2.sol\\\";\\nimport \\\"../interfaces/IWrappedERC20.sol\\\";\\n\\ncontract PrimaryMarketV3 is IPrimaryMarketV3, ReentrancyGuard, ITrancheIndexV2, Ownable {\\n    event Created(address indexed account, uint256 underlying, uint256 outQ);\\n    event Redeemed(address indexed account, uint256 inQ, uint256 underlying, uint256 fee);\\n    event Split(address indexed account, uint256 inQ, uint256 outB, uint256 outR);\\n    event Merged(\\n        address indexed account,\\n        uint256 outQ,\\n        uint256 inB,\\n        uint256 inR,\\n        uint256 feeUnderlying\\n    );\\n    event RedemptionQueued(address indexed account, uint256 index, uint256 underlying);\\n    event RedemptionPopped(uint256 count, uint256 newHead, uint256 requiredUnderlying);\\n    event RedemptionClaimed(address indexed account, uint256 index, uint256 underlying);\\n    event FundCapUpdated(uint256 newCap);\\n    event RedemptionFeeRateUpdated(uint256 newRedemptionFeeRate);\\n    event MergeFeeRateUpdated(uint256 newMergeFeeRate);\\n\\n    using SafeMath for uint256;\\n    using SafeDecimalMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct QueuedRedemption {\\n        address account;\\n        uint256 underlying;\\n        uint256 previousPrefixSum;\\n    }\\n\\n    uint256 private constant MAX_REDEMPTION_FEE_RATE = 0.01e18;\\n    uint256 private constant MAX_MERGE_FEE_RATE = 0.01e18;\\n\\n    IFundV3 public immutable override fund;\\n    IERC20 private immutable _tokenUnderlying;\\n\\n    uint256 public redemptionFeeRate;\\n    uint256 public mergeFeeRate;\\n\\n    /// @notice The upper limit of underlying that the fund can hold. This contract rejects\\n    ///         creations that may break this limit.\\n    /// @dev This limit can be bypassed if the fund has multiple primary markets.\\n    ///\\n    ///      Set it to uint(-1) to skip the check and save gas.\\n    uint256 public fundCap;\\n\\n    /// @notice Queue of redemptions that cannot be claimed yet. Key is a sequential index\\n    ///         starting from zero. Value is a tuple of user address, redeemed underlying and\\n    ///         prefix sum before this entry.\\n    mapping(uint256 => QueuedRedemption) public queuedRedemptions;\\n\\n    /// @notice Total underlying tokens of claimable queued redemptions.\\n    uint256 public claimableUnderlying;\\n\\n    /// @notice Index of the redemption queue head. All redemptions with index smaller than\\n    ///         this value can be claimed now.\\n    uint256 public redemptionQueueHead;\\n\\n    /// @notice Index of the redemption following the last entry of the queue. The next queued\\n    ///         redemption will be written at this index.\\n    uint256 public redemptionQueueTail;\\n\\n    constructor(\\n        address fund_,\\n        uint256 redemptionFeeRate_,\\n        uint256 mergeFeeRate_,\\n        uint256 fundCap_\\n    ) public Ownable() {\\n        fund = IFundV3(fund_);\\n        _tokenUnderlying = IERC20(IFundV3(fund_).tokenUnderlying());\\n        _updateRedemptionFeeRate(redemptionFeeRate_);\\n        _updateMergeFeeRate(mergeFeeRate_);\\n        _updateFundCap(fundCap_);\\n    }\\n\\n    /// @notice Calculate the result of a creation.\\n    /// @param underlying Underlying amount spent for the creation\\n    /// @return outQ Created QUEEN amount\\n    function getCreation(uint256 underlying) public view override returns (uint256 outQ) {\\n        uint256 fundUnderlying = fund.getTotalUnderlying();\\n        uint256 fundEquivalentTotalQ = fund.getEquivalentTotalQ();\\n        require(fundUnderlying.add(underlying) <= fundCap, \\\"Exceed fund cap\\\");\\n        if (fundEquivalentTotalQ == 0) {\\n            outQ = underlying.mul(fund.underlyingDecimalMultiplier());\\n            uint256 splitRatio = fund.splitRatio();\\n            require(splitRatio != 0, \\\"Fund is not initialized\\\");\\n            uint256 settledDay = fund.currentDay() - 1 days;\\n            uint256 underlyingPrice = fund.twapOracle().getTwap(settledDay);\\n            (uint256 navB, uint256 navR) = fund.historicalNavs(settledDay);\\n            outQ = outQ.mul(underlyingPrice).div(splitRatio).divideDecimal(navB.add(navR));\\n        } else {\\n            require(\\n                fundUnderlying != 0,\\n                \\\"Cannot create QUEEN for fund with shares but no underlying\\\"\\n            );\\n            outQ = underlying.mul(fundEquivalentTotalQ).div(fundUnderlying);\\n        }\\n    }\\n\\n    /// @notice Calculate the amount of underlying tokens to create at least the given QUEEN amount.\\n    ///         This only works with non-empty fund for simplicity.\\n    /// @param minOutQ Minimum received QUEEN amount\\n    /// @return underlying Underlying amount that should be used for creation\\n    function getCreationForQ(uint256 minOutQ) external view override returns (uint256 underlying) {\\n        // Assume:\\n        //   minOutQ * fundUnderlying = a * fundEquivalentTotalQ - b\\n        // where a and b are integers and 0 <= b < fundEquivalentTotalQ\\n        // Then\\n        //   underlying = a\\n        //   getCreation(underlying)\\n        //     = floor(a * fundEquivalentTotalQ / fundUnderlying)\\n        //    >= floor((a * fundEquivalentTotalQ - b) / fundUnderlying)\\n        //     = minOutQ\\n        //   getCreation(underlying - 1)\\n        //     = floor((a * fundEquivalentTotalQ - fundEquivalentTotalQ) / fundUnderlying)\\n        //     < (a * fundEquivalentTotalQ - b) / fundUnderlying\\n        //     = minOutQ\\n        uint256 fundUnderlying = fund.getTotalUnderlying();\\n        uint256 fundEquivalentTotalQ = fund.getEquivalentTotalQ();\\n        require(fundEquivalentTotalQ > 0, \\\"Cannot calculate creation for empty fund\\\");\\n        return minOutQ.mul(fundUnderlying).add(fundEquivalentTotalQ - 1).div(fundEquivalentTotalQ);\\n    }\\n\\n    function _getRedemptionBeforeFee(uint256 inQ) private view returns (uint256 underlying) {\\n        uint256 fundUnderlying = fund.getTotalUnderlying();\\n        uint256 fundEquivalentTotalQ = fund.getEquivalentTotalQ();\\n        underlying = inQ.mul(fundUnderlying).div(fundEquivalentTotalQ);\\n    }\\n\\n    /// @notice Calculate the result of a redemption.\\n    /// @param inQ QUEEN amount spent for the redemption\\n    /// @return underlying Redeemed underlying amount\\n    /// @return fee Underlying amount charged as redemption fee\\n    function getRedemption(uint256 inQ)\\n        public\\n        view\\n        override\\n        returns (uint256 underlying, uint256 fee)\\n    {\\n        underlying = _getRedemptionBeforeFee(inQ);\\n        fee = underlying.multiplyDecimal(redemptionFeeRate);\\n        underlying = underlying.sub(fee);\\n    }\\n\\n    /// @notice Calculate the amount of QUEEN that can be redeemed for at least the given amount\\n    ///         of underlying tokens.\\n    /// @dev The return value may not be the minimum solution due to rounding errors.\\n    /// @param minUnderlying Minimum received underlying amount\\n    /// @return inQ QUEEN amount that should be redeemed\\n    function getRedemptionForUnderlying(uint256 minUnderlying)\\n        external\\n        view\\n        override\\n        returns (uint256 inQ)\\n    {\\n        // Assume:\\n        //   minUnderlying * 1e18 = a * (1e18 - redemptionFeeRate) + b\\n        //   a * fundEquivalentTotalQ = c * fundUnderlying - d\\n        // where\\n        //   a, b, c, d are integers\\n        //   0 <= b < 1e18 - redemptionFeeRate\\n        //   0 <= d < fundUnderlying\\n        // Then\\n        //   underlyingBeforeFee = a\\n        //   inQ = c\\n        //   getRedemption(inQ).underlying\\n        //     = floor(c * fundUnderlying / fundEquivalentTotalQ) -\\n        //       - floor(floor(c * fundUnderlying / fundEquivalentTotalQ) * redemptionFeeRate / 1e18)\\n        //     = ceil(floor(c * fundUnderlying / fundEquivalentTotalQ) * (1e18 - redemptionFeeRate) / 1e18)\\n        //    >= ceil(floor((c * fundUnderlying - d) / fundEquivalentTotalQ) * (1e18 - redemptionFeeRate) / 1e18)\\n        //     = ceil(a * (1e18 - redemptionFeeRate) / 1e18)\\n        //     = (a * (1e18 - redemptionFeeRate) + b) / 1e18        // because b < 1e18\\n        //     = minUnderlying\\n        uint256 fundUnderlying = fund.getTotalUnderlying();\\n        uint256 fundEquivalentTotalQ = fund.getEquivalentTotalQ();\\n        uint256 underlyingBeforeFee = minUnderlying.divideDecimal(1e18 - redemptionFeeRate);\\n        return\\n            underlyingBeforeFee.mul(fundEquivalentTotalQ).add(fundUnderlying - 1).div(\\n                fundUnderlying\\n            );\\n    }\\n\\n    /// @notice Calculate the result of a split.\\n    /// @param inQ QUEEN amount to be split\\n    /// @return outB Received BISHOP amount, which is also received ROOK amount\\n    function getSplit(uint256 inQ) public view override returns (uint256 outB) {\\n        return inQ.multiplyDecimal(fund.splitRatio());\\n    }\\n\\n    /// @notice Calculate the amount of QUEEN that can be split into at least the given amount of\\n    ///         BISHOP and ROOK.\\n    /// @param minOutB Received BISHOP amount, which is also received ROOK amount\\n    /// @return inQ QUEEN amount that should be split\\n    function getSplitForB(uint256 minOutB) external view override returns (uint256 inQ) {\\n        uint256 splitRatio = fund.splitRatio();\\n        return minOutB.mul(1e18).add(splitRatio.sub(1)).div(splitRatio);\\n    }\\n\\n    /// @notice Calculate the result of a merge.\\n    /// @param inB Spent BISHOP amount, which is also spent ROOK amount\\n    /// @return outQ Received QUEEN amount\\n    /// @return feeQ QUEEN amount charged as merge fee\\n    function getMerge(uint256 inB) public view override returns (uint256 outQ, uint256 feeQ) {\\n        uint256 outQBeforeFee = inB.divideDecimal(fund.splitRatio());\\n        feeQ = outQBeforeFee.multiplyDecimal(mergeFeeRate);\\n        outQ = outQBeforeFee.sub(feeQ);\\n    }\\n\\n    /// @notice Calculate the amount of BISHOP and ROOK that can be merged into at least\\n    ///      the given amount of QUEEN.\\n    /// @dev The return value may not be the minimum solution due to rounding errors.\\n    /// @param minOutQ Minimum received QUEEN amount\\n    /// @return inB BISHOP amount that should be merged, which is also spent ROOK amount\\n    function getMergeForQ(uint256 minOutQ) external view override returns (uint256 inB) {\\n        // Assume:\\n        //   minOutQ * 1e18 = a * (1e18 - mergeFeeRate) + b\\n        //   c = ceil(a * splitRatio / 1e18)\\n        // where a and b are integers and 0 <= b < 1e18 - mergeFeeRate\\n        // Then\\n        //   outQBeforeFee = a\\n        //   inB = c\\n        //   getMerge(inB).outQ\\n        //     = c * 1e18 / splitRatio - floor(c * 1e18 / splitRatio * mergeFeeRate / 1e18)\\n        //     = ceil(c * 1e18 / splitRatio * (1e18 - mergeFeeRate) / 1e18)\\n        //    >= ceil(a * (1e18 - mergeFeeRate) / 1e18)\\n        //     = (a * (1e18 - mergeFeeRate) + b) / 1e18         // because b < 1e18\\n        //     = minOutQ\\n        uint256 outQBeforeFee = minOutQ.divideDecimal(1e18 - mergeFeeRate);\\n        inB = outQBeforeFee.mul(fund.splitRatio()).add(1e18 - 1).div(1e18);\\n    }\\n\\n    /// @notice Return index of the first queued redemption that cannot be claimed now.\\n    ///         Users can use this function to determine which indices can be passed to\\n    ///         `claimRedemptions()`.\\n    /// @return Index of the first redemption that cannot be claimed now\\n    function getNewRedemptionQueueHead() external view returns (uint256) {\\n        uint256 available = _tokenUnderlying.balanceOf(address(fund));\\n        uint256 l = redemptionQueueHead;\\n        uint256 r = redemptionQueueTail;\\n        uint256 startPrefixSum = queuedRedemptions[l].previousPrefixSum;\\n        // overflow is desired\\n        if (queuedRedemptions[r].previousPrefixSum - startPrefixSum <= available) {\\n            return r;\\n        }\\n        // Iteration count is bounded by log2(tail - head), which is at most 256.\\n        while (l + 1 < r) {\\n            uint256 m = (l + r) / 2;\\n            if (queuedRedemptions[m].previousPrefixSum - startPrefixSum <= available) {\\n                l = m;\\n            } else {\\n                r = m;\\n            }\\n        }\\n        return l;\\n    }\\n\\n    /// @notice Search in the redemption queue.\\n    /// @param account Owner of the redemptions, or zero address to return all redemptions\\n    /// @param startIndex Redemption index where the search starts, or zero to start from the head\\n    /// @param maxIterationCount Maximum number of redemptions to be scanned, or zero for no limit\\n    /// @return indices Indices of found redemptions\\n    /// @return underlying Total underlying of found redemptions\\n    function getQueuedRedemptions(\\n        address account,\\n        uint256 startIndex,\\n        uint256 maxIterationCount\\n    ) external view returns (uint256[] memory indices, uint256 underlying) {\\n        uint256 head = redemptionQueueHead;\\n        uint256 tail = redemptionQueueTail;\\n        if (startIndex == 0) {\\n            startIndex = head;\\n        } else {\\n            require(startIndex >= head && startIndex <= tail, \\\"startIndex out of bound\\\");\\n        }\\n        uint256 endIndex = tail;\\n        if (maxIterationCount != 0 && tail - startIndex > maxIterationCount) {\\n            endIndex = startIndex + maxIterationCount;\\n        }\\n        indices = new uint256[](endIndex - startIndex);\\n        uint256 count = 0;\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            if (account == address(0) || queuedRedemptions[i].account == account) {\\n                indices[count] = i;\\n                underlying += queuedRedemptions[i].underlying;\\n                count++;\\n            }\\n        }\\n        if (count != endIndex - startIndex) {\\n            // Shrink the array\\n            assembly {\\n                mstore(indices, count)\\n            }\\n        }\\n    }\\n\\n    /// @notice Return whether the fund can change its primary market to another contract.\\n    function canBeRemovedFromFund() external view override returns (bool) {\\n        return redemptionQueueHead == redemptionQueueTail;\\n    }\\n\\n    /// @notice Create QUEEN using underlying tokens. This function should be called by\\n    ///         a smart contract, which transfers underlying tokens to this contract\\n    ///         in the same transaction.\\n    /// @param recipient Address that will receive created QUEEN\\n    /// @param minOutQ Minimum QUEEN amount to be received\\n    /// @param version The latest rebalance version\\n    /// @return outQ Received QUEEN amount\\n    function create(\\n        address recipient,\\n        uint256 minOutQ,\\n        uint256 version\\n    ) external override nonReentrant returns (uint256 outQ) {\\n        uint256 underlying = _tokenUnderlying.balanceOf(address(this)).sub(claimableUnderlying);\\n        outQ = getCreation(underlying);\\n        require(outQ >= minOutQ && outQ > 0, \\\"Min QUEEN created\\\");\\n        fund.primaryMarketMint(TRANCHE_Q, recipient, outQ, version);\\n        _tokenUnderlying.safeTransfer(address(fund), underlying);\\n        emit Created(recipient, underlying, outQ);\\n    }\\n\\n    /// @notice Redeem QUEEN to get underlying tokens back. Revert if there are still some\\n    ///         queued redemptions that cannot be claimed now.\\n    /// @param recipient Address that will receive redeemed underlying tokens\\n    /// @param inQ Spent QUEEN amount\\n    /// @param minUnderlying Minimum amount of underlying tokens to be received\\n    /// @param version The latest rebalance version\\n    /// @return underlying Received underlying amount\\n    function redeem(\\n        address recipient,\\n        uint256 inQ,\\n        uint256 minUnderlying,\\n        uint256 version\\n    ) external override nonReentrant returns (uint256 underlying) {\\n        underlying = _redeem(recipient, inQ, minUnderlying, version);\\n    }\\n\\n    /// @notice Redeem QUEEN to get native currency back. The underlying must be wrapped token\\n    ///         of the native currency. Revert if there are still some queued redemptions that\\n    ///         cannot be claimed now.\\n    /// @param recipient Address that will receive redeemed underlying tokens\\n    /// @param inQ Spent QUEEN amount\\n    /// @param minUnderlying Minimum amount of underlying tokens to be received\\n    /// @param version The latest rebalance version\\n    /// @return underlying Received underlying amount\\n    function redeemAndUnwrap(\\n        address recipient,\\n        uint256 inQ,\\n        uint256 minUnderlying,\\n        uint256 version\\n    ) external override nonReentrant returns (uint256 underlying) {\\n        underlying = _redeem(address(this), inQ, minUnderlying, version);\\n        IWrappedERC20(address(_tokenUnderlying)).withdraw(underlying);\\n        (bool success, ) = recipient.call{value: underlying}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    function _redeem(\\n        address recipient,\\n        uint256 inQ,\\n        uint256 minUnderlying,\\n        uint256 version\\n    ) private returns (uint256 underlying) {\\n        uint256 fee;\\n        (underlying, fee) = getRedemption(inQ);\\n        fund.primaryMarketBurn(TRANCHE_Q, msg.sender, inQ, version);\\n        _popRedemptionQueue(0);\\n        require(underlying >= minUnderlying && underlying > 0, \\\"Min underlying redeemed\\\");\\n        // Redundant check for user-friendly revert message.\\n        require(\\n            underlying <= _tokenUnderlying.balanceOf(address(fund)),\\n            \\\"Not enough underlying in fund\\\"\\n        );\\n        fund.primaryMarketTransferUnderlying(recipient, underlying, fee);\\n        emit Redeemed(recipient, inQ, underlying, fee);\\n    }\\n\\n    /// @notice Redeem QUEEN and wait in the redemption queue. Redeemed underlying tokens will\\n    ///         be claimable when the fund has enough balance to pay this redemption and all\\n    ///         previous ones in the queue.\\n    /// @param recipient Address that will receive redeemed underlying tokens\\n    /// @param inQ Spent QUEEN amount\\n    /// @param minUnderlying Minimum amount of underlying tokens to be received\\n    /// @param version The latest rebalance version\\n    /// @return underlying Received underlying amount\\n    /// @return index Index of the queued redemption\\n    function queueRedemption(\\n        address recipient,\\n        uint256 inQ,\\n        uint256 minUnderlying,\\n        uint256 version\\n    ) external override nonReentrant returns (uint256 underlying, uint256 index) {\\n        uint256 fee;\\n        (underlying, fee) = getRedemption(inQ);\\n        fund.primaryMarketBurn(TRANCHE_Q, msg.sender, inQ, version);\\n        require(underlying >= minUnderlying && underlying > 0, \\\"Min underlying redeemed\\\");\\n        index = redemptionQueueTail;\\n        QueuedRedemption storage newRedemption = queuedRedemptions[index];\\n        newRedemption.account = recipient;\\n        newRedemption.underlying = underlying;\\n        // overflow is desired\\n        queuedRedemptions[index + 1].previousPrefixSum =\\n            newRedemption.previousPrefixSum +\\n            underlying;\\n        redemptionQueueTail = index + 1;\\n        fund.primaryMarketAddDebt(underlying, fee);\\n        emit Redeemed(recipient, inQ, underlying, fee);\\n        emit RedemptionQueued(recipient, index, underlying);\\n    }\\n\\n    /// @notice Remove a given number of redemptions from the front of the redemption queue and\\n    ///         fetch underlying tokens of these redemptions from the fund. Revert if the fund\\n    ///         cannot pay these redemptions now.\\n    /// @param count The number of redemptions to be removed, or zero to completely empty the queue\\n    function popRedemptionQueue(uint256 count) external nonReentrant {\\n        _popRedemptionQueue(count);\\n    }\\n\\n    function _popRedemptionQueue(uint256 count) private {\\n        uint256 oldHead = redemptionQueueHead;\\n        uint256 oldTail = redemptionQueueTail;\\n        uint256 newHead;\\n        if (count == 0) {\\n            if (oldHead == oldTail) {\\n                return;\\n            }\\n            newHead = oldTail;\\n        } else {\\n            newHead = oldHead.add(count);\\n            require(newHead <= oldTail, \\\"Redemption queue out of bound\\\");\\n        }\\n        // overflow is desired\\n        uint256 requiredUnderlying =\\n            queuedRedemptions[newHead].previousPrefixSum -\\n                queuedRedemptions[oldHead].previousPrefixSum;\\n        // Redundant check for user-friendly revert message.\\n        require(\\n            requiredUnderlying <= _tokenUnderlying.balanceOf(address(fund)),\\n            \\\"Not enough underlying in fund\\\"\\n        );\\n        claimableUnderlying = claimableUnderlying.add(requiredUnderlying);\\n        fund.primaryMarketPayDebt(requiredUnderlying);\\n        redemptionQueueHead = newHead;\\n        emit RedemptionPopped(newHead - oldHead, newHead, requiredUnderlying);\\n    }\\n\\n    /// @notice Claim underlying tokens of queued redemptions. All these redemptions must\\n    ///         belong to the same account.\\n    /// @param account Recipient of the redemptions\\n    /// @param indices Indices of the redemptions in the queue, which must be in increasing order\\n    /// @return underlying Total claimed underlying amount\\n    function claimRedemptions(address account, uint256[] calldata indices)\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256 underlying)\\n    {\\n        underlying = _claimRedemptions(account, indices);\\n        _tokenUnderlying.safeTransfer(account, underlying);\\n    }\\n\\n    /// @notice Claim native currency of queued redemptions. The underlying must be wrapped token\\n    ///         of the native currency. All these redemptions must belong to the same account.\\n    /// @param account Recipient of the redemptions\\n    /// @param indices Indices of the redemptions in the queue, which must be in increasing order\\n    /// @return underlying Total claimed underlying amount\\n    function claimRedemptionsAndUnwrap(address account, uint256[] calldata indices)\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256 underlying)\\n    {\\n        underlying = _claimRedemptions(account, indices);\\n        IWrappedERC20(address(_tokenUnderlying)).withdraw(underlying);\\n        (bool success, ) = account.call{value: underlying}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    function _claimRedemptions(address account, uint256[] calldata indices)\\n        private\\n        returns (uint256 underlying)\\n    {\\n        uint256 count = indices.length;\\n        if (count == 0) {\\n            return 0;\\n        }\\n        uint256 head = redemptionQueueHead;\\n        if (indices[count - 1] >= head) {\\n            _popRedemptionQueue(indices[count - 1] - head + 1);\\n        }\\n        for (uint256 i = 0; i < count; i++) {\\n            require(i == 0 || indices[i] > indices[i - 1], \\\"Indices out of order\\\");\\n            QueuedRedemption storage redemption = queuedRedemptions[indices[i]];\\n            uint256 redemptionUnderlying = redemption.underlying;\\n            require(\\n                redemption.account == account && redemptionUnderlying != 0,\\n                \\\"Invalid redemption index\\\"\\n            );\\n            underlying = underlying.add(redemptionUnderlying);\\n            emit RedemptionClaimed(account, indices[i], redemptionUnderlying);\\n            delete queuedRedemptions[indices[i]];\\n        }\\n        claimableUnderlying = claimableUnderlying.sub(underlying);\\n    }\\n\\n    function split(\\n        address recipient,\\n        uint256 inQ,\\n        uint256 version\\n    ) external override returns (uint256 outB) {\\n        outB = getSplit(inQ);\\n        fund.primaryMarketBurn(TRANCHE_Q, msg.sender, inQ, version);\\n        fund.primaryMarketMint(TRANCHE_B, recipient, outB, version);\\n        fund.primaryMarketMint(TRANCHE_R, recipient, outB, version);\\n        emit Split(recipient, inQ, outB, outB);\\n    }\\n\\n    function merge(\\n        address recipient,\\n        uint256 inB,\\n        uint256 version\\n    ) external override returns (uint256 outQ) {\\n        uint256 feeQ;\\n        (outQ, feeQ) = getMerge(inB);\\n        uint256 feeUnderlying = _getRedemptionBeforeFee(feeQ);\\n        fund.primaryMarketBurn(TRANCHE_B, msg.sender, inB, version);\\n        fund.primaryMarketBurn(TRANCHE_R, msg.sender, inB, version);\\n        fund.primaryMarketMint(TRANCHE_Q, recipient, outQ, version);\\n        fund.primaryMarketAddDebt(0, feeUnderlying);\\n        emit Merged(recipient, outQ, inB, inB, feeUnderlying);\\n    }\\n\\n    /// @dev Nothing to do for daily fund settlement.\\n    function settle(uint256 day) external override onlyFund {}\\n\\n    function _updateFundCap(uint256 newCap) private {\\n        fundCap = newCap;\\n        emit FundCapUpdated(newCap);\\n    }\\n\\n    function updateFundCap(uint256 newCap) external onlyOwner {\\n        _updateFundCap(newCap);\\n    }\\n\\n    function _updateRedemptionFeeRate(uint256 newRedemptionFeeRate) private {\\n        require(newRedemptionFeeRate <= MAX_REDEMPTION_FEE_RATE, \\\"Exceed max redemption fee rate\\\");\\n        redemptionFeeRate = newRedemptionFeeRate;\\n        emit RedemptionFeeRateUpdated(newRedemptionFeeRate);\\n    }\\n\\n    function updateRedemptionFeeRate(uint256 newRedemptionFeeRate) external onlyOwner {\\n        _updateRedemptionFeeRate(newRedemptionFeeRate);\\n    }\\n\\n    function _updateMergeFeeRate(uint256 newMergeFeeRate) private {\\n        require(newMergeFeeRate <= MAX_MERGE_FEE_RATE, \\\"Exceed max merge fee rate\\\");\\n        mergeFeeRate = newMergeFeeRate;\\n        emit MergeFeeRateUpdated(newMergeFeeRate);\\n    }\\n\\n    function updateMergeFeeRate(uint256 newMergeFeeRate) external onlyOwner {\\n        _updateMergeFeeRate(newMergeFeeRate);\\n    }\\n\\n    /// @notice Receive unwrapped transfer from the wrapped token.\\n    receive() external payable {}\\n\\n    modifier onlyFund() {\\n        require(msg.sender == address(fund), \\\"Only fund\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SafeDecimalMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint256;\\n\\n    /* Number of decimal places in the representations. */\\n    uint256 private constant decimals = 18;\\n    uint256 private constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint256 private constant UNIT = 10**uint256(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint256 private constant PRECISE_UNIT = 10**uint256(highPrecisionDecimals);\\n    uint256 private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR =\\n        10**uint256(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y).div(UNIT);\\n    }\\n\\n    function multiplyDecimalPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    function divideDecimalPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(PRECISE_UNIT).div(y);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint256 i) internal pure returns (uint256) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint256 i) internal pure returns (uint256) {\\n        uint256 quotientTimesTen = i.mul(10).div(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen = quotientTimesTen.add(10);\\n        }\\n\\n        return quotientTimesTen.div(10);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, and the max value of\\n     * uint256 on overflow.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        return c / a != b ? type(uint256).max : c;\\n    }\\n\\n    function saturatingMultiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return saturatingMul(x, y).div(UNIT);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPrimaryMarketV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"./IFundV3.sol\\\";\\n\\ninterface IPrimaryMarketV3 {\\n    function fund() external view returns (IFundV3);\\n\\n    function getCreation(uint256 underlying) external view returns (uint256 outQ);\\n\\n    function getCreationForQ(uint256 minOutQ) external view returns (uint256 underlying);\\n\\n    function getRedemption(uint256 inQ) external view returns (uint256 underlying, uint256 fee);\\n\\n    function getRedemptionForUnderlying(uint256 minUnderlying) external view returns (uint256 inQ);\\n\\n    function getSplit(uint256 inQ) external view returns (uint256 outB);\\n\\n    function getSplitForB(uint256 minOutB) external view returns (uint256 inQ);\\n\\n    function getMerge(uint256 inB) external view returns (uint256 outQ, uint256 feeQ);\\n\\n    function getMergeForQ(uint256 minOutQ) external view returns (uint256 inB);\\n\\n    function canBeRemovedFromFund() external view returns (bool);\\n\\n    function create(\\n        address recipient,\\n        uint256 minOutQ,\\n        uint256 version\\n    ) external returns (uint256 outQ);\\n\\n    function redeem(\\n        address recipient,\\n        uint256 inQ,\\n        uint256 minUnderlying,\\n        uint256 version\\n    ) external returns (uint256 underlying);\\n\\n    function redeemAndUnwrap(\\n        address recipient,\\n        uint256 inQ,\\n        uint256 minUnderlying,\\n        uint256 version\\n    ) external returns (uint256 underlying);\\n\\n    function queueRedemption(\\n        address recipient,\\n        uint256 inQ,\\n        uint256 minUnderlying,\\n        uint256 version\\n    ) external returns (uint256 underlying, uint256 index);\\n\\n    function claimRedemptions(address account, uint256[] calldata indices)\\n        external\\n        returns (uint256 underlying);\\n\\n    function claimRedemptionsAndUnwrap(address account, uint256[] calldata indices)\\n        external\\n        returns (uint256 underlying);\\n\\n    function split(\\n        address recipient,\\n        uint256 inQ,\\n        uint256 version\\n    ) external returns (uint256 outB);\\n\\n    function merge(\\n        address recipient,\\n        uint256 inB,\\n        uint256 version\\n    ) external returns (uint256 outQ);\\n\\n    function settle(uint256 day) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITrancheIndexV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\n/// @notice Amounts of QUEEN, BISHOP and ROOK are sometimes stored in a `uint256[3]` array.\\n///         This contract defines index of each tranche in this array.\\n///\\n///         Solidity does not allow constants to be defined in interfaces. So this contract follows\\n///         the naming convention of interfaces but is implemented as an `abstract contract`.\\nabstract contract ITrancheIndexV2 {\\n    uint256 internal constant TRANCHE_Q = 0;\\n    uint256 internal constant TRANCHE_B = 1;\\n    uint256 internal constant TRANCHE_R = 2;\\n\\n    uint256 internal constant TRANCHE_COUNT = 3;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWrappedERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWrappedERC20 is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFundV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITwapOracleV2.sol\\\";\\n\\ninterface IFundV3 {\\n    /// @notice A linear transformation matrix that represents a rebalance.\\n    ///\\n    ///         ```\\n    ///             [        1        0        0 ]\\n    ///         R = [ ratioB2Q  ratioBR        0 ]\\n    ///             [ ratioR2Q        0  ratioBR ]\\n    ///         ```\\n    ///\\n    ///         Amounts of the three tranches `q`, `b` and `r` can be rebalanced by multiplying the matrix:\\n    ///\\n    ///         ```\\n    ///         [ q', b', r' ] = [ q, b, r ] * R\\n    ///         ```\\n    struct Rebalance {\\n        uint256 ratioB2Q;\\n        uint256 ratioR2Q;\\n        uint256 ratioBR;\\n        uint256 timestamp;\\n    }\\n\\n    function tokenUnderlying() external view returns (address);\\n\\n    function tokenQ() external view returns (address);\\n\\n    function tokenB() external view returns (address);\\n\\n    function tokenR() external view returns (address);\\n\\n    function tokenShare(uint256 tranche) external view returns (address);\\n\\n    function primaryMarket() external view returns (address);\\n\\n    function primaryMarketUpdateProposal() external view returns (address, uint256);\\n\\n    function strategy() external view returns (address);\\n\\n    function strategyUpdateProposal() external view returns (address, uint256);\\n\\n    function underlyingDecimalMultiplier() external view returns (uint256);\\n\\n    function twapOracle() external view returns (ITwapOracleV2);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function endOfDay(uint256 timestamp) external pure returns (uint256);\\n\\n    function trancheTotalSupply(uint256 tranche) external view returns (uint256);\\n\\n    function trancheBalanceOf(uint256 tranche, address account) external view returns (uint256);\\n\\n    function trancheAllBalanceOf(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function trancheBalanceVersion(address account) external view returns (uint256);\\n\\n    function trancheAllowance(\\n        uint256 tranche,\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function trancheAllowanceVersion(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function trancheTransfer(\\n        uint256 tranche,\\n        address recipient,\\n        uint256 amount,\\n        uint256 version\\n    ) external;\\n\\n    function trancheTransferFrom(\\n        uint256 tranche,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 version\\n    ) external;\\n\\n    function trancheApprove(\\n        uint256 tranche,\\n        address spender,\\n        uint256 amount,\\n        uint256 version\\n    ) external;\\n\\n    function getRebalanceSize() external view returns (uint256);\\n\\n    function getRebalance(uint256 index) external view returns (Rebalance memory);\\n\\n    function getRebalanceTimestamp(uint256 index) external view returns (uint256);\\n\\n    function currentDay() external view returns (uint256);\\n\\n    function splitRatio() external view returns (uint256);\\n\\n    function historicalSplitRatio(uint256 version) external view returns (uint256);\\n\\n    function fundActivityStartTime() external view returns (uint256);\\n\\n    function isFundActive(uint256 timestamp) external view returns (bool);\\n\\n    function getEquivalentTotalB() external view returns (uint256);\\n\\n    function getEquivalentTotalQ() external view returns (uint256);\\n\\n    function historicalEquivalentTotalB(uint256 timestamp) external view returns (uint256);\\n\\n    function historicalNavs(uint256 timestamp) external view returns (uint256 navB, uint256 navR);\\n\\n    function extrapolateNav(uint256 price)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function doRebalance(\\n        uint256 amountQ,\\n        uint256 amountB,\\n        uint256 amountR,\\n        uint256 index\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newAmountQ,\\n            uint256 newAmountB,\\n            uint256 newAmountR\\n        );\\n\\n    function batchRebalance(\\n        uint256 amountQ,\\n        uint256 amountB,\\n        uint256 amountR,\\n        uint256 fromIndex,\\n        uint256 toIndex\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newAmountQ,\\n            uint256 newAmountB,\\n            uint256 newAmountR\\n        );\\n\\n    function refreshBalance(address account, uint256 targetVersion) external;\\n\\n    function refreshAllowance(\\n        address owner,\\n        address spender,\\n        uint256 targetVersion\\n    ) external;\\n\\n    function primaryMarketMint(\\n        uint256 tranche,\\n        address account,\\n        uint256 amount,\\n        uint256 version\\n    ) external;\\n\\n    function primaryMarketBurn(\\n        uint256 tranche,\\n        address account,\\n        uint256 amount,\\n        uint256 version\\n    ) external;\\n\\n    function shareTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    function shareTransferFrom(\\n        address spender,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (uint256 newAllowance);\\n\\n    function shareIncreaseAllowance(\\n        address sender,\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (uint256 newAllowance);\\n\\n    function shareDecreaseAllowance(\\n        address sender,\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (uint256 newAllowance);\\n\\n    function shareApprove(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    function historicalUnderlying(uint256 timestamp) external view returns (uint256);\\n\\n    function getTotalUnderlying() external view returns (uint256);\\n\\n    function getStrategyUnderlying() external view returns (uint256);\\n\\n    function getTotalDebt() external view returns (uint256);\\n\\n    function transferToStrategy(uint256 amount) external;\\n\\n    function transferFromStrategy(uint256 amount) external;\\n\\n    function reportProfit(uint256 profit, uint256 performanceFee) external;\\n\\n    function reportLoss(uint256 loss) external;\\n\\n    function primaryMarketTransferUnderlying(\\n        address recipient,\\n        uint256 amount,\\n        uint256 fee\\n    ) external;\\n\\n    function primaryMarketAddDebt(uint256 amount, uint256 fee) external;\\n\\n    function primaryMarketPayDebt(uint256 amount) external;\\n\\n    event RebalanceTriggered(\\n        uint256 indexed index,\\n        uint256 indexed day,\\n        uint256 navSum,\\n        uint256 navB,\\n        uint256 navROrZero,\\n        uint256 ratioB2Q,\\n        uint256 ratioR2Q,\\n        uint256 ratioBR\\n    );\\n    event Settled(uint256 indexed day, uint256 navB, uint256 navR, uint256 interestRate);\\n    event InterestRateUpdated(uint256 baseInterestRate, uint256 floatingInterestRate);\\n    event BalancesRebalanced(\\n        address indexed account,\\n        uint256 version,\\n        uint256 balanceQ,\\n        uint256 balanceB,\\n        uint256 balanceR\\n    );\\n    event AllowancesRebalanced(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 version,\\n        uint256 allowanceQ,\\n        uint256 allowanceB,\\n        uint256 allowanceR\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITwapOracleV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"./ITwapOracle.sol\\\";\\n\\ninterface ITwapOracleV2 is ITwapOracle {\\n    function getLatest() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITwapOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.10 <0.8.0;\\n\\ninterface ITwapOracle {\\n    enum UpdateType {PRIMARY, SECONDARY, OWNER, CHAINLINK, UNISWAP_V2}\\n\\n    function getTwap(uint256 timestamp) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fund_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mergeFeeRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundCap_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outQ\",\"type\":\"uint256\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"FundCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMergeFeeRate\",\"type\":\"uint256\"}],\"name\":\"MergeFeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outQ\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inR\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeUnderlying\",\"type\":\"uint256\"}],\"name\":\"Merged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inQ\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"}],\"name\":\"RedemptionClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRedemptionFeeRate\",\"type\":\"uint256\"}],\"name\":\"RedemptionFeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newHead\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredUnderlying\",\"type\":\"uint256\"}],\"name\":\"RedemptionPopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"}],\"name\":\"RedemptionQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inQ\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outR\",\"type\":\"uint256\"}],\"name\":\"Split\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"canBeRemovedFromFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"claimRedemptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"claimRedemptionsAndUnwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutQ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outQ\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"contract IFundV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"}],\"name\":\"getCreation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outQ\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minOutQ\",\"type\":\"uint256\"}],\"name\":\"getCreationForQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inB\",\"type\":\"uint256\"}],\"name\":\"getMerge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outQ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeQ\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minOutQ\",\"type\":\"uint256\"}],\"name\":\"getMergeForQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewRedemptionQueueHead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxIterationCount\",\"type\":\"uint256\"}],\"name\":\"getQueuedRedemptions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inQ\",\"type\":\"uint256\"}],\"name\":\"getRedemption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minUnderlying\",\"type\":\"uint256\"}],\"name\":\"getRedemptionForUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inQ\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inQ\",\"type\":\"uint256\"}],\"name\":\"getSplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minOutB\",\"type\":\"uint256\"}],\"name\":\"getSplitForB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inQ\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"merge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outQ\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mergeFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"popRedemptionQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inQ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"queueRedemption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"queuedRedemptions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousPrefixSum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inQ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inQ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"redeemAndUnwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionQueueHead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionQueueTail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inQ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"split\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"updateFundCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMergeFeeRate\",\"type\":\"uint256\"}],\"name\":\"updateMergeFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRedemptionFeeRate\",\"type\":\"uint256\"}],\"name\":\"updateRedemptionFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PrimaryMarketV3", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002f40c245c66c5219e0615571a526c93883b456bb00000000000000000000000000000000000000000000000000071afd498d000000000000000000000000000000000000000000000000000000038d7ea4c68000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}