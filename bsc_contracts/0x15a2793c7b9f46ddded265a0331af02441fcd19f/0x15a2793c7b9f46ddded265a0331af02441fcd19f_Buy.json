{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nabstract contract IERC20 {\r\n    function balanceOf(address _owner) public view virtual returns (uint256 balance);\r\n    function transferFrom(address owner, address buyer, uint256 numTokens) public virtual returns (bool);\r\n    function transfer(address buyer, uint256 numTokens) public virtual returns (bool);\r\n}\r\n\r\nabstract contract RandomNumberConsumer {\r\n    function getRandomNumber() external virtual returns (bytes32 requestId);\r\n    function getRandoms() external view virtual returns (uint256 _r1, uint256 _r2, uint256 _r3, uint256 _r4, uint256 _r5, uint256 _r6, uint256 _r7, uint256 _r8);\r\n}\r\n\r\nabstract contract ICT {\r\n    function createToken(address _owner, string memory _name, string memory _class, string memory _syndicate, bool _isBoss,\r\n                            string memory _genAttr, string memory _genElem, uint16 _potentialMax) public virtual returns (uint256);\r\n    function levelUp(uint256 _fighter, uint8 _h, uint8 _a, uint8 _d, uint8 _s, uint8 _decPotentialMax) public virtual;\r\n}\r\n\r\ncontract Buy {\r\n    \r\n    bool public paused = false;\r\n    address public owner;\r\n    address public newContractOwner;\r\n    \r\n    uint256 public bossPrice;\r\n    uint256 public fighterPrice;\r\n    address public nftAddress;\r\n    address public paymentTokenAddress;\r\n    address public rncAddress;\r\n    address payable[] public distributionWallets;\r\n    mapping(address => uint8) public walletPercentage;\r\n\r\n    mapping (string => bool) public isBoss;\r\n    mapping (string => string) classFor;\r\n    mapping (string => string) syndicateFor;\r\n    mapping (string => uint16) potentialMaxFor;\r\n    mapping (string => mapping (string => uint8[])) public initialRanges;\r\n \r\n    event Pause();\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    event ClassRangesChanged(string class);\r\n    event NewAvatar(string name, bool isBoss, uint16 potentialMax);\r\n    \r\n    string[] genAttr = [\"Karate\", \"Taekwondo\", \"Muay Thai\", \"MMA\", \"Wrestling\"];\r\n    string[] elements = [\"Fire\", \"Water\", \"Earth\", \"Wind\", \"Thunder\"];\r\n \r\n    constructor (address _nftAddress, uint256 _bossPrice, uint256 _fighterPrice) {\r\n        owner = msg.sender;\r\n        rncAddress = 0x5b214ac028a0c7cd9EBCAf34AF4C20eBEFdC59dD;\r\n        \r\n        bossPrice = _bossPrice;\r\n        fighterPrice = _fighterPrice;\r\n        nftAddress = _nftAddress;\r\n    }\r\n \r\n    modifier ifNotPaused {\r\n        require(!paused);\r\n        _;\r\n    }\r\n \r\n    modifier onlyContractOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n \r\n    function transferOwnership(address _newOwner) external onlyContractOwner {\r\n        require(_newOwner != address(0));\r\n        newContractOwner = _newOwner;\r\n    }\r\n \r\n    function acceptOwnership() external {\r\n        require(msg.sender == newContractOwner);\r\n        emit OwnershipTransferred(owner, newContractOwner);\r\n        owner = newContractOwner;\r\n        newContractOwner = address(0);\r\n    }\r\n \r\n    function setPause(bool _paused) external onlyContractOwner {\r\n        paused = _paused;\r\n        if (paused) {\r\n            emit Pause();\r\n        }\r\n    }\r\n    \r\n    //////////// RANDOM AND ATTR GENERATING //////////////////\r\n \r\n    function _seed(uint8 _nonce) private view returns (uint256 seed) {\r\n        RandomNumberConsumer rnc = RandomNumberConsumer(rncAddress);\r\n        (uint256 r1, uint256 r2, uint256 r3, uint256 r4, uint256 r5, uint256 r6, uint256 r7, uint256 r8) = rnc.getRandoms();\r\n        if (_nonce == 1){\r\n            return r1;\r\n        } else if (_nonce == 2){\r\n            return r2;\r\n        } else if (_nonce == 3){\r\n            return r3;\r\n        } else if (_nonce == 4){\r\n            return r4;\r\n        } else if (_nonce == 5){\r\n            return r5;\r\n        } else if (_nonce == 6){\r\n            return r6;\r\n        } else if (_nonce == 7){\r\n            return r7;\r\n        } else if (_nonce == 8){\r\n            return r8;\r\n        }\r\n    }\r\n    \r\n    function _random(uint8[] memory _range, uint8 _nonce) private view returns (uint8) {\r\n        uint8 _min = _range[0];\r\n        uint8 _max = _range[1];\r\n        require(_max > _min);\r\n        uint8 diff = _max - _min;\r\n        return _min + uint8((_seed(_nonce) + _nonce) % (diff + 1));\r\n    }\r\n    \r\n    function _random(uint8 _max, uint8 _nonce) private view returns (uint8) {\r\n        return uint8((_seed(_nonce) + _nonce) % (_max + 1));\r\n    }\r\n    \r\n    function addAvatar(string memory _name, bool _isBoss, string memory _class, string memory _syndicate, uint16 _potentialMax) public onlyContractOwner ifNotPaused {\r\n        isBoss[_name] = _isBoss;\r\n        classFor[_name] = _class;\r\n        syndicateFor[_name] = _syndicate;\r\n        potentialMaxFor[_name] = _potentialMax;\r\n        \r\n        emit NewAvatar(_name, _isBoss, _potentialMax);\r\n    }\r\n    \r\n    function setRanges(string memory _rangeId, uint8 _hpMin, uint8 _hpMax, uint8 _attackMin, uint8 _attackMax,\r\n        uint8 _defenseMin, uint8 _defenseMax, uint8 _agilityMin, uint8 _agilityMax) public onlyContractOwner ifNotPaused {\r\n        initialRanges[_rangeId][\"hp\"] = [_hpMin, _hpMax];\r\n        initialRanges[_rangeId][\"attack\"] = [_attackMin, _attackMax];\r\n        initialRanges[_rangeId][\"defense\"] = [_defenseMin, _defenseMax];\r\n        initialRanges[_rangeId][\"agility\"] = [_agilityMin, _agilityMax];\r\n        \r\n        emit ClassRangesChanged(_rangeId);\r\n    }\r\n    \r\n    ////////////////// BUY CONTRACT ////////////////////\r\n \r\n    function setPrices(uint256 _fighterPrice, uint256 _bossPrice) external onlyContractOwner {\r\n        fighterPrice = _fighterPrice;\r\n        bossPrice = _bossPrice;\r\n    }\r\n    \r\n    function setPaymentToken(address _tokenAddress) external onlyContractOwner {\r\n        paymentTokenAddress = _tokenAddress;\r\n    }\r\n    \r\n    function setNFTAddress(address _nftAddress) external onlyContractOwner {\r\n        nftAddress = _nftAddress;\r\n    }\r\n    \r\n    function setRandomGenerator(address _generatorAddress) external onlyContractOwner {\r\n        rncAddress = _generatorAddress;\r\n    }\r\n \r\n    function addWallet(uint8 _percentage, address payable _wallet) external onlyContractOwner {\r\n        distributionWallets.push(_wallet);\r\n        walletPercentage[_wallet] = _percentage;\r\n    }\r\n \r\n    function getWallet(uint8 _index) external view onlyContractOwner returns (address _wallet, uint8 _percentage) {\r\n        _wallet = distributionWallets[_index];\r\n        _percentage = walletPercentage[_wallet];\r\n    }\r\n \r\n    function removeWallet(uint8 _index) external onlyContractOwner {\r\n        address wallet = address(distributionWallets[_index]);\r\n        delete distributionWallets[_index];\r\n        delete walletPercentage[wallet];\r\n    }\r\n    \r\n    function _firstLevelUp(uint256 _newFighterId, string memory _name) internal {\r\n        ICT nft = ICT(nftAddress);\r\n        string memory class = classFor[_name];\r\n        string memory syndicate = syndicateFor[_name];\r\n        string memory rangeId = isBoss[_name] ? syndicate : class;\r\n        uint8 _hp = _random(initialRanges[rangeId][\"hp\"], 0);\r\n        uint8 _attack = _random(initialRanges[rangeId][\"attack\"], 1);\r\n        uint8 _defense = _random(initialRanges[rangeId][\"defense\"], 2);\r\n        uint8 _agility = _random(initialRanges[rangeId][\"agility\"], 3);\r\n        nft.levelUp(_newFighterId, _hp, _attack, _defense, _agility, 0);\r\n    }\r\n \r\n    function buyFighter(string memory _name) external ifNotPaused { \r\n        //accept payment\r\n        IERC20 token = IERC20(paymentTokenAddress);\r\n        uint256 _price = isBoss[_name] ? bossPrice : fighterPrice;\r\n        token.transferFrom(msg.sender, address(this), _price);\r\n        \r\n        // regenerate random seed\r\n        RandomNumberConsumer rnc = RandomNumberConsumer(rncAddress);\r\n        rnc.getRandomNumber();\r\n        \r\n        // mint NFT\r\n        ICT nft = ICT(nftAddress);\r\n        uint256 newFighterId = nft.createToken(msg.sender, _name, classFor[_name], syndicateFor[_name], isBoss[_name], \r\n                                                genAttr[_random(4, 0)], \r\n                                                isBoss[_name] ? elements[_random(4, 1)] : \"\", \r\n                                                potentialMaxFor[_name]);\r\n        _firstLevelUp(newFighterId, _name);\r\n\r\n        //distribute to wallets\r\n        uint256 i;\r\n        for (i = 0; i < distributionWallets.length; i++) {\r\n            address payable _wallet = distributionWallets[i];\r\n            token.transfer(address(_wallet), uint256(_price * uint256(walletPercentage[address(_wallet)]) / 100));\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n        \r\n    }\r\n    \r\n    fallback() external payable {\r\n        \r\n    }\r\n    \r\n    function withdrawBalance(uint256 _amount) external onlyContractOwner {\r\n        payable(owner).transfer(_amount);\r\n    }\r\n    \r\n    function withdrawTokenBalance(address token_address, uint256 _amount) external onlyContractOwner {\r\n        IERC20 token = IERC20(token_address);\r\n        token.transfer(owner, _amount);\r\n    }\r\n   \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bossPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fighterPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"}],\"name\":\"ClassRangesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBoss\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"potentialMax\",\"type\":\"uint16\"}],\"name\":\"NewAvatar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isBoss\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_syndicate\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"_potentialMax\",\"type\":\"uint16\"}],\"name\":\"addAvatar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_percentage\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"addWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bossPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"buyFighter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributionWallets\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fighterPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"getWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_percentage\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initialRanges\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"isBoss\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newContractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"removeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rncAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fighterPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bossPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_generatorAddress\",\"type\":\"address\"}],\"name\":\"setRandomGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_rangeId\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_hpMin\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_hpMax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_attackMin\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_attackMax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_defenseMin\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_defenseMax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_agilityMin\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_agilityMax\",\"type\":\"uint8\"}],\"name\":\"setRanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletPercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Buy", "CompilerVersion": "v0.7.2+commit.51b20bc0", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000cdbd0b819a0634878c89c055d9062e931ac42f690000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000006f05b59d3b20000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e4580e6bb4dc3b23c181f3f2da9fc352f6a3e5cb952aead7073096b048365dc6"}