{"SourceCode": "{\"Address.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n\\nlibrary Address {\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n}\\n\"},\"IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IERC20 {\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n    \\n    /**\\n     * @dev Returns the number of decimal places\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"INativeSurge.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * Exempt Surge Interface\\n */\\ninterface INativeSurge is IERC20 {\\n    function sell(uint256 amount) external;\\n    function getUnderlyingAsset() external returns(address);\\n}\\n\"},\"IUniswapV2Router02.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"},\"ReentrantGuard.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n    uint256 private _status;\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    modifier nonReentrant() {\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n        _status = _ENTERED;\\n        _;\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"SurgeBTC.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./IUniswapV2Router02.sol\\\";\\nimport \\\"./ReentrantGuard.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./INativeSurge.sol\\\";\\nimport \\\"./XTokenManagerDatabase.sol\\\";\\n\\n/**\\n * Contract: Surge Token\\n * Developed By: Markymark (aka DeFi Mark)\\n *\\n * Liquidity-less Token, DEX built into Contract\\n * Send BNB to contract and it mints Surge Token to your receive Address\\n * Sell this token by interacting with contract directly\\n * Price is calculated as a ratio between Total Supply and underlying asset in Contract\\n *\\n */\\ncontract SurgeToken is ReentrancyGuard, INativeSurge {\\n    \\n    using SafeMath for uint256;\\n    using SafeMath for uint8;\\n    using Address for address;\\n\\n    // token data\\n    string public _name = \\\"SurgeToken\\\";\\n    string public _symbol = \\\"S_Ticker\\\";\\n    uint8 public _decimals = 0;\\n    \\n    // 1 Billion Total Supply\\n    uint256 _totalSupply = 1 * 10**9;\\n    \\n    // balances\\n    mapping (address =\\u003e uint256) _balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) _allowances;\\n\\n    // Fees\\n    uint256 public sellFee;\\n    uint256 public buyFee;\\n    uint256 public transferFee;\\n    \\n    // Emergency Mode Only\\n    bool public emergencyModeEnabled;\\n    \\n    // Pegged Asset\\n    address public immutable _token;\\n    \\n    // PCS Router\\n    IUniswapV2Router02 public router; \\n\\n    // Surge Fund Data\\n    bool public allowFunding;\\n    uint256 public fundingBuySellDenominator = 100;\\n    uint256 public fundingTransferDenominator = 4;\\n    address public surgeFund = 0x95c8eE08b40107f5bd70c28c4Fd96341c8eaD9c7;\\n    \\n    // Garbage Collector\\n    uint256 garbageCollectorThreshold = 10**10;\\n    \\n    // path from BNB -\\u003e _token\\n    address[] path;\\n    \\n    // paths for checking balances\\n    address[] tokenToBNB;\\n    address[] bnbToBusd;\\n    \\n    // owner\\n    address _owner;\\n    \\n    // Activates Surge Token Trading\\n    bool Surge_Token_Activated;\\n    \\n    // xToken Database\\n    XTokenManagerDatabase db;\\n    \\n    // slippage for purchasing _token\\n    uint256 _tokenSlippage;\\n    \\n    modifier onlyOwner() {\\n        require(msg.sender == _owner, \\u0027Only Owner Function\\u0027);\\n        _;\\n    }\\n\\n    // initialize some stuff\\n    constructor ( address peggedToken, string memory tokenName, string memory tokenSymbol, uint8 tokenDecimals, uint256 _buyFee, uint256 _sellFee, uint256 _transferFee\\n    ) {\\n        // ensure arguments meet criteria\\n        require(_buyFee \\u003c= 100 \\u0026\\u0026 _sellFee \\u003c= 100 \\u0026\\u0026 _transferFee \\u003c= 100 \\u0026\\u0026 _buyFee \\u003e= 50 \\u0026\\u0026 _sellFee \\u003e= 50 \\u0026\\u0026 _transferFee \\u003e= 50, \\u0027Invalid Fees, Must Range From 50 - 100\\u0027);\\n        require(peggedToken != address(0), \\u0027cannot peg to zero address\\u0027);\\n        // underlying asset\\n        _token = peggedToken;\\n        // token stats\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n        _decimals = tokenDecimals;\\n        // fees\\n        buyFee = _buyFee;\\n        sellFee = _sellFee;\\n        transferFee = _transferFee;\\n        // initialize Pancakeswap Router\\n        router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n        db = XTokenManagerDatabase(0xA2557743912d998d263c4BAFcef2839EF608B509);\\n        // ownership\\n        _owner = msg.sender;\\n        // initialize pcs path for swapping\\n        path = new address[](2);\\n        path[0] = router.WETH();\\n        path[1] = peggedToken;\\n        // initalize other paths for balance checking\\n        tokenToBNB = new address[](2);\\n        bnbToBusd = new address[](2);\\n        tokenToBNB[0] = peggedToken;\\n        tokenToBNB[1] = router.WETH();\\n        bnbToBusd[0] = router.WETH();\\n        bnbToBusd[1] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n        // slippage\\n        _tokenSlippage = 995;\\n        // allot starting 1 billion to contract to be Garbage Collected\\n        _balances[address(this)] = _totalSupply;\\n        emit Transfer(address(0), address(this), _totalSupply);\\n    }\\n\\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\n    \\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n  \\n    /** Transfer Function */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        return _transferFrom(msg.sender, recipient, amount);\\n    }\\n\\n    /** Transfer Function */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if (isXTokenManager(msg.sender)) {\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \\u0027Insufficient Allowance\\u0027);\\n        } else {\\n            require(sender == msg.sender, \\u0027Only SurgeToken Owner Can Transfer Funds\\u0027);\\n        }\\n        \\n        return _transferFrom(sender, recipient, amount);\\n    }\\n    \\n    /** Internal Transfer */\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        // make standard checks\\n        require(recipient != address(0) \\u0026\\u0026 sender != address(0), \\\"BEP20: transfer to the zero address\\\");\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\n        // track price change\\n        uint256 oldPrice = calculatePrice();\\n        // subtract form sender, give to receiver, burn the fee\\n        uint256 tAmount = amount.mul(transferFee).div(10**2);\\n        uint256 tax = amount.sub(tAmount);\\n        // subtract from sender\\n        _balances[sender] = _balances[sender].sub(amount, \\\"Insufficient Balance\\\");\\n        // give reduced amount to receiver\\n        _balances[recipient] = _balances[recipient].add(tAmount);\\n        \\n        if (allowFunding \\u0026\\u0026 sender != surgeFund \\u0026\\u0026 recipient != surgeFund) {\\n            // allocate percentage of the tax for Surge Fund\\n            uint256 allocation = tax.div(fundingTransferDenominator);\\n            // how much are we removing from total supply\\n            tax = tax.sub(allocation);\\n            // allocate funding to Surge Fund\\n            _balances[surgeFund] = _balances[surgeFund].add(allocation);\\n            // Emit Donation To Surge Fund\\n            emit Transfer(sender, surgeFund, allocation);\\n        }\\n        // burn the tax\\n        _totalSupply = _totalSupply.sub(tax);\\n        // Price difference\\n        uint256 currentPrice = calculatePrice();\\n        // Require Current Price \\u003e= Last Price\\n        require(currentPrice \\u003e= oldPrice, \\u0027Price Must Rise For Transaction To Conclude\\u0027);\\n        // Transfer Event\\n        emit Transfer(sender, recipient, tAmount);\\n        // Emit The Price Change\\n        emit PriceChange(oldPrice, currentPrice, _totalSupply);\\n        return true;\\n    }\\n    \\n    /** Purchases SURGE Tokens and Deposits Them in Sender\\u0027s Address */\\n    function purchase() private nonReentrant returns (bool) {\\n        // make sure emergency mode is disabled\\n        require((!emergencyModeEnabled \\u0026\\u0026 Surge_Token_Activated) || _owner == msg.sender, \\u0027EMERGENCY MODE ENABLED\\u0027);\\n        // calculate price change\\n        uint256 oldPrice = calculatePrice();\\n        // previous amount of Tokens before we received any\\n        uint256 prevTokenAmount = IERC20(_token).balanceOf(address(this));\\n        // minimum output amount\\n        uint256 minOut = router.getAmountsOut(msg.value, path)[1].mul(_tokenSlippage).div(1000);\\n        // buy Token with the BNB received\\n        try router.swapExactETHForTokens{value: msg.value}(\\n            minOut,\\n            path,\\n            address(this),\\n            block.timestamp.add(30)\\n        ) {} catch {revert(\\u0027Failure On Token Purchase\\u0027);}\\n        // balance of tokens after swap\\n        uint256 currentTokenAmount = IERC20(_token).balanceOf(address(this));\\n        // number of Tokens we have purchased\\n        uint256 difference = currentTokenAmount.sub(prevTokenAmount);\\n        // if this is the first purchase, use new amount\\n        prevTokenAmount = prevTokenAmount == 0 ? currentTokenAmount : prevTokenAmount;\\n        // make sure total supply is greater than zero\\n        uint256 calculatedTotalSupply = _totalSupply == 0 ? _totalSupply.add(1) : _totalSupply;\\n        // find the number of tokens we should mint to keep up with the current price\\n        uint256 nShouldPurchase = calculatedTotalSupply.mul(difference).div(prevTokenAmount);\\n        // apply our spread to tokens to inflate price relative to total supply\\n        uint256 tokensToSend = nShouldPurchase.mul(buyFee).div(10**2);\\n        // revert if under 1\\n        require(tokensToSend \\u003e 0, \\u0027Must Purchase At Least One Surge\\u0027);\\n\\n        if (allowFunding \\u0026\\u0026 msg.sender != surgeFund) {\\n            // allocate tokens to go to the Surge Fund\\n            uint256 allocation = tokensToSend.div(fundingBuySellDenominator);\\n            // the rest go to purchaser\\n            tokensToSend = tokensToSend.sub(allocation);\\n            // mint to Fund\\n            mint(surgeFund, allocation);\\n            // Tell Blockchain\\n            emit Transfer(address(this), surgeFund, allocation);\\n        }\\n        \\n        // mint to Buyer\\n        mint(msg.sender, tokensToSend);\\n        // Calculate Price After Transaction\\n        uint256 currentPrice = calculatePrice();\\n        // Require Current Price \\u003e= Last Price\\n        require(currentPrice \\u003e= oldPrice, \\u0027Price Must Rise For Transaction To Conclude\\u0027);\\n        // Emit Transfer\\n        emit Transfer(address(this), msg.sender, tokensToSend);\\n        // Emit The Price Change\\n        emit PriceChange(oldPrice, currentPrice, _totalSupply);\\n        return true;\\n    }\\n    \\n    /** Sells SURGE Tokens And Deposits the Underlying Asset into Seller\\u0027s Address */\\n    function sell(uint256 tokenAmount) external nonReentrant override {\\n        // calculate price change\\n        uint256 oldPrice = calculatePrice();\\n        // calculate the sell fee from this transaction\\n        uint256 tokensToSwap = tokenAmount.mul(sellFee).div(10**2);\\n        // subtract full amount from sender\\n        _balances[msg.sender] = _balances[msg.sender].sub(tokenAmount, \\u0027Insufficient Balance\\u0027);\\n        // number of underlying asset tokens to claim\\n        uint256 amountToken;\\n\\n        if (allowFunding \\u0026\\u0026 msg.sender != surgeFund) {\\n            // allocate percentage to Surge Fund\\n            uint256 allocation = tokensToSwap.div(fundingBuySellDenominator);\\n            // subtract allocation from tokensToSwap\\n            tokensToSwap = tokensToSwap.sub(allocation);\\n            // burn tokenAmount - allocation\\n            tokenAmount = tokenAmount.sub(allocation);\\n            // Allocate Tokens To Surge Fund\\n            _balances[surgeFund] = _balances[surgeFund].add(allocation);\\n            // Tell Blockchain\\n            emit Transfer(msg.sender, surgeFund, allocation);\\n        }\\n        \\n        // how many Tokens are these tokens worth?\\n        amountToken = tokensToSwap.mul(calculatePrice());\\n        // Remove tokens from supply\\n        _totalSupply = _totalSupply.sub(tokenAmount);\\n        // send Tokens to Seller\\n        bool successful = IERC20(_token).transfer(msg.sender, amountToken);\\n        // ensure Tokens were delivered\\n        require(successful, \\u0027Unable to Complete Transfer of Tokens\\u0027);\\n        // get current price\\n        uint256 currentPrice = calculatePrice();\\n        // Require Current Price \\u003e= Last Price\\n        require(currentPrice \\u003e= oldPrice, \\u0027Price Must Rise For Transaction To Conclude\\u0027);\\n        // Emit Transfer\\n        emit Transfer(msg.sender, address(this), tokenAmount);\\n        // Emit The Price Change\\n        emit PriceChange(oldPrice, currentPrice, _totalSupply);\\n    }\\n    \\n    /** Returns the Current Price of the Token */\\n    function calculatePrice() public view returns (uint256) {\\n        uint256 tokenBalance = IERC20(_token).balanceOf(address(this));\\n        return tokenBalance.div(_totalSupply);\\n    }\\n\\n    /** Calculates the price of this token in relation to its underlying asset */\\n    function calculatePriceInUnderlyingAsset() public view returns(uint256) {\\n        return calculatePrice();\\n    }\\n\\n    /** Returns the value of your holdings before the sell fee */\\n    function getValueOfHoldings(address holder) public view returns(uint256) {\\n        return _balances[holder].mul(calculatePrice());\\n    }\\n\\n    /** Returns the value of your holdings after the sell fee */\\n    function getValueOfHoldingsAfterTax(address holder) public view returns(uint256) {\\n        uint256 holdings = _balances[holder].mul(calculatePrice());\\n        return holdings.mul(sellFee).div(10**2);\\n    }\\n    \\n    /** List all fees */\\n    function getFees() public view returns(uint256, uint256, uint256) {\\n        return (buyFee,sellFee,transferFee);\\n    }\\n\\n    /** Returns The Address of the Underlying Asset */\\n    function getUnderlyingAsset() external override view returns(address) {\\n        return _token;\\n    }\\n\\n    /** Returns Value of Holdings in USD */\\n    function getValueOfHoldingsInUSD(address holder) public view returns(uint256) {\\n        if (_balances[holder] == 0) return 0;\\n        uint256 assetInBNB = router.getAmountsOut(_balances[holder].mul(calculatePrice()), tokenToBNB)[1];\\n        return router.getAmountsOut(assetInBNB, bnbToBusd)[1]; \\n    }\\n    \\n    /** Returns Value of Underlying Asset in USD */\\n    function getValueOfUnderlyingAssetInUSD() public view returns(uint256) {\\n        uint256 assetInBNB = router.getAmountsOut(10**18, tokenToBNB)[1];\\n        return router.getAmountsOut(assetInBNB, bnbToBusd)[1];\\n    }\\n    \\n    /** Allows A User To Erase Their Holdings From Supply */\\n    function eraseHoldings() external {\\n        // get balance of caller\\n        uint256 bal = _balances[msg.sender];\\n        // require balance is greater than zero\\n        require(bal \\u003e 0, \\u0027cannot erase zero holdings\\u0027);\\n        // Track Change In Price\\n        uint256 oldPrice = calculatePrice();\\n        // remove tokens from sender\\n        _balances[msg.sender] = 0;\\n        // remove tokens from supply\\n        _totalSupply = _totalSupply.sub(bal, \\u0027total supply cannot be negative\\u0027);\\n        // Emit Price Difference\\n        emit PriceChange(oldPrice, calculatePrice(), _totalSupply);\\n        // Emit Call\\n        emit ErasedHoldings(msg.sender, bal);\\n    }\\n    \\n    /** Enables Trading For This Surge Token, This Action Cannot be Undone */\\n    function ActivateSurgeToken() external onlyOwner {\\n        require(!Surge_Token_Activated, \\u0027Already Activated Token\\u0027);\\n        Surge_Token_Activated = true;\\n        allowFunding = true;\\n        emit SurgeTokenActivated();\\n    }\\n    \\n   /*\\n    * Fail Safe Incase Withdrawal is Absolutely Necessary\\n    * Allows Users To Withdraw 100% Of The Underlying Asset\\n    * This will disable the ability to purchase Surge Tokens\\n    * This Action Cannot Be Undone\\n    */\\n    function enableEmergencyMode() external onlyOwner {\\n        require(!emergencyModeEnabled, \\u0027Emergency Mode Already Enabled\\u0027);\\n        // disable fees\\n        sellFee = 100;\\n        transferFee = 100;\\n        buyFee = 0;\\n        // disable purchases\\n        emergencyModeEnabled = true;\\n        // disable funding\\n        allowFunding = false;\\n        // Let Everyone Know\\n        emit EmergencyModeEnabled();\\n    }\\n    \\n    /** Incase Pancakeswap Upgrades To V3 */\\n    function changePancakeswapRouterAddress(address newPCSAddress) external onlyOwner {\\n        router = IUniswapV2Router02(newPCSAddress);\\n        path[0] = router.WETH();\\n        tokenToBNB[1] = router.WETH();\\n        bnbToBusd[0] = router.WETH();\\n        emit PancakeswapRouterUpdated(newPCSAddress);\\n    }\\n\\n    /** Disables The Surge Relief Funds - only to be called once the damages have been repaid */\\n    function disableFunding() external onlyOwner {\\n        require(allowFunding, \\u0027Funding already disabled\\u0027);\\n        allowFunding = false;\\n        emit FundingDisabled();\\n    }\\n    \\n    /** Disables The Surge Relief Funds - only to be called once the damages have been repaid */\\n    function enableFunding() external onlyOwner {\\n        require(!allowFunding, \\u0027Funding already enabled\\u0027);\\n        allowFunding = true;\\n        emit FundingEnabled();\\n    }\\n    \\n    /** Changes The Fees Associated With Funding */\\n    function changeFundingValues(uint256 newBuySellDenominator, uint256 newTransferDenominator) external onlyOwner {\\n        require(newBuySellDenominator \\u003e= 80, \\u0027BuySell Tax Too High!!\\u0027);\\n        require(newTransferDenominator \\u003e= 3, \\u0027Transfer Tax Too High!!\\u0027);\\n        fundingBuySellDenominator = newBuySellDenominator;\\n        fundingTransferDenominator = newTransferDenominator;\\n        emit FundingValuesChanged(newBuySellDenominator, newTransferDenominator);\\n    }\\n\\n    /** Change The Address For The Charity or Fund That Surge Allocates Funding Tax To */\\n    function swapFundAddress(address newFundReceiver) external onlyOwner {\\n        surgeFund = newFundReceiver;\\n        emit SwappedFundReceiver(newFundReceiver);\\n    }\\n    \\n    /** Change The Address For The Charity or Fund That Surge Allocates Funding Tax To */\\n    function setMinimumTokenSlippage(uint256 newSlippage) external onlyOwner {\\n        require(newSlippage \\u003c= 1000);\\n        _tokenSlippage = newSlippage;\\n        emit SetMinimumTokenSlippage(newSlippage);\\n    }\\n    \\n    /** Updates The Threshold To Trigger The Garbage Collector */\\n    function changeGarbageCollectorThreshold(uint256 garbageThreshold) external onlyOwner {\\n        require(garbageThreshold \\u003e 0 \\u0026\\u0026 garbageThreshold \\u003c= 10**12, \\u0027invalid threshold\\u0027);\\n        garbageCollectorThreshold = garbageThreshold;\\n        emit UpdatedGarbageCollectorThreshold(garbageThreshold);\\n    }\\n    \\n    /** Mints Tokens to the Receivers Address */\\n    function mint(address receiver, uint amount) private {\\n        _balances[receiver] = _balances[receiver].add(amount);\\n        _totalSupply = _totalSupply.add(amount);\\n    }\\n\\n    /** Make Sure there\\u0027s no Native Tokens in contract */\\n    function checkGarbageCollector() internal {\\n        uint256 bal = _balances[address(this)];\\n        if (bal \\u003e= garbageCollectorThreshold) {\\n            // Track Change In Price\\n            uint256 oldPrice = calculatePrice();\\n            // destroy token balance inside contract\\n            _balances[address(this)] = 0;\\n            // remove tokens from supply\\n            _totalSupply = _totalSupply.sub(bal, \\u0027total supply cannot be negative\\u0027);\\n            // Emit Call\\n            emit GarbageCollected(bal);\\n            // Emit Price Difference\\n            emit PriceChange(oldPrice, calculatePrice(), _totalSupply);\\n        }\\n    }\\n    \\n    /** Returns true if manager is a registered xTokenManager */\\n    function isXTokenManager(address manager) public view returns (bool) {\\n        return db.getIsXTokenManager(manager);\\n    }\\n    \\n    function upgradeXTokenManagerDatabase(address newDatabase) external onlyOwner {\\n        db = XTokenManagerDatabase(newDatabase);\\n        emit UpgradeXTokenManagerDatabase(newDatabase);\\n    }\\n    \\n    /** Transfers Ownership To Another User */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        _owner = newOwner;\\n        emit TransferOwnership(newOwner);\\n    }\\n    \\n    /** Transfers Ownership To Zero Address */\\n    function renounceOwnership() external onlyOwner {\\n        _owner = address(0);\\n        emit TransferOwnership(address(0));\\n    }\\n    \\n    /** Mint Tokens to Buyer */\\n    receive() external payable {\\n        checkGarbageCollector();\\n        purchase();\\n    }\\n    \\n    // EVENTS\\n    event PriceChange(uint256 previousPrice, uint256 currentPrice, uint256 totalSupply);\\n    event FundingValuesChanged(uint256 buySellDenominator, uint256 transferDenominator);\\n    event ErasedHoldings(address who, uint256 amountTokensErased);\\n    event UpdatedGarbageCollectorThreshold(uint256 newThreshold);\\n    event UpgradeXTokenManagerDatabase(address newDatabase);\\n    event GarbageCollected(uint256 amountTokensErased);\\n    event SwappedFundReceiver(address newFundReceiver);\\n    event SetMinimumTokenSlippage(uint256 newSlippage);\\n    event PancakeswapRouterUpdated(address newRouter);\\n    event TransferOwnership(address newOwner);\\n    event EmergencyModeEnabled();\\n    event SurgeTokenActivated();\\n    event FundingDisabled();\\n    event FundingEnabled();\\n    \\n}\\n\"},\"XTokenManagerDatabase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ncontract XTokenManagerDatabase {\\n\\n    address _owner;\\n\\n    mapping ( address =\\u003e bool ) isXTokenManager;\\n\\n    mapping ( address =\\u003e bool ) isVerifiedToken;\\n\\n    modifier onlyOwner() {require(_owner == msg.sender, \\u0027Only Owner Function\\u0027); _;}\\n\\n    constructor() {\\n        _owner = msg.sender;\\n    }\\n\\n\\n    /** Allows Approved Manager To Call TransferFrom */\\n    function setIsXTokenManager(address manager, bool isManager) external onlyOwner {\\n        isXTokenManager[manager] = isManager;\\n        emit SetXTokenManager(manager, isManager);\\n    }\\n\\n    function verifyToken(address token, bool isVerified) external onlyOwner {\\n        isVerifiedToken[token] = isVerified;\\n    }\\n\\n    function tokenIsVerified(address token) external view returns (bool) {\\n        return isVerifiedToken[token];\\n    }\\n\\n    /** Returns true if manager is a registered xTokenManager */\\n    function getIsXTokenManager(address manager) external view returns (bool) {\\n        return isXTokenManager[manager];\\n    }\\n\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        _owner = newOwner;\\n    }\\n\\n    // EVENTS\\n    event SetXTokenManager(address manager, bool isManager);\\n\\n\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"peggedToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyModeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokensErased\",\"type\":\"uint256\"}],\"name\":\"ErasedHoldings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FundingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FundingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buySellDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferDenominator\",\"type\":\"uint256\"}],\"name\":\"FundingValuesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokensErased\",\"type\":\"uint256\"}],\"name\":\"GarbageCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"PancakeswapRouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"PriceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSlippage\",\"type\":\"uint256\"}],\"name\":\"SetMinimumTokenSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SurgeTokenActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFundReceiver\",\"type\":\"address\"}],\"name\":\"SwappedFundReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedGarbageCollectorThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDatabase\",\"type\":\"address\"}],\"name\":\"UpgradeXTokenManagerDatabase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ActivateSurgeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowFunding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculatePriceInUnderlyingAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuySellDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTransferDenominator\",\"type\":\"uint256\"}],\"name\":\"changeFundingValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"garbageThreshold\",\"type\":\"uint256\"}],\"name\":\"changeGarbageCollectorThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPCSAddress\",\"type\":\"address\"}],\"name\":\"changePancakeswapRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyModeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableEmergencyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eraseHoldings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingBuySellDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingTransferDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getValueOfHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getValueOfHoldingsAfterTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getValueOfHoldingsInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValueOfUnderlyingAssetInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"isXTokenManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSlippage\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surgeFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFundReceiver\",\"type\":\"address\"}],\"name\":\"swapFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDatabase\",\"type\":\"address\"}],\"name\":\"upgradeXTokenManagerDatabase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SurgeToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000003ee2200efb3400fabb9aacf31297cbdd1d435d4700000000000000000000000000000000000000000000000000000000000000eersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f6843c2839c75e3bb26090afd820a6246f2c16d8928558e8be93748e7d48865f"}