{"SourceCode": "{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function transferPrebitsContract(address from, address to, uint256 value) external;\\n\\n}\"},\"Ownable.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.19;\\n\\n\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler\\u0027s built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c \\u003c a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b \\u003e a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003c= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\"},\"Trading.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\u0027./Ownable.sol\\u0027;\\nimport \\u0027./SafeMath.sol\\u0027;\\nimport \\u0027./IERC20.sol\\u0027;\\n\\n\\n// Interfaces\\n\\ninterface IPrebitReferrals {\\n    function generateReferralCode(uint256 _parentCode) external;\\n\\n    function generateReferralCodeWithContract(\\n        uint256 _parentCode,\\n        address _user\\n    ) external;\\n\\n    function userReferralCode(address _user)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function referralCodeToAddress(uint256 _referralCode)\\n        external\\n        view\\n        returns (address);\\n\\n    function userReferralCodeCheck(address _user) external view returns (bool);\\n\\n    function userReferralCodeToAddress(uint256 _code)\\n        external\\n        view\\n        returns (address);\\n\\n    function getUserTparent(address _user) external view returns (address);\\n\\n    function getUserParent(address _user) external view returns (address);\\n\\n    function isContractAllowed(address _contractAddress)\\n        external\\n        view\\n        returns (bool);\\n}\\n\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements: \\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\\n\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There\\u0027s no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance \\u003c amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance \\u003c value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 \\u0026\\u0026 target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn\\u0027t, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length \\u003e 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``\\u0027s tokens,\\n     * given ``owner``\\u0027s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``\\u0027s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``\\u0027s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\\n\\n\\ncontract PrebitTrading is Ownable, Pausable, ReentrancyGuard {\\n    \\n    using SafeMath for uint256;\\n  // Token used for purchasing \\n     IERC20 public payToken;\\n   \\n    IPrebitReferrals public referralContract;\\n  \\n    bool public genesisLockOnce = false;\\n    bool public genesisStartOnce = false;\\n\\n    address public operatorAddress; // address of the operator\\n    address public treasuryAddress;\\n    uint256 public intervalSeconds=300; // interval in seconds between two prediction rounds\\n\\n    uint256 public minPosition; // minimum position \\n    uint256 public treasuryFee=3; \\n    uint256 public percentReferralsLv1 = 2;\\n    uint256 public percentReferralsLv2 = 1;\\n    uint256 public potPercent=94; // \\n    \\n    uint256 public treasuryAmount; // treasury amount that was not claimed\\n    address[] public treasuryWallets;\\n    uint256[] public treasuryPercentages;\\n\\n    uint256 public currentEpoch; // current epoch for prediction round\\n\\n   \\n    uint256 public constant MAX_TREASURY_FEE = 10; // 10%\\n\\n    mapping(uint256 =\\u003e mapping(address =\\u003e TradeInfo)) public ledger;\\n    mapping(uint256 =\\u003e Round) public rounds;\\n    mapping(address =\\u003e uint256[]) public userRounds;\\n\\n    enum Position {\\n        Bull,\\n        Bear\\n    }\\n\\n    struct Round {\\n        uint256 epoch;\\n        uint256 startTimestamp;\\n        uint256 lockTimestamp;\\n        uint256 closeTimestamp;\\n        int256 lockPrice;\\n        int256 closePrice;\\n        uint256 totalAmount;\\n        uint256 bullAmount;\\n        uint256 bearAmount;\\n        uint256 rewardBaseCalAmount;\\n        uint256 rewardAmount;\\n        uint256 totalTreasuryAmount;\\n        uint256 totalAmountReferralsLv1;\\n        uint256 totalAmountReferralsLv2;\\n        \\n       \\n    }\\n\\n    struct TradeInfo {\\n        Position position;\\n        uint256 amount;\\n        bool claimed; // default false\\n    }\\n\\n    event BetBear(address indexed sender, uint256 indexed epoch, uint256 amount);\\n    event BetBull(address indexed sender, uint256 indexed epoch, uint256 amount);\\n    event Claim(address indexed sender, uint256 indexed epoch, uint256 amount);\\n    event EndRound(uint256 indexed epoch, int256 price);\\n    event LockRound(uint256 indexed epoch, int256 price);\\n\\n    event NewMinBetAmount(uint256 indexed epoch, uint256 minBetAmount);\\n    event NewTreasuryFee(uint256 indexed epoch, uint256 treasuryFee);\\n\\n    event Pause(uint256 indexed epoch);\\n    event RewardsCalculated(\\n        uint256 indexed epoch,\\n        uint256 rewardBaseCalAmount,\\n        uint256 rewardAmount,\\n        uint256 treasuryAmount\\n    );\\n\\n    event StartRound(uint256 indexed epoch);\\n    event TokenRecovery(address indexed token, uint256 amount);\\n    event TreasuryClaim(uint256 amount);\\n    event Unpause(uint256 indexed epoch);\\n\\n \\n    event PayReferralsEvent(\\n        address _parent,\\n        uint256 _prebitID,\\n        uint256 _payReferralAmount,\\n        uint256 _totalAmount,\\n        uint256 _type\\n    );\\n\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == operatorAddress, \\\"Not operator\\\");\\n        _;\\n    }\\n\\n    modifier notContract() {\\n        require(!_isContract(msg.sender), \\\"Contract not allowed\\\");\\n        require(msg.sender == tx.origin, \\\"Proxy contract not allowed\\\");\\n        _;\\n    }\\n\\n  \\n    constructor(\\n        address _operatorAddress,\\n        address _tokenPayAddress,\\n        address _referralContractAddress\\n    ) {\\n        operatorAddress = _operatorAddress;\\n        payToken = IERC20(_tokenPayAddress);\\n        referralContract = IPrebitReferrals(_referralContractAddress);\\n    }\\n\\n    /**\\n     * @notice  bear position\\n     * @param epoch: epoch\\n     */\\n    function TradeDown(uint256 epoch,uint256 _amount,uint256 _referralCode) external  whenNotPaused nonReentrant notContract {\\n        require(epoch == currentEpoch, \\\"Trade is too early/late\\\");\\n        require(_bettable(epoch), \\\"Round not Tradeable\\\");\\n        require(_amount \\u003e= minPosition, \\\"Trade amount must be greater than minTradeAmount\\\");\\n        require(ledger[epoch][msg.sender].amount == 0, \\\"Can only Trade once per round\\\");\\n        require(\\n            payToken.balanceOf(msg.sender) \\u003e= _amount,\\n            \\\"102 : Insufficient USDT balance\\\"\\n        );\\n         uint256 treasuryFeeAmount =  _amount.mul(treasuryFee).div(100);\\n\\n      \\n\\n        referralContract.generateReferralCodeWithContract(\\n            _referralCode,\\n            msg.sender\\n        );\\n         _paysProcess(_amount,epoch);\\n      \\n        Round storage round = rounds[epoch];\\n        round.totalAmount = round.totalAmount + _amount;\\n        round.bearAmount = round.bearAmount + _amount;\\n        round.totalTreasuryAmount = round.totalTreasuryAmount +  treasuryFeeAmount;\\n\\n       \\n        TradeInfo storage betInfo = ledger[epoch][msg.sender];\\n        betInfo.position = Position.Bear;\\n        betInfo.amount = _amount;\\n        userRounds[msg.sender].push(epoch);\\n\\n        emit BetBear(msg.sender, epoch, _amount);\\n    }\\n\\n       /**\\n     * @notice  bull position\\n     * @param epoch: epoch\\n     */\\n    function TradeUp(uint256 epoch,uint256 _amount,uint256 _referralCode) external  whenNotPaused nonReentrant notContract {\\n        require(epoch == currentEpoch, \\\"Trade is too early/late\\\");\\n        require(_bettable(epoch), \\\"Round not Tradeable\\\");\\n        require(_amount \\u003e= minPosition, \\\"Trade amount must be greater than minTradeAmount\\\");\\n        require(ledger[epoch][msg.sender].amount == 0, \\\"Can only bet once per round\\\");\\n        \\n\\n           require(\\n            payToken.balanceOf(msg.sender) \\u003e= _amount,\\n            \\\"102 : Insufficient USDT balance\\\"\\n        );\\n\\n       \\n         uint256 treasuryFeeAmount =  _amount.mul(treasuryFee).div(100);\\n\\n          \\n\\n\\n            referralContract.generateReferralCodeWithContract(\\n            _referralCode,\\n            msg.sender\\n        );\\n      \\n       _paysProcess(_amount,epoch);\\n       \\n        Round storage round = rounds[epoch];\\n        round.totalAmount = round.totalAmount + _amount;\\n        round.bullAmount = round.bullAmount + _amount;\\n       \\n        round.totalTreasuryAmount = round.totalTreasuryAmount +  treasuryFeeAmount;\\n\\n      \\n        TradeInfo storage betInfo = ledger[epoch][msg.sender];\\n        betInfo.position = Position.Bull;\\n        betInfo.amount = _amount;\\n        userRounds[msg.sender].push(epoch);\\n\\n        emit BetBull(msg.sender, epoch, _amount);\\n    }\\n\\n    /**\\n     * @dev Handles the payment process for a user\\u0027s purchase of precards, including referral rewards.\\n     * @param _totalPayAmount The total payment amount made by the user.\\n     */\\n    function _paysProcess(uint256 _totalPayAmount,uint256 _epoch) private {\\n\\n        uint256 newAmount = _totalPayAmount;\\n        address parentAddress = referralContract.getUserParent(msg.sender);\\n        if (parentAddress != address(0)) {\\n            newAmount -= _totalPayAmount.mul(percentReferralsLv1).div(100);\\n            payToken.transferFrom(\\n                msg.sender,\\n                parentAddress,\\n                _totalPayAmount.mul(percentReferralsLv1).div(100)\\n            );\\n\\n               emit PayReferralsEvent(\\n                parentAddress,\\n                _epoch,\\n                _totalPayAmount.mul(percentReferralsLv1).div(100),\\n                _totalPayAmount,\\n                1\\n            );\\n          rounds[_epoch].totalAmountReferralsLv1+=_totalPayAmount.mul(percentReferralsLv1).div(100);\\n            address tParentAddress = referralContract.getUserTparent(\\n                msg.sender\\n            );\\n           \\n            if (tParentAddress != address(0)) {\\n                payToken.transferFrom(\\n                    msg.sender,\\n                    tParentAddress,\\n                    _totalPayAmount.mul(percentReferralsLv2).div(100)\\n                );\\n                newAmount -= _totalPayAmount.mul(percentReferralsLv2).div(100);\\n                 rounds[_epoch].totalAmountReferralsLv2+=_totalPayAmount.mul(percentReferralsLv2).div(100);\\n                  emit PayReferralsEvent(\\n                    tParentAddress,\\n                    _epoch,\\n                    _totalPayAmount.mul(percentReferralsLv2).div(100),\\n                    _totalPayAmount,\\n                    2\\n                );\\n            } else {\\n                rounds[_epoch].totalTreasuryAmount += _totalPayAmount\\n                    .mul(percentReferralsLv2)\\n                    .div(100);\\n            }\\n        } else {\\n            rounds[_epoch].totalTreasuryAmount += _totalPayAmount\\n                .mul(percentReferralsLv1 + percentReferralsLv2)\\n                .div(100);\\n        }\\n\\n        payToken.transferFrom(msg.sender, address(this), newAmount);\\n    }\\n\\n \\n\\n    /**\\n     * @notice Claim reward for an array of epochs\\n     * @param epochs: array of epochs\\n     */\\n    function claim(uint256[] calldata epochs) external nonReentrant notContract {\\n        uint256 reward; // Initializes reward\\n\\n        for (uint256 i = 0; i \\u003c epochs.length; i++) {\\n            require(rounds[epochs[i]].startTimestamp != 0, \\\"Round has not started\\\");\\n            require(block.timestamp \\u003e rounds[epochs[i]].closeTimestamp, \\\"Round has not ended\\\");\\n\\n            uint256 addedReward = 0;\\n\\n            // Round valid, claim rewards\\n            if (rounds[epochs[i]].lockPrice \\u003e 0) {\\n                require(claimable(epochs[i], msg.sender), \\\"Not eligible for claim\\\");\\n                Round memory round = rounds[epochs[i]];\\n                addedReward = ((ledger[epochs[i]][msg.sender].amount) * round.rewardAmount) / round.rewardBaseCalAmount;\\n            }\\n            // Round invalid, refund bet amount\\n            else {\\n                require(refundable(epochs[i], msg.sender), \\\"Not eligible for refund\\\");\\n                addedReward = ledger[epochs[i]][msg.sender].amount;\\n            }\\n\\n            ledger[epochs[i]][msg.sender].claimed = true;\\n            reward += addedReward;\\n\\n            emit Claim(msg.sender, epochs[i], addedReward);\\n        }\\n\\n        if (reward \\u003e 0) {\\n            payToken.transfer(address(msg.sender), reward);\\n        }\\n    }\\n\\n    /**\\n     * @notice Start the next round n, lock price for round n-1, end round n-2\\n     * @dev Callable by operator\\n     */\\n     //Set BTC Price in real timeframes Binance BTCUSDT \\n    function executeRound(int256 _btcPrice) external  onlyOperator {\\n        require(\\n            genesisStartOnce \\u0026\\u0026 genesisLockOnce,\\n            \\\"Can only run after genesisStartRound and genesisLockRound is triggered\\\"\\n        );\\n\\n   \\n        int256 currentPrice =_btcPrice;\\n     \\n\\n        // CurrentEpoch refers to previous round (n-1)\\n        _safeLockRound(currentEpoch, currentPrice);\\n        _safeEndRound(currentEpoch - 1, currentPrice);\\n        _calculateRewards(currentEpoch - 1);\\n\\n            //Pay to Treasury wallets\\n        //Uncomments\\n           _paysTreasury(rounds[currentEpoch - 1].totalTreasuryAmount);\\n      \\n\\n        // Increment currentEpoch to current round (n)\\n        currentEpoch = currentEpoch + 1;\\n        _safeStartRound(currentEpoch);\\n    }\\n\\n  \\n    /**\\n     * @notice Start genesis round\\n     * @dev Callable by admin or operator\\n     */\\n    function genesisStartRound(uint256 _startTimestamp) external whenNotPaused onlyOperator {\\n        require(!genesisStartOnce, \\\"Can only run genesisStartRound once\\\");\\n        if (currentEpoch ==0){\\n            currentEpoch = currentEpoch + 1 ;\\n        }else{\\n            currentEpoch = currentEpoch;\\n        }\\n       \\n        Round storage round = rounds[currentEpoch];\\n        uint256 startTimestamp = _startTimestamp;\\n        round.startTimestamp = startTimestamp;\\n        round.lockTimestamp = startTimestamp + intervalSeconds;\\n        round.closeTimestamp =startTimestamp +  (2*intervalSeconds);\\n        round.epoch = currentEpoch;\\n        round.totalAmount = 0;\\n        genesisStartOnce = true;\\n    }\\n\\n    /**\\n     * @notice Lock genesis round\\n     * @dev Callable by operator\\n     */\\n    function genesisLockRound(int256 _btcPrice) external whenNotPaused onlyOperator {\\n        require(genesisStartOnce, \\\"Can only run after genesisStartRound is triggered\\\");\\n        require(!genesisLockOnce, \\\"Can only run genesisLockRound once\\\");\\n\\n         int256 currentPrice =_btcPrice;\\n    \\n\\n    \\n        _safeLockRound(currentEpoch, currentPrice);\\n\\n        currentEpoch = currentEpoch + 1;\\n        _startRound(currentEpoch);\\n        genesisLockOnce = true;\\n    }\\n    /**\\n     * @notice called by the admin to pause, triggers stopped state\\n     * @dev Callable by admin or operator\\n     */\\n    function pause() external whenNotPaused onlyOwner {\\n        _pause();\\n        \\n        emit Pause(currentEpoch);\\n    }\\n\\n \\n\\n    /**\\n     * @notice called by the admin to unpause, returns to normal state\\n     * Reset genesis state. Once paused, the rounds would need to be kickstarted by genesis\\n     */\\n    function unpause() external whenPaused onlyOwner {\\n        // genesisStartOnce = false;\\n        // genesisLockOnce = false;\\n        _unpause();\\n\\n        emit Unpause(currentEpoch);\\n    }\\n\\n    /**\\n     * @notice Set  interval (in seconds)\\n     * @dev Callable by admin\\n     */\\n    function setIntervalSeconds(uint256 _intervalSeconds)\\n        external\\n        onlyOwner\\n    {\\n      \\n        intervalSeconds = _intervalSeconds;\\n\\n    }\\n\\n    /**\\n     * @notice Set minBetAmount\\n     * @dev Callable by admin\\n     */\\n    function setMinPositionAmount(uint256 _minPositionAmount) external  onlyOwner {\\n        require(_minPositionAmount != 0, \\\"Must be superior to 0\\\");\\n        minPosition = _minPositionAmount;\\n\\n        emit NewMinBetAmount(currentEpoch, minPosition);\\n    }\\n\\n    /**\\n     * @notice Set operator address\\n     * @dev Callable by admin\\n     */\\n    function setOperatorAndtreasuryAddress(address _operatorAddress,address _treasuryAddress) external onlyOwner {\\n        require(_operatorAddress != address(0), \\\"Cannot be zero address\\\");\\n        operatorAddress = _operatorAddress;\\n        treasuryAddress = _treasuryAddress;\\n       \\n    }\\n\\n    /**\\n     * @notice Set treasury fee\\n     * @dev Callable by admin\\n     */\\n    function setTreasuryFee(uint256 _treasuryFee) external  onlyOwner {\\n        require(_treasuryFee \\u003c= MAX_TREASURY_FEE, \\\"Treasury fee too high\\\");\\n        treasuryFee = _treasuryFee;\\n\\n        emit NewTreasuryFee(currentEpoch, treasuryFee);\\n    }\\n\\n    /**\\n     * @notice It allows the owner to recover tokens sent to the contract by mistake\\n     * @param _token: token address\\n     * @param _amount: token amount\\n     * @dev Callable by owner\\n     */\\n    function recoverToken(address _token, uint256 _amount) external onlyOwner {\\n        IERC20(_token).transfer(address(msg.sender), _amount);\\n\\n        emit TokenRecovery(_token, _amount);\\n    }\\n\\n\\n\\n    /**\\n     * @notice Returns round epochs and bet information for a user that has participated\\n     * @param user: user address\\n     * @param cursor: cursor\\n     * @param size: size\\n     */\\n    function getUserRounds(\\n        address user,\\n        uint256 cursor,\\n        uint256 size\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            TradeInfo[] memory,\\n            uint256\\n        )\\n    {\\n        uint256 length = size;\\n\\n        if (length \\u003e userRounds[user].length - cursor) {\\n            length = userRounds[user].length - cursor;\\n        }\\n\\n        uint256[] memory values = new uint256[](length);\\n        TradeInfo[] memory betInfo = new TradeInfo[](length);\\n\\n        for (uint256 i = 0; i \\u003c length; i++) {\\n            values[i] = userRounds[user][cursor + i];\\n            betInfo[i] = ledger[values[i]][user];\\n        }\\n\\n        return (values, betInfo, cursor + length);\\n    }\\n\\n    /**\\n     * @notice Returns round epochs length\\n     * @param user: user address\\n     */\\n    function getUserRoundsLength(address user) external view returns (uint256) {\\n        return userRounds[user].length;\\n    }\\n\\n    /**\\n     * @notice Get the claimable stats of specific epoch and user account\\n     * @param epoch: epoch\\n     * @param user: user address\\n     */\\n    function claimable(uint256 epoch, address user) public view returns (bool) {\\n        TradeInfo memory betInfo = ledger[epoch][user];\\n        Round memory round = rounds[epoch];\\n        if (round.lockPrice == round.closePrice) {\\n            return false;\\n        }\\n        return\\n            round.closePrice \\u003e 0 \\u0026\\u0026\\n            betInfo.amount != 0 \\u0026\\u0026\\n            !betInfo.claimed \\u0026\\u0026\\n            ((round.closePrice \\u003e round.lockPrice \\u0026\\u0026 betInfo.position == Position.Bull) ||\\n                (round.closePrice \\u003c round.lockPrice \\u0026\\u0026 betInfo.position == Position.Bear));\\n    }\\n\\n    /**\\n     * @notice Get the refundable stats of specific epoch and user account\\n     * @param epoch: epoch\\n     * @param user: user address\\n     */\\n    function refundable(uint256 epoch, address user) public view returns (bool) {\\n        TradeInfo memory betInfo = ledger[epoch][user];\\n        Round memory round = rounds[epoch];\\n        return\\n            (round.closePrice \\u003e 0) \\u0026\\u0026\\n            !betInfo.claimed \\u0026\\u0026\\n            block.timestamp \\u003e round.closeTimestamp  \\u0026\\u0026\\n            betInfo.amount != 0;\\n    }\\n\\n    /**\\n     * @notice Calculate rewards for round\\n     * @param epoch: epoch\\n     */\\n    function _calculateRewards(uint256 epoch) internal {\\n        require(rounds[epoch].rewardBaseCalAmount == 0 \\u0026\\u0026 rounds[epoch].rewardAmount == 0, \\\"Rewards calculated\\\");\\n        Round storage round = rounds[epoch];\\n        uint256 rewardBaseCalAmount;\\n        uint256 treasuryAmt;\\n        uint256 rewardAmount;\\n\\n        // Bull wins\\n        if (round.closePrice \\u003e round.lockPrice) {\\n            rewardBaseCalAmount = round.bullAmount;\\n           \\n         \\n              if (rewardBaseCalAmount==0){\\n               \\n                round.totalTreasuryAmount = round.totalAmount  - (round.totalAmountReferralsLv1+round.totalAmountReferralsLv2) ;\\n            }\\n\\n                rewardAmount = round.totalAmount - round.totalTreasuryAmount - (round.totalAmountReferralsLv1+round.totalAmountReferralsLv2);\\n        }\\n        // Bear wins\\n        else if (round.closePrice \\u003c round.lockPrice) {\\n            rewardBaseCalAmount = round.bearAmount;\\n           \\n            if (rewardBaseCalAmount==0){\\n               \\n                round.totalTreasuryAmount = round.totalAmount - (round.totalAmountReferralsLv1+round.totalAmountReferralsLv2);\\n            }\\n             rewardAmount = round.totalAmount - round.totalTreasuryAmount - (round.totalAmountReferralsLv1+round.totalAmountReferralsLv2);\\n        }\\n        // House wins\\n        else {\\n            rewardBaseCalAmount = 0;\\n            rewardAmount = 0;\\n            round.totalTreasuryAmount = round.totalTreasuryAmount+  (round.totalAmount - (round.totalAmountReferralsLv1+round.totalAmountReferralsLv2));\\n        }\\n        round.rewardBaseCalAmount = rewardBaseCalAmount;\\n        round.rewardAmount = rewardAmount;\\n\\n      \\n\\n        emit RewardsCalculated(epoch, rewardBaseCalAmount, rewardAmount, treasuryAmt);\\n    }\\n\\n    /**\\n     * @notice End round\\n     * @param epoch: epoch\\n     * @param price: price of the round\\n     */\\n    function _safeEndRound(\\n        uint256 epoch,\\n        int256 price\\n    ) internal {\\n        require(rounds[epoch].lockTimestamp != 0, \\\"Can only end round after round has locked\\\");\\n        require(block.timestamp \\u003e= rounds[epoch].closeTimestamp, \\\"Can only end round after closeTimestamp\\\");\\n\\n        Round storage round = rounds[epoch];\\n        round.closePrice = price;\\n    \\n\\n        emit EndRound(epoch, round.closePrice);\\n    }\\n\\n    /**\\n     * @notice Lock round\\n     * @param epoch: epoch\\n     * @param price: price of the round\\n     */\\n    function _safeLockRound(\\n        uint256 epoch,\\n        int256 price\\n    ) internal {\\n        require(rounds[epoch].startTimestamp != 0, \\\"Can only lock round after round has started\\\");\\n        require(block.timestamp \\u003e= rounds[epoch].lockTimestamp, \\\"Can only lock round after lockTimestamp\\\");\\n\\n        Round storage round = rounds[epoch];\\n        round.closeTimestamp = round.lockTimestamp + intervalSeconds;\\n        round.lockPrice = price;\\n       \\n\\n        emit LockRound(epoch, round.lockPrice);\\n    }\\n\\n    /**\\n     * @notice Start round\\n     * Previous round n-2 must end\\n     * @param epoch: epoch\\n     */\\n    function _safeStartRound(uint256 epoch) internal {\\n        require(genesisStartOnce, \\\"Can only run after genesisStartRound is triggered\\\");\\n        require(rounds[epoch - 2].closeTimestamp != 0, \\\"Can only start round after round n-2 has ended\\\");\\n        require(\\n            block.timestamp \\u003e= rounds[epoch - 2].closeTimestamp,\\n            \\\"Can only start new round after round n-2 closeTimestamp\\\"\\n        );\\n        _startRound(epoch);\\n    }\\n\\n \\n\\n    /**\\n     * @notice Start round\\n     * Previous round n-2 must end\\n     * @param epoch: epoch\\n     */\\n    function _startRound(uint256 epoch) internal {\\n        Round storage round = rounds[epoch];\\n          uint256 nowTimestamp = block.timestamp;\\n         uint256 startTimestamp = rounds[epoch-1].lockTimestamp;\\n        while((startTimestamp+intervalSeconds) \\u003c nowTimestamp){\\n                startTimestamp = startTimestamp+intervalSeconds;\\n        }\\n       \\n        round.startTimestamp = startTimestamp;\\n        round.lockTimestamp = startTimestamp + intervalSeconds;\\n        round.closeTimestamp =startTimestamp +  (2*intervalSeconds);\\n        round.epoch = epoch;\\n        round.totalAmount = 0;\\n\\n        emit StartRound(epoch);\\n    }\\n\\n    /**\\n     * @notice Determine if a round is valid for receiving bets\\n     * Round must have started and locked\\n     * Current timestamp must be within startTimestamp and closeTimestamp\\n     */\\n    function _bettable(uint256 epoch) internal view returns (bool) {\\n        return\\n            rounds[epoch].startTimestamp != 0 \\u0026\\u0026\\n            rounds[epoch].lockTimestamp != 0 \\u0026\\u0026\\n            block.timestamp \\u003e rounds[epoch].startTimestamp \\u0026\\u0026\\n            block.timestamp \\u003c rounds[epoch].lockTimestamp;\\n    }\\n\\n  \\n    /**\\n     * @dev Distributes funds to various treasury wallets based on configured percentages.\\n     * @param _totalTransfers The total amount to be distributed to treasuries.\\n     */\\n    function _paysTreasury(uint256 _totalTransfers) private {\\n        uint256 remainingAmount = _totalTransfers;\\n        if (treasuryWallets.length \\u003e 0) {\\n            for (uint256 i = 0; i \\u003c treasuryWallets.length; i++) {\\n                uint256 amountToTransfer = (_totalTransfers)\\n                    .mul(treasuryPercentages[i])\\n                    .div(100);\\n\\n                if (amountToTransfer \\u003e 0) {\\n                    remainingAmount -= amountToTransfer;\\n                    payToken.transfer(treasuryWallets[i], amountToTransfer);\\n                }\\n            }\\n\\n            if (remainingAmount \\u003e 0) {\\n                payToken.transfer(treasuryAddress, remainingAmount);\\n            }\\n        } else {\\n            payToken.transfer(treasuryAddress, remainingAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Add a treasury wallet address with a percentage share.\\n     *\\n     * @param _wallet The address of the treasury wallet.\\n     * @param _percentage The percentage share for the wallet.\\n     */\\n    function addTreasuryWallet(address _wallet, uint256 _percentage)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _wallet != address(0),\\n            \\\"Treasury wallet address cannot be zero\\\"\\n        );\\n        require(_percentage \\u003c= 100, \\\"Percentage must be between 0 and 100\\\");\\n        uint256 totalPercentage = 0;\\n        for (uint256 i = 0; i \\u003c treasuryWallets.length; i++) {\\n            totalPercentage += treasuryPercentages[i];\\n        }\\n        require(\\n            totalPercentage + _percentage \\u003c= 100,\\n            \\\"Percentage must be less than 100\\\"\\n        );\\n\\n        treasuryWallets.push(_wallet);\\n        treasuryPercentages.push(_percentage);\\n    }\\n\\n    /**\\n     * @dev Update a treasury wallet address and its percentage share.\\n     *\\n     * @param _index The index of the treasury wallet to update.\\n     * @param _wallet The new address for the treasury wallet.\\n     * @param _percentage The new percentage share for the wallet.\\n     */\\n    function updateTreasuryWallet(\\n        uint256 _index,\\n        address _wallet,\\n        uint256 _percentage\\n    ) external onlyOwner {\\n        require(_index \\u003c treasuryWallets.length, \\\"Invalid index\\\");\\n        require(\\n            _wallet != address(0),\\n            \\\"Treasury wallet address cannot be zero\\\"\\n        );\\n        require(_percentage \\u003c= 100, \\\"Percentage must be between 1 and 100\\\");\\n\\n        uint256 totalPercentage = 0;\\n        for (uint256 i = 0; i \\u003c treasuryWallets.length; i++) {\\n            totalPercentage += treasuryPercentages[i];\\n        }\\n        require(\\n            totalPercentage + _percentage \\u003c= 100,\\n            \\\"Percentage must be less than 100\\\"\\n        );\\n\\n        treasuryWallets[_index] = _wallet;\\n        treasuryPercentages[_index] = _percentage;\\n    }\\n/**\\n * @dev Adjust the timestamps for a specific epoch.\\n *\\n * Requirements:\\n * - The caller must be the owner of the contract.\\n * - The specified epoch must exist.\\n *\\n * @param _epoch The epoch for which timestamps are adjusted.\\n * @param startTimestamp The new start timestamp for the epoch.\\n * @param lockTimestamp The new lock timestamp for the epoch.\\n * @param closeTimestamp The new close timestamp for the epoch.\\n */\\n\\n    function adjustTimestamp(\\n        uint256 _epoch,\\n        uint256 startTimestamp,\\n        uint256 lockTimestamp,\\n        uint256 closeTimestamp\\n    ) external onlyOwner {\\n        rounds[_epoch].startTimestamp = startTimestamp;\\n        rounds[_epoch].lockTimestamp = lockTimestamp;\\n        rounds[_epoch].closeTimestamp = closeTimestamp;\\n    }\\n\\n    /**\\n     * @notice Returns true if `account` is a contract.\\n     * @param account: account address\\n     */\\n    function _isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenPayAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referralContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetBear\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetBull\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"EndRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"LockRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"}],\"name\":\"NewMinBetAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"}],\"name\":\"NewTreasuryFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prebitID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_payReferralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"PayReferralsEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardBaseCalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"StartRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TreasuryClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TREASURY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralCode\",\"type\":\"uint256\"}],\"name\":\"TradeDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralCode\",\"type\":\"uint256\"}],\"name\":\"TradeUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"addTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeTimestamp\",\"type\":\"uint256\"}],\"name\":\"adjustTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"epochs\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_btcPrice\",\"type\":\"int256\"}],\"name\":\"executeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisLockOnce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_btcPrice\",\"type\":\"int256\"}],\"name\":\"genesisLockRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisStartOnce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"}],\"name\":\"genesisStartRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getUserRounds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"enum PrebitTrading.Position\",\"name\":\"position\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct PrebitTrading.TradeInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserRoundsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ledger\",\"outputs\":[{\"internalType\":\"enum PrebitTrading.Position\",\"name\":\"position\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentReferralsLv1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentReferralsLv2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralContract\",\"outputs\":[{\"internalType\":\"contract IPrebitReferrals\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"refundable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"lockPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"closePrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bullAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bearAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBaseCalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTreasuryAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountReferralsLv1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountReferralsLv2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_intervalSeconds\",\"type\":\"uint256\"}],\"name\":\"setIntervalSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPositionAmount\",\"type\":\"uint256\"}],\"name\":\"setMinPositionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setOperatorAndtreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"treasuryPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"treasuryWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"updateTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PrebitTrading", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000047b11a3afe6538e299c138c031264a10802a7e7a00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000009a8ae3be63fc293ce1bc934010dcd0132b6585b0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c29466e57f170584f7159c94e51df663450d25e4e55b4440a8329ee29d7d2411"}