{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\ninterface IBEP721A {\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error ApprovalCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error ApprovalQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller cannot approve to their own address.\r\n     */\r\n    error ApproveToCaller();\r\n\r\n    /**\r\n     * Cannot query the balance for the zero address.\r\n     */\r\n    error BalanceQueryForZeroAddress();\r\n\r\n    /**\r\n     * Cannot mint to the zero address.\r\n     */\r\n    error MintToZeroAddress();\r\n\r\n    /**\r\n     * The quantity of tokens minted must be more than zero.\r\n     */\r\n    error MintZeroQuantity();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error OwnerQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error TransferCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token must be owned by `from`.\r\n     */\r\n    error TransferFromIncorrectOwner();\r\n\r\n    /**\r\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\r\n     */\r\n    error TransferToNonERC721ReceiverImplementer();\r\n\r\n    /**\r\n     * Cannot transfer to the zero address.\r\n     */\r\n    error TransferToZeroAddress();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error URIQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\r\n     */\r\n    error MintERC2309QuantityExceedsLimit();\r\n\r\n    /**\r\n     * The `extraData` cannot be set on an unintialized ownership slot.\r\n     */\r\n    error OwnershipNotInitializedForExtraData();\r\n\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n        // Whether the token has been burned.\r\n        bool burned;\r\n        // Arbitrary data similar to `startTimestamp` that can be set through `_extraData`.\r\n        uint24 extraData;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     *\r\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    // ==============================\r\n    //            IERC165\r\n    // ==============================\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n    // ==============================\r\n    //            IERC721\r\n    // ==============================\r\n\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    // ==============================\r\n    //        IERC721Metadata\r\n    // ==============================\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    // ==============================\r\n    //            IERC2309\r\n    // ==============================\r\n\r\n    /**\r\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`,\r\n     * as defined in the ERC2309 standard. See `_mintERC2309` for more details.\r\n     */\r\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\r\n}\r\n\r\ninterface IBEP20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n\r\n    */\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\r\n        // benefit is lost if 'b' is also tested.\r\n\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n\r\n    */\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n\r\n        require(b > 0);\r\n\r\n        uint256 c = a / b;\r\n\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n\r\n    */\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n\r\n    */\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n\r\n    * reverts when dividing by zero.\r\n\r\n    */\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable   {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n\r\n     */\r\n\r\n    constructor()  {\r\n        _owner = msg.sender;\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the address of the current owner.\r\n\r\n     */\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Throws if called by any account other than the owner.\r\n\r\n     */\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\r\n     * Can only be called by the current owner.\r\n\r\n     */\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract NFT_Staking is Ownable,ReentrancyGuard{\r\n    using SafeMath for uint256;\r\n    IBEP20 public Token;\r\n    // IBEP721A public NFT;\r\n\r\n    struct Stake{\r\n        uint _tokens;\r\n        uint[] _NFTs;\r\n        uint _days;\r\n        uint _stakeTime;\r\n    }\r\n    \r\n    uint256 public minimumERC20Deposit = 500e18; //500\r\n    uint256 public time = 1 days;\r\n    uint256 public minimumNFT = 1;\r\n    uint256 public maximumNFT= 10;\r\n  \r\n    uint256 public deductionPercentage=10e18;  //10%\r\n\r\n    //clubs information ////////////////////\r\n\r\n\r\n    //plan_one_ club\r\n    uint256 public plan1_count=1;\r\n    uint256 public plan_one_30reward=1250000000000000000;  //1.25 %\r\n    uint256 public plan_one_90reward=5250000000000000000;   //5.25 %\r\n    uint256 public plan_one_180reward=13500000000000000000;   //13.5%\r\n    uint256 public plan_one_360reward=33000000000000000000;   //33 %\r\n\r\n    function setplan_one__Counts_reward(uint256 _plan_one_count,uint256 _plan_one_30reward,uint256 _plan_one_90reward,uint256 _plan_one_180reward,uint256 _plan_one_360reward) external onlyOwner{\r\n        plan1_count=_plan_one_count;\r\n        plan_one_30reward=_plan_one_30reward;\r\n        plan_one_90reward=_plan_one_90reward;\r\n        plan_one_180reward=_plan_one_180reward;\r\n        plan_one_360reward=_plan_one_360reward;\r\n    }\r\n\r\n\r\n//plan two club\r\n    uint256 public plan2_count=2;\r\n    uint256 public plan_two_30reward=1500000000000000000;    //1.5 %\r\n    uint256 public plan_two_90reward=6000000000000000000;     // 6 %\r\n    uint256 public plan_two_180reward=15000000000000000000;     //15 %\r\n    uint256 public plan_two_360reward=36000000000000000000;    //36 %\r\n\r\n     function setplan_two__Counts_reward(uint256 _plan_two_count,uint256 _plan_two_30reward,uint256 _plan_two_90reward,uint256 _plan_two_180reward,uint256 _plan_two_360reward) external onlyOwner{\r\n        plan2_count=_plan_two_count;\r\n        plan_two_30reward=_plan_two_30reward;\r\n        plan_two_90reward=_plan_two_90reward;\r\n        plan_two_180reward=_plan_two_180reward;\r\n        plan_two_360reward=_plan_two_360reward;\r\n    }\r\n\r\n\r\n    //plan_three_ CLUB\r\n\r\n     uint256 public plan3_count=5;\r\n    uint256 public plan_three_30reward=1750000000000000000;  //1.75 %\r\n    uint256 public plan_three_90reward=6750000000000000000;   //6.75 %\r\n    uint256 public plan_three_180reward=16500000000000000000;  //16.5 %\r\n    uint256 public plan_three_360reward=39000000000000000000;   // 39 %\r\n\r\n     function setplan_three__Counts_reward(uint256 _plan_three_count,uint256 _plan_three_30reward,uint256 _plan_three_90reward,uint256 _plan_three_180reward,uint256 _plan_three_360reward) external onlyOwner{\r\n        plan3_count=_plan_three_count;\r\n        plan_three_30reward=_plan_three_30reward;\r\n        plan_three_90reward=_plan_three_90reward;\r\n        plan_three_180reward=_plan_three_180reward;\r\n        plan_three_360reward=_plan_three_360reward;\r\n    }\r\n\r\n\r\n   // plan_four\r\n\r\n    uint256 public plan4_count=10;\r\n    uint256 public plan_four_30reward=2000000000000000000;  //2 %\r\n    uint256 public plan_four_90reward=7500000000000000000; //7.5 %\r\n    uint256 public plan_four_180reward=18000000000000000000; //18 %\r\n    uint256 public plan_four_360reward=42000000000000000000; //42 %\r\n\r\n     function setplan_four_Counts_reward(uint256 _plan4_count,uint256 _plan_four_30reward,uint256 _plan_four_90reward,uint256 _plan_four_180reward,uint256 _plan_four_360reward) external onlyOwner{\r\n        plan4_count=_plan4_count;\r\n        plan_four_30reward=_plan_four_30reward;\r\n        plan_four_90reward=_plan_four_90reward;\r\n        plan_four_180reward=_plan_four_180reward;\r\n        plan_four_360reward=_plan_four_360reward;\r\n    }\r\n\r\n   \r\n\r\n\r\n    mapping (address => Stake[]) public stakesOf;\r\n    mapping(uint256 => uint256) public allocation;\r\n    mapping(address => uint256) public commulativeDepositTokensOf;\r\n    mapping(address => uint256) public commulativeWithdrawTokensOf;\r\n    mapping(uint256 => bool) public isNFTStaked;\r\n    mapping(address => bool) public isSpam;\r\n\r\n\r\n    event Deposite(address indexed to,address indexed From, uint256 amount, uint256 day,uint256 time);\r\n\r\n    constructor(IBEP20 _tokenaddr)  {\r\n        Token = _tokenaddr;\r\n\r\n        _paused = false;\r\n    }\r\n\r\n   \r\n\r\n    \r\n\r\n    function farm(uint256 _amount, uint256 _lockableDays, uint256[] memory _tokenIDs) public whenNotPaused nonReentrant{    \r\n        address caller = msg.sender; // to save gas fee\r\n        require(isSpam[msg.sender]==false,\"Account is spam!\");\r\n        require(_tokenIDs.length >= minimumNFT && _tokenIDs.length <= maximumNFT, \"length is not valid\");\r\n        require(_lockableDays==30||_lockableDays==90||_lockableDays==180||_lockableDays==360,\"Invalid Days selection\");\r\n        require(_amount >= minimumERC20Deposit, \"Invalid amount\");\r\n        for (uint256 i; i < _tokenIDs.length; i++){\r\n            require(isNFTStaked[_tokenIDs[i]] == false,\"You already staked these nft ids!\");\r\n        }\r\n\r\n        // take tokens from caller\r\n        Token.transferFrom(caller, address(this), _amount);\r\n\r\n        // update state data.\r\n        stakesOf[caller].push(Stake({\r\n            _tokens: _amount, \r\n            _NFTs: _tokenIDs, \r\n            _days: _lockableDays,\r\n            _stakeTime: block.timestamp\r\n        }));\r\n        commulativeDepositTokensOf[caller] += _amount;\r\n\r\n        // mark staked true for given NFT IDs\r\n        for(uint256 i;i<_tokenIDs.length;i++){\r\n            isNFTStaked[_tokenIDs[i]] = true;\r\n        }\r\n\r\n        emit Deposite(caller,address(this),_amount,_lockableDays,block.timestamp);\r\n    }\r\n    \r\n    \r\n    function harvest(uint256 _index) public whenNotPaused nonReentrant{\r\n        uint currentTime = block.timestamp; // to save gas fee.\r\n        address caller = msg.sender; // to save gas fee.\r\n\r\n        Stake[] memory _userAllStakes = stakesOf[caller];\r\n        Stake storage _userData = stakesOf[caller][_index];\r\n        uint _tokensCount = _userData._tokens;\r\n        \r\n        require(isSpam[msg.sender]==false,\"Account is spam!\");\r\n        require(_userData._tokens != 0, \"Already Unstaked\");\r\n        require(_index <= _userAllStakes.length, \"Invalid index number\");\r\n        uint256 reward;\r\n        uint256 deductionamount;\r\n        uint256 totalWithdraw;\r\n        if(currentTime >= (_userData._days * time + _userData._stakeTime))\r\n        {\r\n            reward = calculateReward(caller, _index);\r\n            totalWithdraw = _userData._tokens + reward; \r\n        }\r\n\r\n        else{\r\n        if(deductionPercentage>0)\t\r\n        {\t\r\n            deductionamount = (_tokensCount.mul(deductionPercentage).div(100)).div(1e18);\r\n            totalWithdraw = _userData._tokens - deductionamount; \r\n         }\r\n         else\r\n         {\r\n            reward = calculateReward(caller, _index);\r\n            totalWithdraw = _userData._tokens + reward; \r\n\r\n         }\r\n        }\r\n        \r\n        // mark staking false for give NFT IDs.\r\n        unstakeData(_userData._NFTs);\r\n\r\n        // send staked ERC20 tokens + reward tokens back to the staker.\r\n         \r\n        Token.transfer(caller, totalWithdraw);\r\n        commulativeWithdrawTokensOf[caller] += totalWithdraw;\r\n\r\n        // reset all the state data for given index.\r\n        delete _userData._tokens;\r\n        delete _userData._NFTs;\r\n        delete _userData._days;\r\n        delete _userData._stakeTime;\r\n    }\r\n\r\n\r\n    function calculateReward(address _owner, uint _index) public view returns (uint reward){\r\n        Stake memory _userData = stakesOf[_owner][_index];\r\n\r\n        uint _NFTsCount = _userData._NFTs.length;\r\n        uint _daysCount = _userData._days;\r\n        uint _tokensCount = _userData._tokens;\r\n\r\n        // calculate reward based on the given conditions.\r\n       \r\n      \r\n        \r\n         if(_NFTsCount >= plan4_count){\r\n            if(_daysCount == 30){\r\n               \r\n                reward = (_tokensCount.mul(plan_four_30reward).div(100)).div(1e18);\r\n            }\r\n            else if (_daysCount == 90){\r\n                reward = (_tokensCount.mul(plan_four_90reward).div(100)).div(1e18);\r\n            }\r\n            else if (_daysCount == 180){\r\n             \r\n                reward = (_tokensCount.mul(plan_four_180reward).div(100)).div(1e18);\r\n            }\r\n            else if (_daysCount == 360){\r\n              \r\n                reward = (_tokensCount.mul(plan_four_360reward).div(100)).div(1e18);\r\n            }\r\n        }\r\n       \r\n        else if(_NFTsCount >= plan3_count){\r\n            if(_daysCount == 30){\r\n              \r\n                reward = (_tokensCount.mul(plan_three_30reward).div(100)).div(1e18);\r\n            }\r\n            else if (_daysCount == 90){\r\n               \r\n                reward = (_tokensCount.mul(plan_three_90reward).div(100)).div(1e18);\r\n            }\r\n            else if (_daysCount == 180){\r\n               \r\n                reward = (_tokensCount.mul(plan_three_180reward).div(100)).div(1e18);\r\n            }\r\n            else if (_daysCount == 360){\r\n               \r\n                reward = (_tokensCount.mul(plan_three_360reward).div(100)).div(1e18);\r\n            }\r\n        }\r\n     \r\n        else if(_NFTsCount >= plan2_count){\r\n            if(_daysCount == 30){\r\n           \r\n                reward = (_tokensCount.mul(plan_two_30reward).div(100)).div(1e18);\r\n            }\r\n            else if (_daysCount == 90){\r\n                \r\n                reward = (_tokensCount.mul(plan_two_90reward).div(100)).div(1e18);\r\n            }\r\n            else if (_daysCount == 180){\r\n            \r\n                reward = (_tokensCount.mul(plan_two_180reward).div(100)).div(1e18);\r\n            }\r\n            else if (_daysCount == 360){\r\n                reward = (_tokensCount.mul(plan_two_360reward).div(100)).div(1e18);\r\n            }\r\n        }\r\n      \r\n        else if(_NFTsCount >= plan1_count){\r\n\r\n            if(_daysCount == 30){\r\n               \r\n                reward = (_tokensCount.mul(plan_one_30reward).div(100)).div(1e18);\r\n            }\r\n            else if (_daysCount == 90){\r\n               \r\n                reward = (_tokensCount.mul(plan_one_90reward).div(100)).div(1e18);\r\n            }\r\n            else if (_daysCount == 180){\r\n               \r\n                reward = (_tokensCount.mul(plan_one_180reward).div(100)).div(1e18);\r\n            }\r\n            else if (_daysCount == 360){\r\n              \r\n                reward = (_tokensCount.mul(plan_one_360reward).div(100)).div(1e18);\r\n            }\r\n        }\r\n      \r\n        else {\r\n             if(_daysCount == 30){\r\n               \r\n                reward = (_tokensCount.mul(plan_one_30reward).div(100)).div(1e18);\r\n            }\r\n            else if (_daysCount == 90){\r\n               \r\n                reward = (_tokensCount.mul(plan_one_90reward).div(100)).div(1e18);\r\n            }\r\n            else if (_daysCount == 180){\r\n               \r\n                reward = (_tokensCount.mul(plan_one_180reward).div(100)).div(1e18);\r\n            }\r\n            else if (_daysCount == 360){\r\n              \r\n                reward = (_tokensCount.mul(plan_one_360reward).div(100)).div(1e18);\r\n            }\r\n        }\r\n    }\r\n\r\n    // function to mark stake false for the given NFT IDs.\r\n    // Note: This function can only be called within harvest function.\r\n    function unstakeData(uint[] memory _tokenIDs) internal {\r\n        for (uint i; i < _tokenIDs.length; i++) {\r\n            isNFTStaked[_tokenIDs[i]] = false;\r\n        }\r\n    }\r\n\r\n    // return all the staked information of given user in the form of array.\r\n    function UserInformation(address _addr) public view returns(Stake[] memory _userData){\r\n        return stakesOf[_addr];\r\n    }\r\n\r\n    // return all the desposited and withDrawn ERC20 tokens count for a specific user.\r\n    function UserERC20Information(address _addr) public view returns(uint256, uint256){\r\n        return (commulativeDepositTokensOf[_addr], commulativeWithdrawTokensOf[_addr]);\r\n    }\r\n\r\n    function emergencyWithdraw(IBEP20 _token,uint256 _amount) external onlyOwner {\r\n         _token.transfer(msg.sender, _amount);\r\n    }\r\n    function emergencyWithdrawBNB(uint256 Amount) external onlyOwner {\r\n        payable(msg.sender).transfer(Amount);\r\n    }\r\n\r\n    // function to change the time according to the seconds of one day.\r\n    function changetime(uint256 _time) external onlyOwner{\r\n        time = _time;\r\n    }\r\n\r\n    function changeMinimmumAmount(uint256 amount) external onlyOwner{\r\n        minimumERC20Deposit = amount;\r\n    }\r\n\r\n    function setMinMaxNFT(uint256 _min,uint256 _max) external onlyOwner{\r\n        maximumNFT = _max;\r\n        minimumNFT = _min;\r\n    }\r\n\r\n    function addorRemoveSpam(address _Addr,bool _state) external onlyOwner{\r\n        isSpam[_Addr]=_state;\r\n    }\r\n    \r\n\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n   \r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n\r\n    function Pause() external onlyOwner{\r\n        _paused=true;\r\n    }\r\n     function UnPause() external onlyOwner{\r\n        _paused=false;\r\n    }\r\n    function changeToken(IBEP20 addr) public onlyOwner{\r\n        Token=addr;\r\n        \r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_tokenaddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Deposite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"UserERC20Information\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"UserInformation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_NFTs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeTime\",\"type\":\"uint256\"}],\"internalType\":\"struct NFT_Staking.Stake[]\",\"name\":\"_userData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"addorRemoveSpam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeMinimmumAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"changetime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commulativeDepositTokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commulativeWithdrawTokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deductionPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockableDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"farm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isNFTStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSpam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumERC20Deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan1_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan2_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan3_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan4_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan_four_180reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan_four_30reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan_four_360reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan_four_90reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan_one_180reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan_one_30reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan_one_360reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan_one_90reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan_three_180reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan_three_30reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan_three_360reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan_three_90reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan_two_180reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan_two_30reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan_two_360reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plan_two_90reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMinMaxNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plan4_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan_four_30reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan_four_90reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan_four_180reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan_four_360reward\",\"type\":\"uint256\"}],\"name\":\"setplan_four_Counts_reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plan_one_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan_one_30reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan_one_90reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan_one_180reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan_one_360reward\",\"type\":\"uint256\"}],\"name\":\"setplan_one__Counts_reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plan_three_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan_three_30reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan_three_90reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan_three_180reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan_three_360reward\",\"type\":\"uint256\"}],\"name\":\"setplan_three__Counts_reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plan_two_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan_two_30reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan_two_90reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan_two_180reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan_two_360reward\",\"type\":\"uint256\"}],\"name\":\"setplan_two__Counts_reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFT_Staking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000b4cb54a2078816516ea1b176fba58b0a0bde815f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://077e1d61549954716bbc4d7077c368ff9c7edc4898a6cb406aa461f197f07797"}