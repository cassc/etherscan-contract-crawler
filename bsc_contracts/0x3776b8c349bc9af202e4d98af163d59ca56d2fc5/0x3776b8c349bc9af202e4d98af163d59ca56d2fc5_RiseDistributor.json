{"SourceCode": "// Copyright (c) 2022 EverRise Pte Ltd. All rights reserved.\r\n// EverRise licenses this file to you under the MIT license.\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.15;\r\n\r\n/*\r\n   ________                              _______   __\r\n  /        |                            /       \\ /  |\r\n $$$$$$$$/__     __  ______    ______  $$$$$$$  |$$/   _______   ______  v3.14159265\r\n $$ |__  /  \\   /  |/      \\  /      \\ $$ |__$$ |/  | /       | /      \\\r\n $$    | $$  \\ /$$//$$$$$$  |/$$$$$$  |$$    $$< $$ |/$$$$$$$/ /$$$$$$  |\r\n $$$$$/   $$  /$$/ $$    $$ |$$ |  $$/ $$$$$$$  |$$ |$$      \\ $$    $$ |\r\n $$ |_____ $$ $$/  $$$$$$$$/ $$ |      $$ |  $$ |$$ | $$$$$$  |$$$$$$$$/\r\n $$       | $$$/   $$       |$$ |      $$ |  $$ |$$ |/     $$/ $$       |\r\n $$$$$$$$/   $/     $$$$$$$/ $$/       $$/   $$/ $$/ $$$$$$$/   $$$$$$$/ Magnum opus\r\n \r\nLearn more about EverRise and the EverRise Ecosystem of dApps and\r\nhow our utilities and partners can help protect your investors\r\nand help your project grow: https://everrise.com\r\n                            ,\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\r\n                       \u2591\u2592\u2592\u2592\u2562\u2563\u2562\u2563\u2563\u2563\u2563\u2562\u2562\u2562\u2562\u2562\u2562\u2562\u2562\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2562\u2592\u2592\u2592\u2592\u2591.\r\n                   \u2591\u2592\u2592\u2562\u2563\u2562\u2562\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2562\u2562\u2562\u2562\u2562\u2562\u2562\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\r\n               ,\u2591\u2565\u2592\u2563\u2562\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2562\u2562\u2562\u2562\u2562\u2562\u2562\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\r\n             \u2553\u2565\u2592\u2562\u2562\u2563\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2562\u2562\u2562\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591.\r\n           \u2553\u2565\u2562\u256b\u2563\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2562\u2562\u2563\u2563\u2592\u2592\u2592\u2592\u2562\u2562\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591.\r\n         ,\u2592\u2562\u256b\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2591  \u2591\u2592\u2562\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591.\r\n       ,\u2592\u2562\u256b\u256b\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2591\u2591    `\u2591\u2592\u2592\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\r\n      \u2591\u2592\u2562\u256b\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2591        `\u2591\u2592\u2592\u2562\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591.\r\n     \u2591\u2562\u256b\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2591            `\u2592\u2592\u2592\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\r\n   ,\u2591\u2592\u2562\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2562\u2563\u2592\u2591`               \"\u2592\u2592\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\r\n   \u2591\u2562\u2562\u256b\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2591                   \u2591\u2592\u2592\u2562\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\r\n .\u2591\u2592\u256b\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2592\u2592\u2591                      `\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\r\n \u2591\u2592\u2562\u256b\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2562\u2563\u2592\u2592\u2591`      \u2591\u2591\u2592\u2591    \u2591\u2592\u2591\u2591       \u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591,\r\n \u2592\u2592\u2562\u256b\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2592\u2592\u2591     ,\u2591\u2592\u2592\u2563\u2563\u2592\u2591   \u2591\u2562\u2592\u2592\u2592\u2591,      \u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\r\n \u2563\u2563\u2562\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2592`    ,\u2553\u2592\u2592\u2562\u256b\u2563\u2563\u2592\u2592    \u2591\u2592\u2592\u2563\u2563\u2592\u2592\u2592\u2591.     \u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\r\n \u2562\u2562\u2563\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2592`   ,,\u2592\u2562\u2562\u256b\u2563\u2563\u2563\u2563\u2592\u2592\u2591    \u2591\u2592\u2592\u2563\u2563\u2563\u2562\u2563\u2592\u2592\u2591\u2591     \u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\r\n \u2563\u2563\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2592\u2591`  ,\u2592\u2592\u2562\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2591    \u2591\u2591\u2592\u2592\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2591.   \"\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\r\n \u2563\u2563\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2592\u2592\u2591 \u2591\u2591\u2592\u2562\u2562\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2591      \u2591\u2592\u2592\u2562\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2591,  \u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\r\n \u2562\u2562\u2563\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2592\u2591\u2591\u2592\u2592\u2562\u2562\u2562\u256b\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2562\u2592\u2592        \u2591\u2592\u2562\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\r\n \u2563\u2563\u2562\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2592\u2562\u2562\u2562\u2563\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2562\u2563\u2592\u2591        \u2591\u2592\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\r\n \u2592\u2592\u2562\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2591        .\u2592\u2592\u2592\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\r\n \u2592\u2592\u2562\u256b\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2562\u2592\u2592\u2591\u2591         \u2591\u2592\u2592\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\r\n \u2591\u2591\u2592\u256b\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2591          \u2591\u2591\u2592\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\r\n   \u2592\u256b\u2563\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2591`           \u2591\u2592\u2562\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\r\n   \u2591\u2592\u2562\u256b\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2591             \u2592\u2562\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591`\r\n    `\u2592\u2562\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592              \u2591\u2592\u2592\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\r\n     \u2514\u2592\u2562\u2562\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2591              \u2591\u2592\u2592\u2592\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\r\n      `\u2591\u2592\u2562\u2562\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2591              \u2591\u2591\u2592\u2592\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\r\n        \u2591\u2592\u2562\u2562\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2591                \u2591\u2592\u2592\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591`\r\n          \u2591\u2592\u2562\u2562\u256b\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2592                  \u2591\u2592\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591`\r\n            `\u2592\u2562\u2563\u2562\u2563\u2593\u2593\u2593\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2562\u2592\u2591                  \u2591\u2592\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591`\r\n               \u2591\u2592\u2562\u2562\u2562\u2563\u2593\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2563\u2592\u2591                  .\u2592\u2592\u2592\u2563\u2563\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\r\n                 `\u2591\u2592\u2562\u2562\u2593\u2593\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2591                   \u2591\u2592\u2592\u2592\u2563\u2563\u2563\u2563\u2563\u2592\u2592\u2592\u2591\r\n                    ``\u2559\u2592\u2592\u2563\u2562\u2563\u2592\u2592\u2591                    \u2591\u2591\u2592\u2562\u2592\u2592\u2592\u2592\u2591`\r\n                        ``\u2559\u255c``                       ````\r\n*/\r\n\r\nerror NotZeroAddress();    // 0x66385fa3\r\nerror CallerNotApproved(); // 0x4014f1a5\r\nerror InvalidAddress();    // 0xe6c4247b\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ninterface IOwnable {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function owner() external view returns (address);\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\nerror CallerNotOwner();\r\n\r\ncontract Ownable is IOwnable, Context {\r\n    address public owner;\r\n\r\n    function _onlyOwner() private view {\r\n        if (owner != _msgSender()) revert CallerNotOwner();\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    // Allow contract ownership and access to contract onlyOwner functions\r\n    // to be locked using EverOwn with control gated by community vote.\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner == address(0)) revert NotZeroAddress();\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n    function transferFromWithPermit(address sender, address recipient, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nerror FailedEthSend();\r\nerror MaxDistributionsFromAddress();\r\nerror NotReadyToDistribute();\r\nerror NotAllowedToDistribute();\r\nerror NotAllowedToClaim();\r\nerror InvalidParameter();\r\n\r\ninterface IMementoRise {\r\n    function mint(address to, uint256 tokenId, uint256 amount) external;\r\n    function balanceOf(address account, uint256 tokenId) external view returns (uint256);\r\n    function royaltyAddress() external view returns (address payable);\r\n    function getAllTokensHeld(address account) external view returns (uint96[] memory tokenIds, uint256[] memory amounts);\r\n    function setAllowedCreateFrom(uint16 nftType, address contractAddress) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function price0CumulativeLast() external view returns (uint256);\r\n    function price1CumulativeLast() external view returns (uint256);\r\n}\r\n\r\ninterface INftRise {\r\n    function createRewards(uint256 amount) external;\r\n    function addAddressToCreate(address account) external;\r\n}\r\n\r\ninterface IEverRise is IERC20 {\r\n    function owner() external returns (address);\r\n    function uniswapV2Pair() external view returns (IUniswapV2Pair);\r\n}\r\n\r\nstruct Stats {\r\n    uint256 reservesBalance;\r\n    uint256 liquidityToken;\r\n    uint256 liquidityCoin;\r\n    uint256 staked;\r\n    uint256 aveMultiplier;\r\n    uint256 rewards;\r\n    uint256 volumeBuy;\r\n    uint256 volumeSell;\r\n    uint256 volumeTrade;\r\n    uint256 bridgeVault;\r\n    uint256 tokenPriceCoin;\r\n    uint256 coinPriceStable;\r\n    uint256 tokenPriceStable;\r\n    uint256 marketCap;\r\n    uint128 blockNumber;\r\n    uint64 timestamp;\r\n    uint32 holders;\r\n    uint8 tokenDecimals;\r\n    uint8 coinDecimals;\r\n    uint8 stableDecimals;\r\n    uint8 multiplierDecimals;\r\n}\r\n\r\ninterface IEverStats {\r\n    function getStats() external view returns (Stats memory stats);\r\n}\r\n\r\nstruct DistributorDetails {\r\n    uint128 seed;\r\n    uint96 distributedAmount; // Max 79 Bn tokens\r\n    uint16 distributions; // Max 16k distributions\r\n    uint16 claims; // Max 16k claims\r\n} // Total 256 bits, 20000 gwei gas\r\n\r\nIERC20 constant veRiseAddress = IERC20(\r\n    0xDbA7b24257fC6e397cB7368B4BC922E944072f1b\r\n);\r\nIEverRise constant everRiseToken = IEverRise(\r\n    0xC17c30e98541188614dF99239cABD40280810cA3\r\n);\r\nIMementoRise constant mementoRise = IMementoRise(\r\n    0x1C57a5eE9C5A90C9a5e31B5265175e0642b943b1\r\n);\r\nINftRise constant nftRise = INftRise(\r\n    0x23cD2E6b283754Fd2340a75732f9DdBb5d11807e\r\n);\r\nIEverStats constant everStats = IEverStats(\r\n    0x889f26f688f0b757F84e5C07bf9FeC6D6c368Af2\r\n);\r\n\r\ncontract RiseDistributor is Ownable {\r\n    event TransferExternalTokens(address indexed tokenAddress, address indexed to, uint256 count);\r\n    event TransferEthBalance(address indexed to, uint256 count);\r\n    event ExclusionListChanged(address indexed account, bool excluded);\r\n    event RiseFeeAddressChanged(address indexed account);\r\n    event MaxDistributeAllowedChanged(uint256 maxTimesDistributeAllowed);\r\n    event RiseFeeUpdated(uint256 riseFee);\r\n    event RemainingAmountUpdated(uint256 newRemainingAmount);\r\n    event MintFeeUpdated(uint256 mintFee);\r\n    event DistributionVariablesUpdated(uint256 A, uint256 B, uint256 C);\r\n    event BaselineAmountToDistributeUpdated(uint256 amount);\r\n    event DistributedToken(address indexed token, uint256 amount);\r\n\r\n    uint256 immutable tokenIdBase;\r\n\r\n    uint256 public riseFee = 10_000 * 10**18;\r\n    address public riseFeeAddress = 0x869Cf2253206951D16dB746dDF2212809BA8C8a3;\r\n\r\n    uint256 public maxTimesDistributeAllowed = 1;\r\n    uint256 public mintFee;\r\n    uint256 public nextClaim = block.timestamp + 480 days;\r\n    uint256 public launchTime;\r\n\r\n    uint256 public distributionVariableA = 15438;\r\n    uint256 public distributionVariableB = 11;\r\n    uint256 public distributionVariableC = 100135;\r\n    uint256 public baselineAmountToDistribute = 1_423_555_575  * 10**18; \r\n\r\n    uint256 public remainingAmount;\r\n    uint256 public lastDistributionAmount;\r\n    uint256 public lastRemainingAmount;\r\n    uint256 public totalDistributedAmount;\r\n\r\n    mapping(address => DistributorDetails) public claimedReward;\r\n    mapping(address => bool) public excludedFromDistributeLimit;\r\n\r\n    // Start at 1 so first set isn't more expensive\r\n    uint256 private _countClaimed = 1;\r\n    bool private diamondAwarded;\r\n\r\n    constructor() {\r\n        mintFee = getDefaultCreateFee();\r\n        tokenIdBase = 4 + (getChain() << 16);\r\n        address deployer = everRiseToken.owner();\r\n        excludedFromDistributeLimit[deployer] = true;\r\n        transferOwnership(deployer);\r\n    }\r\n\r\n    function getAccountDetails(address account) public view returns \r\n        (bool canClaim, \r\n        bool canDistribute, \r\n        bool isStaker, \r\n        bool isNftHolder, \r\n        uint128 timeToNextDistribution, \r\n        uint128 _nextClaim, \r\n        uint128 timeStamp,\r\n        uint256 amountToDistribute)\r\n    {\r\n        DistributorDetails memory details = claimedReward[account];\r\n        canClaim = details.claims < details.distributions;\r\n        canDistribute = details.distributions < maxTimesDistributeAllowed && checkNftHolder(account);\r\n        isStaker = veRiseAddress.balanceOf(account) > 0;\r\n        isNftHolder = checkNftHolder(account);\r\n        timeToNextDistribution = uint128(block.timestamp < nextClaim ? nextClaim - block.timestamp : 0);\r\n        _nextClaim = uint128(nextClaim);\r\n        timeStamp = uint128(block.timestamp);\r\n\r\n        amountToDistribute = getAmountToDistribute(remainingAmount, daysSince(_nextClaim));\r\n        if (timeToNextDistribution > 0) {\r\n            if (timeToNextDistribution > 1 days) {\r\n                amountToDistribute = 0;\r\n            } else {\r\n                amountToDistribute = amountToDistribute * (1 days - timeToNextDistribution) / 1 days;\r\n            }\r\n        }\r\n    }\r\n\r\n    function activate(uint256 tokensToDistribute) external onlyOwner {\r\n        tokensToDistribute *= 10**18;\r\n        \r\n        require(tokensToDistribute >= baselineAmountToDistribute / 100, \"Distribution tokens too low\");\r\n        require(tokensToDistribute <= baselineAmountToDistribute, \"Distribution tokens too high\");\r\n\r\n        launchTime = nextClaim = getNextClaim(uint160(address(block.coinbase)));\r\n        lastRemainingAmount = remainingAmount = tokensToDistribute;\r\n        lastDistributionAmount = 0;\r\n    }\r\n\r\n    function claimDistributorAchievement() external payable returns (uint256 tokenId) {\r\n        address account = _msgSender();\r\n\r\n        DistributorDetails memory details = claimedReward[account];\r\n\r\n        if (details.claims >= details.distributions) revert NotAllowedToClaim();\r\n\r\n        uint16 claims = details.claims;\r\n        unchecked {\r\n            ++claims;\r\n        }\r\n        details.claims = claims;\r\n\r\n        claimedReward[account] = details;\r\n\r\n        everRiseToken.transferFrom(account, riseFeeAddress, riseFee);\r\n        distributeMintFee(mementoRise.royaltyAddress());\r\n\r\n        ++_countClaimed;\r\n        tokenId = getTokenId(account, details.seed);\r\n\r\n        mementoRise.mint(account, tokenId, 1);\r\n    }\r\n\r\n    function distributeRiseRewards() external returns (uint256) {\r\n        address account = _msgSender();\r\n        if (block.timestamp < nextClaim) revert NotReadyToDistribute();\r\n\r\n        DistributorDetails memory details = claimedReward[account];\r\n        if (!excludedFromDistributeLimit[account]) {\r\n            // Check eligibility\r\n            if (details.distributions >= maxTimesDistributeAllowed)\r\n                revert MaxDistributionsFromAddress();\r\n            if (\r\n                veRiseAddress.balanceOf(account) == 0 &&\r\n                !checkNftHolder(account)\r\n            ) revert NotAllowedToDistribute();\r\n        }\r\n\r\n        uint256 remaining = remainingAmount;\r\n        uint256 amount = getAmountToDistribute(remaining, daysSinceStart());\r\n\r\n        require(amount < 5 * 10**6 * 10**18, \"Daily amount is too high\");\r\n\r\n        if (amount == 0) revert(\"No RISE to distribute\");\r\n\r\n        uint256 seed0 = uint256(blockhash(block.number - 1));\r\n\r\n        ++details.distributions;\r\n        details.distributedAmount += uint96(amount);\r\n        details.seed = uint128(seed0);\r\n\r\n        claimedReward[account] = details;\r\n        nextClaim = getNextClaim(uint160(address(block.coinbase)));\r\n\r\n        lastRemainingAmount = remaining;\r\n        lastDistributionAmount = amount;\r\n\r\n        emit DistributedToken(address(everRiseToken), amount);\r\n        \r\n        remainingAmount -= amount;\r\n        totalDistributedAmount += amount;\r\n\r\n        // Do transfer\r\n        everRiseToken.transfer(address(nftRise), amount);\r\n        nftRise.createRewards(amount);\r\n        \r\n        return amount;\r\n    }\r\n\r\n    function countClaimed() external view returns (uint256) {\r\n        // Subtract one to return real count\r\n        return _countClaimed - 1;\r\n    }\r\n\r\n    function changeRiseFeeAddress(address account) external onlyOwner {\r\n        if (account == address(0)) revert NotZeroAddress();\r\n\r\n        riseFeeAddress = account;\r\n\r\n        emit RiseFeeAddressChanged(account);\r\n    }\r\n\r\n    function changeRemainingAmount(uint256 newRemainingAmount) external onlyOwner {\r\n        require(newRemainingAmount <= baselineAmountToDistribute, \"Distribution tokens too high\");\r\n        remainingAmount = newRemainingAmount;\r\n\r\n        emit RemainingAmountUpdated(newRemainingAmount);\r\n    }\r\n\r\n    function excludeFromDistributeLimit(address account, bool excluded) external onlyOwner {\r\n        if (account == address(0)) revert NotZeroAddress();\r\n\r\n        excludedFromDistributeLimit[account] = excluded;\r\n\r\n        emit ExclusionListChanged(account, excluded);\r\n    }\r\n\r\n    function changeMaxDistributions(uint256 count) external onlyOwner {\r\n        maxTimesDistributeAllowed = count;\r\n\r\n        emit MaxDistributeAllowedChanged(count);\r\n    }\r\n\r\n    function changeRiseFee(uint256 value) external onlyOwner {\r\n        if (value < 1 * 10**18) revert InvalidParameter(); // 1\r\n\r\n        riseFee = value;\r\n\r\n        emit RiseFeeUpdated(value);\r\n    }\r\n\r\n    function changeMintFee(uint256 value) external onlyOwner {\r\n        if (value < 1 * 10**14) revert InvalidParameter(); // 0.0001\r\n\r\n        mintFee = value;\r\n\r\n        emit MintFeeUpdated(value);\r\n    }\r\n\r\n    function setDistributionVariables(uint256 A, uint256 B, uint256 C) external onlyOwner {\r\n        distributionVariableA = A;\r\n        distributionVariableB = B;\r\n        distributionVariableC = C;\r\n\r\n        emit DistributionVariablesUpdated(A, B, C);\r\n    }\r\n\r\n    function setBaselineAmountToDistribute(uint256 amount) external onlyOwner {\r\n        baselineAmountToDistribute = amount;\r\n\r\n        emit BaselineAmountToDistributeUpdated(amount);\r\n    }\r\n\r\n    function getNextClaim(uint256 seed0) public view returns (uint256) {\r\n        return (block.timestamp - (block.timestamp % 1 days) + 1 days) + \r\n            (getRandom(_msgSender(), seed0) % 24 hours);\r\n    }\r\n\r\n    function getAmountToDistribute(uint256 remaining, uint256 _daysSinceStart) public view returns (uint256) {\r\n        if (launchTime == 0) return 0;\r\n\r\n        uint256 amountToDistribute = (\r\n            distributionVariableA * _daysSinceStart -\r\n            distributionVariableB * _daysSinceStart * _daysSinceStart +\r\n            distributionVariableC) * 10**18;\r\n\r\n        uint256 theoreticalTotalAmountDistributed = _daysSinceStart == 0\r\n            ? 0\r\n            : theoreticTotalAmount(_daysSinceStart - 1);\r\n\r\n        uint256 theoreticalRemaining = baselineAmountToDistribute < theoreticalTotalAmountDistributed\r\n            ? 0 \r\n            : (baselineAmountToDistribute - theoreticalTotalAmountDistributed);\r\n\r\n        if (theoreticalRemaining != 0) {\r\n            uint256 factor = (remaining * 10**18) / (theoreticalRemaining);\r\n            amountToDistribute = amountToDistribute * factor / 10**18;\r\n        } else {\r\n            amountToDistribute = lastDistributionAmount;\r\n        }\r\n\r\n        uint256 minDailyDelta = lastRemainingAmount == 0\r\n            ? 0\r\n            : (lastDistributionAmount / lastRemainingAmount) * remaining;\r\n\r\n        amountToDistribute = amountToDistribute > minDailyDelta\r\n            ? amountToDistribute\r\n            : minDailyDelta;\r\n\r\n        amountToDistribute = amountToDistribute > remaining\r\n            ? remaining\r\n            : amountToDistribute;\r\n\r\n        uint256 balance = everRiseToken.balanceOf(address(this));\r\n        if (balance < remaining) remaining = balance;\r\n\r\n        amountToDistribute = amountToDistribute > remaining\r\n            ? remaining\r\n            : amountToDistribute;\r\n\r\n        return amountToDistribute;\r\n    }\r\n\r\n    function daysSince(uint256 timestamp) public view returns (uint256) {\r\n        uint256 ts = timestamp - (timestamp % 1 days);\r\n        uint256 startDay = launchTime;\r\n        startDay -= (startDay % 1 days);\r\n        return (ts - startDay) / 1 days;\r\n    }\r\n\r\n    function daysSinceStart() public view returns (uint256) {\r\n        return daysSince(block.timestamp);\r\n    }\r\n\r\n    function theoreticTotalAmount(uint256 day) public view returns (uint256) {\r\n        uint256 aPart = (day + 1) * (day * distributionVariableA) / 2;\r\n        uint256 k0 = 2;\r\n        uint256 k1 = 3;\r\n        uint256 k2 = 1;\r\n        uint256 k3 = 0;\r\n        uint256 bPart = (k3 +\r\n            k2 * day +\r\n            (day > 1 ? k1 * day * (day - 1) / 2 : 0) +\r\n            (day > 2 ? k0 * day * (day - 1) * (day - 2) / 6 : 0)) * distributionVariableB;\r\n        uint256 cPart = (day + 1) * distributionVariableC;\r\n\r\n        return (aPart - bPart + cPart) * 10**18;\r\n    }\r\n\r\n    function checkNftHolder(address account) public view returns (bool) {\r\n        (, uint256[] memory amounts) = mementoRise.getAllTokensHeld(account);\r\n\r\n        uint256 count = amounts.length;\r\n        if (count == 0) return false;\r\n\r\n        for (uint256 i = 0; i < count; ) {\r\n            if (amounts[i] > 0) return true;\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function getRandom(address account, uint256 prevSeed) private view returns (uint256 seed) {\r\n        IUniswapV2Pair pair = everRiseToken.uniswapV2Pair();\r\n        Stats memory stats = everStats.getStats();\r\n        seed = \r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        pair.price0CumulativeLast(),\r\n                        pair.price1CumulativeLast(),\r\n                        account,\r\n                        stats.coinPriceStable,\r\n                        stats.reservesBalance,\r\n                        stats.staked,\r\n                        stats.volumeBuy,\r\n                        stats.volumeSell,\r\n                        stats.bridgeVault,\r\n                        stats.holders,\r\n                        prevSeed,\r\n                        _countClaimed,\r\n                        block.number,\r\n                        tx.origin\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function getTokenId(address account, uint256 prevSeed) private returns (uint256 tokenId)\r\n    {\r\n        uint256 seed = 0xfff & getRandom(account, prevSeed);\r\n\r\n        tokenId = tokenIdBase;\r\n        // 40% Anodized, 30% bronze, 20% silver, 10% gold, 1 diamond\r\n        bool isDiamond = false;\r\n        if (!diamondAwarded) {\r\n            if (_countClaimed > 470) {\r\n                isDiamond = true;\r\n            } else if (seed == 0xfff) {\r\n                isDiamond = true;\r\n            }\r\n        }\r\n\r\n        if (isDiamond) {\r\n            diamondAwarded = true;\r\n            tokenId += 4 << 24;\r\n        } else if (seed > 3686) {\r\n            // Gold\r\n            tokenId += 3 << 24;\r\n        } else if (seed > 2867) {\r\n            // Silver\r\n            tokenId += 2 << 24;\r\n        } else if (seed > 1639) {\r\n            // Bronze\r\n            tokenId += 1 << 24;\r\n        } \r\n        // Otherwise Anodized\r\n    }\r\n\r\n    function distributeMintFee(address payable receiver) private {\r\n        require(msg.value >= mintFee, \"Mint fee not covered\");\r\n\r\n        uint256 _balance = address(this).balance;\r\n        if (_balance > 0) {\r\n            // Transfer everything, easier than transferring extras later\r\n            _sendEthViaCall(receiver, _balance);\r\n        }\r\n    }\r\n\r\n    function getChain() private view returns (uint256) {\r\n        uint256 chainId = block.chainid;\r\n        if (\r\n            chainId == 1 ||\r\n            chainId == 3 ||\r\n            chainId == 4 ||\r\n            chainId == 5 ||\r\n            chainId == 42\r\n        )\r\n            // Ethereum\r\n            return 4;\r\n        if (chainId == 56 || chainId == 97)\r\n            // BNB\r\n            return 2;\r\n        if (chainId == 137 || chainId == 80001)\r\n            // Polygon\r\n            return 3;\r\n        if (chainId == 250 || chainId == 4002)\r\n            // Fantom\r\n            return 1;\r\n        if (chainId == 43114 || chainId == 43113)\r\n            // Avalanche\r\n            return 0;\r\n\r\n        require(false, \"Unknown chain\");\r\n        return 0;\r\n    }\r\n\r\n    function getDefaultCreateFee() private view returns (uint256) {\r\n        uint256 chainId = block.chainid;\r\n        if (chainId == 1)\r\n            // Ethereum\r\n            return 2 * 10**16; // 0.02\r\n        if (chainId == 56)\r\n            // BNB\r\n            return 1 * 10**17; // 0.1\r\n        if (chainId == 137)\r\n            // Polygon\r\n            return 30 * 10**18; // 30\r\n        if (chainId == 250)\r\n            // Fantom\r\n            return 100 * 10**18; // 100\r\n        if (chainId == 43114)\r\n            // Avalanche\r\n            return 1 * 10**18; // 1\r\n\r\n        return 300 * 10**18;\r\n    }\r\n\r\n    // Token balance management\r\n\r\n    function transferBalance(uint256 amount) external onlyOwner {\r\n        _sendEthViaCall(_msgSender(), amount);\r\n    }\r\n\r\n    function transferExternalTokens(\r\n        address tokenAddress,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        if (tokenAddress == address(0)) revert NotZeroAddress();\r\n        _transferTokens(tokenAddress, to, amount);\r\n    }\r\n\r\n    function _sendEthViaCall(address payable to, uint256 amount) private {\r\n        (bool sent, ) = to.call{value: amount}(\"\");\r\n        if (!sent) revert FailedEthSend();\r\n        emit TransferEthBalance(to, amount);\r\n    }\r\n\r\n    function _transferTokens(\r\n        address tokenAddress,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        IERC20(tokenAddress).transfer(to, amount);\r\n        emit TransferExternalTokens(tokenAddress, to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedEthSend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxDistributionsFromAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowedToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowedToDistribute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotReadyToDistribute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BaselineAmountToDistributeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"B\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"C\",\"type\":\"uint256\"}],\"name\":\"DistributionVariablesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"ExclusionListChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTimesDistributeAllowed\",\"type\":\"uint256\"}],\"name\":\"MaxDistributeAllowedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"}],\"name\":\"MintFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRemainingAmount\",\"type\":\"uint256\"}],\"name\":\"RemainingAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RiseFeeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"riseFee\",\"type\":\"uint256\"}],\"name\":\"RiseFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"TransferEthBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"TransferExternalTokens\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensToDistribute\",\"type\":\"uint256\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baselineAmountToDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"changeMaxDistributions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRemainingAmount\",\"type\":\"uint256\"}],\"name\":\"changeRemainingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeRiseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"changeRiseFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkNftHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDistributorAchievement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedReward\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"seed\",\"type\":\"uint128\"},{\"internalType\":\"uint96\",\"name\":\"distributedAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"distributions\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"claims\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"daysSince\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daysSinceStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeRiseRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionVariableA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionVariableB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionVariableC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromDistributeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromDistributeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDetails\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canClaim\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canDistribute\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStaker\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isNftHolder\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"timeToNextDistribution\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_nextClaim\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeStamp\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amountToDistribute\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daysSinceStart\",\"type\":\"uint256\"}],\"name\":\"getAmountToDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed0\",\"type\":\"uint256\"}],\"name\":\"getNextClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDistributionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRemainingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimesDistributeAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riseFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setBaselineAmountToDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"C\",\"type\":\"uint256\"}],\"name\":\"setDistributionVariables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"theoreticTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferExternalTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RiseDistributor", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://93185e755b2319f538484a20cf8b12ff42993116e3e6608c200bfb46bd9ebc1a"}