{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IBEP20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract WorldWideToken is IBEP20 {\r\n    address private _owner;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256) public balances;\r\n    \r\n    address[] public affWallets;\r\n    uint256[] public affAmounts;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 public sellTax = 10;\r\n    uint256 public buyTax = 10;\r\n    uint256 public transferTax = 10;\r\n    uint256 public aff = 500;\r\n    address[] public dexAddressList;\r\n    address[] public cexAddressList;\r\n    mapping(address => uint8) public dexAddressListM;\r\n    mapping(address => uint8) public cexAddressListM;\r\n    mapping(address => uint8) public allowListSaleTax;\r\n    mapping(address => uint8) public allowListBuyTax;\r\n    mapping(address => uint8) public allowListTransferTax;\r\n    mapping(address => uint8) public notApyList;\r\n    address[] public owners;\r\n    uint public numConfirmationsRequired = 1;\r\n\r\n    mapping(uint => mapping(address => bool)) public isConfirmed;\r\n\r\n    Transaction[] public transactions;\r\n\r\n    uint256 private _totalSupply = 0;\r\n    uint8 constant private _decimals = 18;\r\n    uint8 public taxFree = 0;\r\n    string constant private _symbol = \"WORLD\";\r\n    string constant private _name = \"WORLD\";\r\n    uint256 public constant MAX_TOTAL_SUPPLY = 10000000 * (10 ** _decimals);\r\n    uint256 public apyPercent = 100;\r\n\r\n    address immutable public convertWorldWalletBuy = address(0xEbe704Ee800Bd29293a54f0A7106AAc82078b3F5);\r\n    address immutable public convertWorldWalletSell = address(0xF0692700EfCC948A892155629D363FD5CdC00895);\r\n    address immutable public worldPoolWallet = address(0x1f70Eb3864B59223c829A338f7f8bee29b293227);\r\n    address immutable public luquidityPoolWorld = address(0x8506774B2694c6082F67628Ed87d6477430b4A71);\r\n    address immutable public affiliateWallet = address(0xFB009A66C47669c3c0B32c9319c111Ba84b45a3B);\r\n    address immutable public teamWallet = address(0xCc20cfF70070968Fc7866566D1848a54730C3017);\r\n\r\n    mapping(address => uint256) public lastClaims;\r\n    mapping(address => uint256) public lastBalances;\r\n    mapping(address => uint256) public apyAmounts;\r\n\r\n    mapping(address => uint256) public lastWPClaims;\r\n    mapping(address => uint256) public lastWPBalances;\r\n\r\n    uint256 public worldPoolBalance = 0;\r\n    uint256 public worldPoolLeftToday = 0;\r\n    uint256 public lastWorldPoolBalanceTime = 0;\r\n\r\n    struct Transaction {\r\n        address to;\r\n        uint value;\r\n        bytes data;\r\n        bool executed;\r\n        uint numConfirmations;\r\n    }\r\n\r\n    modifier onlyOwn() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyContract() {\r\n        require(_msgSender() == address(this), \"call not from contract\");\r\n        _;\r\n    }\r\n\r\n    modifier txExists(uint _txIndex) {\r\n        require(_txIndex < transactions.length, \"tx does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint _txIndex) {\r\n        require(!transactions[_txIndex].executed, \"tx already executed\");\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint _txIndex) {\r\n        require(!isConfirmed[_txIndex][msg.sender], \"tx already confirmed\");\r\n        _;\r\n    }\r\n\r\n    event APYChange(uint256 apy);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event Received(address indexed sender, uint256 value);\r\n    event Deposit(address indexed sender, uint amount, uint balance);\r\n    event SubmitTransaction(\r\n        address indexed owner,\r\n        uint indexed txIndex,\r\n        address indexed to,\r\n        uint value,\r\n        bytes data\r\n    );\r\n    event ConfirmTransaction(address indexed owner, uint indexed txIndex);\r\n    event RevokeConfirmation(address indexed owner, uint indexed txIndex);\r\n    event ExecuteTransaction(address indexed owner, uint indexed txIndex);\r\n    event RequirementChange(uint256 _required);\r\n    event SendDistributeTxToConfirm(uint256 tx_index);\r\n\r\n    constructor() {\r\n        _owner = _msgSender();\r\n        _mint(_owner, MAX_TOTAL_SUPPLY);\r\n\r\n        allowListSaleTax[address(this)] = 1;\r\n        allowListBuyTax[address(this)] = 1;\r\n        allowListTransferTax[address(this)] = 1;\r\n        notApyList[address(this)] = 1;\r\n\r\n        allowListSaleTax[_owner] = 1;\r\n        allowListBuyTax[_owner] = 1;\r\n        allowListTransferTax[_owner] = 1;\r\n        notApyList[_owner] = 1;\r\n\r\n        notApyList[worldPoolWallet] = 1;\r\n        allowListSaleTax[worldPoolWallet] = 1;\r\n        allowListBuyTax[worldPoolWallet] = 1;\r\n        allowListTransferTax[worldPoolWallet] = 1;\r\n\r\n        notApyList[convertWorldWalletBuy] = 1;\r\n        allowListSaleTax[convertWorldWalletBuy] = 1;\r\n        allowListBuyTax[convertWorldWalletBuy] = 1;\r\n        allowListTransferTax[convertWorldWalletBuy] = 1;\r\n\r\n        notApyList[convertWorldWalletSell] = 1;\r\n        allowListSaleTax[convertWorldWalletSell] = 1;\r\n        allowListBuyTax[convertWorldWalletSell] = 1;\r\n        allowListTransferTax[convertWorldWalletSell] = 1;\r\n\r\n        notApyList[luquidityPoolWorld] = 1;\r\n        allowListSaleTax[luquidityPoolWorld] = 1;\r\n        allowListBuyTax[luquidityPoolWorld] = 1;\r\n        allowListTransferTax[luquidityPoolWorld] = 1;\r\n\r\n        notApyList[affiliateWallet] = 1;\r\n        allowListSaleTax[affiliateWallet] = 1;\r\n        allowListBuyTax[affiliateWallet] = 1;\r\n        allowListTransferTax[affiliateWallet] = 1;\r\n\r\n        notApyList[teamWallet] = 1;\r\n        allowListSaleTax[teamWallet] = 1;\r\n        allowListBuyTax[teamWallet] = 1;\r\n        allowListTransferTax[teamWallet] = 1;\r\n        \r\n        emit OwnershipTransferred(address(0), _msgSender());\r\n        owners.push(_owner);\r\n    }\r\n\r\n    receive() external payable {\r\n        // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u044d\u0444\u0438\u0440\u0430\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    function isOwner(address addr) public view returns (bool) {\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (owners[i] == addr) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function contractAddOwner(address addr) public onlyContract {\r\n        require(addr != address(0), \"MultisigWallet: invalid owner\");\r\n        require(!isOwner(addr), \"MultisigWallet: duplicate owner\");\r\n\r\n        owners.push(addr);\r\n    }\r\n\r\n    function addOwner(address addr) public onlyOwner returns (uint) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractAddOwner(address)\", addr);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractRemoveOwner(address addr) public onlyContract {\r\n        require(isOwner(addr), \"MultisigWallet: owner not found\");\r\n        require(owners.length > 1, \"MultisigWallet: cannot remove the last owner\");\r\n\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (owners[i] == addr) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        owners.pop();\r\n    }\r\n\r\n    function removeOwner(address addr) public onlyOwner returns (uint) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractRemoveOwner(address)\", addr);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractChangeRequirement(uint256 _required) public onlyContract {\r\n        require(_required > 0 && _required <= owners.length, \"MultisigWallet: invalid requirement\");\r\n        numConfirmationsRequired = _required;\r\n\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    function changeRequirement(uint256 _required) public onlyOwner returns (uint) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractChangeRequirement(uint256)\", _required);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function submitTransaction(\r\n        bytes memory _data\r\n    ) public onlyOwner returns (uint) {\r\n        address _to = payable(address(this));\r\n        uint _value = 0;\r\n        uint txIndex = transactions.length;\r\n\r\n        transactions.push(\r\n            Transaction({\r\n                to: _to,\r\n                value: _value,\r\n                data: _data,\r\n                executed: false,\r\n                numConfirmations: 0\r\n            })\r\n        );\r\n\r\n        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);\r\n\r\n        return txIndex;\r\n    }\r\n\r\n    function confirmTransaction(\r\n        uint _txIndex\r\n    ) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) notConfirmed(_txIndex) {\r\n        transactions[_txIndex].numConfirmations += 1;\r\n        isConfirmed[_txIndex][msg.sender] = true;\r\n\r\n        emit ConfirmTransaction(msg.sender, _txIndex);\r\n\r\n        if(transactions[_txIndex].numConfirmations == numConfirmationsRequired){\r\n            executeTransaction(_txIndex);\r\n        }\r\n    }\r\n\r\n    function executeTransaction(\r\n        uint _txIndex\r\n    ) internal onlyOwner txExists(_txIndex) notExecuted(_txIndex) {\r\n        transactions[_txIndex].executed = true;\r\n\r\n        (bool success, ) = transactions[_txIndex].to.call{value: transactions[_txIndex].value}(\r\n            transactions[_txIndex].data\r\n        );\r\n\r\n        require(success, \"tx failed\");\r\n\r\n        emit ExecuteTransaction(msg.sender, _txIndex);\r\n    }\r\n\r\n    function revokeConfirmation(\r\n        uint _txIndex\r\n    ) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) {\r\n        require(isConfirmed[_txIndex][msg.sender], \"tx not confirmed\");\r\n\r\n        transactions[_txIndex].numConfirmations -= 1;\r\n        isConfirmed[_txIndex][msg.sender] = false;\r\n\r\n        emit RevokeConfirmation(msg.sender, _txIndex);\r\n    }\r\n\r\n    function getOwners() public view returns (address[] memory) {\r\n        return owners;\r\n    }\r\n\r\n    function getTransactionCount() public view returns (uint) {\r\n        return transactions.length;\r\n    }\r\n\r\n    function getTransaction(\r\n        uint _txIndex\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            address to,\r\n            uint value,\r\n            bytes memory data,\r\n            bool executed,\r\n            uint numConfirmations\r\n        )\r\n    {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n\r\n        return (\r\n            transaction.to,\r\n            transaction.value,\r\n            transaction.data,\r\n            transaction.executed,\r\n            transaction.numConfirmations\r\n        );\r\n    }\r\n\r\n    function contractChangeTax(uint256 newTax, uint256 t) public onlyContract returns (bool) {\r\n        if (t == 0) {\r\n            require (newTax >= 2 && newTax <= 25, \"tax must be between 2% and 25%\");\r\n            sellTax = newTax;\r\n        } else if (t == 1) {\r\n            require (newTax >= 2 && newTax <= 25, \"tax must be between 2% and 25%\");\r\n            buyTax = newTax;\r\n        } else {\r\n            require (newTax <= 5, \"no more than 5%\");\r\n            transferTax = newTax;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function changeTax(uint256 newTax, uint256 t) public onlyOwner returns (uint) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractChangeTax(uint256,uint256)\", newTax, t);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractChangeAff(uint256 newAff) public onlyContract returns (bool) {\r\n        aff = newAff;\r\n        return true;\r\n    }\r\n\r\n    function changeAff(uint256 newAff) public onlyOwner returns (uint) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractChangeAff(uint256)\", newAff);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractSetTaxFree(uint8 i) public onlyContract returns (bool) {\r\n        taxFree = i;\r\n        return true;\r\n    }\r\n    \r\n    function setTaxFree(uint8 i) public onlyOwner returns (uint) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractSetTaxFree(uint8)\", i);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractChangeApy(uint256 apy) public onlyContract returns (bool) {\r\n        apyPercent = apy;\r\n        emit APYChange(apy);\r\n        return true;\r\n    }\r\n\r\n    function changeApy(uint256 apy) public onlyOwner returns (uint) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractChangeApy(uint256)\", apy);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    //makes the address the wallet of the decentralized exchange, for which sales and purchase taxes are included\r\n    function contractAddToNotApyList(address wallet) public onlyContract returns (bool) {\r\n        notApyList[wallet] = 1;\r\n        return true;\r\n    }\r\n\r\n    function addToNotApyList(address wallet) public onlyOwner returns (uint) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractAddToNotApyList(address)\", wallet);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function findIndex(address wallet, address[] memory list) internal pure returns (int256) {\r\n        for (uint256 i = 0; i < list.length; i++) {\r\n            if (list[i] == wallet) {\r\n                return int256(i); // Return the index as a signed integer\r\n            }\r\n        }\r\n        return -1; // Return -1 if the value is not found\r\n    }\r\n\r\n    function contractAddToArr(address wallet, uint8 t) public onlyContract returns (bool) {\r\n        if(t == 1){\r\n            if(dexAddressListM[wallet] != 1){\r\n                dexAddressList.push(wallet);\r\n                dexAddressListM[wallet] = 1;\r\n            }\r\n        }else{\r\n            if(cexAddressListM[wallet] != 1){\r\n                cexAddressList.push(wallet);\r\n                cexAddressListM[wallet] = 1;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function addToArr(address wallet, uint8 t) public onlyOwner returns (uint) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractAddToArr(address,uint8)\", wallet, t);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractWhiteList(address wallet, uint8 e, uint8[] calldata t) public onlyContract returns (bool) {\r\n        if(t[0] == 1 && t[1] == 0 && t[2] == 0){\r\n            allowListSaleTax[wallet] = e;\r\n        } else if(t[1] == 1 && t[0] == 0 && t[2] == 0){\r\n            allowListBuyTax[wallet] = e;\r\n        } else if(t[2] == 1 && t[0] == 0 && t[1] == 0){\r\n            allowListTransferTax[wallet] = e;\r\n        } else if(t[0] == 1 && t[1] == 1 && t[2] == 0){\r\n            allowListSaleTax[wallet] = e;\r\n            allowListBuyTax[wallet] = e;\r\n        } else if(t[0] == 1 && t[1] == 0 && t[2] == 1){\r\n            allowListSaleTax[wallet] = e;\r\n            allowListTransferTax[wallet] = e;\r\n        } else if(t[0] == 0 && t[1] == 1 && t[2] == 1){\r\n            allowListBuyTax[wallet] = e;\r\n            allowListTransferTax[wallet] = e;\r\n        } else if(t[0] == 1 && t[1] == 1 && t[2] == 1){\r\n            allowListSaleTax[wallet] = e;\r\n            allowListBuyTax[wallet] = e;\r\n            allowListTransferTax[wallet] = e;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function whiteList(address wallet, uint8 enable, uint8[] calldata t) public onlyOwner returns (uint) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractWhiteList(address,uint8,uint8[])\", wallet, enable, t);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractRemoveFromArr(address wallet, uint8 t) public onlyContract returns (bool) {\r\n        int256 i = t == 1 ? findIndex(wallet, dexAddressList) : findIndex(wallet, cexAddressList);\r\n        uint256 l = t == 1 ? dexAddressList.length : cexAddressList.length;\r\n        require(i >= 0 && uint256(i) < l, \"Invalid index\");\r\n\r\n        if(t == 1){\r\n            dexAddressList[uint256(i)] = dexAddressList[l - 1];\r\n            dexAddressList.pop();\r\n            dexAddressListM[wallet] = 0;\r\n        } else {\r\n            cexAddressList[uint256(i)] = cexAddressList[l - 1];\r\n            cexAddressList.pop();\r\n            cexAddressListM[wallet] = 0;\r\n        }\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n    function removeFromArr(address wallet, uint8 t) public onlyOwner returns (uint) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractRemoveFromArr(address,uint8)\", wallet, t);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function getAmountAndSendTxs(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        uint256 transferAmount = amount;\r\n        if(taxFree == 0){\r\n            if(dexAddressListM[recipient] == 1){\r\n                //sell\r\n                if(allowListSaleTax[sender] == 0){\r\n                    uint256 sellTaxesAmount = transferAmount*(sellTax*100)/10000;\r\n                    transferAmount = transferAmount - sellTaxesAmount;\r\n\r\n                    uint256 burnedAmount = 1500 * sellTaxesAmount / 10000;\r\n                    _burn(sender, burnedAmount);\r\n                    _transfer_simple(sender, worldPoolWallet, burnedAmount);\r\n                    _transfer_simple(sender, convertWorldWalletSell, 7000 * sellTaxesAmount / 10000);\r\n                }\r\n            } else if(dexAddressListM[sender] == 1) {\r\n                //buy\r\n                if(allowListBuyTax[recipient] == 0){\r\n                    uint256 buyTaxesAmount = transferAmount*(buyTax*100)/10000;\r\n                    uint256 afAmount = aff * buyTaxesAmount / 10000;\r\n                    uint256 burnAffAmount = 1500 * buyTaxesAmount / 10000;\r\n                    transferAmount = transferAmount - buyTaxesAmount;\r\n                    _burn(sender, burnAffAmount - afAmount);\r\n                    _transfer_simple(sender, worldPoolWallet, 1500 * buyTaxesAmount / 10000);\r\n                    _transfer_simple(sender, affiliateWallet, afAmount);\r\n                    _transfer_simple(sender, convertWorldWalletBuy, 7000 * buyTaxesAmount / 10000);\r\n\r\n                    affWallets.push(recipient);\r\n                    affAmounts.push(afAmount);\r\n                }\r\n            } else {\r\n                if(allowListTransferTax[sender] == 0){\r\n                    uint256 transferTaxesAmount = transferAmount*(transferTax*100)/10000;\r\n                    transferAmount = transferAmount - transferTaxesAmount;\r\n                    uint256 taxAmount = transferTaxesAmount / 2;\r\n                    _transfer_simple(sender, worldPoolWallet, taxAmount);\r\n                    _transfer_simple(sender, convertWorldWalletSell, taxAmount);\r\n                }\r\n            }\r\n        }\r\n        return transferAmount;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"BEP20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        uint256 amountReceived = getAmountAndSendTxs(sender, recipient, amount);\r\n        _transfer_simple(sender, recipient, amountReceived);\r\n        \r\n        apyAmounts[sender] += countWalletAPY(sender);\r\n        apyAmounts[recipient] += countWalletAPY(recipient);\r\n\r\n        lastClaims[sender] = block.timestamp;\r\n        lastBalances[sender] = _balances[sender];\r\n\r\n        lastClaims[recipient] = block.timestamp;\r\n        lastBalances[recipient] = _balances[recipient];\r\n\r\n        if(lastWorldPoolBalanceTime == 0 || (block.timestamp - lastWorldPoolBalanceTime) > 86400){\r\n            worldPoolBalance = _balances[address(worldPoolWallet)];\r\n            worldPoolLeftToday = worldPoolBalance;\r\n            lastWorldPoolBalanceTime = block.timestamp;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    function countWalletAPY(address wallet) public view returns (uint256) {\r\n        uint256 lastClaim = lastClaims[wallet] != 0 ? lastClaims[wallet] : block.timestamp;\r\n        uint256 middleBalance = lastBalances[wallet] != 0 ? lastBalances[wallet] : _balances[wallet];\r\n        uint256 amount = ((middleBalance * apyPercent) / 1000000) * ((block.timestamp - lastClaim) / 900);\r\n        return amount;\r\n    }\r\n\r\n\r\n    function countAPY() public view returns(uint256){\r\n        return apyAmounts[_msgSender()] + countWalletAPY(_msgSender());\r\n    }\r\n\r\n    function claimAPY() public {\r\n        if((lastClaims[_msgSender()] + 900) < block.timestamp){\r\n            _transfer_simple(address(this), _msgSender(), countAPY());\r\n            lastClaims[_msgSender()] = block.timestamp;\r\n            lastBalances[_msgSender()] = _balances[_msgSender()];\r\n            apyAmounts[_msgSender()] = 0;\r\n        }\r\n    }\r\n\r\n    function countHoldersWorlds() public view returns(uint256){\r\n        uint256 cHW = _totalSupply - _balances[address(this)] - _balances[worldPoolWallet] - _balances[convertWorldWalletBuy] - _balances[convertWorldWalletSell] - _balances[luquidityPoolWorld] - _balances[address(0x4D98086B36B3AC19bC41B96eDb5468bA6B348688)] - _balances[address(0x4b69fad571884f31c1005F3EB9b7261FCd9e171b)] - _balances[address(0x6e5624e7D078337a64CB605A222EB32AA9A9b102)] - _balances[address(0x881dcbEc3Ba110CEF3D7147243E365b8e9C918a4)];\r\n\r\n        for (uint256 i = 0; i < dexAddressList.length; i++) {\r\n            cHW -= _balances[dexAddressList[i]];\r\n        }\r\n\r\n        for (uint256 j = 0; j < cexAddressList.length; j++) {\r\n            cHW -= _balances[cexAddressList[j]];\r\n        }\r\n\r\n        return cHW;\r\n    }\r\n\r\n\r\n    function countWPClaim() public view returns(uint256){\r\n        uint256 balance = lastWPBalances[_msgSender()] != 0 ? lastWPBalances[_msgSender()] : _balances[_msgSender()];\r\n        return worldPoolBalance * balance / countHoldersWorlds();\r\n    }\r\n\r\n\r\n    function claimWP() public {\r\n        if((lastClaims[_msgSender()] + 86400) < block.timestamp){\r\n            uint256 c = countWPClaim();\r\n            _transfer_simple(worldPoolWallet, _msgSender(), c);\r\n            worldPoolLeftToday -= c;\r\n            lastWPBalances[_msgSender()] = _balances[_msgSender()];\r\n            lastWPClaims[_msgSender()] = block.timestamp;\r\n        }\r\n    }\r\n\r\n\r\n    function allowance(address own, address spender) external view returns (uint256) {\r\n        return _allowances[own][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] - subtractedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer_simple(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        if (_totalSupply < MAX_TOTAL_SUPPLY) {\r\n            require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n            _totalSupply += amount;\r\n            _balances[account] += amount;\r\n            emit Transfer(address(0), account, amount);\r\n        }\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n        _balances[account] -= amount;\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address own,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(own != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n        _allowances[own][spender] = amount;\r\n        emit Approval(own, spender, amount);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n      return _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwn {\r\n      emit OwnershipTransferred(_owner, address(0));\r\n      _owner = address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    * Can only be called by the current owner.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwn {\r\n      _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    */\r\n    function _transferOwnership(address newOwner) internal {\r\n      require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n      emit OwnershipTransferred(_owner, newOwner);\r\n      _owner = newOwner;\r\n    }\r\n\r\n    function contractSendAffiliations(address[] calldata _walletAddresses, uint256[] calldata _amounts) public onlyContract {\r\n        require(_walletAddresses.length == _amounts.length, \"Arrays length mismatch\");\r\n\r\n        for (uint256 i = 0; i < _walletAddresses.length; i++) {\r\n            address walletAddress = _walletAddresses[i];\r\n            uint256 amount = _amounts[i];\r\n\r\n            _transfer_simple(affiliateWallet, walletAddress, amount);\r\n        }\r\n\r\n        delete affWallets;\r\n        delete affAmounts;\r\n    }\r\n\r\n    function sendAffiliations(address[] calldata _walletAddresses, uint256[] calldata _amounts) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractSendAffiliations(address[],uint256[])\", _walletAddresses, _amounts);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function eventParticipate(address to, uint256 amount) external {\r\n        _transfer_simple(msg.sender, to, amount);\r\n    }\r\n\r\n    function getAffData() public view returns (address[] memory, uint256[] memory) {\r\n        return (affWallets, affAmounts);\r\n    }\r\n\r\n    function burn(uint256 amount) external returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    function getLastClaims() external view returns(uint256){\r\n        return lastClaims[_msgSender()];\r\n    }\r\n\r\n    function getWorldPoolLeftToday() external view returns(uint256){\r\n        return worldPoolLeftToday;\r\n    }\r\n\r\n    function getWorldPoolBalance() external view returns(uint256){\r\n        return worldPoolBalance;\r\n    }\r\n\r\n    function getWorldPoolTomorrow() external view returns(uint256){\r\n        return _balances[worldPoolWallet] - worldPoolLeftToday;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"APYChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"ConfirmTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"RevokeConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tx_index\",\"type\":\"uint256\"}],\"name\":\"SendDistributeTxToConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SubmitTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"t\",\"type\":\"uint8\"}],\"name\":\"addToArr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"addToNotApyList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"affAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"affWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"affiliateWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowListBuyTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowListSaleTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowListTransferTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"own\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"apyAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apyPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cexAddressList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cexAddressListM\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAff\",\"type\":\"uint256\"}],\"name\":\"changeAff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"changeApy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"changeTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimWP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractAddOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"t\",\"type\":\"uint8\"}],\"name\":\"contractAddToArr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"contractAddToNotApyList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAff\",\"type\":\"uint256\"}],\"name\":\"contractChangeAff\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"contractChangeApy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"contractChangeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"contractChangeTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"t\",\"type\":\"uint8\"}],\"name\":\"contractRemoveFromArr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractRemoveOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_walletAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"contractSendAffiliations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"i\",\"type\":\"uint8\"}],\"name\":\"contractSetTaxFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"e\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"t\",\"type\":\"uint8[]\"}],\"name\":\"contractWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertWorldWalletBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertWorldWalletSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countHoldersWorlds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countWPClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"countWalletAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dexAddressList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dexAddressListM\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"eventParticipate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAffData\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorldPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorldPoolLeftToday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorldPoolTomorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastWPBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastWPClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWorldPoolBalanceTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luquidityPoolWorld\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"notApyList\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numConfirmationsRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"t\",\"type\":\"uint8\"}],\"name\":\"removeFromArr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_walletAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"sendAffiliations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"i\",\"type\":\"uint8\"}],\"name\":\"setTaxFree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFree\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"enable\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"t\",\"type\":\"uint8[]\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worldPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worldPoolLeftToday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worldPoolWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WorldWideToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1e752a91f7bb22b280b87c6c7a4330e4b8796e168296b900af0a08fecd565d28"}