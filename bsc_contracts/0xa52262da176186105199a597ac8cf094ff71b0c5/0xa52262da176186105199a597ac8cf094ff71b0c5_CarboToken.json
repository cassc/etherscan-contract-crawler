{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/CarboToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/ICarboToken.sol\\\";\\nimport \\\"./interfaces/IDividendManager.sol\\\";\\nimport \\\"./RecoverableFunds.sol\\\";\\nimport \\\"./WithCallback.sol\\\";\\n\\ncontract CarboToken is ICarboToken, Ownable, Pausable, RecoverableFunds, WithCallback {\\n\\n    using SafeMath for uint256;\\n\\n    uint16 private constant PERCENT_RATE = 1000;\\n    uint256 private constant MAX = ~uint256(0);\\n\\n    // -----------------------------------------------------------------------------------------------------------------\\n    // ERC20\\n    // -----------------------------------------------------------------------------------------------------------------\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    string private _name = \\\"CLEANCARBON\\\";\\n    string private _symbol = \\\"CARBO\\\";\\n\\n    function name() override public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() override public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() override public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() override external view returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) override external view returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) override external returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) override external view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) override public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) override external returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) override external returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) override external returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n        return true;\\n    }\\n\\n    function burn(uint256 amount) override external {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount) override external  {\\n        uint256 currentAllowance = _allowances[account][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal whenNotPaused {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n        uint256 rAmount = _getRAmount(amount, _getRate());\\n        require(_rOwned[account] >= rAmount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _decreaseBalance(account, amount, rAmount);\\n        _decreaseTotalSupply(amount, rAmount);\\n        emit Transfer(account, address(0), amount);\\n        _burnCallback(account, amount, rAmount);\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------------------\\n    // PAUSABLE\\n    // -----------------------------------------------------------------------------------------------------------------\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------------------\\n    // FEES\\n    // -----------------------------------------------------------------------------------------------------------------\\n\\n    mapping(FeeType => Fees) private _fees;\\n    mapping(FeeType => FeeAddresses) private _feeAddresses;\\n    address private _dividendsAddress;\\n    address private _buybackAddress;\\n    address private _treasuryAddress;\\n    address private _liquidityAddress;\\n    mapping(address => bool) private _isTaxable;\\n    mapping(address => bool) private _isTaxExempt;\\n\\n    function getFees(FeeType feeType) override external view returns (Fees memory) {\\n        return _fees[feeType];\\n    }\\n\\n    function setFees(FeeType feeType, uint rfi, uint dividends, uint buyback, uint treasury, uint liquidity) override external onlyOwner {\\n        require(feeType != FeeType.NONE, \\\"CarboToken: Wrong FeeType\\\");\\n        _fees[feeType] = Fees(rfi, dividends, buyback, treasury, liquidity);\\n    }\\n\\n    function getFeeAddresses(FeeType feeType) override public view returns (FeeAddresses memory) {\\n        return _feeAddresses[feeType];\\n    }\\n\\n    function setFeeAddresses(FeeType feeType, address dividends, address buyback, address treasury, address liquidity) override external onlyOwner {\\n        require(feeType != FeeType.NONE, \\\"CarboToken: Wrong FeeType\\\");\\n        _feeAddresses[feeType] = FeeAddresses(dividends, buyback, treasury, liquidity);\\n    }\\n\\n    function setTaxable(address account, bool value) override external onlyOwner {\\n        require(_isTaxable[account] != value, \\\"CarboToken: already set\\\");\\n        _isTaxable[account] = value;\\n    }\\n\\n    function setTaxExempt(address account, bool value) override external onlyOwner {\\n        require(_isTaxExempt[account] != value, \\\"CarboToken: already set\\\");\\n        _isTaxExempt[account] = value;\\n    }\\n\\n    function _getFeeAmounts(uint256 amount, FeeType feeType) internal view returns (Fees memory) {\\n        Fees memory fees = _fees[feeType];\\n        Fees memory feeAmounts;\\n        feeAmounts.rfi = amount.mul(fees.rfi).div(PERCENT_RATE);\\n        feeAmounts.dividends = amount.mul(fees.dividends).div(PERCENT_RATE);\\n        feeAmounts.buyback = amount.mul(fees.buyback).div(PERCENT_RATE);\\n        feeAmounts.treasury = amount.mul(fees.treasury).div(PERCENT_RATE);\\n        feeAmounts.liquidity = amount.mul(fees.liquidity).div(PERCENT_RATE);\\n        return feeAmounts;\\n    }\\n\\n    function _getFeeType(address sender, address recipient) internal view returns (FeeType) {\\n        if (_isTaxExempt[sender] || _isTaxExempt[recipient]) return FeeType.NONE;\\n        if (_isTaxable[sender]) return FeeType.BUY;\\n        if (_isTaxable[recipient]) return FeeType.SELL;\\n        return FeeType.NONE;\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------------------\\n    // RFI\\n    // -----------------------------------------------------------------------------------------------------------------\\n\\n    uint256 private _tTotal = 500_000_000 ether;\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n    uint256 private _tFeeTotal;\\n    mapping(address => uint256) private _rOwned;\\n    mapping(address => uint256) private _tOwned;\\n    mapping(address => bool) private _isExcluded;\\n    address[] private _excluded;\\n\\n    constructor() {\\n        _rOwned[_msgSender()] = _rTotal;\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function getROwned(address account) override external view returns (uint256) {\\n        return _rOwned[account];\\n    }\\n\\n    function getRTotal() override external view returns (uint256) {\\n        return _rTotal;\\n    }\\n\\n    function excludeFromRFI(address account) override external onlyOwner {\\n        require(!_isExcluded[account], \\\"CarboToken: account is already excluded\\\");\\n        if (_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeInRFI(address account) override external onlyOwner {\\n        require(_isExcluded[account], \\\"CarboToken: account is already included\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function reflect(uint256 tAmount) override external {\\n        address account = _msgSender();\\n        require(!_isExcluded[account], \\\"CarboToken: excluded addresses cannot call this function\\\");\\n        uint256 rAmount = _getRAmount(tAmount, _getRate());\\n        _decreaseBalance(account, tAmount, rAmount);\\n        _reflect(tAmount, rAmount);\\n        _reflectCallback(account, tAmount, rAmount);\\n    }\\n\\n    function reflectionFromToken(uint256 tAmount) override external view returns (uint256) {\\n        require(tAmount <= _tTotal, \\\"CarboToken: amount must be less than supply\\\");\\n        return _getRAmount(tAmount, _getRate());\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) override public view returns (uint256) {\\n        require(rAmount <= _rTotal, \\\"CarboToken: amount must be less than total reflections\\\");\\n        uint256 currentRate = _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n\\n    function _reflect(uint256 tAmount, uint256 rAmount) internal whenNotPaused {\\n        _rTotal = _rTotal.sub(rAmount);\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\n        _reflectCallback(tAmount, rAmount);\\n    }\\n\\n    function _getCurrentSupply() internal view returns (uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\n        }\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function _getRate() internal view returns (uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n\\n    function _getRAmount(uint256 tAmount, uint256 currentRate) internal pure returns (uint256) {\\n        return tAmount.mul(currentRate);\\n    }\\n\\n    function _getRAmounts(Amounts memory t, FeeType feeType, uint256 currentRate) internal pure returns (Amounts memory) {\\n        Amounts memory r;\\n        r.sum = _getRAmount(t.sum, currentRate);\\n        r.transfer = r.sum;\\n        if (feeType != FeeType.NONE) {\\n            r.rfi = _getRAmount(t.rfi, currentRate);\\n            r.dividends = _getRAmount(t.dividends, currentRate);\\n            r.buyback = _getRAmount(t.buyback, currentRate);\\n            r.treasury = _getRAmount(t.treasury, currentRate);\\n            r.liquidity = _getRAmount(t.liquidity, currentRate);\\n            r.transfer = r.transfer.sub(r.rfi).sub(r.dividends).sub(r.buyback).sub(r.treasury).sub(r.liquidity);\\n        }\\n        return r;\\n    }\\n\\n    function _getTAmounts(uint256 tAmount, FeeType feeType) internal view returns (Amounts memory) {\\n        Amounts memory t;\\n        t.sum = tAmount;\\n        t.transfer = t.sum;\\n        if (feeType != FeeType.NONE) {\\n            Fees memory fees = _getFeeAmounts(tAmount, feeType);\\n            t.rfi = fees.rfi;\\n            t.dividends = fees.dividends;\\n            t.buyback = fees.buyback;\\n            t.treasury = fees.treasury;\\n            t.liquidity = fees.liquidity;\\n            t.transfer = t.transfer.sub(t.rfi).sub(t.dividends).sub(t.buyback).sub(t.treasury).sub(t.liquidity);\\n        }\\n        return t;\\n    }\\n\\n    function _getAmounts(uint256 tAmount, FeeType feeType) internal view returns (Amounts memory r, Amounts memory t) {\\n        t = _getTAmounts(tAmount, feeType);\\n        r = _getRAmounts(t, feeType, _getRate());\\n    }\\n\\n    function _increaseBalance(address account, uint256 tAmount, uint256 rAmount) internal {\\n        _rOwned[account] = _rOwned[account].add(rAmount);\\n        if (_isExcluded[account]) {\\n            _tOwned[account] = _tOwned[account].add(tAmount);\\n        }\\n        _increaseBalanceCallback(account, tAmount, rAmount);\\n    }\\n\\n    function _decreaseBalance(address account, uint256 tAmount, uint256 rAmount) internal {\\n        _rOwned[account] = _rOwned[account].sub(rAmount);\\n        if (_isExcluded[account]) {\\n            _tOwned[account] = _tOwned[account].sub(tAmount);\\n        }\\n        _decreaseBalanceCallback(account, tAmount, rAmount);\\n    }\\n\\n    function _decreaseTotalSupply(uint256 tAmount, uint256 rAmount) private {\\n        _tTotal = _tTotal.sub(tAmount);\\n        _rTotal = _rTotal.sub(rAmount);\\n        _decreaseTotalSupplyCallback(tAmount, rAmount);\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal whenNotPaused {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        FeeType feeType = _getFeeType(sender, recipient);\\n        (Amounts memory r, Amounts memory t) = _getAmounts(amount, feeType);\\n        require(_rOwned[sender] >= r.sum, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _decreaseBalance(sender, t.sum, r.sum);\\n        _increaseBalance(recipient, t.transfer, r.transfer);\\n        emit Transfer(sender, recipient, t.transfer);\\n        if (t.sum != t.transfer) {\\n            FeeAddresses memory feeAddresses = getFeeAddresses(feeType);\\n            if (t.rfi > 0) {\\n                _reflect(t.rfi, r.rfi);\\n            }\\n            if (t.dividends > 0) {\\n                _increaseBalance(feeAddresses.dividends, t.dividends, r.dividends);\\n            }\\n            if (t.buyback > 0) {\\n                _increaseBalance(feeAddresses.buyback, t.buyback, r.buyback);\\n            }\\n            if (t.treasury > 0) {\\n                _increaseBalance(feeAddresses.treasury, t.treasury, r.treasury);\\n            }\\n            if (t.liquidity > 0) {\\n                _increaseBalance(feeAddresses.liquidity, t.liquidity, r.liquidity);\\n            }\\n            emit FeeTaken(t.rfi, t.dividends, t.buyback, t.treasury, t.liquidity);\\n        }\\n        _transferCallback(sender, recipient, t.sum, t.transfer, r.sum, r.transfer);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IDividendManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of DividendManager\\n */\\ninterface IDividendManager {\\n\\n    function distributeDividends(uint256 amount) external;\\n    function setBUSD(address _busd) external;\\n    function setToken(address _token) external;\\n    function excludeFromDividends(address account) external;\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/ICarboToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of CarboToken\\n */\\ninterface ICarboToken is IERC20 {\\n\\n    struct Amounts {\\n        uint256 sum;\\n        uint256 transfer;\\n        uint256 rfi;\\n        uint256 dividends;\\n        uint256 buyback;\\n        uint256 treasury;\\n        uint256 liquidity;\\n    }\\n\\n    struct Fees {\\n        uint256 rfi;\\n        uint256 dividends;\\n        uint256 buyback;\\n        uint256 treasury;\\n        uint256 liquidity;\\n    }\\n\\n    struct FeeAddresses {\\n        address dividends;\\n        address buyback;\\n        address treasury;\\n        address liquidity;\\n    }\\n\\n    enum FeeType { BUY, SELL, NONE}\\n\\n    event FeeTaken(uint256 rfi, uint256 dividends, uint256 buyback, uint256 treasury, uint256 liquidity);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function burn(uint256 amount) external;\\n    function burnFrom(address account, uint256 amount) external;\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n    function getFees(FeeType feeType) external view returns (Fees memory);\\n    function setFees(FeeType feeType, uint rfi, uint dividends, uint buyback, uint treasury, uint liquidity) external;\\n    function getFeeAddresses(FeeType feeType) external view returns (FeeAddresses memory);\\n    function setFeeAddresses(FeeType feeType, address dividends, address buyback, address treasury, address liquidity) external;\\n    function setTaxable(address account, bool value) external;\\n    function setTaxExempt(address account, bool value) external;\\n    function getROwned(address account) external view returns (uint256);\\n    function getRTotal() external view returns (uint256);\\n    function excludeFromRFI(address account) external;\\n    function includeInRFI(address account) external;\\n    function reflect(uint256 tAmount) external;\\n    function reflectionFromToken(uint256 tAmount) external view returns (uint256);\\n    function tokenFromReflection(uint256 rAmount) external view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/ICallbackContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of contract that can be invoked by a token contract during reflect or transfer.\\n */\\ninterface ICallbackContract {\\n\\n    function reflectCallback(uint256 tAmount, uint256 rAmount) external;\\n    function reflectCallback(address account, uint256 tAmount, uint256 rAmount) external;\\n    function increaseBalanceCallback(address account, uint256 tAmount, uint256 rAmount) external;\\n    function decreaseBalanceCallback(address account, uint256 tAmount, uint256 rAmount) external;\\n    function decreaseTotalSupplyCallback(uint256 tAmount, uint256 rAmount) external;\\n    function transferCallback(address from, address to, uint256 tFromAmount, uint256 rFromAmount, uint256 tToAmount, uint256 rToAmount) external;\\n    function burnCallback(address account, uint256 tAmount, uint256 rAmount) external;\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/WithCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ICallbackContract.sol\\\";\\n\\n/**\\n * @dev Allows the owner to register a callback contract that will be called after every call of the transfer or burn function\\n */\\ncontract WithCallback is Ownable {\\n\\n    ICallbackContract public callback;\\n\\n    enum CallbackType {\\n        REFLECT_INTERNAL,\\n        REFLECT_EXTERNAL,\\n        INCREASE_BALANCE,\\n        DECREASE_BALANCE,\\n        DECREASE_TOTAL_SUPPLY,\\n        TRANSFER,\\n        BURN\\n    }\\n\\n    mapping(CallbackType => bool) internal _callbacks;\\n\\n    function setCallbackContract(address _callback) external onlyOwner {\\n        callback = ICallbackContract(_callback);\\n    }\\n\\n    function setCallbackFunction(CallbackType callbackFunction, bool isActive) external onlyOwner {\\n        require(_callbacks[callbackFunction] != isActive, \\\"WithCallback: already set\\\");\\n        _callbacks[callbackFunction] = isActive;\\n    }\\n\\n    function _reflectCallback(uint256 tAmount, uint256 rAmount) internal {\\n        if (_callbacks[CallbackType.REFLECT_INTERNAL]) {\\n            try callback.reflectCallback(tAmount, rAmount) {} catch {}\\n        }\\n    }\\n\\n    function _reflectCallback(address account, uint256 tAmount, uint256 rAmount) internal {\\n        if (_callbacks[CallbackType.REFLECT_EXTERNAL]) {\\n            try callback.reflectCallback(account, tAmount, rAmount) {} catch {}\\n        }\\n    }\\n\\n    function _increaseBalanceCallback(address account, uint256 tAmount, uint256 rAmount) internal {\\n        if (_callbacks[CallbackType.INCREASE_BALANCE]) {\\n            try callback.increaseBalanceCallback(account, tAmount, rAmount) {} catch {}\\n        }\\n    }\\n\\n    function _decreaseBalanceCallback(address account, uint256 tAmount, uint256 rAmount) internal {\\n        if (_callbacks[CallbackType.DECREASE_BALANCE]) {\\n            try callback.decreaseBalanceCallback(account, tAmount, rAmount) {} catch {}\\n        }\\n    }\\n\\n    function _decreaseTotalSupplyCallback(uint256 tAmount, uint256 rAmount) internal {\\n        if (_callbacks[CallbackType.DECREASE_TOTAL_SUPPLY]) {\\n            try callback.decreaseTotalSupplyCallback(tAmount, rAmount) {} catch {}\\n        }\\n    }\\n\\n    function _transferCallback(address from, address to, uint256 tFromAmount, uint256 rFromAmount, uint256 tToAmount, uint256 rToAmount) internal {\\n        if (_callbacks[CallbackType.TRANSFER]) {\\n            try callback.transferCallback(from, to, tFromAmount, rFromAmount, tToAmount, rToAmount) {} catch {}\\n        }\\n    }\\n\\n    function _burnCallback(address account, uint256 tAmount, uint256 rAmount) internal {\\n        if (_callbacks[CallbackType.BURN]) {\\n            try callback.burnCallback(account, tAmount, rAmount) {} catch {}\\n        }\\n    }\\n\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/RecoverableFunds.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Allows the owner to retrieve ETH or tokens sent to this contract by mistake.\\n */\\ncontract RecoverableFunds is Ownable {\\n\\n    function retrieveTokens(address recipient, address tokenAddress) public virtual onlyOwner {\\n        IERC20 token = IERC20(tokenAddress);\\n        token.transfer(recipient, token.balanceOf(address(this)));\\n    }\\n\\n    function retriveETH(address payable recipient) public virtual onlyOwner {\\n        recipient.transfer(address(this).balance);\\n    }\\n\\n}\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"FeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callback\",\"outputs\":[{\"internalType\":\"contract ICallbackContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromRFI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICarboToken.FeeType\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"getFeeAddresses\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dividends\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"}],\"internalType\":\"struct ICarboToken.FeeAddresses\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICarboToken.FeeType\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"getFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct ICarboToken.Fees\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getROwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInRFI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"retriveETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_callback\",\"type\":\"address\"}],\"name\":\"setCallbackContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum WithCallback.CallbackType\",\"name\":\"callbackFunction\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setCallbackFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICarboToken.FeeType\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"dividends\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"}],\"name\":\"setFeeAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICarboToken.FeeType\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTaxExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTaxable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CarboToken", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}