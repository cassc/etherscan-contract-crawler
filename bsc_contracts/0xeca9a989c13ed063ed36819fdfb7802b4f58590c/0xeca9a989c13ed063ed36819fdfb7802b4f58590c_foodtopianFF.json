{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ncontract foodtopianFF {\r\n    uint256 public devFeePercentage;\r\n    uint256 public devFeeBalance;\r\n    address public owner;\r\n\r\n    struct Game {\r\n        address player1;\r\n        address player2;\r\n        uint256 betAmount;\r\n        bool isActive;\r\n        address winner;\r\n        address lastWinner;\r\n        uint256 gameStartTime;\r\n    }\r\n\r\n    Game[4] public games;\r\n\r\n    event GameCreated(uint256 indexed gameId, address indexed player1, uint256 betAmount);\r\n    event GameJoined(uint256 indexed gameId, address indexed player2);\r\n    event GameCancelled(uint256 indexed gameId);\r\n    event WinnerDecided(uint256 indexed gameId, address indexed winner);\r\n    event DevFeeWithdrawn(address indexed owner, uint256 amount);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 _devFeePercentage) {\r\n        owner = msg.sender;\r\n        devFeePercentage = _devFeePercentage;\r\n    }\r\n\r\n    function createGame(uint256 gameId) external payable {\r\n        require(gameId >= 0 && gameId < 4, \"Invalid game ID.\");\r\n        require(!games[gameId].isActive, \"Game is already active.\");\r\n        require(msg.value > 0, \"Bet amount must be greater than 0.\");\r\n\r\n        games[gameId] = Game({\r\n            player1: msg.sender,\r\n            player2: address(0),\r\n            betAmount: msg.value,\r\n            isActive: true,\r\n            winner: address(0),\r\n            lastWinner: games[gameId].lastWinner, // Keep the last winner\r\n            gameStartTime: 0 // Initialized to 0; will be set when the second player joins\r\n        });\r\n\r\n        emit GameCreated(gameId, msg.sender, msg.value);\r\n    }\r\n\r\n    function joinGame(uint256 gameId) external payable {\r\n        require(gameId >= 0 && gameId < 4, \"Invalid game ID.\");\r\n        require(games[gameId].isActive, \"Game is not active.\");\r\n        require(games[gameId].player2 == address(0), \"Game already has a second player.\");\r\n        require(msg.value == games[gameId].betAmount, \"Bet amount does not match.\");\r\n\r\n        games[gameId].player2 = msg.sender;\r\n        games[gameId].gameStartTime = block.timestamp;\r\n\r\n        emit GameJoined(gameId, msg.sender);\r\n    }\r\n\r\n    function cancelGame(uint256 gameId) external {\r\n        require(gameId >= 0 && gameId < 4, \"Invalid game ID.\");\r\n        require(games[gameId].isActive, \"Game is not active.\");\r\n        require(\r\n            games[gameId].player1 == msg.sender || msg.sender == owner,\r\n            \"Only the creator or owner can cancel the game.\"\r\n        );\r\n\r\n        payable(games[gameId].player1).transfer(games[gameId].betAmount);\r\n        delete games[gameId];\r\n\r\n        emit GameCancelled(gameId);\r\n    }\r\n\r\n    function setDevFeePercentage(uint256 _devFeePercentage) external onlyOwner {\r\n        require(_devFeePercentage <= 100, \"Dev fee percentage cannot be more than 100.\");\r\n        devFeePercentage = _devFeePercentage;\r\n    }\r\n\r\n    function withdrawDevFee() external onlyOwner {\r\n        uint256 amount = devFeeBalance;\r\n        require(amount > 0, \"No dev fees available for withdrawal\");\r\n\r\n        devFeeBalance = 0;\r\n        payable(owner).transfer(amount);\r\n\r\n        emit DevFeeWithdrawn(owner, amount);\r\n    }\r\n\r\n    function decideWinner(uint256 gameId) external {\r\n        require(gameId >= 0 && gameId < 4, \"Invalid game ID.\");\r\n        require(games[gameId].isActive, \"Game is not active.\");\r\n        require(games[gameId].player2 != address(0), \"Game does not have a second player.\");\r\n        require(block.timestamp >= games[gameId].gameStartTime + 5, \"Cannot decide winner yet.\");\r\n\r\n       uint256 randomResult = (block.timestamp + block.prevrandao + gameId) % 2;\r\n        games[gameId].winner = randomResult == 0 ? games[gameId].player1 : games[gameId].player2;\r\n\r\n        // Calculate and transfer the developer's fee\r\n        uint256 devFee = (games[gameId].betAmount * 2 * devFeePercentage) / 100;\r\n        uint256 payout = (games[gameId].betAmount * 2) - devFee;\r\n        devFeeBalance += devFee;\r\n        payable(games[gameId].winner).transfer(payout);\r\n\r\n        // Emit the event for the decided winner\r\n        emit WinnerDecided(gameId, games[gameId].winner);\r\n\r\n        // Keep the last winner before resetting the game\r\n        address lastWinner = games[gameId].winner;\r\n\r\n        // Reset the game\r\n        games[gameId] = Game({\r\n            player1: address(0),\r\n            player2: address(0),\r\n            betAmount: 0,\r\n            isActive: false,\r\n            winner: address(0),\r\n            lastWinner: lastWinner, // Set the last winner\r\n            gameStartTime: 0\r\n        });\r\n    }\r\n\r\n    // Read function to get the last winner of a game\r\n    function getLastWinner(uint256 gameId) public view returns (address) {\r\n        require(gameId >= 0 && gameId < 4, \"Invalid game ID.\");\r\n        return games[gameId].lastWinner;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DevFeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"}],\"name\":\"GameJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerDecided\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"cancelGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"createGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"decideWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastWinner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gameStartTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getLastWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setDevFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "foodtopianFF", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000014", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0b4bdcf9795f04df7871decfaac8796ae6c26e09f30443795e52f4708e9beaf3"}