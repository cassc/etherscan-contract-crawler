{"SourceCode": "// SPDX-License-Identifier: MIT\r\n    pragma solidity ^0.8.10;\r\n\r\n    interface IERC20 {\r\n        function totalSupply() external view returns (uint256);\r\n        function balanceOf(address account) external view returns (uint256);\r\n        function transfer(address recipient, uint256 amount) external returns (bool);\r\n        function allowance(address owner, address spender) external view returns (uint256);\r\n        function approve(address spender, uint256 amount) external returns (bool);\r\n        function transferFrom(\r\n            address sender,\r\n            address recipient,\r\n            uint256 amount\r\n        ) external returns (bool);\r\n\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n\r\n    library Address {\r\n        function sendValue(address payable recipient, uint256 amount) internal {\r\n            require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n            (bool success, ) = recipient.call{value: amount}(\"\");\r\n            require(success, \"Address: unable to send value, recipient may have reverted\");\r\n        }\r\n    }\r\n\r\n    abstract contract Context {\r\n        function _msgSender() internal view virtual returns (address) {\r\n            return msg.sender;\r\n        }\r\n\r\n        function _msgData() internal view virtual returns (bytes calldata) {\r\n            this;\r\n            return msg.data;\r\n        }\r\n    }\r\n\r\n    abstract contract Ownable is Context {\r\n        address private _owner;\r\n        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n        constructor() {\r\n            _setOwner(_msgSender());\r\n        }\r\n\r\n        function owner() public view virtual returns (address) {\r\n            return _owner;\r\n        }\r\n\r\n        modifier onlyOwner() {\r\n            require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n            _;\r\n        }\r\n\r\n        function renounceOwnership() public virtual onlyOwner {\r\n            _setOwner(address(0));\r\n        }\r\n\r\n        function transferOwnership(address newOwner) public virtual onlyOwner {\r\n            require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n            _setOwner(newOwner);\r\n        }\r\n\r\n        function _setOwner(address newOwner) private {\r\n            address oldOwner = _owner;\r\n            _owner = newOwner;\r\n            emit OwnershipTransferred(oldOwner, newOwner);\r\n        }\r\n    }\r\n\r\n    interface IFactory {\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    }\r\n\r\n    interface IRouter {\r\n        function factory() external pure returns (address);\r\n        function WETH() external pure returns (address);\r\n        function addLiquidityETH(\r\n            address token,\r\n            uint amountTokenDesired,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n        function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline) external;\r\n    }\r\n\r\n    contract BLUE is Context, IERC20, Ownable {\r\n        using Address for address payable;\r\n\r\n        mapping (address => uint256) private _rOwned;\r\n        mapping (address => uint256) private _tOwned;\r\n        mapping (address => mapping (address => uint256)) private _allowances;\r\n        mapping (address => bool) private _isExcludedFromFee;\r\n        mapping (address => bool) private _isExcluded;\r\n        address[] private _excluded;\r\n\r\n        bool public swapEnabled = true;\r\n        bool private swapping;\r\n\r\n        IRouter public router;\r\n        address public pair;\r\n\r\n        uint8 private constant _decimals = 18;\r\n        uint256 private constant MAX = ~uint256(0);\r\n        uint256 private _tTotal = 6900000000 * 10**_decimals;\r\n        uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n        uint256 public swapTokensAtAmount = _tTotal * 10 / 1000;\r\n        uint256 public maxTxAmount = _tTotal;\r\n        uint256 public maxWalletAmount = _tTotal * 42 / 10 / 100;\r\n\r\n        address public constant deadAddress = 0x000000000000000000000000000000000000dEaD; // Dead Wallet Address for burns\r\n        address public marketingWallet = 0x6BF3e9857784C5b50BA11e339EC8500C44FAb0FB; // Marketing Wallet\r\n\r\n        string private constant _name = \"Blue Token\"; // Token Name\r\n        string private constant _symbol = \"BLUE\"; // Token Ticker\r\n\r\n        uint256 public startTimestamp;\r\n        uint256 private constant INITIAL_BURN_FEE = 5; // Initial burn fee of 0.5%, represented as 5\r\n        uint256 private constant MAX_BURN_FEE = 42; // Max burn fee of 4.2%, represented as 42\r\n        uint256 private constant BURN_DOUBLING_PERIOD = 2 days; // One year in seconds\r\n        uint256 private constant FEE_MULTIPLIER = 2; // Burn fee doubles each year\r\n\r\n        struct Taxes {\r\n            uint256 rfi;\r\n            uint256 marketing;\r\n            uint256 liquidity;\r\n            uint256 burn;\r\n        }\r\n\r\n        Taxes public taxes = Taxes(10, 7, 10, INITIAL_BURN_FEE); //1% Reflections, 0.7% Marketing, 1% Liquidity, 0.5% Initial Burn Fee. Solidity can't handle decimal number, hence they are multiplied.\r\n\r\n        struct TotFeesPaidStruct {\r\n            uint256 rfi;\r\n            uint256 marketing;\r\n            uint256 liquidity;\r\n            uint256 burn;\r\n        }\r\n        TotFeesPaidStruct public totFeesPaid;\r\n\r\n        struct valuesFromGetValues {\r\n            uint256 rAmount;\r\n            uint256 rTransferAmount;\r\n            uint256 rRfi;\r\n            uint256 rMarketing;\r\n            uint256 rLiquidity;\r\n            uint256 rBurn;\r\n            uint256 tTransferAmount;\r\n            uint256 tRfi;\r\n            uint256 tMarketing;\r\n            uint256 tLiquidity;\r\n            uint256 tBurn;\r\n        }\r\n\r\n        event UpdatedRouter(address oldRouter, address newRouter);\r\n\r\n        modifier lockTheSwap {\r\n            swapping = true;\r\n            _;\r\n            swapping = false;\r\n        }\r\n\r\n        constructor() {\r\n            IRouter _router = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n            address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\r\n\r\n            router = _router;\r\n            pair = _pair;\r\n\r\n            excludeFromReward(pair);\r\n            excludeFromReward(deadAddress);\r\n\r\n            _rOwned[owner()] = _rTotal;\r\n            _isExcludedFromFee[owner()] = true;\r\n            _isExcludedFromFee[address(this)] = true;\r\n            _isExcludedFromFee[marketingWallet] = true;\r\n            _isExcludedFromFee[deadAddress] = true;\r\n\r\n            emit Transfer(address(0), owner(), _tTotal);\r\n\r\n            startTimestamp = block.timestamp; // Set the start timestamp to the contract deployment time\r\n        }\r\n\r\n            function name() public pure returns (string memory) {\r\n                return _name;\r\n            }\r\n            function symbol() public pure returns (string memory) {\r\n                return _symbol;\r\n            }\r\n            function decimals() public pure returns (uint8) {\r\n                return _decimals;\r\n            }\r\n\r\n            function totalSupply() public view override returns (uint256) {\r\n                return _tTotal;\r\n            }\r\n\r\n            function balanceOf(address account) public view override returns (uint256) {\r\n                if (_isExcluded[account]) return _tOwned[account];\r\n                return tokenFromReflection(_rOwned[account]);\r\n            }\r\n\r\n            function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n                _transfer(_msgSender(), recipient, amount);\r\n                return true;\r\n            }\r\n\r\n            function allowance(address owner, address spender) public view override returns (uint256) {\r\n                return _allowances[owner][spender];\r\n            }\r\n\r\n            function approve(address spender, uint256 amount) public override returns (bool) {\r\n                _approve(_msgSender(), spender, amount);\r\n                return true;\r\n            }\r\n\r\n            function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n                _transfer(sender, recipient, amount);\r\n\r\n                uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n                require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n                _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n                return true;\r\n            }\r\n\r\n            function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n                _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n                return true;\r\n            }\r\n\r\n            function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n                uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n                require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n                _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n                return true;\r\n            }\r\n\r\n            function isExcludedFromReward(address account) public view returns (bool) {\r\n                return _isExcluded[account];\r\n            }\r\n\r\n            function reflectionFromToken(uint256 tAmount, bool deductTransferRfi) public view returns(uint256) {\r\n                require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n                if (!deductTransferRfi) {\r\n                    valuesFromGetValues memory s = _getValues(tAmount, true);\r\n                    return s.rAmount;\r\n                } else {\r\n                    valuesFromGetValues memory s = _getValues(tAmount, true);\r\n                    return s.rTransferAmount;\r\n                }\r\n            }\r\n\r\n            function getCurrentBurnFee() public view returns (uint256) {\r\n                uint256 timeSinceStart = block.timestamp - startTimestamp;\r\n                uint256 yearsSinceStart = timeSinceStart / BURN_DOUBLING_PERIOD;\r\n\r\n                uint256 currentBurnFee = INITIAL_BURN_FEE;\r\n                for (uint256 i = 0; i < yearsSinceStart; i++) {\r\n                    currentBurnFee *= FEE_MULTIPLIER;\r\n                    if (currentBurnFee >= MAX_BURN_FEE) {\r\n                        return MAX_BURN_FEE;\r\n                    }\r\n                }\r\n\r\n                return currentBurnFee;\r\n            }\r\n\r\n            function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n                require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n                uint256 currentRate =  _getRate();\r\n                return rAmount/currentRate;\r\n            }\r\n\r\n            function excludeFromReward(address account) public onlyOwner {\r\n                require(!_isExcluded[account], \"Account is already excluded\");\r\n                if(_rOwned[account] > 0) {\r\n                    _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n                }\r\n                _isExcluded[account] = true;\r\n                _excluded.push(account);\r\n            }\r\n\r\n            function includeInReward(address account) external onlyOwner {\r\n                require(_isExcluded[account], \"Account is not excluded\");\r\n                for (uint256 i = 0; i < _excluded.length; i++) {\r\n                    if (_excluded[i] == account) {\r\n                        _excluded[i] = _excluded[_excluded.length - 1];\r\n                        _tOwned[account] = 0;\r\n                        _isExcluded[account] = false;\r\n                        _excluded.pop();\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function excludeFromFee(address account) public onlyOwner {\r\n                _isExcludedFromFee[account] = true;\r\n            }\r\n\r\n            function includeInFee(address account) public onlyOwner {\r\n                _isExcludedFromFee[account] = false;\r\n            }\r\n\r\n            function isExcludedFromFee(address account) public view returns(bool) {\r\n                return _isExcludedFromFee[account];\r\n            }\r\n\r\n            function _reflectRfi(uint256 rRfi, uint256 tRfi) private {\r\n                _rTotal -=rRfi;\r\n                totFeesPaid.rfi +=tRfi;\r\n            }\r\n\r\n            function _takeLiquidity(uint256 rLiquidity, uint256 tLiquidity) private {\r\n                totFeesPaid.liquidity +=tLiquidity;\r\n\r\n                if(_isExcluded[address(this)])\r\n                {\r\n                    _tOwned[address(this)]+=tLiquidity;\r\n                }\r\n                _rOwned[address(this)] +=rLiquidity;\r\n            }\r\n\r\n            function _takeMarketing(uint256 rMarketing, uint256 tMarketing) private {\r\n                totFeesPaid.marketing +=tMarketing;\r\n\r\n                if(_isExcluded[address(this)])\r\n                {\r\n                    _tOwned[address(this)]+=tMarketing;\r\n                }\r\n                _rOwned[address(this)] +=rMarketing;\r\n            }\r\n        \r\n            function _takeBurn(uint256 rBurn, uint256 tBurn) private{\r\n                totFeesPaid.burn +=tBurn;\r\n\r\n                if(_isExcluded[deadAddress])\r\n                {\r\n                    _tOwned[deadAddress]+=tBurn;\r\n                }\r\n                _rOwned[deadAddress] +=rBurn;\r\n            }\r\n\r\n            function _getValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory to_return) {\r\n                to_return = _getTValues(tAmount, takeFee);\r\n                (to_return.rAmount, to_return.rTransferAmount, to_return.rRfi, to_return.rMarketing, to_return.rLiquidity, to_return.rBurn) = _getRValues(to_return, tAmount, takeFee, _getRate());\r\n                return to_return;\r\n            }\r\n\r\n            function _getTValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory s) {\r\n                if (!takeFee) {\r\n                    s.tTransferAmount = tAmount;\r\n                    return s;\r\n                }\r\n\r\n                s.tRfi = tAmount * taxes.rfi / 1000;\r\n                s.tMarketing = tAmount * taxes.marketing / 1000;\r\n                s.tLiquidity = tAmount * taxes.liquidity / 1000;\r\n                uint256 currentBurnFee = getCurrentBurnFee(); // Call the function to get the current burn fee\r\n                s.tBurn = tAmount * currentBurnFee / 1000; // Use the current burn fee for the calculation\r\n                s.tTransferAmount = tAmount - s.tRfi - s.tMarketing - s.tLiquidity - s.tBurn;\r\n                return s;\r\n            }\r\n\r\n            function _getRValues(valuesFromGetValues memory s, uint256 tAmount, bool takeFee, uint256 currentRate) private pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rRfi, uint256 rMarketing, uint256 rLiquidity, uint256 rBurn) {\r\n                rAmount = tAmount*currentRate;\r\n\r\n                if(!takeFee) {\r\n                return(rAmount, rAmount, 0,0,0,0);\r\n                }\r\n\r\n                rRfi = s.tRfi*currentRate;\r\n                rMarketing = s.tMarketing*currentRate;\r\n                rLiquidity = s.tLiquidity*currentRate;\r\n                rBurn = s.rBurn*currentRate;\r\n                rTransferAmount =  rAmount-rRfi-rMarketing-rLiquidity-rBurn;\r\n                return (rAmount, rTransferAmount, rRfi,rMarketing,rLiquidity, rBurn);\r\n            }\r\n\r\n            function _getRate() private view returns(uint256) {\r\n                (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n                return rSupply/tSupply;\r\n            }\r\n\r\n            function _getCurrentSupply() private view returns(uint256, uint256) {\r\n                uint256 rSupply = _rTotal;\r\n                uint256 tSupply = _tTotal;\r\n                for (uint256 i = 0; i < _excluded.length; i++) {\r\n                    if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n                    rSupply = rSupply-_rOwned[_excluded[i]];\r\n                    tSupply = tSupply-_tOwned[_excluded[i]];\r\n                }\r\n                if (rSupply < _rTotal/_tTotal) return (_rTotal, _tTotal);\r\n                return (rSupply, tSupply);\r\n            }\r\n\r\n            function _approve(address owner, address spender, uint256 amount) private {\r\n                require(owner != address(0), \"ERC20: approve from the zero address\");\r\n                require(spender != address(0), \"ERC20: approve to the zero address\");\r\n                _allowances[owner][spender] = amount;\r\n                emit Approval(owner, spender, amount);\r\n            }\r\n\r\n            function _transfer(address from, address to, uint256 amount) private {\r\n                require(from != address(0), \"ERC20: transfer from the zero address\");\r\n                require(to != address(0), \"ERC20: transfer to the zero address\");\r\n                require(amount > 0, \"Transfer amount must be greater than zero\");\r\n                require(amount <= balanceOf(from),\"You are trying to transfer more than your balance\");\r\n            \r\n                if(!_isExcludedFromFee[from] && !_isExcludedFromFee[to]){\r\n                    if(to != pair) require(balanceOf(to) + amount <= maxWalletAmount, \"You are exceeding maxWalletAmount\");\r\n                    require(amount <= maxTxAmount, \"You are esceeding maxTxAmount\");\r\n                }\r\n                \r\n                bool canSwap = balanceOf(address(this)) >= swapTokensAtAmount;\r\n                if(!swapping && swapEnabled && canSwap && from != pair && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]){\r\n                    swapAndLiquify(swapTokensAtAmount);\r\n                }\r\n\r\n                _tokenTransfer(from, to, amount, !(_isExcludedFromFee[from] || _isExcludedFromFee[to]));\r\n            }\r\n\r\n            // This method is responsible for taking all the fees, if takeFee is true\r\n            function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool takeFee) private {\r\n\r\n                valuesFromGetValues memory s = _getValues(tAmount, takeFee);\r\n\r\n                if (_isExcluded[sender] ) {  //from excluded\r\n                        _tOwned[sender] = _tOwned[sender]-tAmount;\r\n                }\r\n                if (_isExcluded[recipient]) { //to excluded\r\n                        _tOwned[recipient] = _tOwned[recipient]+s.tTransferAmount;\r\n                }\r\n\r\n                _rOwned[sender] = _rOwned[sender]-s.rAmount;\r\n                _rOwned[recipient] = _rOwned[recipient]+s.rTransferAmount;\r\n            \r\n                if(s.rRfi > 0 || s.tRfi > 0) _reflectRfi(s.rRfi, s.tRfi);\r\n                if(s.rLiquidity > 0 || s.tLiquidity > 0) {\r\n                    _takeLiquidity(s.rLiquidity,s.tLiquidity);\r\n                }\r\n                if(s.rMarketing > 0 || s.tMarketing > 0){\r\n                    _takeMarketing(s.rMarketing, s.tMarketing);\r\n                }\r\n                if(s.rBurn > 0 || s.tBurn > 0){\r\n                    _takeBurn(s.rBurn, s.tBurn);\r\n                    emit Transfer(sender, deadAddress, s.tBurn);\r\n                }\r\n            \r\n                emit Transfer(sender, recipient, s.tTransferAmount);\r\n                emit Transfer(sender, address(this), s.tLiquidity + s.tMarketing);\r\n            \r\n            }\r\n\r\n            function swapAndLiquify(uint256 tokens) private lockTheSwap{\r\n            // Split the contract balance into halves\r\n                uint256 denominator = (taxes.liquidity + taxes.marketing ) * 2;\r\n                uint256 tokensToAddLiquidityWith = tokens * taxes.liquidity / denominator;\r\n                uint256 toSwap = tokens - tokensToAddLiquidityWith;\r\n\r\n                uint256 initialBalance = address(this).balance;\r\n\r\n                swapTokensForBNB(toSwap);\r\n\r\n                uint256 deltaBalance = address(this).balance - initialBalance;\r\n                uint256 unitBalance= deltaBalance / (denominator - taxes.liquidity);\r\n                uint256 bnbToAddLiquidityWith = unitBalance * taxes.liquidity;\r\n\r\n                if(bnbToAddLiquidityWith > 0){\r\n                    // Add liquidity to pancake :P\r\n                    addLiquidity(tokensToAddLiquidityWith, bnbToAddLiquidityWith);\r\n                }\r\n\r\n                uint256 marketingAmt = unitBalance * 2 * taxes.marketing;\r\n                if(marketingAmt > 0){\r\n                    payable(marketingWallet).sendValue(marketingAmt);\r\n                }\r\n\r\n            }\r\n\r\n            function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n                // approve token transfer to cover all possible scenarios\r\n                _approve(address(this), address(router), tokenAmount);\r\n\r\n                // add the liquidity\r\n                router.addLiquidityETH{value: bnbAmount}(\r\n                    address(this),\r\n                    tokenAmount,\r\n                    0, // slippage is unavoidable O__o\r\n                    0, // slippage is unavoidable\r\n                    marketingWallet,\r\n                    block.timestamp\r\n                );\r\n            }\r\n\r\n            function swapTokensForBNB(uint256 tokenAmount) private {\r\n                // generate the uniswap pair path of token -> weth\r\n                address[] memory path = new address[](2);\r\n                path[0] = address(this);\r\n                path[1] = router.WETH();\r\n\r\n                _approve(address(this), address(router), tokenAmount);\r\n\r\n                // make the swap\r\n                router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                    tokenAmount,\r\n                    0, // accept any amount of ETH\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n            }\r\n\r\n            function updateSwapTokensAtAmount(uint256 amount) external onlyOwner{\r\n                swapTokensAtAmount = _tTotal * amount / 1000; // THRESHOLD : 1 = 0.1%\r\n            }\r\n\r\n            function updateSwapEnabled(bool _enabled) external onlyOwner{\r\n                swapEnabled = _enabled;\r\n            }\r\n        \r\n            function updateRouterAndPair(address newRouter, address newPair) external onlyOwner{\r\n                //\r\n                router = IRouter(newRouter);\r\n                pair = newPair;\r\n            }\r\n\r\n            //Use this in case BNB are sent to the contract by mistake\r\n            function rescueBNB(uint256 weiAmount) external onlyOwner{\r\n                require(address(this).balance >= weiAmount, \"insufficient BNB balance\");\r\n                payable(msg.sender).transfer(weiAmount);\r\n            }\r\n        \r\n            // Function to allow admin to claim *other* BEP20 tokens sent to this contract (by mistake)\r\n            // Owner cannot transfer out catecoin from this smart contract\r\n            function rescueAnyBEP20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\r\n                IERC20(_tokenAddr).transfer(_to, _amount);\r\n            }\r\n\r\n            function timeUntilNextBurnFeeDoubles() public view returns (uint256 daysRemaining, uint256 hoursRemaining) {\r\n                uint256 currentBurnFee = getCurrentBurnFee();\r\n                if (currentBurnFee >= MAX_BURN_FEE) {\r\n                    // The burn fee has reached its maximum and will not increase further.\r\n                    daysRemaining = 0;\r\n                    hoursRemaining = 0;\r\n                    return (daysRemaining, hoursRemaining);\r\n                }\r\n                uint256 timeSinceStart = block.timestamp - startTimestamp;\r\n                uint256 periodsSinceStart = timeSinceStart / BURN_DOUBLING_PERIOD;\r\n                uint256 nextIncreaseTime = startTimestamp + ((periodsSinceStart + 1) * BURN_DOUBLING_PERIOD);\r\n                uint256 timeToNextIncrease = nextIncreaseTime > block.timestamp ? nextIncreaseTime - block.timestamp : 0;\r\n\r\n                // Convert time to days and hours. Solidity doesn't handle decimals, so these will be whole numbers.\r\n                daysRemaining = timeToNextIncrease / (24 * 60 * 60);\r\n                hoursRemaining = (timeToNextIncrease % (24 * 60 * 60)) / (60 * 60);\r\n                return (daysRemaining, hoursRemaining);\r\n            }\r\n\r\n            receive() external payable{\r\n            }\r\n        }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"UpdatedRouter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferRfi\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueAnyBEP20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeUntilNextBurnFeeDoubles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daysRemaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hoursRemaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totFeesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"updateRouterAndPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BLUE", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e8017020a6f1cebe719874cd4859165b489bb938cce204145226f78fece2a974"}