{"SourceCode": "// File: Binance/main/libraries/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: Binance/main/IBEP20.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: Binance/main/libraries/SafeBEP20.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeBEP20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeBEP20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeBEP20: BEP20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: Binance/main/BEP20.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IBEP20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {BEP20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of BEP20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IBEP20-approve}.\r\n */\r\ncontract BEP20 is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external override view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() public override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() public override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() public override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(amount, 'BEP20: transfer amount exceeds allowance')\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, 'BEP20: decreased allowance below zero')\r\n        );\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), 'BEP20: transfer from the zero address');\r\n        require(recipient != address(0), 'BEP20: transfer to the zero address');\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        _balances[sender] = _balances[sender].sub(amount, 'BEP20: transfer amount exceeds balance');\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);   \r\n       _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), 'BEP20: mint to the zero address');\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), 'BEP20: burn from the zero address');\r\n\r\n        _balances[account] = _balances[account].sub(amount, 'BEP20: burn amount exceeds balance');\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), 'BEP20: approve from the zero address');\r\n        require(spender != address(0), 'BEP20: approve to the zero address');\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            _msgSender(),\r\n            _allowances[account][_msgSender()].sub(amount, 'BEP20: burn amount exceeds allowance')\r\n        );\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n   \r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n}\r\n// File: Binance/main/Token.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n/** \r\n* @author Formation.Fi.\r\n* @notice  A common Implementation for tokens ALPHA, BETA and GAMMA.\r\n*/\r\n\r\ncontract Token is BEP20 {\r\n    struct Deposit{\r\n        uint256 amount;\r\n        uint256 time;\r\n    }\r\n    address public proxyInvestement;\r\n    address private proxyAdmin;\r\n\r\n    mapping(address => Deposit[]) public depositPerAddress;\r\n    mapping(address => bool) public  whitelist;\r\n    event SetProxyInvestement(address  _address);\r\n    constructor(string memory _name, string memory _symbol) \r\n    BEP20(_name,  _symbol) {\r\n    }\r\n\r\n    modifier onlyProxy() {\r\n        require(\r\n            (proxyInvestement != address(0)) && (proxyAdmin != address(0)),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n            (msg.sender == proxyInvestement) || (msg.sender == proxyAdmin),\r\n             \"Formation.Fi: not the proxy\"\r\n        );\r\n        _;\r\n    }\r\n    modifier onlyProxyInvestement() {\r\n        require(proxyInvestement != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(msg.sender == proxyInvestement,\r\n             \"Formation.Fi: not the proxy\"\r\n        );\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Update the proxyInvestement.\r\n     * @param _proxyInvestement.\r\n     * @notice Emits a {SetProxyInvestement} event with `_proxyInvestement`.\r\n     */\r\n    function setProxyInvestement(address _proxyInvestement) external onlyOwner {\r\n        require(\r\n            _proxyInvestement!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n         proxyInvestement = _proxyInvestement;\r\n\r\n        emit SetProxyInvestement( _proxyInvestement);\r\n\r\n    } \r\n\r\n    /**\r\n     * @dev Add a contract address to the whitelist\r\n     * @param _contract The address of the contract.\r\n     */\r\n    function addToWhitelist(address _contract) external onlyOwner {\r\n        require(\r\n            _contract!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        whitelist[_contract] = true;\r\n    } \r\n\r\n    /**\r\n     * @dev Remove a contract address from the whitelist\r\n     * @param _contract The address of the contract.\r\n     */\r\n    function removeFromWhitelist(address _contract) external onlyOwner {\r\n         require(\r\n            whitelist[_contract] == true,\r\n            \"Formation.Fi: no whitelist\"\r\n        );\r\n        require(\r\n            _contract!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        whitelist[_contract] = false;\r\n    } \r\n\r\n    /**\r\n     * @dev Update the proxyAdmin.\r\n     * @param _proxyAdmin.\r\n     */\r\n    function setAdmin(address _proxyAdmin) external onlyOwner {\r\n        require(\r\n            _proxyAdmin!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n        \r\n         proxyAdmin = _proxyAdmin;\r\n    } \r\n\r\n\r\n    \r\n    /**\r\n     * @dev add user's deposit.\r\n     * @param _account The user's address.\r\n     * @param _amount The user's deposit amount.\r\n     * @param _time The deposit time.\r\n     */\r\n    function addDeposit(address _account, uint256 _amount, uint256 _time) \r\n        external onlyProxyInvestement {\r\n        require(\r\n            _account!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n            _amount!= 0,\r\n            \"Formation.Fi: zero amount\"\r\n        );\r\n\r\n        require(\r\n            _time!= 0,\r\n            \"Formation.Fi: zero time\"\r\n        );\r\n        Deposit memory _deposit = Deposit(_amount, _time); \r\n        depositPerAddress[_account].push(_deposit);\r\n    } \r\n\r\n     /**\r\n     * @dev mint the token product for the user.\r\n     * @notice To receive the token product, the user has to deposit \r\n     * the required StableCoin in this product. \r\n     * @param _account The user's address.\r\n     * @param _amount The amount to be minted.\r\n     */\r\n    function mint(address _account, uint256 _amount) external onlyProxy {\r\n        require(\r\n          _account!= address(0),\r\n           \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n            _amount!= 0,\r\n            \"Formation.Fi: zero amount\"\r\n        );\r\n\r\n       _mint(_account,  _amount);\r\n   }\r\n\r\n    /**\r\n     * @dev burn the token product of the user.\r\n     * @notice When the user withdraws his Stablecoins, his tokens \r\n     * product are burned. \r\n     * @param _account The user's address.\r\n     * @param _amount The amount to be burned.\r\n     */\r\n    function burn(address _account, uint256 _amount) external onlyProxy {\r\n        require(\r\n            _account!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n         require(\r\n            _amount!= 0,\r\n            \"Formation.Fi: zero amount\"\r\n        );\r\n\r\n        _burn( _account, _amount);\r\n    }\r\n    \r\n     /**\r\n     * @dev Verify the lock up condition for a user's withdrawal request.\r\n     * @param _account The user's address.\r\n     * @param _amount The amount to be withdrawn.\r\n     * @param _period The lock up period.\r\n     * @return _success  is true if the lock up condition is satisfied.\r\n     */\r\n    function checklWithdrawalRequest(address _account, uint256 _amount, uint256 _period) \r\n        external view returns (bool _success){\r\n        require(\r\n            _account!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n           _amount!= 0,\r\n            \"Formation.Fi: zero amount\"\r\n        );\r\n\r\n        Deposit[] memory _deposit = depositPerAddress[_account];\r\n        uint256 _amountTotal = 0;\r\n        for (uint256 i = 0; i < _deposit.length; i++) {\r\n             require ((block.timestamp - _deposit[i].time) >= _period, \r\n            \"Formation.Fi:  position locked\");\r\n            if (_amount<= (_amountTotal + _deposit[i].amount)){\r\n                break; \r\n            }\r\n            _amountTotal = _amountTotal + _deposit[i].amount;\r\n        }\r\n        _success= true;\r\n    }\r\n\r\n\r\n     /**\r\n     * @dev update the user's token data.\r\n     * @notice this function is called after each desposit request \r\n     * validation by the manager.\r\n     * @param _account The user's address.\r\n     * @param _amount The deposit amount validated by the manager.\r\n     */\r\n    function updateTokenData( address _account,  uint256 _amount) \r\n        external onlyProxyInvestement {\r\n        _updateTokenData(_account,  _amount);\r\n    }\r\n\r\n    function _updateTokenData( address _account,  uint256 _amount) internal {\r\n        require(\r\n            _account!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n            _amount!= 0,\r\n            \"Formation.Fi: zero amount\"\r\n        );\r\n\r\n        Deposit[] memory _deposit = depositPerAddress[_account];\r\n        uint256 _amountlocal = 0;\r\n        uint256 _amountTotal = 0;\r\n        uint256 _newAmount;\r\n        uint256 k =0;\r\n        for (uint256 i = 0; i < _deposit.length; i++) {\r\n            _amountlocal  = Math.min(_deposit[i].amount, _amount -  _amountTotal);\r\n            _amountTotal = _amountTotal + _amountlocal;\r\n            _newAmount = _deposit[i].amount - _amountlocal;\r\n            depositPerAddress[_account][k].amount = _newAmount;\r\n            if (_newAmount == 0){\r\n               _deleteTokenData(_account, k);\r\n            }\r\n            else {\r\n                k = k+1;\r\n            }\r\n            if (_amountTotal == _amount){\r\n               break; \r\n            }\r\n        }\r\n    }\r\n    \r\n     /**\r\n     * @dev delete the user's token data.\r\n     * @notice This function is called when the user's withdrawal request is  \r\n     * validated by the manager.\r\n     * @param _account The user's address.\r\n     * @param _index The index of the user in 'amountDepositPerAddress'.\r\n     */\r\n    function _deleteTokenData(address _account, uint256 _index) internal {\r\n        require(\r\n            _account!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n        uint256 _size = depositPerAddress[_account].length - 1;\r\n        \r\n        require( _index <= _size,\r\n            \"Formation.Fi: index is out\"\r\n        );\r\n        for (uint256 i = _index; i< _size; i++){\r\n            depositPerAddress[ _account][i] = depositPerAddress[ _account][i+1];\r\n        }\r\n        depositPerAddress[ _account].pop();   \r\n    }\r\n   \r\n     /**\r\n     * @dev update the token data of both the sender and the receiver \r\n       when the product token is transferred.\r\n     * @param from The sender's address.\r\n     * @param to The receiver's address.\r\n     * @param amount The transferred amount.\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n      ) internal virtual override{\r\n      \r\n       if ((to != address(0)) && (to != proxyInvestement) \r\n       && (to != proxyAdmin) && (from != address(0)) && (!whitelist[to])){\r\n          _updateTokenData(from, amount);\r\n          Deposit memory _deposit = Deposit(amount, block.timestamp);\r\n          depositPerAddress[to].push(_deposit);\r\n         \r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: Binance/main/Admin.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n/** \r\n* @author Formation.Fi.\r\n* @notice Implementation of the contract Admin.\r\n*/\r\n\r\ncontract Admin is Ownable {\r\n    using SafeBEP20 for IBEP20;\r\n    uint256 public constant FACTOR_FEES_DECIMALS = 1e4; \r\n    uint256 public constant FACTOR_PRICE_DECIMALS = 1e6;\r\n    uint256 public constant  SECONDES_PER_YEAR = 365 days; \r\n    uint256 public slippageTolerance = 200;\r\n    uint256 public  amountScaleDecimals = 1; \r\n    uint256 public depositFeeRate = 50;  \r\n    uint256 public depositFeeRateParity= 15; \r\n    uint256 public managementFeeRate = 200;\r\n    uint256 public performanceFeeRate = 2000;\r\n    uint256 public performanceFees = 0;\r\n    uint256 public managementFees = 0;\r\n    uint256 public managementFeesTime = 0;\r\n    uint256 public tokenPrice = 1e6;\r\n    uint256 public tokenPriceMean = 1e6;\r\n    uint256 public minAmount= 100 * 1e18;\r\n    uint256 public lockupPeriodUser = 0 days; \r\n    uint256 public timeWithdrawManager = 0;\r\n    uint public netDepositInd= 0;\r\n    uint256 public netAmountEvent =0;\r\n    address public manager;\r\n    address public treasury;\r\n    address public investement;\r\n    address private safeHouse;\r\n    bool public isCancel= true;\r\n    Token public token;\r\n    IBEP20 public stableToken;\r\n\r\n\r\n    constructor( address _manager, address _treasury,  address _stableTokenAddress,\r\n     address _tokenAddress) {\r\n        require(\r\n            _manager != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n           _treasury != address(0),\r\n            \"Formation.Fi:  zero address\"\r\n            );\r\n\r\n        require(\r\n            _stableTokenAddress != address(0),\r\n            \"Formation.Fi:  zero address\"\r\n        );\r\n\r\n        require(\r\n           _tokenAddress != address(0),\r\n            \"Formation.Fi:  zero address\"\r\n        );\r\n\r\n        manager = _manager;\r\n        treasury = _treasury; \r\n        stableToken = IBEP20(_stableTokenAddress);\r\n        token = Token(_tokenAddress);\r\n        uint8 _stableTokenDecimals = BEP20( _stableTokenAddress).decimals();\r\n        if ( _stableTokenDecimals == 6) {\r\n            amountScaleDecimals= 1e12;\r\n        }\r\n    }\r\n\r\n    modifier onlyInvestement() {\r\n        require(investement != address(0),\r\n            \"Formation.Fi:  zero address\"\r\n        );\r\n\r\n        require(msg.sender == investement,\r\n             \"Formation.Fi:  not investement\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == manager, \r\n        \"Formation.Fi: not manager\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Setter functions to update the Portfolio Parameters.\r\n     */\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        require(\r\n            _treasury != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function setManager(address _manager) external onlyOwner {\r\n        require(\r\n            _manager != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        manager = _manager;\r\n    }\r\n\r\n    function setInvestement(address _investement) external onlyOwner {\r\n        require(\r\n            _investement!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        investement = _investement;\r\n    } \r\n\r\n    function setSafeHouse(address _safeHouse) external onlyOwner {\r\n        require(\r\n            _safeHouse!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        safeHouse = _safeHouse;\r\n    } \r\n\r\n    function setCancel(bool _cancel) external onlyManager {\r\n        isCancel= _cancel;\r\n    }\r\n  \r\n    function setLockupPeriodUser(uint256 _lockupPeriodUser) external onlyManager {\r\n        lockupPeriodUser = _lockupPeriodUser;\r\n    }\r\n \r\n    function setDepositFeeRate(uint256 _rate) external onlyManager {\r\n        depositFeeRate= _rate;\r\n    }\r\n\r\n    function setDepositFeeRateParity(uint256 _rate) external onlyManager {\r\n        depositFeeRateParity= _rate;\r\n    }\r\n\r\n    function setManagementFeeRate(uint256 _rate) external onlyManager {\r\n        managementFeeRate = _rate;\r\n    }\r\n\r\n    function setPerformanceFeeRate(uint256 _rate) external onlyManager {\r\n        performanceFeeRate  = _rate;\r\n    }\r\n    function setMinAmount(uint256 _minAmount) external onlyManager {\r\n        minAmount= _minAmount;\r\n     }\r\n\r\n    function updateTokenPrice(uint256 _price) external onlyManager {\r\n        require(\r\n             _price > 0,\r\n            \"Formation.Fi: zero price\"\r\n        );\r\n\r\n        tokenPrice = _price;\r\n    }\r\n\r\n    function updateTokenPriceMean(uint256 _price) external onlyInvestement {\r\n        require(\r\n             _price > 0,\r\n            \"Formation.Fi: zero price\"\r\n        );\r\n        tokenPriceMean  = _price;\r\n    }\r\n\r\n    function updateManagementFeeTime(uint256 _time) external onlyInvestement {\r\n        managementFeesTime = _time;\r\n    }\r\n    \r\n\r\n     /**\r\n     * @dev Calculate performance Fees.\r\n     */\r\n    function calculatePerformanceFees() external onlyManager {\r\n        require(performanceFees == 0, \"Formation.Fi: fees on pending\");\r\n\r\n        uint256 _deltaPrice = 0;\r\n        if (tokenPrice > tokenPriceMean) {\r\n            _deltaPrice = tokenPrice - tokenPriceMean;\r\n            tokenPriceMean = tokenPrice;\r\n            performanceFees = (token.totalSupply() *\r\n            _deltaPrice * performanceFeeRate) / (tokenPrice * FACTOR_FEES_DECIMALS); \r\n        }\r\n    }\r\n\r\n    \r\n     /**\r\n     * @dev Calculate management Fees.\r\n     */\r\n    function calculateManagementFees() external onlyManager {\r\n        require(managementFees == 0, \"Formation.Fi: fees on pending\");\r\n        if (managementFeesTime!= 0){\r\n           uint256 _deltaTime;\r\n           _deltaTime = block.timestamp -  managementFeesTime; \r\n           managementFees = (token.totalSupply() * managementFeeRate * _deltaTime ) \r\n           /(FACTOR_FEES_DECIMALS * SECONDES_PER_YEAR);\r\n           managementFeesTime = block.timestamp; \r\n        }\r\n    }\r\n     \r\n    /**\r\n     * @dev Mint Fees.\r\n     */\r\n    function mintFees() external onlyManager {\r\n        require ((performanceFees + managementFees) > 0, \"Formation.Fi: zero fees\");\r\n\r\n        token.mint(treasury, performanceFees + managementFees);\r\n        performanceFees = 0;\r\n        managementFees = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate net deposit indicator\r\n     * @param _depositAmountTotal the total requested deposit amount by users.\r\n     * @param  _withdrawalAmountTotal the total requested withdrawal amount by users.\r\n     * @param _maxDepositAmount the maximum accepted deposit amount by event.\r\n     * @param _maxWithdrawalAmount the maximum accepted withdrawal amount by event.\r\n     * @return net Deposit indicator: 1 if net deposit case, 0 otherwise (net withdrawal case).\r\n     */\r\n    function calculateNetDepositInd(uint256 _depositAmountTotal, \r\n        uint256 _withdrawalAmountTotal, uint256 _maxDepositAmount, \r\n        uint256 _maxWithdrawalAmount) external onlyInvestement returns( uint256) {\r\n        _depositAmountTotal = Math.min(  _depositAmountTotal,\r\n         _maxDepositAmount);\r\n        _withdrawalAmountTotal =  (_withdrawalAmountTotal * tokenPrice) / FACTOR_PRICE_DECIMALS;\r\n        _withdrawalAmountTotal= Math.min(_withdrawalAmountTotal,\r\n        _maxWithdrawalAmount);\r\n        uint256  _depositAmountTotalAfterFees = _depositAmountTotal - \r\n        ( _depositAmountTotal * depositFeeRate)/ FACTOR_FEES_DECIMALS;\r\n        if  ( _depositAmountTotalAfterFees >= \r\n            ((_withdrawalAmountTotal * tokenPrice) / FACTOR_PRICE_DECIMALS)){\r\n            netDepositInd = 1 ;\r\n        }\r\n        else {\r\n            netDepositInd = 0;\r\n        }\r\n        return netDepositInd;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate net amount \r\n     * @param _depositAmountTotal the total requested deposit amount by users.\r\n     * @param _withdrawalAmountTotal the total requested withdrawal amount by users.\r\n     * @param _maxDepositAmount the maximum accepted deposit amount by event.\r\n     * @param _maxWithdrawalAmount the maximum accepted withdrawal amount by event.\r\n     * @return net amount.\r\n     */\r\n    function calculateNetAmountEvent(uint256 _depositAmountTotal, \r\n        uint256 _withdrawalAmountTotal, uint256 _maxDepositAmount, \r\n        uint256 _maxWithdrawalAmount) external onlyInvestement returns(uint256) {\r\n        _depositAmountTotal = Math.min(  _depositAmountTotal,\r\n         _maxDepositAmount);\r\n        _withdrawalAmountTotal =  (_withdrawalAmountTotal * tokenPrice) / FACTOR_PRICE_DECIMALS;\r\n        _withdrawalAmountTotal= Math.min(_withdrawalAmountTotal,\r\n        _maxWithdrawalAmount);\r\n         uint256  _depositAmountTotalAfterFees = _depositAmountTotal - \r\n        ( _depositAmountTotal * depositFeeRate)/ FACTOR_FEES_DECIMALS;\r\n        \r\n        if (netDepositInd == 1) {\r\n             netAmountEvent =  _depositAmountTotalAfterFees - _withdrawalAmountTotal;\r\n        }\r\n        else {\r\n             netAmountEvent = _withdrawalAmountTotal - _depositAmountTotalAfterFees;\r\n        \r\n        }\r\n        return netAmountEvent;\r\n    }\r\n\r\n    /**\r\n     * @dev Protect against slippage due to assets sale.\r\n     * @param _withdrawalAmount the value of sold assets in Stablecoin.\r\n     * _withdrawalAmount has to be sent to the contract.\r\n     * treasury has to approve the contract for both Stablecoin and token.\r\n     * @return Missed amount to send to the contract due to slippage.\r\n     */\r\n    function protectAgainstSlippage(uint256 _withdrawalAmount) external onlyManager \r\n        returns (uint256) {\r\n        require(_withdrawalAmount != 0, \"Formation.Fi: zero amount\");\r\n\r\n        require(netDepositInd == 0, \"Formation.Fi: no slippage\");\r\n       \r\n       uint256 _amount = 0; \r\n       uint256 _deltaAmount =0;\r\n       uint256 _slippage = 0;\r\n       uint256  _tokenAmount = 0;\r\n       uint256 _balanceTokenTreasury = token.balanceOf(treasury);\r\n       uint256 _balanceStableTreasury = stableToken.balanceOf(treasury) * amountScaleDecimals;\r\n      \r\n        if (_withdrawalAmount< netAmountEvent){\r\n            _amount = netAmountEvent - _withdrawalAmount;   \r\n            _slippage = (_amount * FACTOR_FEES_DECIMALS ) / netAmountEvent;\r\n            if (_slippage >= slippageTolerance) {\r\n                return netAmountEvent;\r\n            }\r\n            else {\r\n                 _deltaAmount = Math.min( _amount, _balanceStableTreasury);\r\n                if ( _deltaAmount  > 0){\r\n                    stableToken.safeTransferFrom(treasury, investement, _deltaAmount/amountScaleDecimals);\r\n                    _tokenAmount = (_deltaAmount * FACTOR_PRICE_DECIMALS)/tokenPrice;\r\n                    token.mint(treasury, _tokenAmount);\r\n                    return _amount - _deltaAmount;\r\n                }\r\n                else {\r\n                     return _amount; \r\n                }  \r\n            }    \r\n        \r\n        }\r\n        else  {\r\n           _amount = _withdrawalAmount - netAmountEvent;   \r\n          _tokenAmount = (_amount * FACTOR_PRICE_DECIMALS)/tokenPrice;\r\n          _tokenAmount = Math.min(_tokenAmount, _balanceTokenTreasury);\r\n          if (_tokenAmount >0) {\r\n              _deltaAmount = (_tokenAmount * tokenPrice)/FACTOR_PRICE_DECIMALS;\r\n              stableToken.safeTransfer(treasury, _deltaAmount/amountScaleDecimals);   \r\n              token.burn( treasury, _tokenAmount);\r\n            }\r\n           if ((_amount - _deltaAmount) > 0) {\r\n            \r\n              stableToken.safeTransfer(safeHouse, (_amount - _deltaAmount)/amountScaleDecimals); \r\n            }\r\n        }\r\n        return 0;\r\n\r\n    } \r\n\r\n     /**\r\n     * @dev Send Stablecoin from the manager to the contract.\r\n     * @param _amount  tha amount to send.\r\n     */\r\n    function sendStableTocontract(uint256 _amount) external \r\n     onlyManager {\r\n      require( _amount > 0,  \"Formation.Fi: zero amount\");\r\n\r\n      stableToken.safeTransferFrom(msg.sender, address(this),\r\n       _amount/amountScaleDecimals);\r\n    }\r\n\r\n   \r\n     /**\r\n     * @dev Send Stablecoin from the contract to the contract Investement.\r\n     */\r\n    function sendStableFromcontract() external \r\n        onlyManager {\r\n        require(investement != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n         stableToken.safeTransfer(investement, stableToken.balanceOf(address(this)));\r\n    }\r\n  \r\n}\r\n\r\n// File: Binance/utils/Pausable.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Transaction is not available\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused, \"Transaction is available\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n// File: Binance/main/Assets.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n/** \r\n* @author Formation.Fi.\r\n* @notice Implementation of the contract Assets.\r\n*/\r\n\r\ncontract Assets is  Pausable {\r\n    using SafeBEP20 for IBEP20;\r\n    struct Asset{\r\n        address  token;\r\n        address oracle;\r\n        uint256 price;\r\n        uint256 decimals;   \r\n    }\r\n\r\n    uint256 public index;\r\n    Asset[] public  assets;\r\n    mapping(address => bool) public whitelist;\r\n    mapping(address => uint256) public indexAsset;\r\n    Admin public admin;\r\n    constructor(address _admin) {\r\n         require(\r\n            _admin != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n         admin = Admin(_admin);\r\n    }\r\n\r\n\r\n    modifier onlyManager() {\r\n        address _manager = admin.manager();\r\n        require(msg.sender == _manager, \"Formation.Fi: no manager\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyManagerOrOwner() {\r\n        address _manager = admin.manager();\r\n        require( (msg.sender == _manager) || ( msg.sender == owner()),\r\n        \"Formation.Fi: no manager or owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter functions .\r\n     */\r\n    function isWhitelist( address _token) external view  returns (bool) {\r\n        return whitelist[_token];\r\n    }\r\n    function getIndex( address _token) external view  returns (uint256) {\r\n        return indexAsset[_token];\r\n    }\r\n\r\n\r\n     /**\r\n     * @dev Setter functions .\r\n     */\r\n    function setAdmin(address _admin) external onlyOwner {\r\n        require(\r\n            _admin != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n        \r\n        admin = Admin(_admin);\r\n    } \r\n\r\n\r\n    /**\r\n     * @dev Add an asset .\r\n     * @param  _token The address of the asset.\r\n     * @param  _oracle The address of the oracle.\r\n     * @param  _price The price in the case where the oracle doesn't exist.\r\n     */\r\n    function addAsset( address _token, address _oracle, uint256 _price) \r\n        external onlyOwner {\r\n        require ( whitelist[_token] == false, \"Formation.Fi: Token exists\");\r\n        if (_oracle == address(0)){\r\n           require(_price != 0, \"zero price\");\r\n        }\r\n        else {\r\n        require(_price == 0, \"not zero price\");\r\n        }\r\n        uint8 _decimals = 0;\r\n        if (_token!=address(0)){\r\n        _decimals = BEP20(_token).decimals();\r\n        }\r\n        Asset memory _asset = Asset(_token, _oracle, _price, _decimals);\r\n        indexAsset[_token] = index;\r\n        assets.push(_asset);\r\n        index = index +1;\r\n        whitelist[_token] = true;\r\n    }\r\n    \r\n     /**\r\n     * @dev Remove an asset .\r\n     * @param  _token The address of the asset.\r\n     */\r\n    function removeAsset( address _token) external onlyManagerOrOwner {\r\n        require ( whitelist[_token] == true, \"Formation.Fi: no Token\");\r\n        whitelist[_token] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev update the asset's oracle .\r\n     * @param  _token The address of the asset.\r\n     * @param  _oracle The new oracle's address.\r\n     */\r\n    function updateOracle( address _token, address _oracle) external onlyOwner {\r\n        require ( whitelist[_token] == true, \"Formation.Fi: no token\");\r\n        uint256 _index = indexAsset[_token];\r\n        assets[_index].oracle = _oracle;\r\n    }\r\n\r\n    /**\r\n     * @dev update the asset's price .\r\n     * @param  _token The address of the asset.\r\n     * @param  _price The new price's address.\r\n     */\r\n    function updatePrice( address _token, uint256 _price) external onlyOwner {\r\n        require ( whitelist[_token] == true, \"Formation.Fi: no token\");\r\n        require ( _price != 0, \"Formation.Fi: zero price\");\r\n        uint256 _index = indexAsset[_token];\r\n        require (assets[_index].oracle == address(0), \" no zero address\");\r\n        assets[_index].price = _price;\r\n    }\r\n    \r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n// File: Binance/main/SafeHouse.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n//import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/** \r\n* @author Formation.Fi.\r\n* @notice Implementation of the contract SafeHouse.\r\n*/\r\n\r\ncontract SafeHouse is  Pausable {\r\n    using SafeBEP20 for IBEP20;\r\n    using Math for uint256;\r\n    uint256 public constant  FACTOR_DECIMALS = 8;\r\n    uint256 public constant STABLE_DECIMALS = 1e18;\r\n    uint256 public maxWithdrawalStatic = 1000000 * 1e18;\r\n    uint256 public maxWithdrawalDynamic =  1000000 * 1e18; \r\n    uint256 public  tolerance;\r\n    mapping(address => bool) public vaultsList;\r\n    Assets public assets;\r\n    Admin public admin;\r\n    constructor( address _assets, address _admin) payable {\r\n        require(\r\n            _assets != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n        require(\r\n            _admin != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n        assets = Assets(_assets);\r\n\r\n        admin = Admin(_admin);\r\n    }\r\n   \r\n\r\n    modifier onlyManager() {\r\n        address _manager = admin.manager();\r\n        require(msg.sender == _manager, \"Formation.Fi: no manager\");\r\n        _;\r\n    }\r\n\r\n\r\n     /**\r\n     * @dev Setter functions.\r\n     */\r\n     function setMaxWithdrawalStatic( uint256 _maxWithdrawalStatic) external onlyOwner {\r\n     maxWithdrawalStatic = _maxWithdrawalStatic;\r\n     }\r\n    \r\n    function setMaxWithdrawalDynamic( uint256 _maxWithdrawalDynamic) external onlyOwner {\r\n     maxWithdrawalDynamic = _maxWithdrawalDynamic;\r\n     }\r\n\r\n    function setTolerance( uint256 _tolerance) external  onlyOwner {\r\n     tolerance = _tolerance;\r\n    }\r\n\r\n    function setAdmin(address _admin) external onlyOwner {\r\n        require(\r\n            _admin != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n        \r\n        admin = Admin(_admin);\r\n    } \r\n\r\n    /**\r\n     * @dev Add a vault address the manager.\r\n     * @param  _vault vault'address.\r\n     */\r\n    function addVault( address _vault) external onlyOwner {\r\n        require(\r\n            _vault != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n        vaultsList[_vault] = true; \r\n     }\r\n\r\n    /**\r\n     * @dev Remove a vault address the manager.\r\n     * @param  _vault vault'address.\r\n     */\r\n    function removeVault( address _vault) external onlyOwner {\r\n        require(\r\n            vaultsList[_vault]== true,\r\n            \"Formation.Fi: no vault\"\r\n        );\r\n        vaultsList[_vault] = false; \r\n     }\r\n    \r\n     /**\r\n     * @dev Send an asset to the contract by the manager.\r\n     * @param _asset asset'address.\r\n     * @param _amount amount to send.\r\n     */\r\n    function sendAsset( address _asset, uint256 _amount) \r\n        external whenNotPaused onlyManager payable {\r\n        uint256 _index =  assets.getIndex(_asset);\r\n        uint256 _price;\r\n        uint256 _decimals;\r\n        uint256 _decimalsPrice;\r\n        address _oracle;\r\n        ( , _oracle, _price, _decimals ) = assets.assets(_index);\r\n        (_price, _decimalsPrice) = getLatestPrice( _asset, _oracle, _price);\r\n      \r\n        maxWithdrawalDynamic = Math.min(maxWithdrawalDynamic + (_amount * _price) / (10 ** _decimalsPrice),\r\n        maxWithdrawalStatic);\r\n\r\n\r\n        if ( _asset == address(0)) {\r\n          require (_amount == msg.value, \"Formation.Fi: wrong amount\");\r\n        }\r\n        else {\r\n            uint256 _scale;\r\n            _scale = Math.max((STABLE_DECIMALS/ 10 ** _decimals), 1);\r\n            IBEP20 asset = IBEP20(_asset);\r\n            asset.safeTransferFrom(msg.sender, address(this), _amount/_scale); \r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw an asset from the contract by the manager.\r\n     * @param _asset asset'address.\r\n     * @param _amount amount to send.\r\n     */\r\n    function withdrawAsset( address _asset, uint256 _amount) external whenNotPaused onlyManager {\r\n        uint256 _index =  assets.getIndex(_asset);\r\n        uint256 _price;\r\n        uint256 _decimals;\r\n        uint256 _decimalsPrice;\r\n        address _oracle;\r\n        ( , _oracle, _price, _decimals ) = assets.assets(_index);\r\n        (_price, _decimalsPrice) = getLatestPrice( _asset, _oracle, _price);\r\n        uint256 _delta = (_amount * _price)  / (10 ** _decimalsPrice);\r\n        require ( Math.min(maxWithdrawalDynamic, maxWithdrawalStatic) >= _delta , \"Formation.Fi: maximum withdrawal\");\r\n        maxWithdrawalDynamic = maxWithdrawalDynamic  - _delta  + (_delta * tolerance)/(10 ** FACTOR_DECIMALS);\r\n         if ( _asset == address(0)) {\r\n         payable(msg.sender).transfer(_amount);\r\n        }\r\n        else {\r\n        uint256 _scale;\r\n        _scale = Math.max((STABLE_DECIMALS/ 10 **_decimals), 1);\r\n        IBEP20 asset = IBEP20(_asset);\r\n        asset.safeTransfer(msg.sender, _amount/_scale);   \r\n        } \r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Get the asset's price.\r\n     * @param _asset asset'address.\r\n     * @param _oracle oracle'address.\r\n     * @param _price asset'price.\r\n     * @return price\r\n     */\r\n\r\n    function getLatestPrice( address _asset, address _oracle, uint256 _price) public view returns (uint256, uint256) {\r\n        require (assets.isWhitelist(_asset) ==true, \"Formation.Fi: not asset\");\r\n        if (_oracle == address(0)) {\r\n            return (_price, FACTOR_DECIMALS);\r\n        }\r\n        else {\r\n        AggregatorV3Interface  priceFeed = AggregatorV3Interface(_oracle);\r\n        (\r\n            /*uint80 roundID*/,\r\n            int price,\r\n            /*uint startedAt*/,\r\n            /*uint timeStamp*/,\r\n            /*uint80 answeredInRound*/\r\n        ) = priceFeed.latestRoundData();\r\n        uint8 _decimals = priceFeed.decimals();\r\n        return (uint256(price), _decimals);\r\n        }   \r\n    }\r\n\r\n     /**\r\n     * @dev Send an asset to the vault.\r\n     * @param _asset asset'address.\r\n     * @param _vault vault'address.\r\n     * @param _amount to send.\r\n     */\r\n    function sendToVault( address _asset, address _vault,  uint256 _amount) external\r\n        whenNotPaused onlyManager {\r\n        require (_vault !=address(0) , \"Formation.Fi: zero address\");\r\n        require (vaultsList[_vault] == true , \"Formation.Fi: no vault\");\r\n        uint256 _index =  assets.getIndex(_asset);\r\n        uint256 _decimals;\r\n        ( , , , _decimals ) = assets.assets(_index);\r\n        if ( _asset == address(0)){\r\n           require (_amount <= address(this).balance , \r\n           \"Formation.Fi: balance limit\");\r\n           payable (_vault).transfer(_amount);\r\n        }\r\n        else{\r\n            uint256 _scale;\r\n            _scale = Math.max((STABLE_DECIMALS/ 10 ** _decimals), 1);\r\n            IBEP20 asset = IBEP20(_asset);\r\n           require ((_amount/_scale) <= asset.balanceOf(address(this)) , \"Formation.Fi: balance limit\");\r\n           asset.transfer(_vault, _amount/_scale);   \r\n        \r\n        }\r\n    }\r\n\r\n\r\n    fallback() external payable {\r\n     \r\n    }\r\n\r\n     receive() external payable {\r\n       \r\n    }\r\n\r\n\r\n    \r\n       \r\n\r\n}\r\n\r\n// File: Binance/Alpha/SafeHouseAlpha.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n/** \r\n* @author Formation.Fi.\r\n* @notice Implementation of the contract SafeHouseAlpha.\r\n*/\r\n\r\ncontract SafeHouseAlpha is SafeHouse{\r\n        constructor(address _assets, address _admin) SafeHouse(_assets, _admin) {\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assets\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"FACTOR_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"contract Admin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"contract Assets\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWithdrawalDynamic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWithdrawalStatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"removeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWithdrawalDynamic\",\"type\":\"uint256\"}],\"name\":\"setMaxWithdrawalDynamic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWithdrawalStatic\",\"type\":\"uint256\"}],\"name\":\"setMaxWithdrawalStatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tolerance\",\"type\":\"uint256\"}],\"name\":\"setTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultsList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SafeHouseAlpha", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002147e580a1388242b284925f5e8e90e16d7a33b700000000000000000000000097f0f5891fa41a6c4406c9f4bbe8ecb7ee4a10fb", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://30848b77330bbeb5f586a69d6c4238beb595c33f48aa2628df2c763898129c0f"}