{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/gene/IGeneScience.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"../libraries/BotanStruct.sol\\\";\\n\\ninterface IGeneScience {\\n    function unbox(\\n        BotanStruct.Botan memory seed,\\n        BotanStruct.Botan calldata dad,\\n        BotanStruct.Botan calldata mom\\n    ) external view returns (BotanStruct.Botan memory);\\n\\n    function grow(\\n        BotanStruct.Botan memory seed,\\n        BotanStruct.Botan calldata dad,\\n        BotanStruct.Botan calldata mom\\n    ) external view returns (BotanStruct.Botan memory);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/BotanStruct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\nlibrary BotanStruct {\\n    struct Botan {\\n        uint32 category;\\n        BotanRarity rarity; // 1-4\\n        uint8 breedTimes; // 0-n\\n        BotanPhase phase; // 1-4\\n        uint32 dadId;\\n        uint32 momId;\\n        uint64 time;\\n        uint64 blocks;\\n    }\\n\\n    enum BotanPhase {\\n        None,\\n        Seed,\\n        Plant\\n    }\\n\\n    enum BotanRarity {\\n        None,\\n        C,\\n        R,\\n        SR,\\n        SSR\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LandStruct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\nlibrary LandStruct {\\n    struct Land {\\n        LandRarity rarity; //1-4\\n        uint32 category;\\n        uint64 time;\\n    }\\n\\n    enum LandRarity {\\n        None,\\n        C,\\n        R,\\n        SR,\\n        SSR\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/logic/GameLogicV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../libraries/BotanStruct.sol\\\";\\nimport \\\"../libraries/LandStruct.sol\\\";\\nimport \\\"../nft/IBotanNFT.sol\\\";\\nimport \\\"../nft/ILandNFT.sol\\\";\\nimport \\\"../role/IRole.sol\\\";\\nimport \\\"../role/IBlackList.sol\\\";\\nimport \\\"../gene/IGeneScience.sol\\\";\\n\\ncontract GameLogicV2 {\\n    event SetContractEvent(uint256 _type, address _contract);\\n    event SetContractOwnerEvent(address _owner);\\n    event SetUnboxSecondsEvent(uint64 _val);\\n    event SetGrowSecondsEvent(uint64 _val);\\n    event SetSecondsPerBlockEvent(uint64 _val);\\n    event SetMaxBreedTimesEvent(uint8 _cVal, uint8 _rVal, uint8 _srVal, uint8 _ssrVal);\\n    event BurnBotanEvent(uint256 _val);\\n    event BurnLandEvent(uint256 _val);\\n    event AdminWithdrawEvent(\\n        address indexed _tokenAddr,\\n        uint256 indexed _orderId,\\n        address _from,\\n        address indexed _to,\\n        uint256 _amountOrTokenId\\n    );\\n    event UserWithdrawEvent(\\n        address indexed _tokenAddr,\\n        uint256 indexed _orderId,\\n        address _from,\\n        address indexed _to,\\n        uint256 _amountOrTokenId\\n    );\\n    event SetWithdrawAddressEvent(address _address);\\n    event OrderPaymentEvent(\\n        address indexed _tokenAddr,\\n        uint256 indexed _orderId,\\n        address indexed _userAddress,\\n        uint256 _amount\\n    );\\n    event SetSignerEvent(address _signer);\\n    event SetVersionEvent(string _version);\\n\\n    event FusionPayEvent(uint256 _orderId);\\n    event FusionRevertEvent(uint256 _orderId);\\n\\n    struct PayInfo {\\n        address from;\\n        address to;\\n        address tokenAddress;\\n        uint256 amount;\\n    }\\n\\n    IBotanNFT internal botanNFT;\\n    ILandNFT internal landNFT;\\n    IRole internal roleContract;\\n    IBlackList internal blackListContract;\\n    IGeneScience internal geneScienceContract;\\n\\n    uint64 internal secondsPerBlock;\\n    // grow time\\n    uint64 internal growSeconds;\\n    uint64 internal growBlocks;\\n\\n    uint8[5] internal maxBreedTimes;\\n\\n    address internal signer;\\n    address internal owner;\\n    mapping(bytes => bool) internal signMap;\\n\\n    address internal withdrawAddr;\\n\\n    string internal version = \\\"pc_gl_v2\\\";\\n\\n    constructor() {\\n        owner = msg.sender;\\n        secondsPerBlock = 3;\\n        growSeconds = 600 seconds;\\n        growBlocks = growSeconds / secondsPerBlock;\\n        maxBreedTimes = [0, 7, 6, 5, 3];\\n        withdrawAddr = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner can call this function\\\");\\n        _;\\n    }\\n\\n    function changeOwner(address _newOwner) external onlyOwner {\\n        owner = _newOwner;\\n        emit SetContractOwnerEvent(_newOwner);\\n    }\\n\\n    modifier onlyCFO() {\\n        require(address(roleContract) != address(0), \\\"Role contract isn't set\\\");\\n        require(roleContract.isCFO(msg.sender), \\\"Only CFO can call this function\\\");\\n        _;\\n    }\\n\\n    function setSigner(address _signer) external {\\n        require(\\n            owner == msg.sender || (address(roleContract) != address(0) && roleContract.isCEO(msg.sender)),\\n            \\\"Permission denied\\\"\\n        );\\n        signer = _signer;\\n        emit SetSignerEvent(_signer);\\n    }\\n\\n    function setVersion(string calldata _version) external {\\n        require(\\n            owner == msg.sender || (address(roleContract) != address(0) && roleContract.isCEO(msg.sender)),\\n            \\\"Permission denied\\\"\\n        );\\n        version = _version;\\n        emit SetVersionEvent(_version);\\n    }\\n\\n    function setBotanNFTContract(address _address) external {\\n        require(\\n            owner == msg.sender || (address(roleContract) != address(0) && roleContract.isCEO(msg.sender)),\\n            \\\"Permission denied\\\"\\n        );\\n        botanNFT = IBotanNFT(_address);\\n        emit SetContractEvent(0, _address);\\n    }\\n\\n    function setLandNFTContract(address _address) external {\\n        require(\\n            owner == msg.sender || (address(roleContract) != address(0) && roleContract.isCEO(msg.sender)),\\n            \\\"Permission denied\\\"\\n        );\\n        landNFT = ILandNFT(_address);\\n        emit SetContractEvent(1, _address);\\n    }\\n\\n    function setRoleContract(address _address) external {\\n        require(\\n            owner == msg.sender || (address(roleContract) != address(0) && roleContract.isCEO(msg.sender)),\\n            \\\"Permission denied\\\"\\n        );\\n        roleContract = IRole(_address);\\n        emit SetContractEvent(2, _address);\\n    }\\n\\n    function setBlackListContract(address _address) external {\\n        require(\\n            owner == msg.sender || (address(roleContract) != address(0) && roleContract.isCEO(msg.sender)),\\n            \\\"Permission denied\\\"\\n        );\\n        blackListContract = IBlackList(_address);\\n        emit SetContractEvent(3, _address);\\n    }\\n\\n    function setGeneScienceContract(address _address) external {\\n        require(\\n            owner == msg.sender || (address(roleContract) != address(0) && roleContract.isCEO(msg.sender)),\\n            \\\"Permission denied\\\"\\n        );\\n        geneScienceContract = IGeneScience(_address);\\n        emit SetContractEvent(4, _address);\\n    }\\n\\n    function setWithdrawAddr(address _address) external {\\n        require(\\n            owner == msg.sender || (address(roleContract) != address(0) && roleContract.isCEO(msg.sender)),\\n            \\\"Permission denied\\\"\\n        );\\n        withdrawAddr = _address;\\n        emit SetWithdrawAddressEvent(_address);\\n    }\\n\\n    function setGrowSeconds(uint64 _val) external {\\n        require(address(roleContract) != address(0), \\\"Role contract isn't set\\\");\\n        require(roleContract.isCEO(msg.sender), \\\"Permission denied\\\");\\n        growSeconds = _val;\\n        growBlocks = growSeconds / secondsPerBlock;\\n        emit SetGrowSecondsEvent(_val);\\n    }\\n\\n    function setSecondsPerBlock(uint64 _val) external {\\n        require(address(roleContract) != address(0), \\\"Role contract isn't set\\\");\\n        require(roleContract.isCEO(msg.sender), \\\"Permission denied\\\");\\n        secondsPerBlock = _val;\\n        growBlocks = growSeconds / secondsPerBlock;\\n        emit SetSecondsPerBlockEvent(_val);\\n    }\\n\\n    function setMaxBreedTimes(uint8[5] calldata _val) external {\\n        require(address(roleContract) != address(0), \\\"Role contract isn't set\\\");\\n        require(roleContract.isCEO(msg.sender), \\\"Permission denied\\\");\\n        maxBreedTimes = _val;\\n        emit SetMaxBreedTimesEvent(_val[1], _val[2], _val[3], _val[4]);\\n    }\\n\\n    function doGrow(\\n        uint256 _tokenId,\\n        BotanStruct.Botan memory _newPlantData,\\n        uint256 _tx\\n    ) internal returns (BotanStruct.Botan memory) {\\n        require(address(botanNFT) != address(0), \\\"BotanNFT contract isn't set\\\");\\n        require(botanNFT.exists(_tokenId), \\\"Token is not minted\\\");\\n        BotanStruct.Botan memory _seed = botanNFT.getPlantDataByLogic(_tokenId);\\n        require(_seed.phase == BotanStruct.BotanPhase.Seed, \\\"This is not a seed\\\");\\n        require((_seed.time + growSeconds) < block.timestamp, \\\"Time is not reached\\\");\\n        _seed.rarity = _newPlantData.rarity;\\n        _seed.category = _newPlantData.category;\\n        botanNFT.growByLogic(_tokenId, _seed, _tx);\\n        return _newPlantData;\\n    }\\n\\n    function grow(uint256 _tokenId, uint256 _tx) external returns (BotanStruct.Botan memory) {\\n        require(address(roleContract) != address(0), \\\"Role contract isn't set\\\");\\n        require(address(geneScienceContract) != address(0), \\\"GeneScience Contract contract isn't set\\\");\\n        require(roleContract.isCXO(msg.sender), \\\"Permission denied\\\");\\n        BotanStruct.Botan memory seed = botanNFT.getPlantDataByLogic(_tokenId);\\n        BotanStruct.Botan memory dad = botanNFT.getPlantDataByLogic(seed.dadId);\\n        BotanStruct.Botan memory mom = botanNFT.getPlantDataByLogic(seed.momId);\\n        BotanStruct.Botan memory _newPlantData = geneScienceContract.grow(seed, dad, mom);\\n        return doGrow(_tokenId, _newPlantData, _tx);\\n    }\\n    /*\\n    function growByPlantData(\\n        uint256 _tokenId,\\n        BotanStruct.Botan calldata _newPlantData,\\n        uint256 _tx\\n    ) external returns (BotanStruct.Botan memory) {\\n        require(address(roleContract) != address(0), \\\"Role contract isn't set\\\");\\n        require(roleContract.isCXO(msg.sender), \\\"Permission denied\\\");\\n        BotanStruct.Botan memory _seed = botanNFT.getPlantDataByLogic(_tokenId);\\n        _seed.rarity = _newPlantData.rarity;\\n        _seed.category = _newPlantData.category;\\n        return doGrow(_tokenId, _seed, _tx);\\n    }\\n\\n    function growByPlantDataWithSign(\\n        uint256 _tokenId,\\n        BotanStruct.Botan calldata _newPlantData,\\n        uint256 _tx,\\n        bytes memory _sign\\n    ) external returns (BotanStruct.Botan memory) {\\n        require(signMap[_sign] != true, \\\"This signature already be used!\\\");\\n        bytes32 _msgHash = ECDSA.toEthSignedMessageHash(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"pc_gl_v1\\\",\\n                    _tokenId,\\n                    _newPlantData.category,\\n                    _newPlantData.rarity,\\n                    _newPlantData.breedTimes,\\n                    _newPlantData.phase,\\n                    _newPlantData.dadId,\\n                    _newPlantData.momId,\\n                    _tx,\\n                    block.chainid\\n                )\\n            )\\n        );\\n        address signerAddress = ECDSA.recover(_msgHash, _sign);\\n        require(signerAddress != address(0) && signerAddress == signer, \\\"Invalid Signer!\\\");\\n        signMap[_sign] = true;\\n        return doGrow(_tokenId, _newPlantData, _tx);\\n    }\\n*/\\n    function breed(\\n        address _owner,\\n        uint256 _dadId,\\n        uint256 _momId,\\n        BotanStruct.BotanRarity _rarity,\\n        uint256 _tx,\\n        bool _safe\\n    ) external returns (uint256) {\\n        require(address(roleContract) != address(0), \\\"Role contract isn't set\\\");\\n        require(roleContract.isCXO(msg.sender), \\\"Permission denied\\\");\\n        return doBreed(_owner, _dadId, _momId, _rarity, _tx, _safe);\\n    }\\n\\n    function breedWithSign(\\n        address _owner,\\n        uint256 _dadId,\\n        uint256 _momId,\\n        BotanStruct.BotanRarity _rarity,\\n        uint256 _tx,\\n        bool _safe,\\n        bytes memory _sign\\n    ) external returns (uint256) {\\n        require(signMap[_sign] != true, \\\"This signature already be used!\\\");\\n        bytes32 _msgHash = ECDSA.toEthSignedMessageHash(\\n            keccak256(abi.encodePacked(\\\"pc_gl_v1\\\", _owner, _dadId, _momId, _rarity, _tx, _safe, block.chainid))\\n        );\\n        address signerAddress = ECDSA.recover(_msgHash, _sign);\\n        require(signerAddress != address(0) && signerAddress == signer, \\\"Invalid Signer!\\\");\\n        signMap[_sign] = true;\\n        return doBreed(_owner, _dadId, _momId, _rarity, _tx, _safe);\\n    }\\n\\n    function doBreed(\\n        address _owner,\\n        uint256 _dadId,\\n        uint256 _momId,\\n        BotanStruct.BotanRarity _rarity,\\n        uint256 _tx,\\n        bool _safe\\n    ) internal returns (uint256) {\\n        require(address(botanNFT) != address(0), \\\"BotanNFT contract isn't set\\\");\\n        require(botanNFT.exists(_dadId), \\\"Dad is not minted\\\");\\n        require(botanNFT.exists(_momId), \\\"Mom is not minted\\\");\\n        BotanStruct.Botan memory dad = botanNFT.getPlantDataByLogic(_dadId);\\n        BotanStruct.Botan memory mom = botanNFT.getPlantDataByLogic(_momId);\\n        require(\\n            ((mom.momId == 0 || dad.dadId == 0) ||\\n                // Or their parents are not same.There are not brother\\n                ((mom.dadId != dad.dadId) &&\\n                    (mom.dadId != dad.momId) &&\\n                    (mom.momId != dad.momId) &&\\n                    (mom.momId != dad.dadId))) &&\\n                // Their parents can not be father and son\\n                ((_momId != dad.momId && _momId != dad.dadId) && (_dadId != mom.momId && _dadId != mom.dadId)),\\n            \\\"Inbreeding is prohibited.\\\"\\n        );\\n        uint8 mombt = maxBreedTimes[uint8(mom.rarity)];\\n        uint8 dadbt = maxBreedTimes[uint8(dad.rarity)];\\n        require((mom.breedTimes < mombt) && (dad.breedTimes < dadbt), \\\"Breeding limit exceeded.\\\");\\n        return\\n            botanNFT.breedByLogic(_owner, _dadId, _momId, _rarity, uint64(block.number + growBlocks - 1), _tx, _safe);\\n    }\\n\\n    function mintLand(\\n        address _owner,\\n        LandStruct.Land calldata _landData,\\n        uint256 _tx,\\n        bool _safe\\n    ) external returns (uint256) {\\n        require(address(roleContract) != address(0), \\\"Role contract isn't set\\\");\\n        require(roleContract.isCXO(msg.sender), \\\"Permission denied\\\");\\n        return landNFT.mintLandByLogic(_owner, _landData, _tx, _safe);\\n    }\\n\\n    function mintLandWithSign(\\n        address _owner,\\n        LandStruct.Land calldata _landData,\\n        uint256 _tx,\\n        bool _safe,\\n        bytes memory _sign\\n    ) external returns (uint256) {\\n        require(signMap[_sign] != true, \\\"This signature already be used!\\\");\\n        bytes32 _msgHash = ECDSA.toEthSignedMessageHash(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"pc_gl_v1\\\",\\n                    _owner,\\n                    _landData.category,\\n                    _landData.rarity,\\n                    _landData.time,\\n                    _tx,\\n                    _safe,\\n                    block.chainid\\n                )\\n            )\\n        );\\n        address signerAddress = ECDSA.recover(_msgHash, _sign);\\n        require(signerAddress != address(0) && signerAddress == signer, \\\"Invalid Signer!\\\");\\n        signMap[_sign] = true;\\n        return landNFT.mintLandByLogic(_owner, _landData, _tx, _safe);\\n    }\\n\\n    function mintSeedOrPlant(\\n        address _owner,\\n        BotanStruct.Botan calldata _plantData,\\n        uint256 _tx,\\n        bool _safe\\n    ) external returns (uint256) {\\n        require(address(roleContract) != address(0), \\\"Role contract isn't set\\\");\\n        require(roleContract.isCXO(msg.sender), \\\"Permission denied\\\");\\n        return botanNFT.mintSeedOrPlantByLogic(_owner, _plantData, _tx, _safe);\\n    }\\n\\n    function mintSeedOrPlantWithSign(\\n        address _owner,\\n        BotanStruct.Botan calldata _plantData,\\n        uint256 _tx,\\n        bool _safe,\\n        bytes memory _sign\\n    ) external returns (uint256) {\\n        require(signMap[_sign] != true, \\\"This signature already be used!\\\");\\n        bytes32 _msgHash = ECDSA.toEthSignedMessageHash(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"pc_gl_v1\\\",\\n                    _owner,\\n                    _plantData.category,\\n                    _plantData.rarity,\\n                    _plantData.breedTimes,\\n                    _plantData.phase,\\n                    _plantData.dadId,\\n                    _plantData.momId,\\n                    _tx,\\n                    _safe,\\n                    block.chainid\\n                )\\n            )\\n        );\\n        address signerAddress = ECDSA.recover(_msgHash, _sign);\\n        require(signerAddress != address(0) && signerAddress == signer, \\\"Invalid Signer!\\\");\\n        signMap[_sign] = true;\\n        return botanNFT.mintSeedOrPlantByLogic(_owner, _plantData, _tx, _safe);\\n    }\\n\\n    function growByPlantDataWithSignV2(\\n        uint256 _tokenId,\\n        BotanStruct.Botan calldata _newPlantData,\\n        uint256 _tx,\\n        PayInfo calldata _payInfo,\\n        bytes memory _sign\\n    ) external payable virtual returns (BotanStruct.Botan memory) {\\n        require(signMap[_sign] != true, \\\"This signature already be used!\\\");\\n        bytes memory _encodedPayInfo = abi.encodePacked(\\n            _payInfo.from,\\n            _payInfo.to,\\n            _payInfo.tokenAddress,\\n            _payInfo.amount\\n        );\\n        bytes32 _msgHash = ECDSA.toEthSignedMessageHash(\\n            keccak256(\\n                abi.encodePacked(\\n                    version,\\n                    _tokenId,\\n                    _newPlantData.category,\\n                    _newPlantData.rarity,\\n                    _newPlantData.breedTimes,\\n                    _newPlantData.phase,\\n                    _tx,\\n                    _encodedPayInfo,\\n                    block.chainid\\n                )\\n            )\\n        );\\n        address signerAddress = ECDSA.recover(_msgHash, _sign);\\n        require(signerAddress != address(0) && signerAddress == signer, \\\"Invalid Signer!\\\");\\n        signMap[_sign] = true;\\n        if (_payInfo.amount > 0) {\\n            payTokenV2(_payInfo.tokenAddress, _payInfo.to, _payInfo.amount, _tx);\\n        }\\n        return doGrow(_tokenId, _newPlantData, _tx);\\n    }\\n\\n    function breedWithSignV2(\\n        address _owner,\\n        uint256 _dadId,\\n        uint256 _momId,\\n        BotanStruct.BotanRarity _rarity,\\n        uint256 _tx,\\n        bool _safe,\\n        PayInfo calldata _payInfo,\\n        bytes memory _sign\\n    ) external payable returns (uint256) {\\n        require(signMap[_sign] != true, \\\"This signature already be used!\\\");\\n        bytes memory _encodedPayInfo = abi.encodePacked(\\n            _payInfo.from,\\n            _payInfo.to,\\n            _payInfo.tokenAddress,\\n            _payInfo.amount\\n        );\\n        bytes32 _msgHash = ECDSA.toEthSignedMessageHash(\\n            keccak256(abi.encodePacked(version, _owner, _rarity, _tx, _safe, _encodedPayInfo, block.chainid))\\n        );\\n        address signerAddress = ECDSA.recover(_msgHash, _sign);\\n        require(signerAddress != address(0) && signerAddress == signer, \\\"Invalid Signer!\\\");\\n        signMap[_sign] = true;\\n        if (_payInfo.amount > 0) {\\n            payTokenV2(_payInfo.tokenAddress, _payInfo.to, _payInfo.amount, _tx);\\n        }\\n        return doBreed(_owner, _dadId, _momId, _rarity, _tx, _safe);\\n    }\\n\\n    function mintLandWithSignV2(\\n        address _owner,\\n        LandStruct.Land calldata _landData,\\n        uint256 _tx,\\n        bool _safe,\\n        PayInfo calldata _payInfo,\\n        bytes memory _sign\\n    ) external payable returns (uint256) {\\n        require(signMap[_sign] != true, \\\"This signature already be used!\\\");\\n        bytes memory _encodedPayInfo = abi.encodePacked(\\n            _payInfo.from,\\n            _payInfo.to,\\n            _payInfo.tokenAddress,\\n            _payInfo.amount\\n        );\\n        bytes32 _msgHash = ECDSA.toEthSignedMessageHash(\\n            keccak256(\\n                abi.encodePacked(\\n                    version,\\n                    _owner,\\n                    _landData.category,\\n                    _landData.rarity,\\n                    _landData.time,\\n                    _tx,\\n                    _safe,\\n                    _encodedPayInfo,\\n                    block.chainid\\n                )\\n            )\\n        );\\n        address signerAddress = ECDSA.recover(_msgHash, _sign);\\n        require(signerAddress != address(0) && signerAddress == signer, \\\"Invalid Signer!\\\");\\n        signMap[_sign] = true;\\n        if (_payInfo.amount > 0) {\\n            payTokenV2(_payInfo.tokenAddress, _payInfo.to, _payInfo.amount, _tx);\\n        }\\n        return landNFT.mintLandByLogic(_owner, _landData, _tx, _safe);\\n    }\\n\\n    function mintSeedOrPlantWithSignV2(\\n        address _owner,\\n        BotanStruct.Botan calldata _plantData,\\n        uint256 _tx,\\n        bool _safe,\\n        PayInfo calldata _payInfo,\\n        bytes memory _sign\\n    ) external payable returns (uint256) {\\n        require(signMap[_sign] != true, \\\"This signature already be used!\\\");\\n        bytes memory _encodedPayInfo = abi.encodePacked(\\n            _payInfo.from,\\n            _payInfo.to,\\n            _payInfo.tokenAddress,\\n            _payInfo.amount\\n        );\\n        bytes32 _msgHash = ECDSA.toEthSignedMessageHash(\\n            keccak256(\\n                abi.encodePacked(\\n                    version,\\n                    _owner,\\n                    _plantData.category,\\n                    _plantData.rarity,\\n                    _plantData.breedTimes,\\n                    _plantData.phase,\\n                    _tx,\\n                    _encodedPayInfo,\\n                    block.chainid\\n                )\\n            )\\n        );\\n        address signerAddress = ECDSA.recover(_msgHash, _sign);\\n        require(signerAddress != address(0) && signerAddress == signer, \\\"Invalid Signer!\\\");\\n        signMap[_sign] = true;\\n        if (_payInfo.amount > 0) {\\n            payTokenV2(_payInfo.tokenAddress, _payInfo.to, _payInfo.amount, _tx);\\n        }\\n        return botanNFT.mintSeedOrPlantByLogic(_owner, _plantData, _tx, _safe);\\n    }\\n\\n    function fusionBurnOrTransfer(\\n        uint256[] calldata _fusionTokenIds,\\n        address _fusionTo\\n    ) internal {\\n        bool isBurn = _fusionTo == address(0);\\n        for (uint256 i = 0; i < _fusionTokenIds.length; i++) {\\n            uint256 _fusionTokenId = _fusionTokenIds[i];\\n            if (isBurn) {\\n                botanNFT.burnByLogic(_fusionTokenId);\\n            } else {\\n                botanNFT.transferFrom(msg.sender, _fusionTo, _fusionTokenId);\\n            }\\n        }\\n    }\\n\\n    function fusionRevert(\\n        uint256[] calldata _revertTokenIds,\\n        address _revertFrom,\\n        address _revertTo\\n    ) internal {\\n        for (uint256 i = 0; i < _revertTokenIds.length; i++) {\\n            uint256 _fusionTokenId = _revertTokenIds[i];\\n            botanNFT.transferFrom(_revertFrom, _revertTo, _fusionTokenId);\\n        }\\n    }\\n\\n    function fusionPlantPay(\\n        uint256[] calldata _fusionTokenIds,\\n        address _fusionTo,\\n        uint256 _tx,\\n        PayInfo calldata _payInfo,\\n        bytes memory _sign\\n    ) external payable {\\n        require(signMap[_sign] != true, \\\"This signature already be used!\\\");\\n        bytes memory _encodedPayInfo = abi.encodePacked(\\n            _payInfo.from,\\n            _payInfo.to,\\n            _payInfo.tokenAddress,\\n            _payInfo.amount\\n        );\\n        bytes32 _msgHash = ECDSA.toEthSignedMessageHash(\\n            keccak256(\\n                abi.encodePacked(\\n                    version,\\n                    _fusionTokenIds,\\n                    _fusionTo,\\n                    _tx,\\n                    _encodedPayInfo,\\n                    block.chainid\\n                )\\n            )\\n        );\\n        address signerAddress = ECDSA.recover(_msgHash, _sign);\\n        require(signerAddress != address(0) && signerAddress == signer, \\\"Invalid Signer!\\\");\\n        signMap[_sign] = true;\\n        if (_payInfo.amount > 0) {\\n            payTokenV2(_payInfo.tokenAddress, _payInfo.to, _payInfo.amount, _tx);\\n        }\\n        if (_fusionTokenIds.length > 0) {\\n            fusionBurnOrTransfer(_fusionTokenIds, _fusionTo);\\n        }\\n        emit FusionPayEvent(_tx);\\n    }\\n\\n    function fusionPlantWithSignV2(\\n        address _owner,\\n        uint256[] calldata _fusionTokenIds,\\n        address _fusionTo,\\n        uint256[] calldata _revertTokenIds,\\n        address _revertFrom,\\n        address _revertTo,\\n        BotanStruct.Botan calldata _plantData,\\n        uint256 _tx,\\n        bool _safe,\\n        PayInfo calldata _payInfo,\\n        bytes memory _sign\\n    ) external payable returns (uint256) {\\n        require(signMap[_sign] != true, \\\"This signature already be used!\\\");\\n        bytes memory _encodedPayInfo = abi.encodePacked(\\n            _payInfo.from,\\n            _payInfo.to,\\n            _payInfo.tokenAddress,\\n            _payInfo.amount\\n        );\\n        bytes32 _msgHash = ECDSA.toEthSignedMessageHash(\\n            keccak256(\\n                abi.encodePacked(\\n                    version,\\n                    _owner,\\n                    _fusionTokenIds,\\n                    _fusionTo,\\n                    _revertTokenIds,\\n                    _revertFrom,\\n                    _revertTo,\\n                    _plantData.category,\\n                    _plantData.rarity,\\n                    _tx,\\n                    _encodedPayInfo,\\n                    block.chainid\\n                )\\n            )\\n        );\\n        address signerAddress = ECDSA.recover(_msgHash, _sign);\\n        require(signerAddress != address(0) && signerAddress == signer, \\\"Invalid Signer!\\\");\\n        signMap[_sign] = true;\\n        if (_payInfo.amount > 0) {\\n            payTokenV2(_payInfo.tokenAddress, _payInfo.to, _payInfo.amount, _tx);\\n        }\\n        if (_fusionTokenIds.length > 0) {\\n            fusionBurnOrTransfer(_fusionTokenIds, _fusionTo);\\n        }\\n        if (_revertTokenIds.length > 0) {\\n            fusionRevert(_revertTokenIds, _revertFrom, _revertTo);\\n            emit FusionRevertEvent(_tx);\\n        }\\n        if (_plantData.category > 0) {\\n            return botanNFT.mintSeedOrPlantByLogic(_owner, _plantData, _tx, _safe);\\n        }\\n        return 0;\\n    }\\n\\n    function payTokenV2(address _tokenAddr, address _to, uint256 _amount, uint256 _orderId) public payable virtual {\\n        require(_amount > 0, \\\"You need pay some token\\\");\\n        require(address(blackListContract) != address(0), \\\"BlackList contract isn't set\\\");\\n        require(blackListContract.notInBlackList(msg.sender), \\\"You are on the blacklist\\\");\\n        if (_tokenAddr == address(0)) {\\n            payMainTokenV2(_amount, _orderId);\\n        } else {\\n            payErc20TokenV2(_tokenAddr, _to, _amount, _orderId);\\n        }\\n    }\\n\\n    function payMainTokenV2(uint256 _amount, uint256 _orderId) public payable virtual {\\n        require(msg.value >= _amount, \\\"You don't pay enough main token\\\");\\n        emit OrderPaymentEvent(address(0), _orderId, msg.sender, _amount);\\n    }\\n\\n    function payErc20TokenV2(address _tokenAddr, address _to, uint256 _amount, uint256 _orderId) internal virtual {\\n        IERC20 tokenContract = IERC20(_tokenAddr);\\n        uint256 allowance = tokenContract.allowance(msg.sender, address(this));\\n        require(allowance >= _amount, \\\"Check the token allowance\\\");\\n        tokenContract.transferFrom(msg.sender, _to, _amount);\\n        emit OrderPaymentEvent(_tokenAddr, _orderId, msg.sender, _amount);\\n    }\\n\\n    function withdrawMainTokenV2ByAdmin(uint256 _orderId, uint256 _amount) public onlyCFO returns (bool) {\\n        require(_amount <= address(this).balance, \\\"Not enough main token\\\");\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool ret /*bytes memory data*/, ) = withdrawAddr.call{ value: _amount }(\\\"\\\");\\n        if (ret) {\\n            emit AdminWithdrawEvent(address(0), _orderId, address(this), withdrawAddr, _amount);\\n        } else {\\n            revert(\\\"Withdraw main token failed\\\");\\n        }\\n\\n        return ret;\\n    }\\n\\n    function withdrawErc20TokenV2ByAdmin(\\n        address _tokenAddr,\\n        uint256 _orderId,\\n        uint256 _amount\\n    ) public onlyCFO returns (bool) {\\n        IERC20 tokenContract = IERC20(_tokenAddr);\\n        require(_amount <= tokenContract.balanceOf(address(this)), \\\"Not enough ERC20 token\\\");\\n        bool ret = tokenContract.transfer(withdrawAddr, _amount);\\n        if (ret) {\\n            emit AdminWithdrawEvent(_tokenAddr, _orderId, address(this), withdrawAddr, _amount);\\n        } else {\\n            revert(\\\"Withdraw ERC20 token failed\\\");\\n        }\\n\\n        return ret;\\n    }\\n\\n    function withdrawErc20TokenV2ByUser(\\n        address _tokenAddr,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _orderId,\\n        bytes memory _sign\\n    ) public returns (bool) {\\n        bytes32 _msgHash = ECDSA.toEthSignedMessageHash(\\n            keccak256(abi.encodePacked(version, _tokenAddr, _from, _to, _amount, _orderId, block.chainid))\\n        );\\n        address signerAddress = ECDSA.recover(_msgHash, _sign);\\n        require(signerAddress != address(0) && signerAddress == signer, \\\"Invalid Signer!\\\");\\n        signMap[_sign] = true;\\n        IERC20 tokenContract = IERC20(_tokenAddr);\\n        tokenContract.transferFrom(_from, _to, _amount);\\n        emit UserWithdrawEvent(_tokenAddr, _orderId, _from, _to, _amount);\\n        return true;\\n    }\\n\\n    function withdrawErc721TokenV2ByUser(\\n        address _tokenAddr,\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _orderId,\\n        bytes memory _sign\\n    ) public returns (bool) {\\n        bytes32 _msgHash = ECDSA.toEthSignedMessageHash(\\n            keccak256(abi.encodePacked(version, _tokenAddr, _from, _to, _tokenId, _orderId, block.chainid))\\n        );\\n        address signerAddress = ECDSA.recover(_msgHash, _sign);\\n        require(signerAddress != address(0) && signerAddress == signer, \\\"Invalid Signer!\\\");\\n        signMap[_sign] = true;\\n        IERC721 tokenContract = IERC721(_tokenAddr);\\n        tokenContract.transferFrom(_from, _to, _tokenId);\\n        emit UserWithdrawEvent(_tokenAddr, _orderId, _from, _to, _tokenId);\\n        return true;\\n    }\\n\\n    function burnBotan(uint256 _tokenId) external {\\n        require(address(botanNFT) != address(0), \\\"BotanNFT contract isn't set\\\");\\n        require(\\n            owner == msg.sender || (address(roleContract) != address(0) && roleContract.isCXO(msg.sender)),\\n            \\\"Permission denied\\\"\\n        );\\n        botanNFT.burnByLogic(_tokenId);\\n        emit BurnBotanEvent(_tokenId);\\n    }\\n\\n    function burnLand(uint256 _tokenId) external {\\n        require(address(landNFT) != address(0), \\\"LandNFT contract isn't set\\\");\\n        require(\\n            owner == msg.sender || (address(roleContract) != address(0) && roleContract.isCXO(msg.sender)),\\n            \\\"Permission denied\\\"\\n        );\\n        landNFT.burnByLogic(_tokenId);\\n        emit BurnLandEvent(_tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/nft/IBotanNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"../libraries/BotanStruct.sol\\\";\\n\\ninterface IBotanNFT is IERC721Upgradeable {\\n    function getPlantDataByUser(uint256 _tokenId) external view returns (BotanStruct.Botan memory);\\n\\n    function getPlantDataByLogic(uint256 _tokenId) external view returns (BotanStruct.Botan memory);\\n\\n    function mintSeedOrPlantByLogic(\\n        address _owner,\\n        BotanStruct.Botan calldata _plantData,\\n        uint256 _tx,\\n        bool _safe\\n    ) external returns (uint256);\\n\\n    function breedByLogic(\\n        address _owner,\\n        uint256 _dadId,\\n        uint256 _momId,\\n        BotanStruct.BotanRarity _rarity,\\n        uint64 _blocks,\\n        uint256 _tx,\\n        bool _safe\\n    ) external returns (uint256);\\n\\n    function growByLogic(\\n        uint256 _tokenId,\\n        BotanStruct.Botan calldata _newGeneData,\\n        uint256 _tx\\n    ) external returns (BotanStruct.Botan memory);\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function burnByCXO(uint256 _tokenId) external;\\n\\n    function burnByLogic(uint256 _tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/nft/ILandNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"../libraries/LandStruct.sol\\\";\\n\\ninterface ILandNFT is IERC721Upgradeable {\\n    function getLandDataByLogic(uint256 _tokenId) external view returns (LandStruct.Land memory);\\n\\n    function getLandDataByUser(uint256 _tokenId) external view returns (LandStruct.Land memory);\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function mintLandByLogic(\\n        address _owner,\\n        LandStruct.Land calldata _landData,\\n        uint256 _tx,\\n        bool _safe\\n    ) external returns (uint256);\\n\\n    function burnByCXO(uint256 _tokenId) external;\\n\\n    function burnByLogic(uint256 _tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/role/IBlackList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IBlackList {\\n    function addToBlackList(address _user) external;\\n\\n    function removeFromBlackList(address _user) external;\\n\\n    function inBlackList(address _user) external view returns (bool);\\n\\n    function notInBlackList(address _user) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/role/IRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IRole {\\n    function isCEO(address addr) external view returns (bool);\\n\\n    function isCOO(address addr) external view returns (bool);\\n\\n    function isCFO(address addr) external view returns (bool);\\n\\n    function isCXO(address addr) external view returns (bool);\\n\\n    function isCTO(address addr) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOrTokenId\",\"type\":\"uint256\"}],\"name\":\"AdminWithdrawEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"BurnBotanEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"BurnLandEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"FusionPayEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"FusionRevertEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OrderPaymentEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetContractEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"SetContractOwnerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_val\",\"type\":\"uint64\"}],\"name\":\"SetGrowSecondsEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_cVal\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_rVal\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_srVal\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_ssrVal\",\"type\":\"uint8\"}],\"name\":\"SetMaxBreedTimesEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_val\",\"type\":\"uint64\"}],\"name\":\"SetSecondsPerBlockEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"SetSignerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_val\",\"type\":\"uint64\"}],\"name\":\"SetUnboxSecondsEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"SetVersionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetWithdrawAddressEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOrTokenId\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dadId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_momId\",\"type\":\"uint256\"},{\"internalType\":\"enum BotanStruct.BotanRarity\",\"name\":\"_rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_safe\",\"type\":\"bool\"}],\"name\":\"breed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dadId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_momId\",\"type\":\"uint256\"},{\"internalType\":\"enum BotanStruct.BotanRarity\",\"name\":\"_rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_safe\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"breedWithSign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dadId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_momId\",\"type\":\"uint256\"},{\"internalType\":\"enum BotanStruct.BotanRarity\",\"name\":\"_rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_safe\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct GameLogicV2.PayInfo\",\"name\":\"_payInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"breedWithSignV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burnBotan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burnLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_fusionTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_fusionTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct GameLogicV2.PayInfo\",\"name\":\"_payInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"fusionPlantPay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_fusionTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_fusionTo\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_revertTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_revertFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revertTo\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"category\",\"type\":\"uint32\"},{\"internalType\":\"enum BotanStruct.BotanRarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"breedTimes\",\"type\":\"uint8\"},{\"internalType\":\"enum BotanStruct.BotanPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"dadId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"momId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"blocks\",\"type\":\"uint64\"}],\"internalType\":\"struct BotanStruct.Botan\",\"name\":\"_plantData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_tx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_safe\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct GameLogicV2.PayInfo\",\"name\":\"_payInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"fusionPlantWithSignV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tx\",\"type\":\"uint256\"}],\"name\":\"grow\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"category\",\"type\":\"uint32\"},{\"internalType\":\"enum BotanStruct.BotanRarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"breedTimes\",\"type\":\"uint8\"},{\"internalType\":\"enum BotanStruct.BotanPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"dadId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"momId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"blocks\",\"type\":\"uint64\"}],\"internalType\":\"struct BotanStruct.Botan\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"category\",\"type\":\"uint32\"},{\"internalType\":\"enum BotanStruct.BotanRarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"breedTimes\",\"type\":\"uint8\"},{\"internalType\":\"enum BotanStruct.BotanPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"dadId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"momId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"blocks\",\"type\":\"uint64\"}],\"internalType\":\"struct BotanStruct.Botan\",\"name\":\"_newPlantData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_tx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct GameLogicV2.PayInfo\",\"name\":\"_payInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"growByPlantDataWithSignV2\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"category\",\"type\":\"uint32\"},{\"internalType\":\"enum BotanStruct.BotanRarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"breedTimes\",\"type\":\"uint8\"},{\"internalType\":\"enum BotanStruct.BotanPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"dadId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"momId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"blocks\",\"type\":\"uint64\"}],\"internalType\":\"struct BotanStruct.Botan\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum LandStruct.LandRarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"category\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"internalType\":\"struct LandStruct.Land\",\"name\":\"_landData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_tx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_safe\",\"type\":\"bool\"}],\"name\":\"mintLand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum LandStruct.LandRarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"category\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"internalType\":\"struct LandStruct.Land\",\"name\":\"_landData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_tx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_safe\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"mintLandWithSign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum LandStruct.LandRarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"category\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"internalType\":\"struct LandStruct.Land\",\"name\":\"_landData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_tx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_safe\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct GameLogicV2.PayInfo\",\"name\":\"_payInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"mintLandWithSignV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"category\",\"type\":\"uint32\"},{\"internalType\":\"enum BotanStruct.BotanRarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"breedTimes\",\"type\":\"uint8\"},{\"internalType\":\"enum BotanStruct.BotanPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"dadId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"momId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"blocks\",\"type\":\"uint64\"}],\"internalType\":\"struct BotanStruct.Botan\",\"name\":\"_plantData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_tx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_safe\",\"type\":\"bool\"}],\"name\":\"mintSeedOrPlant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"category\",\"type\":\"uint32\"},{\"internalType\":\"enum BotanStruct.BotanRarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"breedTimes\",\"type\":\"uint8\"},{\"internalType\":\"enum BotanStruct.BotanPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"dadId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"momId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"blocks\",\"type\":\"uint64\"}],\"internalType\":\"struct BotanStruct.Botan\",\"name\":\"_plantData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_tx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_safe\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"mintSeedOrPlantWithSign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"category\",\"type\":\"uint32\"},{\"internalType\":\"enum BotanStruct.BotanRarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"breedTimes\",\"type\":\"uint8\"},{\"internalType\":\"enum BotanStruct.BotanPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"dadId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"momId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"blocks\",\"type\":\"uint64\"}],\"internalType\":\"struct BotanStruct.Botan\",\"name\":\"_plantData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_tx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_safe\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct GameLogicV2.PayInfo\",\"name\":\"_payInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"mintSeedOrPlantWithSignV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"payMainTokenV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"payTokenV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBlackListContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBotanNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGeneScienceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_val\",\"type\":\"uint64\"}],\"name\":\"setGrowSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLandNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[5]\",\"name\":\"_val\",\"type\":\"uint8[5]\"}],\"name\":\"setMaxBreedTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRoleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_val\",\"type\":\"uint64\"}],\"name\":\"setSecondsPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"setVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWithdrawAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20TokenV2ByAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"withdrawErc20TokenV2ByUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"withdrawErc721TokenV2ByUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawMainTokenV2ByAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GameLogicV2", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}