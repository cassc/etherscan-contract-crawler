{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-10-07\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-09-23\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: EscrowContract.sol\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n\r\n\r\n\r\ncontract EscrowContract is Ownable {\r\n    enum Status {\r\n        NEUTRAL,\r\n        CONFIRM,\r\n        CANCEL\r\n    }\r\n\r\n    struct Deal {\r\n        address seller;\r\n        address buyer;\r\n        uint256 amount;\r\n        uint8 fee;\r\n        uint256 datetime;\r\n        Status sellerStatus;\r\n        Status buyerStatus;\r\n        Status escrowAgentStatus;\r\n        Status status;\r\n    }\r\n\r\n    /// Not permitted\r\n    error NotPermitted();\r\n\r\n    /// New deal creation paused\r\n    error NewDealCreationPaused();\r\n\r\n    /// Insufficient amount\r\n    error InsufficientAmount(uint256 amount);\r\n\r\n    event DealCreated(bytes32 indexed dealId, Deal deal);\r\n    event DealConfirmed(bytes32 indexed dealId, Deal deal);\r\n    event DealCanceled(bytes32 indexed dealId, Deal deal);\r\n    event DealChanged(bytes32 indexed dealId, Deal deal);\r\n\r\n    mapping(bytes32 => Deal) public deals;\r\n    mapping(bytes32 => bool) isIdTaken;\r\n    bytes32[] dealIds;\r\n    address escrow;\r\n\r\n    bool paused = false;\r\n\r\n    uint8 percentageFee = 0;\r\n    IERC20 public BUSD = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n    uint256 private withdrawableAmount;\r\n\r\n    constructor(address escrow_agent) {\r\n        escrow = escrow_agent;\r\n    }\r\n\r\n    function getDealStatus(\r\n        Status sellerStatus,\r\n        Status buyerStatus,\r\n        Status escrowStatus\r\n    ) private pure returns (Status) {\r\n        Status status = Status.NEUTRAL;\r\n        if (\r\n            (sellerStatus == Status.CONFIRM && buyerStatus == Status.CONFIRM) ||\r\n            (sellerStatus == Status.CONFIRM && escrowStatus == Status.CONFIRM) ||\r\n            (buyerStatus == Status.CONFIRM && escrowStatus == Status.CONFIRM)\r\n        ) status = Status.CONFIRM;\r\n        else if (\r\n            (sellerStatus == Status.CANCEL && buyerStatus == Status.CANCEL) ||\r\n            (sellerStatus == Status.CANCEL && escrowStatus == Status.CANCEL) ||\r\n            (buyerStatus == Status.CANCEL && escrowStatus == Status.CANCEL)\r\n        ) status = Status.CANCEL;\r\n        return status;\r\n    }\r\n\r\n    function getDeal(bytes32 id) public view returns (Deal memory) {\r\n        Deal memory deal = deals[id];\r\n        return deal;\r\n    }\r\n\r\n    function _confirmDeal(bytes32 id) private {\r\n        uint256 fee = deals[id].fee * deals[id].amount / 100;\r\n        require(BUSD.transfer(deals[id].seller, deals[id].amount - fee), \"something went wrong\");\r\n\r\n        withdrawableAmount += fee;\r\n        deals[id].status = Status.CONFIRM;\r\n        emit DealConfirmed(id, deals[id]);\r\n    }\r\n\r\n    function _cancelDeal(bytes32 id) private {\r\n        BUSD.transfer(deals[id].buyer, deals[id].amount);\r\n        deals[id].status = Status.CANCEL;\r\n        emit DealCanceled(id, deals[id]);\r\n    }\r\n\r\n    function _checkDealStatus(bytes32 id) private {\r\n        Status currentStatus = getDealStatus(\r\n            deals[id].sellerStatus,\r\n            deals[id].buyerStatus,\r\n            deals[id].escrowAgentStatus\r\n        );\r\n        if (currentStatus == Status.CONFIRM) _confirmDeal(id);\r\n        else if (currentStatus == Status.CANCEL) _cancelDeal(id);\r\n    }\r\n\r\n    function createDeal(address seller, uint256 amount)\r\n        external\r\n        returns (bytes32)\r\n    {\r\n        if (paused) revert NewDealCreationPaused();\r\n        BUSD.transferFrom(msg.sender, address(this), amount);\r\n        Deal memory new_deal = Deal({\r\n            seller: seller,\r\n            buyer: msg.sender,\r\n            amount: amount,\r\n            fee: percentageFee,\r\n            datetime: block.timestamp + 60 * 60 * 240,\r\n            sellerStatus: Status.NEUTRAL,\r\n            buyerStatus: Status.NEUTRAL,\r\n            escrowAgentStatus: Status.NEUTRAL,\r\n            status: Status.NEUTRAL\r\n        });\r\n        bytes32 newDealId = _generateNewHash(seller, msg.sender, amount);\r\n\r\n        deals[newDealId] = new_deal;\r\n        isIdTaken[newDealId] = true;\r\n        dealIds.push(newDealId);\r\n\r\n        emit DealCreated(newDealId, new_deal);\r\n        return newDealId;\r\n    }\r\n\r\n    function confirmDeal(bytes32 id) external {\r\n        require(deals[id].status == Status.NEUTRAL, \"Deal is closed\");\r\n\r\n        if (msg.sender == deals[id].seller)\r\n            deals[id].sellerStatus = Status.CONFIRM;\r\n        else if (msg.sender == deals[id].buyer)\r\n            deals[id].buyerStatus = Status.CONFIRM;\r\n        else if (msg.sender == escrow && ((deals[id].sellerStatus != Status.NEUTRAL && deals[id].buyerStatus != Status.NEUTRAL) || block.timestamp >= deals[id].datetime))\r\n            deals[id].escrowAgentStatus = Status.CONFIRM;\r\n        else revert NotPermitted();\r\n        \r\n        emit DealChanged(id, deals[id]);\r\n        _checkDealStatus(id);\r\n    }\r\n\r\n    function _generateNewHash(\r\n        address seller,\r\n        address sender,\r\n        uint256 value\r\n    ) private view returns (bytes32) {\r\n        uint32 nonce = 0;\r\n        bytes32 newDealId = keccak256(abi.encode(seller, sender, value, nonce));\r\n        while (isIdTaken[newDealId]) {\r\n            newDealId = keccak256(abi.encode(seller, sender, value, ++nonce));\r\n        }\r\n\r\n        return newDealId;\r\n    }\r\n\r\n    function cancelDeal(bytes32 id) external {\r\n        require(deals[id].status == Status.NEUTRAL, \"Deal is closed\");\r\n        \r\n        if (msg.sender == deals[id].seller)\r\n            deals[id].sellerStatus = Status.CANCEL;\r\n        else if (msg.sender == deals[id].buyer)\r\n            deals[id].buyerStatus = Status.CANCEL;\r\n        else if (msg.sender == escrow && ((deals[id].sellerStatus != Status.NEUTRAL && deals[id].buyerStatus != Status.NEUTRAL) || block.timestamp >= deals[id].datetime))\r\n            deals[id].escrowAgentStatus = Status.CANCEL;\r\n        else revert NotPermitted();\r\n\r\n        emit DealChanged(id, deals[id]);\r\n        _checkDealStatus(id);\r\n    }\r\n\r\n    function isPaused(bool newPausedValue) external onlyOwner {\r\n        require(paused != newPausedValue, \"Setting the same value\");\r\n        for (uint256 i=0; i<dealIds.length; i++) {\r\n            if (deals[dealIds[i]].status == Status.NEUTRAL) {\r\n                revert NotPermitted();\r\n            }\r\n        }\r\n        paused = newPausedValue;\r\n    }\r\n\r\n    function withdraw(uint256 amount) external {\r\n        address sender = _msgSender();\r\n        if (sender != owner() && sender != escrow) revert NotPermitted();\r\n\r\n        if (amount > withdrawableAmount) revert InsufficientAmount(amount);\r\n\r\n        BUSD.transfer(msg.sender, amount);\r\n        withdrawableAmount -= amount;\r\n    }\r\n\r\n    function getDealIds() external view returns (bytes32[] memory) {\r\n        return dealIds;\r\n    }\r\n\r\n    function getWithdrawableAmount() external view onlyOwner returns(uint256) {\r\n        return withdrawableAmount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"escrow_agent\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewDealCreationPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPermitted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"sellerStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"buyerStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"escrowAgentStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct EscrowContract.Deal\",\"name\":\"deal\",\"type\":\"tuple\"}],\"name\":\"DealCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"sellerStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"buyerStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"escrowAgentStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct EscrowContract.Deal\",\"name\":\"deal\",\"type\":\"tuple\"}],\"name\":\"DealChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"sellerStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"buyerStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"escrowAgentStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct EscrowContract.Deal\",\"name\":\"deal\",\"type\":\"tuple\"}],\"name\":\"DealConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dealId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"sellerStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"buyerStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"escrowAgentStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct EscrowContract.Deal\",\"name\":\"deal\",\"type\":\"tuple\"}],\"name\":\"DealCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"cancelDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"confirmDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createDeal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"sellerStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"buyerStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"escrowAgentStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getDeal\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"sellerStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"buyerStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"escrowAgentStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum EscrowContract.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct EscrowContract.Deal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDealIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newPausedValue\",\"type\":\"bool\"}],\"name\":\"isPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EscrowContract", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a60c7809ea05b6dfc3344731d99eabf761223c10", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://25f306aae7af7cda675bd10750fb3845434b7e4dc4ccbd1a12bacba2e0e59d3c"}