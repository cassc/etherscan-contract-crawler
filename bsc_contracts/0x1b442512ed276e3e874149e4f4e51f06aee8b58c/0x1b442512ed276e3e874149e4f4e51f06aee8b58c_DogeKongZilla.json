{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/MetaDoge.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at BscScan.com on 2021-10-06\\n */\\n\\n/**\\n * DogeKongZilla Official contract\\n *\\n * Telegram: https://t.me/DogeKongZilla\\n * Twitter: https://twitter.com/DogeKongZilla\\n */\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\n/// @title Dividend-Paying Token Optional Interface\\n/// @author Roger Wu (https://github.com/roger-wu)\\n/// @dev OPTIONAL functions for a dividend-paying token contract.\\ninterface DividendPayingTokenOptionalInterface {\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function withdrawableDividendOf(address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n    function withdrawnDividendOf(address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice View the amount of dividend in wei that an address has earned in total.\\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\\n    function accumulativeDividendOf(address _owner)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\n/// @title Dividend-Paying Token Interface\\n/// @author Roger Wu (https://github.com/roger-wu)\\n/// @dev An interface for a dividend-paying token contract.\\ninterface DividendPayingTokenInterface {\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function dividendOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Distributes ether to token holders as dividends.\\n    /// @dev SHOULD distribute the paid ether to token holders as dividends.\\n    ///  SHOULD NOT directly transfer ether to token holders in this function.\\n    ///  MUST emit a `DividendsDistributed` event when the amount of distributed ether is greater than 0.\\n    function distributeDividends() external payable;\\n\\n    /// @notice Withdraws the ether distributed to the sender.\\n    /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\\n    ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\\n    function withdrawDividend() external;\\n\\n    /// @dev This event MUST emit when ether is distributed to token holders.\\n    /// @param from The address which sends ether to this contract.\\n    /// @param weiAmount The amount of distributed ether in wei.\\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\\n\\n    /// @dev This event MUST emit when an address withdraws their dividend.\\n    /// @param to The address which withdraws ether from this contract.\\n    /// @param weiAmount The amount of withdrawn ether in wei.\\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\\n}\\n\\n/**\\n * @title SafeMathInt\\n * @dev Math operations for int256 with overflow safety checks.\\n */\\nlibrary SafeMathInt {\\n    int256 private constant MIN_INT256 = int256(1) << 255;\\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\\n\\n    /**\\n     * @dev Multiplies two int256 variables and fails on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n\\n        // Detect overflow when multiplying MIN_INT256 with -1\\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Division of two int256 variables and fails on overflow.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        // Prevent overflow when dividing MIN_INT256 by -1\\n        require(b != -1 || a != MIN_INT256);\\n\\n        // Solidity already throws when dividing by 0.\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two int256 variables and fails on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two int256 variables and fails on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Converts to absolute value, and fails on overflow.\\n     */\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != MIN_INT256);\\n        return a < 0 ? -a : a;\\n    }\\n\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\n        require(a >= 0);\\n        return uint256(a);\\n    }\\n}\\n\\n/**\\n * @title SafeMathUint\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMathUint {\\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\\n        int256 b = int256(a);\\n        require(b >= 0);\\n        return b;\\n    }\\n}\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(\\n            amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\n/// @title Dividend-Paying Token\\n/// @author Roger Wu (https://github.com/roger-wu)\\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute ether\\n///  to token holders as dividends and allows token holders to withdraw their dividends.\\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\\ncontract DividendPayingToken is\\n    ERC20,\\n    DividendPayingTokenInterface,\\n    DividendPayingTokenOptionalInterface,\\n    Ownable\\n{\\n    using SafeMath for uint256;\\n    using SafeMathUint for uint256;\\n    using SafeMathInt for int256;\\n\\n    // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\\n    // For more discussion about choosing the value of `magnitude`,\\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\n    uint256 internal constant magnitude = 2**128;\\n\\n    uint256 internal magnifiedDividendPerShare;\\n\\n    // About dividendCorrection:\\n    // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\n    // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\n    //   `dividendOf(_user)` should not be changed,\\n    //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\n    // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\n    //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\n    //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\n    // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\n    mapping(address => int256) internal magnifiedDividendCorrections;\\n    mapping(address => uint256) internal withdrawnDividends;\\n    mapping(address => uint256) internal rawBNBWithdrawnDividends;\\n    mapping(address => address) public userCurrentRewardToken;\\n    mapping(address => bool) public userHasCustomRewardToken;\\n    mapping(address => address) public userCurrentRewardAMM;\\n    mapping(address => bool) public userHasCustomRewardAMM;\\n    mapping(address => uint256) public rewardTokenSelectionCount; // keep track of how many people have each reward token selected (for fun mostly)\\n    mapping(address => bool) public ammIsWhiteListed; // only allow whitelisted AMMs\\n    mapping(address => bool) public ignoreRewardTokens;\\n\\n    IUniswapV2Router02 public uniswapV2Router =\\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n\\n    function updateDividendUniswapV2Router(address newAddress)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            newAddress != address(uniswapV2Router),\\n            \\\"DogeKongZilla: The router already has that address\\\"\\n        );\\n        uniswapV2Router = IUniswapV2Router02(newAddress);\\n    }\\n\\n    uint256 public totalDividendsDistributed; // dividends distributed per reward token\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) ERC20(_name, _symbol, _decimals) {\\n        // add whitelisted AMMs here -- more will get added postlaunch\\n        ammIsWhiteListed[\\n            address(0x10ED43C718714eb63d5aA57B78B54704E256024E)\\n        ] = true; // PCS V2 router\\n        ammIsWhiteListed[\\n            address(0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F)\\n        ] = true; // PCS V1 router\\n        ammIsWhiteListed[\\n            address(0xcF0feBd3f17CEf5b47b0cD257aCf6025c5BFf3b7)\\n        ] = true; // ApeSwap router\\n    }\\n\\n    /// @dev Distributes dividends whenever ether is paid to this contract.\\n    receive() external payable {\\n        distributeDividends();\\n    }\\n\\n    // Customized function to send tokens to dividend recipients\\n    function swapETHForTokens(address recipient, uint256 ethAmount)\\n        private\\n        returns (uint256)\\n    {\\n        bool swapSuccess;\\n        IERC20 token = IERC20(userCurrentRewardToken[recipient]);\\n        IUniswapV2Router02 swapRouter = uniswapV2Router;\\n\\n        if (\\n            userHasCustomRewardAMM[recipient] &&\\n            ammIsWhiteListed[userCurrentRewardAMM[recipient]]\\n        ) {\\n            swapRouter = IUniswapV2Router02(userCurrentRewardAMM[recipient]);\\n        }\\n\\n        // generate the pancake pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = swapRouter.WETH();\\n        path[1] = address(token);\\n\\n        // make the swap\\n        try\\n            swapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n                value: ethAmount\\n            }( //try to swap for tokens, if it fails (bad contract, or whatever other reason, send BNB)\\n                1, // accept any amount of Tokens above 1 wei (so it will fail if nothing returns)\\n                path,\\n                address(recipient),\\n                block.timestamp + 360\\n            )\\n        {\\n            swapSuccess = true;\\n        } catch {\\n            swapSuccess = false;\\n        }\\n\\n        // if the swap failed, send them their BNB instead\\n        if (!swapSuccess) {\\n            rawBNBWithdrawnDividends[recipient] = rawBNBWithdrawnDividends[\\n                recipient\\n            ].add(ethAmount);\\n            (bool success, ) = recipient.call{value: ethAmount, gas: 3000}(\\\"\\\");\\n\\n            if (!success) {\\n                withdrawnDividends[recipient] = withdrawnDividends[recipient]\\n                    .sub(ethAmount);\\n                rawBNBWithdrawnDividends[recipient] = rawBNBWithdrawnDividends[\\n                    recipient\\n                ].sub(ethAmount);\\n                return 0;\\n            }\\n        }\\n        return ethAmount;\\n    }\\n\\n    function setIgnoreToken(address tokenAddress, bool isIgnored)\\n        external\\n        onlyOwner\\n    {\\n        ignoreRewardTokens[tokenAddress] = isIgnored;\\n    }\\n\\n    function isIgnoredToken(address tokenAddress) public view returns (bool) {\\n        return ignoreRewardTokens[tokenAddress];\\n    }\\n\\n    function getRawBNBDividends(address holder)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return rawBNBWithdrawnDividends[holder];\\n    }\\n\\n    function setWhiteListAMM(address ammAddress, bool whitelisted)\\n        external\\n        onlyOwner\\n    {\\n        ammIsWhiteListed[ammAddress] = whitelisted;\\n    }\\n\\n    // call this to set a custom reward token (call from token contract only)\\n    function setRewardToken(\\n        address holder,\\n        address rewardTokenAddress,\\n        address ammContractAddress\\n    ) external onlyOwner {\\n        if (userHasCustomRewardToken[holder] == true) {\\n            if (rewardTokenSelectionCount[userCurrentRewardToken[holder]] > 0) {\\n                rewardTokenSelectionCount[userCurrentRewardToken[holder]] -= 1; // remove count from old token\\n            }\\n        }\\n\\n        userHasCustomRewardToken[holder] = true;\\n        userCurrentRewardToken[holder] = rewardTokenAddress;\\n        // only set custom AMM if the AMM is whitelisted.\\n        if (\\n            ammContractAddress != address(uniswapV2Router) &&\\n            ammIsWhiteListed[ammContractAddress]\\n        ) {\\n            userHasCustomRewardAMM[holder] = true;\\n            userCurrentRewardAMM[holder] = ammContractAddress;\\n        } else {\\n            userHasCustomRewardAMM[holder] = false;\\n            userCurrentRewardAMM[holder] = address(uniswapV2Router);\\n        }\\n        rewardTokenSelectionCount[rewardTokenAddress] += 1; // add count to new token\\n    }\\n\\n    // call this to go back to receiving BNB after setting another token. (call from token contract only)\\n    function unsetRewardToken(address holder) external onlyOwner {\\n        userHasCustomRewardToken[holder] = false;\\n        if (rewardTokenSelectionCount[userCurrentRewardToken[holder]] > 0) {\\n            rewardTokenSelectionCount[userCurrentRewardToken[holder]] -= 1; // remove count from old token\\n        }\\n        userCurrentRewardToken[holder] = address(0);\\n        userCurrentRewardAMM[holder] = address(uniswapV2Router);\\n        userHasCustomRewardAMM[holder] = false;\\n    }\\n\\n    /// @notice Distributes ether to token holders as dividends.\\n    /// @dev It reverts if the total supply of tokens is 0.\\n    /// It emits the `DividendsDistributed` event if the amount of received ether is greater than 0.\\n    /// About undistributed ether:\\n    ///   In each distribution, there is a small amount of ether not distributed,\\n    ///     the magnified amount of which is\\n    ///     `(msg.value * magnitude) % totalSupply()`.\\n    ///   With a well-chosen `magnitude`, the amount of undistributed ether\\n    ///     (de-magnified) in a distribution can be less than 1 wei.\\n    ///   We can actually keep track of the undistributed ether in a distribution\\n    ///     and try to distribute it in the next distribution,\\n    ///     but keeping track of such data on-chain costs much more than\\n    ///     the saved ether, so we don't do that.\\n\\n    function distributeDividends() public payable override {\\n        require(totalSupply() > 0);\\n\\n        if (msg.value > 0) {\\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\\n                (msg.value).mul(magnitude) / totalSupply()\\n            );\\n            emit DividendsDistributed(msg.sender, msg.value);\\n\\n            totalDividendsDistributed = totalDividendsDistributed.add(\\n                msg.value\\n            );\\n        }\\n    }\\n\\n    /// @notice Withdraws the ether distributed to the sender.\\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\n    function withdrawDividend() public virtual override {\\n        _withdrawDividendOfUser(payable(msg.sender));\\n    }\\n\\n    /// @notice Withdraws the ether distributed to the sender.\\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\n    function _withdrawDividendOfUser(address payable user)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\\n        if (_withdrawableDividend > 0) {\\n            // if no custom reward token or reward token is ignored, send BNB.\\n            if (\\n                !userHasCustomRewardToken[user] &&\\n                !isIgnoredToken(userCurrentRewardToken[user])\\n            ) {\\n                withdrawnDividends[user] = withdrawnDividends[user].add(\\n                    _withdrawableDividend\\n                );\\n                rawBNBWithdrawnDividends[user] = rawBNBWithdrawnDividends[user]\\n                    .add(_withdrawableDividend);\\n                emit DividendWithdrawn(user, _withdrawableDividend);\\n                (bool success, ) = user.call{\\n                    value: _withdrawableDividend,\\n                    gas: 3000\\n                }(\\\"\\\");\\n\\n                if (!success) {\\n                    withdrawnDividends[user] = withdrawnDividends[user].sub(\\n                        _withdrawableDividend\\n                    );\\n                    rawBNBWithdrawnDividends[user] = rawBNBWithdrawnDividends[\\n                        user\\n                    ].sub(_withdrawableDividend);\\n                    return 0;\\n                }\\n                return _withdrawableDividend;\\n\\n                // the reward is a token, not BNB, use an IERC20 buyback instead!\\n            } else {\\n                withdrawnDividends[user] = withdrawnDividends[user].add(\\n                    _withdrawableDividend\\n                );\\n                emit DividendWithdrawn(user, _withdrawableDividend);\\n                return swapETHForTokens(user, _withdrawableDividend);\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function dividendOf(address _owner) public view override returns (uint256) {\\n        return withdrawableDividendOf(_owner);\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function withdrawableDividendOf(address _owner)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n    function withdrawnDividendOf(address _owner)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return withdrawnDividends[_owner];\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address has earned in total.\\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\n    /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\\n    function accumulativeDividendOf(address _owner)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            magnifiedDividendPerShare\\n                .mul(balanceOf(_owner))\\n                .toInt256Safe()\\n                .add(magnifiedDividendCorrections[_owner])\\n                .toUint256Safe() / magnitude;\\n    }\\n\\n    /// @dev Internal function that transfer tokens from one address to another.\\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n    /// @param from The address to transfer from.\\n    /// @param to The address to transfer to.\\n    /// @param value The amount to be transferred.\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal virtual override {\\n        require(false);\\n\\n        int256 _magCorrection = magnifiedDividendPerShare\\n            .mul(value)\\n            .toInt256Safe();\\n        magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from]\\n            .add(_magCorrection);\\n        magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(\\n            _magCorrection\\n        );\\n    }\\n\\n    /// @dev Internal function that mints tokens to an account.\\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n    /// @param account The account that will receive the created tokens.\\n    /// @param value The amount that will be created.\\n    function _mint(address account, uint256 value) internal override {\\n        super._mint(account, value);\\n\\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\\n            account\\n        ].sub((magnifiedDividendPerShare.mul(value)).toInt256Safe());\\n    }\\n\\n    /// @dev Internal function that burns an amount of the token of a given account.\\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n    /// @param account The account whose tokens will be burnt.\\n    /// @param value The amount that will be burnt.\\n    function _burn(address account, uint256 value) internal override {\\n        super._burn(account, value);\\n\\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\\n            account\\n        ].add((magnifiedDividendPerShare.mul(value)).toInt256Safe());\\n    }\\n\\n    function _setBalance(address account, uint256 newBalance) internal {\\n        uint256 currentBalance = balanceOf(account);\\n\\n        if (newBalance > currentBalance) {\\n            uint256 mintAmount = newBalance.sub(currentBalance);\\n            _mint(account, mintAmount);\\n        } else if (newBalance < currentBalance) {\\n            uint256 burnAmount = currentBalance.sub(newBalance);\\n            _burn(account, burnAmount);\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ncontract DogeKongZilla is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    IUniswapV2Router02 public uniswapV2Router;\\n    address public immutable uniswapV2Pair;\\n\\n    bool private swapping;\\n\\n    DogeKongZillaDividendTracker public dividendTracker;\\n\\n    mapping(address => uint256) public holderBNBUsedForBuyBacks;\\n    mapping(address => bool) public _isAllowedDuringDisabled;\\n    mapping(address => bool) public _isIgnoredAddress;\\n\\n    address public liquidityWallet;\\n    address public operationsWallet;\\n    address private buyBackWallet;\\n\\n    uint256 public maxSellTransactionAmount = 1 * 10**12 * (10**9);\\n    uint256 public swapTokensAtAmount = 100 * 10**9 * (10**9);\\n\\n    // Anti-bot and anti-whale mappings and variables for launch\\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\\n    bool public transferDelayEnabled = true;\\n\\n    // to track last sell to reduce sell penalty over time by 10% per week the holder sells *no* tokens.\\n    mapping(address => uint256) public _holderLastSellDate;\\n\\n    // fees\\n    uint256 public BNBRewardsFee = 8;\\n    uint256 public liquidityFee = 4; // This fee must be a TOTAL of LP, Operations Fee AND Buyback fee (Note, Buyback has been disabled)\\n    uint256 public totalFees = BNBRewardsFee.add(liquidityFee);\\n    // this is a subset of the liquidity fee, not in addition to. operations fee + buyback fee cannot be higher than liquidity fee.  Will be reasonably reduced post launch.\\n    uint256 public operationsFee = 2;\\n    uint256 public buyBackFee = 0;\\n    uint256 public _maxSellPercent = 99; // Set the maximum percent allowed on sale per a single transaction\\n\\n    // Disable trading initially\\n    bool isTradingEnabled = false;\\n\\n    // Swap and liquify active status\\n    bool isSwapAndLiquifyEnabled = false;\\n\\n    // sells have fees of 4.8 and 12 (16.8 total) (4 * 1.2 and 10 * 1.2)\\n    uint256 public immutable sellFeeIncreaseFactor = 200;\\n\\n    uint256 public immutable rewardFeeSellFactor = 120;\\n\\n    // use by default 300,000 gas to process auto-claiming dividends\\n    uint256 public gasForProcessing = 300000;\\n\\n    // exlcude from fees and max transaction amount\\n    mapping(address => bool) private _isExcludedFromFees;\\n\\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\\n    // could be subject to a maximum transfer amount\\n    mapping(address => bool) public automatedMarketMakerPairs;\\n\\n    event UpdateDividendTracker(\\n        address indexed newAddress,\\n        address indexed oldAddress\\n    );\\n\\n    event UpdateUniswapV2Router(\\n        address indexed newAddress,\\n        address indexed oldAddress\\n    );\\n\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\\n\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\n    event BuyBackWithNoFees(address indexed holder, uint256 indexed bnbSpent);\\n\\n    event LiquidityWalletUpdated(\\n        address indexed newLiquidityWallet,\\n        address indexed oldLiquidityWallet\\n    );\\n    event OperationsWalletUpdated(\\n        address indexed newLiquidityWallet,\\n        address indexed oldLiquidityWallet\\n    );\\n    event BuyBackWalletUpdated(\\n        address indexed newLiquidityWallet,\\n        address indexed oldLiquidityWallet\\n    );\\n\\n    event FeesUpdated(\\n        uint256 indexed newBNBRewardsFee,\\n        uint256 indexed newLiquidityFee,\\n        uint256 newOperationsFee,\\n        uint256 newBuyBackFee\\n    );\\n\\n    event GasForProcessingUpdated(\\n        uint256 indexed newValue,\\n        uint256 indexed oldValue\\n    );\\n\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n\\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\\n\\n    event ProcessedDividendTracker(\\n        uint256 iterations,\\n        uint256 claims,\\n        uint256 lastProcessedIndex,\\n        bool indexed automatic,\\n        uint256 gas,\\n        address indexed processor\\n    );\\n\\n    constructor() ERC20(\\\"DogeKongZilla\\\", \\\"DogeKongZilla\\\", 9) {\\n        dividendTracker = new DogeKongZillaDividendTracker();\\n\\n        liquidityWallet = owner();\\n        operationsWallet = owner();\\n        buyBackWallet = owner();\\n\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\\n        ); // Mainnet\\n        //         IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1); // Testnet\\n\\n        // Create a uniswap pair for this new token\\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n\\n        uniswapV2Router = _uniswapV2Router;\\n        uniswapV2Pair = _uniswapV2Pair;\\n\\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\\n\\n        // exclude from receiving dividends\\n        dividendTracker.excludeFromDividends(address(dividendTracker));\\n        dividendTracker.excludeFromDividends(address(this));\\n        dividendTracker.excludeFromDividends(liquidityWallet);\\n        dividendTracker.excludeFromDividends(\\n            address(0x000000000000000000000000000000000000dEaD)\\n        ); // don't want dead address to take BNB!!!\\n        dividendTracker.excludeFromDividends(address(_uniswapV2Router));\\n\\n        // exclude from paying fees or having max transaction amount\\n        excludeFromFees(liquidityWallet, true);\\n        excludeFromFees(address(this), true);\\n        excludeFromFees(address(dividendTracker), true);\\n        excludeFromFees(address(operationsWallet), true);\\n        excludeFromFees(address(buyBackWallet), true);\\n\\n        _isAllowedDuringDisabled[address(this)] = true;\\n        _isAllowedDuringDisabled[owner()] = true;\\n        _isAllowedDuringDisabled[liquidityWallet] = true;\\n\\n        /*\\n            _mint is an internal function in ERC20.sol that is only called here,\\n            and CANNOT be called ever again\\n        */\\n        _mint(owner(), 1 * 10**15 * (10**9));\\n    }\\n\\n    receive() external payable {}\\n\\n    // @dev Owner functions start -------------------------------------\\n\\n    // enable / disable custom AMMs\\n    function setWhiteListAMM(address ammAddress, bool isWhiteListed)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            isContract(ammAddress),\\n            \\\"DogeKongZilla: setWhiteListAMM:: AMM is a wallet, not a contract\\\"\\n        );\\n        dividendTracker.setWhiteListAMM(ammAddress, isWhiteListed);\\n    }\\n\\n    // change the minimum amount of tokens to sell from fees\\n    function updateSwapTokensAtAmount(uint256 newAmount)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(\\n            newAmount < totalSupply(),\\n            \\\"Swap amount cannot be higher than total supply.\\\"\\n        );\\n        swapTokensAtAmount = newAmount;\\n        return true;\\n    }\\n\\n    // remove transfer delay after launch\\n    function disableTransferDelay() external onlyOwner {\\n        transferDelayEnabled = false;\\n    }\\n\\n    // migration feature (DO NOT CHANGE WITHOUT CONSULTATION)\\n    function updateDividendTracker(address newAddress) public onlyOwner {\\n        require(\\n            newAddress != address(dividendTracker),\\n            \\\"DogeKongZilla: The dividend tracker already has that address\\\"\\n        );\\n\\n        DogeKongZillaDividendTracker newDividendTracker = DogeKongZillaDividendTracker(\\n                payable(newAddress)\\n            );\\n\\n        require(\\n            newDividendTracker.owner() == address(this),\\n            \\\"DogeKongZilla: The new dividend tracker must be owned by the DogeKongZilla token contract\\\"\\n        );\\n\\n        newDividendTracker.excludeFromDividends(address(newDividendTracker));\\n        newDividendTracker.excludeFromDividends(address(this));\\n        newDividendTracker.excludeFromDividends(owner());\\n        newDividendTracker.excludeFromDividends(address(uniswapV2Router));\\n\\n        emit UpdateDividendTracker(newAddress, address(dividendTracker));\\n\\n        dividendTracker = newDividendTracker;\\n    }\\n\\n    // updates the maximum amount of tokens that can be bought or sold by holders\\n    function updateMaxTxn(uint256 maxTxnAmount) external onlyOwner {\\n        maxSellTransactionAmount = maxTxnAmount;\\n    }\\n\\n    // updates the minimum amount of tokens people must hold in order to get dividends\\n    function updateDividendTokensMinimum(uint256 minimumToEarnDivs)\\n        external\\n        onlyOwner\\n    {\\n        dividendTracker.updateDividendMinimum(minimumToEarnDivs);\\n    }\\n\\n    // updates the default router for selling tokens\\n    function updateUniswapV2Router(address newAddress) external onlyOwner {\\n        require(\\n            newAddress != address(uniswapV2Router),\\n            \\\"DogeKongZilla: The router already has that address\\\"\\n        );\\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\\n        uniswapV2Router = IUniswapV2Router02(newAddress);\\n    }\\n\\n    // updates the default router for buying tokens from dividend tracker\\n    function updateDividendUniswapV2Router(address newAddress)\\n        external\\n        onlyOwner\\n    {\\n        dividendTracker.updateDividendUniswapV2Router(newAddress);\\n    }\\n\\n    // updates the current trading status of the contract\\n    function updateTradingStatus(bool tradingStatus) external onlyOwner {\\n        isTradingEnabled = tradingStatus;\\n    }\\n\\n    // excludes wallets from max txn and fees.\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\n        _isExcludedFromFees[account] = excluded;\\n        emit ExcludeFromFees(account, excluded);\\n    }\\n\\n    // allows multiple exclusions at once\\n    function excludeMultipleAccountsFromFees(\\n        address[] calldata accounts,\\n        bool excluded\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _isExcludedFromFees[accounts[i]] = excluded;\\n        }\\n\\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\\n    }\\n\\n    function addToWhitelist(address wallet, bool status) external onlyOwner {\\n        _isAllowedDuringDisabled[wallet] = status;\\n    }\\n\\n    function setIsBot(address wallet, bool status) external onlyOwner {\\n        _isIgnoredAddress[wallet] = status;\\n    }\\n\\n    // excludes wallets and contracts from dividends (such as CEX hotwallets, etc.)\\n    function excludeFromDividends(address account) external onlyOwner {\\n        dividendTracker.excludeFromDividends(account);\\n    }\\n\\n    // removes exclusion on wallets and contracts from dividends (such as CEX hotwallets, etc.)\\n    function includeInDividends(address account) external onlyOwner {\\n        dividendTracker.includeInDividends(account);\\n    }\\n\\n    // allow adding additional AMM pairs to the list\\n    function setAutomatedMarketMakerPair(address pair, bool value)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            pair != uniswapV2Pair,\\n            \\\"DogeKongZilla: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\\\"\\n        );\\n\\n        _setAutomatedMarketMakerPair(pair, value);\\n    }\\n\\n    // sets the wallet that receives LP tokens to lock\\n    function updateLiquidityWallet(address newLiquidityWallet)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            newLiquidityWallet != liquidityWallet,\\n            \\\"DogeKongZilla: The liquidity wallet is already this address\\\"\\n        );\\n        excludeFromFees(newLiquidityWallet, true);\\n        emit LiquidityWalletUpdated(newLiquidityWallet, liquidityWallet);\\n        liquidityWallet = newLiquidityWallet;\\n    }\\n\\n    // updates the operations wallet (marketing, charity, etc.)\\n    function updateOperationsWallet(address newOperationsWallet)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            newOperationsWallet != operationsWallet,\\n            \\\"DogeKongZilla: The operations wallet is already this address\\\"\\n        );\\n        excludeFromFees(newOperationsWallet, true);\\n        emit OperationsWalletUpdated(newOperationsWallet, operationsWallet);\\n        operationsWallet = newOperationsWallet;\\n    }\\n\\n    // updates the wallet used for manual buybacks.\\n    function updateBuyBackWallet(address newBuyBackWallet) external onlyOwner {\\n        require(\\n            newBuyBackWallet != buyBackWallet,\\n            \\\"DogeKongZilla: The buyback wallet is already this address\\\"\\n        );\\n        excludeFromFees(newBuyBackWallet, true);\\n        emit BuyBackWalletUpdated(newBuyBackWallet, buyBackWallet);\\n        buyBackWallet = newBuyBackWallet;\\n    }\\n\\n    // rebalance fees as needed\\n    function updateFees(\\n        uint256 bnbRewardPerc,\\n        uint256 liquidityPerc,\\n        uint256 operationsPerc,\\n        uint256 buyBackPerc\\n    ) external onlyOwner {\\n        require(\\n            operationsPerc.add(buyBackPerc) <= liquidityPerc,\\n            \\\"DogeKongZilla: updateFees:: Liquidity Perc must be equal to or higher than operations and buyback combined.\\\"\\n        );\\n        emit FeesUpdated(\\n            bnbRewardPerc,\\n            liquidityPerc,\\n            operationsPerc,\\n            buyBackPerc\\n        );\\n        BNBRewardsFee = bnbRewardPerc;\\n        liquidityFee = liquidityPerc;\\n        operationsFee = operationsPerc;\\n        buyBackFee = buyBackPerc;\\n\\n        totalFees = BNBRewardsFee.add(liquidityFee);\\n    }\\n\\n    // changes the gas reserve for processing dividend distribution\\n    function updateGasForProcessing(uint256 newValue) external onlyOwner {\\n        require(\\n            newValue >= 200000 && newValue <= 500000,\\n            \\\"DogeKongZilla: gasForProcessing must be between 200,000 and 500,000\\\"\\n        );\\n        require(\\n            newValue != gasForProcessing,\\n            \\\"DogeKongZilla: Cannot update gasForProcessing to same value\\\"\\n        );\\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\\n        gasForProcessing = newValue;\\n    }\\n\\n    // changes the amount of time to wait for claims (1-24 hours, expressed in seconds)\\n    function updateClaimWait(uint256 claimWait)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        dividendTracker.updateClaimWait(claimWait);\\n        return true;\\n    }\\n\\n    function setIgnoreToken(address tokenAddress, bool isIgnored)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        dividendTracker.setIgnoreToken(tokenAddress, isIgnored);\\n        return true;\\n    }\\n\\n    // @dev Views start here ------------------------------------\\n\\n    // determines if an AMM can be used for rewards\\n    function isAMMWhitelisted(address ammAddress) public view returns (bool) {\\n        return dividendTracker.ammIsWhiteListed(ammAddress);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    function getUserCurrentRewardToken(address holder)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return dividendTracker.userCurrentRewardToken(holder);\\n    }\\n\\n    function getUserHasCustomRewardToken(address holder)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return dividendTracker.userHasCustomRewardToken(holder);\\n    }\\n\\n    function getRewardTokenSelectionCount(address token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return dividendTracker.rewardTokenSelectionCount(token);\\n    }\\n\\n    function getLastProcessedIndex() external view returns (uint256) {\\n        return dividendTracker.getLastProcessedIndex();\\n    }\\n\\n    function getNumberOfDividendTokenHolders() external view returns (uint256) {\\n        return dividendTracker.getNumberOfTokenHolders();\\n    }\\n\\n    // returns a number between 50 and 120 that determines the penalty a user pays on sells.\\n\\n    function getHolderSellFactor(address holder) public view returns (uint256) {\\n        // get time since last sell measured in 2 week increments\\n        uint256 timeSinceLastSale = (\\n            block.timestamp.sub(_holderLastSellDate[holder])\\n        ).div(2 weeks);\\n\\n        // protection in case someone tries to use a contract to facilitate buys/sells\\n        if (_holderLastSellDate[holder] == 0) {\\n            return sellFeeIncreaseFactor;\\n        }\\n\\n        // cap the sell factor cooldown to 14 weeks and 50% of sell tax\\n        if (timeSinceLastSale >= 7) {\\n            return 50; // 50% sell factor is minimum\\n        }\\n\\n        // return the fee factor minus the number of weeks since sale * 10.  SellFeeIncreaseFactor is immutable at 120 so the most this can subtract is 6*10 = 120 - 60 = 60%\\n        return sellFeeIncreaseFactor - (timeSinceLastSale.mul(10));\\n    }\\n\\n    function getDividendTokensMinimum() external view returns (uint256) {\\n        return dividendTracker.minimumTokenBalanceForDividends();\\n    }\\n\\n    function getClaimWait() external view returns (uint256) {\\n        return dividendTracker.claimWait();\\n    }\\n\\n    function getTotalDividendsDistributed() external view returns (uint256) {\\n        return dividendTracker.totalDividendsDistributed();\\n    }\\n\\n    function isExcludedFromFees(address account) public view returns (bool) {\\n        return _isExcludedFromFees[account];\\n    }\\n\\n    function withdrawableDividendOf(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return dividendTracker.withdrawableDividendOf(account);\\n    }\\n\\n    function dividendTokenBalanceOf(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return dividendTracker.balanceOf(account);\\n    }\\n\\n    function getAccountDividendsInfo(address account)\\n        external\\n        view\\n        returns (\\n            address,\\n            int256,\\n            int256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return dividendTracker.getAccount(account);\\n    }\\n\\n    function getAccountDividendsInfoAtIndex(uint256 index)\\n        external\\n        view\\n        returns (\\n            address,\\n            int256,\\n            int256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return dividendTracker.getAccountAtIndex(index);\\n    }\\n\\n    function getRawBNBDividends(address holder) public view returns (uint256) {\\n        return dividendTracker.getRawBNBDividends(holder);\\n    }\\n\\n    function getBNBAvailableForHolderBuyBack(address holder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            getRawBNBDividends(holder).sub(\\n                holderBNBUsedForBuyBacks[msg.sender]\\n            );\\n    }\\n\\n    function isIgnoredToken(address tokenAddress) public view returns (bool) {\\n        return dividendTracker.isIgnoredToken(tokenAddress);\\n    }\\n\\n    // @dev User Callable Functions start here! ---------------------------------------------\\n\\n    // set the reward token for the user.  Call from here.\\n    function setRewardToken(address rewardTokenAddress) public returns (bool) {\\n        require(\\n            isContract(rewardTokenAddress),\\n            \\\"DogeKongZilla: setRewardToken:: Address is a wallet, not a contract.\\\"\\n        );\\n        require(\\n            rewardTokenAddress != address(this),\\n            \\\"DogeKongZilla: setRewardToken:: Cannot set reward token as this token due to Router limitations.\\\"\\n        );\\n        require(\\n            !isIgnoredToken(rewardTokenAddress),\\n            \\\"DogeKongZilla: setRewardToken:: Reward Token is ignored from being used as rewards.\\\"\\n        );\\n        dividendTracker.setRewardToken(\\n            msg.sender,\\n            rewardTokenAddress,\\n            address(uniswapV2Router)\\n        );\\n        return true;\\n    }\\n\\n    // set the reward token for the user with a custom AMM (AMM must be whitelisted).  Call from here.\\n    function setRewardTokenWithCustomAMM(\\n        address rewardTokenAddress,\\n        address ammContractAddress\\n    ) public returns (bool) {\\n        require(\\n            isContract(rewardTokenAddress),\\n            \\\"DogeKongZilla: setRewardToken:: Address is a wallet, not a contract.\\\"\\n        );\\n        require(\\n            ammContractAddress != address(uniswapV2Router),\\n            \\\"DogeKongZilla: setRewardToken:: Use setRewardToken to use default Router\\\"\\n        );\\n        require(\\n            rewardTokenAddress != address(this),\\n            \\\"DogeKongZilla: setRewardToken:: Cannot set reward token as this token due to Router limitations.\\\"\\n        );\\n        require(\\n            !isIgnoredToken(rewardTokenAddress),\\n            \\\"DogeKongZilla: setRewardToken:: Reward Token is ignored from being used as rewards.\\\"\\n        );\\n        require(\\n            isAMMWhitelisted(ammContractAddress) == true,\\n            \\\"DogeKongZilla: setRewardToken:: AMM is not whitelisted!\\\"\\n        );\\n        dividendTracker.setRewardToken(\\n            msg.sender,\\n            rewardTokenAddress,\\n            ammContractAddress\\n        );\\n        return true;\\n    }\\n\\n    // Unset the reward token back to BNB.  Call from here.\\n    function unsetRewardToken() public returns (bool) {\\n        dividendTracker.unsetRewardToken(msg.sender);\\n        return true;\\n    }\\n\\n    // Activate trading on the contract and enable swapAndLiquify for tax redemption against LP\\n    function activateContract() public onlyOwner {\\n        isTradingEnabled = true;\\n        isSwapAndLiquifyEnabled = true;\\n    }\\n\\n    // Holders can buyback with no fees up to their claimed raw BNB amount.\\n    function buyBackTokensWithNoFees() external payable returns (bool) {\\n        uint256 userRawBNBDividends = getRawBNBDividends(msg.sender);\\n        require(\\n            userRawBNBDividends >=\\n                holderBNBUsedForBuyBacks[msg.sender].add(msg.value),\\n            \\\"DogeKongZilla: buyBackTokensWithNoFees:: Cannot Spend more than earned.\\\"\\n        );\\n\\n        uint256 ethAmount = msg.value;\\n\\n        // generate the pancake pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = uniswapV2Router.WETH();\\n        path[1] = address(this);\\n\\n        // update amount to prevent user from buying with more BNB than they've received as raw rewards (lso update before transfer to prevent reentrancy)\\n        holderBNBUsedForBuyBacks[msg.sender] = holderBNBUsedForBuyBacks[\\n            msg.sender\\n        ].add(msg.value);\\n\\n        bool prevExclusion = _isExcludedFromFees[msg.sender]; // ensure we don't remove exclusions if the current wallet is already excluded\\n        // make the swap to the contract first to bypass fees\\n        _isExcludedFromFees[msg.sender] = true;\\n\\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n            value: ethAmount\\n        }( //try to swap for tokens, if it fails (bad contract, or whatever other reason, send BNB)\\n            0, // accept any amount of Tokens\\n            path,\\n            address(msg.sender),\\n            block.timestamp + 360\\n        );\\n\\n        _isExcludedFromFees[msg.sender] = prevExclusion; // set value to match original value\\n        emit BuyBackWithNoFees(msg.sender, ethAmount);\\n        return true;\\n    }\\n\\n    // allows a user to manually claim their tokens.\\n    function claim() external {\\n        dividendTracker.processAccount(payable(msg.sender), false);\\n    }\\n\\n    // allow a user to manuall process dividends.\\n    function processDividendTracker(uint256 gas) external {\\n        (\\n            uint256 iterations,\\n            uint256 claims,\\n            uint256 lastProcessedIndex\\n        ) = dividendTracker.process(gas);\\n        emit ProcessedDividendTracker(\\n            iterations,\\n            claims,\\n            lastProcessedIndex,\\n            false,\\n            gas,\\n            tx.origin\\n        );\\n    }\\n\\n    // @dev Token functions\\n\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\n        require(\\n            automatedMarketMakerPairs[pair] != value,\\n            \\\"DogeKongZilla: Automated market maker pair is already set to that value\\\"\\n        );\\n        automatedMarketMakerPairs[pair] = value;\\n\\n        if (value) {\\n            dividendTracker.excludeFromDividends(pair);\\n        }\\n        emit SetAutomatedMarketMakerPair(pair, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(\\n            !_isIgnoredAddress[to] || !_isIgnoredAddress[from],\\n            \\\"DogeKongZilla: To/from address is ignored\\\"\\n        );\\n\\n        if (!isTradingEnabled) {\\n            require(\\n                _isAllowedDuringDisabled[to] || _isAllowedDuringDisabled[from],\\n                \\\"Trading is currently disabled\\\"\\n            );\\n        }\\n\\n        if (\\n            automatedMarketMakerPairs[to] &&\\n            !isTradingEnabled &&\\n            _isAllowedDuringDisabled[from]\\n        ) {\\n            require(\\n                (from == owner() || to == owner()) ||\\n                    _isAllowedDuringDisabled[from],\\n                \\\"Only dev can trade against PCS during migration\\\"\\n            );\\n        }\\n\\n        // early exit with no other logic if transfering 0 (to prevent 0 transfers from triggering other logic)\\n        if (amount == 0) {\\n            super._transfer(from, to, 0);\\n            return;\\n        }\\n\\n        // Prevent buying more than 1 txn per block at launch. Bot killer. Will be removed shortly after launch.\\n\\n        if (transferDelayEnabled) {\\n            if (\\n                to != owner() &&\\n                to != address(uniswapV2Router) &&\\n                to != address(uniswapV2Pair) &&\\n                !_isExcludedFromFees[to] &&\\n                !_isExcludedFromFees[from]\\n            ) {\\n                require(\\n                    _holderLastTransferTimestamp[to] < block.timestamp,\\n                    \\\"_transfer:: Transfer Delay enabled.  Please try again later.\\\"\\n                );\\n                _holderLastTransferTimestamp[to] = block.timestamp;\\n            }\\n        }\\n\\n        // set last sell date to first purchase date for new wallet\\n\\n        if (!isContract(to) && !_isExcludedFromFees[to]) {\\n            if (_holderLastSellDate[to] == 0) {\\n                _holderLastSellDate[to] == block.timestamp;\\n            }\\n        }\\n\\n        // update sell date on buys to prevent gaming the decaying sell tax feature.\\n        // Every buy moves the sell date up 1/3rd of the difference between last sale date and current timestamp\\n\\n        if (\\n            !isContract(to) &&\\n            automatedMarketMakerPairs[from] &&\\n            !_isExcludedFromFees[to]\\n        ) {\\n            if (_holderLastSellDate[to] >= block.timestamp) {\\n                _holderLastSellDate[to] = _holderLastSellDate[to].add(\\n                    block.timestamp.sub(_holderLastSellDate[to]).div(3)\\n                );\\n            }\\n        }\\n\\n        if (automatedMarketMakerPairs[to]) {\\n            require(\\n                amount <= maxSellTransactionAmount,\\n                \\\"BEP20: Exceeds max sell amount\\\"\\n            );\\n\\n            amount = amount.mul(_maxSellPercent).div(100); // Maximum sell of 99% per one single transaction, to ensure some loose change is left in the holders wallet .\\n        }\\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n\\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\\n\\n        if (\\n            canSwap &&\\n            !swapping &&\\n            isSwapAndLiquifyEnabled &&\\n            !automatedMarketMakerPairs[from] &&\\n            from != liquidityWallet &&\\n            to != liquidityWallet &&\\n            from != operationsWallet &&\\n            to != operationsWallet &&\\n            from != buyBackWallet &&\\n            to != buyBackWallet &&\\n            !_isExcludedFromFees[to] &&\\n            !_isExcludedFromFees[from] &&\\n            from != address(this) &&\\n            from != address(dividendTracker)\\n        ) {\\n            swapping = true;\\n\\n            uint256 swapTokens = contractTokenBalance.mul(liquidityFee).div(\\n                totalFees\\n            );\\n            swapAndLiquify(swapTokens);\\n\\n            uint256 sellTokens = balanceOf(address(this));\\n            swapAndSendDividends(sellTokens);\\n\\n            swapping = false;\\n        }\\n\\n        bool takeFee = !swapping;\\n\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\n        if (\\n            _isExcludedFromFees[from] ||\\n            _isExcludedFromFees[to] ||\\n            from == address(this)\\n        ) {\\n            takeFee = false;\\n        }\\n\\n        if (takeFee) {\\n            uint256 fees = amount.mul(totalFees).div(100);\\n\\n            // if sell, multiply by holderSellFactor (decaying sell penalty by 10% every 2 weeks without selling)\\n            if (automatedMarketMakerPairs[to]) {\\n                uint256 rewardSellFee = amount\\n                    .mul(BNBRewardsFee)\\n                    .div(100)\\n                    .mul(rewardFeeSellFactor)\\n                    .div(100);\\n                uint256 otherSellFee = amount\\n                    .mul(liquidityFee)\\n                    .div(100)\\n                    .mul(getHolderSellFactor(from))\\n                    .div(100);\\n\\n                fees = rewardSellFee.add(otherSellFee);\\n                _holderLastSellDate[from] = block.timestamp; // update last sale date on sell!\\n            }\\n\\n            amount = amount.sub(fees);\\n\\n            super._transfer(from, address(this), fees);\\n        }\\n\\n        super._transfer(from, to, amount);\\n\\n        try\\n            dividendTracker.setBalance(payable(from), balanceOf(from))\\n        {} catch {}\\n        try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\\n\\n        if (!swapping) {\\n            uint256 gas = gasForProcessing;\\n\\n            try dividendTracker.process(gas) returns (\\n                uint256 iterations,\\n                uint256 claims,\\n                uint256 lastProcessedIndex\\n            ) {\\n                emit ProcessedDividendTracker(\\n                    iterations,\\n                    claims,\\n                    lastProcessedIndex,\\n                    true,\\n                    gas,\\n                    tx.origin\\n                );\\n            } catch {}\\n        }\\n    }\\n\\n    function swapAndLiquify(uint256 tokens) private {\\n        if (liquidityFee > 0) {\\n            // dividing by 0 is not fun.\\n\\n            // split the contract balance into proper pieces\\n            // figure out how many tokens should be sold for liquidity vs operations / buybacks.\\n\\n            uint256 tokensForLiquidity;\\n            if (liquidityFee > 0) {\\n                tokensForLiquidity = tokens\\n                    .mul(liquidityFee.sub(buyBackFee.add(operationsFee)))\\n                    .div(liquidityFee);\\n            } else {\\n                tokensForLiquidity = 0;\\n            }\\n\\n            uint256 tokensForBuyBackAndOperations = tokens.sub(\\n                tokensForLiquidity\\n            );\\n\\n            uint256 half = tokensForLiquidity.div(2);\\n            uint256 otherHalf = tokensForLiquidity.sub(half);\\n\\n            // capture the contract's current ETH balance.\\n            // this is so that we can capture exactly the amount of ETH that the\\n            // swap creates, and not make the liquidity event include any ETH that\\n            // has been manually sent to the contract\\n            uint256 initialBalance = address(this).balance;\\n\\n            // swap tokens for ETH\\n            swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\\n\\n            // how much ETH did we just swap into?\\n            uint256 newBalance = address(this).balance.sub(initialBalance);\\n\\n            // add liquidity to uniswap\\n            addLiquidity(otherHalf, newBalance);\\n\\n            swapTokensForEth(tokensForBuyBackAndOperations);\\n            uint256 balanceForOperationsAndBuyBack = address(this).balance.sub(\\n                initialBalance\\n            );\\n\\n            bool success;\\n\\n            if (operationsFee > 0) {\\n                // Send amounts to Operations Wallet\\n                uint256 operationsBalance = balanceForOperationsAndBuyBack\\n                    .mul(operationsFee)\\n                    .div(buyBackFee.add(operationsFee));\\n                (success, ) = payable(operationsWallet).call{\\n                    value: operationsBalance\\n                }(\\\"\\\");\\n                require(\\n                    success,\\n                    \\\"DogeKongZilla: SwapAndLiquify:: Unable to send BNB to Operations Wallet\\\"\\n                );\\n            }\\n\\n            if (buyBackFee > 0) {\\n                // Send amounts to BuyBack Wallet\\n                uint256 buyBackBalance = balanceForOperationsAndBuyBack\\n                    .mul(buyBackFee)\\n                    .div(buyBackFee.add(operationsFee));\\n                (success, ) = payable(buyBackWallet).call{\\n                    value: buyBackBalance\\n                }(\\\"\\\");\\n                require(\\n                    success,\\n                    \\\"DogeKongZilla: SwapAndLiquify:: Unable to send BNB to BuyBack Wallet\\\"\\n                );\\n            }\\n\\n            emit SwapAndLiquify(half, newBalance, otherHalf);\\n        }\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private {\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // make the swap\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // add the liquidity\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            liquidityWallet,\\n            block.timestamp\\n        );\\n    }\\n\\n    function swapAndSendDividends(uint256 tokens) private {\\n        swapTokensForEth(tokens);\\n        uint256 dividends = address(this).balance;\\n        (bool success, ) = address(dividendTracker).call{value: dividends}(\\\"\\\");\\n\\n        if (success) {\\n            emit SendDividends(tokens, dividends);\\n        }\\n    }\\n\\n    function recoverContractBNB(uint256 recoverRate) public onlyOwner {\\n        uint256 bnbAmount = address(this).balance;\\n        if (bnbAmount > 0) {\\n            sendToOperationsWallet(bnbAmount.mul(recoverRate).div(100));\\n        }\\n    }\\n\\n    function sendToOperationsWallet(uint256 amount) private {\\n        payable(operationsWallet).transfer(amount);\\n    }\\n\\n    function setMaxSellPercent(uint256 maxSellPercent) public onlyOwner {\\n        require(maxSellPercent < 100, \\\"Max sell percent must be under 100%\\\");\\n        _maxSellPercent = maxSellPercent;\\n    }\\n}\\n\\nlibrary IterableMapping {\\n    // Iterable mapping from address to uint;\\n    struct Map {\\n        address[] keys;\\n        mapping(address => uint256) values;\\n        mapping(address => uint256) indexOf;\\n        mapping(address => bool) inserted;\\n    }\\n\\n    function get(Map storage map, address key) public view returns (uint256) {\\n        return map.values[key];\\n    }\\n\\n    function getIndexOfKey(Map storage map, address key)\\n        public\\n        view\\n        returns (int256)\\n    {\\n        if (!map.inserted[key]) {\\n            return -1;\\n        }\\n        return int256(map.indexOf[key]);\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint256 index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) public view returns (uint256) {\\n        return map.keys.length;\\n    }\\n\\n    function set(\\n        Map storage map,\\n        address key,\\n        uint256 val\\n    ) public {\\n        if (map.inserted[key]) {\\n            map.values[key] = val;\\n        } else {\\n            map.inserted[key] = true;\\n            map.values[key] = val;\\n            map.indexOf[key] = map.keys.length;\\n            map.keys.push(key);\\n        }\\n    }\\n\\n    function remove(Map storage map, address key) public {\\n        if (!map.inserted[key]) {\\n            return;\\n        }\\n\\n        delete map.inserted[key];\\n        delete map.values[key];\\n\\n        uint256 index = map.indexOf[key];\\n        uint256 lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\\ncontract DogeKongZillaDividendTracker is DividendPayingToken {\\n    using SafeMath for uint256;\\n    using SafeMathInt for int256;\\n    using IterableMapping for IterableMapping.Map;\\n\\n    IterableMapping.Map private tokenHoldersMap;\\n    uint256 public lastProcessedIndex;\\n\\n    mapping(address => bool) public excludedFromDividends;\\n\\n    mapping(address => uint256) public lastClaimTimes;\\n\\n    uint256 public claimWait;\\n    uint256 public minimumTokenBalanceForDividends;\\n\\n    event ExcludeFromDividends(address indexed account);\\n    event IncludeInDividends(address indexed account);\\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\n\\n    event Claim(\\n        address indexed account,\\n        uint256 amount,\\n        bool indexed automatic\\n    );\\n\\n    constructor()\\n        DividendPayingToken(\\n            \\\"DogeKongZilla_Dividend_Tracker\\\",\\n            \\\"DogeKongZilla_Dividend_Tracker\\\",\\n            9\\n        )\\n    {\\n        claimWait = 3600;\\n        minimumTokenBalanceForDividends = 10 * 10**9 * (10**9); //must hold 10,000,000,000+ tokens to get divs\\n    }\\n\\n    function _transfer(\\n        address,\\n        address,\\n        uint256\\n    ) internal pure override {\\n        require(false, \\\"DogeKongZilla_Dividend_Tracker: No transfers allowed\\\");\\n    }\\n\\n    function withdrawDividend() public pure override {\\n        require(\\n            false,\\n            \\\"DogeKongZilla_Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main DogeKongZilla contract.\\\"\\n        );\\n    }\\n\\n    function excludeFromDividends(address account) external onlyOwner {\\n        require(!excludedFromDividends[account]);\\n        excludedFromDividends[account] = true;\\n\\n        _setBalance(account, 0);\\n        tokenHoldersMap.remove(account);\\n\\n        emit ExcludeFromDividends(account);\\n    }\\n\\n    function includeInDividends(address account) external onlyOwner {\\n        require(excludedFromDividends[account]);\\n        excludedFromDividends[account] = false;\\n\\n        emit IncludeInDividends(account);\\n    }\\n\\n    function updateDividendMinimum(uint256 minimumToEarnDivs)\\n        external\\n        onlyOwner\\n    {\\n        minimumTokenBalanceForDividends = minimumToEarnDivs;\\n    }\\n\\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\\n        require(\\n            newClaimWait >= 3600 && newClaimWait <= 86400,\\n            \\\"DogeKongZilla_Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\\\"\\n        );\\n        require(\\n            newClaimWait != claimWait,\\n            \\\"DogeKongZilla_Dividend_Tracker: Cannot update claimWait to same value\\\"\\n        );\\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\\n        claimWait = newClaimWait;\\n    }\\n\\n    function getLastProcessedIndex() external view returns (uint256) {\\n        return lastProcessedIndex;\\n    }\\n\\n    function getNumberOfTokenHolders() external view returns (uint256) {\\n        return tokenHoldersMap.keys.length;\\n    }\\n\\n    function getAccount(address _account)\\n        public\\n        view\\n        returns (\\n            address account,\\n            int256 index,\\n            int256 iterationsUntilProcessed,\\n            uint256 withdrawableDividends,\\n            uint256 totalDividends,\\n            uint256 lastClaimTime,\\n            uint256 nextClaimTime,\\n            uint256 secondsUntilAutoClaimAvailable\\n        )\\n    {\\n        account = _account;\\n\\n        index = tokenHoldersMap.getIndexOfKey(account);\\n\\n        iterationsUntilProcessed = -1;\\n\\n        if (index >= 0) {\\n            if (uint256(index) > lastProcessedIndex) {\\n                iterationsUntilProcessed = index.sub(\\n                    int256(lastProcessedIndex)\\n                );\\n            } else {\\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length >\\n                    lastProcessedIndex\\n                    ? tokenHoldersMap.keys.length.sub(lastProcessedIndex)\\n                    : 0;\\n\\n                iterationsUntilProcessed = index.add(\\n                    int256(processesUntilEndOfArray)\\n                );\\n            }\\n        }\\n\\n        withdrawableDividends = withdrawableDividendOf(account);\\n        totalDividends = accumulativeDividendOf(account);\\n\\n        lastClaimTime = lastClaimTimes[account];\\n\\n        nextClaimTime = lastClaimTime > 0 ? lastClaimTime.add(claimWait) : 0;\\n\\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp\\n            ? nextClaimTime.sub(block.timestamp)\\n            : 0;\\n    }\\n\\n    function getAccountAtIndex(uint256 index)\\n        public\\n        view\\n        returns (\\n            address,\\n            int256,\\n            int256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        if (index >= tokenHoldersMap.size()) {\\n            return (\\n                0x0000000000000000000000000000000000000000,\\n                -1,\\n                -1,\\n                0,\\n                0,\\n                0,\\n                0,\\n                0\\n            );\\n        }\\n\\n        address account = tokenHoldersMap.getKeyAtIndex(index);\\n\\n        return getAccount(account);\\n    }\\n\\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\\n        if (lastClaimTime > block.timestamp) {\\n            return false;\\n        }\\n\\n        return block.timestamp.sub(lastClaimTime) >= claimWait;\\n    }\\n\\n    function setBalance(address payable account, uint256 newBalance)\\n        external\\n        onlyOwner\\n    {\\n        if (excludedFromDividends[account]) {\\n            return;\\n        }\\n\\n        if (newBalance >= minimumTokenBalanceForDividends) {\\n            _setBalance(account, newBalance);\\n            tokenHoldersMap.set(account, newBalance);\\n        } else {\\n            _setBalance(account, 0);\\n            tokenHoldersMap.remove(account);\\n        }\\n\\n        processAccount(account, true);\\n    }\\n\\n    function process(uint256 gas)\\n        public\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\\n\\n        if (numberOfTokenHolders == 0) {\\n            return (0, 0, lastProcessedIndex);\\n        }\\n\\n        uint256 _lastProcessedIndex = lastProcessedIndex;\\n\\n        uint256 gasUsed = 0;\\n\\n        uint256 gasLeft = gasleft();\\n\\n        uint256 iterations = 0;\\n        uint256 claims = 0;\\n\\n        while (gasUsed < gas && iterations < numberOfTokenHolders) {\\n            _lastProcessedIndex++;\\n\\n            if (_lastProcessedIndex >= tokenHoldersMap.keys.length) {\\n                _lastProcessedIndex = 0;\\n            }\\n\\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\\n\\n            if (canAutoClaim(lastClaimTimes[account])) {\\n                if (processAccount(payable(account), true)) {\\n                    claims++;\\n                }\\n            }\\n\\n            iterations++;\\n\\n            uint256 newGasLeft = gasleft();\\n\\n            if (gasLeft > newGasLeft) {\\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\\n            }\\n\\n            gasLeft = newGasLeft;\\n        }\\n\\n        lastProcessedIndex = _lastProcessedIndex;\\n\\n        return (iterations, claims, lastProcessedIndex);\\n    }\\n\\n    function processAccount(address payable account, bool automatic)\\n        public\\n        onlyOwner\\n        returns (bool)\\n    {\\n        uint256 amount = _withdrawDividendOfUser(account);\\n\\n        if (amount > 0) {\\n            lastClaimTimes[account] = block.timestamp;\\n            emit Claim(account, amount, automatic);\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"evmVersion\": \"constantinople\",\r\n    \"libraries\": {\r\n      \"/contracts/MetaDoge.sol\": {\r\n        \"IterableMapping\": \"0xBBe87E69C8992eA5f238E2Eb5265f4CfEE4Bd291\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"BuyBackWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bnbSpent\",\"type\":\"uint256\"}],\"name\":\"BuyBackWithNoFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newBNBRewardsFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOperationsFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyBackFee\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"OperationsWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNBRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_holderLastSellDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isAllowedDuringDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isIgnoredAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSellPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackTokensWithNoFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DogeKongZillaDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getBNBAvailableForHolderBuyBack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDividendTokensMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getHolderSellFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getRawBNBDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getRewardTokenSelectionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getUserCurrentRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getUserHasCustomRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderBNBUsedForBuyBacks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ammAddress\",\"type\":\"address\"}],\"name\":\"isAMMWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isIgnoredToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"recoverRate\",\"type\":\"uint256\"}],\"name\":\"recoverContractBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFeeSellFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeIncreaseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isIgnored\",\"type\":\"bool\"}],\"name\":\"setIgnoreToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setIsBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSellPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxSellPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ammContractAddress\",\"type\":\"address\"}],\"name\":\"setRewardTokenWithCustomAMM\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ammAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWhiteListed\",\"type\":\"bool\"}],\"name\":\"setWhiteListAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsetRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBuyBackWallet\",\"type\":\"address\"}],\"name\":\"updateBuyBackWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumToEarnDivs\",\"type\":\"uint256\"}],\"name\":\"updateDividendTokensMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbRewardPerc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPerc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operationsPerc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBackPerc\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"}],\"name\":\"updateLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxnAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperationsWallet\",\"type\":\"address\"}],\"name\":\"updateOperationsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"tradingStatus\",\"type\":\"bool\"}],\"name\":\"updateTradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DogeKongZilla", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "constantinople", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}