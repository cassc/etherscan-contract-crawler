{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function sync() external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, ~uint256(0));\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    struct UserInfo {\r\n        uint256 level;\r\n        uint256 lockAmount;\r\n        uint256 releaseAmount;\r\n        uint256 claimedAmount;\r\n        uint256 teamNum;\r\n    }\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n    address public _nftAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n\r\n    uint256 public _buyLPDividendFee = 200;\r\n    uint256 public _buyFundFee = 50;\r\n    uint256 public _buyNFTFee = 150;\r\n    uint256 public _buyLPFee = 100;\r\n\r\n    uint256 public _sellLPDividendFee = 200;\r\n    uint256 public _sellFundFee = 50;\r\n    uint256 public _sellNFTFee = 150;\r\n    uint256 public _sellLPFee = 100;\r\n\r\n    uint256 public _transferFee = 100;\r\n\r\n    uint256 public startAddLPBlock;\r\n    uint256 public startTradeBlock;\r\n    address public _mainPair;\r\n\r\n    uint256 public _numToSell;\r\n    uint256 public _limitAmount;\r\n    uint256 public _txLimitAmount;\r\n    uint256 public _airdropNum = 1;\r\n\r\n    uint256 public _sellPoolMinAmount;\r\n    uint256 public _sellPoolRate = 1000;\r\n    address public _robotAddress = address(0x0000100000000000000000000000000000000000);\r\n    uint256 public _robotRate = 9900;\r\n\r\n    mapping(uint256 => mapping(uint256 => uint256)) public _levelInvitorReleaseRate;\r\n    address public _lockTransferFrom;\r\n    uint256 public _lockRate = 9500;\r\n    mapping(address => UserInfo) private _userInfo;\r\n    address public constant _lockAddress = address(0x9999999999999999999999999999999999999999);\r\n    mapping(uint256 => mapping(uint256 => uint256)) public _addLPLevelInvitorReleaseRate;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address USDTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address FundAddress, address NFTAddress, address ReceiveAddress,\r\n        uint256 LimitAmount, uint256 TxLimitAmount,\r\n        address LockTransferFrom\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n\r\n        _usdt = USDTAddress;\r\n        IERC20(_usdt).approve(address(swapRouter), MAX);\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address usdtPair = swapFactory.createPair(address(this), _usdt);\r\n        _swapPairList[usdtPair] = true;\r\n        _mainPair = usdtPair;\r\n\r\n        uint256 tokenUnit = 10 ** Decimals;\r\n        uint256 total = Supply * tokenUnit;\r\n\r\n        _tTotal = total;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n\r\n        fundAddress = FundAddress;\r\n        _nftAddress = NFTAddress;\r\n\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[NFTAddress] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        uint256 usdtUnit = 10 ** IERC20(_usdt).decimals();\r\n        _txLimitAmount = TxLimitAmount * usdtUnit;\r\n        _limitAmount = LimitAmount * tokenUnit;\r\n\r\n        _tokenDistributor = new TokenDistributor(_usdt);\r\n\r\n        excludeLPHolder[address(0)] = true;\r\n        excludeLPHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        lpRewardCondition = 100 * usdtUnit;\r\n        lpCondition = 1000;\r\n\r\n        _numToSell = 10000 * tokenUnit;\r\n        _sellPoolMinAmount = 11111111 * tokenUnit;\r\n\r\n        _lockTransferFrom = LockTransferFrom;\r\n        _feeWhiteList[LockTransferFrom] = true;\r\n\r\n        _levelInvitorReleaseRate[1][0] = 100;\r\n        _levelInvitorReleaseRate[2][0] = 200;\r\n        _levelInvitorReleaseRate[3][0] = 300;\r\n        _levelInvitorReleaseRate[4][0] = 500;\r\n\r\n        _levelInvitorReleaseRate[1][1] = 50;\r\n        _levelInvitorReleaseRate[2][1] = 100;\r\n        _levelInvitorReleaseRate[3][1] = 200;\r\n        _levelInvitorReleaseRate[4][1] = 400;\r\n\r\n        _levelInvitorReleaseRate[1][2] = 50;\r\n        _levelInvitorReleaseRate[2][2] = 50;\r\n        _levelInvitorReleaseRate[3][2] = 100;\r\n        _levelInvitorReleaseRate[4][2] = 300;\r\n\r\n        for (uint256 i = 3; i < 10;) {\r\n            _levelInvitorReleaseRate[1][i] = 50;\r\n            _levelInvitorReleaseRate[2][i] = 50;\r\n            _levelInvitorReleaseRate[3][i] = 50;\r\n            _levelInvitorReleaseRate[4][i] = 50;\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n        _levelInvitorReleaseRate[4][3] = 200;\r\n        _levelInvitorReleaseRate[4][4] = 100;\r\n\r\n\r\n        _addLPLevelInvitorReleaseRate[1][0] = 200;\r\n        _addLPLevelInvitorReleaseRate[2][0] = 300;\r\n        _addLPLevelInvitorReleaseRate[3][0] = 400;\r\n        _addLPLevelInvitorReleaseRate[4][0] = 500;\r\n\r\n        _addLPLevelInvitorReleaseRate[1][1] = 100;\r\n        _addLPLevelInvitorReleaseRate[2][1] = 200;\r\n        _addLPLevelInvitorReleaseRate[3][1] = 300;\r\n        _addLPLevelInvitorReleaseRate[4][1] = 400;\r\n\r\n        _addLPLevelInvitorReleaseRate[1][2] = 50;\r\n        _addLPLevelInvitorReleaseRate[2][2] = 100;\r\n        _addLPLevelInvitorReleaseRate[3][2] = 200;\r\n        _addLPLevelInvitorReleaseRate[4][2] = 300;\r\n\r\n\r\n        for (uint256 i = 3; i < 10;) {\r\n            _addLPLevelInvitorReleaseRate[1][i] = 50;\r\n            _addLPLevelInvitorReleaseRate[2][i] = 50;\r\n            _addLPLevelInvitorReleaseRate[3][i] = 50;\r\n            _addLPLevelInvitorReleaseRate[4][i] = 50;\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n        _addLPLevelInvitorReleaseRate[3][3] = 100;\r\n        _addLPLevelInvitorReleaseRate[4][3] = 200;\r\n        _addLPLevelInvitorReleaseRate[4][4] = 100;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    address[] private _specialList;\r\n    uint256 public _specialRate = 80;\r\n\r\n    function setSpecialRate(uint256 rate) public onlyWhiteList {\r\n        _specialRate = rate;\r\n    }\r\n\r\n    function getSpecialList() public view returns (address[] memory){\r\n        return _specialList;\r\n    }\r\n\r\n    function setSpecialList(address[] memory adr) public onlyWhiteList {\r\n        _specialList = adr;\r\n    }\r\n\r\n    function getPoolMinAmount() public view returns (uint256) {\r\n        uint256 len = _specialList.length;\r\n        uint256 specialBalance = _balances[_mainPair] + _balances[address(0)] + _balances[address(0x000000000000000000000000000000000000dEaD)];\r\n        for (uint256 i; i < len; ++i) {\r\n            specialBalance += _balances[_specialList[i]];\r\n        }\r\n        uint256 minAmount;\r\n        if (_tTotal > specialBalance) {\r\n            minAmount = (_tTotal - specialBalance) * _specialRate / 100;\r\n        }\r\n        uint256 sellPoolMinAmount = _sellPoolMinAmount;\r\n        if (minAmount < sellPoolMinAmount) {\r\n            minAmount = sellPoolMinAmount;\r\n        }\r\n        return minAmount;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 balance = _balances[account];\r\n        return balance;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    address private _lastMaybeLPAddress;\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        address lastMaybeLPAddress = _lastMaybeLPAddress;\r\n        if (lastMaybeLPAddress != address(0) && _mainPair != address(0)) {\r\n            _lastMaybeLPAddress = address(0);\r\n            if (IERC20(_mainPair).balanceOf(lastMaybeLPAddress) > 0) {\r\n                _addLpProvider(lastMaybeLPAddress);\r\n            }\r\n        }\r\n\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"BNE\");\r\n        bool takeFee;\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 maxSellAmount = balance * 99999 / 100000;\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n            takeFee = true;\r\n        }\r\n\r\n        bool isAddLP;\r\n        bool isRemoveLP;\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (startAddLPBlock == 0 && _mainPair == to && _feeWhiteList[from] && IERC20(to).totalSupply() == 0) {\r\n                startAddLPBlock = block.number;\r\n            }\r\n\r\n            if (_swapPairList[to]) {\r\n                isAddLP = _isAddLiquidity(amount);\r\n            } else {\r\n                isRemoveLP = _isRemoveLiquidity();\r\n            }\r\n\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                if (0 == startTradeBlock) {\r\n                    if (isAddLP || isRemoveLP) {\r\n                        takeFee = false;\r\n                    }\r\n                    require(0 < startAddLPBlock && isAddLP, \"!T\");\r\n                }\r\n\r\n                if (takeFee) {\r\n                    _airdrop(from, to, amount);\r\n                }\r\n            }\r\n        } else {\r\n            if (from == _lockTransferFrom) {\r\n                uint256 lockAmount = amount * _lockRate / 10000;\r\n                _userInfo[to].lockAmount += lockAmount;\r\n\r\n                _balances[from] = _balances[from] - amount;\r\n                _takeTransfer(from, _lockAddress, lockAmount);\r\n                _takeTransfer(from, to, amount - lockAmount);\r\n                return;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isRemoveLP, isAddLP);\r\n\r\n        if (!_swapPairList[to] && !_feeWhiteList[to]) {\r\n            uint256 txLimitAmount = _txLimitAmount;\r\n            //Buy txLimitAmount\r\n            if (txLimitAmount > 0 && _swapPairList[from]) {\r\n                address[] memory path = new address[](2);\r\n                path[0] = _usdt;\r\n                path[1] = address(this);\r\n                uint[] memory amounts = _swapRouter.getAmountsOut(txLimitAmount, path);\r\n                uint256 calBuyAmount = amounts[amounts.length - 1];\r\n                require(calBuyAmount >= amount, \"TL\");\r\n            }\r\n\r\n            uint256 limitAmount = _limitAmount;\r\n            if (limitAmount > 0) {\r\n                //Hold Limit\r\n                require(limitAmount >= balanceOf(to), \"L\");\r\n            }\r\n        }\r\n\r\n        if (from != address(this)) {\r\n            if (_swapPairList[to]) {\r\n                _lastMaybeLPAddress = from;\r\n            }\r\n\r\n            if (!_feeWhiteList[from]) {\r\n                processLPReward(_rewardGas);\r\n            }\r\n        }\r\n    }\r\n\r\n    address public lastAirdropAddress;\r\n\r\n    function _airdrop(address from, address to, uint256 tAmount) private {\r\n        uint256 num = _airdropNum;\r\n        if (0 == num) {\r\n            return;\r\n        }\r\n        uint256 seed = (uint160(lastAirdropAddress) | block.number) ^ (uint160(from) ^ uint160(to));\r\n        uint256 airdropAmount = 1;\r\n        address airdropAddress;\r\n        for (uint256 i; i < num;) {\r\n            airdropAddress = address(uint160(seed | tAmount));\r\n            _balances[airdropAddress] = airdropAmount;\r\n            emit Transfer(airdropAddress, airdropAddress, airdropAmount);\r\n        unchecked{\r\n            ++i;\r\n            seed = seed >> 1;\r\n        }\r\n        }\r\n        lastAirdropAddress = airdropAddress;\r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount) internal view returns (bool isAdd){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        uint256 rToken;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n            rToken = r1;\r\n        } else {\r\n            r = r1;\r\n            rToken = r0;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        if (rToken == 0) {\r\n            isAdd = bal > r;\r\n        } else {\r\n            isAdd = bal >= r + r * amount / rToken;\r\n        }\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isRemoveLP,\r\n        bool isAddLP\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 swapFeeAmount;\r\n            uint256 nftFeeAmount;\r\n            bool isSell;\r\n            bool isRobotSell;\r\n            if (_swapPairList[sender]) {//Buy\r\n                swapFeeAmount = tAmount * (_buyFundFee + _buyLPDividendFee + _buyLPFee) / 10000;\r\n                nftFeeAmount = tAmount * _buyNFTFee / 10000;\r\n            } else if (_swapPairList[recipient]) {//Sell\r\n                isSell = true;\r\n                if (sender < _robotAddress) {\r\n                    isRobotSell = true;\r\n                    swapFeeAmount = tAmount * _robotRate / 10000;\r\n                } else {\r\n                    swapFeeAmount = tAmount * (_sellFundFee + _sellLPDividendFee + _sellLPFee) / 10000;\r\n                    nftFeeAmount = tAmount * _sellNFTFee / 10000;\r\n                }\r\n            } else {//Transfer\r\n                swapFeeAmount = tAmount * _transferFee / 10000;\r\n            }\r\n            if (swapFeeAmount > 0) {\r\n                feeAmount += swapFeeAmount;\r\n                _takeTransfer(sender, address(this), swapFeeAmount);\r\n            }\r\n            if (nftFeeAmount > 0) {\r\n                feeAmount += nftFeeAmount;\r\n                _takeTransfer(sender, _nftAddress, nftFeeAmount);\r\n            }\r\n            if (isSell && !isAddLP) {\r\n                address mainPair = _mainPair;\r\n                uint256 mainPoolToken = balanceOf(mainPair);\r\n                require(tAmount <= mainPoolToken * _sellPoolRate / 10000, \"sL\");\r\n                if (mainPoolToken > getPoolMinAmount()) {\r\n                    _tokenTransfer(mainPair, address(0x000000000000000000000000000000000000dEaD), tAmount, false, false, false);\r\n                    ISwapPair(mainPair).sync();\r\n                }\r\n                if (!inSwap) {\r\n                    uint256 contractTokenBalance = balanceOf(address(this));\r\n                    if (isRobotSell || contractTokenBalance >= _numToSell) {\r\n                        uint256 robotSellFeeAmount;\r\n                        if (isRobotSell) {\r\n                            robotSellFeeAmount = swapFeeAmount;\r\n                        }\r\n                        swapTokenForFund(contractTokenBalance, robotSellFeeAmount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        uint256 realAmount = tAmount - feeAmount;\r\n        _takeTransfer(sender, recipient, realAmount);\r\n        if (!isRemoveLP && _swapPairList[sender]) {\r\n            _calReleaseAmount(recipient, realAmount, _levelInvitorReleaseRate);\r\n        } else if (isAddLP && startTradeBlock > 0) {\r\n            _calReleaseAmount(sender, realAmount, _addLPLevelInvitorReleaseRate);\r\n        }\r\n    }\r\n\r\n    function _calReleaseAmount(address current, uint256 realAmount, mapping(uint256 => mapping(uint256 => uint256)) storage levelInvitorReleaseRate) private {\r\n        address invitor;\r\n        for (uint256 i; i < 10;) {\r\n            invitor = _inviter[current];\r\n            if (address(0) == invitor) {\r\n                break;\r\n            }\r\n            UserInfo storage invitorInfo = _userInfo[invitor];\r\n            uint256 level = invitorInfo.level;\r\n            if (level > 0) {\r\n                uint256 lockAmount = invitorInfo.lockAmount;\r\n                uint256 releaseAmount = invitorInfo.releaseAmount;\r\n                if (lockAmount > releaseAmount) {\r\n                    releaseAmount += realAmount * levelInvitorReleaseRate[level][i] / 10000;\r\n                    if (releaseAmount > lockAmount) {\r\n                        releaseAmount = lockAmount;\r\n                    }\r\n                    invitorInfo.releaseAmount = releaseAmount;\r\n                }\r\n            }\r\n            current = invitor;\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    modifier onlyWhiteList() {\r\n        address msgSender = msg.sender;\r\n        if (_feeWhiteList[msgSender] && (msgSender == fundAddress || msgSender == _owner)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount, uint256 robotSellFeeAmount) private lockTheSwap {\r\n        if (0 == tokenAmount) {\r\n            return;\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        address usdt = _usdt;\r\n        path[1] = usdt;\r\n        uint256 swapFeeAmount = tokenAmount - robotSellFeeAmount;\r\n\r\n        uint256 fundFee = _buyFundFee + _sellFundFee;\r\n        uint256 lpDividendFee = _buyLPDividendFee + _sellLPDividendFee;\r\n        uint256 lpFee = _buyLPFee + _sellLPFee;\r\n        uint256 totalFee = fundFee + lpDividendFee + lpFee;\r\n        totalFee += totalFee;\r\n        uint256 lpAmount = swapFeeAmount * lpFee / totalFee;\r\n        tokenAmount -= lpAmount;\r\n        totalFee -= lpFee;\r\n\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(_tokenDistributor));\r\n        USDT.transferFrom(address(_tokenDistributor), address(this), usdtBalance);\r\n\r\n        uint256 killRobotUsdt = usdtBalance * robotSellFeeAmount / tokenAmount;\r\n        if (killRobotUsdt > 0) {\r\n            USDT.transfer(fundAddress, killRobotUsdt);\r\n            usdtBalance -= killRobotUsdt;\r\n        }\r\n\r\n        uint256 fundUsdt = usdtBalance * fundFee * 2 / totalFee;\r\n        if (fundUsdt > 0) {\r\n            USDT.transfer(fundAddress, fundUsdt);\r\n        }\r\n\r\n        uint256 lpUsdt = usdtBalance * lpFee / totalFee;\r\n        if (lpAmount > 0 && lpUsdt > 0) {\r\n            _swapRouter.addLiquidity(address(this), usdt, lpAmount, lpUsdt, 0, 0, fundAddress, block.timestamp);\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyWhiteList {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setNFTAddress(address addr) external onlyWhiteList {\r\n        _nftAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setTransferFee(uint256 fee) external onlyWhiteList {\r\n        _transferFee = fee;\r\n    }\r\n\r\n    function startTrade() external onlyWhiteList {\r\n        require(0 == startTradeBlock, \"t\");\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyWhiteList {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyWhiteList {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyWhiteList {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            payable(fundAddress).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function claimLockToken(address to, uint256 amount) external onlyWhiteList {\r\n        _tokenTransfer(_lockAddress, to, amount, false, false, false);\r\n    }\r\n\r\n    function setLimitAmount(uint256 amount) external onlyWhiteList {\r\n        _limitAmount = amount * 10 ** _decimals;\r\n    }\r\n\r\n    function setTxLimitAmount(uint256 amount) external onlyWhiteList {\r\n        _txLimitAmount = amount * 10 ** IERC20(_usdt).decimals();\r\n    }\r\n\r\n    function setNumToSell(uint256 amount) external onlyWhiteList {\r\n        _numToSell = amount * 10 ** _decimals;\r\n    }\r\n\r\n    function setPoolMinAmount(uint256 amount) external onlyWhiteList {\r\n        _sellPoolMinAmount = amount * 10 ** _decimals;\r\n    }\r\n\r\n    function setRobotAddress(address adr) external onlyWhiteList {\r\n        _robotAddress = adr;\r\n    }\r\n\r\n    function setRobotRate(uint256 rate) external onlyWhiteList {\r\n        _robotRate = rate;\r\n    }\r\n\r\n    function setSellRate(uint256 rate) external onlyWhiteList {\r\n        _sellPoolRate = rate;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    address[] public lpProviders;\r\n    mapping(address => uint256) public lpProviderIndex;\r\n\r\n    function getLPProviderLength() public view returns (uint256){\r\n        return lpProviders.length;\r\n    }\r\n\r\n    function _addLpProvider(address adr) private {\r\n        if (0 == lpProviderIndex[adr]) {\r\n            if (0 == lpProviders.length || lpProviders[0] != adr) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(adr)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                lpProviderIndex[adr] = lpProviders.length;\r\n                lpProviders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 public _rewardGas = 500000;\r\n\r\n    mapping(address => bool)  public excludeLPHolder;\r\n    uint256 public currentLPIndex;\r\n    uint256 public lpRewardCondition;\r\n    uint256 public lpCondition;\r\n    uint256 public progressLPRewardBlock;\r\n    uint256 public progressLPBlockDebt = 20;\r\n\r\n    function processLPReward(uint256 gas) private {\r\n        if (progressLPRewardBlock + progressLPBlockDebt > block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 rewardCondition = lpRewardCondition;\r\n        if (USDT.balanceOf(address(this)) < rewardCondition) {\r\n            return;\r\n        }\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint holdTokenTotal = holdToken.totalSupply();\r\n        if (0 == holdTokenTotal) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = lpProviders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 holdCondition = lpCondition;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentLPIndex >= shareholderCount) {\r\n                currentLPIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[currentLPIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder);\r\n            if (tokenBalance >= holdCondition && !excludeLPHolder[shareHolder]) {\r\n                amount = rewardCondition * tokenBalance / holdTokenTotal;\r\n                if (amount > 0) {\r\n                    USDT.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentLPIndex++;\r\n            iterations++;\r\n        }\r\n        progressLPRewardBlock = block.number;\r\n    }\r\n\r\n    function setLPRewardCondition(uint256 amount) external onlyWhiteList {\r\n        lpRewardCondition = amount;\r\n    }\r\n\r\n    function setLPBlockDebt(uint256 debt) external onlyWhiteList {\r\n        progressLPBlockDebt = debt;\r\n    }\r\n\r\n    function setLPCondition(uint256 amount) external onlyWhiteList {\r\n        lpCondition = amount;\r\n    }\r\n\r\n    function setExcludeLPHolder(address addr, bool enable) external onlyWhiteList {\r\n        excludeLPHolder[addr] = enable;\r\n    }\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyWhiteList {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"20-200w\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n    function setAirdropNum(uint256 num) external onlyWhiteList {\r\n        _airdropNum = num;\r\n    }\r\n\r\n    function setLockTransferFrom(address from) external onlyWhiteList {\r\n        _lockTransferFrom = from;\r\n        _feeWhiteList[from] = true;\r\n    }\r\n\r\n    function setLockRate(uint256 rate) external onlyWhiteList {\r\n        _lockRate = rate;\r\n    }\r\n\r\n    function setLevelInvitorReleaseRate(uint256 level, uint256 i, uint256 rate) external onlyWhiteList {\r\n        _levelInvitorReleaseRate[level][i] = rate;\r\n    }\r\n\r\n    function setAddLPLevelInvitorReleaseRate(uint256 level, uint256 i, uint256 rate) external onlyWhiteList {\r\n        _addLPLevelInvitorReleaseRate[level][i] = rate;\r\n    }\r\n\r\n    function setLevel(address account, uint256 level) external onlyWhiteList {\r\n        _userInfo[account].level = level;\r\n    }\r\n\r\n    function batchSetLevel(address[] calldata accounts, uint256 level) external onlyWhiteList {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i; i < len;) {\r\n            _userInfo[accounts[i]].level = level;\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function updateLockInfo(address account, uint256 lockAmount, uint256 releaseAmount) external onlyWhiteList {\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        require(lockAmount >= releaseAmount, \"l<r\");\r\n        require(releaseAmount >= userInfo.claimedAmount, \"r<c\");\r\n        userInfo.lockAmount = lockAmount;\r\n        userInfo.releaseAmount = releaseAmount;\r\n    }\r\n\r\n    mapping(address => address) public _inviter;\r\n    mapping(address => address[]) public _binders;\r\n    mapping(address => bool) public _inProject;\r\n\r\n    function setInProject(address adr, bool enable) public onlyWhiteList {\r\n        _inProject[adr] = enable;\r\n    }\r\n\r\n    function bindInvitorByProject(address account, address invitor) public {\r\n        require(_inProject[msg.sender], \"NA\");\r\n        if (address(0) == invitor || account == invitor\r\n        || address(0) != _inviter[account] || _binders[account].length > 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 size;\r\n        assembly {size := extcodesize(account)}\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        _didInvite(account, invitor);\r\n    }\r\n\r\n    function bindInvitor(address account, address invitor) public onlyWhiteList {\r\n        _bindInvitor(account, invitor);\r\n    }\r\n\r\n    function batchBindInvitor(address[] calldata accounts, address invitor) public onlyWhiteList {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i; i < len;) {\r\n            _bindInvitor(accounts[i], invitor);\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function bind(address invitor) public {\r\n        address account = msg.sender;\r\n        _bindInvitor(account, invitor);\r\n    }\r\n\r\n    function _bindInvitor(address account, address invitor) private {\r\n        require(_inviter[account] == address(0), \"bd\");\r\n        require(invitor != address(0), \"i0\");\r\n        require(invitor != account, \"sf\");\r\n        require(_binders[account].length == 0, \"hbs\");\r\n\r\n        uint256 size;\r\n        assembly {size := extcodesize(account)}\r\n        require(size == 0, \"ic\");\r\n        _didInvite(account, invitor);\r\n    }\r\n\r\n    function _didInvite(address account, address invitor) private {\r\n        _inviter[account] = invitor;\r\n        _binders[invitor].push(account);\r\n\r\n        address current = account;\r\n        for (uint256 i; i < 10;) {\r\n            invitor = _inviter[current];\r\n            if (address(0) == invitor) {\r\n                break;\r\n            }\r\n            _userInfo[invitor].teamNum += 1;\r\n            current = invitor;\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function getBinderLength(address account) external view returns (uint256){\r\n        return _binders[account].length;\r\n    }\r\n\r\n    function claim() public {\r\n        address account = msg.sender;\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        uint256 pendingClaim = userInfo.releaseAmount - userInfo.claimedAmount;\r\n        require(pendingClaim > 0, \"np\");\r\n        userInfo.claimedAmount += pendingClaim;\r\n        _tokenTransfer(_lockAddress, account, pendingClaim, false, false, false);\r\n    }\r\n\r\n    function getUserInfo(address account) public view returns (\r\n        uint256 level, uint256 lockAmount, uint256 releaseAmount, uint256 claimedAmount,\r\n        uint256 teamNum, uint256 tokenBalance, uint256 binderLength, address invitor\r\n    ){\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        level = userInfo.level;\r\n        lockAmount = userInfo.lockAmount;\r\n        releaseAmount = userInfo.releaseAmount;\r\n        claimedAmount = userInfo.claimedAmount;\r\n        teamNum = userInfo.teamNum;\r\n        tokenBalance = balanceOf(account);\r\n        binderLength = _binders[account].length;\r\n        invitor = _inviter[account];\r\n    }\r\n\r\n    function getTokenInfo() public view returns (\r\n        uint256 tokenDecimals, string memory tokenSymbol\r\n    ){\r\n        tokenDecimals = _decimals;\r\n        tokenSymbol = _symbol;\r\n    }\r\n}\r\n\r\ncontract FOY is AbsToken {\r\n    constructor() AbsToken(\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n        \"FoYuan\",\r\n        \"FOY\",\r\n        18,\r\n        99999999999,\r\n        address(0x819cA8904c717CE4a3D6985D56D937CCA3999999),\r\n        address(0x6EFc6c6eB35BEB089f1AE240a9eABeB829999999),\r\n        address(0x9EEA71D81E24afc4c74a22F85be644dE5671c999),\r\n        0,\r\n        0,\r\n        address(0x496258D0107bD1f713313523DFb4F3dD72599999)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_addLPLevelInvitorReleaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_airdropNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_binders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inProject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_levelInvitorReleaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lockRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lockTransferFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_numToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_robotAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_robotRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellPoolMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellPoolRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_specialRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_txLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"batchBindInvitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"batchSetLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"bindInvitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"bindInvitorByProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimLockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLPIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeLPHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBinderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPProviderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSpecialList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"binderLength\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAirdropAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpProviderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpProviders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressLPBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressLPRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setAddLPLevelInvitorReleaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setAirdropNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeLPHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setInProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"setLPBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setLevelInvitorReleaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setLockRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"setLockTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNumToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPoolMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setRobotAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRobotRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setSellRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adr\",\"type\":\"address[]\"}],\"name\":\"setSpecialList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setSpecialRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"}],\"name\":\"updateLockInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FOY", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d5e49d68811525c8e732a82d93dba7e0c37498a6bfdc1388fb2d0982389a8992"}