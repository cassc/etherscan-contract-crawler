{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-03-25\r\n*/\r\n\r\n//Site:             https:Byronlabs.org/\r\n//Telegram GLOBAL:  https://t.me/ByronLabs_English\r\n//Telegram BR:      https://t.me/ByronLabs\r\n//Telegram Channel: https://t.me/Byronlabsnews\r\n//Twitter:          https://twitter.com/ByronLabs2018\r\n//Exchange:         https:Byronexchange.com\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface BEP20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external;\r\n\r\n    function setShare(address shareholder, uint256 amount) external;\r\n\r\n    function deposit() external payable;\r\n\r\n    function process(uint256 gas) external;\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    address public _token;\r\n    address public WBNB;\r\n    address[] public shareholders;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    BEP20 public REWARD;\r\n    IDEXRouter public router;\r\n\r\n    mapping(address => uint256) public shareholderIndexes;\r\n    mapping(address => uint256) public shareholderClaims;\r\n    mapping(address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10**36;\r\n    uint256 public minPeriod = 1 hours;\r\n    uint256 public minDistribution = 1 * (10**8);\r\n\r\n    uint256 public currentIndex;\r\n\r\n    bool initialized;\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token);\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _router,\r\n        BEP20 reward,\r\n        address token\r\n    ) {\r\n        REWARD = reward;\r\n        router = IDEXRouter(_router);\r\n        _token = token;\r\n        WBNB = router.WETH();\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount)\r\n        external\r\n        override\r\n        onlyToken\r\n    {\r\n        if (shares[shareholder].amount > 0) {\r\n            distributeDividend(shareholder);\r\n        }\r\n        if (amount > 0 && shares[shareholder].amount == 0) {\r\n            addShareholder(shareholder);\r\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\r\n            removeShareholder(shareholder);\r\n        }\r\n        totalShares = (totalShares - shares[shareholder].amount) + amount;\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(\r\n            shares[shareholder].amount\r\n        );\r\n    }\r\n\r\n    function deposit() external payable override onlyToken {\r\n        uint256 balanceBefore = REWARD.balanceOf(address(this));\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(REWARD);\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: msg.value\r\n        }(0, path, address(this), block.timestamp);\r\n        uint256 amount = REWARD.balanceOf(address(this)) - balanceBefore;\r\n        totalDividends = totalDividends + amount;\r\n        dividendsPerShare =\r\n            dividendsPerShare +\r\n            ((dividendsPerShareAccuracyFactor * amount) / totalShares);\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n        if (shareholderCount == 0) {\r\n            return;\r\n        }\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            if (shouldDistribute(shareholders[currentIndex])) {\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n            gasUsed = (gasUsed + gasLeft) - gasleft();\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function shouldDistribute(address shareholder)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            shareholderClaims[shareholder] + minPeriod < block.timestamp &&\r\n            getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if (shares[shareholder].amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if (amount > 0) {\r\n            totalDistributed = totalDistributed + amount;\r\n            REWARD.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised =\r\n                shares[shareholder].totalRealised +\r\n                amount;\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(\r\n                shares[shareholder].amount\r\n            );\r\n        }\r\n    }\r\n\r\n    function claimDividend(address shareholder) external onlyToken {\r\n        distributeDividend(shareholder);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (shares[shareholder].amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(\r\n            shares[shareholder].amount\r\n        );\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\r\n            return 0;\r\n        }\r\n        return shareholderTotalDividends - shareholderTotalExcluded;\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (share * dividendsPerShare) / dividendsPerShareAccuracyFactor;\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\r\n            shareholders.length - 1\r\n        ];\r\n        shareholderIndexes[\r\n            shareholders[shareholders.length - 1]\r\n        ] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    function setDividendTokenAddress(address newToken) external onlyToken {\r\n        REWARD = BEP20(newToken);\r\n    }\r\n}\r\n\r\ncontract  BYRONLABS  {\r\n    DividendDistributor public distributor;\r\n    IDEXRouter public router =\r\n        IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    string constant _name = \"BYRON LABS\";\r\n    string constant _symbol = \"BYRON\";\r\n    uint8 constant _decimals = 9;\r\n    uint256 _totalSupply = 1815000 * (10**_decimals);\r\n\r\n    mapping(address => uint256) _balances;\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n    mapping(address => bool) public _isExcludedFromFee;\r\n    mapping(address => bool) public pair;\r\n    mapping(address => bool) public isDividendExempt;\r\n\r\n    uint256 public buyTax = 300;\r\n    uint256 public sellTax = 300;\r\n\r\n    //BUY FEES\r\n    uint256 public liquidityFee = 300;\r\n    uint256 public marketingFee = 0; \r\n    uint256 public PoolFee = 0; \r\n    uint256 public reflectionFee = 0; \r\n    uint256 public burnFee = 0; \r\n\r\n    //SELL FEES2\r\n    uint256 public sellLiquidityFee = 300; \r\n    uint256 public sellMarketingFee = 0; \r\n    uint256 public sellPoolFee = 0; \r\n    uint256 public sellReflectionFee = 0; \r\n    uint256 public sellBurnFee = 0; \r\n\r\n    uint256 public feeDenominator = 10000;\r\n    uint256 distributorGas = 300000;\r\n    uint256 txbnbGas = 50000;\r\n    uint256 distributorBuyGas = 400000;\r\n    uint256 LiquidifyGas = 500000;\r\n    uint256 public swapThreshold = 10 * (10**_decimals);\r\n\r\n    address public marketingFeeReceiver;\r\n    address public PoolReceiver;\r\n    address public buytokensReceiver;\r\n\r\n    bool public swapEnabled = true;\r\n    bool inSwap;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    address WBNB = router.WETH();\r\n    address private _owner;\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _allowances[address(this)][address(router)] = _totalSupply * 100;\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        marketingFeeReceiver = msg.sender;\r\n        PoolReceiver = msg.sender;\r\n        buytokensReceiver = msg.sender;\r\n        _balances[msg.sender] = _totalSupply;\r\n        address _pair = IDEXFactory(router.factory()).createPair(\r\n            WBNB,\r\n            address(this)\r\n        );\r\n        pair[_pair] = true;\r\n        isDividendExempt[_pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        distributor = new DividendDistributor(\r\n            address(router),\r\n            BEP20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c),\r\n            address(this)\r\n        );\r\n\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool) {\r\n        require(\r\n            _allowances[sender][msg.sender] >= amount,\r\n            \"Insufficient Allowance\"\r\n        );\r\n        _allowances[sender][msg.sender] =\r\n            _allowances[sender][msg.sender] -\r\n            amount;\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function setPair(address _pair, bool io) public onlyOwner {\r\n        pair[_pair] = io;\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function setDividendExempt(address account, bool b) public onlyOwner {\r\n        isDividendExempt[account] = b;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(amount != 0);\r\n        require(amount <= _balances[account]);\r\n        _balances[account] = _balances[account] - amount;\r\n        _totalSupply = _totalSupply - amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _burnIN(address account, uint256 amount) internal {\r\n        _totalSupply = _totalSupply - amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n            !pair[msg.sender] &&\r\n            !inSwap &&\r\n            swapEnabled &&\r\n            _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function setmarketingFeeReceivers(address _marketingFeeReceiver)\r\n        external\r\n        onlyOwner\r\n    {\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n    }\r\n\r\n    function setPoolReceiver(address _autoPoolReceiver) external onlyOwner {\r\n        PoolReceiver = _autoPoolReceiver;\r\n    }\r\n\r\n    function setbuytokensReceiver(address _buytokensReceiver)\r\n        external\r\n        onlyOwner\r\n    {\r\n        buytokensReceiver = _buytokensReceiver;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n    }\r\n\r\n    function value(uint256 amount, uint256 percent)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (amount * percent) / feeDenominator;\r\n    }\r\n\r\n    function _isSell(bool a) internal view returns (uint256) {\r\n        if (a) {\r\n            return sellTax;\r\n        } else {\r\n            return buyTax;\r\n        }\r\n    }\r\n\r\n    function BURNFEE(bool a) internal view returns (uint256) {\r\n        if (a) {\r\n            return sellBurnFee;\r\n        } else {\r\n            return burnFee;\r\n        }\r\n    }\r\n\r\n    function MKTFEE(bool a) internal view returns (uint256) {\r\n        if (a) {\r\n            return sellMarketingFee;\r\n        } else {\r\n            return marketingFee;\r\n        }\r\n    }\r\n\r\n    function LIQUIFYFEE(bool a) internal view returns (uint256) {\r\n        if (a) {\r\n            return sellLiquidityFee;\r\n        } else {\r\n            return liquidityFee;\r\n        }\r\n    }\r\n\r\n    function POOLFEE(bool a) internal view returns (uint256) {\r\n        if (a) {\r\n            return sellPoolFee;\r\n        } else {\r\n            return PoolFee;\r\n        }\r\n    }\r\n\r\n    function REFPOOLFEE(bool a) internal view returns (uint256) {\r\n        if (a) {\r\n            return sellReflectionFee;\r\n        } else {\r\n            return reflectionFee;\r\n        }\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            _basicTransfer(sender, recipient, amount);\r\n            return true;\r\n        } else {\r\n            uint256 liquidifyFeeAmount = value(\r\n                amount,\r\n                LIQUIFYFEE(pair[recipient])\r\n            );\r\n            uint256 stkpoolFeeAmount = value(amount, POOLFEE(pair[recipient]));\r\n            uint256 marketingFeeAmount = value(amount, MKTFEE(pair[recipient]));\r\n            uint256 refFeeAmount = value(amount, REFPOOLFEE(pair[recipient]));\r\n            uint256 burnFeeAmount = value(amount, BURNFEE(pair[recipient]));\r\n\r\n            uint256 FeeAmount = liquidifyFeeAmount +\r\n                stkpoolFeeAmount +\r\n                marketingFeeAmount +\r\n                refFeeAmount;\r\n\r\n            _txTransfer(sender, address(this), FeeAmount);\r\n\r\n            swapThreshold = balanceOf(address(this));\r\n            if (shouldSwapBack()) {\r\n                swapBack(\r\n                    marketingFeeAmount,\r\n                    liquidifyFeeAmount,\r\n                    stkpoolFeeAmount,\r\n                    refFeeAmount\r\n                );\r\n            } else {\r\n                _balances[address(this)] = _balances[address(this)] - FeeAmount;\r\n                _txTransfer(address(this), buytokensReceiver, FeeAmount);\r\n\r\n                swapThreshold = balanceOf(address(this));\r\n            }\r\n            _burnIN(sender, burnFeeAmount);\r\n            uint256 feeAmount = value(amount, _isSell(pair[recipient]));\r\n            uint256 amountWithFee = amount - feeAmount;\r\n\r\n            _balances[sender] = _balances[sender] - amount;\r\n            _balances[recipient] = _balances[recipient] + amountWithFee;\r\n\r\n            if (!isDividendExempt[sender]) {\r\n                try distributor.setShare(sender, balanceOf(sender)) {} catch {}\r\n            }\r\n\r\n            if (!isDividendExempt[recipient]) {\r\n                try\r\n                    distributor.setShare(recipient, balanceOf(recipient))\r\n                {} catch {}\r\n            }\r\n            try distributor.process(distributorGas) {} catch {}\r\n            emit Transfer(sender, recipient, amountWithFee);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(_balances[sender] >= amount, \"Insufficient Balance\");\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _txTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function getamount(uint256 amount, address[] memory path)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return router.getAmountsOut(amount, path)[1];\r\n    }\r\n\r\n    function swapBack(\r\n        uint256 marketing,\r\n        uint256 liquidity,\r\n        uint256 Pool,\r\n        uint256 reflection\r\n    ) internal swapping {\r\n        uint256 a = marketing + liquidity + Pool + reflection;\r\n        if (a <= swapThreshold) {} else {\r\n            a = swapThreshold;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n\r\n        uint256 amountBNBLiquidity = liquidity > 0\r\n            ? getamount(liquidity / 2, path)\r\n            : 0;\r\n        uint256 amountBNBMarketing = marketing > 0\r\n            ? getamount(marketing, path)\r\n            : 0;\r\n        uint256 amountBNBPool = Pool > 0 ? getamount(Pool, path) : 0;\r\n        uint256 amountBNBReflection = reflection > 0\r\n            ? getamount(reflection, path)\r\n            : 0;\r\n\r\n        uint256 amountToLiquidify = liquidity > 0 ? (liquidity / 2) : 0;\r\n\r\n        uint256 amountToSwap = amountToLiquidify > 0\r\n            ? a - amountToLiquidify\r\n            : a;\r\n\r\n        swapThreshold = balanceOf(address(this));\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        if (amountBNBMarketing > 0) {\r\n            (bool success, ) = payable(marketingFeeReceiver).call{\r\n                value: amountBNBMarketing,\r\n                gas: txbnbGas\r\n            }(\"\");\r\n            // payable(marketingFeeReceiver).transfer(amountBNBMarketing);\r\n        }\r\n        if (amountBNBPool > 0) {\r\n            (bool success, ) = payable(PoolReceiver).call{\r\n                value: amountBNBPool,\r\n                gas: txbnbGas\r\n            }(\"\");\r\n            //payable(PoolReceiver).transfer(amountBNBPool);\r\n        }\r\n\r\n        if (amountBNBReflection > 0) {\r\n            try\r\n                distributor.deposit{\r\n                    value: amountBNBReflection,\r\n                    gas: distributorBuyGas\r\n                }()\r\n            {} catch {}\r\n        }\r\n\r\n        if (amountToLiquidify > 0) {\r\n            router.addLiquidityETH{\r\n                value: amountToLiquidify <= address(this).balance\r\n                    ? amountBNBLiquidity\r\n                    : address(this).balance,\r\n                gas: LiquidifyGas\r\n            }(\r\n                address(this),\r\n                amountToLiquidify,\r\n                0,\r\n                0,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _liquidityFee,\r\n        uint256 _reflectionFee,\r\n        uint256 _PoolFee,\r\n        uint256 _burnFee,\r\n        uint256 _marketingFee,\r\n        uint256 _sellLiquidityFee,\r\n        uint256 _sellReflectionFee,\r\n        uint256 _sellPoolFee,\r\n        uint256 _sellBurnFee,\r\n        uint256 _sellMarketingFee\r\n    ) external onlyOwner {\r\n        liquidityFee = _liquidityFee;\r\n        marketingFee = _marketingFee;\r\n        reflectionFee = _reflectionFee;\r\n        PoolFee = _PoolFee;\r\n        burnFee = _burnFee;\r\n\r\n        buyTax =\r\n            _liquidityFee +\r\n            _marketingFee +\r\n            _PoolFee +\r\n            _reflectionFee +\r\n            _burnFee;\r\n\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n        sellReflectionFee = _sellReflectionFee;\r\n        sellPoolFee = _sellPoolFee;\r\n        sellBurnFee = _sellBurnFee;\r\n        sellMarketingFee = _sellMarketingFee;\r\n\r\n        sellTax =\r\n            _sellLiquidityFee +\r\n            _sellReflectionFee +\r\n            _sellPoolFee +\r\n            _sellBurnFee +\r\n            _sellMarketingFee;\r\n\r\n        require(\r\n            (buyTax + sellTax) <= 600,\r\n            \"Buy+Sell tax cannot be more than 6%\"\r\n        );\r\n    }\r\n\r\n    function multiTransfer(\r\n        address[] calldata addresses,\r\n        uint256[] calldata tokens\r\n    ) external {\r\n        require(_isExcludedFromFee[msg.sender]);\r\n        address from = msg.sender;\r\n\r\n        require(\r\n            addresses.length < 501,\r\n            \"GAS Error: max limit is 500 addresses\"\r\n        );\r\n        require(\r\n            addresses.length == tokens.length,\r\n            \"Mismatch between address and token count\"\r\n        );\r\n\r\n        uint256 SCCC = 0;\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            SCCC = SCCC + tokens[i];\r\n        }\r\n\r\n        require(balanceOf(from) >= SCCC, \"Not enough tokens in wallet\");\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            _basicTransfer(from, addresses[i], tokens[i]);\r\n        }\r\n    }\r\n\r\n    function manualSend() external onlyOwner {\r\n        payable(marketingFeeReceiver).transfer(address(this).balance);\r\n        _basicTransfer(\r\n            address(this),\r\n            marketingFeeReceiver,\r\n            balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external onlyOwner {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n\r\n    function claimDividend() external {\r\n        distributor.claimDividend(msg.sender);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return distributor.getUnpaidEarnings(shareholder);\r\n    }\r\n\r\n    function setDistributorSettings(uint256 gas) external onlyOwner {\r\n        require(gas < 3000000);\r\n        distributorGas = gas;\r\n    }\r\n\r\n    function setTXBNBgas(uint256 gas) external onlyOwner {\r\n        require(gas < 100000);\r\n        txbnbGas = gas;\r\n    }\r\n\r\n    function setDistribuitorBuyGas(uint256 gas) external onlyOwner {\r\n        require(gas < 1000000);\r\n        distributorBuyGas = gas;\r\n    }\r\n\r\n    function setLiquidifyGas(uint256 gas) external onlyOwner {\r\n        require(gas < 1000000);\r\n        LiquidifyGas = gas;\r\n    }\r\n\r\n    function setDividendToken(address _newContract) external onlyOwner {\r\n        require(_newContract != address(0));\r\n        distributor.setDividendTokenAddress(_newContract);\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PoolReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buytokensReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getUnpaidEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistribuitorBuyGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"setDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PoolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellPoolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellMarketingFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setLiquidifyGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"io\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoPoolReceiver\",\"type\":\"address\"}],\"name\":\"setPoolReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setTXBNBgas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buytokensReceiver\",\"type\":\"address\"}],\"name\":\"setbuytokensReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setmarketingFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BYRONLABS", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4a10ae2d7d77ad921b8f22e6e98c5dcf44d9192e9a6bc7ec6c1f67cc2ef51bb0"}