{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RevenueSharingPoolGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IRevenueSharingPool.sol\\\";\\n\\ncontract RevenueSharingPoolGateway {\\n    /// @notice Claim multiple pools for user , with cake pool proxy\\n    /// @dev If user had cake pool proxy , will claim at the same time\\n    function claimMultiple(address[] calldata _revenueSharingPools, address _for) external {\\n        for (uint256 i = 0; i < _revenueSharingPools.length; i++) {\\n            IRevenueSharingPool(_revenueSharingPools[i]).claim(_for);\\n        }\\n    }\\n\\n    /// @notice Claim multiple pools for user, without cake pool proxy\\n    /// @dev If user had cake pool proxy , will not claim at the same time\\n    /// @dev You can use cake pool proxy address as _for , will claim for cake pool proxy\\n    function claimMultipleWithoutProxy(address[] calldata _revenueSharingPools, address _for) external {\\n        for (uint256 i = 0; i < _revenueSharingPools.length; i++) {\\n            IRevenueSharingPool(_revenueSharingPools[i]).claimForUser(_for);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRevenueSharingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IRevenueSharingPool {\\n    function lastTokenTimestamp() external view returns (uint256);\\n\\n    function checkpointToken() external;\\n\\n    function checkpointTotalSupply() external;\\n\\n    function claim(address user) external returns (uint256);\\n\\n    function claimForUser(address user) external returns (uint256);\\n\\n    function setRecipient(address _user, address _recipient) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_revenueSharingPools\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"claimMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_revenueSharingPools\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"claimMultipleWithoutProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RevenueSharingPoolGateway", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}