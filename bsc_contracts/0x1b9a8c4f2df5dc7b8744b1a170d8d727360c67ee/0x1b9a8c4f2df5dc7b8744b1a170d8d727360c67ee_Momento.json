{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Momento.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\r\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\r\\n\\r\\ncontract Momento is IERC20Metadata, Ownable {\\r\\n  struct User {\\r\\n    uint256 buy;\\r\\n    uint256 sell;\\r\\n  }\\r\\n\\r\\n  address public marketingAddress = 0x07c013fba1bB7CA3a3eb1dc0666De5bB0bF8D7d9;\\r\\n  address public stakingAddress = 0x305025F712961a7482A4053b39ac0Fd344206726;\\r\\n  address public constant deadAddress =\\r\\n    0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n  uint256 private _rStakingLock;\\r\\n\\r\\n  uint256 public stakingUnlockTime;\\r\\n  uint8 public stakingUnlockCount;\\r\\n  uint8 private _rStakingUnlockMonths;\\r\\n  uint256 private _rStakingUnlockTokenCount;\\r\\n\\r\\n  uint256 private _rBurnLock;\\r\\n\\r\\n  uint256 private _rBuyBackTokenCount;\\r\\n\\r\\n  uint256 private _maxSecondsBetweenBuySell = 15;\\r\\n  mapping(address => User) private _cooldown;\\r\\n\\r\\n  mapping(address => uint256) private _rOwned;\\r\\n  mapping(address => uint256) private _tOwned;\\r\\n  mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n  mapping(address => bool) private _isUniswapV2Pair;\\r\\n\\r\\n  mapping(address => bool) private _isExcludedFromFee;\\r\\n  mapping(address => bool) private _isExcluded;\\r\\n  address[] private _excludedFromReward;\\r\\n\\r\\n  uint256 private _holderCount;\\r\\n  uint256 private _lastMaxHolderCount = 99;\\r\\n\\r\\n  uint256 private constant MAX = ~uint256(0);\\r\\n  uint256 private _tTotal = 1000000000000 * 10**9;\\r\\n  uint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n  uint256 private _tFeeTotal;\\r\\n\\r\\n  string private _name = 'Momento';\\r\\n  string private _symbol = 'MOMENTO';\\r\\n\\r\\n  uint256 public _taxFee = 3;\\r\\n  uint256 private _previousTaxFee = _taxFee;\\r\\n\\r\\n  uint256 public _liquidityFee = 3;\\r\\n  uint256 private _previousLiquidityFee = _liquidityFee;\\r\\n\\r\\n  uint256 public _buyBackFee = 4;\\r\\n  uint256 private _previousBuyBackFee = _buyBackFee;\\r\\n  uint256 private _buyBackEthBalance;\\r\\n\\r\\n  IUniswapV2Router02 public immutable uniswapV2Router;\\r\\n  address public uniswapV2Pair;\\r\\n\\r\\n  bool inSwapAndLiquify;\\r\\n  bool public swapAndLiquifyEnabled = true;\\r\\n\\r\\n  uint256 private numTokensSellToAddToLiquidity = 500000000 * 10**9;\\r\\n\\r\\n  event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\\r\\n  event SwapAndLiquifyEnabledUpdated(bool enabled);\\r\\n  event SwapAndLiquify(\\r\\n    uint256 tokensSwapped,\\r\\n    uint256 ethReceived,\\r\\n    uint256 tokensIntoLiqudity\\r\\n  );\\r\\n  event SwapETHForTokens(uint256 amountIn, address[] path);\\r\\n\\r\\n  modifier lockTheSwap() {\\r\\n    inSwapAndLiquify = true;\\r\\n    _;\\r\\n    inSwapAndLiquify = false;\\r\\n  }\\r\\n\\r\\n  constructor() {\\r\\n    // 1% of total reflection supply\\r\\n    uint256 onePercentR = _rTotal / 100;\\r\\n    // 1% of total t supply\\r\\n    // uint256 onePercentT = _tTotal / 100;\\r\\n\\r\\n    // add 60% of tokens to owner(for adding to liquidity pool)\\r\\n    _rOwned[_msgSender()] = onePercentR * 60;\\r\\n    // add 2% of tokens to marketing address\\r\\n    _rOwned[marketingAddress] = onePercentR * 2;\\r\\n\\r\\n    // 12% is allocated for staking, 90% of that of which is vested over 12 months,\\r\\n    // 10% that goes directly to stakingAddress right away\\r\\n    uint256 _rStakingTotal = onePercentR * 12;\\r\\n    _rStakingLock = (_rStakingTotal / 10) * 9;\\r\\n    _rOwned[address(0)] = _rStakingLock;\\r\\n    _rOwned[stakingAddress] = _rStakingTotal - _rStakingLock;\\r\\n\\r\\n    _rStakingUnlockMonths = 12;\\r\\n    _rStakingUnlockTokenCount = _rStakingLock / _rStakingUnlockMonths;\\r\\n    // keep here until we confirm we don't want to have a locking period\\r\\n    stakingUnlockTime = block.timestamp; // + 0 days;\\r\\n\\r\\n    // burning 26% of total supply here\\r\\n    _rOwned[deadAddress] = onePercentR * 26;\\r\\n\\r\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\r\\n      0x10ED43C718714eb63d5aA57B78B54704E256024E\\r\\n    );\\r\\n    // Create a uniswap pair for this new token\\r\\n    uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\\r\\n      address(this),\\r\\n      _uniswapV2Router.WETH()\\r\\n    );\\r\\n\\r\\n    // set the rest of the contract variables\\r\\n    uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n    _holderCount = 4;\\r\\n\\r\\n    _isUniswapV2Pair[uniswapV2Pair] = true;\\r\\n\\r\\n    _isExcludedFromFee[owner()] = true;\\r\\n    _isExcludedFromFee[address(this)] = true;\\r\\n\\r\\n    emit Transfer(\\r\\n      address(0),\\r\\n      _msgSender(),\\r\\n      tokenFromReflection(_rOwned[_msgSender()])\\r\\n    );\\r\\n    emit Transfer(\\r\\n      address(0),\\r\\n      marketingAddress,\\r\\n      tokenFromReflection(_rOwned[marketingAddress])\\r\\n    );\\r\\n    emit Transfer(\\r\\n      address(0),\\r\\n      stakingAddress,\\r\\n      tokenFromReflection(_rOwned[stakingAddress])\\r\\n    );\\r\\n    emit Transfer(\\r\\n      address(0),\\r\\n      address(0),\\r\\n      tokenFromReflection(_rOwned[address(0)])\\r\\n    );\\r\\n    emit Transfer(\\r\\n      address(0),\\r\\n      deadAddress,\\r\\n      tokenFromReflection(_rOwned[deadAddress])\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function unlockStakingTokens() external {\\r\\n    require(\\r\\n      _msgSender() == stakingAddress,\\r\\n      'Function can be called only with staking address'\\r\\n    );\\r\\n    require(\\r\\n      block.timestamp > stakingUnlockTime,\\r\\n      'Function can be called only if stakingUnlockTime has passed'\\r\\n    );\\r\\n    require(\\r\\n      stakingUnlockCount < _rStakingUnlockMonths,\\r\\n      'You are already unlocked all tokens'\\r\\n    );\\r\\n    uint256 difference = block.timestamp - stakingUnlockTime;\\r\\n    uint256 monthCount = difference / 30 days;\\r\\n    uint8 remainingMonths = _rStakingUnlockMonths - stakingUnlockCount;\\r\\n    if (monthCount > remainingMonths) monthCount = remainingMonths;\\r\\n    uint256 amountToTransfer = monthCount * _rStakingUnlockTokenCount;\\r\\n    if (amountToTransfer > 0) {\\r\\n      _rOwned[address(0)] -= amountToTransfer;\\r\\n      _rOwned[stakingAddress] += amountToTransfer;\\r\\n      stakingUnlockCount += uint8(monthCount);\\r\\n      stakingUnlockTime += monthCount * 30 days;\\r\\n      emit Transfer(\\r\\n        address(0),\\r\\n        stakingAddress,\\r\\n        tokenFromReflection(amountToTransfer)\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setMarketingAddress(address _marketingAddress) public onlyOwner {\\r\\n    marketingAddress = _marketingAddress;\\r\\n  }\\r\\n\\r\\n  function setStakingAddress(address _stakingAddress) public onlyOwner {\\r\\n    stakingAddress = _stakingAddress;\\r\\n  }\\r\\n\\r\\n  function name() public view override returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  function symbol() public view override returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  function decimals() public pure override returns (uint8) {\\r\\n    return 9;\\r\\n  }\\r\\n\\r\\n  function totalSupply() public view override returns (uint256) {\\r\\n    return _tTotal;\\r\\n  }\\r\\n\\r\\n  function balanceOf(address account) public view override returns (uint256) {\\r\\n    if (_isExcluded[account]) return _tOwned[account];\\r\\n    return tokenFromReflection(_rOwned[account]);\\r\\n  }\\r\\n\\r\\n  function transfer(address recipient, uint256 amount)\\r\\n    public\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    _transfer(_msgSender(), recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function allowance(address owner, address spender)\\r\\n    public\\r\\n    view\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  function approve(address spender, uint256 amount)\\r\\n    public\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    _approve(_msgSender(), spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) public override returns (bool) {\\r\\n    _transfer(sender, recipient, amount);\\r\\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function increaseAllowance(address spender, uint256 addedValue)\\r\\n    public\\r\\n    virtual\\r\\n    returns (bool)\\r\\n  {\\r\\n    _approve(\\r\\n      _msgSender(),\\r\\n      spender,\\r\\n      _allowances[_msgSender()][spender] + addedValue\\r\\n    );\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n    public\\r\\n    virtual\\r\\n    returns (bool)\\r\\n  {\\r\\n    _approve(\\r\\n      _msgSender(),\\r\\n      spender,\\r\\n      _allowances[_msgSender()][spender] - subtractedValue\\r\\n    );\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function isExcludedFromReward(address account) public view returns (bool) {\\r\\n    return _isExcluded[account];\\r\\n  }\\r\\n\\r\\n  function totalFees() public view returns (uint256) {\\r\\n    return _tFeeTotal;\\r\\n  }\\r\\n\\r\\n  function deliver(uint256 tAmount) public {\\r\\n    address sender = _msgSender();\\r\\n    require(\\r\\n      !_isExcluded[sender],\\r\\n      'Excluded addresses cannot call this function'\\r\\n    );\\r\\n    uint256 rAmount = tAmount * _getRate();\\r\\n    _rOwned[sender] -= rAmount;\\r\\n    _rTotal -= rAmount;\\r\\n    _tFeeTotal += tAmount;\\r\\n  }\\r\\n\\r\\n  function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\\r\\n    public\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    require(tAmount <= _tTotal, 'Amount must be less than supply');\\r\\n    uint256 currentRate = _getRate();\\r\\n    if (!deductTransferFee) {\\r\\n      return tAmount * currentRate;\\r\\n    } else {\\r\\n      uint256[4] memory tValues = _getTValues(tAmount);\\r\\n      return tValues[0] * currentRate;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\\r\\n    require(rAmount <= _rTotal, 'Amount must be less than total reflections');\\r\\n    uint256 currentRate = _getRate();\\r\\n    return rAmount / currentRate;\\r\\n  }\\r\\n\\r\\n  function excludeFromReward(address account) public onlyOwner {\\r\\n    require(!_isExcluded[account], 'Account is already excluded');\\r\\n    require(\\r\\n      account != 0x10ED43C718714eb63d5aA57B78B54704E256024E,\\r\\n      'We can not exclude Uniswap router.'\\r\\n    );\\r\\n    require(account != marketingAddress, 'marketingAddress cannot be excluded');\\r\\n    require(account != deadAddress, 'deadAddress cannot be excluded');\\r\\n    require(\\r\\n      _excludedFromReward.length <= 40,\\r\\n      \\\"Don't allow too many excluded addresses\\\"\\r\\n    );\\r\\n    if (_rOwned[account] > 0) {\\r\\n      _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n    _isExcluded[account] = true;\\r\\n    _excludedFromReward.push(account);\\r\\n  }\\r\\n\\r\\n  function includeInReward(address account) external onlyOwner {\\r\\n    require(_isExcluded[account], 'Account is already excluded');\\r\\n    for (uint256 i = 0; i < _excludedFromReward.length; i++) {\\r\\n      if (_excludedFromReward[i] == account) {\\r\\n        _excludedFromReward[i] = _excludedFromReward[\\r\\n          _excludedFromReward.length - 1\\r\\n        ];\\r\\n        _tOwned[account] = 0;\\r\\n        _isExcluded[account] = false;\\r\\n        _excludedFromReward.pop();\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function addUniswapV2PairAddress(address account) external onlyOwner {\\r\\n    _isUniswapV2Pair[account] = true;\\r\\n  }\\r\\n\\r\\n  function removeUniswapV2PairAddress(address account) external onlyOwner {\\r\\n    _isUniswapV2Pair[account] = false;\\r\\n  }\\r\\n\\r\\n  function setMaxSecondsBetweenBuySell(uint256 _seconds) external onlyOwner {\\r\\n    _maxSecondsBetweenBuySell = _seconds;\\r\\n  }\\r\\n\\r\\n  function setTaxFeePercent(uint256 taxFee) external onlyOwner {\\r\\n    _taxFee = taxFee;\\r\\n  }\\r\\n\\r\\n  function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner {\\r\\n    _liquidityFee = liquidityFee;\\r\\n  }\\r\\n\\r\\n  function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\\r\\n    swapAndLiquifyEnabled = _enabled;\\r\\n    emit SwapAndLiquifyEnabledUpdated(_enabled);\\r\\n  }\\r\\n\\r\\n  function isExcludedFromFee(address account) public view returns (bool) {\\r\\n    return _isExcludedFromFee[account];\\r\\n  }\\r\\n\\r\\n  function excludeFromFee(address account) public onlyOwner {\\r\\n    _isExcludedFromFee[account] = true;\\r\\n  }\\r\\n\\r\\n  function includeInFee(address account) public onlyOwner {\\r\\n    _isExcludedFromFee[account] = false;\\r\\n  }\\r\\n\\r\\n  //to recieve ETH from uniswapV2Router when swaping\\r\\n  receive() external payable {}\\r\\n\\r\\n  function _reflectFee(uint256 tFee, uint256 rFee) private {\\r\\n    _rTotal -= rFee;\\r\\n    _tFeeTotal += tFee;\\r\\n  }\\r\\n\\r\\n  // tValues[0] -> tTransferAmount -> transfer amount\\r\\n  // tValues[1] -> tFee -> holders fee amount\\r\\n  // tValues[2] -> tLiquidity -> liquidity fee amount\\r\\n  // tValues[3] -> tBuyBack -> buyBack fee amount\\r\\n  function _getTValues(uint256 tAmount)\\r\\n    private\\r\\n    view\\r\\n    returns (uint256[4] memory)\\r\\n  {\\r\\n    uint256[4] memory tValues;\\r\\n    tValues[1] = calculateTaxFee(tAmount); // tFee\\r\\n    tValues[2] = calculateLiquidityFee(tAmount); // tLiquidity\\r\\n    tValues[3] = calculateBuyBackFee(tAmount); // tBuyBack\\r\\n    tValues[0] = tAmount - tValues[1] - tValues[2] - tValues[3]; // tTransferAmount\\r\\n    return tValues;\\r\\n  }\\r\\n\\r\\n  function _getRate() private view returns (uint256) {\\r\\n    (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n    return rSupply / tSupply;\\r\\n  }\\r\\n\\r\\n  function _getCurrentSupply() private view returns (uint256, uint256) {\\r\\n    uint256 rSupply = _rTotal;\\r\\n    uint256 tSupply = _tTotal;\\r\\n    for (uint256 i = 0; i < _excludedFromReward.length; i++) {\\r\\n      if (\\r\\n        _rOwned[_excludedFromReward[i]] > rSupply ||\\r\\n        _tOwned[_excludedFromReward[i]] > tSupply\\r\\n      ) return (_rTotal, _tTotal);\\r\\n      rSupply -= _rOwned[_excludedFromReward[i]];\\r\\n      tSupply -= _tOwned[_excludedFromReward[i]];\\r\\n    }\\r\\n    if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\\r\\n    return (rSupply, tSupply);\\r\\n  }\\r\\n\\r\\n  function _takeLiquidity(uint256 tLiquidity, uint256 rLiquidity) private {\\r\\n    _rOwned[address(this)] += rLiquidity;\\r\\n    if (_isExcluded[address(this)]) {\\r\\n      _tOwned[address(this)] += tLiquidity;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function calculateTaxFee(uint256 _amount) private view returns (uint256) {\\r\\n    return (_amount * _taxFee) / 100;\\r\\n  }\\r\\n\\r\\n  function calculateLiquidityFee(uint256 _amount)\\r\\n    private\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return (_amount * _liquidityFee) / 100;\\r\\n  }\\r\\n\\r\\n  function calculateBuyBackFee(uint256 _amount) private view returns (uint256) {\\r\\n    return (_amount * _buyBackFee) / 100;\\r\\n  }\\r\\n\\r\\n  function removeAllFee() private {\\r\\n    if (_taxFee == 0 && _liquidityFee == 0 && _buyBackFee == 0) return;\\r\\n\\r\\n    _previousTaxFee = _taxFee;\\r\\n    _previousLiquidityFee = _liquidityFee;\\r\\n    _previousBuyBackFee = _buyBackFee;\\r\\n\\r\\n    _taxFee = 0;\\r\\n    _liquidityFee = 0;\\r\\n    _buyBackFee = 0;\\r\\n  }\\r\\n\\r\\n  function restoreAllFee() private {\\r\\n    _taxFee = _previousTaxFee;\\r\\n    _liquidityFee = _previousLiquidityFee;\\r\\n    _buyBackFee = _previousBuyBackFee;\\r\\n  }\\r\\n\\r\\n  function isUniswapV2PairAddress(address account) public view returns (bool) {\\r\\n    return _isUniswapV2Pair[account];\\r\\n  }\\r\\n\\r\\n  function _approve(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 amount\\r\\n  ) private {\\r\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\r\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\r\\n\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  function _transfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) private {\\r\\n    require(from != address(0), 'ERC20: transfer from the zero address');\\r\\n    require(to != address(0), 'ERC20: transfer to the zero address');\\r\\n    require(amount > 0, 'Transfer amount must be greater than zero');\\r\\n\\r\\n    // if balance of recipient is 0 then holder count is increased\\r\\n    // and if sender balance is equal to amount then holder count decreased\\r\\n    if (balanceOf(to) == 0) _holderCount++;\\r\\n    if (balanceOf(from) == amount) _holderCount--;\\r\\n\\r\\n    // indicates if fee should be deducted from transfer\\r\\n    bool takeFee;\\r\\n    uint256 timestamp = block.timestamp;\\r\\n\\r\\n    // take fee only in buying or selling operation\\r\\n    if (from != address(this) && to != address(this)) {\\r\\n      // buy\\r\\n      if (\\r\\n        _isUniswapV2Pair[from] &&\\r\\n        to != address(uniswapV2Router) &&\\r\\n        !_isExcludedFromFee[to]\\r\\n      ) {\\r\\n        _cooldown[to].sell = timestamp + _maxSecondsBetweenBuySell;\\r\\n        takeFee = true;\\r\\n      } else {\\r\\n        // sell\\r\\n        if (_isUniswapV2Pair[to]) {\\r\\n          takeFee = true;\\r\\n          require(\\r\\n            _cooldown[from].sell < timestamp,\\r\\n            'You can sell tokens once in _maxSecondsBetweenBuySell seconds'\\r\\n          );\\r\\n          _cooldown[from].sell = timestamp + _maxSecondsBetweenBuySell;\\r\\n\\r\\n          // is the token balance of this contract address over the min number of\\r\\n          // tokens that we need to initiate a swap + liquidity lock?\\r\\n          // also, don't get caught in a circular liquidity event.\\r\\n          // also, don't swap & liquify if sender is uniswap pair.\\r\\n          uint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\r\\n          bool overMinTokenBalance = contractTokenBalance >=\\r\\n            numTokensSellToAddToLiquidity;\\r\\n          if (\\r\\n            overMinTokenBalance &&\\r\\n            !inSwapAndLiquify &&\\r\\n            !_isUniswapV2Pair[from] &&\\r\\n            swapAndLiquifyEnabled\\r\\n          ) {\\r\\n            contractTokenBalance = numTokensSellToAddToLiquidity;\\r\\n            // add liquidity\\r\\n            swapAndLiquify(contractTokenBalance);\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // if sender is excluded or recipient is excluded then fee does not taken\\r\\n    if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\r\\n      takeFee = false;\\r\\n    }\\r\\n\\r\\n    // transfer amount, it will take tax, burn, liquidity, marketing fee\\r\\n    _tokenTransfer(from, to, amount, takeFee);\\r\\n  }\\r\\n\\r\\n  function buyBackAndBurn(uint256 _amountETH) external onlyOwner {\\r\\n    if (_amountETH == 0) _amountETH = _buyBackEthBalance;\\r\\n    require(\\r\\n      _buyBackEthBalance >= _amountETH,\\r\\n      'trying to buy back and burn more than balance available'\\r\\n    );\\r\\n    if (_amountETH > 0) {\\r\\n      _buyBackAndBurn(_amountETH);\\r\\n      _buyBackEthBalance -= _amountETH;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _buyBackAndBurn(uint256 amount) private {\\r\\n    // generate the uniswap pair path of token -> weth\\r\\n    address[] memory path = new address[](2);\\r\\n    path[0] = uniswapV2Router.WETH();\\r\\n    path[1] = address(this);\\r\\n\\r\\n    uint256 _deadBalBefore = balanceOf(deadAddress);\\r\\n    // make the swap\\r\\n    uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\r\\n      value: amount\\r\\n    }(\\r\\n      0, // accept any amount of Tokens\\r\\n      path,\\r\\n      deadAddress, // Burn address\\r\\n      block.timestamp\\r\\n    );\\r\\n\\r\\n    emit SwapETHForTokens(amount, path);\\r\\n    emit Transfer(\\r\\n      address(this),\\r\\n      deadAddress,\\r\\n      balanceOf(deadAddress) - _deadBalBefore\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\\r\\n    // split the contract balance into halves\\r\\n    uint256 half = contractTokenBalance / 2;\\r\\n    uint256 otherHalf = contractTokenBalance - half;\\r\\n\\r\\n    // capture the contract's current ETH balance.\\r\\n    // this is so that we can capture exactly the amount of ETH that the\\r\\n    // swap creates, and not make the liquidity event include any ETH that\\r\\n    // has been manually sent to the contract\\r\\n    uint256 initialBalance = address(this).balance;\\r\\n\\r\\n    // swap tokens for ETH\\r\\n    swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\\r\\n\\r\\n    // how much ETH did we just swap into taking buyBack balance into consideration?\\r\\n    uint256 newBalance = address(this).balance - initialBalance;\\r\\n\\r\\n    // add liquidity to uniswap\\r\\n    addLiquidity(otherHalf, newBalance);\\r\\n\\r\\n    emit SwapAndLiquify(half, newBalance, otherHalf);\\r\\n  }\\r\\n\\r\\n  function swapTokensForEth(uint256 tokenAmount) private {\\r\\n    // generate the uniswap pair path of token -> weth\\r\\n    address[] memory path = new address[](2);\\r\\n    path[0] = address(this);\\r\\n    path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n    // make the swap\\r\\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n      tokenAmount,\\r\\n      0, // accept any amount of ETH\\r\\n      path,\\r\\n      address(this),\\r\\n      block.timestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n    // approve token transfer to cover all possible scenarios\\r\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n    // add the liquidity\\r\\n    uniswapV2Router.addLiquidityETH{ value: ethAmount }(\\r\\n      address(this),\\r\\n      tokenAmount,\\r\\n      0, // slippage is unavoidable\\r\\n      0, // slippage is unavoidable\\r\\n      address(this),\\r\\n      block.timestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  // this method is responsible for taking all fee, if takeFee is true\\r\\n  function _tokenTransfer(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 tAmount,\\r\\n    bool takeFee\\r\\n  ) private {\\r\\n    if (!takeFee) {\\r\\n      removeAllFee();\\r\\n    }\\r\\n\\r\\n    // tValues[0] -> tTransferAmount -> transfer amount\\r\\n    // tValues[1] -> tFee -> holders fee amount\\r\\n    // tValues[2] -> tLiquidity -> liquidity fee amount\\r\\n    // tValues[3] -> tBuyBack -> buyBack fee amount\\r\\n    uint256[4] memory tValues = _getTValues(tAmount);\\r\\n    uint256 currentRate = _getRate();\\r\\n    if (takeFee) {\\r\\n      _rBuyBackTokenCount += (tValues[3] * currentRate);\\r\\n      if (!_isUniswapV2Pair[sender] && _rBuyBackTokenCount > 0) {\\r\\n        uint256 _tBuyBackTokenCount = _rBuyBackTokenCount / currentRate;\\r\\n        address contractAddress = address(this);\\r\\n        _rOwned[contractAddress] += _rBuyBackTokenCount;\\r\\n        emit Transfer(sender, contractAddress, _tBuyBackTokenCount);\\r\\n        uint256 _balBefore = contractAddress.balance;\\r\\n        swapTokensForEth(_tBuyBackTokenCount);\\r\\n        _buyBackEthBalance += contractAddress.balance - _balBefore;\\r\\n        _rBuyBackTokenCount = 0;\\r\\n      }\\r\\n\\r\\n      _takeLiquidity(tValues[2], tValues[2] * currentRate);\\r\\n      _reflectFee(tValues[1], tValues[1] * currentRate);\\r\\n    }\\r\\n    _rOwned[sender] -= (tAmount * currentRate);\\r\\n    _rOwned[recipient] += (tValues[0] * currentRate);\\r\\n    if (_isExcluded[sender]) {\\r\\n      _tOwned[sender] -= tAmount;\\r\\n    }\\r\\n    if (_isExcluded[recipient]) {\\r\\n      _tOwned[recipient] += tValues[0];\\r\\n    }\\r\\n    emit Transfer(sender, recipient, tValues[0]);\\r\\n\\r\\n    if (!takeFee) {\\r\\n      restoreAllFee();\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyBackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addUniswapV2PairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountETH\",\"type\":\"uint256\"}],\"name\":\"buyBackAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isUniswapV2PairAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeUniswapV2PairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setMaxSecondsBetweenBuySell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingUnlockCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStakingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Momento", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}