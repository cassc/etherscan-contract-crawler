{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: 1listbep20.sol\r\n\r\n\r\npragma solidity >=0.8.15;\r\n\r\n\r\n\r\n\r\ncontract List_any_bep20 is Ownable, Pausable {\r\n  \r\n    address public rewardToken;\r\n    uint public deployedTS;\r\n    uint public rewardsPerDay;\r\n    uint public requiredTokensBalance;\r\n    uint public limitOfVerificationTokens;\r\n\r\n//Mappings & Arrays\r\n\r\n    mapping(address => uint) public startTS;\r\n    mapping(address => bool) public userBlockedFromRewards;\r\n    address[] public verificationTokens;\r\n    address[] public participants;\r\n\r\n//Events\r\n\r\n    event addVerificationTokensAddress(address _newAddress, address _user);\r\n    event deleteVerificationTokensAddress(address _delaeteAddress, address _user);\r\n    event changeLimitOfVerificationTokens(uint _lastLimitOfVerificationTokens, uint _newLimitOfVerificationTokens);\r\n    event changeRequiredTokensBalance(uint _lastRequiredTokensBalance, uint _newRequiredTokensBalance);\r\n\r\n//Modifier\r\n\r\n    ///@dev Check if the user has enough balance in the allowed token list\r\n    modifier checkAccountBalance() {\r\n        bool _userHasBalance;\r\n        for(uint i = 0; i < verificationTokens.length; i++){\r\n            uint _userBalance = IERC20(verificationTokens[i]).balanceOf(msg.sender);\r\n\r\n            if(_userBalance >= requiredTokensBalance && _userHasBalance == false){\r\n                _userHasBalance = true;\r\n            }\r\n        }\r\n        require(_userHasBalance, \"Error: User has insufficient balance\");\r\n        _;\r\n    }\r\n\r\n    ///@dev Check if the user is blocked from receiving rewards\r\n    modifier checkIfUserAreBlocked() {\r\n        require(!userBlockedFromRewards[msg.sender], \"Error: User blocked from rewards\");\r\n        _;\r\n    }\r\n\r\n//Constructor\r\n\r\n    /**\r\n        @param _verificationToken First token in the list that will be used to validate users\r\n        @param _rewardToken Token that will be used to give rewards\r\n        @param _requiredTokensBalance Minimum amount of token that the user must meet to receive rewards\r\n        @param _limitOfVerificationTokens Maximum limit of tokens that can be added to the list of validation tokens\r\n    */\r\n    constructor(\r\n        address _verificationToken, \r\n        address _rewardToken, \r\n        uint _requiredTokensBalance, \r\n        uint _limitOfVerificationTokens\r\n    ) {\r\n\r\n        rewardsPerDay = 12e18; // wei, 18 decimals\r\n\r\n        rewardToken = _rewardToken;\r\n        limitOfVerificationTokens = _limitOfVerificationTokens;\r\n        requiredTokensBalance = _requiredTokensBalance * 10**18;\r\n\r\n        verificationTokens.push(_verificationToken);\r\n        deployedTS = block.timestamp;\r\n    }\r\n\r\n//Public Functions\r\n\r\n    ///@notice Register the user in the list of rewards\r\n    function addMe() public whenNotPaused checkAccountBalance {\r\n        require(startTS[msg.sender] == 0, \"Error: This address is already registered\");\r\n\r\n        participants.push(msg.sender);\r\n        startTS[msg.sender] = block.timestamp; \r\n    }\r\n\r\n    ///@notice Claim the rewards\r\n    function claimRewards() public whenNotPaused checkIfUserAreBlocked {\r\n        require(startTS[msg.sender] != 0, \"Error: No record of user account\");\r\n\r\n        uint rewardAmount = (block.timestamp - startTS[msg.sender]) * rewardsPerDay / 1 days / participants.length;\r\n        startTS[msg.sender] = block.timestamp;\r\n        IERC20(rewardToken).transfer(msg.sender, rewardAmount);\r\n    }\r\n\r\n    ///@dev Allowed users will be able to add tokens which will be used to validate users\r\n    function addVerificationTokenAddress( address _newVerificationTokenAddress ) public whenNotPaused {\r\n        require(verificationTokens.length < limitOfVerificationTokens, \"Error: No more addresses allowed\");\r\n\r\n        for(uint i = 0; i < verificationTokens.length; i++){\r\n            require(_newVerificationTokenAddress != verificationTokens[i], \"Error: Address already registered\");\r\n        }\r\n\r\n        verificationTokens.push(_newVerificationTokenAddress);\r\n\r\n        emit addVerificationTokensAddress(_newVerificationTokenAddress, msg.sender);\r\n    }\r\n\r\n//View Functions\r\n\r\n    ///@notice Reflects accumulated rewards\r\n    function userEarnings(address _user) public view returns(uint256) {\r\n        require(!userBlockedFromRewards[_user], \"Error: User blocked from rewards\");\r\n\r\n        if (startTS[_user] == 0){\r\n            return 0;\r\n        } \r\n\r\n        uint rewardAmount = (block.timestamp - startTS[_user]) * rewardsPerDay / 1 days / participants.length;\r\n        return rewardAmount;\r\n    }\r\n\r\n    ///@notice Returns the number of users registered in the contract\r\n    function getNumberOfParticipants() public view returns(uint){\r\n        return participants.length;\r\n    }\r\n\r\n//Update Contract Functions\r\n\r\n    /**\r\n        @notice Update the list of users who can claim rewards, all this by validating whether they meet the minimum \r\n        amount of token established in the token list.\r\n    */\r\n    function updateDataInContract() external whenNotPaused {\r\n        for(uint i = 0; i < participants.length; i++){\r\n\r\n            bool _userHasBalance;\r\n            for(uint j = 0; j < verificationTokens.length; j++){\r\n                uint _userBalance = IERC20(verificationTokens[j]).balanceOf(participants[i]);\r\n\r\n                if(_userBalance >= requiredTokensBalance && _userHasBalance == false){\r\n                    _userHasBalance = true;\r\n                }\r\n            }\r\n            \r\n            if(!_userHasBalance){\r\n                userBlockedFromRewards[participants[i]] = true;\r\n                startTS[participants[i]] = block.timestamp;\r\n            }else{\r\n                userBlockedFromRewards[participants[i]] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n//Only Owner Functions\r\n\r\n    /**\r\n        @dev Will remove some token address from the list of validator tokens\r\n        @param _index Position of the token address within the list\r\n    */\r\n    function deleteVerificationTokenAddress(uint _index) public onlyOwner{\r\n        require(\r\n            verificationTokens.length > 0 && _index < verificationTokens.length, \r\n            \"Error: This address cannot be deleted\"\r\n        );\r\n\r\n        address _deleteAddress = verificationTokens[_index];\r\n        for(uint i = _index; i < verificationTokens.length-1; i++){\r\n            verificationTokens[i] = verificationTokens[i+1];      \r\n        }\r\n        \r\n        verificationTokens.pop();\r\n\r\n        emit deleteVerificationTokensAddress(_deleteAddress, msg.sender);\r\n    }\r\n\r\n    ///@dev The owner can change the minimum amount of token that a user must have to receive a reward\r\n    function setRequiredTokensBalance(uint _newRequiredTokensBalance) public onlyOwner{\r\n        require(_newRequiredTokensBalance > 0, \"Error: The number must be greater than zero\");\r\n        require(\r\n            _newRequiredTokensBalance != requiredTokensBalance, \r\n            \"Error: The number must be different from the previous number\"\r\n        );\r\n\r\n        uint _lastRequiredTokensBalance = requiredTokensBalance;\r\n        requiredTokensBalance = _newRequiredTokensBalance * 10**18;\r\n\r\n        emit changeRequiredTokensBalance(_lastRequiredTokensBalance, requiredTokensBalance);\r\n    }\r\n\r\n    ///@dev The owner can modify the maximum token limit that the list of validation tokens can accept.\r\n    function setLimitOfVerificationTokens(uint _newLimitOfVerificationTokens) public onlyOwner{\r\n        require(_newLimitOfVerificationTokens > 0, \"Error: The number must be greater than zero\");\r\n        require(\r\n            _newLimitOfVerificationTokens != limitOfVerificationTokens, \r\n            \"Error: The number must be different from the previous number\"\r\n        );\r\n\r\n        uint _lastLimitOfVerificationTokens = limitOfVerificationTokens;\r\n        limitOfVerificationTokens = _newLimitOfVerificationTokens;\r\n\r\n        emit changeLimitOfVerificationTokens(_lastLimitOfVerificationTokens, limitOfVerificationTokens);\r\n    }\r\n\r\n    ///@dev The owner will pause the main functions of the contract\r\n    function pauseContract() public onlyOwner{\r\n        _pause();\r\n    }\r\n\r\n    ///@dev The owner will unpause the main functions of the contract\r\n    function unpauseContract() public onlyOwner{\r\n        _unpause();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verificationToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requiredTokensBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitOfVerificationTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addVerificationTokensAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastLimitOfVerificationTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLimitOfVerificationTokens\",\"type\":\"uint256\"}],\"name\":\"changeLimitOfVerificationTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastRequiredTokensBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newRequiredTokensBalance\",\"type\":\"uint256\"}],\"name\":\"changeRequiredTokensBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_delaeteAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"deleteVerificationTokensAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addMe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVerificationTokenAddress\",\"type\":\"address\"}],\"name\":\"addVerificationTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"deleteVerificationTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployedTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitOfVerificationTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredTokensBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimitOfVerificationTokens\",\"type\":\"uint256\"}],\"name\":\"setLimitOfVerificationTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRequiredTokensBalance\",\"type\":\"uint256\"}],\"name\":\"setRequiredTokensBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"startTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDataInContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBlockedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"verificationTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "List_any_bep20", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004ae0fb63c986a9a5d0d98c987848be43690468a50000000000000000000000004ae0fb63c986a9a5d0d98c987848be43690468a5000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000007d0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1febd0e95bd25ac0a361075eb4c9984ccc4b2718a01b46f26a9d667c6fadc685"}