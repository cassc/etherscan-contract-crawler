{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MintClubZapV5.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./lib/IUniswapV2Router02.sol\\\";\\nimport \\\"./lib/IUniswapV2Factory.sol\\\";\\nimport \\\"./lib/IMintClubBond.sol\\\";\\nimport \\\"./lib/IWETH.sol\\\";\\nimport \\\"./lib/Math.sol\\\";\\n\\n/**\\n* @title MintClubZapV5 extension contract (5.0.0)\\n*/\\n\\ncontract MintClubZapV5 is Context {\\n    using SafeERC20 for IERC20;\\n\\n    // Copied from MintClubBond\\n    uint256 private constant BUY_TAX = 3;\\n    uint256 private constant SELL_TAX = 13;\\n    uint256 private constant MAX_TAX = 1000;\\n\\n    address private constant DEFAULT_BENEFICIARY = 0x82CA6d313BffE56E9096b16633dfD414148D66b1;\\n\\n    // MARK: - Mainnet configs\\n\\n    IUniswapV2Factory private constant PANCAKE_FACTORY = IUniswapV2Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\\n    IUniswapV2Router02 private constant PANCAKE_ROUTER = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    IMintClubBond private constant BOND = IMintClubBond(0x8BBac0C7583Cc146244a18863E708bFFbbF19975);\\n    uint256 private constant DEAD_LINE = 0xf000000000000000000000000000000000000000000000000000000000000000;\\n    address private constant MINT_CONTRACT = address(0x1f3Af095CDa17d63cad238358837321e95FC5915);\\n    address private constant WBNB_CONTRACT = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\\n\\n    // MARK: - Testnet configs\\n\\n    // IUniswapV2Factory private constant PANCAKE_FACTORY = IUniswapV2Factory(0x6725F303b657a9451d8BA641348b6761A6CC7a17);\\n    // IUniswapV2Router02 private constant PANCAKE_ROUTER = IUniswapV2Router02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);\\n    // IMintClubBond private constant BOND = IMintClubBond(0xB9B492B5D470ae0eB2BB07a87062EC97615d8b09);\\n    // uint256 private constant DEAD_LINE = 0xf000000000000000000000000000000000000000000000000000000000000000;\\n    // address private constant MINT_CONTRACT = address(0x4d24BF63E5d6E03708e2DFd5cc8253B3f22FE913);\\n    // address private constant WBNB_CONTRACT = address(0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd);\\n\\n    constructor() {\\n        // Approve infinite MINT tokens spendable by bond contract\\n        // MINT will be stored temporarily during the swap transaction\\n        _approveToken(MINT_CONTRACT, address(BOND));\\n    }\\n\\n    receive() external payable {}\\n\\n    // MINT and others (parameter) -> Mint Club Tokens\\n    function estimateZapIn(address from, address to, uint256 fromAmount) external view returns (uint256 tokensToReceive, uint256 mintTokenTaxAmount) {\\n        uint256 mintAmount;\\n\\n        if (from == MINT_CONTRACT) {\\n            mintAmount = fromAmount;\\n        } else {\\n            address[] memory path = _getPathToMint(from);\\n\\n            mintAmount = PANCAKE_ROUTER.getAmountsOut(fromAmount, path)[path.length - 1];\\n        }\\n\\n        return BOND.getMintReward(to, mintAmount);\\n    }\\n\\n    function estimateZapInInitial(address from, uint256 fromAmount) external view returns (uint256 tokensToReceive, uint256 mintTokenTaxAmount) {\\n        uint256 mintAmount;\\n\\n        if (from == MINT_CONTRACT) {\\n            mintAmount = fromAmount;\\n        } else {\\n            address[] memory path = _getPathToMint(from);\\n\\n            mintAmount = PANCAKE_ROUTER.getAmountsOut(fromAmount, path)[path.length - 1];\\n        }\\n\\n        uint256 taxAmount = mintAmount * BUY_TAX / MAX_TAX;\\n        uint256 newSupply = Math.floorSqrt(2 * 1e18 * (mintAmount - taxAmount));\\n\\n        return (newSupply, taxAmount);\\n    }\\n\\n    // Get required MINT token amount to buy X amount of Mint Club tokens\\n    function getReserveAmountToBuy(address tokenAddress, uint256 tokensToBuy) public view returns (uint256) {\\n        IERC20 token = IERC20(tokenAddress);\\n\\n        uint256 newTokenSupply = token.totalSupply() + tokensToBuy;\\n        uint256 reserveRequired = (newTokenSupply ** 2 - token.totalSupply() ** 2) / (2 * 1e18);\\n        reserveRequired = reserveRequired * MAX_TAX / (MAX_TAX - BUY_TAX); // Deduct tax amount\\n\\n        return reserveRequired;\\n    }\\n\\n    // MINT and others -> Mint Club Tokens (parameter)\\n    function estimateZapInReverse(address from, address to, uint256 tokensToReceive) external view returns (uint256 fromAmountRequired, uint256 mintTokenTaxAmount) {\\n        uint256 reserveRequired = getReserveAmountToBuy(to, tokensToReceive);\\n\\n        if (from == MINT_CONTRACT) {\\n            fromAmountRequired = reserveRequired;\\n        } else {\\n            address[] memory path = _getPathToMint(from);\\n\\n            fromAmountRequired = PANCAKE_ROUTER.getAmountsIn(reserveRequired, path)[0];\\n        }\\n\\n        mintTokenTaxAmount = reserveRequired * BUY_TAX / MAX_TAX;\\n    }\\n\\n    function estimateZapInReverseInitial(address from, uint256 tokensToReceive) external view returns (uint256 fromAmountRequired, uint256 mintTokenTaxAmount) {\\n        uint256 reserveRequired = tokensToReceive ** 2 / 2e18;\\n\\n        if (from == MINT_CONTRACT) {\\n            fromAmountRequired = reserveRequired;\\n        } else {\\n            address[] memory path = _getPathToMint(from);\\n\\n            fromAmountRequired = PANCAKE_ROUTER.getAmountsIn(reserveRequired, path)[0];\\n        }\\n\\n        mintTokenTaxAmount = reserveRequired * BUY_TAX / MAX_TAX;\\n    }\\n\\n    // Mint Club Tokens (parameter) -> MINT and others\\n    function estimateZapOut(address from, address to, uint256 fromAmount) external view returns (uint256 toAmountToReceive, uint256 mintTokenTaxAmount) {\\n        uint256 mintToRefund;\\n        (mintToRefund, mintTokenTaxAmount) = BOND.getBurnRefund(from, fromAmount);\\n\\n        if (to == MINT_CONTRACT) {\\n            toAmountToReceive = mintToRefund;\\n        } else {\\n            address[] memory path = _getPathFromMint(to);\\n\\n            toAmountToReceive = PANCAKE_ROUTER.getAmountsOut(mintToRefund, path)[path.length - 1];\\n        }\\n    }\\n\\n    // Get amount of Mint Club tokens to receive X amount of MINT tokens\\n    function getTokenAmountFor(address tokenAddress, uint256 mintTokenAmount) public view returns (uint256) {\\n        IERC20 token = IERC20(tokenAddress);\\n\\n        uint256 reserveAfterSell = BOND.reserveBalance(tokenAddress) - mintTokenAmount;\\n        uint256 supplyAfterSell = Math.floorSqrt(2 * 1e18 * reserveAfterSell);\\n\\n        return token.totalSupply() - supplyAfterSell;\\n    }\\n\\n    // Mint Club Tokens -> MINT and others (parameter)\\n    function estimateZapOutReverse(address from, address to, uint256 toAmount) external view returns (uint256 tokensRequired, uint256 mintTokenTaxAmount) {\\n        uint256 mintTokenAmount;\\n        if (to == MINT_CONTRACT) {\\n            mintTokenAmount = toAmount;\\n        } else {\\n            address[] memory path = _getPathFromMint(to);\\n            mintTokenAmount = PANCAKE_ROUTER.getAmountsIn(toAmount, path)[0];\\n        }\\n\\n        mintTokenTaxAmount = mintTokenAmount * SELL_TAX / MAX_TAX;\\n        tokensRequired = getTokenAmountFor(from, mintTokenAmount + mintTokenTaxAmount);\\n    }\\n\\n    function zapInBNB(address to, uint256 minAmountOut, address beneficiary) public payable {\\n        // First, wrap BNB to WBNB\\n        IWETH(WBNB_CONTRACT).deposit{value: msg.value}();\\n\\n        // Swap WBNB to MINT\\n        uint256 mintAmount = _swap(WBNB_CONTRACT, MINT_CONTRACT, msg.value);\\n\\n        // Finally, buy target tokens with swapped MINT\\n        _buyMintClubTokenAndSend(to, mintAmount, minAmountOut, _getBeneficiary(beneficiary));\\n    }\\n\\n    function zapIn(address from, address to, uint256 amountIn, uint256 minAmountOut, address beneficiary) public {\\n        // First, pull tokens to this contract\\n        IERC20 token = IERC20(from);\\n        require(token.allowance(_msgSender(), address(this)) >= amountIn, 'NOT_ENOUGH_ALLOWANCE');\\n        IERC20(from).safeTransferFrom(_msgSender(), address(this), amountIn);\\n\\n        // Swap to MINT if necessary\\n        uint256 mintAmount;\\n        if (from == MINT_CONTRACT) {\\n            mintAmount = amountIn;\\n        } else {\\n            mintAmount = _swap(from, MINT_CONTRACT, amountIn);\\n        }\\n\\n        // Finally, buy target tokens with swapped MINT\\n        _buyMintClubTokenAndSend(to, mintAmount, minAmountOut, _getBeneficiary(beneficiary));\\n    }\\n\\n    function createAndZapIn(string memory name, string memory symbol, uint256 maxTokenSupply, address token, uint256 tokenAmount, uint256 minAmountOut, address beneficiary) external {\\n        address newToken = BOND.createToken(name, symbol, maxTokenSupply);\\n\\n        // We need `minAmountOut` here token->MINT can be front ran and slippage my happen\\n        zapIn(token, newToken, tokenAmount, minAmountOut, _getBeneficiary(beneficiary));\\n    }\\n\\n    function createAndZapInBNB(string memory name, string memory symbol, uint256 maxTokenSupply, uint256 minAmountOut, address beneficiary) external payable {\\n        address newToken = BOND.createToken(name, symbol, maxTokenSupply);\\n\\n        zapInBNB(newToken, minAmountOut, _getBeneficiary(beneficiary));\\n    }\\n\\n    function zapOut(address from, address to, uint256 amountIn, uint256 minAmountOut, address beneficiary) external {\\n        uint256 mintAmount = _receiveAndSwapToMint(from, amountIn, _getBeneficiary(beneficiary));\\n\\n        // Swap to MINT if necessary\\n        IERC20 toToken;\\n        uint256 amountOut;\\n        if (to == MINT_CONTRACT) {\\n            toToken = IERC20(MINT_CONTRACT);\\n            amountOut = mintAmount;\\n        } else {\\n            toToken = IERC20(to);\\n            amountOut = _swap(MINT_CONTRACT, to, mintAmount);\\n        }\\n\\n        // Check slippage limit\\n        require(amountOut >= minAmountOut, 'ZAP_SLIPPAGE_LIMIT_EXCEEDED');\\n\\n        // Send the token to the user\\n        require(toToken.transfer(_msgSender(), amountOut), 'BALANCE_TRANSFER_FAILED');\\n    }\\n\\n    function zapOutBNB(address from, uint256 amountIn, uint256 minAmountOut, address beneficiary) external {\\n        uint256 mintAmount = _receiveAndSwapToMint(from, amountIn, _getBeneficiary(beneficiary));\\n\\n        // Swap to MINT to BNB\\n        uint256 amountOut = _swap(MINT_CONTRACT, WBNB_CONTRACT, mintAmount);\\n        IWETH(WBNB_CONTRACT).withdraw(amountOut);\\n\\n        // Check slippage limit\\n        require(amountOut >= minAmountOut, 'ZAP_SLIPPAGE_LIMIT_EXCEEDED');\\n\\n        // TODO: FIXME!!!!!\\n\\n        // Send BNB to user\\n        (bool sent, ) = _msgSender().call{value: amountOut}(\\\"\\\");\\n        require(sent, \\\"BNB_TRANSFER_FAILED\\\");\\n    }\\n\\n    function _buyMintClubTokenAndSend(address tokenAddress, uint256 mintAmount, uint256 minAmountOut, address beneficiary) internal {\\n        // Finally, buy target tokens with swapped MINT (can be reverted due to slippage limit)\\n        BOND.buy(tokenAddress, mintAmount, minAmountOut, _getBeneficiary(beneficiary));\\n\\n        // BOND.buy doesn't return any value, so we need to calculate the purchased amount\\n        IERC20 token = IERC20(tokenAddress);\\n        require(token.transfer(_msgSender(), token.balanceOf(address(this))), 'BALANCE_TRANSFER_FAILED');\\n    }\\n\\n    function _receiveAndSwapToMint(address from, uint256 amountIn, address beneficiary) internal returns (uint256) {\\n        // First, pull tokens to this contract\\n        IERC20 token = IERC20(from);\\n        require(token.allowance(_msgSender(), address(this)) >= amountIn, 'NOT_ENOUGH_ALLOWANCE');\\n        IERC20(from).safeTransferFrom(_msgSender(), address(this), amountIn);\\n\\n        // Approve infinitely to this contract\\n        if (token.allowance(address(this), address(BOND)) < amountIn) {\\n            require(token.approve(address(BOND), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), 'APPROVE_FAILED');\\n        }\\n\\n        // Sell tokens to MINT\\n        // NOTE: ignore minRefund (set as 0) for now, we should check it later on zapOut\\n        BOND.sell(from, amountIn, 0, _getBeneficiary(beneficiary));\\n        IERC20 mintToken = IERC20(MINT_CONTRACT);\\n\\n        return mintToken.balanceOf(address(this));\\n    }\\n\\n\\n    function _getPathToMint(address from) internal pure returns (address[] memory path) {\\n        if (from == WBNB_CONTRACT) {\\n            path = new address[](2);\\n            path[0] = WBNB_CONTRACT;\\n            path[1] = MINT_CONTRACT;\\n        } else {\\n            path = new address[](3);\\n            path[0] = from;\\n            path[1] = WBNB_CONTRACT;\\n            path[2] = MINT_CONTRACT;\\n        }\\n    }\\n\\n    function _getPathFromMint(address to) internal pure returns (address[] memory path) {\\n        if (to == WBNB_CONTRACT) {\\n            path = new address[](2);\\n            path[0] = MINT_CONTRACT;\\n            path[1] = WBNB_CONTRACT;\\n        } else {\\n            path = new address[](3);\\n            path[0] = MINT_CONTRACT;\\n            path[1] = WBNB_CONTRACT;\\n            path[2] = to;\\n        }\\n    }\\n\\n    function _approveToken(address tokenAddress, address spender) internal {\\n        IERC20 token = IERC20(tokenAddress);\\n        if (token.allowance(address(this), spender) > 0) {\\n            return;\\n        } else {\\n            token.safeApprove(spender, type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n        @notice This function is used to swap ERC20 <> ERC20\\n        @param from The token address to swap from.\\n        @param to The token address to swap to.\\n        @param amount The amount of tokens to swap\\n        @return boughtAmount The quantity of tokens bought\\n    */\\n    function _swap(address from, address to, uint256 amount) internal returns (uint256 boughtAmount) {\\n        if (from == to) {\\n            return amount;\\n        }\\n\\n        _approveToken(from, address(PANCAKE_ROUTER));\\n\\n        address[] memory path;\\n\\n        if (to == MINT_CONTRACT) {\\n            path = _getPathToMint(from);\\n        } else if (from == MINT_CONTRACT) {\\n            path = _getPathFromMint(to);\\n        } else {\\n            revert('INVALID_PATH');\\n        }\\n\\n        // Check if there's a liquidity pool for paths\\n        // path.length is always 2 or 3\\n        for (uint8 i = 0; i < path.length - 1; i++) {\\n            address pair = PANCAKE_FACTORY.getPair(path[i], path[i + 1]);\\n            require(pair != address(0), 'INVALID_SWAP_PATH');\\n        }\\n\\n        boughtAmount = PANCAKE_ROUTER.swapExactTokensForTokens(\\n            amount,\\n            1, // amountOutMin\\n            path,\\n            address(this), // to: Recipient of the output tokens\\n            DEAD_LINE\\n        )[path.length - 1];\\n\\n        require(boughtAmount > 0, 'SWAP_ERROR');\\n    }\\n\\n    // Prevent self referral\\n    function _getBeneficiary(address beneficiary) internal view returns (address) {\\n        if (beneficiary == address(0) || beneficiary == _msgSender()) {\\n           return DEFAULT_BENEFICIARY;\\n        } else {\\n            return beneficiary;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\ninterface IUniswapV2Router02 {\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external\\n        returns (\\n            uint256[] memory amounts\\n        );\\n\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] memory path\\n    ) external view\\n        returns (\\n            uint[] memory amounts\\n        );\\n\\n    function getAmountsIn(\\n        uint amountOut,\\n        address[] memory path\\n    ) external view\\n        returns (\\n            uint[] memory amounts\\n        );\\n}\"\r\n    },\r\n    \"contracts/lib/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\ninterface IUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/IMintClubBond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\ninterface IMintClubBond {\\n    function reserveBalance(\\n        address tokenAddress\\n    ) external view returns (\\n        uint256 reserveBalance\\n    );\\n\\n    function getMintReward(\\n        address tokenAddress,\\n        uint256 reserveAmount\\n    ) external view returns (\\n        uint256 toMint, // token amount to be minted\\n        uint256 taxAmount\\n    );\\n\\n    function getBurnRefund(\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    ) external view returns (\\n        uint256 mintToRefund,\\n        uint256 mintTokenTaxAmount\\n    );\\n\\n    function buy(\\n        address tokenAddress,\\n        uint256 reserveAmount,\\n        uint256 minReward,\\n        address beneficiary\\n    ) external;\\n\\n    function sell(\\n        address tokenAddress,\\n        uint256 tokenAmount,\\n        uint256 minRefund,\\n        address beneficiary\\n    ) external;\\n\\n    function createToken(\\n        string memory name,\\n        string memory symbol,\\n        uint256 maxTokenSupply\\n    ) external returns (\\n        address tokenAddress\\n    );\\n}\"\r\n    },\r\n    \"contracts/lib/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\"\r\n    },\r\n    \"contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nlibrary Math {\\n    /**\\n     * @dev returns the largest integer smaller than or equal to the square root of a positive integer\\n     *\\n     * @param _num a positive integer\\n     *\\n     * @return the largest integer smaller than or equal to the square root of the positive integer\\n     */\\n    function floorSqrt(uint256 _num) internal pure returns (uint256) {\\n        uint256 x = _num / 2 + 1;\\n        uint256 y = (x + _num / x) / 2;\\n        while (x > y) {\\n            x = y;\\n            y = (x + _num / x) / 2;\\n        }\\n        return x;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"createAndZapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"createAndZapInBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"}],\"name\":\"estimateZapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTokenTaxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"}],\"name\":\"estimateZapInInitial\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTokenTaxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensToReceive\",\"type\":\"uint256\"}],\"name\":\"estimateZapInReverse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fromAmountRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTokenTaxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensToReceive\",\"type\":\"uint256\"}],\"name\":\"estimateZapInReverseInitial\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fromAmountRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTokenTaxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"}],\"name\":\"estimateZapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toAmountToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTokenTaxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"name\":\"estimateZapOutReverse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTokenTaxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensToBuy\",\"type\":\"uint256\"}],\"name\":\"getReserveAmountToBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintTokenAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"zapInBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"zapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"zapOutBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MintClubZapV5", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}