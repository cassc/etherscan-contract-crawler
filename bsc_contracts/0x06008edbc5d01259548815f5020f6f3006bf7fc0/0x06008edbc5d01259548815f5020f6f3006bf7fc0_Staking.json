{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n}\r\n\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface IUniRouter02 is IUniRouter01 {\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IToken {\r\n     /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n}\r\n\r\ncontract Staking is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // The address of the smart chef factory\r\n    address public POOL_FACTORY;\r\n\r\n    // Whether it is initialized\r\n    bool public isInitialized;\r\n    uint256 public duration = 365; // 365 days\r\n\r\n    // The block number when staking starts.\r\n    uint256 public startBlock;\r\n    // The block number when staking ends.\r\n    uint256 public bonusEndBlock;\r\n\r\n\r\n    // swap router and path, slipPage\r\n    uint256 public slippageFactor = 950; // 5% default slippage tolerance\r\n    uint256 public constant slippageFactorUL = 995;\r\n\r\n    address public uniRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address[] public earnedToStakedPath;\r\n\r\n    address public walletA;\r\n\r\n    // The precision factor\r\n    uint256 public PRECISION_FACTOR;\r\n    uint256 public PRECISION_FACTOR_REFLECTION;\r\n\r\n    // The staked token\r\n    IERC20 public stakingToken = IERC20(0x9cbB03eFfD6FB7d79c9baB1b0cEAF4232e957521);\r\n    // The earned token\r\n    IERC20 public earnedToken = IERC20(0x0CDec6a84Ed1eA7F66e989bfbE2B0F67b244178C);\r\n    // The reflection token\r\n    IERC20 public ReflectionToken = IERC20(0x9cbB03eFfD6FB7d79c9baB1b0cEAF4232e957521);\r\n\r\n\r\n    // Accrued token per share\r\n    uint256 public accReflectionPerShare;\r\n\r\n    uint256 public totalStaked;\r\n\r\n    uint256 private totalEarned;\r\n    uint256 private totalReflections;\r\n    uint256 private reflectionDebt;\r\n\r\n\r\n    struct Lockup {\r\n        uint8 stakeType;\r\n        uint256 duration;\r\n        uint256 withdrawFee;\r\n        uint256 rate;\r\n        uint256 accTokenPerShare;\r\n        uint256 lastRewardBlock;\r\n        uint256 totalStaked;\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // How many staked tokens the user has provided\r\n        uint256 locked;\r\n        uint256 available;\r\n    }\r\n\r\n    struct Stake {\r\n        uint8   stakeType;\r\n        uint256 amount;     // amount to stake\r\n        uint256 duration;   // the lockup duration of the stake\r\n        uint256 end;        // when does the staking period end\r\n        uint256 rewardDebt; // Reward debt\r\n        uint256 reflectionDebt; //Reflection debt\r\n    }\r\n    uint256 constant MAX_STAKES = 256;\r\n\r\n    Lockup[] public lockups;\r\n    mapping(address => Stake[]) public userStakes;\r\n    mapping(address => UserInfo) public userStaked;\r\n\r\n    event Deposit(address indexed user, uint256 stakeType, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 stakeType, uint256 amount);\r\n\r\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\r\n    event LockupUpdated(uint8 _type, uint256 _duration, uint256 _fee1, uint256 _rate);\r\n    event RewardsStop(uint256 blockNumber);\r\n\r\n\r\n    constructor() {\r\n        POOL_FACTORY = msg.sender;\r\n    }\r\n\r\n    /*\r\n     * @notice Initialize the contract\r\n     * @param _stakingToken: staked token address\r\n     * @param _earnedToken: earned token address\r\n     * @param _reflection Token: reflection token address\r\n     * @param _uniRouter: uniswap router address for swap tokens\r\n     */\r\n    function initialize() external {\r\n        require(!isInitialized, \"Already initialized\");\r\n        require(msg.sender == POOL_FACTORY, \"Not factory\");\r\n\r\n        // Make this contract initialized\r\n        isInitialized = true;\r\n\r\n\r\n        walletA = msg.sender;\r\n\r\n        uint256 decimalsRewardToken = uint256(IToken(address(earnedToken)).decimals());\r\n        require(decimalsRewardToken < 30, \"Must be inferior to 30\");\r\n        PRECISION_FACTOR = uint256(10**(uint256(40).sub(decimalsRewardToken)));\r\n\r\n        uint256 decimalsReflectionToken = 18;\r\n        if(address(ReflectionToken) != address(0x0)) {\r\n            decimalsReflectionToken = uint256(IToken(address(ReflectionToken)).decimals());\r\n            require(decimalsReflectionToken < 30, \"Must be inferior to 30\");\r\n        }\r\n        PRECISION_FACTOR_REFLECTION = uint256(10**(uint256(40).sub(decimalsReflectionToken)));\r\n        \r\n        lockups.push(Lockup(0, 90, 1000, 10000000000000000000, 0, 0, 0)); // 10 DOGECEO per block rate\r\n        lockups.push(Lockup(1, 180, 1000, 15000000000000000000, 0, 0, 0)); // 15 DOGECEO per block rate\r\n        lockups.push(Lockup(2, 365, 1000, 20000000000000000000, 0, 0, 0)); // 20 DOGECEO per block rate\r\n        lockups.push(Lockup(3, 730, 1000, 25000000000000000000, 0, 0, 0)); // 25 DOGECEO per block rate\r\n\r\n        _resetAllowances();\r\n    }\r\n\r\n\r\n    function updateWalletA(address newWalletA) external onlyOwner {\r\n\r\n        walletA = newWalletA;\r\n    }\r\n\r\n    /*\r\n     * @notice Deposit staked tokens and collect reward tokens (if any)\r\n     * @param _amount: amount to withdraw (in earnedToken)\r\n     */\r\n    function deposit(uint256 _amount, uint8 _stakeType) external nonReentrant {\r\n        require(_amount > 0, \"Amount should be greator than 0\");\r\n        require(_stakeType < lockups.length, \"Invalid stake type\");\r\n\r\n        _updatePool(_stakeType);\r\n\r\n        UserInfo storage user = userStaked[msg.sender];\r\n        Stake[] storage stakes = userStakes[msg.sender];\r\n        Lockup storage lockup = lockups[_stakeType];\r\n\r\n        uint256 pending = 0;\r\n        uint256 pendingCompound = 0;\r\n        uint256 _pendingReflection = 0;\r\n\r\n        uint256 compounded = 0;\r\n        for(uint256 j = 0; j < stakes.length; j++) {\r\n            Stake storage stake = stakes[j];\r\n            if(stake.stakeType != _stakeType) continue;\r\n            if(stake.amount == 0) continue;\r\n\r\n            _pendingReflection = _pendingReflection.add(\r\n                stake.amount.mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION).sub(stake.reflectionDebt)\r\n            );\r\n\r\n            uint256 _pending = stake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR).sub(stake.rewardDebt);\r\n            if(stake.end > block.timestamp) {\r\n                pendingCompound = pendingCompound.add(_pending);\r\n\r\n                if(address(stakingToken) != address(earnedToken) && _pending > 0) {\r\n                    uint256 _beforeAmount = stakingToken.balanceOf(address(this));\r\n                    _safeSwap(_pending, earnedToStakedPath, address(this));\r\n                    uint256 _afterAmount = stakingToken.balanceOf(address(this));\r\n                    _pending = _afterAmount.sub(_beforeAmount);\r\n                }\r\n                compounded = compounded.add(_pending);\r\n                stake.amount = stake.amount.add(_pending);\r\n            } else {\r\n                pending = pending.add(_pending);\r\n            }\r\n            stake.rewardDebt = stake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR);\r\n            stake.reflectionDebt = stake.amount.mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION);\r\n\r\n        }\r\n\r\n        if (pending > 0) {\r\n            require(availableRewardTokens() >= pending, \"Insufficient reward tokens\");\r\n            earnedToken.safeTransfer(address(msg.sender), pending);\r\n            \r\n            if(totalEarned > pending) {\r\n                totalEarned = totalEarned.sub(pending);\r\n            } else {\r\n                totalEarned = 0;\r\n            }\r\n        }\r\n\r\n        if (pendingCompound > 0) {\r\n            require(availableRewardTokens() >= pendingCompound, \"Insufficient reward tokens\");\r\n            \r\n            if(totalEarned > pendingCompound) {\r\n                totalEarned = totalEarned.sub(pendingCompound);\r\n            } else {\r\n                totalEarned = 0;\r\n            }\r\n        }\r\n\r\n        if (_pendingReflection > 0) {\r\n            if(address(ReflectionToken) == address(0x0)) {\r\n                payable(msg.sender).transfer(_pendingReflection);\r\n            } else {\r\n                ReflectionToken.safeTransfer(address(msg.sender), _pendingReflection);\r\n            }\r\n            totalReflections = totalReflections.sub(_pendingReflection);\r\n        }\r\n\r\n\r\n        uint256 beforeAmount = stakingToken.balanceOf(address(this));\r\n        stakingToken.safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        );\r\n        uint256 afterAmount = stakingToken.balanceOf(address(this));        \r\n        uint256 realAmount = afterAmount.sub(beforeAmount);\r\n        \r\n        _addStake(_stakeType, msg.sender, lockup.duration, realAmount);\r\n\r\n        user.amount = user.amount.add(realAmount).add(compounded);\r\n        lockup.totalStaked = lockup.totalStaked.add(realAmount).add(compounded);\r\n        totalStaked = totalStaked.add(realAmount).add(compounded);\r\n\r\n        emit Deposit(msg.sender, _stakeType, realAmount.add(compounded));\r\n    }\r\n\r\n    function _addStake(uint8 _stakeType, address _account, uint256 _duration, uint256 _amount) internal {\r\n        Stake[] storage stakes = userStakes[_account];\r\n\r\n        uint256 end = block.timestamp.add(_duration.mul(1 days));\r\n        uint256 i = stakes.length;\r\n        require(i < MAX_STAKES, \"Max stakes\");\r\n\r\n        stakes.push(); // grow the array\r\n        // find the spot where we can insert the current stake\r\n        // this should make an increasing list sorted by end\r\n        while (i != 0 && stakes[i - 1].end > end) {\r\n            // shift it back one\r\n            stakes[i] = stakes[i - 1];\r\n            i -= 1;\r\n        }\r\n        \r\n        Lockup storage lockup = lockups[_stakeType];\r\n\r\n        // insert the stake\r\n        Stake storage newStake = stakes[i];\r\n        newStake.stakeType = _stakeType;\r\n        newStake.duration = _duration;\r\n        newStake.end = end;\r\n        newStake.amount = _amount;\r\n        newStake.rewardDebt = newStake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR);\r\n        newStake.reflectionDebt = newStake.amount.mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION);\r\n\r\n    }\r\n\r\n    /*\r\n     * @notice Withdraw staked tokens and collect reward tokens\r\n     * @param _amount: amount to withdraw (in earnedToken)\r\n     */\r\n    function withdraw(uint256 _amount, uint8 _stakeType) external nonReentrant {\r\n        require(_amount > 0, \"Amount should be greator than 0\");\r\n        require(_stakeType < lockups.length, \"Invalid stake type\");\r\n\r\n        _updatePool(_stakeType);\r\n\r\n        UserInfo storage user = userStaked[msg.sender];\r\n        Stake[] storage stakes = userStakes[msg.sender];\r\n        Lockup storage lockup = lockups[_stakeType];\r\n        \r\n        uint256 pending = 0;\r\n        uint256 pendingCompound = 0;\r\n        uint256 pendingReflection = 0;\r\n\r\n        uint256 compounded = 0;\r\n        uint256 remained = _amount;\r\n        for(uint256 j = 0; j < stakes.length; j++) {\r\n            Stake storage stake = stakes[j];\r\n            if(stake.stakeType != _stakeType) continue;\r\n            if(stake.amount == 0) continue;\r\n            if(remained == 0) break;\r\n\r\n            uint256 _pending = stake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR).sub(stake.rewardDebt);\r\n\r\n            uint256 _pendingReflection = stake.amount.mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION).sub(stake.reflectionDebt);\r\n            pendingReflection = pendingReflection.add(_pendingReflection);\r\n\r\n\r\n            if(stake.end > block.timestamp) {\r\n                pendingCompound = pendingCompound.add(_pending);\r\n\r\n                if(address(stakingToken) != address(earnedToken) && _pending > 0) {\r\n                    uint256 _beforeAmount = stakingToken.balanceOf(address(this));\r\n                    _safeSwap(_pending, earnedToStakedPath, address(this));\r\n                    uint256 _afterAmount = stakingToken.balanceOf(address(this));\r\n                    _pending = _afterAmount.sub(_beforeAmount);\r\n                }\r\n                compounded = compounded.add(_pending);\r\n                stake.amount = stake.amount.add(_pending);\r\n            } else {\r\n                pending = pending.add(_pending);\r\n                if(stake.amount > remained) {\r\n                    stake.amount = stake.amount.sub(remained);\r\n                    remained = 0;\r\n                } else {\r\n                    remained = remained.sub(stake.amount);\r\n                    stake.amount = 0;\r\n                }\r\n            }\r\n            stake.rewardDebt = stake.amount.mul(lockup.accTokenPerShare);\r\n            stake.rewardDebt = stake.rewardDebt.div(PRECISION_FACTOR);\r\n\r\n            stake.reflectionDebt = stake.amount.mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION);\r\n\r\n        }\r\n\r\n        if (pending > 0) {\r\n            require(availableRewardTokens() >= pending, \"Insufficient reward tokens\");\r\n            earnedToken.safeTransfer(address(msg.sender), pending);\r\n            \r\n            if(totalEarned > pending) {\r\n                totalEarned = totalEarned.sub(pending);\r\n            } else {\r\n                totalEarned = 0;\r\n            }\r\n        }\r\n\r\n        if (pendingCompound > 0) {\r\n            require(availableRewardTokens() >= pendingCompound, \"Insufficient reward tokens\");\r\n            \r\n            if(totalEarned > pendingCompound) {\r\n                totalEarned = totalEarned.sub(pendingCompound);\r\n            } else {\r\n                totalEarned = 0;\r\n            }\r\n            \r\n            emit Deposit(msg.sender, _stakeType, compounded);\r\n        }\r\n\r\n        if (pendingReflection > 0) {\r\n            if(address(ReflectionToken) == address(0x0)) {\r\n                payable(msg.sender).transfer(pendingReflection);\r\n            } else {\r\n                ReflectionToken.safeTransfer(address(msg.sender), pendingReflection);\r\n            }\r\n            totalReflections = totalReflections.sub(pendingReflection);\r\n        }\r\n\r\n        uint256 realAmount = _amount.sub(remained);\r\n        user.amount = user.amount.sub(realAmount).add(pendingCompound);\r\n        lockup.totalStaked = lockup.totalStaked.sub(realAmount).add(pendingCompound);\r\n        totalStaked = totalStaked.sub(realAmount).add(pendingCompound);\r\n\r\n        if(realAmount > 0) {\r\n            if (lockup.withdrawFee > 0) {\r\n                uint256 fee = realAmount.mul(lockup.withdrawFee).div(10000);\r\n                stakingToken.safeTransfer(walletA, fee);\r\n                realAmount = realAmount.sub(fee);\r\n            }\r\n\r\n            stakingToken.safeTransfer(address(msg.sender), realAmount);\r\n        }\r\n\r\n        emit Withdraw(msg.sender, _stakeType, realAmount);\r\n    }\r\n\r\n    function claimReward(uint8 _stakeType) external nonReentrant {\r\n        if(_stakeType >= lockups.length) return;\r\n        if(startBlock == 0) return;\r\n\r\n        _updatePool(_stakeType);\r\n\r\n        UserInfo storage user = userStaked[msg.sender];\r\n        Stake[] storage stakes = userStakes[msg.sender];\r\n        Lockup storage lockup = lockups[_stakeType];\r\n\r\n        uint256 pending = 0;\r\n        uint256 pendingCompound = 0;\r\n        uint256 compounded = 0;\r\n        for(uint256 j = 0; j < stakes.length; j++) {\r\n            Stake storage stake = stakes[j];\r\n            if(stake.stakeType != _stakeType) continue;\r\n            if(stake.amount == 0) continue;\r\n\r\n            uint256 _pending = stake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR).sub(stake.rewardDebt);\r\n\r\n            if(stake.end > block.timestamp) {\r\n                pendingCompound = pendingCompound.add(_pending);\r\n\r\n                if(address(stakingToken) != address(earnedToken) && _pending > 0) {\r\n                    uint256 _beforeAmount = stakingToken.balanceOf(address(this));\r\n                    _safeSwap(_pending, earnedToStakedPath, address(this));\r\n                    uint256 _afterAmount = stakingToken.balanceOf(address(this));\r\n                    _pending = _afterAmount.sub(_beforeAmount);\r\n                }\r\n                compounded = compounded.add(_pending);\r\n                stake.amount = stake.amount.add(_pending);\r\n\r\n                stake.reflectionDebt = stake.amount.mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION).sub(\r\n                    (stake.amount.sub(_pending)).mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION).sub(stake.reflectionDebt)\r\n                );\r\n\r\n            } else {\r\n                pending = pending.add(_pending);\r\n            }\r\n            stake.rewardDebt = stake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR);\r\n        }\r\n\r\n        if (pending > 0) {\r\n            require(availableRewardTokens() >= pending, \"Insufficient reward tokens\");\r\n            earnedToken.safeTransfer(address(msg.sender), pending);\r\n            \r\n            if(totalEarned > pending) {\r\n                totalEarned = totalEarned.sub(pending);\r\n            } else {\r\n                totalEarned = 0;\r\n            }\r\n        }\r\n\r\n        if (pendingCompound > 0) {\r\n            require(availableRewardTokens() >= pendingCompound, \"Insufficient reward tokens\");\r\n            \r\n            if(totalEarned > pendingCompound) {\r\n                totalEarned = totalEarned.sub(pendingCompound);\r\n            } else {\r\n                totalEarned = 0;\r\n            }\r\n\r\n            user.amount = user.amount.add(compounded);\r\n            lockup.totalStaked = lockup.totalStaked.add(compounded);\r\n            totalStaked = totalStaked.add(compounded);\r\n\r\n            emit Deposit(msg.sender, _stakeType, compounded);\r\n        }\r\n    }\r\n\r\n    function claimReflection(uint8 _stakeType) external nonReentrant {\r\n        if(_stakeType >= lockups.length) return;\r\n        if(startBlock == 0) return;\r\n\r\n        _updatePool(_stakeType);\r\n\r\n        Stake[] storage stakes = userStakes[msg.sender];\r\n\r\n        uint256 pendingReflection = 0;\r\n        for(uint256 j = 0; j < stakes.length; j++) {\r\n            Stake storage stake = stakes[j];\r\n            if(stake.stakeType != _stakeType) continue;\r\n            if(stake.amount == 0) continue;\r\n\r\n            uint256 _pendingReflection = stake.amount.mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION).sub(stake.reflectionDebt);\r\n            pendingReflection = pendingReflection.add(_pendingReflection);\r\n\r\n            stake.reflectionDebt = stake.amount.mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION);\r\n        }\r\n\r\n        if (pendingReflection > 0) {\r\n            if(address(ReflectionToken) == address(0x0)) {\r\n                payable(msg.sender).transfer(pendingReflection);\r\n            } else {\r\n                ReflectionToken.safeTransfer(address(msg.sender), pendingReflection);\r\n            }\r\n            totalReflections = totalReflections.sub(pendingReflection);\r\n        }\r\n    }\r\n\r\n    function compoundReward(uint8 _stakeType) external nonReentrant {\r\n        if(_stakeType >= lockups.length) return;\r\n        if(startBlock == 0) return;\r\n\r\n        _updatePool(_stakeType);\r\n\r\n        UserInfo storage user = userStaked[msg.sender];\r\n        Stake[] storage stakes = userStakes[msg.sender];\r\n        Lockup storage lockup = lockups[_stakeType];\r\n\r\n        uint256 pending = 0;\r\n        uint256 pendingCompound = 0;\r\n        for(uint256 j = 0; j < stakes.length; j++) {\r\n            Stake storage stake = stakes[j];\r\n            if(stake.stakeType != _stakeType) continue;\r\n            if(stake.amount == 0) continue;\r\n\r\n            uint256 _pending = stake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR).sub(stake.rewardDebt);\r\n            pending = pending.add(_pending);\r\n\r\n            if(address(stakingToken) != address(earnedToken) && _pending > 0) {\r\n                uint256 _beforeAmount = stakingToken.balanceOf(address(this));\r\n                _safeSwap(_pending, earnedToStakedPath, address(this));\r\n                uint256 _afterAmount = stakingToken.balanceOf(address(this));\r\n                _pending = _afterAmount.sub(_beforeAmount);\r\n            }\r\n            pendingCompound = pendingCompound.add(_pending);\r\n\r\n            stake.amount = stake.amount.add(_pending);\r\n            stake.rewardDebt = stake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR);\r\n\r\n            stake.reflectionDebt = stake.amount.mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION).sub(\r\n                (stake.amount.sub(_pending)).mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION).sub(stake.reflectionDebt)\r\n            );\r\n\r\n        }\r\n\r\n        if (pending > 0) {\r\n            require(availableRewardTokens() >= pending, \"Insufficient reward tokens\");\r\n            \r\n            if(totalEarned > pending) {\r\n                totalEarned = totalEarned.sub(pending);\r\n            } else {\r\n                totalEarned = 0;\r\n            }\r\n\r\n            user.amount = user.amount.add(pendingCompound);\r\n            lockup.totalStaked = lockup.totalStaked.add(pendingCompound);\r\n            totalStaked = totalStaked.add(pendingCompound);\r\n\r\n            emit Deposit(msg.sender, _stakeType, pendingCompound);\r\n        }\r\n    }\r\n\r\n    function rewardPerBlock(uint8 _stakeType) public view returns (uint256) {\r\n        if(_stakeType >= lockups.length) return 0;\r\n\r\n        return lockups[_stakeType].rate;\r\n    }\r\n\r\n    /**\r\n     * @notice Available amount of reward token\r\n     */\r\n    function availableRewardTokens() public view returns (uint256) {\r\n\r\n        uint256 _amount = earnedToken.balanceOf(address(this));\r\n        if (address(earnedToken) == address(stakingToken)) {\r\n            if (_amount < totalStaked) return 0;\r\n            return _amount.sub(totalStaked);\r\n        }\r\n\r\n        return _amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Available amount of reflection token\r\n     */\r\n    function availableReflectionTokens() public view returns (uint256) {\r\n        if(address(ReflectionToken) == address(0x0)) {\r\n            return address(this).balance;\r\n        }\r\n\r\n        uint256 _amount = ReflectionToken.balanceOf(address(this));\r\n        \r\n        if(address(ReflectionToken) == address(earnedToken)) {\r\n            if(_amount < totalEarned) return 0;\r\n            _amount = _amount.sub(totalEarned);\r\n        }\r\n\r\n        if(address(ReflectionToken) == address(stakingToken)) {\r\n            if(_amount < totalStaked) return 0;\r\n            _amount = _amount.sub(totalStaked);\r\n        }\r\n\r\n        return _amount;\r\n    }\r\n\r\n    function userInfo(uint8 _stakeType, address _account) public view returns (uint256 amount, uint256 available, uint256 locked) {\r\n        Stake[] storage stakes = userStakes[_account];\r\n        \r\n        for(uint256 i = 0; i < stakes.length; i++) {\r\n            Stake storage stake = stakes[i];\r\n\r\n            if(stake.stakeType != _stakeType) continue;\r\n            if(stake.amount == 0) continue;\r\n            \r\n            amount = amount.add(stake.amount);\r\n            if(block.timestamp > stake.end) {\r\n                available = available.add(stake.amount);\r\n            } else {\r\n                locked = locked.add(stake.amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice View function to see pending reward on frontend.\r\n     * @param _user: user address\r\n     * @return Pending reward for a given user\r\n     */\r\n    function pendingReward(address _account, uint8 _stakeType) external view returns (uint256) {\r\n        if(_stakeType >= lockups.length) return 0;\r\n        if(startBlock == 0) return 0;\r\n\r\n        Stake[] storage stakes = userStakes[_account];\r\n        Lockup storage lockup = lockups[_stakeType];\r\n\r\n        if(lockup.totalStaked == 0) return 0;\r\n        \r\n        uint256 adjustedTokenPerShare = lockup.accTokenPerShare;\r\n        if (block.number > lockup.lastRewardBlock && lockup.totalStaked != 0) {\r\n            uint256 multiplier = _getMultiplier(lockup.lastRewardBlock, block.number);\r\n            uint256 reward = multiplier.mul(lockup.rate);\r\n            adjustedTokenPerShare =\r\n                lockup.accTokenPerShare.add(\r\n                    reward.mul(PRECISION_FACTOR).div(lockup.totalStaked)\r\n                );\r\n        }\r\n\r\n        uint256 pending = 0;\r\n        for(uint256 i = 0; i < stakes.length; i++) {\r\n            Stake storage stake = stakes[i];\r\n            if(stake.stakeType != _stakeType) continue;\r\n            if(stake.amount == 0) continue;\r\n\r\n            pending = pending.add(\r\n                stake.amount.mul(adjustedTokenPerShare).div(PRECISION_FACTOR).sub(stake.rewardDebt)\r\n            );\r\n        }\r\n        return pending;\r\n    }\r\n\r\n    function pendingReflections(address _account, uint8 _stakeType) external view returns (uint256) {\r\n        if(_stakeType >= lockups.length) return 0;\r\n        if(startBlock == 0) return 0;\r\n\r\n        Stake[] storage stakes = userStakes[_account];\r\n        \r\n        if(totalStaked == 0) return 0;\r\n        \r\n        \r\n        uint256 reflectionAmount = availableReflectionTokens();\r\n        uint256 sTokenBal = stakingToken.balanceOf(address(this));\r\n\r\n        uint256 adjustedReflectionPerShare = accReflectionPerShare.add(\r\n                reflectionAmount.sub(totalReflections).mul(PRECISION_FACTOR_REFLECTION).div(sTokenBal)\r\n            );\r\n        \r\n        uint256 _pendingReflection = 0;\r\n        for(uint256 i = 0; i < stakes.length; i++) {\r\n            Stake storage stake = stakes[i];\r\n            if(stake.stakeType != _stakeType) continue;\r\n            if(stake.amount == 0) continue;\r\n\r\n            _pendingReflection = _pendingReflection.add(\r\n                stake.amount.mul(adjustedReflectionPerShare).div(PRECISION_FACTOR_REFLECTION).sub(\r\n                    stake.reflectionDebt\r\n                )\r\n            );\r\n        }\r\n        return _pendingReflection;\r\n    }\r\n\r\n    /************************\r\n    ** Admin Methods\r\n    *************************/\r\n    function harvest() external onlyOwner {        \r\n        _updatePool(0);\r\n\r\n        uint256 _amount = stakingToken.balanceOf(address(this));\r\n        _amount = _amount.sub(totalStaked);\r\n\r\n        uint256 _pendingReflection = _amount.mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION).sub(reflectionDebt);\r\n        if(_pendingReflection > 0) {\r\n            if(address(ReflectionToken) == address(0x0)) {\r\n                payable(walletA).transfer(_pendingReflection);\r\n            } else {\r\n                ReflectionToken.safeTransfer( walletA, _pendingReflection);\r\n            }\r\n            totalReflections = totalReflections.sub(_pendingReflection);\r\n        }\r\n        \r\n        reflectionDebt = _amount.mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION);\r\n\r\n    }\r\n\r\n    /*\r\n     * @notice Deposit reward token\r\n     * @dev Only call by owner. Needs to be for deposit of reward token when reflection token is same with reward token.\r\n     */\r\n    function depositRewards(uint _amount) external nonReentrant {\r\n        require(_amount > 0);\r\n\r\n        uint256 beforeAmt = earnedToken.balanceOf(address(this));\r\n        earnedToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n        uint256 afterAmt = earnedToken.balanceOf(address(this));\r\n\r\n        totalEarned = totalEarned.add(afterAmt).sub(beforeAmt);\r\n    }\r\n\r\n    /*\r\n     * @notice Withdraw reward token\r\n     * @dev Only callable by owner. Needs to be for emergency.\r\n     */\r\n    function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {\r\n        require( block.number > bonusEndBlock, \"Pool is running\");\r\n\r\n        earnedToken.safeTransfer(address(msg.sender), _amount);\r\n        \r\n        if (totalEarned > 0) {\r\n            if (_amount > totalEarned) {\r\n                totalEarned = 0;\r\n            } else {\r\n                totalEarned = totalEarned.sub(_amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to recover wrong tokens sent to the contract\r\n     * @param _tokenAddress: the address of the token to withdraw\r\n     * @param _tokenAmount: the number of tokens to withdraw\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _tokenAddress != address(earnedToken),\r\n            \"Cannot be reward token\"\r\n        );\r\n\r\n        if(_tokenAddress == address(stakingToken)) {\r\n            uint256 tokenBal = stakingToken.balanceOf(address(this));\r\n            require(_tokenAmount <= tokenBal.sub(totalStaked), \"Insufficient balance\");\r\n        }\r\n\r\n        if(_tokenAddress == address(0x0)) {\r\n            payable(msg.sender).transfer(_tokenAmount);\r\n        } else {\r\n            IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\r\n        }\r\n\r\n    }\r\n\r\n    function startReward() external onlyOwner {\r\n        require(startBlock == 0, \"Pool was already started\");\r\n\r\n        startBlock = block.number.add(100);\r\n        bonusEndBlock = startBlock.add(duration * 28800);\r\n        for(uint256 i = 0; i < lockups.length; i++) {\r\n            lockups[i].lastRewardBlock = startBlock;\r\n        }\r\n        \r\n        emit NewStartAndEndBlocks(startBlock, bonusEndBlock);\r\n    }\r\n\r\n    function stopReward() external onlyOwner {\r\n        bonusEndBlock = block.number;\r\n    }\r\n\r\n    function updateLockup(uint8 _stakeType, uint256 _duration, uint256 _withdrawFee, uint256 _rate) external onlyOwner {\r\n        // require(block.number < startBlock, \"Pool was already started\");\r\n        require(_stakeType < lockups.length, \"Lockup Not found\");\r\n        require(_withdrawFee < 5000, \"Invalid withdraw fee\");\r\n\r\n        Lockup storage _lockup = lockups[_stakeType];\r\n        _lockup.duration = _duration;\r\n        _lockup.withdrawFee = _withdrawFee;\r\n        _lockup.rate = _rate;\r\n        \r\n        emit LockupUpdated(_stakeType, _duration, _withdrawFee, _rate);\r\n    }\r\n\r\n    function resetAllowances() external onlyOwner {\r\n        _resetAllowances();\r\n    }\r\n\r\n\r\n    /************************\r\n    ** Internal Methods\r\n    *************************/\r\n    /*\r\n     * @notice Update reward variables of the given pool to be up-to-date.\r\n     */\r\n    function _updatePool(uint8 _stakeType) internal {\r\n        // calc reflection rate\r\n        if(totalStaked > 0) {\r\n            uint256 reflectionAmount = availableReflectionTokens();\r\n\r\n            uint256 sTokenBal = stakingToken.balanceOf(address(this));\r\n\r\n            accReflectionPerShare = accReflectionPerShare.add(\r\n                    reflectionAmount.sub(totalReflections).mul(PRECISION_FACTOR_REFLECTION).div(sTokenBal)\r\n                );\r\n\r\n            totalReflections = reflectionAmount;\r\n\r\n        }\r\n\r\n        Lockup storage lockup = lockups[_stakeType];\r\n        if (block.number <= lockup.lastRewardBlock) return;\r\n\r\n        if (lockup.totalStaked == 0) {\r\n            lockup.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 multiplier = _getMultiplier(lockup.lastRewardBlock, block.number);\r\n        uint256 _reward = multiplier.mul(lockup.rate);\r\n        lockup.accTokenPerShare = lockup.accTokenPerShare.add(\r\n            _reward.mul(PRECISION_FACTOR).div(lockup.totalStaked)\r\n        );\r\n        lockup.lastRewardBlock = block.number;\r\n    }\r\n\r\n    /*\r\n     * @notice Return reward multiplier over the given _from to _to block.\r\n     * @param _from: block to start\r\n     * @param _to: block to finish\r\n     */\r\n    function _getMultiplier(uint256 _from, uint256 _to)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_to <= bonusEndBlock) {\r\n            return _to.sub(_from);\r\n        } else if (_from >= bonusEndBlock) {\r\n            return 0;\r\n        } else {\r\n            return bonusEndBlock.sub(_from);\r\n        }\r\n    }\r\n\r\n    function _safeSwap(\r\n        uint256 _amountIn,\r\n        address[] memory _path,\r\n        address _to\r\n    ) internal {\r\n        uint256[] memory amounts = IUniRouter02(uniRouterAddress).getAmountsOut(_amountIn, _path);\r\n        uint256 amountOut = amounts[amounts.length.sub(1)];\r\n\r\n        IUniRouter02(uniRouterAddress).swapExactTokensForTokens(\r\n            _amountIn,\r\n            amountOut.mul(slippageFactor).div(1000),\r\n            _path,\r\n            _to,\r\n            block.timestamp.add(600)\r\n        );\r\n    }\r\n\r\n    function _resetAllowances() internal {\r\n        earnedToken.safeApprove(uniRouterAddress, uint256(0));\r\n        earnedToken.safeIncreaseAllowance(\r\n            uniRouterAddress,\r\n            type(uint256).max\r\n        );\r\n\r\n        if(address(ReflectionToken) == address(0x0)) {\r\n            address wethAddress = IUniRouter02(uniRouterAddress).WETH();\r\n            IERC20(wethAddress).safeApprove(uniRouterAddress, uint256(0));\r\n            IERC20(wethAddress).safeIncreaseAllowance(\r\n                uniRouterAddress,\r\n                type(uint256).max\r\n            );\r\n        } else {\r\n            ReflectionToken.safeApprove(uniRouterAddress, uint256(0));\r\n\r\n            ReflectionToken.safeIncreaseAllowance(\r\n                uniRouterAddress,\r\n                type(uint256).max\r\n            );\r\n        }        \r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"LockupUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR_REFLECTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReflectionToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accReflectionPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableReflectionTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableRewardTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"}],\"name\":\"claimReflection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"}],\"name\":\"compoundReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToStakedPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockups\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"}],\"name\":\"pendingReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"}],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFactorUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateLockup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWalletA\",\"type\":\"address\"}],\"name\":\"updateWalletA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reflectionDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://be7e4a946d149b0efb90ca1bd8369bd72ad9a299eb2f0aecdcf4e954994837e9"}