{"SourceCode": "// File: contracts\\HokkaiduInu.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n/*\r\n'##::::'##::'#######::'##:::'##:'##:::'##::::'###::::'####:'########::'##::::'##::::'####:'##::: ##:'##::::'##:\r\n ##:::: ##:'##.... ##: ##::'##:: ##::'##::::'## ##:::. ##:: ##.... ##: ##:::: ##::::. ##:: ###:: ##: ##:::: ##:\r\n ##:::: ##: ##:::: ##: ##:'##::: ##:'##::::'##:. ##::: ##:: ##:::: ##: ##:::: ##::::: ##:: ####: ##: ##:::: ##:\r\n #########: ##:::: ##: #####:::: #####::::'##:::. ##:: ##:: ##:::: ##: ##:::: ##::::: ##:: ## ## ##: ##:::: ##:\r\n ##.... ##: ##:::: ##: ##. ##::: ##. ##::: #########:: ##:: ##:::: ##: ##:::: ##::::: ##:: ##. ####: ##:::: ##:\r\n ##:::: ##: ##:::: ##: ##:. ##:: ##:. ##:: ##.... ##:: ##:: ##:::: ##: ##:::: ##::::: ##:: ##:. ###: ##:::: ##:\r\n ##:::: ##:. #######:: ##::. ##: ##::. ##: ##:::: ##:'####: ########::. #######:::::'####: ##::. ##:. #######::\r\n..:::::..:::.......:::..::::..::..::::..::..:::::..::....::........::::.......::::::....::..::::..:::.......:::\r\n\r\n\r\nHokkaidu Inu is launching on BSC with ETH rewards to pay homage to it's birthplace.\r\n\r\n\r\n\r\n    \ud83d\udcf1 Telegram: https://t.me/HokkaidoInu\r\n\r\n    \ud83c\udf0e Website: https://hokk.finance/\r\n\r\n    Twitter: https://twitter.com/hokkaiduinu\r\n\r\n\r\n */\r\n\r\n\r\n\r\n\r\n\r\n// File: contracts/IERC20.sol\r\n\r\n\r\n\r\n//\r\n\r\n\r\n\r\n pragma solidity ^0.7.0 ;\r\n\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    /**\r\n\r\n     * @dev Returns the amount of tokens in existence.\r\n\r\n     */\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n\r\n     */\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\r\n     *\r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     */\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\r\n     * zero by default.\r\n\r\n     *\r\n\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n\r\n     */\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\r\n     *\r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     *\r\n\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n\r\n     * transaction ordering. One possible solution to mitigate this race\r\n\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n\r\n     * desired value afterwards:\r\n\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n     *\r\n\r\n     * Emits an {Approval} event.\r\n\r\n     */\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n\r\n     * allowance.\r\n\r\n     *\r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     */\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\r\n     * another (`to`).\r\n\r\n     *\r\n\r\n     * Note that `value` may be zero.\r\n\r\n     */\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\r\n     * a call to {approve}. `value` is the new allowance.\r\n\r\n     */\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n\r\n// File: contracts/Context.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\r\n * @dev Provides information about the current execution context, including the\r\n\r\n * sender of the transaction and its data. While these are generally available\r\n\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n\r\n * paying for execution may not be the actual sender (as far as an application\r\n\r\n * is concerned).\r\n\r\n *\r\n\r\n * This contract is only required for intermediate, library-like contracts.\r\n\r\n */\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n\r\n        return msg.sender;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\r\n        return msg.data;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n// File: contracts/IUniswapV2Router01.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n\r\n\r\n    function addLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint amountADesired,\r\n\r\n        uint amountBDesired,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint amountTokenDesired,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n\r\n        uint amountOut,\r\n\r\n        uint amountInMax,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        payable\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        payable\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n}\r\n\r\n// File: contracts/IUniswapV2Router02.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountETH);\r\n\r\n\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n\r\n\r\n    event Create(address indexed sender, uint amount0, uint amount1);\r\n\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n\r\n    event Swap(\r\n\r\n        address indexed sender,\r\n\r\n        uint amount0In,\r\n\r\n        uint amount1In,\r\n\r\n        uint amount0Out,\r\n\r\n        uint amount1Out,\r\n\r\n        address indexed to\r\n\r\n    );\r\n\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n\r\n\r\n    function create(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n\r\n\r\n    function initialize(address, address) external;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary IterableMapping {\r\n\r\n    // Iterable mapping from address to uint;\r\n\r\n    struct Map {\r\n\r\n        address[] keys;\r\n\r\n        mapping(address => uint) values;\r\n\r\n        mapping(address => uint) indexOf;\r\n\r\n        mapping(address => bool) inserted;\r\n\r\n    }\r\n\r\n\r\n\r\n    function get(Map storage map, address key) public view returns (uint) {\r\n\r\n        return map.values[key];\r\n\r\n    }\r\n\r\n\r\n\r\n    function getIndexOfKey(Map storage map, address key) public view returns (int) {\r\n\r\n        if(!map.inserted[key]) {\r\n\r\n            return -1;\r\n\r\n        }\r\n\r\n        return int(map.indexOf[key]);\r\n\r\n    }\r\n\r\n\r\n\r\n    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\r\n\r\n        return map.keys[index];\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function size(Map storage map) public view returns (uint) {\r\n\r\n        return map.keys.length;\r\n\r\n    }\r\n\r\n\r\n\r\n    function set(Map storage map, address key, uint val) public {\r\n\r\n        if (map.inserted[key]) {\r\n\r\n            map.values[key] = val;\r\n\r\n        } else {\r\n\r\n            map.inserted[key] = true;\r\n\r\n            map.values[key] = val;\r\n\r\n            map.indexOf[key] = map.keys.length;\r\n\r\n            map.keys.push(key);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function remove(Map storage map, address key) public {\r\n\r\n        if (!map.inserted[key]) {\r\n\r\n            return;\r\n\r\n        }\r\n\r\n\r\n\r\n        delete map.inserted[key];\r\n\r\n        delete map.values[key];\r\n\r\n\r\n\r\n        uint index = map.indexOf[key];\r\n\r\n        uint lastIndex = map.keys.length - 1;\r\n\r\n        address lastKey = map.keys[lastIndex];\r\n\r\n\r\n\r\n        map.indexOf[lastKey] = index;\r\n\r\n        delete map.indexOf[key];\r\n\r\n\r\n\r\n        map.keys[index] = lastKey;\r\n\r\n        map.keys.pop();\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n\r\n     */\r\n\r\n    constructor () {\r\n\r\n        address msgSender = _msgSender();\r\n\r\n        _owner = msgSender;\r\n\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the address of the current owner.\r\n\r\n     */\r\n\r\n    function owner() public view virtual returns (address) {\r\n\r\n        return _owner;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Throws if called by any account other than the owner.\r\n\r\n     */\r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\r\n     *\r\n\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\r\n     * thereby removing any functionality that is only available to the owner.\r\n\r\n     */\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n\r\n        _owner = address(0);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\r\n     * Can only be called by the current owner.\r\n\r\n     */\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        _owner = newOwner;\r\n\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/IDividendPayingTokenOptional.sol\r\n\r\n\r\n\r\n\r\n\r\ninterface IDividendPayingTokenOptional {\r\n\r\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\r\n\r\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\r\n\r\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\r\n\r\n}\r\n\r\n// File: contracts/IDividendPayingToken.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IDividendPayingToken {\r\n\r\n  function dividendOf(address _owner) external view returns(uint256);\r\n\r\n\r\n\r\n  function distributeDividends() external payable;\r\n\r\n  function withdrawDividend() external;\r\n\r\n  event DividendsDistributed(\r\n\r\n    address indexed from,\r\n\r\n    uint256 weiAmount\r\n\r\n  );\r\n\r\n\r\n\r\n  event DividendWithdrawn(\r\n\r\n    address indexed to,\r\n\r\n    uint256 weiAmount\r\n\r\n  );\r\n\r\n}\r\n\r\n\r\n\r\nlibrary SafeMathInt {\r\n\r\n  function mul(int256 a, int256 b) internal pure returns (int256) {\r\n\r\n    // Prevent overflow when multiplying INT256_MIN with -1\r\n\r\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n\r\n    require(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\r\n\r\n\r\n\r\n    int256 c = a * b;\r\n\r\n    require((b == 0) || (c / b == a));\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n\r\n\r\n  function div(int256 a, int256 b) internal pure returns (int256) {\r\n\r\n    // Prevent overflow when dividing INT256_MIN by -1\r\n\r\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n\r\n    require(!(a == - 2**255 && b == -1) && (b > 0));\r\n\r\n\r\n\r\n    return a / b;\r\n\r\n  }\r\n\r\n\r\n\r\n  function sub(int256 a, int256 b) internal pure returns (int256) {\r\n\r\n    require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\r\n\r\n\r\n\r\n    return a - b;\r\n\r\n  }\r\n\r\n\r\n\r\n  function add(int256 a, int256 b) internal pure returns (int256) {\r\n\r\n    int256 c = a + b;\r\n\r\n    require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n\r\n\r\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n\r\n    require(a >= 0);\r\n\r\n    return uint256(a);\r\n\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/SafeMathUint.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @title SafeMathUint\r\n\r\n * @dev Math operations with safety checks that revert on error\r\n\r\n */\r\n\r\nlibrary SafeMathUint {\r\n\r\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n\r\n    int256 b = int256(a);\r\n\r\n    require(b >= 0);\r\n\r\n    return b;\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\r\n\r\n    uint256 private _totalSupply;\r\n\r\n\r\n\r\n    string private _name;\r\n\r\n    string private _symbol;\r\n\r\n    uint8 private _decimals;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n\r\n     * a default value of 18.\r\n\r\n     *\r\n\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n\r\n     *\r\n\r\n     * All three of these values are immutable: they can only be set once during\r\n\r\n     * construction.\r\n\r\n     */\r\n\r\n    constructor (string memory name_, string memory symbol_) {\r\n\r\n        _name = name_;\r\n\r\n        _symbol = symbol_;\r\n\r\n        _decimals = 18;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the name of the token.\r\n\r\n     */\r\n\r\n    function name() public view virtual returns (string memory) {\r\n\r\n        return _name;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n\r\n     * name.\r\n\r\n     */\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n\r\n        return _symbol;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n\r\n        return _decimals;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20-totalSupply}.\r\n\r\n     */\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n\r\n        return _totalSupply;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20-balanceOf}.\r\n\r\n     */\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n\r\n        return _balances[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20-transfer}.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `recipient` cannot be the zero address.\r\n\r\n     * - the caller must have a balance of at least `amount`.\r\n\r\n     */\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\r\n        _transfer(_msgSender(), recipient, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\r\n        return _allowances[owner][spender];\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function _create(address account, uint256 amount) internal virtual {\r\n\r\n        require(account != address(0), \"ERC20: create to the zero address\");\r\n\r\n\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n\r\n        _balances[account] = _balances[account].add(amount);\r\n\r\n        emit Transfer(address(0), account, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n\r\n        _totalSupply = _totalSupply.sub(amount);\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n\r\n        _decimals = decimals_;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n\r\n     *\r\n\r\n     * _Available since v3.4._\r\n\r\n     */\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\r\n        uint256 c = a + b;\r\n\r\n        if (c < a) return (false, 0);\r\n\r\n        return (true, c);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n\r\n     *\r\n\r\n     * _Available since v3.4._\r\n\r\n     */\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\r\n        if (b > a) return (false, 0);\r\n\r\n        return (true, a - b);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n\r\n     *\r\n\r\n     * _Available since v3.4._\r\n\r\n     */\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\r\n        // benefit is lost if 'b' is also tested.\r\n\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\r\n        if (a == 0) return (true, 0);\r\n\r\n        uint256 c = a * b;\r\n\r\n        if (c / a != b) return (false, 0);\r\n\r\n        return (true, c);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n\r\n     *\r\n\r\n     * _Available since v3.4._\r\n\r\n     */\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\r\n        if (b == 0) return (false, 0);\r\n\r\n        return (true, a / b);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n\r\n     *\r\n\r\n     * _Available since v3.4._\r\n\r\n     */\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\r\n        if (b == 0) return (false, 0);\r\n\r\n        return (true, a % b);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n\r\n     * overflow.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `+` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - Addition cannot overflow.\r\n\r\n     */\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\r\n     * overflow (when the result is negative).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `-` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - Subtraction cannot overflow.\r\n\r\n     */\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\r\n     * overflow.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `*` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - Multiplication cannot overflow.\r\n\r\n     */\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) return 0;\r\n\r\n        uint256 c = a * b;\r\n\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n\r\n        return a / b;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n\r\n        return a % b;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b <= a, errorMessage);\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b > 0, errorMessage);\r\n\r\n        return a / b;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b > 0, errorMessage);\r\n\r\n        return a % b;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract DividendPayingToken is ERC20, IDividendPayingToken, IDividendPayingTokenOptional {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  using SafeMathUint for uint256;\r\n\r\n  using SafeMathInt for int256;\r\n\r\n\r\n\r\n\r\n\r\n  uint256 constant internal magnitude = 2**128;\r\n\r\n\r\n\r\n  uint256 internal magnifiedDividendPerShare;\r\n\r\n  uint256 internal lastAmount;\r\n\r\n  address public immutable ETH = address(0x2170Ed0880ac9A755fd29B2688956BD959F933F8);\r\n\r\n\r\n\r\n\r\n\r\n  mapping(address => int256) internal magnifiedDividendCorrections;\r\n\r\n  mapping(address => uint256) internal withdrawnDividends;\r\n\r\n\r\n\r\n  uint256 public totalDividendsDistributed;\r\n\r\n\r\n\r\n  constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  receive() external payable {\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  function distributeDividends() public override payable {\r\n\r\n    require(totalSupply() > 0);\r\n\r\n\r\n\r\n    if (msg.value > 0) {\r\n\r\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n\r\n        (msg.value).mul(magnitude) / totalSupply()\r\n\r\n      );\r\n\r\n      emit DividendsDistributed(msg.sender, msg.value);\r\n\r\n\r\n\r\n      totalDividendsDistributed = totalDividendsDistributed.add(msg.value);\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  function distributeBusdDividends(uint256 amount) public {\r\n\r\n    require(totalSupply() > 0);\r\n\r\n\r\n\r\n    if (amount > 0) {\r\n\r\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n\r\n        (amount).mul(magnitude) / totalSupply()\r\n\r\n      );\r\n\r\n      emit DividendsDistributed(msg.sender, amount);\r\n\r\n\r\n\r\n      totalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  function withdrawDividend() public virtual override {\r\n\r\n    _withdrawDividendOfUser(msg.sender);\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n\r\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n\r\n    if (_withdrawableDividend > 0) {\r\n\r\n      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n\r\n      emit DividendWithdrawn(user, _withdrawableDividend);\r\n\r\n      bool success = IERC20(ETH).transfer(user, _withdrawableDividend);\r\n\r\n\r\n\r\n      if(!success) {\r\n\r\n        withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n\r\n        return 0;\r\n\r\n      }\r\n\r\n\r\n\r\n      return _withdrawableDividend;\r\n\r\n    }\r\n\r\n\r\n\r\n    return 0;\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  function dividendOf(address _owner) public view override returns(uint256) {\r\n\r\n    return withdrawableDividendOf(_owner);\r\n\r\n  }\r\n\r\n\r\n\r\n  function withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n\r\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  function withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n\r\n    return withdrawnDividends[_owner];\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  function accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n\r\n    return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n\r\n      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  function _transfer(address from, address to, uint256 value) internal virtual override {\r\n\r\n    require(false);\r\n\r\n\r\n\r\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n\r\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n\r\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  function _create(address account, uint256 value) internal override {\r\n\r\n    super._create(account, value);\r\n\r\n\r\n\r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n\r\n      .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  function _burn(address account, uint256 value) internal override {\r\n\r\n    super._burn(account, value);\r\n\r\n\r\n\r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n\r\n      .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n\r\n  }\r\n\r\n\r\n\r\n  function _setBalance(address account, uint256 newBalance) internal {\r\n\r\n    uint256 currentBalance = balanceOf(account);\r\n\r\n\r\n\r\n    if(newBalance > currentBalance) {\r\n\r\n      uint256 createAmount = newBalance.sub(currentBalance);\r\n\r\n      _create(account, createAmount);\r\n\r\n    } else if(newBalance < currentBalance) {\r\n\r\n      uint256 burnAmount = currentBalance.sub(newBalance);\r\n\r\n      _burn(account, burnAmount);\r\n\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract HokkaiduInu is ERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    address public immutable uniswapV2Pair;\r\n\r\n    address public immutable ETH = address(0x2170Ed0880ac9A755fd29B2688956BD959F933F8);\r\n\r\n\r\n\r\n    bool private swapping;\r\n\r\n\r\n\r\n    HOKKDividendTracker public dividendTracker;\r\n\r\n    address public liquidityWallet;\r\n\r\n    address public marketingWallet;\r\n\r\n    uint256 public maxSellTransactionAmount = 1000000000000000 * (10**18);\r\n\r\n    uint256 public swapTokensAtAmount = 20000000000 * (10**18);\r\n\r\n    uint256 public _maxWalletToken = 1000000000000000 * (10**18);\r\n\r\n    uint256 public ETHRewardsFee;\r\n\r\n    uint256 public liquidityFee;\r\n\r\n    uint256 public marketingFee;\r\n\r\n    uint256 public marketingETHFee;\r\n\r\n    uint256 public totalFees;\r\n\r\n    uint256 public immutable sellFeeIncreaseFactor = 120;\r\n\r\n    uint256 public gasForProcessing = 300000;\r\n\r\n    address public presaleAddress = address(0);\r\n\r\n    uint256 public tradingEnabledTimestamp = 1627113551;\r\n\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n\r\n    mapping (address => bool) private canTransferBeforeTradingIsEnabled;\r\n\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    mapping(address => bool) public _isBot;\r\n\r\n    bool private _pausedContract = false;\r\n\r\n    event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\r\n\r\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n\r\n\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\r\n\r\n\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n\r\n\r\n    event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\r\n\r\n\r\n\r\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n\r\n\r\n    event FixedSaleBuy(address indexed account, uint256 indexed amount, bool indexed earlyParticipant, uint256 numberOfBuyers);\r\n\r\n\r\n\r\n    event SwapAndLiquify(\r\n\r\n        uint256 tokensSwapped,\r\n\r\n        uint256 ethReceived,\r\n\r\n        uint256 tokensIntoLiqudity\r\n\r\n    );\r\n\r\n\r\n\r\n    event SendDividends(\r\n\r\n        uint256 tokensSwapped,\r\n\r\n        uint256 amount\r\n\r\n    );\r\n\r\n\r\n\r\n    event SendMarketings(\r\n\r\n        uint256 tokensSwapped,\r\n\r\n        uint256 amount\r\n\r\n    );\r\n\r\n\r\n\r\n    event ProcessedDividendTracker(\r\n\r\n        uint256 iterations,\r\n\r\n        uint256 claims,\r\n\r\n        uint256 lastProcessedIndex,\r\n\r\n        bool indexed automatic,\r\n\r\n        uint256 gas,\r\n\r\n        address indexed processor\r\n\r\n    );\r\n\r\n\r\n\r\n    constructor() ERC20(\"Hokkaidu Inu\", \"HOKK\") {\r\n\r\n        uint256 _ETHRewardsFee = 4;\r\n\r\n        uint256 _liquidityFee = 2;\r\n\r\n        uint256 _marketingFee = 2;\r\n\r\n        uint256 _marketingETHFee = 2;\r\n\r\n\r\n\r\n        ETHRewardsFee = _ETHRewardsFee;\r\n\r\n        liquidityFee = _liquidityFee;\r\n\r\n        marketingFee = _marketingFee;\r\n\r\n        marketingETHFee = _marketingETHFee;\r\n\r\n\r\n\r\n        totalFees = _ETHRewardsFee.add(_liquidityFee).add(_marketingFee).add(_marketingETHFee);\r\n\r\n\r\n\r\n        dividendTracker = new HOKKDividendTracker();\r\n\r\n\r\n\r\n        liquidityWallet = owner();\r\n\r\n        marketingWallet = address(0x4529DE4C39F8D4f419F44A30Fa1579049b4b553e);\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n\r\n\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n\r\n\r\n\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n\r\n\r\n        // exclude from receiving dividends\r\n\r\n        dividendTracker.excludeFromDividends(address(dividendTracker));\r\n\r\n        dividendTracker.excludeFromDividends(address(this));\r\n\r\n              dividendTracker.excludeFromDividends(address(_uniswapV2Router));\r\n\r\n        dividendTracker.excludeFromDividends(address(0x000000000000000000000000000000000000dEaD));\r\n\r\n        dividendTracker.excludeFromDividends(address(0x0000000000000000000000000000000000000000));\r\n\r\n\r\n\r\n\r\n\r\n        excludeFromFees(liquidityWallet, true);\r\n\r\n        excludeFromFees(address(this), true);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // enable owner and fixed-sale wallet to send tokens before presales are over\r\n\r\n        canTransferBeforeTradingIsEnabled[owner()] = true;\r\n\r\n        /*\r\n\r\n            _create is an internal function in ERC20.sol that is only called here,\r\n\r\n            and CANNOT be called ever again\r\n\r\n        */\r\n\r\n        _create(owner(), 1000000000000000 * (10**18));\r\n\r\n    }\r\n\r\n\r\n\r\n    receive() external payable {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    function whitelistDxSale(address _presaleAddress, address _routerAddress) public onlyOwner {\r\n\r\n        presaleAddress = _presaleAddress;\r\n\r\n        canTransferBeforeTradingIsEnabled[presaleAddress] = true;\r\n\r\n        dividendTracker.excludeFromDividends(_presaleAddress);\r\n\r\n        excludeFromFees(_presaleAddress, true);\r\n\r\n\r\n\r\n        canTransferBeforeTradingIsEnabled[_routerAddress] = true;\r\n\r\n        dividendTracker.excludeFromDividends(_routerAddress);\r\n\r\n        excludeFromFees(_routerAddress, true);\r\n\r\n    }\r\n\r\n\r\n\r\n    function updateDividendTracker(address newAddress) public onlyOwner {\r\n\r\n        require(newAddress != address(dividendTracker), \"HOKK: The dividend tracker already has that address\");\r\n\r\n\r\n\r\n        HOKKDividendTracker newDividendTracker = HOKKDividendTracker(payable(newAddress));\r\n\r\n\r\n\r\n        require(newDividendTracker.owner() == address(this), \"HOKK: The new dividend tracker must be owned by the HOKK token contract\");\r\n\r\n\r\n\r\n        newDividendTracker.excludeFromDividends(address(newDividendTracker));\r\n\r\n        newDividendTracker.excludeFromDividends(address(this));\r\n\r\n        newDividendTracker.excludeFromDividends(owner());\r\n\r\n        newDividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n\r\n\r\n\r\n        emit UpdateDividendTracker(newAddress, address(dividendTracker));\r\n\r\n\r\n\r\n        dividendTracker = newDividendTracker;\r\n\r\n    }\r\n\r\n\r\n\r\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n\r\n        require(newAddress != address(uniswapV2Router), \"HOKK: The router already has that address\");\r\n\r\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n\r\n    }\r\n\r\n\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n\r\n        require(_isExcludedFromFees[account] != excluded, \"HOKK: Account is already the value of 'excluded'\");\r\n\r\n        _isExcludedFromFees[account] = excluded;\r\n\r\n\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n\r\n    }\r\n\r\n\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n\r\n            _isExcludedFromFees[accounts[i]] = excluded;\r\n\r\n        }\r\n\r\n\r\n\r\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n\r\n        require(pair != uniswapV2Pair, \"HOKK: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\");\r\n\r\n\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n\r\n        require(automatedMarketMakerPairs[pair] != value, \"HOKK: Automated market maker pair is already set to that value\");\r\n\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n\r\n\r\n        if(value) {\r\n\r\n            dividendTracker.excludeFromDividends(pair);\r\n\r\n        }\r\n\r\n\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function updateLiquidityWallet(address newLiquidityWallet) public onlyOwner {\r\n\r\n        require(newLiquidityWallet != liquidityWallet, \"HOKK: The liquidity wallet is already this address\");\r\n\r\n        excludeFromFees(newLiquidityWallet, true);\r\n\r\n        emit LiquidityWalletUpdated(newLiquidityWallet, liquidityWallet);\r\n\r\n        liquidityWallet = newLiquidityWallet;\r\n\r\n    }\r\n\r\n\r\n\r\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\r\n\r\n        require(newValue >= 200000 && newValue <= 500000, \"HOKK: gasForProcessing must be between 200,000 and 500,000\");\r\n\r\n        require(newValue != gasForProcessing, \"HOKK: Cannot update gasForProcessing to same value\");\r\n\r\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n\r\n        gasForProcessing = newValue;\r\n\r\n    }\r\n\r\n\r\n\r\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\r\n\r\n        dividendTracker.updateClaimWait(claimWait);\r\n\r\n    }\r\n\r\n\r\n\r\n    function getClaimWait() external view returns(uint256) {\r\n\r\n        return dividendTracker.claimWait();\r\n\r\n    }\r\n\r\n\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n\r\n        return dividendTracker.totalDividendsDistributed();\r\n\r\n    }\r\n\r\n\r\n\r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n\r\n        return _isExcludedFromFees[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    function withdrawableDividendOf(address account) public view returns(uint256) {\r\n\r\n        return dividendTracker.withdrawableDividendOf(account);\r\n\r\n    }\r\n\r\n\r\n\r\n    function dividendTokenBalanceOf(address account) public view returns (uint256) {\r\n\r\n        return dividendTracker.balanceOf(account);\r\n\r\n    }\r\n\r\n\r\n\r\n    function getAccountDividendsInfo(address account)\r\n\r\n        external view returns (\r\n\r\n            address,\r\n\r\n            int256,\r\n\r\n            int256,\r\n\r\n            uint256,\r\n\r\n            uint256,\r\n\r\n            uint256,\r\n\r\n            uint256,\r\n\r\n            uint256) {\r\n\r\n        return dividendTracker.getAccount(account);\r\n\r\n    }\r\n\r\n\r\n\r\n    function getAccountDividendsInfoAtIndex(uint256 index)\r\n\r\n        external view returns (\r\n\r\n            address,\r\n\r\n            int256,\r\n\r\n            int256,\r\n\r\n            uint256,\r\n\r\n            uint256,\r\n\r\n            uint256,\r\n\r\n            uint256,\r\n\r\n            uint256) {\r\n\r\n        return dividendTracker.getAccountAtIndex(index);\r\n\r\n    }\r\n\r\n\r\n\r\n    function processDividendTracker(uint256 gas) external {\r\n\r\n        (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\r\n\r\n        emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\r\n\r\n    }\r\n\r\n\r\n\r\n    function claim() external {\r\n\r\n        dividendTracker.processAccount(msg.sender, false);\r\n\r\n    }\r\n\r\n\r\n\r\n    function getLastProcessedIndex() external view returns(uint256) {\r\n\r\n        return dividendTracker.getLastProcessedIndex();\r\n\r\n    }\r\n\r\n\r\n\r\n    function getNumberOfDividendTokenHolders() external view returns(uint256) {\r\n\r\n        return dividendTracker.getNumberOfTokenHolders();\r\n\r\n    }\r\n\r\n\r\n\r\n    function getTradingIsEnabled() public view returns (bool) {\r\n\r\n        return block.timestamp >= tradingEnabledTimestamp;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setTradingEnabledTimestamp(uint256 _timestamp) external onlyOwner {\r\n\r\n        tradingEnabledTimestamp = _timestamp;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function setMarketingFee(uint256 _tokenFee, uint256 _ETHFee) external onlyOwner {\r\n\r\n        marketingFee = _tokenFee;\r\n\r\n        marketingETHFee = _ETHFee;\r\n\r\n\r\n\r\n        totalFees = ETHRewardsFee.add(liquidityFee).add(marketingFee).add(marketingETHFee);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setETHRewardFee(uint256 _ETHRewardFee) external onlyOwner {\r\n\r\n        ETHRewardsFee = _ETHRewardFee;\r\n\r\n\r\n\r\n        totalFees = ETHRewardsFee.add(liquidityFee).add(marketingFee).add(marketingETHFee);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setLiquidityFee(uint256 _liquidityFee) external onlyOwner {\r\n\r\n        liquidityFee = _liquidityFee;\r\n\r\n\r\n\r\n        totalFees = ETHRewardsFee.add(liquidityFee).add(marketingFee).add(marketingETHFee);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setMarketingWallet(address _address) public onlyOwner {\r\n\r\n        marketingWallet = _address;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setMaxWalletToken(uint256 _amount) public onlyOwner() {\r\n\r\n        _maxWalletToken = _amount;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setMaxSellTransactionAmount(uint256 _amount) public onlyOwner() {\r\n\r\n        maxSellTransactionAmount = _amount;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setSwapTokensAtAmount(uint256 _amount) public onlyOwner() {\r\n\r\n        swapTokensAtAmount = _amount;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function pauseContract() external onlyOwner() {\r\n\r\n        _pausedContract = true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function unpauseContract() external onlyOwner() {\r\n\r\n        _pausedContract = false;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // so\r\n\r\n    function recoverContractBNB(uint256 recoverRate) public onlyOwner{\r\n\r\n        uint256 bnbAmount = address(this).balance;\r\n\r\n        if(bnbAmount > 0){\r\n\r\n            sendToMarketingWallet(bnbAmount.mul(recoverRate).div(100));\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function sendToMarketingWallet(uint256 amount) private {\r\n\r\n        payable(marketingWallet).transfer(amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    //manage Anti-bots list\r\n\r\n    function setAntiBotslist(address[] calldata addresses, bool status) external onlyOwner {\r\n\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n\r\n            _isBot[addresses[i]] = status;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function _transfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) internal override {\r\n\r\n        require(!_pausedContract || from == owner() || to == owner(), \"BEP20: Transfers are paused\"); // pause check\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        require(!_isBot[from] && !_isBot[to], \"Error: NTAM8L0K1 Try again later\");\r\n\r\n\r\n\r\n\r\n\r\n        bool tradingIsEnabled = getTradingIsEnabled();\r\n\r\n\r\n\r\n        // only whitelisted addresses can make transfers after the fixed-sale has started\r\n\r\n        // and before the public presale is over\r\n\r\n        if(!tradingIsEnabled) {\r\n\r\n            require(canTransferBeforeTradingIsEnabled[from], \"HOKK: This account cannot send tokens until trading is enabled\");\r\n\r\n        }\r\n\r\n\r\n\r\n        if(amount == 0) {\r\n\r\n            super._transfer(from, to, 0);\r\n\r\n            return;\r\n\r\n        }\r\n\r\n\r\n\r\n        if (from != owner() && to != owner() && to != address(this) && to != uniswapV2Pair && to != address(uniswapV2Router) && to != address(1) && to != address(0x000000000000000000000000000000000000dEaD)){\r\n\r\n            uint256 contractTokenBalanceTo = balanceOf(to);\r\n\r\n            require(contractTokenBalanceTo.add(amount) <= _maxWalletToken, \"Exceeds the MaxWalletToken:\");\r\n\r\n        }\r\n\r\n\r\n\r\n           if(\r\n\r\n            !swapping &&\r\n\r\n            from != owner() &&\r\n\r\n            tradingIsEnabled &&\r\n\r\n            automatedMarketMakerPairs[to] && // sells only by detecting transfer to automated market maker pair\r\n\r\n            from != address(uniswapV2Router) && //router -> pair is removing liquidity which shouldn't have max\r\n\r\n            !_isExcludedFromFees[to] //no max for those excluded from fees\r\n\r\n        ) {\r\n\r\n            require(amount <= maxSellTransactionAmount, \"Sell transfer amount exceeds the maxSellTransactionAmount.\");\r\n\r\n        } else if(from != owner() && to != owner() && tradingIsEnabled && !automatedMarketMakerPairs[from] && !automatedMarketMakerPairs[from] && from != address(uniswapV2Router) && to != address(uniswapV2Router)){\r\n\r\n            require(amount <= maxSellTransactionAmount, \"Max transfer amount reached\");\r\n\r\n        }\r\n\r\n\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n\r\n\r\n        if(\r\n\r\n            tradingIsEnabled &&\r\n\r\n            canSwap &&\r\n\r\n            !swapping &&\r\n\r\n            !automatedMarketMakerPairs[from] &&\r\n\r\n            from != liquidityWallet &&\r\n\r\n            to != liquidityWallet\r\n\r\n        ) {\r\n\r\n            swapping = true;\r\n\r\n\r\n\r\n            uint256 swapPieces = totalFees.sub(marketingFee);\r\n\r\n            uint256 swapTokens = contractTokenBalance.mul(liquidityFee).div(swapPieces);\r\n\r\n            uint256 sellTokens = contractTokenBalance.sub(swapTokens);\r\n\r\n\r\n\r\n            swapAndLiquify(swapTokens);\r\n\r\n            swapAndSendDividends(sellTokens);\r\n\r\n\r\n\r\n            swapping = false;\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        bool takeFee = tradingIsEnabled && !swapping;\r\n\r\n\r\n\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n\r\n            takeFee = false;\r\n\r\n        }\r\n\r\n\r\n\r\n        if(takeFee) {\r\n\r\n            uint256 fees = amount.mul(totalFees).div(100);\r\n\r\n            uint256 marketings = amount.mul(marketingFee).div(100);\r\n\r\n\r\n\r\n            // if sell, multiply by 1.2\r\n\r\n            if(automatedMarketMakerPairs[to]) {\r\n\r\n                fees = fees.mul(sellFeeIncreaseFactor).div(100);\r\n\r\n            }\r\n\r\n\r\n\r\n            amount = amount.sub(fees);\r\n\r\n            fees = fees.sub(marketings);\r\n\r\n\r\n\r\n            super._transfer(from, address(this), fees);\r\n\r\n            super._transfer(from, marketingWallet, marketings);\r\n\r\n        }\r\n\r\n\r\n\r\n        super._transfer(from, to, amount);\r\n\r\n\r\n\r\n        try dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n\r\n        try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n\r\n\r\n\r\n        if(!swapping) {\r\n\r\n            uint256 gas = gasForProcessing;\r\n\r\n\r\n\r\n            try dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n\r\n                emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n\r\n            }\r\n\r\n            catch {\r\n\r\n\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n\r\n        uint256 half = tokens.div(2);\r\n\r\n        uint256 otherHalf = tokens.sub(half);\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForEth(half);\r\n\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n\r\n\r\n        addLiquidity(otherHalf, newBalance);\r\n\r\n\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n\r\n    }\r\n\r\n\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n\r\n\r\n\r\n\r\n\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = address(this);\r\n\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n            tokenAmount,\r\n\r\n            0, // accept any amount of ETH\r\n\r\n            path,\r\n\r\n            address(this),\r\n\r\n            block.timestamp\r\n\r\n        );\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function swapTokensForETHB(uint256 tokenAmount, address recipient) private {\r\n\r\n\r\n\r\n        // generate the uniswap pair path of weth -> busd\r\n\r\n        address[] memory path = new address[](3);\r\n\r\n        path[0] = address(this);\r\n\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        path[2] = ETH;\r\n\r\n\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n\r\n\r\n        // make the swap\r\n\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\r\n            tokenAmount,\r\n\r\n            0, // accept any amount of BUSD\r\n\r\n            path,\r\n\r\n            recipient,\r\n\r\n            block.timestamp\r\n\r\n        );\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\r\n\r\n\r\n        // approve token transfer to cover all possible scenarios\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n\r\n\r\n        // add the liquidity\r\n\r\n       uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n\r\n            address(this),\r\n\r\n            tokenAmount,\r\n\r\n            0, // slippage is unavoidable\r\n\r\n            0, // slippage is unavoidable\r\n\r\n            liquidityWallet,\r\n\r\n            block.timestamp\r\n\r\n        );\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    function swapAndSendDividends(uint256 tokens) private {\r\n\r\n        swapTokensForETHB(tokens, address(this));\r\n\r\n\r\n\r\n        uint256 pieces = marketingETHFee.add(ETHRewardsFee);\r\n\r\n        uint256 ETHBalance = IERC20(ETH).balanceOf(address(this));\r\n\r\n        uint256 dividends = ETHBalance.mul(ETHRewardsFee).div(pieces);\r\n\r\n        uint256 marketings = ETHBalance.sub(dividends);\r\n\r\n\r\n\r\n        bool success = IERC20(ETH).transfer(address(dividendTracker), dividends);\r\n\r\n\r\n\r\n        if (success) {\r\n\r\n            dividendTracker.distributeBusdDividends(dividends);\r\n\r\n            emit SendDividends(tokens, dividends);\r\n\r\n        }\r\n\r\n\r\n\r\n        success = IERC20(ETH).transfer(marketingWallet, marketings);\r\n\r\n        if (success) {\r\n\r\n            emit SendMarketings(tokens, marketings);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncontract HOKKDividendTracker is DividendPayingToken, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    using SafeMathInt for int256;\r\n\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n\r\n\r\n    IterableMapping.Map private tokenHoldersMap;\r\n\r\n    uint256 public lastProcessedIndex;\r\n\r\n\r\n\r\n    mapping (address => bool) public excludedFromDividends;\r\n\r\n\r\n\r\n    mapping (address => uint256) public lastClaimTimes;\r\n\r\n\r\n\r\n    uint256 public claimWait;\r\n\r\n    uint256 public immutable minimumTokenBalanceForDividends;\r\n\r\n\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n\r\n\r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n\r\n\r\n\r\n    constructor() DividendPayingToken(\"HOKK_Dividend_Tracker\", \"HOKK_Dividend_Tracker\") {\r\n\r\n        claimWait = 3600;\r\n\r\n        minimumTokenBalanceForDividends = 250000 * (10**18); //must hold 250000+ tokens\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transfer(address, address, uint256) pure internal override {\r\n\r\n        require(false, \"HOKK_Dividend_Tracker: No transfers allowed\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function withdrawDividend() pure public override {\r\n\r\n        require(false, \"HOKK_Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main HOKK contract.\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n\r\n        require(!excludedFromDividends[account]);\r\n\r\n        excludedFromDividends[account] = true;\r\n\r\n\r\n\r\n        _setBalance(account, 0);\r\n\r\n        tokenHoldersMap.remove(account);\r\n\r\n\r\n\r\n        emit ExcludeFromDividends(account);\r\n\r\n    }\r\n\r\n\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n\r\n        require(newClaimWait >= 3600 && newClaimWait <= 86400, \"HOKK_Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\");\r\n\r\n        require(newClaimWait != claimWait, \"HOKK_Dividend_Tracker: Cannot update claimWait to same value\");\r\n\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n\r\n        claimWait = newClaimWait;\r\n\r\n    }\r\n\r\n\r\n\r\n    function getLastProcessedIndex() external view returns(uint256) {\r\n\r\n        return lastProcessedIndex;\r\n\r\n    }\r\n\r\n\r\n\r\n    function getNumberOfTokenHolders() external view returns(uint256) {\r\n\r\n        return tokenHoldersMap.keys.length;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function getAccount(address _account)\r\n\r\n        public view returns (\r\n\r\n            address account,\r\n\r\n            int256 index,\r\n\r\n            int256 iterationsUntilProcessed,\r\n\r\n            uint256 withdrawableDividends,\r\n\r\n            uint256 totalDividends,\r\n\r\n            uint256 lastClaimTime,\r\n\r\n            uint256 nextClaimTime,\r\n\r\n            uint256 secondsUntilAutoClaimAvailable) {\r\n\r\n        account = _account;\r\n\r\n\r\n\r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n\r\n\r\n\r\n        iterationsUntilProcessed = -1;\r\n\r\n\r\n\r\n        if(index >= 0) {\r\n\r\n            if(uint256(index) > lastProcessedIndex) {\r\n\r\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n\r\n            }\r\n\r\n            else {\r\n\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\r\n\r\n                                                        tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\r\n\r\n                                                        0;\r\n\r\n\r\n\r\n\r\n\r\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n\r\n\r\n        lastClaimTime = lastClaimTimes[account];\r\n\r\n\r\n\r\n        nextClaimTime = lastClaimTime > 0 ?\r\n\r\n                                    lastClaimTime.add(claimWait) :\r\n\r\n                                    0;\r\n\r\n\r\n\r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\r\n\r\n                                                    nextClaimTime.sub(block.timestamp) :\r\n\r\n                                                    0;\r\n\r\n    }\r\n\r\n\r\n\r\n    function getAccountAtIndex(uint256 index)\r\n\r\n        public view returns (\r\n\r\n            address,\r\n\r\n            int256,\r\n\r\n            int256,\r\n\r\n            uint256,\r\n\r\n            uint256,\r\n\r\n            uint256,\r\n\r\n            uint256,\r\n\r\n            uint256) {\r\n\r\n        if(index >= tokenHoldersMap.size()) {\r\n\r\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n\r\n        }\r\n\r\n\r\n\r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n\r\n\r\n        return getAccount(account);\r\n\r\n    }\r\n\r\n\r\n\r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n\r\n        if(lastClaimTime > block.timestamp)  {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n\r\n\r\n        return block.timestamp.sub(lastClaimTime) >= claimWait;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n\r\n        if(excludedFromDividends[account]) {\r\n\r\n            return;\r\n\r\n        }\r\n\r\n\r\n\r\n        if(newBalance >= minimumTokenBalanceForDividends) {\r\n\r\n            _setBalance(account, newBalance);\r\n\r\n            tokenHoldersMap.set(account, newBalance);\r\n\r\n        }\r\n\r\n        else {\r\n\r\n            _setBalance(account, 0);\r\n\r\n            tokenHoldersMap.remove(account);\r\n\r\n        }\r\n\r\n\r\n\r\n        processAccount(account, true);\r\n\r\n    }\r\n\r\n\r\n\r\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n\r\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n\r\n\r\n        if(numberOfTokenHolders == 0) {\r\n\r\n            return (0, 0, lastProcessedIndex);\r\n\r\n        }\r\n\r\n\r\n\r\n        uint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n\r\n\r\n        uint256 gasUsed = 0;\r\n\r\n\r\n\r\n        uint256 gasLeft = gasleft();\r\n\r\n\r\n\r\n        uint256 iterations = 0;\r\n\r\n        uint256 claims = 0;\r\n\r\n\r\n\r\n        while(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n\r\n            _lastProcessedIndex++;\r\n\r\n\r\n\r\n            if(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n\r\n                _lastProcessedIndex = 0;\r\n\r\n            }\r\n\r\n\r\n\r\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n\r\n\r\n            if(canAutoClaim(lastClaimTimes[account])) {\r\n\r\n                if(processAccount(payable(account), true)) {\r\n\r\n                    claims++;\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n            iterations++;\r\n\r\n\r\n\r\n            uint256 newGasLeft = gasleft();\r\n\r\n\r\n\r\n            if(gasLeft > newGasLeft) {\r\n\r\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n\r\n            }\r\n\r\n\r\n\r\n            gasLeft = newGasLeft;\r\n\r\n        }\r\n\r\n\r\n\r\n        lastProcessedIndex = _lastProcessedIndex;\r\n\r\n\r\n\r\n        return (iterations, claims, lastProcessedIndex);\r\n\r\n    }\r\n\r\n\r\n\r\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n\r\n\r\n        if(amount > 0) {\r\n\r\n            lastClaimTimes[account] = block.timestamp;\r\n\r\n            emit Claim(account, amount, automatic);\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"earlyParticipant\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfBuyers\",\"type\":\"uint256\"}],\"name\":\"FixedSaleBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendMarketings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract HOKKDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradingIsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingETHFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"recoverRate\",\"type\":\"uint256\"}],\"name\":\"recoverContractBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeIncreaseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAntiBotslist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ETHRewardFee\",\"type\":\"uint256\"}],\"name\":\"setETHRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ETHFee\",\"type\":\"uint256\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setTradingEnabledTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabledTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"}],\"name\":\"updateLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_presaleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"whitelistDxSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HokkaiduInu", "CompilerVersion": "v0.7.0+commit.9e61f92b", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "IterableMapping:b135364c28826b0ba93b4a1aa1bed7168fa38714", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://71a6f66eaced4b1efc35bc29edc3906d3592ba58a9ebc1b58f2d61260cfd38a2"}