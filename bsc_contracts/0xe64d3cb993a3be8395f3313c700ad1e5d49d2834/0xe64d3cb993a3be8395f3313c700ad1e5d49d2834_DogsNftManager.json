{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/DogPoundManager.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IRewardsVault.sol\\\";\\nimport \\\"./interfaces/IPancakePair.sol\\\";\\nimport \\\"./interfaces/IMasterchefPigs.sol\\\";\\nimport \\\"./interfaces/IPancakeFactory.sol\\\";\\nimport \\\"./interfaces/IDogsToken.sol\\\";\\nimport \\\"./interfaces/IDogPoundActions.sol\\\";\\nimport \\\"./interfaces/IStakeManager.sol\\\";\\nimport \\\"./interfaces/IRewardsVault.sol\\\";\\n\\n\\ninterface IDogPoundPool {\\n    function deposit(address _user, uint256 _amount) external;\\n    function withdraw(address _user, uint256 _amount) external;\\n    function getStake(address _user, uint256 _stakeID) external view returns(uint256 stakedAmount);\\n}\\n\\ncontract DogPoundManager is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    IStakeManager public StakeManager = IStakeManager(0x25A959dDaEcEb50c1B724C603A57fe7b32eCbEeA);\\n    IDogPoundPool public DogPoundLinearPool = IDogPoundPool(0x935B36a774f2c04b8fA92acf3528d7DF681C0297);\\n    IDogPoundPool public DogPoundAutoPool = IDogPoundPool(0xf911D1d7118278f86eedfD94bC7Cd141D299E28D);\\n    IDogPoundActions public DogPoundActions;\\n    IRewardsVault public rewardsVault = IRewardsVault(0x4c004C4fB925Be396F902DE262F2817dEeBC22Ec);\\n\\n    bool public isPaused;\\n    uint256 public walletReductionPerMonth = 200;\\n    uint256 public burnPercent = 30;\\n    uint256 public minHoldThreshold = 10e18;\\n\\n    uint256 public loyaltyScoreMaxReduction = 3000;\\n    uint256 public dogsDefaultTax = 9000;\\n    uint256 public minDogVarTax = 300;\\n    uint256 public withdrawlRestrictionTime = 24 hours;\\n    DogPoundManager public oldDp = DogPoundManager(0x6dA8227Bc7B576781ffCac69437e17b8D4F4aE41);\\n    address public dogsToken = 0x198271b868daE875bFea6e6E4045cDdA5d6B9829;\\n    IDogsToken public DogsToken = IDogsToken(dogsToken);\\n    IUniswapV2Router02 public constant PancakeRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    uint256 public linearPoolSize = oldDp.linearPoolSize();\\n    uint256 public autoPoolSize = oldDp.autoPoolSize();\\n\\n    struct UserInfo {\\n        uint256 walletStartTime;\\n        uint256 overThresholdTimeCounter;\\n        uint256 lastDepositTime;\\n        uint256 totalStaked;\\n    }\\n\\n    struct StakeInfo {\\n        uint256 amount;\\n        uint256 startTime;\\n        bool isAutoPool;\\n    } \\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    modifier notPaused() {\\n        require(!isPaused, \\\"notPaused: DogPound paused !\\\");\\n        _;\\n    }\\n\\n    constructor(){\\n        _approveTokenIfNeeded(0x198271b868daE875bFea6e6E4045cDdA5d6B9829);\\n    }\\n    \\n\\n    function deposit(uint256 _amount, bool _isAutoCompound) external notPaused {\\n        require(_amount > 0, 'deposit !> 0');\\n        initUser(msg.sender);\\n        StakeManager.saveStake(msg.sender, _amount, _isAutoCompound);\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\n        if (StakeManager.totalStaked(msg.sender) >= minHoldThreshold && userInfo[msg.sender].walletStartTime == 0){\\n                userInfo[msg.sender].walletStartTime = block.timestamp;\\n        }\\n        if (_isAutoCompound){\\n            DogsToken.transfer(address(DogPoundAutoPool), _amount);\\n            DogPoundAutoPool.deposit(msg.sender, _amount);\\n            autoPoolSize += _amount;\\n        } else {\\n            DogsToken.transfer(address(DogPoundLinearPool), _amount);\\n            DogPoundLinearPool.deposit(msg.sender, _amount);\\n            linearPoolSize += _amount;\\n        }\\n        userInfo[msg.sender].totalStaked += _amount;\\n        userInfo[msg.sender].lastDepositTime = block.timestamp;\\n\\n    }\\n\\n    function withdrawToWallet(uint256 _amount, uint256 _stakeID) external notPaused {\\n        initUser(msg.sender);\\n        require(block.timestamp - userInfo[msg.sender].lastDepositTime > withdrawlRestrictionTime,\\\"withdrawl locked\\\");\\n        _withdraw(_amount, _stakeID);\\n        if (StakeManager.totalStaked(msg.sender) < minHoldThreshold && userInfo[msg.sender].walletStartTime > 0){\\n            userInfo[msg.sender].overThresholdTimeCounter += block.timestamp - userInfo[msg.sender].walletStartTime;\\n            userInfo[msg.sender].walletStartTime = 0;\\n        }\\n        DogsToken.updateTransferTaxRate(0);\\n        DogsToken.transfer(msg.sender, _amount);\\n        DogsToken.updateTransferTaxRate(dogsDefaultTax);\\n    }\\n\\n    function swapFromWithdrawnStake(uint256 _amount, uint256 _stakeID, address[] memory path) public {\\n        initUser(msg.sender);\\n        StakeManager.utilizeWithdrawnStake(msg.sender, _amount, _stakeID);\\n        uint256 taxReduction = totalTaxReductionWithdrawnStake(msg.sender, _stakeID);\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\n        doSwap(address(this), _amount, taxReduction, path);\\n        IERC20 transfertoken = IERC20(path[path.length - 1]);\\n        uint256 balance = transfertoken.balanceOf(address(this));\\n        uint256 balance2 = DogsToken.balanceOf(address(this));\\n        DogsToken.updateTransferTaxRate(0);\\n        DogsToken.transfer(msg.sender, balance2);\\n        DogsToken.updateTransferTaxRate(dogsDefaultTax);\\n        transfertoken.transfer(msg.sender, balance);\\n    }\\n\\n    function transferFromWithdrawnStake(uint256 _amount, address _to, uint256 _stakeID) public {\\n        initUser(msg.sender);\\n        StakeManager.utilizeWithdrawnStake(msg.sender, _amount, _stakeID);\\n        uint256 taxReduction = totalTaxReductionWithdrawnStake(msg.sender, _stakeID);\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\n        doTransfer(_to , _amount, taxReduction);\\n    }\\n    //loyalty methods can stay unchanged\\n    function swapDogsWithLoyalty(uint256 _amount, address[] memory path) public {\\n        initUser(msg.sender);\\n        uint256 taxReduction = totalTaxReductionLoyaltyOnly(msg.sender);\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\n        doSwap(address(this), _amount, taxReduction, path);\\n        IERC20 transfertoken = IERC20(path[path.length - 1]);\\n        uint256 balance = transfertoken.balanceOf(address(this));\\n        uint256 balance2 = DogsToken.balanceOf(address(this));\\n        DogsToken.updateTransferTaxRate(0);\\n        DogsToken.transfer(msg.sender, balance2);\\n        DogsToken.updateTransferTaxRate(dogsDefaultTax);\\n        transfertoken.transfer(msg.sender, balance);\\n    }\\n    //loyalty methods can stay unchanged\\n    function transferDogsWithLoyalty(uint256 _amount, address _to) public {\\n        initUser(msg.sender);\\n        uint256 taxReduction = totalTaxReductionLoyaltyOnly(msg.sender);\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\n        doTransfer(_to ,_amount, taxReduction);\\n    }\\n\\n    function _approveTokenIfNeeded(address token) private {\\n        if (IERC20(token).allowance(address(this), address(PancakeRouter)) == 0) {\\n            IERC20(token).safeApprove(address(PancakeRouter), type(uint256).max);\\n        }\\n    }\\n\\n    // Internal functions\\n    function _withdraw(uint256 _amount, uint256 _stakeID) internal {\\n        bool isAutoPool = StakeManager.isStakeAutoPool(msg.sender, _stakeID);\\n        StakeManager.withdrawFromStake(msg.sender ,_amount, _stakeID); //require amount makes sense for stake\\n        if (isAutoPool){\\n            DogPoundAutoPool.withdraw(msg.sender, _amount);\\n            autoPoolSize -= _amount;\\n        } else {\\n            DogPoundLinearPool.withdraw(msg.sender, _amount);\\n            linearPoolSize -= _amount;\\n        }\\n        userInfo[msg.sender].totalStaked -= _amount;\\n    }\\n\\n    // View functions\\n    function walletTaxReduction(address _user) public view returns (uint256){\\n        UserInfo storage user = userInfo[_user];\\n        (uint256 e1, uint256 e2,uint256 _deptime, uint256 e3 )= readOldStruct(_user);\\n        if(user.lastDepositTime == 0 && _deptime != 0){\\n            uint256 currentReduction = 0;\\n            if (StakeManager.totalStaked(_user) < minHoldThreshold){\\n                currentReduction = (e2 / 30 days) * walletReductionPerMonth;\\n                if(currentReduction > loyaltyScoreMaxReduction){\\n                    return loyaltyScoreMaxReduction;\\n                }\\n                return currentReduction;\\n            }\\n            currentReduction = (((block.timestamp - e1) + e2) / 30 days) * walletReductionPerMonth;\\n            if(currentReduction > loyaltyScoreMaxReduction){\\n                return loyaltyScoreMaxReduction;\\n            }\\n            return currentReduction;  \\n\\n        }\\n        uint256 currentReduction = 0;\\n        if (StakeManager.totalStaked(_user) < minHoldThreshold){\\n            currentReduction = (user.overThresholdTimeCounter / 30 days) * walletReductionPerMonth;\\n            if(currentReduction > loyaltyScoreMaxReduction){\\n                return loyaltyScoreMaxReduction;\\n            }\\n            return currentReduction;\\n        }\\n        currentReduction = (((block.timestamp - user.walletStartTime) + user.overThresholdTimeCounter) / 30 days) * walletReductionPerMonth;\\n        if(currentReduction > loyaltyScoreMaxReduction){\\n            return loyaltyScoreMaxReduction;\\n        }\\n        return currentReduction;    \\n    }\\n\\n    function totalTaxReductionLoyaltyOnly(address _user)public view returns (uint256){\\n        uint256 walletReduction = walletTaxReduction(_user);\\n        if(walletReduction > (dogsDefaultTax - minDogVarTax)){\\n            walletReduction = (dogsDefaultTax - minDogVarTax);\\n        }else{\\n            walletReduction = dogsDefaultTax - walletReduction - minDogVarTax;\\n        }\\n        return walletReduction;\\n    }\\n    \\n\\n    function totalTaxReductionWithdrawnStake(address _user, uint256 _stakeID) public view returns (uint256){\\n        uint256 stakeReduction = StakeManager.getWithdrawnStakeTaxReduction(_user, _stakeID);\\n        uint256 walletReduction = walletTaxReduction(_user);\\n        uint256 _totalTaxReduction = stakeReduction + walletReduction;\\n        if(_totalTaxReduction >= (dogsDefaultTax - (2 * minDogVarTax))){\\n            _totalTaxReduction = 300;\\n        }else{\\n            _totalTaxReduction = dogsDefaultTax - _totalTaxReduction - minDogVarTax;\\n        }\\n        return _totalTaxReduction;\\n    }\\n\\n    function readOldStruct2(address _user) public view returns (uint256, uint256, uint256, uint256){\\n        if(userInfo[_user].lastDepositTime == 0){\\n                return oldDp.userInfo(_user);\\n            }\\n        return (userInfo[_user].walletStartTime,userInfo[_user].overThresholdTimeCounter,userInfo[_user].lastDepositTime,userInfo[_user].totalStaked );\\n    }\\n\\n    function setminHoldThreshold(uint256 _minHoldThreshold) external onlyOwner{\\n        minHoldThreshold = _minHoldThreshold;\\n    }\\n\\n    function setPoolSizes(uint256 s1, uint256 s2) external onlyOwner {\\n        linearPoolSize = s1;\\n        autoPoolSize = s2;\\n    }\\n\\n    function setAutoPool(address _autoPool) external onlyOwner {\\n        DogPoundAutoPool = IDogPoundPool(_autoPool);\\n    }\\n\\n    function setLinearPool(address _linearPool) external onlyOwner {\\n        DogPoundLinearPool = IDogPoundPool(_linearPool);\\n    }\\n\\n    function setStakeManager(IStakeManager _stakeManager) external onlyOwner {\\n        StakeManager = _stakeManager;\\n    }\\n\\n    function changeWalletReductionRate(uint256 walletReduction) external onlyOwner{\\n        require(walletReduction < 1000);\\n        walletReductionPerMonth = walletReduction;\\n    }\\n\\n    function changeWalletCapReduction(uint256 walletReductionCap) external onlyOwner{\\n        require(walletReductionCap < 6000);\\n        loyaltyScoreMaxReduction = walletReductionCap;\\n    }\\n\\n    function getAutoPoolSize() external view returns (uint256){\\n        if(linearPoolSize == 0 ){\\n            return 0;\\n        }\\n        return (autoPoolSize*10000/(linearPoolSize+autoPoolSize));\\n    }\\n\\n    function totalStaked(address _user) external view returns (uint256){\\n        return userInfo[_user].totalStaked;\\n    }\\n\\n    function changeBurnPercent(uint256 newBurn) external onlyOwner{\\n        require(burnPercent < 200);\\n        burnPercent = newBurn;\\n    }\\n\\n    function initUser(address _user) internal {\\n        if(userInfo[_user].lastDepositTime == 0){\\n            (uint256 e, uint256 e2,uint256 _deptime, uint256 e3 )= readOldStruct(_user);\\n            if(_deptime != 0){\\n                userInfo[_user].walletStartTime = e; \\n                userInfo[_user].overThresholdTimeCounter = e2;\\n                userInfo[_user].lastDepositTime = _deptime;\\n                userInfo[_user].totalStaked = e3;\\n            }\\n        }\\n    }\\n\\n    function readOldStruct(address _user) public view returns (uint256, uint256, uint256, uint256){\\n        return oldDp.userInfo(_user);\\n    }\\n\\n    function doSwap(address _to, uint256 _amount, uint256 _taxReduction, address[] memory path) internal  {\\n        uint256 burnAmount = (_amount * burnPercent)/1000;\\n        uint256 leftAmount =  _amount - burnAmount;\\n        uint256 tempTaxval = 1e14/(1e3 - burnPercent);\\n        uint256 taxreductionNew = (_taxReduction * tempTaxval) / 1e11;\\n\\n        DogsToken.updateTransferTaxRate(taxreductionNew);\\n        // make the swap\\n        PancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            leftAmount,\\n            0, // accept any amount of tokens\\n            path,\\n            _to,\\n            block.timestamp\\n        );\\n\\n        DogsToken.updateTransferTaxRate(dogsDefaultTax);\\n\\n        DogsToken.burn(burnAmount);\\n\\n    }\\n\\n    function doTransfer(address _to, uint256 _amount, uint256 _taxReduction) internal {\\n        uint256 burnAmount = (_amount * burnPercent)/1000;\\n        uint256 leftAmount =  _amount - burnAmount;\\n        uint256 tempTaxval = 1e14/(1e3 - burnPercent);\\n        uint256 taxreductionNew = (_taxReduction * tempTaxval) / 1e11;\\n\\n        DogsToken.updateTransferTaxRate(taxreductionNew);\\n\\n        DogsToken.transfer(_to, leftAmount);\\n\\n        DogsToken.updateTransferTaxRate(dogsDefaultTax);\\n\\n        DogsToken.burn(burnAmount);\\n\\n    }\\n\\n    function setDogsTokenAndDefaultTax(address _address, uint256 _defaultTax) external onlyOwner {\\n        DogsToken = IDogsToken(_address);\\n        dogsDefaultTax = _defaultTax;\\n    }\\n\\n    function setRewardsVault(address _rewardsVaultAddress) public onlyOwner{\\n        rewardsVault = IRewardsVault(_rewardsVaultAddress);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/DogPoundManagerV3.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IRewardsVault.sol\\\";\\r\\nimport \\\"./interfaces/IPancakePair.sol\\\";\\r\\nimport \\\"./interfaces/IMasterchefPigs.sol\\\";\\r\\nimport \\\"./interfaces/IPancakeFactory.sol\\\";\\r\\nimport \\\"./interfaces/IDogsToken.sol\\\";\\r\\nimport \\\"./interfaces/IDogPoundActions.sol\\\";\\r\\nimport \\\"./interfaces/IStakeManager.sol\\\";\\r\\nimport \\\"./interfaces/IRewardsVault.sol\\\";\\r\\nimport \\\".//DogsNftManager.sol\\\";\\r\\nimport \\\"./DogPoundManager.sol\\\";\\r\\nimport \\\"./StakeManager.sol\\\";\\r\\nimport \\\"./StakeManagerV2.sol\\\";\\r\\nimport \\\"./NftPigMcStakingBusd.sol\\\";\\r\\n\\r\\ninterface IDPMOLD {\\r\\n    function linearPoolSize() external view returns (uint256);\\r\\n\\r\\n    function autoPoolSize() external view returns (uint256);\\r\\n\\r\\n    function userInfo(\\r\\n        address\\r\\n    ) external view returns (uint256, uint256, uint256, uint256);\\r\\n}\\r\\n\\r\\ncontract DogPoundManagerV3 is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    DogsNftManager public nftManager;\\r\\n    StakeManager public stakeManagerV1 =\\r\\n        StakeManager(0x25A959dDaEcEb50c1B724C603A57fe7b32eCbEeA);\\r\\n    StakeManagerV2 public stakeManager;\\r\\n    IDogPoundPool public DogPoundLinearPool =\\r\\n        IDogPoundPool(0x935B36a774f2c04b8fA92acf3528d7DF681C0297);\\r\\n    IDogPoundPool public DogPoundAutoPool =\\r\\n        IDogPoundPool(0xf911D1d7118278f86eedfD94bC7Cd141D299E28D);\\r\\n    IDogPoundActions public DogPoundActions;\\r\\n    IRewardsVault public rewardsVault =\\r\\n        IRewardsVault(0x4c004C4fB925Be396F902DE262F2817dEeBC22Ec);\\r\\n\\r\\n    uint256 public walletReductionPerMonth = 200;\\r\\n    uint256 public burnPercent = 30;\\r\\n    uint256 public minHoldThreshold = 10e18;\\r\\n    uint256 public dustAmount = 100000;\\r\\n    uint256 public loyaltyScoreMaxReduction = 1000;\\r\\n    uint256 public dogsDefaultTax = 9000;\\r\\n    uint256 public minDogVarTax = 300;\\r\\n    uint256 public withdrawlRestrictionTime = 24 hours;\\r\\n    DogPoundManager public oldDp =\\r\\n        DogPoundManager(0x1Bc00F2076A97A68511109883B0671721ff51955);\\r\\n    IDPMOLD public oldOldDp =\\r\\n        IDPMOLD(0x6dA8227Bc7B576781ffCac69437e17b8D4F4aE41);\\r\\n    address public dogsToken = 0x198271b868daE875bFea6e6E4045cDdA5d6B9829;\\r\\n    NftPigMcStakingBusd public nftStakeBusd;\\r\\n    NftPigMcStakingBusd public nftStakeBnb;\\r\\n    IDogsToken public DogsToken = IDogsToken(dogsToken);\\r\\n    IUniswapV2Router02 public constant PancakeRouter =\\r\\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n    uint256 public linearPoolSize;\\r\\n    uint256 public autoPoolSize;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 walletStartTime;\\r\\n        uint256 overThresholdTimeCounter;\\r\\n        uint256 lastDepositTime;\\r\\n        uint256 totalStaked;\\r\\n    }\\r\\n\\r\\n    struct StakeInfo {\\r\\n        uint256 amount;\\r\\n        uint256 startTime;\\r\\n        bool isAutoPool;\\r\\n    }\\r\\n\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n\\r\\n    constructor(\\r\\n        address _nftManager,\\r\\n        address _nftStakeBusd,\\r\\n        address _nftStakeBnb\\r\\n    ) {\\r\\n        nftStakeBusd = NftPigMcStakingBusd(payable(_nftStakeBusd));\\r\\n        nftStakeBnb = NftPigMcStakingBusd(payable(_nftStakeBnb));\\r\\n        nftManager = DogsNftManager(_nftManager);\\r\\n\\r\\n        autoPoolSize = oldDp.autoPoolSize();\\r\\n        linearPoolSize = oldDp.linearPoolSize();\\r\\n        _approveTokenIfNeeded(\\r\\n            0x198271b868daE875bFea6e6E4045cDdA5d6B9829,\\r\\n            address(PancakeRouter)\\r\\n        );\\r\\n        _approveTokenIfNeeded(\\r\\n            0x198271b868daE875bFea6e6E4045cDdA5d6B9829,\\r\\n            address(_nftManager)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _amount, bool _isAutoCompound) external {\\r\\n        require(_amount > 0, \\\"deposit !> 0\\\");\\r\\n        initUser(msg.sender);\\r\\n        stakeManager.saveStake(msg.sender, _amount, _isAutoCompound);\\r\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        if (\\r\\n            userInfo[msg.sender].totalStaked + _amount >= minHoldThreshold &&\\r\\n            userInfo[msg.sender].walletStartTime == 0\\r\\n        ) {\\r\\n            userInfo[msg.sender].walletStartTime = block.timestamp;\\r\\n        }\\r\\n        if (_isAutoCompound) {\\r\\n            DogsToken.transfer(address(DogPoundAutoPool), _amount);\\r\\n            DogPoundAutoPool.deposit(msg.sender, _amount);\\r\\n            autoPoolSize += _amount;\\r\\n        } else {\\r\\n            DogsToken.transfer(address(DogPoundLinearPool), _amount);\\r\\n            DogPoundLinearPool.deposit(msg.sender, _amount);\\r\\n            linearPoolSize += _amount;\\r\\n        }\\r\\n        userInfo[msg.sender].totalStaked += _amount;\\r\\n        userInfo[msg.sender].lastDepositTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function depositOldUserInit(\\r\\n        uint256 _amount,\\r\\n        bool _isAutoCompound,\\r\\n        uint256 _lastActiveStake\\r\\n    ) external {\\r\\n        require(_amount > 0, \\\"deposit !> 0\\\");\\r\\n        initUser(msg.sender);\\r\\n        stakeManager.saveStakeOldUserInit(\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            _isAutoCompound,\\r\\n            _lastActiveStake\\r\\n        );\\r\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        if (\\r\\n            userInfo[msg.sender].totalStaked >= minHoldThreshold &&\\r\\n            userInfo[msg.sender].walletStartTime == 0\\r\\n        ) {\\r\\n            userInfo[msg.sender].walletStartTime = block.timestamp;\\r\\n        }\\r\\n        if (_isAutoCompound) {\\r\\n            DogsToken.transfer(address(DogPoundAutoPool), _amount);\\r\\n            DogPoundAutoPool.deposit(msg.sender, _amount);\\r\\n            autoPoolSize += _amount;\\r\\n        } else {\\r\\n            DogsToken.transfer(address(DogPoundLinearPool), _amount);\\r\\n            DogPoundLinearPool.deposit(msg.sender, _amount);\\r\\n            linearPoolSize += _amount;\\r\\n        }\\r\\n        userInfo[msg.sender].totalStaked += _amount;\\r\\n        userInfo[msg.sender].lastDepositTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function withdrawToWallet(uint256 _amount, uint256 _stakeID) external {\\r\\n        initUser(msg.sender);\\r\\n        require(\\r\\n            block.timestamp - userInfo[msg.sender].lastDepositTime >\\r\\n                withdrawlRestrictionTime,\\r\\n            \\\"withdrawl locked\\\"\\r\\n        );\\r\\n        _withdraw(_amount, _stakeID);\\r\\n        if (\\r\\n            userInfo[msg.sender].totalStaked < minHoldThreshold &&\\r\\n            userInfo[msg.sender].walletStartTime > 0\\r\\n        ) {\\r\\n            userInfo[msg.sender].overThresholdTimeCounter +=\\r\\n                block.timestamp -\\r\\n                userInfo[msg.sender].walletStartTime;\\r\\n            userInfo[msg.sender].walletStartTime = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapFromWithdrawnStake(\\r\\n        uint256 _amount,\\r\\n        uint256 _tokenID,\\r\\n        address[] memory path\\r\\n    ) public {\\r\\n        initUser(msg.sender);\\r\\n        uint256 taxReduction = totalTaxReductionWithdrawnStake(\\r\\n            msg.sender,\\r\\n            _tokenID\\r\\n        );\\r\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\r\\n        nftManager.useNFTbalance(_tokenID, _amount, address(this));\\r\\n        doSwap(address(this), _amount, taxReduction, path);\\r\\n        IERC20 transfertoken = IERC20(path[path.length - 1]);\\r\\n        uint256 balance = transfertoken.balanceOf(address(this));\\r\\n        uint256 balance2 = DogsToken.balanceOf(address(this));\\r\\n        nftManager.returnNFTbalance(_tokenID, balance2, address(this));\\r\\n        nftManager.utilizeNFTbalance(_tokenID, _amount - balance2);\\r\\n        transfertoken.transfer(msg.sender, balance);\\r\\n        if (\\r\\n            nftManager.nftPotentialBalance(_tokenID) +\\r\\n                nftStakeBnb.lpAmount(_tokenID) +\\r\\n                nftStakeBusd.lpAmount(_tokenID) >\\r\\n            dustAmount\\r\\n        ) {\\r\\n            nftManager.transferFrom(address(this), msg.sender, _tokenID);\\r\\n        } else {\\r\\n            nftManager.transferFrom(\\r\\n                address(this),\\r\\n                0x000000000000000000000000000000000000dEaD,\\r\\n                _tokenID\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferFromWithdrawnStake(\\r\\n        uint256 _amount,\\r\\n        address _to,\\r\\n        uint256 _tokenID\\r\\n    ) public {\\r\\n        initUser(msg.sender);\\r\\n        uint256 taxReduction = totalTaxReductionWithdrawnStake(\\r\\n            msg.sender,\\r\\n            _tokenID\\r\\n        );\\r\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\r\\n        nftManager.useNFTbalance(_tokenID, _amount, address(this));\\r\\n        nftManager.utilizeNFTbalance(_tokenID, _amount);\\r\\n        doTransfer(_to, _amount, taxReduction);\\r\\n        if (\\r\\n            nftManager.nftPotentialBalance(_tokenID) +\\r\\n                nftStakeBnb.lpAmount(_tokenID) +\\r\\n                nftStakeBusd.lpAmount(_tokenID) >\\r\\n            dustAmount\\r\\n        ) {\\r\\n            nftManager.transferFrom(address(this), msg.sender, _tokenID);\\r\\n        } else {\\r\\n            nftManager.transferFrom(\\r\\n                address(this),\\r\\n                0x000000000000000000000000000000000000dEaD,\\r\\n                _tokenID\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function returnNftBalanceThroughManager(\\r\\n        uint256 _tokenID,\\r\\n        uint256 _amount\\r\\n    ) public {\\r\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\r\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        nftManager.returnNFTbalance(_tokenID, _amount, address(this));\\r\\n        nftManager.transferFrom(address(this), msg.sender, _tokenID);\\r\\n    }\\r\\n\\r\\n    function _approveTokenIfNeeded(address token, address _address) private {\\r\\n        if (IERC20(token).allowance(address(this), address(_address)) == 0) {\\r\\n            IERC20(token).safeApprove(address(_address), type(uint256).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Internal functions\\r\\n    function _withdraw(uint256 _amount, uint256 _stakeID) internal {\\r\\n        bool isAutoPool = stakeManager.isStakeAutoPool(msg.sender, _stakeID);\\r\\n        if (isAutoPool) {\\r\\n            DogPoundAutoPool.withdraw(msg.sender, _amount);\\r\\n            autoPoolSize -= _amount;\\r\\n        } else {\\r\\n            DogPoundLinearPool.withdraw(msg.sender, _amount);\\r\\n            linearPoolSize -= _amount;\\r\\n        }\\r\\n        stakeManager.withdrawFromStake(\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            _stakeID,\\r\\n            address(this)\\r\\n        );\\r\\n        userInfo[msg.sender].totalStaked -= _amount;\\r\\n    }\\r\\n\\r\\n    // View functions\\r\\n    function walletTaxReduction(address _user) public view returns (uint256) {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        uint256 walletStartTime = user.walletStartTime;\\r\\n        uint256 overThresholdTimeCounter = user.overThresholdTimeCounter;\\r\\n        uint256 totalStaked = user.totalStaked;\\r\\n        if (user.lastDepositTime == 0) {\\r\\n            (walletStartTime, overThresholdTimeCounter, , ) = oldDp\\r\\n                .readOldStruct2(_user);\\r\\n            totalStaked = stakeManagerV1.totalStaked(_user);\\r\\n        }\\r\\n        uint256 currentReduction = 0;\\r\\n        if (totalStaked < minHoldThreshold) {\\r\\n            currentReduction =\\r\\n                (overThresholdTimeCounter / 30 days) *\\r\\n                walletReductionPerMonth;\\r\\n            if (currentReduction > loyaltyScoreMaxReduction) {\\r\\n                return loyaltyScoreMaxReduction;\\r\\n            }\\r\\n            return currentReduction;\\r\\n        }\\r\\n        currentReduction =\\r\\n            (((block.timestamp - walletStartTime) + overThresholdTimeCounter) /\\r\\n                30 days) *\\r\\n            walletReductionPerMonth;\\r\\n        if (currentReduction > loyaltyScoreMaxReduction) {\\r\\n            return loyaltyScoreMaxReduction;\\r\\n        }\\r\\n        return currentReduction;\\r\\n    }\\r\\n\\r\\n    function totalTaxReductionWithdrawnStake(\\r\\n        address _user,\\r\\n        uint256 _tokenID\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 stakeReduction = stakeManager.getWithdrawnStakeTaxReduction(\\r\\n            _tokenID\\r\\n        );\\r\\n        uint256 walletReduction = walletTaxReduction(_user);\\r\\n        uint256 _totalTaxReduction = stakeReduction + walletReduction;\\r\\n        if (_totalTaxReduction >= (dogsDefaultTax - (2 * minDogVarTax))) {\\r\\n            _totalTaxReduction = 300;\\r\\n        } else {\\r\\n            _totalTaxReduction =\\r\\n                dogsDefaultTax -\\r\\n                _totalTaxReduction -\\r\\n                minDogVarTax;\\r\\n        }\\r\\n        return _totalTaxReduction;\\r\\n    }\\r\\n\\r\\n    function transitionOldWithdrawnStake(\\r\\n        address _user,\\r\\n        uint256 _stakeID\\r\\n    ) external {\\r\\n        uint256 _amount = stakeManager\\r\\n            .withdrawnStakeMove(_user, _stakeID)\\r\\n            .amount;\\r\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        stakeManager.transitionOldWithdrawnStake(\\r\\n            _user,\\r\\n            _stakeID,\\r\\n            address(this)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function readOldStruct2(\\r\\n        address _user\\r\\n    ) public view returns (uint256, uint256, uint256, uint256) {\\r\\n        if (userInfo[_user].lastDepositTime == 0) {\\r\\n            return oldDp.readOldStruct2(_user);\\r\\n        }\\r\\n        return (\\r\\n            userInfo[_user].walletStartTime,\\r\\n            userInfo[_user].overThresholdTimeCounter,\\r\\n            userInfo[_user].lastDepositTime,\\r\\n            userInfo[_user].totalStaked\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setminHoldThreshold(uint256 _minHoldThreshold) external onlyOwner {\\r\\n        minHoldThreshold = _minHoldThreshold;\\r\\n    }\\r\\n\\r\\n    function setPoolSizes(uint256 s1, uint256 s2) external onlyOwner {\\r\\n        linearPoolSize = s1;\\r\\n        autoPoolSize = s2;\\r\\n    }\\r\\n\\r\\n    function setAutoPool(address _autoPool) external onlyOwner {\\r\\n        DogPoundAutoPool = IDogPoundPool(_autoPool);\\r\\n    }\\r\\n\\r\\n    function setLinearPool(address _linearPool) external onlyOwner {\\r\\n        DogPoundLinearPool = IDogPoundPool(_linearPool);\\r\\n    }\\r\\n\\r\\n    function setNftManager(address _nftManager) external onlyOwner {\\r\\n        nftManager = DogsNftManager(_nftManager);\\r\\n        _approveTokenIfNeeded(\\r\\n            0x198271b868daE875bFea6e6E4045cDdA5d6B9829,\\r\\n            address(nftManager)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setStakeManager(address _stakeManager) external onlyOwner {\\r\\n        stakeManager = StakeManagerV2(_stakeManager);\\r\\n    }\\r\\n\\r\\n    function changeWalletReductionRate(\\r\\n        uint256 walletReduction\\r\\n    ) external onlyOwner {\\r\\n        require(walletReduction < 1000);\\r\\n        walletReductionPerMonth = walletReduction;\\r\\n    }\\r\\n\\r\\n    function changeWalletCapReduction(\\r\\n        uint256 walletReductionCap\\r\\n    ) external onlyOwner {\\r\\n        require(walletReductionCap < 6000);\\r\\n        loyaltyScoreMaxReduction = walletReductionCap;\\r\\n    }\\r\\n\\r\\n    function getAutoPoolSize() external view returns (uint256) {\\r\\n        if (linearPoolSize == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        return ((autoPoolSize * 10000) / (linearPoolSize + autoPoolSize));\\r\\n    }\\r\\n\\r\\n    function totalStaked(address _user) external view returns (uint256) {\\r\\n        return userInfo[_user].totalStaked;\\r\\n    }\\r\\n\\r\\n    function changeBurnPercent(uint256 newBurn) external onlyOwner {\\r\\n        require(burnPercent < 200);\\r\\n        burnPercent = newBurn;\\r\\n    }\\r\\n\\r\\n    function initUser(address _user) internal {\\r\\n        if (userInfo[_user].lastDepositTime == 0) {\\r\\n            (uint256 e, uint256 e2, uint256 _deptime, uint256 e3) = oldDp\\r\\n                .readOldStruct2(_user);\\r\\n            if (_deptime != 0) {\\r\\n                userInfo[_user].walletStartTime = e;\\r\\n                userInfo[_user].overThresholdTimeCounter = e2;\\r\\n                userInfo[_user].lastDepositTime = _deptime;\\r\\n                userInfo[_user].totalStaked = stakeManagerV1.totalStaked(_user);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function readOldStruct(\\r\\n        address _user\\r\\n    ) public view returns (uint256, uint256, uint256, uint256) {\\r\\n        return oldDp.userInfo(_user);\\r\\n    }\\r\\n\\r\\n    function readOldOldStruct(\\r\\n        address _user\\r\\n    ) public view returns (uint256, uint256, uint256, uint256) {\\r\\n        return oldOldDp.userInfo(_user);\\r\\n    }\\r\\n\\r\\n    function doSwap(\\r\\n        address _to,\\r\\n        uint256 _amount,\\r\\n        uint256 _taxReduction,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        uint256 burnAmount = (_amount * burnPercent) / 1000;\\r\\n        uint256 leftAmount = _amount - burnAmount;\\r\\n        uint256 tempTaxval = 1e14 / (1e3 - burnPercent);\\r\\n        uint256 taxreductionNew = (_taxReduction * tempTaxval) / 1e11;\\r\\n\\r\\n        DogsToken.updateTransferTaxRate(taxreductionNew);\\r\\n        // make the swap\\r\\n        PancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            leftAmount,\\r\\n            0, // accept any amount of tokens\\r\\n            path,\\r\\n            _to,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        DogsToken.updateTransferTaxRate(dogsDefaultTax);\\r\\n\\r\\n        DogsToken.burn(burnAmount);\\r\\n    }\\r\\n\\r\\n    function doTransfer(\\r\\n        address _to,\\r\\n        uint256 _amount,\\r\\n        uint256 _taxReduction\\r\\n    ) internal {\\r\\n        uint256 burnAmount = (_amount * burnPercent) / 1000;\\r\\n        uint256 leftAmount = _amount - burnAmount;\\r\\n        uint256 tempTaxval = 1e14 / (1e3 - burnPercent);\\r\\n        uint256 taxreductionNew = (_taxReduction * tempTaxval) / 1e11;\\r\\n\\r\\n        DogsToken.updateTransferTaxRate(taxreductionNew);\\r\\n\\r\\n        DogsToken.transfer(_to, leftAmount);\\r\\n\\r\\n        DogsToken.updateTransferTaxRate(dogsDefaultTax);\\r\\n\\r\\n        DogsToken.burn(burnAmount);\\r\\n    }\\r\\n\\r\\n    function setDogsTokenAndDefaultTax(\\r\\n        address _address,\\r\\n        uint256 _defaultTax\\r\\n    ) external onlyOwner {\\r\\n        DogsToken = IDogsToken(_address);\\r\\n        dogsDefaultTax = _defaultTax;\\r\\n    }\\r\\n\\r\\n    function setRewardsVault(address _rewardsVaultAddress) public onlyOwner {\\r\\n        rewardsVault = IRewardsVault(_rewardsVaultAddress);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/DogsNftManager.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IDogsToken.sol\\\";\\r\\nimport \\\"./interfaces/IStakeManager.sol\\\";\\r\\n\\r\\ncontract DogsNftManager is Ownable, ERC721, ERC721Enumerable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Strings for uint256;\\r\\n    mapping(address => bool) public allowedAddress;\\r\\n    mapping(uint256 => uint256) public nftHoldingBalance;\\r\\n    mapping(uint256 => uint256) public nftPotentialBalance;\\r\\n    mapping(uint256 => uint256) public nftLastTime;\\r\\n    string public baseURI = \\\"https://animalfarm-nfts.vercel.app/api/nft/\\\";\\t\\r\\n    string public baseExtension = \\\"\\\";\\r\\n    address public dogsToken = 0x198271b868daE875bFea6e6E4045cDdA5d6B9829;\\r\\n    IDogsToken public DogsToken = IDogsToken(dogsToken);\\r\\n    uint256 currentTokenID = 50;\\r\\n    uint256 limitTime = 300;\\r\\n    modifier onlyAllowedAddress() {\\r\\n        require(allowedAddress[msg.sender], \\\"allowed only\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\t\\r\\n    constructor() ERC721(\\\"dogpoundNFT\\\", \\\"DPMNFT\\\") {}\\r\\n\\r\\n    function mintForWithdrawnStake(\\r\\n        address _to,\\r\\n        uint256 _amount,\\r\\n        address _from\\r\\n    ) external onlyAllowedAddress returns (uint256) {\\r\\n        uint256 tokenID = currentTokenID;\\r\\n        DogsToken.transferFrom(_from, address(this), _amount);\\r\\n        _safeMint(_to, tokenID);\\r\\n        nftHoldingBalance[tokenID] = _amount;\\r\\n        nftPotentialBalance[tokenID] = _amount;\\r\\n        currentTokenID += 1;\\r\\n        return tokenID;\\r\\n    }\\r\\n\\r\\n    function useNFTbalance(\\r\\n        uint256 _tokenID,\\r\\n        uint256 _amount,\\r\\n        address _to\\r\\n    ) external onlyAllowedAddress {\\r\\n        require(\\r\\n            _amount <= nftHoldingBalance[_tokenID],\\r\\n            \\\"not enough tokens inside nft\\\"\\r\\n        );\\r\\n        require(ownerOf(_tokenID) == msg.sender, \\\"caller doesnt own nft\\\");\\r\\n        nftHoldingBalance[_tokenID] -= _amount;\\r\\n        DogsToken.transfer(_to, _amount);\\r\\n        nftLastTime[_tokenID] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function utilizeNFTbalance(\\r\\n        uint256 _tokenID,\\r\\n        uint256 _amount\\r\\n    ) external onlyAllowedAddress {\\r\\n        require(\\r\\n            nftPotentialBalance[_tokenID] >= _amount &&\\r\\n                (nftPotentialBalance[_tokenID] - _amount) >=\\r\\n                nftHoldingBalance[_tokenID],\\r\\n            \\\"attempt to over utilize\\\"\\r\\n        );\\r\\n        require(ownerOf(_tokenID) == msg.sender, \\\"caller doesnt own nft\\\");\\r\\n        nftPotentialBalance[_tokenID] -= _amount;\\r\\n        nftLastTime[_tokenID] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function returnNFTbalance(\\r\\n        uint256 _tokenID,\\r\\n        uint256 _amount,\\r\\n        address _from\\r\\n    ) external onlyAllowedAddress {\\r\\n        require(\\r\\n            (nftHoldingBalance[_tokenID] + _amount) <=\\r\\n                nftPotentialBalance[_tokenID],\\r\\n            \\\"attempt to over deposit\\\"\\r\\n        );\\r\\n        nftHoldingBalance[_tokenID] += _amount;\\r\\n        DogsToken.transferFrom(_from, address(this), _amount);\\r\\n        nftLastTime[_tokenID] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function returnNFTbalancePublic(\\r\\n        uint256 _tokenID,\\r\\n        uint256 _amount\\r\\n    ) external {\\r\\n        require(\\r\\n            (nftHoldingBalance[_tokenID] + _amount) <=\\r\\n                nftPotentialBalance[_tokenID],\\r\\n            \\\"attempt to over deposit\\\"\\r\\n        );\\r\\n        require(\\r\\n            ownerOf(_tokenID) == msg.sender,\\r\\n            \\\"you must own the nft you want to fill\\\"\\r\\n        );\\r\\n        nftHoldingBalance[_tokenID] += _amount;\\r\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        nftLastTime[_tokenID] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function setAllowedAddress(address _address, bool _state) public onlyOwner {\\r\\n        allowedAddress[_address] = _state;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal override {\\r\\n        require(\\r\\n            (block.timestamp - nftLastTime[tokenId]) >= limitTime ||\\r\\n                allowedAddress[from] ||\\r\\n                allowedAddress[to],\\r\\n            \\\"transfer cooldown\\\"\\r\\n        );\\r\\n        super._transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function setCooldown(uint256 _cooldown) external onlyOwner {\\r\\n        limitTime = _cooldown;\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal override(ERC721, ERC721Enumerable) {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view override(ERC721, ERC721Enumerable) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(\\r\\n        uint256 tokenId\\r\\n    ) public view virtual override returns (string memory) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        string memory currentBaseURI = _baseURI();\\r\\n        return\\r\\n            bytes(currentBaseURI).length > 0\\r\\n                ? string(\\r\\n                    abi.encodePacked(\\r\\n                        currentBaseURI,\\r\\n                        tokenId.toString(),\\r\\n                        baseExtension\\r\\n                    )\\r\\n                )\\r\\n                : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\r\\n        baseURI = _newBaseURI;\\r\\n    }\\r\\n\\r\\n    function setBaseExtension(\\r\\n        string memory _newBaseExtension\\r\\n    ) public onlyOwner {\\r\\n        baseExtension = _newBaseExtension;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IDogPoundActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDogPoundActions{\\n    function doSwap(address _from, uint256 _amount, uint256 _taxReduction, address[] memory path) external;\\n    function doTransfer(address _from, address _to, uint256 _amount, uint256 _taxReduction) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDogsExchangeHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDogsExchangeHelper {\\n    function addDogsBNBLiquidity(uint256 nativeAmount) external payable returns (uint256 lpAmount, uint256 unusedEth, uint256 unusedToken);\\n    function addDogsLiquidity(address baseTokenAddress, uint256 baseAmount, uint256 dogsAmount) external returns (uint256 lpAmount, uint256 unusedEth, uint256 unusedToken);\\n    function buyDogsBNB(uint256 _minAmountOut, address[] memory _path) external payable returns(uint256 amountDogsBought);\\n    function buyDogs(uint256 _tokenAmount, uint256 _minAmountOut, address[] memory _path) external returns(uint256 amountDogsBought);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDogsToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IDogsToken is IERC20{\\n    function updateTransferTaxRate(uint256 _txBaseTax) external;\\n    function updateTransferTaxRateToDefault() external;\\n    function burn(uint256 _amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMasterchefPigs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMasterchefPigs {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function pendingPigs(uint256 _pid, address _user) external view returns (uint256);\\n    function depositMigrator(address _userAddress, uint256 _pid, uint256 _amount) external;\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPancakeFactory.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPancakePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRewardsVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRewardsVault {\\n\\n    function payoutDivs()\\n    external;\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IStakeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStakeManager {\\n    \\n    struct UserInfo {\\n\\n        uint256 totalStakedDefault; //linear\\n        uint256 totalStakedAutoCompound;\\n\\n        uint256 walletStartTime;\\n        uint256 overThresholdTimeCounter;\\n\\n        uint256 activeStakesCount;\\n        uint256 withdrawStakesCount;\\n\\n        mapping(uint256 => StakeInfo) activeStakes;\\n        mapping(uint256 => WithdrawnStakeInfo) withdrawnStakes;\\n\\n    }\\n\\n    struct WithdrawnStakeInfo {\\n        uint256 amount;\\n        uint256 taxReduction;\\n    }\\n\\n\\n    struct StakeInfo {\\n        uint256 amount;\\n        uint256 startTime;\\n        bool isAutoPool;\\n    } // todo find a way to refactor\\n\\n    function saveStake(address _user, uint256 _amount, bool isAutoCompound) external;\\n    function withdrawFromStake(address _user,uint256 _amount, uint256 _stakeID) external;\\n    function getUserStake(address _user, uint256 _stakeID) external view returns (StakeInfo memory);\\n    function getActiveStakeTaxReduction(address _user, uint256 _stakeID) external view returns (uint256);\\n    function getWithdrawnStakeTaxReduction(address _user, uint256 _stakeID) external view returns (uint256);\\n    function isStakeAutoPool(address _user, uint256 _stakeID) external view returns (bool);\\n    function totalStaked(address _user) external view returns (uint256);\\n    function utilizeWithdrawnStake(address _user, uint256 _amount, uint256 _stakeID) external;\\n}\"\r\n    },\r\n    \"contracts/LPToTokenCalculator.sol\": {\r\n      \"content\": \"pragma solidity >=0.7.0 <0.9.0;\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\n\\ncontract LPToTokenCalculator {\\n    address private constant UNISWAP_ROUTER_ADDRESS = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\n    IUniswapV2Router02 public uniswapRouter;\\n\\n    constructor() public {\\n        uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\\n    }\\n\\n    function calculateTokensFromLPBusd(uint lpAmount) external view returns (uint tokenAAmount, uint tokenBAmount) {\\n        address pairAddress = IUniswapV2Factory(uniswapRouter.factory()).getPair(0x198271b868daE875bFea6e6E4045cDdA5d6B9829, 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\n        \\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\\n        uint totalSupply = pair.totalSupply();\\n\\n        // Calculate token amounts\\n        tokenAAmount = (uint(reserve0) * lpAmount) / totalSupply;\\n        tokenBAmount = (uint(reserve1) * lpAmount) / totalSupply;\\n    }\\n\\n    function calculateTokensFromLPBnb(uint lpAmount) external view returns (uint tokenAAmount, uint tokenBAmount) {\\n        address pairAddress = IUniswapV2Factory(uniswapRouter.factory()).getPair(0x198271b868daE875bFea6e6E4045cDdA5d6B9829, 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\n        \\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\\n        uint totalSupply = pair.totalSupply();\\n\\n        // Calculate token amounts\\n        tokenAAmount = (uint(reserve0) * lpAmount) / totalSupply;\\n        tokenBAmount = (uint(reserve1) * lpAmount) / totalSupply;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/NftPigMcStakingBnb.sol\": {\r\n      \"content\": \"import \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\".//DogsNftManager.sol\\\";\\nimport \\\"./StakeManagerV2.sol\\\";\\nimport \\\"./interfaces/IDogsExchangeHelper.sol\\\";\\nimport \\\"./interfaces/IDogsToken.sol\\\";\\nimport \\\"./interfaces/IMasterchefPigs.sol\\\";\\n\\ncontract NftPigMcStakingBnb is\\n    Ownable //consider doing structure where deposit withdraw etc are done through the dpm to avoid extra approvals\\n{\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public PigsToken =\\n        IERC20(0x9a3321E1aCD3B9F6debEE5e042dD2411A1742002);\\n    IERC20 public BnbToken = IERC20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\\n    IERC20 public Dogs_BNB_LpToken =\\n        IERC20(0x2139C481d4f31dD03F924B6e87191E15A33Bf8B4);\\n    address public dogsToken = 0x198271b868daE875bFea6e6E4045cDdA5d6B9829;\\n    uint256 public lastPigsBalance = 0;\\n    uint256 public pigsRoundMask = 0;\\n    uint256 public lpStakedTotal;\\n    IDogsToken public DogsToken = IDogsToken(dogsToken);\\n    DogsNftManager public nftManager;\\n    IMasterchefPigs public MasterchefPigs =\\n        IMasterchefPigs(0x8536178222fC6Ec5fac49BbfeBd74CA3051c638f);\\n    IDogsExchangeHelper public DogsExchangeHelper =\\n        IDogsExchangeHelper(0xB59686fe494D1Dd6d3529Ed9df384cD208F182e8);\\n\\n    IUniswapV2Router02 public constant PancakeRouter =\\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    mapping(uint256 => NftInfo) public nftInfo;\\n\\n    receive() external payable {}\\n\\n    struct NftInfo {\\n        uint256 lpAmount;\\n        uint256 pigsMask;\\n    }\\n\\n    constructor(address _nftManager) {\\n        nftManager = DogsNftManager(_nftManager);\\n        _approveTokenIfNeeded(dogsToken, address(_nftManager));\\n        _approveTokenIfNeeded(dogsToken, address(DogsExchangeHelper));\\n        _approveTokenIfNeeded(address(BnbToken), address(DogsExchangeHelper));\\n    }\\n\\n    function deposit(\\n        uint256 _tokenID,\\n        uint256 _dogsAmount,\\n        uint256 _bnbAmount\\n    ) external {\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\n        claimPigsRewardsInternal(_tokenID);\\n        nftManager.useNFTbalance(_tokenID, _dogsAmount, address(this));\\n        BnbToken.transferFrom(msg.sender, address(this), _bnbAmount);\\n        (\\n            uint256 dogsBnbLpReceived,\\n            uint256 balance2,\\n            uint256 balance\\n        ) = DogsExchangeHelper.addDogsLiquidity(\\n                address(BnbToken),\\n                _bnbAmount,\\n                _dogsAmount\\n            );\\n        nftManager.returnNFTbalance(_tokenID, balance2, address(this));\\n        BnbToken.transfer(msg.sender, balance);\\n        // nftInfo[_tokenID].dogAmount += _dogsAmount - balance2;\\n        nftInfo[_tokenID].lpAmount += dogsBnbLpReceived;\\n        _stakeIntoMCPigs(dogsBnbLpReceived);\\n        nftManager.transferFrom(address(this), msg.sender, _tokenID);\\n    }\\n\\n    function withdraw(uint256 _tokenID, uint256 _lpPercent) external {\\n        require(_lpPercent <= 10000, \\\"invalid percent\\\");\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\n        uint256 lpToWithdraw = (nftInfo[_tokenID].lpAmount * _lpPercent) /\\n            10000;\\n        MasterchefPigs.withdraw(1, lpToWithdraw);\\n        handlePigsIncrease();\\n        claimPigsRewardsInternal(_tokenID);\\n        lpStakedTotal -= lpToWithdraw;\\n        (uint256 bnbRemoved, uint256 dogsRemoved) = removeLiquidityFromPair(\\n            lpToWithdraw\\n        );\\n        nftInfo[_tokenID].lpAmount -= lpToWithdraw;\\n        BnbToken.transfer(msg.sender, bnbRemoved);\\n        uint256 nftMaxBal = nftManager.nftPotentialBalance(_tokenID);\\n        uint256 nftCurBal = nftManager.nftHoldingBalance(_tokenID);\\n        if (dogsRemoved > nftMaxBal - nftCurBal) {\\n            uint256 fillAmount = nftMaxBal - nftCurBal;\\n            nftManager.returnNFTbalance(_tokenID, fillAmount, address(this));\\n            DogsToken.transfer(msg.sender, dogsRemoved - fillAmount);\\n        } else {\\n            nftManager.returnNFTbalance(_tokenID, dogsRemoved, address(this));\\n        }\\n        nftManager.transferFrom(address(this), msg.sender, _tokenID);\\n    }\\n\\n    function claimPigsRewardsInternal(uint256 _tokenID) internal {\\n        uint256 pigsAmount = (nftInfo[_tokenID].lpAmount *\\n            (pigsRoundMask - nftInfo[_tokenID].pigsMask)) / 1e18;\\n        if (pigsAmount > lastPigsBalance) {\\n            pigsAmount = lastPigsBalance;\\n        }\\n        PigsToken.transfer(msg.sender, pigsAmount);\\n        lastPigsBalance -= pigsAmount;\\n        updateNftMask(_tokenID);\\n    }\\n\\n    function claimPigsRewardsPublic(uint256[] memory _tokenIDs) public {\\n        for (uint256 i = 0; i < _tokenIDs.length; i++) {\\n            uint256 _tokenID = _tokenIDs[i];\\n            require(nftManager.ownerOf(_tokenID) == msg.sender, \\\"not owner\\\");\\n            uint256 pigsAmount = (nftInfo[_tokenID].lpAmount *\\n                (pigsRoundMask - nftInfo[_tokenID].pigsMask)) / 1e18;\\n            if (pigsAmount > lastPigsBalance) {\\n                pigsAmount = lastPigsBalance;\\n            }\\n            PigsToken.transfer(msg.sender, pigsAmount);\\n            lastPigsBalance -= pigsAmount;\\n            updateNftMask(_tokenID);\\n        }\\n    }\\n\\n    function removeLiquidityFromPair(\\n        uint256 _amount\\n    ) internal returns (uint256 bnbRemoved, uint256 dogsRemoved) {\\n        Dogs_BNB_LpToken.approve(address(PancakeRouter), _amount);\\n        // add the liquidity\\n        (bnbRemoved, dogsRemoved) = PancakeRouter.removeLiquidity(\\n            address(BnbToken),\\n            dogsToken,\\n            _amount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function pendingRewards(\\n        uint256 _tokenID\\n    ) external view returns (uint256 pigsAmount) {\\n        pigsAmount =\\n            (nftInfo[_tokenID].lpAmount *\\n                (pigsRoundMask - nftInfo[_tokenID].pigsMask)) /\\n            1e18;\\n    }\\n\\n    function lpAmount(\\n        uint256 _tokenID\\n    ) external view returns (uint256 _lpAmount) {\\n        _lpAmount = nftInfo[_tokenID].lpAmount;\\n    }\\n\\n    function _approveTokenIfNeeded(address token, address _address) private {\\n        if (IERC20(token).allowance(address(this), address(_address)) == 0) {\\n            IERC20(token).safeApprove(address(_address), type(uint256).max);\\n        }\\n    }\\n\\n    function handlePigsIncrease() internal {\\n        uint256 pigsEarned = getPigsEarned();\\n        pigsRoundMask += (pigsEarned * 1e18) / lpStakedTotal;\\n    }\\n\\n    function _stakeIntoMCPigs(uint256 _amountLP) internal {\\n        allowanceCheckAndSet(\\n            IERC20(Dogs_BNB_LpToken),\\n            address(MasterchefPigs),\\n            _amountLP\\n        );\\n        MasterchefPigs.deposit(1, _amountLP);\\n        lpStakedTotal += _amountLP;\\n        handlePigsIncrease();\\n    }\\n\\n    function allowanceCheckAndSet(\\n        IERC20 _token,\\n        address _spender,\\n        uint256 _amount\\n    ) internal {\\n        uint256 allowance = _token.allowance(address(this), _spender);\\n        if (allowance < _amount) {\\n            require(_token.approve(_spender, _amount), \\\"allowance err\\\");\\n        }\\n    }\\n\\n    function setNftManager(address _nftManager) external onlyOwner {\\n        nftManager = DogsNftManager(_nftManager);\\n        _approveTokenIfNeeded(dogsToken, address(nftManager));\\n    }\\n\\n    function getPigsEarned() internal returns (uint256) {\\n        uint256 pigsBalance = PigsToken.balanceOf(address(this));\\n        uint256 pigsEarned = pigsBalance - lastPigsBalance;\\n        lastPigsBalance = pigsBalance;\\n        return pigsEarned;\\n    }\\n\\n    function updateNftMask(uint256 _tokenID) internal {\\n        nftInfo[_tokenID].pigsMask = pigsRoundMask;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NftPigMcStakingBnbWWrap.sol\": {\r\n      \"content\": \"import \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\".//DogsNftManager.sol\\\";\\nimport \\\"./StakeManagerV2.sol\\\";\\nimport \\\"./interfaces/IDogsExchangeHelper.sol\\\";\\nimport \\\"./interfaces/IDogsToken.sol\\\";\\nimport \\\"./interfaces/IMasterchefPigs.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\\\";\\n\\ncontract NftPigMcStakingBnbWWrap is\\n    Ownable,\\n    ReentrancyGuard //consider doing structure where deposit withdraw etc are done through the dpm to avoid extra approvals\\n{\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public PigsToken =\\n        IERC20(0x9a3321E1aCD3B9F6debEE5e042dD2411A1742002);\\n    IERC20 public BnbToken = IERC20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\\n    IERC20 public Dogs_BNB_LpToken =\\n        IERC20(0x2139C481d4f31dD03F924B6e87191E15A33Bf8B4);\\n    IWETH wBnb = IWETH(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\\n    address public dogsToken = 0x198271b868daE875bFea6e6E4045cDdA5d6B9829;\\n    uint256 public lastPigsBalance = 0;\\n    uint256 public pigsRoundMask = 0;\\n    uint256 public lpStakedTotal;\\n    IDogsToken public DogsToken = IDogsToken(dogsToken);\\n    DogsNftManager public nftManager;\\n    IMasterchefPigs public MasterchefPigs =\\n        IMasterchefPigs(0x8536178222fC6Ec5fac49BbfeBd74CA3051c638f);\\n    IDogsExchangeHelper public DogsExchangeHelper =\\n        IDogsExchangeHelper(0xB59686fe494D1Dd6d3529Ed9df384cD208F182e8);\\n\\n    IUniswapV2Router02 public constant PancakeRouter =\\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    mapping(uint256 => NftInfo) public nftInfo;\\n\\n    receive() external payable {}\\n\\n    struct NftInfo {\\n        uint256 lpAmount;\\n        uint256 pigsMask;\\n    }\\n\\n    constructor(address _nftManager) {\\n        nftManager = DogsNftManager(_nftManager);\\n        _approveTokenIfNeeded(dogsToken, address(_nftManager));\\n        _approveTokenIfNeeded(dogsToken, address(DogsExchangeHelper));\\n        _approveTokenIfNeeded(address(BnbToken), address(DogsExchangeHelper));\\n    }\\n\\n    function deposit(\\n        uint256 _tokenID,\\n        uint256 _dogsAmount\\n    ) external payable nonReentrant {\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\n        claimPigsRewardsInternal(_tokenID);\\n        nftManager.useNFTbalance(_tokenID, _dogsAmount, address(this));\\n        uint256 bnbAmount = msg.value;\\n        wBnb.deposit{value: bnbAmount}();\\n        (\\n            uint256 dogsBnbLpReceived,\\n            uint256 balance2,\\n            uint256 balance\\n        ) = DogsExchangeHelper.addDogsLiquidity(\\n                address(BnbToken),\\n                bnbAmount,\\n                _dogsAmount\\n            );\\n        nftManager.returnNFTbalance(_tokenID, balance2, address(this));\\n        BnbToken.transfer(msg.sender, balance);\\n        // nftInfo[_tokenID].dogAmount += _dogsAmount - balance2;\\n        nftInfo[_tokenID].lpAmount += dogsBnbLpReceived;\\n        _stakeIntoMCPigs(dogsBnbLpReceived);\\n        nftManager.transferFrom(address(this), msg.sender, _tokenID);\\n    }\\n\\n    function withdraw(\\n        uint256 _tokenID,\\n        uint256 _lpPercent\\n    ) external nonReentrant {\\n        require(_lpPercent <= 10000, \\\"invalid percent\\\");\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\n        uint256 lpToWithdraw = (nftInfo[_tokenID].lpAmount * _lpPercent) /\\n            10000;\\n        MasterchefPigs.withdraw(1, lpToWithdraw);\\n        handlePigsIncrease();\\n        claimPigsRewardsInternal(_tokenID);\\n        lpStakedTotal -= lpToWithdraw;\\n        (uint256 bnbRemoved, uint256 dogsRemoved) = removeLiquidityFromPair(\\n            lpToWithdraw\\n        );\\n        nftInfo[_tokenID].lpAmount -= lpToWithdraw;\\n        wBnb.withdraw(bnbRemoved);\\n        (bool success, ) = (msg.sender).call{value: bnbRemoved}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n        uint256 nftMaxBal = nftManager.nftPotentialBalance(_tokenID);\\n        uint256 nftCurBal = nftManager.nftHoldingBalance(_tokenID);\\n        if (dogsRemoved > nftMaxBal - nftCurBal) {\\n            uint256 fillAmount = nftMaxBal - nftCurBal;\\n            nftManager.returnNFTbalance(_tokenID, fillAmount, address(this));\\n            DogsToken.transfer(msg.sender, dogsRemoved - fillAmount);\\n        } else {\\n            nftManager.returnNFTbalance(_tokenID, dogsRemoved, address(this));\\n        }\\n        nftManager.transferFrom(address(this), msg.sender, _tokenID);\\n    }\\n\\n    function claimPigsRewardsInternal(uint256 _tokenID) internal {\\n        uint256 pigsAmount = (nftInfo[_tokenID].lpAmount *\\n            (pigsRoundMask - nftInfo[_tokenID].pigsMask)) / 1e18;\\n        if (pigsAmount > lastPigsBalance) {\\n            pigsAmount = lastPigsBalance;\\n        }\\n        PigsToken.transfer(msg.sender, pigsAmount);\\n        lastPigsBalance -= pigsAmount;\\n        updateNftMask(_tokenID);\\n    }\\n\\n    function claimPigsRewardsPublic(uint256[] memory _tokenIDs) public {\\n        for (uint256 i = 0; i < _tokenIDs.length; i++) {\\n            uint256 _tokenID = _tokenIDs[i];\\n            require(nftManager.ownerOf(_tokenID) == msg.sender, \\\"not owner\\\");\\n            uint256 pigsAmount = (nftInfo[_tokenID].lpAmount *\\n                (pigsRoundMask - nftInfo[_tokenID].pigsMask)) / 1e18;\\n            if (pigsAmount > lastPigsBalance) {\\n                pigsAmount = lastPigsBalance;\\n            }\\n            PigsToken.transfer(msg.sender, pigsAmount);\\n            lastPigsBalance -= pigsAmount;\\n            updateNftMask(_tokenID);\\n        }\\n    }\\n\\n    function removeLiquidityFromPair(\\n        uint256 _amount\\n    ) internal returns (uint256 bnbRemoved, uint256 dogsRemoved) {\\n        Dogs_BNB_LpToken.approve(address(PancakeRouter), _amount);\\n        // add the liquidity\\n        (bnbRemoved, dogsRemoved) = PancakeRouter.removeLiquidity(\\n            address(BnbToken),\\n            dogsToken,\\n            _amount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function _approveTokenIfNeeded(address token, address _address) private {\\n        if (IERC20(token).allowance(address(this), address(_address)) == 0) {\\n            IERC20(token).safeApprove(address(_address), type(uint256).max);\\n        }\\n    }\\n\\n    function handlePigsIncrease() internal {\\n        uint256 pigsEarned = getPigsEarned();\\n        pigsRoundMask += (pigsEarned * 1e18) / lpStakedTotal;\\n    }\\n\\n    function _stakeIntoMCPigs(uint256 _amountLP) internal {\\n        allowanceCheckAndSet(\\n            IERC20(Dogs_BNB_LpToken),\\n            address(MasterchefPigs),\\n            _amountLP\\n        );\\n        MasterchefPigs.deposit(1, _amountLP);\\n        lpStakedTotal += _amountLP;\\n        handlePigsIncrease();\\n    }\\n\\n    function pendingRewards(\\n        uint256 _tokenID\\n    ) external view returns (uint256 pigsAmount) {\\n        pigsAmount =\\n            (nftInfo[_tokenID].lpAmount *\\n                (pigsRoundMask - nftInfo[_tokenID].pigsMask)) /\\n            1e18;\\n    }\\n\\n    function lpAmount(\\n        uint256 _tokenID\\n    ) external view returns (uint256 _lpAmount) {\\n        _lpAmount = nftInfo[_tokenID].lpAmount;\\n    }\\n\\n    function allowanceCheckAndSet(\\n        IERC20 _token,\\n        address _spender,\\n        uint256 _amount\\n    ) internal {\\n        uint256 allowance = _token.allowance(address(this), _spender);\\n        if (allowance < _amount) {\\n            require(_token.approve(_spender, _amount), \\\"allowance err\\\");\\n        }\\n    }\\n\\n    function setNftManager(address _nftManager) external onlyOwner {\\n        nftManager = DogsNftManager(_nftManager);\\n        _approveTokenIfNeeded(dogsToken, address(nftManager));\\n    }\\n\\n    function getPigsEarned() internal returns (uint256) {\\n        uint256 pigsBalance = PigsToken.balanceOf(address(this));\\n        uint256 pigsEarned = pigsBalance - lastPigsBalance;\\n        lastPigsBalance = pigsBalance;\\n        return pigsEarned;\\n    }\\n\\n    function updateNftMask(uint256 _tokenID) internal {\\n        nftInfo[_tokenID].pigsMask = pigsRoundMask;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NftPigMcStakingBusd.sol\": {\r\n      \"content\": \"import \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\".//DogsNftManager.sol\\\";\\nimport \\\"./StakeManagerV2.sol\\\";\\nimport \\\"./interfaces/IDogsExchangeHelper.sol\\\";\\nimport \\\"./interfaces/IDogsToken.sol\\\";\\nimport \\\"./interfaces/IMasterchefPigs.sol\\\";\\n\\ncontract NftPigMcStakingBusd is\\n    Ownable //consider doing structure where deposit withdraw etc are done through the dpm to avoid extra approvals\\n{\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public PigsToken =\\n        IERC20(0x9a3321E1aCD3B9F6debEE5e042dD2411A1742002);\\n    IERC20 public BusdToken =\\n        IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\\n    IERC20 public Dogs_BUSD_LpToken =\\n        IERC20(0xb5151965b13872B183EBa08e33D0d06743AC8132);\\n    address public dogsToken = 0x198271b868daE875bFea6e6E4045cDdA5d6B9829;\\n    uint256 public lastPigsBalance = 0;\\n    uint256 public pigsRoundMask = 0;\\n    uint256 public lpStakedTotal;\\n    IDogsToken public DogsToken = IDogsToken(dogsToken);\\n    DogsNftManager public nftManager;\\n    IMasterchefPigs public MasterchefPigs =\\n        IMasterchefPigs(0x8536178222fC6Ec5fac49BbfeBd74CA3051c638f);\\n    IDogsExchangeHelper public DogsExchangeHelper =\\n        IDogsExchangeHelper(0xB59686fe494D1Dd6d3529Ed9df384cD208F182e8);\\n\\n    IUniswapV2Router02 public constant PancakeRouter =\\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    mapping(uint256 => NftInfo) public nftInfo;\\n\\n    receive() external payable {}\\n\\n    struct NftInfo {\\n        uint256 lpAmount;\\n        uint256 pigsMask;\\n    }\\n\\n    constructor(address _nftManager) {\\n        nftManager = DogsNftManager(_nftManager);\\n        _approveTokenIfNeeded(dogsToken, address(_nftManager));\\n        _approveTokenIfNeeded(dogsToken, address(DogsExchangeHelper));\\n        _approveTokenIfNeeded(address(BusdToken), address(DogsExchangeHelper));\\n    }\\n\\n    function deposit(\\n        uint256 _tokenID,\\n        uint256 _dogsAmount,\\n        uint256 _busdAmount\\n    ) external {\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\n        claimPigsRewardsInternal(_tokenID);\\n        nftManager.useNFTbalance(_tokenID, _dogsAmount, address(this));\\n        BusdToken.transferFrom(msg.sender, address(this), _busdAmount);\\n        (\\n            uint256 dogsBusdLpReceived,\\n            uint256 balance2,\\n            uint256 balance\\n        ) = DogsExchangeHelper.addDogsLiquidity(\\n                address(BusdToken),\\n                _busdAmount,\\n                _dogsAmount\\n            );\\n        nftManager.returnNFTbalance(_tokenID, balance2, address(this));\\n        BusdToken.transfer(msg.sender, balance);\\n        // nftInfo[_tokenID].dogAmount += _dogsAmount - balance2;\\n        nftInfo[_tokenID].lpAmount += dogsBusdLpReceived;\\n        _stakeIntoMCPigs(dogsBusdLpReceived);\\n        nftManager.transferFrom(address(this), msg.sender, _tokenID);\\n    }\\n\\n    function withdraw(uint256 _tokenID, uint256 _lpPercent) external {\\n        require(_lpPercent <= 10000, \\\"invalid percent\\\");\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\n        uint256 lpToWithdraw = (nftInfo[_tokenID].lpAmount * _lpPercent) /\\n            10000;\\n        MasterchefPigs.withdraw(0, lpToWithdraw);\\n        handlePigsIncrease();\\n        claimPigsRewardsInternal(_tokenID);\\n        lpStakedTotal -= lpToWithdraw;\\n        (uint256 busdRemoved, uint256 dogsRemoved) = removeLiquidityFromPair(\\n            lpToWithdraw\\n        );\\n        nftInfo[_tokenID].lpAmount -= lpToWithdraw;\\n        BusdToken.transfer(msg.sender, busdRemoved);\\n        uint256 nftMaxBal = nftManager.nftPotentialBalance(_tokenID);\\n        uint256 nftCurBal = nftManager.nftHoldingBalance(_tokenID);\\n        if (dogsRemoved > nftMaxBal - nftCurBal) {\\n            uint256 fillAmount = nftMaxBal - nftCurBal;\\n            nftManager.returnNFTbalance(_tokenID, fillAmount, address(this));\\n            DogsToken.transfer(msg.sender, dogsRemoved - fillAmount);\\n        } else {\\n            nftManager.returnNFTbalance(_tokenID, dogsRemoved, address(this));\\n        }\\n        nftManager.transferFrom(address(this), msg.sender, _tokenID);\\n    }\\n\\n    function claimPigsRewardsInternal(uint256 _tokenID) internal {\\n        uint256 pigsAmount = (nftInfo[_tokenID].lpAmount *\\n            (pigsRoundMask - nftInfo[_tokenID].pigsMask)) / 1e18;\\n        if (pigsAmount > lastPigsBalance) {\\n            pigsAmount = lastPigsBalance;\\n        }\\n        PigsToken.transfer(msg.sender, pigsAmount);\\n        lastPigsBalance -= pigsAmount;\\n        updateNftMask(_tokenID);\\n    }\\n\\n    function claimPigsRewardsPublic(uint256[] memory _tokenIDs) public {\\n        for (uint256 i = 0; i < _tokenIDs.length; i++) {\\n            uint256 _tokenID = _tokenIDs[i];\\n            require(nftManager.ownerOf(_tokenID) == msg.sender, \\\"not owner\\\");\\n            uint256 pigsAmount = (nftInfo[_tokenID].lpAmount *\\n                (pigsRoundMask - nftInfo[_tokenID].pigsMask)) / 1e18;\\n            if (pigsAmount > lastPigsBalance) {\\n                pigsAmount = lastPigsBalance;\\n            }\\n            PigsToken.transfer(msg.sender, pigsAmount);\\n            lastPigsBalance -= pigsAmount;\\n            updateNftMask(_tokenID);\\n        }\\n    }\\n\\n    function removeLiquidityFromPair(\\n        uint256 _amount\\n    ) internal returns (uint256 busdRemoved, uint256 dogsRemoved) {\\n        Dogs_BUSD_LpToken.approve(address(PancakeRouter), _amount);\\n        // add the liquidity\\n        (busdRemoved, dogsRemoved) = PancakeRouter.removeLiquidity(\\n            address(BusdToken),\\n            dogsToken,\\n            _amount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function _approveTokenIfNeeded(address token, address _address) private {\\n        if (IERC20(token).allowance(address(this), address(_address)) == 0) {\\n            IERC20(token).safeApprove(address(_address), type(uint256).max);\\n        }\\n    }\\n\\n    function handlePigsIncrease() internal {\\n        uint256 pigsEarned = getPigsEarned();\\n        pigsRoundMask += (pigsEarned * 1e18) / lpStakedTotal;\\n    }\\n\\n    function _stakeIntoMCPigs(uint256 _amountLP) internal {\\n        allowanceCheckAndSet(\\n            IERC20(Dogs_BUSD_LpToken),\\n            address(MasterchefPigs),\\n            _amountLP\\n        );\\n        MasterchefPigs.deposit(0, _amountLP);\\n        lpStakedTotal += _amountLP;\\n        handlePigsIncrease();\\n    }\\n\\n    function allowanceCheckAndSet(\\n        IERC20 _token,\\n        address _spender,\\n        uint256 _amount\\n    ) internal {\\n        uint256 allowance = _token.allowance(address(this), _spender);\\n        if (allowance < _amount) {\\n            require(_token.approve(_spender, _amount), \\\"allowance err\\\");\\n        }\\n    }\\n\\n    function pendingRewards(\\n        uint256 _tokenID\\n    ) external view returns (uint256 pigsAmount) {\\n        pigsAmount =\\n            (nftInfo[_tokenID].lpAmount *\\n                (pigsRoundMask - nftInfo[_tokenID].pigsMask)) /\\n            1e18;\\n    }\\n\\n    function lpAmount(\\n        uint256 _tokenID\\n    ) external view returns (uint256 _lpAmount) {\\n        _lpAmount = nftInfo[_tokenID].lpAmount;\\n    }\\n\\n    function setNftManager(address _nftManager) external onlyOwner {\\n        nftManager = DogsNftManager(_nftManager);\\n        _approveTokenIfNeeded(dogsToken, address(nftManager));\\n    }\\n\\n    function getPigsEarned() internal returns (uint256) {\\n        uint256 pigsBalance = PigsToken.balanceOf(address(this));\\n        uint256 pigsEarned = pigsBalance - lastPigsBalance;\\n        lastPigsBalance = pigsBalance;\\n        return pigsEarned;\\n    }\\n\\n    function updateNftMask(uint256 _tokenID) internal {\\n        nftInfo[_tokenID].pigsMask = pigsRoundMask;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NftReadContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DogsNftManager.sol\\\";\\nimport \\\"./LPToTokenCalculator.sol\\\";\\nimport \\\"./StakeManagerV2.sol\\\";\\nimport \\\"./NftPigMcStakingBusd.sol\\\";\\nimport \\\"./NftPigMcStakingBnb.sol\\\";\\n\\ncontract NftReadContract {\\n \\n  LPToTokenCalculator public lpCalc =  LPToTokenCalculator(0x1e55514a1bA84cC4144841111A5BAdA6D1416D08);\\n  StakeManagerV2 public stakeManager;\\n  NftPigMcStakingBnb public nftPigMcStakingBnb;\\n  NftPigMcStakingBusd public nftPigMcStakingBusd; \\n  \\n\\n  \\n  struct WithdrawnStakeInfoView2 {\\n        uint256 nftID;\\n        uint256 currentAmount;\\n        uint256 potentialAmount;\\n        uint256 dogsInLP;\\n        uint256 busdLP;\\n        uint256 bnbLP;\\n        uint256 pigsPendingBusd;\\n        uint256 pigsPendingBnb;\\n        uint256 taxReduction;\\n        uint256 endTime;\\n        bool isAutoPool;\\n\\n  }\\n\\n  constructor (address _stakeManager, address _stakebusd, address _stakebnb) {\\n    stakeManager = StakeManagerV2(_stakeManager);\\n    nftPigMcStakingBusd = NftPigMcStakingBusd(payable(_stakebusd));\\n    nftPigMcStakingBnb = NftPigMcStakingBnb(payable(_stakebnb));\\n  }\\n\\n\\n\\n  function getUserWithdrawnStakes(address _user) external view returns(WithdrawnStakeInfoView2 [] memory ) {\\n    StakeManagerV2.WithdrawnStakeInfoView[] memory stakesinit = stakeManager.getUserWithdrawnStakes(_user);\\n    uint256 len = stakesinit.length;\\n    WithdrawnStakeInfoView2[] memory stakes = new WithdrawnStakeInfoView2[](len);\\n    for(uint256 i = 0; i < len ; i++){\\n      uint256 nftId = stakesinit[i].nftID;\\n      (uint256 lpAmountBusd , )  = (nftPigMcStakingBusd.nftInfo(nftId));\\n      (uint256 lpAmountBnb , ) = (nftPigMcStakingBnb.nftInfo(nftId));\\n      (uint256 lpTotalBusd, ) = lpCalc.calculateTokensFromLPBusd(lpAmountBusd);\\n      (uint256 lpTotalBnb, ) = lpCalc.calculateTokensFromLPBnb(lpAmountBnb);\\n      uint256 lpTotal = lpTotalBusd + lpTotalBnb;\\n      stakes[i].nftID = stakesinit[i].nftID;\\n      stakes[i].currentAmount = stakesinit[i].currentAmount;\\n      stakes[i].potentialAmount = stakesinit[i].potentialAmount;\\n      stakes[i].dogsInLP = lpTotal;\\n      stakes[i].busdLP = lpAmountBusd;\\n      stakes[i].bnbLP = lpAmountBnb;\\n      stakes[i].pigsPendingBusd = nftPigMcStakingBusd.pendingRewards(stakesinit[i].nftID);\\n      stakes[i].pigsPendingBnb = nftPigMcStakingBnb.pendingRewards(stakesinit[i].nftID);\\n      stakes[i].taxReduction = stakesinit[i].taxReduction;\\n      stakes[i].endTime = stakesinit[i].endTime;\\n      stakes[i].isAutoPool = stakesinit[i].isAutoPool;\\n    }\\n\\n    return stakes;\\n    \\n  }\\n\\n\\n  function getWithdrawnStakeInfo(uint256 _tokenId) external view returns (WithdrawnStakeInfoView2 memory){\\n    StakeManagerV2.WithdrawnStakeInfoView memory stakeinit = stakeManager.getUserWithdrawnStake(_tokenId);\\n    WithdrawnStakeInfoView2 memory returnStake;\\n    (uint256 lpAmountBusd , )  = (nftPigMcStakingBusd.nftInfo(_tokenId));\\n    (uint256 lpAmountBnb , ) = (nftPigMcStakingBnb.nftInfo(_tokenId));\\n    (uint256 lpTotalBusd, ) = lpCalc.calculateTokensFromLPBusd(lpAmountBusd);\\n    (uint256 lpTotalBnb, ) = lpCalc.calculateTokensFromLPBnb(lpAmountBnb);\\n    uint256 lpTotal = lpTotalBusd + lpTotalBnb;\\n    returnStake.nftID = stakeinit.nftID;\\n    returnStake.currentAmount = stakeinit.currentAmount;\\n    returnStake.potentialAmount = stakeinit.potentialAmount;\\n    returnStake.dogsInLP = lpTotal;\\n    returnStake.taxReduction = stakeinit.taxReduction;\\n    returnStake.endTime = stakeinit.endTime;\\n    returnStake.isAutoPool = stakeinit.isAutoPool;\\n    returnStake.busdLP = lpAmountBusd;\\n    returnStake.bnbLP = lpAmountBnb;\\n    returnStake.pigsPendingBusd = nftPigMcStakingBusd.pendingRewards(stakeinit.nftID);\\n    returnStake.pigsPendingBnb = nftPigMcStakingBnb.pendingRewards(stakeinit.nftID);\\n    return returnStake;\\n  }\\n\\n\\n\\n}\"\r\n    },\r\n    \"contracts/StakeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\ncontract StakeManager is Ownable{\\r\\n\\r\\n    struct UserInfo {\\r\\n\\r\\n        uint256 totalStakedDefault; //linear\\r\\n        uint256 totalStakedAutoCompound;\\r\\n\\r\\n        uint256 walletStartTime;\\r\\n        uint256 overThresholdTimeCounter;\\r\\n\\r\\n        uint256 activeStakesCount;\\r\\n        uint256 withdrawStakesCount;\\r\\n\\r\\n        mapping(uint256 => StakeInfo) activeStakes;\\r\\n        mapping(uint256 => WithdrawnStakeInfo) withdrawnStakes;\\r\\n\\r\\n    }\\r\\n\\r\\n    struct StakeInfo {\\r\\n        uint256 amount;\\r\\n        uint256 startTime;\\r\\n        bool isAutoPool;\\r\\n    } \\r\\n\\r\\n    struct StakeInfoView {\\r\\n        uint256 stakeID;\\r\\n        uint256 taxReduction;\\r\\n        uint256 amount;\\r\\n        uint256 startTime;\\r\\n        bool isAutoPool;\\r\\n    } \\r\\n\\r\\n    struct WithdrawnStakeInfo {\\r\\n        uint256 amount;\\r\\n        uint256 taxReduction;\\r\\n        uint256 endTime;\\r\\n        bool isAutoPool;\\r\\n    }\\r\\n\\r\\n    struct WithdrawnStakeInfoView {\\r\\n        uint256 stakeID;\\r\\n        uint256 amount;\\r\\n        uint256 taxReduction;\\r\\n        uint256 endTime;\\r\\n        bool isAutoPool;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    address public DogPoundManger;\\r\\n    mapping(address => UserInfo) userInfo;\\r\\n\\r\\n\\r\\n    uint256 public reliefPerDay = 75;      // 0.75% default\\r\\n    uint256 public reliefPerDayExtra = 25; // 0.25%\\r\\n\\r\\n    constructor(address _DogPoundManger){\\r\\n        DogPoundManger = _DogPoundManger;\\r\\n    }\\r\\n\\r\\n    modifier onlyDogPoundManager() {\\r\\n        require(DogPoundManger == msg.sender, \\\"manager only\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function saveStake(address _user, uint256 _amount, bool _isAutoCompound) onlyDogPoundManager external{\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        user.activeStakes[user.activeStakesCount].amount = _amount;\\r\\n        user.activeStakes[user.activeStakesCount].startTime = block.timestamp;\\r\\n        user.activeStakes[user.activeStakesCount].isAutoPool = _isAutoCompound;\\r\\n        user.activeStakesCount++;\\r\\n        if(_isAutoCompound){\\r\\n            user.totalStakedAutoCompound += _amount;\\r\\n        }else{\\r\\n            user.totalStakedDefault += _amount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawFromStake(address _user,uint256 _amount, uint256 _stakeID) onlyDogPoundManager  external{\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        StakeInfo storage activeStake = user.activeStakes[_stakeID];\\r\\n        require(_amount > 0, \\\"withdraw: zero amount\\\");\\r\\n        require(activeStake.amount >= _amount, \\\"withdraw: not good\\\");\\r\\n        uint256 withdrawCount = user.withdrawStakesCount;\\r\\n        uint256 taxReduction = getActiveStakeTaxReduction(_user, _stakeID);\\r\\n        bool isAutoCompound = isStakeAutoPool(_user,_stakeID);\\r\\n        user.withdrawnStakes[withdrawCount].amount = _amount;\\r\\n        user.withdrawnStakes[withdrawCount].taxReduction = taxReduction;\\r\\n        user.withdrawnStakes[withdrawCount].endTime = block.timestamp;\\r\\n        user.withdrawnStakes[withdrawCount].isAutoPool = isAutoCompound;\\r\\n        user.withdrawStakesCount++;\\r\\n        activeStake.amount -= _amount;\\r\\n        if(isAutoCompound){\\r\\n            user.totalStakedAutoCompound -= _amount;\\r\\n        }else{\\r\\n            user.totalStakedDefault -= _amount;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function utilizeWithdrawnStake(address _user, uint256 _amount, uint256 _stakeID) onlyDogPoundManager external {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        WithdrawnStakeInfo storage withdrawnStake = user.withdrawnStakes[_stakeID];\\r\\n        require(withdrawnStake.amount >= _amount);\\r\\n        user.withdrawnStakes[_stakeID].amount -= _amount;\\r\\n    }\\r\\n\\r\\n    function getUserActiveStakes(address _user) public view returns (StakeInfoView[] memory){\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        StakeInfoView[] memory stakes = new StakeInfoView[](user.activeStakesCount);\\r\\n        for (uint256 i=0; i < user.activeStakesCount; i++){\\r\\n            stakes[i] = StakeInfoView({\\r\\n                stakeID : i,\\r\\n                taxReduction:getActiveStakeTaxReduction(_user,i),\\r\\n                amount : user.activeStakes[i].amount,\\r\\n                startTime : user.activeStakes[i].startTime,\\r\\n                isAutoPool : user.activeStakes[i].isAutoPool\\r\\n            });\\r\\n        }\\r\\n        return stakes;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getUserWithdrawnStakes(address _user) public view returns (WithdrawnStakeInfoView[] memory){\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        WithdrawnStakeInfoView[] memory stakes = new WithdrawnStakeInfoView[](user.withdrawStakesCount);\\r\\n        for (uint256 i=0; i < user.withdrawStakesCount; i++){\\r\\n            stakes[i] = WithdrawnStakeInfoView({\\r\\n                stakeID : i,\\r\\n                amount : user.withdrawnStakes[i].amount,\\r\\n                taxReduction : user.withdrawnStakes[i].taxReduction,\\r\\n                endTime : user.withdrawnStakes[i].endTime,\\r\\n                isAutoPool : user.withdrawnStakes[i].isAutoPool\\r\\n            });\\r\\n        }\\r\\n        return stakes;\\r\\n    }\\r\\n\\r\\n    function getActiveStakeTaxReduction(address _user, uint256 _stakeID) public view returns (uint256){\\r\\n        StakeInfo storage activeStake = userInfo[_user].activeStakes[_stakeID];\\r\\n        uint256 relief = reliefPerDay;\\r\\n        if (activeStake.isAutoPool){\\r\\n            relief = reliefPerDay + reliefPerDayExtra;\\r\\n        }\\r\\n        uint256 taxReduction = ((block.timestamp - activeStake.startTime) / 24 hours) * relief;\\r\\n        return taxReduction;\\r\\n\\r\\n    }\\r\\n\\r\\n    function getWithdrawnStakeTaxReduction(address _user, uint256 _stakeID) public view returns (uint256){\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        return user.withdrawnStakes[_stakeID].taxReduction;\\r\\n    }\\r\\n\\r\\n    function getUserActiveStake(address _user, uint256 _stakeID) external view returns (StakeInfo memory){\\r\\n        return userInfo[_user].activeStakes[_stakeID];\\r\\n\\r\\n    }\\r\\n    \\r\\n    function changeReliefValues(uint256 relief1,uint256 relief2) external onlyOwner{\\r\\n        require(relief1+relief2 < 1000);\\r\\n        reliefPerDay = relief1;\\r\\n        reliefPerDayExtra = relief2;\\r\\n    }\\r\\n\\r\\n    function getUserWithdrawnStake(address _user, uint256 _stakeID) external view returns (WithdrawnStakeInfo memory){\\r\\n        return userInfo[_user].withdrawnStakes[_stakeID];\\r\\n    }\\r\\n\\r\\n    function isStakeAutoPool(address _user, uint256 _stakeID) public view returns (bool){\\r\\n        return userInfo[_user].activeStakes[_stakeID].isAutoPool;\\r\\n    }\\r\\n\\r\\n    function totalStaked(address _user) public view returns (uint256){\\r\\n        return userInfo[_user].totalStakedDefault + userInfo[_user].totalStakedAutoCompound;\\r\\n    }\\r\\n    \\r\\n    function setDogPoundManager(address _address) public onlyOwner {\\r\\n        DogPoundManger = _address;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/StakeManagerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./StakeManager.sol\\\";\\r\\nimport \\\"./DogsNftManager.sol\\\";\\r\\n\\r\\ncontract StakeManagerV2 is Ownable {\\r\\n    struct UserInfoV2 {\\r\\n        uint256 activeStakesCount;\\r\\n        mapping(uint256 => StakeInfo) activeStakes;\\r\\n    }\\r\\n\\r\\n    struct StakeInfo {\\r\\n        uint256 amount;\\r\\n        uint256 startTime;\\r\\n        bool isAutoPool;\\r\\n    }\\r\\n\\r\\n    struct StakeInfoView {\\r\\n        uint256 stakeID;\\r\\n        uint256 taxReduction;\\r\\n        uint256 amount;\\r\\n        uint256 startTime;\\r\\n        bool isAutoPool;\\r\\n    }\\r\\n\\r\\n    struct WithdrawnStakeInfoOld {\\r\\n        uint256 amount;\\r\\n        uint256 taxReduction;\\r\\n        uint256 endTime;\\r\\n        bool isAutoPool;\\r\\n    }\\r\\n\\r\\n    struct WithdrawnStakeInfo {\\r\\n        uint256 taxReduction;\\r\\n        uint256 endTime;\\r\\n        bool isAutoPool;\\r\\n    }\\r\\n\\r\\n    struct WithdrawnStakeInfoView {\\r\\n        uint256 nftID;\\r\\n        uint256 currentAmount;\\r\\n        uint256 potentialAmount;\\r\\n        uint256 taxReduction;\\r\\n        uint256 endTime;\\r\\n        bool isAutoPool;\\r\\n    }\\r\\n\\r\\n    mapping(address => UserInfoV2) public userInfo;\\r\\n    mapping(uint256 => WithdrawnStakeInfo) public nftWithdrawnStakes;\\r\\n    mapping(address => bool) public allowedAddress;\\r\\n    mapping(address => bool) public initAddress;\\r\\n\\r\\n    StakeManager public stakeManagerV1 =\\r\\n        StakeManager(0x25A959dDaEcEb50c1B724C603A57fe7b32eCbEeA);\\r\\n    DogsNftManager public nftManager;\\r\\n    uint256 public reliefPerDay = 75; // 0.75% default\\r\\n    uint256 public reliefPerDayExtra = 25; // 0.25%\\r\\n\\r\\n    constructor(address _DogPoundManger, address _DogsNftManager) {\\r\\n        allowedAddress[_DogPoundManger] = true;\\r\\n        nftManager = DogsNftManager(_DogsNftManager);\\r\\n    }\\r\\n\\r\\n    modifier onlyAllowedAddress() {\\r\\n        require(allowedAddress[msg.sender], \\\"allowed only\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function saveStake(\\r\\n        address _user,\\r\\n        uint256 _amount,\\r\\n        bool _isAutoCompound\\r\\n    ) external onlyAllowedAddress {\\r\\n        if (!initAddress[_user]) {\\r\\n            userInfo[_user].activeStakesCount = getOldActiveStakeCount(_user);\\r\\n            initAddress[_user] = true;\\r\\n        }\\r\\n        UserInfoV2 storage user = userInfo[_user];\\r\\n        user.activeStakes[user.activeStakesCount].amount = _amount;\\r\\n        user.activeStakes[user.activeStakesCount].startTime = block.timestamp;\\r\\n        user.activeStakes[user.activeStakesCount].isAutoPool = _isAutoCompound;\\r\\n        user.activeStakesCount++;\\r\\n    }\\r\\n\\r\\n    function saveStakeOldUserInit(\\r\\n        address _user,\\r\\n        uint256 _amount,\\r\\n        bool _isAutoCompound,\\r\\n        uint256 _lastActiveStake\\r\\n    ) external onlyAllowedAddress {\\r\\n        require(\\r\\n            !initAddress[_user] &&\\r\\n                stakeManagerV1\\r\\n                    .getUserActiveStake(_user, _lastActiveStake)\\r\\n                    .startTime !=\\r\\n                0 &&\\r\\n                stakeManagerV1\\r\\n                    .getUserActiveStake(_user, _lastActiveStake + 1)\\r\\n                    .startTime ==\\r\\n                0,\\r\\n            \\\"Passed stake isnt last stake\\\"\\r\\n        );\\r\\n        userInfo[_user].activeStakesCount == _lastActiveStake + 1;\\r\\n        initAddress[_user] = true;\\r\\n        UserInfoV2 storage user = userInfo[_user];\\r\\n        user.activeStakes[user.activeStakesCount].amount = _amount;\\r\\n        user.activeStakes[user.activeStakesCount].startTime = block.timestamp;\\r\\n        user.activeStakes[user.activeStakesCount].isAutoPool = _isAutoCompound;\\r\\n        user.activeStakesCount++;\\r\\n    }\\r\\n\\r\\n    function withdrawFromStake(\\r\\n        address _user,\\r\\n        uint256 _amount,\\r\\n        uint256 _stakeID,\\r\\n        address _from\\r\\n    ) external onlyAllowedAddress {\\r\\n        UserInfoV2 storage user = userInfo[_user];\\r\\n        StakeInfo storage activeStake = user.activeStakes[_stakeID];\\r\\n        if (activeStake.startTime == 0) {\\r\\n            user.activeStakes[_stakeID] = activeStakeMove(_user, _stakeID);\\r\\n            activeStake = user.activeStakes[_stakeID];\\r\\n        }\\r\\n        require(_amount > 0, \\\"withdraw: zero amount\\\");\\r\\n        require(activeStake.amount >= _amount, \\\"withdraw: not good\\\");\\r\\n        uint256 taxReduction = getActiveStakeTaxReduction(_user, _stakeID);\\r\\n        bool isAutoCompound = activeStake.isAutoPool;\\r\\n        uint256 nftTokenID = nftManager.mintForWithdrawnStake(\\r\\n            _user,\\r\\n            _amount,\\r\\n            _from\\r\\n        );\\r\\n        nftWithdrawnStakes[nftTokenID].taxReduction = taxReduction;\\r\\n        nftWithdrawnStakes[nftTokenID].endTime = block.timestamp;\\r\\n        nftWithdrawnStakes[nftTokenID].isAutoPool = isAutoCompound;\\r\\n        activeStake.amount -= _amount;\\r\\n    }\\r\\n\\r\\n    function mergeNFTs(\\r\\n        //burning usage and aggregation permissions has to be handled outside\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount,\\r\\n        uint256 _mergeFrom\\r\\n    ) external onlyAllowedAddress {\\r\\n        uint256 _nftTokenID = nftManager.mintForWithdrawnStake(\\r\\n            _to,\\r\\n            _amount,\\r\\n            _from\\r\\n        );\\r\\n        uint256 _taxReduction = nftWithdrawnStakes[_mergeFrom].taxReduction;\\r\\n        bool _isAutoCompound = nftWithdrawnStakes[_mergeFrom].isAutoPool;\\r\\n        uint256 _endTime = nftWithdrawnStakes[_mergeFrom].endTime;\\r\\n        nftWithdrawnStakes[_nftTokenID].taxReduction = _taxReduction;\\r\\n        nftWithdrawnStakes[_nftTokenID].endTime = _endTime;\\r\\n        nftWithdrawnStakes[_nftTokenID].isAutoPool = _isAutoCompound;\\r\\n    }\\r\\n\\r\\n    function transitionOldWithdrawnStake(\\r\\n        address _user,\\r\\n        uint256 _stakeID,\\r\\n        address _from\\r\\n    ) external onlyAllowedAddress {\\r\\n        WithdrawnStakeInfoOld memory oldStake = withdrawnStakeMoveInternal(\\r\\n            _user,\\r\\n            _stakeID\\r\\n        );\\r\\n        stakeManagerV1.utilizeWithdrawnStake(_user, oldStake.amount, _stakeID);\\r\\n        uint256 nftTokenID = nftManager.mintForWithdrawnStake(\\r\\n            _user,\\r\\n            oldStake.amount,\\r\\n            _from\\r\\n        );\\r\\n        nftWithdrawnStakes[nftTokenID].taxReduction = oldStake.taxReduction;\\r\\n        nftWithdrawnStakes[nftTokenID].endTime = oldStake.endTime;\\r\\n        nftWithdrawnStakes[nftTokenID].isAutoPool = oldStake.isAutoPool;\\r\\n    }\\r\\n\\r\\n    function activeStakeMove(\\r\\n        address _user,\\r\\n        uint256 _stakeID\\r\\n    ) public view returns (StakeInfo memory) {\\r\\n        StakeManager.StakeInfo memory oldActiveStake = stakeManagerV1\\r\\n            .getUserActiveStake(_user, _stakeID);\\r\\n        return\\r\\n            StakeInfo(\\r\\n                oldActiveStake.amount,\\r\\n                oldActiveStake.startTime,\\r\\n                oldActiveStake.isAutoPool\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function withdrawnStakeMove(\\r\\n        address _user,\\r\\n        uint256 _stakeID\\r\\n    ) public view returns (WithdrawnStakeInfoOld memory) {\\r\\n        StakeManager.WithdrawnStakeInfo\\r\\n            memory oldWithdrawnStake = stakeManagerV1.getUserWithdrawnStake(\\r\\n                _user,\\r\\n                _stakeID\\r\\n            );\\r\\n        return\\r\\n            WithdrawnStakeInfoOld(\\r\\n                oldWithdrawnStake.amount,\\r\\n                oldWithdrawnStake.taxReduction,\\r\\n                oldWithdrawnStake.endTime,\\r\\n                oldWithdrawnStake.isAutoPool\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function withdrawnStakeMoveInternal(\\r\\n        address _user,\\r\\n        uint256 _stakeID\\r\\n    ) internal view returns (WithdrawnStakeInfoOld memory) {\\r\\n        StakeManager.WithdrawnStakeInfo\\r\\n            memory oldWithdrawnStake = stakeManagerV1.getUserWithdrawnStake(\\r\\n                _user,\\r\\n                _stakeID\\r\\n            );\\r\\n        return\\r\\n            WithdrawnStakeInfoOld(\\r\\n                oldWithdrawnStake.amount,\\r\\n                oldWithdrawnStake.taxReduction,\\r\\n                oldWithdrawnStake.endTime,\\r\\n                oldWithdrawnStake.isAutoPool\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getUserActiveStakes(\\r\\n        address _user\\r\\n    ) public view returns (StakeInfoView[] memory) {\\r\\n        UserInfoV2 storage user = userInfo[_user];\\r\\n        uint256 listInit = user.activeStakesCount;\\r\\n        if (listInit == 0) {\\r\\n            listInit = getOldActiveStakeCount(_user);\\r\\n        }\\r\\n        StakeInfoView[] memory stakes = new StakeInfoView[](listInit);\\r\\n        for (uint256 i = 0; i < listInit; i++) {\\r\\n            if (user.activeStakes[i].startTime == 0) {\\r\\n                StakeInfo memory tempInf = activeStakeMove(_user, i);\\r\\n                stakes[i] = StakeInfoView({\\r\\n                    stakeID: i,\\r\\n                    taxReduction: stakeManagerV1.getActiveStakeTaxReduction(\\r\\n                        _user,\\r\\n                        i\\r\\n                    ),\\r\\n                    amount: tempInf.amount,\\r\\n                    startTime: tempInf.startTime,\\r\\n                    isAutoPool: tempInf.isAutoPool\\r\\n                });\\r\\n            } else {\\r\\n                stakes[i] = StakeInfoView({\\r\\n                    stakeID: i,\\r\\n                    taxReduction: getActiveStakeTaxReduction(_user, i),\\r\\n                    amount: user.activeStakes[i].amount,\\r\\n                    startTime: user.activeStakes[i].startTime,\\r\\n                    isAutoPool: user.activeStakes[i].isAutoPool\\r\\n                });\\r\\n            }\\r\\n        }\\r\\n        return stakes;\\r\\n    }\\r\\n\\r\\n    function getUserWithdrawnStakes(\\r\\n        address _user\\r\\n    ) public view returns (WithdrawnStakeInfoView[] memory) {\\r\\n        uint256 balance = nftManager.balanceOf(_user);\\r\\n        WithdrawnStakeInfoView[] memory stakes = new WithdrawnStakeInfoView[](\\r\\n            balance\\r\\n        );\\r\\n        uint256[] memory nftList = new uint256[](balance);\\r\\n        for (uint256 i = 0; i < balance; i++) {\\r\\n            nftList[i] = nftManager.tokenOfOwnerByIndex(_user, i);\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < balance; i++) {\\r\\n            stakes[i] = WithdrawnStakeInfoView({\\r\\n                nftID: nftList[i],\\r\\n                currentAmount: nftManager.nftHoldingBalance(nftList[i]),\\r\\n                potentialAmount: nftManager.nftPotentialBalance(nftList[i]),\\r\\n                taxReduction: nftWithdrawnStakes[nftList[i]].taxReduction,\\r\\n                endTime: nftWithdrawnStakes[nftList[i]].endTime,\\r\\n                isAutoPool: nftWithdrawnStakes[nftList[i]].isAutoPool\\r\\n            });\\r\\n        }\\r\\n        return stakes;\\r\\n    }\\r\\n\\r\\n    function getOldActiveStakeCount(\\r\\n        address _user\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 finalI = 0;\\r\\n        while (true) {\\r\\n            if (\\r\\n                stakeManagerV1.getUserActiveStake(_user, finalI).startTime == 0\\r\\n            ) {\\r\\n                break;\\r\\n            }\\r\\n            finalI += 100;\\r\\n        }\\r\\n        if (finalI != 0) {\\r\\n            finalI -= 90;\\r\\n            while (true) {\\r\\n                if (\\r\\n                    stakeManagerV1\\r\\n                        .getUserActiveStake(_user, finalI)\\r\\n                        .startTime == 0\\r\\n                ) {\\r\\n                    break;\\r\\n                }\\r\\n                finalI += 10;\\r\\n            }\\r\\n            for (uint256 i = finalI - 9; i < finalI; i++) {\\r\\n                if (\\r\\n                    stakeManagerV1.getUserActiveStake(_user, i).startTime == 0\\r\\n                ) {\\r\\n                    return i;\\r\\n                }\\r\\n            }\\r\\n            return finalI;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getActiveStakeTaxReduction(\\r\\n        address _user,\\r\\n        uint256 _stakeID\\r\\n    ) public view returns (uint256) {\\r\\n        StakeInfo storage activeStake = userInfo[_user].activeStakes[_stakeID];\\r\\n        uint256 relief = reliefPerDay;\\r\\n        if (activeStake.isAutoPool) {\\r\\n            relief = reliefPerDay + reliefPerDayExtra;\\r\\n        }\\r\\n        uint256 taxReduction = ((block.timestamp - activeStake.startTime) /\\r\\n            24 hours) * relief;\\r\\n        return taxReduction;\\r\\n    }\\r\\n\\r\\n    function getWithdrawnStakeTaxReduction(\\r\\n        uint256 _tokenID\\r\\n    ) public view returns (uint256) {\\r\\n        return nftWithdrawnStakes[_tokenID].taxReduction;\\r\\n    }\\r\\n\\r\\n    function getUserActiveStake(\\r\\n        address _user,\\r\\n        uint256 _stakeID\\r\\n    ) external view returns (StakeInfo memory) {\\r\\n        return userInfo[_user].activeStakes[_stakeID];\\r\\n    }\\r\\n\\r\\n    function getUserWithdrawnStake(\\r\\n        uint256 _tokenID\\r\\n    ) external view returns (WithdrawnStakeInfoView memory) {\\r\\n        return\\r\\n            WithdrawnStakeInfoView(\\r\\n                _tokenID,\\r\\n                nftManager.nftHoldingBalance(_tokenID),\\r\\n                nftManager.nftPotentialBalance(_tokenID),\\r\\n                nftWithdrawnStakes[_tokenID].taxReduction,\\r\\n                nftWithdrawnStakes[_tokenID].endTime,\\r\\n                nftWithdrawnStakes[_tokenID].isAutoPool\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function isStakeAutoPool(\\r\\n        address _user,\\r\\n        uint256 _stakeID\\r\\n    ) public view returns (bool) {\\r\\n        if (userInfo[_user].activeStakes[_stakeID].startTime == 0) {\\r\\n            return activeStakeMove(_user, _stakeID).isAutoPool;\\r\\n        } else {\\r\\n            return userInfo[_user].activeStakes[_stakeID].isAutoPool;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function changeReliefValues(\\r\\n        uint256 relief1,\\r\\n        uint256 relief2\\r\\n    ) external onlyOwner {\\r\\n        require(relief1 + relief2 < 1000);\\r\\n        reliefPerDay = relief1;\\r\\n        reliefPerDayExtra = relief2;\\r\\n    }\\r\\n\\r\\n    function setNftManager(address _nftManager) external onlyOwner {\\r\\n        nftManager = DogsNftManager(_nftManager);\\r\\n    }\\r\\n\\r\\n    function setAllowedAddress(address _address, bool _state) public onlyOwner {\\r\\n        allowedAddress[_address] = _state;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DogsToken\",\"outputs\":[{\"internalType\":\"contract IDogsToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dogsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"mintForWithdrawnStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftHoldingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftLastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftPotentialBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"returnNFTbalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnNFTbalancePublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setAllowedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseExtension\",\"type\":\"string\"}],\"name\":\"setBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldown\",\"type\":\"uint256\"}],\"name\":\"setCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"useNFTbalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"utilizeNFTbalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DogsNftManager", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}