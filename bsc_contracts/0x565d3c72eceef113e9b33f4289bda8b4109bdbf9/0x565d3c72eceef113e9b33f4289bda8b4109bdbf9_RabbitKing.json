{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n   \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(\r\n            _previousOwner == msg.sender,\r\n            \"You don't have permission to unlock\"\r\n        );\r\n        require(block.timestamp > _lockTime, \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract RabbitKing is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    struct FeeTier {\r\n        uint256 taxFee;\r\n        uint256 ownerFee;\r\n        uint256 burnFee;\r\n        address owner;\r\n        uint256 totalFee;\r\n    }\r\n\r\n    struct FeeValues {\r\n        uint256 rAmount;\r\n        uint256 rTransferAmount;\r\n        uint256 rFee;\r\n        uint256 tTransferAmount;\r\n        uint256 tFee;\r\n        uint256 tOwner;\r\n        uint256 tBurn;\r\n    }\r\n\r\n    struct tFeeValues {\r\n        uint256 tTransferAmount;\r\n        uint256 tFee;\r\n        uint256 tOwner;\r\n        uint256 tBurn;\r\n    }\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcluded;\r\n    mapping(address => bool) private _defaultExcluded;\r\n    mapping(address => uint256) private _accountsTier;\r\n    enum CHECK {\r\n        NOTCHECKED,\r\n        CHECKEDANDNOTNEED,\r\n        ISNEED\r\n    }\r\n    mapping(address => CHECK) public _isRouter;\r\n    mapping(address => CHECK) public _isPair;\r\n    mapping(address => bool) public whitelist;\r\n    address[] public whitelistAddress;\r\n    mapping(uint256 => uint256) public whitelistReleaseTime;\r\n    uint256 public start;\r\n    uint256 private totalPresaleNum;\r\n    uint256 private whitelistPresaleAmount;\r\n\r\n    address[] private _excluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal;\r\n    uint256 private _rTotal;\r\n    uint256 private _tFeeTotal;\r\n    uint256 private _maxFee;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n\r\n    FeeTier public _defaultFees;\r\n    FeeTier private _previousFees;\r\n    FeeTier private _emptyFees;\r\n    uint256 private feeDivide = 10**4;\r\n    uint256 private minNumForReward;\r\n    bool public checkReward;\r\n    uint256 private whitelistMaxNum;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address public WBNB;\r\n    address private _walletManager;\r\n    address private _burnAddress;\r\n    address private _ownerFeeManager;\r\n    address private _whitelistManager;\r\n    address private _echosystem;\r\n    bool public _pass;\r\n\r\n    modifier checkIsRouter(address _sender) {\r\n        {\r\n            if (_isRouter[_sender] == CHECK.NOTCHECKED) {\r\n                if (address(_sender).isContract()) {\r\n                    IUniswapV2Router02 _routerCheck = IUniswapV2Router02(\r\n                        _sender\r\n                    );\r\n                    try _routerCheck.WETH() returns (address) {\r\n                        try _routerCheck.factory() returns (address) {\r\n                            _isRouter[_sender] = CHECK.ISNEED;\r\n                        } catch {\r\n                            _isRouter[_sender] = CHECK.CHECKEDANDNOTNEED;\r\n                        }\r\n                    } catch {\r\n                        _isRouter[_sender] = CHECK.CHECKEDANDNOTNEED;\r\n                    }\r\n                } else {\r\n                    _isRouter[_sender] = CHECK.CHECKEDANDNOTNEED;\r\n                }\r\n            }\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    modifier checkIsPair(address _sender) {\r\n        {\r\n            if (_isPair[_sender] == CHECK.NOTCHECKED) {\r\n                if (_sender.isContract()) {\r\n                    IUniswapV2Pair _pairCheck = IUniswapV2Pair(_sender);\r\n                    try _pairCheck.token0() returns (address) {\r\n                        try _pairCheck.token1() returns (address) {\r\n                            try _pairCheck.factory() returns (address) {\r\n                                address _token0 = _pairCheck.token0();\r\n                                address _token1 = _pairCheck.token1();\r\n                                address this_token = address(this) == _token0\r\n                                    ? _token0\r\n                                    : address(this) == _token1\r\n                                    ? _token1\r\n                                    : address(0);\r\n                                if (this_token != address(0)) {\r\n                                    _isPair[_sender] == CHECK.ISNEED;\r\n                                } else {\r\n                                    _isPair[_sender] == CHECK.CHECKEDANDNOTNEED;\r\n                                }\r\n                            } catch {\r\n                                _isPair[_sender] == CHECK.CHECKEDANDNOTNEED;\r\n                            }\r\n                        } catch {\r\n                            _isPair[_sender] == CHECK.CHECKEDANDNOTNEED;\r\n                        }\r\n                    } catch {\r\n                        _isPair[_sender] == CHECK.CHECKEDANDNOTNEED;\r\n                    }\r\n                } else {\r\n                    _isPair[_sender] == CHECK.CHECKEDANDNOTNEED;\r\n                }\r\n            }\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev\r\n     * We create 2 variables _rTotalExcluded and _tTotalExcluded that store total t and r excluded\r\n     * So for any actions such as add, remove exclude wallet or increase, decrease exclude amount, we will update\r\n     * _rTotalExcluded and _tTotalExcluded\r\n     * and in _getCurrentSupply() function, we remove for loop by using _rTotalExcluded and _tTotalExcluded\r\n     * But this contract using proxy pattern, so when we upgrade contract,\r\n     *  we need to call updateTotalExcluded() to init value of _rTotalExcluded and _tTotalExcluded\r\n     */\r\n    uint256 private _rTotalExcluded;\r\n    uint256 private _tTotalExcluded;\r\n\r\n    constructor() {\r\n        _name = \"RabbitKing\";\r\n        _symbol = \"RabbitKing\";\r\n        _decimals = 18;\r\n\r\n        _tTotal = 1e10 * 10**_decimals;\r\n        _rTotal = (MAX - (MAX % _tTotal));\r\n        _maxFee = 1000;\r\n\r\n        _burnAddress = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n        _walletManager = address(0x1eB3974e6CA4861279eEba76F3327eBa2838e761);\r\n        _ownerFeeManager = address(0x37f1141AbA3dF489bdedEeBD88F71F1380E8F08f);\r\n        _whitelistManager = address(0x6647afe21d931e5f06D15e605202ABF6bEe38Efd);\r\n        _echosystem = _msgSender();\r\n        address _router = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        uint256 _walletManagerPercent = 30;\r\n        uint256 _presalePercent = 30;\r\n        uint256 _burnPercent = 40;\r\n        uint256 _baseDivide = 100;\r\n        minNumForReward = 1e6 * 10**_decimals;\r\n        checkReward = true;\r\n        totalPresaleNum = _tTotal.div(_baseDivide).mul(_presalePercent);\r\n        start = uint256(1674144000); // 1.22\r\n\r\n        _rOwned[_walletManager] = _rTotal.div(_baseDivide).mul(\r\n            _walletManagerPercent\r\n        );\r\n        emit Transfer(\r\n            address(0),\r\n            _walletManager,\r\n            _tTotal.div(_baseDivide).mul(_walletManagerPercent)\r\n        );\r\n        _rOwned[address(this)] = _rTotal.div(_baseDivide).mul(\r\n            _presalePercent.add(_burnPercent)\r\n        );\r\n        emit Transfer(\r\n            address(0),\r\n            address(this),\r\n            _tTotal.div(_baseDivide).mul(_presalePercent.add(_burnPercent))\r\n        );\r\n\r\n        _whitelist_release_time_init();\r\n        _routerAndpair_init(_router);\r\n        _exclude_init();\r\n        _tiers_init();\r\n        _burn(address(this), _tTotal.div(_baseDivide).mul(_burnPercent));\r\n    }\r\n\r\n    function _whitelist_release_time_init() internal {\r\n        whitelistPresaleAmount = 1e8 * 10**_decimals;\r\n        whitelistMaxNum = 30;\r\n        require(\r\n            whitelistMaxNum.mul(whitelistPresaleAmount) <= totalPresaleNum,\r\n            \"Whitelist: presale nums  execced max amount\"\r\n        );\r\n        whitelistReleaseTime[0] = uint256(1674352800);\r\n        whitelistReleaseTime[1] = uint256(1674921600);\r\n        whitelistReleaseTime[2] = uint256(1675526400);\r\n        whitelistReleaseTime[3] = uint256(1676131200);\r\n        whitelistReleaseTime[4] = uint256(1676822400);\r\n    }\r\n\r\n    function _routerAndpair_init(address _router) internal {\r\n        uniswapV2Router = IUniswapV2Router02(_router);\r\n        WBNB = uniswapV2Router.WETH();\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n                address(this),\r\n                WBNB\r\n            );\r\n        _isRouter[_router] = CHECK.ISNEED;\r\n        _isPair[uniswapV2Pair] = CHECK.ISNEED;\r\n\r\n        _isRouter[address(0)] = CHECK.CHECKEDANDNOTNEED;\r\n        _isPair[address(0)] = CHECK.CHECKEDANDNOTNEED;\r\n        _isRouter[address(this)] = CHECK.CHECKEDANDNOTNEED;\r\n        _isPair[address(this)] = CHECK.CHECKEDANDNOTNEED;\r\n        _isRouter[_burnAddress] = CHECK.CHECKEDANDNOTNEED;\r\n        _isPair[_burnAddress] = CHECK.CHECKEDANDNOTNEED;\r\n        _isRouter[owner()] = CHECK.CHECKEDANDNOTNEED;\r\n        _isPair[owner()] = CHECK.CHECKEDANDNOTNEED;\r\n        _isRouter[_walletManager] = CHECK.CHECKEDANDNOTNEED;\r\n        _isPair[_walletManager] = CHECK.CHECKEDANDNOTNEED;\r\n        _isRouter[_ownerFeeManager] = CHECK.CHECKEDANDNOTNEED;\r\n        _isPair[_ownerFeeManager] = CHECK.CHECKEDANDNOTNEED;\r\n        _isRouter[_whitelistManager] = CHECK.CHECKEDANDNOTNEED;\r\n        _isPair[_whitelistManager] = CHECK.CHECKEDANDNOTNEED;\r\n    }\r\n\r\n    function _exclude_init() internal {\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[_walletManager] = true;\r\n        _isExcludedFromFee[_ownerFeeManager] = true;\r\n        _isExcludedFromFee[_whitelistManager] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _excludeFromReward(address(this));\r\n        _defaultExcluded[address(this)] = true;\r\n        _excludeFromReward(owner());\r\n        _defaultExcluded[owner()] = true;\r\n        _excludeFromReward(_walletManager);\r\n        _defaultExcluded[_walletManager] = true;\r\n        _excludeFromReward(_ownerFeeManager);\r\n        _defaultExcluded[_ownerFeeManager] = true;\r\n        _excludeFromReward(_whitelistManager);\r\n        _defaultExcluded[_whitelistManager] = true;\r\n        _excludeFromReward(_burnAddress);\r\n        _defaultExcluded[_burnAddress] = true;\r\n    }\r\n\r\n    function _tiers_init() internal {\r\n        _defaultFees = _addTier(300, 200, 300, _ownerFeeManager);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        checkIsPair(msg.sender)\r\n        checkIsPair(recipient)\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n     function batchTransfer(address[] memory recipients, uint256 amount)\r\n        public\r\n        checkIsPair(msg.sender)\r\n        returns (bool)\r\n    {\r\n        for (uint8 i = 0; i < recipients.length; i++) {\r\n            require(\r\n                balanceOf(_msgSender()) >= amount,\r\n                \"BEP20: sender balance insufficient\"\r\n            );\r\n             _transfer(_msgSender(), recipients[i], amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        checkIsRouter(spender)\r\n        checkIsPair(spender)\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    )\r\n        public\r\n        override\r\n        checkIsPair(msg.sender)\r\n        checkIsPair(sender)\r\n        checkIsPair(recipient)\r\n        returns (bool)\r\n    {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"BEP20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"BEP20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function reflectionFromTokenInTiers(uint256 tAmount, bool deductTransferFee)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            FeeValues memory _values = _getValues(tAmount);\r\n            return _values.rAmount;\r\n        } else {\r\n            FeeValues memory _values = _getValues(tAmount);\r\n            return _values.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return reflectionFromTokenInTiers(tAmount, deductTransferFee);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public {\r\n        require(\r\n            msg.sender == _echosystem || msg.sender == _whitelistManager,\r\n            \"Permission: denied!\"\r\n        );\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        _excludeFromReward(account);\r\n    }\r\n\r\n    function includeInReward(address account) external {\r\n        require(\r\n            msg.sender == _echosystem || msg.sender == _whitelistManager,\r\n            \"Permission: denied!\"\r\n        );\r\n        require(_isExcluded[account], \"Account is already included\");\r\n        _includeInReward(account);\r\n    }\r\n\r\n    function excludeFromFee(address account) public {\r\n        require(\r\n            msg.sender == _echosystem || msg.sender == _whitelistManager,\r\n            \"Permission: denied!\"\r\n        );\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public {\r\n        require(\r\n            msg.sender == _echosystem || msg.sender == _whitelistManager,\r\n            \"Permission: denied!\"\r\n        );\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function whitelistNums() public view returns (uint256) {\r\n        return whitelistAddress.length;\r\n    }\r\n\r\n    function isWhitelist(address _account) public view returns (bool) {\r\n        return whitelist[_account];\r\n    }\r\n\r\n    function checkWhiteLockNums(address account)\r\n        internal\r\n        view\r\n        returns (uint256 lockNum)\r\n    {\r\n        if (whitelist[account]) {\r\n            if (block.timestamp < whitelistReleaseTime[0]) {\r\n                lockNum = whitelistPresaleAmount;\r\n            } else if (block.timestamp >= whitelistReleaseTime[0]) {\r\n                lockNum = whitelistPresaleAmount.div(100).mul(80);\r\n            } else if (block.timestamp >= whitelistReleaseTime[1]) {\r\n                lockNum = whitelistPresaleAmount.div(100).mul(60);\r\n            } else if (block.timestamp >= whitelistReleaseTime[2]) {\r\n                lockNum = whitelistPresaleAmount.div(100).mul(40);\r\n            } else if (block.timestamp >= whitelistReleaseTime[3]) {\r\n                lockNum = whitelistPresaleAmount.div(100).mul(20);\r\n            }else if (block.timestamp >= whitelistReleaseTime[4]) {\r\n                lockNum = 0;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function _excludeFromReward(address account) internal {\r\n        if (_isExcluded[account]) {\r\n            return;\r\n        }\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n            _tTotalExcluded = _tTotalExcluded.add(_tOwned[account]);\r\n            _rTotalExcluded = _rTotalExcluded.add(_rOwned[account]);\r\n        }\r\n\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function _includeInReward(address account) internal {\r\n        if (!_isExcluded[account]) {\r\n            return;\r\n        }\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tTotalExcluded = _tTotalExcluded.sub(_tOwned[account]);\r\n                _rTotalExcluded = _rTotalExcluded.sub(_rOwned[account]);\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _addWhitelist(address account) internal {\r\n        for (uint256 i = 0; i < whitelistAddress.length; i++) {\r\n            if (whitelistAddress[i] == account) {\r\n                whitelist[account] = true;\r\n                return;\r\n            }\r\n        }\r\n        whitelistAddress.push(account);\r\n        whitelist[account] = true;\r\n    }\r\n\r\n    function _removeWhitelist(address account) internal {\r\n        address[] memory temp;\r\n        for (uint256 i = 0; i < whitelistAddress.length; i++) {\r\n            if (whitelistAddress[i] == account) {\r\n                whitelist[account] = false;\r\n            } else {\r\n                temp[temp.length] = whitelistAddress[i];\r\n            }\r\n        }\r\n        whitelistAddress = temp;\r\n    }\r\n\r\n    function checkFees(FeeTier memory _tier)\r\n        internal\r\n        view\r\n        returns (FeeTier memory)\r\n    {\r\n        uint256 _fees = _tier.taxFee.add(_tier.ownerFee).add(_tier.burnFee);\r\n        require(_fees <= _maxFee, \"Fees: Fees exceeded max limitation\");\r\n\r\n        return _tier;\r\n    }\r\n\r\n    function updateStart(uint256 newStart) external {\r\n        require(\r\n            msg.sender == _echosystem,\r\n            \"Permission: denied!\"\r\n        );\r\n        start = newStart;\r\n    }\r\n\r\n\r\n    function updateOpen(bool open) external returns(bool) {\r\n        require(\r\n            msg.sender == _echosystem,\r\n            \"Permission: denied!\"\r\n        );\r\n        _pass = open;\r\n        return _pass;\r\n    }\r\n\r\n    function addWhitelist(address[] memory accounts) external {\r\n        require(\r\n            msg.sender == _echosystem || msg.sender == _whitelistManager,\r\n            \"Permission: denied!\"\r\n        );\r\n        require(\r\n            accounts.length.add(whitelistAddress.length) <= whitelistMaxNum,\r\n            \"Whitelist: accounts num exceed max num!\"\r\n        );\r\n        require(\r\n            balanceOf(address(this)) >=\r\n                whitelistPresaleAmount.mul(accounts.length),\r\n            \"Whitelist: Amounts exceed balance!\"\r\n        );\r\n\r\n        for (uint8 i = 0; i < accounts.length; i++) {\r\n            if (balanceOf(address(this)) < whitelistPresaleAmount) {\r\n                return;\r\n            }\r\n\r\n            _tokenTransfer(\r\n                address(this),\r\n                accounts[i],\r\n                whitelistPresaleAmount,\r\n                false\r\n            );\r\n            _addWhitelist(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function removeWhilist(address account) external {\r\n        require(\r\n            msg.sender == _echosystem || msg.sender == _whitelistManager,\r\n            \"Permission: denied!\"\r\n        );\r\n        _removeWhitelist(account);\r\n    }\r\n\r\n    function _addTier(\r\n        uint256 _taxFee,\r\n        uint256 _ownerFee,\r\n        uint256 _burnFee,\r\n        address _owner\r\n    ) internal returns (FeeTier memory) {\r\n        FeeTier memory _newTier = checkFees(\r\n            FeeTier(\r\n                _taxFee,\r\n                _ownerFee,\r\n                _burnFee,\r\n                _owner,\r\n                _taxFee.add(_ownerFee.add(_burnFee))\r\n            )\r\n        );\r\n        _excludeFromReward(_owner);\r\n        return _newTier;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (FeeValues memory)\r\n    {\r\n        tFeeValues memory tValues = _getTValues(tAmount);\r\n        uint256 tTransferFee = tValues.tOwner.add(tValues.tBurn);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\r\n            tAmount,\r\n            tValues.tFee,\r\n            tTransferFee,\r\n            _getRate()\r\n        );\r\n        return\r\n            FeeValues(\r\n                rAmount,\r\n                rTransferAmount,\r\n                rFee,\r\n                tValues.tTransferAmount,\r\n                tValues.tFee,\r\n                tValues.tOwner,\r\n                tValues.tBurn\r\n            );\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (tFeeValues memory)\r\n    {\r\n        FeeTier memory tier = _defaultFees;\r\n        tFeeValues memory tValues = tFeeValues(\r\n            0,\r\n            calculateFee(tAmount, tier.taxFee),\r\n            calculateFee(tAmount, tier.ownerFee),\r\n            calculateFee(tAmount, tier.burnFee)\r\n        );\r\n\r\n        tValues.tTransferAmount = tAmount\r\n            .sub(tValues.tFee)\r\n            .sub(tValues.tOwner)\r\n            .sub(tValues.tBurn);\r\n\r\n        return tValues;\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tTransferFee,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTransferFee = tTransferFee.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTransferFee);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRValue(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (uint256 rAmount)\r\n    {\r\n        uint256 currentRate = _getRate();\r\n        rAmount = tAmount.mul(currentRate);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        if (_rTotalExcluded > _rTotal || _tTotalExcluded > _tTotal) {\r\n            return (_rTotal, _tTotal);\r\n        }\r\n        uint256 rSupply = _rTotal.sub(_rTotalExcluded);\r\n        uint256 tSupply = _tTotal.sub(_tTotalExcluded);\r\n\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function calculateFee(uint256 _amount, uint256 _fee)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_fee == 0) return 0;\r\n        return _amount.mul(_fee).div(feeDivide);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        _previousFees = _defaultFees;\r\n        _defaultFees = _emptyFees;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _defaultFees = _previousFees;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private checkIsRouter(msg.sender) checkIsRouter(from) checkIsRouter(to) {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(balanceOf(from) >= amount, \"Transfer amount exceed balance\");\r\n        uint256 lockNum = checkWhiteLockNums(from);\r\n        require(\r\n            balanceOf(from) >= amount.add(lockNum),\r\n            \"BEP20: white list lock number not release now\"\r\n        );\r\n\r\n        // aka p2p\r\n        bool isT = !from.isContract() && !to.isContract() ? true : false;\r\n\r\n        if (!(_defaultExcluded[from] || _defaultExcluded[to] || isT)) {\r\n            bool pass = false;\r\n            if ((_isPair[from] == CHECK.ISNEED && !_defaultExcluded[to]) \r\n                 || (_isPair[to] == CHECK.ISNEED && !_defaultExcluded[from])){\r\n                if (block.timestamp < start){\r\n                    pass =_pass;\r\n                }\r\n            }\r\n            require(block.timestamp >= start || pass, \"RabbitKing: locked trade\");\r\n        }\r\n\r\n        bool takeFee;\r\n\r\n        if (\r\n            (_isPair[to] == CHECK.ISNEED && _isRouter[from] != CHECK.ISNEED) ||\r\n            (_isPair[from] == CHECK.ISNEED && _isRouter[to] != CHECK.ISNEED)\r\n        ) {\r\n            takeFee = true;\r\n        }\r\n        if (_isExcludedFromFee[from]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n        _checkReward(from);\r\n        _checkReward(to);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n\r\n        if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount, takeFee);\r\n        } else if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount, takeFee);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount, takeFee);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount, takeFee);\r\n        }\r\n\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        (\r\n            uint256 _tAmount,\r\n            FeeValues memory _values\r\n        ) = _checkIfTakeFeeFromSender(sender, recipient, tAmount, takeFee);\r\n        tAmount = _tAmount;\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(_values.rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(_values.tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(_values.rTransferAmount);\r\n\r\n        _tTotalExcluded = _tTotalExcluded.add(_values.tTransferAmount).sub(\r\n            tAmount\r\n        );\r\n        _rTotalExcluded = _rTotalExcluded.add(_values.rTransferAmount).sub(\r\n            _values.rAmount\r\n        );\r\n\r\n        _takeFees(sender, _values);\r\n        _reflectFee(_values.rFee, _values.tFee);\r\n        emit Transfer(sender, recipient, _values.tTransferAmount);\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        (\r\n            uint256 _tAmount,\r\n            FeeValues memory _values\r\n        ) = _checkIfTakeFeeFromSender(sender, recipient, tAmount, takeFee);\r\n        tAmount = _tAmount;\r\n        _rOwned[sender] = _rOwned[sender].sub(_values.rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(_values.rTransferAmount);\r\n        _takeFees(sender, _values);\r\n        _reflectFee(_values.rFee, _values.tFee);\r\n        emit Transfer(sender, recipient, _values.tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        (\r\n            uint256 _tAmount,\r\n            FeeValues memory _values\r\n        ) = _checkIfTakeFeeFromSender(sender, recipient, tAmount, takeFee);\r\n        tAmount = _tAmount;\r\n        _rOwned[sender] = _rOwned[sender].sub(_values.rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(_values.tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(_values.rTransferAmount);\r\n\r\n        _tTotalExcluded = _tTotalExcluded.add(_values.tTransferAmount);\r\n        _rTotalExcluded = _rTotalExcluded.add(_values.rTransferAmount);\r\n\r\n        _takeFees(sender, _values);\r\n        _reflectFee(_values.rFee, _values.tFee);\r\n        emit Transfer(sender, recipient, _values.tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        (\r\n            uint256 _tAmount,\r\n            FeeValues memory _values\r\n        ) = _checkIfTakeFeeFromSender(sender, recipient, tAmount, takeFee);\r\n        tAmount = _tAmount;\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(_values.rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(_values.rTransferAmount);\r\n        _tTotalExcluded = _tTotalExcluded.sub(tAmount);\r\n        _rTotalExcluded = _rTotalExcluded.sub(_values.rAmount);\r\n\r\n        _takeFees(sender, _values);\r\n        _reflectFee(_values.rFee, _values.tFee);\r\n        emit Transfer(sender, recipient, _values.tTransferAmount);\r\n    }\r\n\r\n    function _checkIfTakeFeeFromSender(\r\n        address from,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private view returns (uint256 _tAmount, FeeValues memory _values) {\r\n        _values = _getValues(tAmount);\r\n        if (\r\n            takeFee &&\r\n            (_isPair[recipient] == CHECK.ISNEED ||\r\n                _isRouter[recipient] == CHECK.ISNEED)\r\n        ) {\r\n            uint256 totalFee = _defaultFees.totalFee;\r\n            _tAmount = tAmount.add(tAmount.div(feeDivide).mul(totalFee));\r\n            require(\r\n                balanceOf(from) >= _tAmount,\r\n                \"ERC20: transfer amount exceed balance\"\r\n            );\r\n            _values.rAmount = _getRValue(_tAmount);\r\n            _values.tTransferAmount = tAmount;\r\n            _values.rTransferAmount = _getRValue(tAmount);\r\n        } else {\r\n            _tAmount = tAmount;\r\n        }\r\n    }\r\n\r\n    function _checkReward(address account) private {\r\n        uint256 aBalance = balanceOf(account);\r\n        if (\r\n            !checkReward ||\r\n            _isRouter[account] == CHECK.ISNEED ||\r\n            _isPair[account] == CHECK.ISNEED ||\r\n            _defaultExcluded[account] ||\r\n            (aBalance >= minNumForReward && !_isExcluded[account]) ||\r\n            (aBalance < minNumForReward && _isExcluded[account])\r\n        ) {\r\n            return;\r\n        } else if (aBalance < minNumForReward && !_isExcluded[account]) {\r\n            _excludeFromReward(account);\r\n        } else if (aBalance >= minNumForReward && _isExcluded[account]) {\r\n            _includeInReward(account);\r\n        }\r\n    }\r\n\r\n    function _takeFees(address sender, FeeValues memory values) private {\r\n        _takeFee(sender, values.tOwner, _defaultFees.owner);\r\n        _takeBurn(sender, values.tBurn);\r\n    }\r\n\r\n    function _takeFee(\r\n        address sender,\r\n        uint256 tAmount,\r\n        address recipient\r\n    ) private {\r\n        if (recipient == address(0)) return;\r\n        if (tAmount == 0) return;\r\n\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n\r\n        if (_isExcluded[recipient]) {\r\n            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\r\n            _tTotalExcluded = _tTotalExcluded.add(tAmount);\r\n            _rTotalExcluded = _rTotalExcluded.add(rAmount);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    function _takeBurn(address sender, uint256 _amount) private {\r\n        if (_amount == 0) return;\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = _amount.mul(currentRate);\r\n        _rOwned[_burnAddress] = _rOwned[_burnAddress].add(rAmount);\r\n\r\n        if (_isExcluded[_burnAddress]) {\r\n            _tOwned[_burnAddress] = _tOwned[_burnAddress].add(_amount);\r\n            _tTotalExcluded = _tTotalExcluded.add(_amount);\r\n            _rTotalExcluded = _rTotalExcluded.add(rAmount);\r\n        }\r\n\r\n        emit Transfer(sender, _burnAddress, _amount);\r\n    }\r\n\r\n    function _burn(address sender, uint256 _amount) private {\r\n        if (_amount == 0) return;\r\n        uint256 rAmount = _getRValue(_amount);\r\n        require(\r\n            balanceOf(sender) >= _amount,\r\n            \"ERC20: burn amount exceed balance\"\r\n        );\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[_burnAddress] = _rOwned[_burnAddress].add(rAmount);\r\n        if (_isExcluded[sender] && _isExcluded[_burnAddress]) {\r\n            _tOwned[sender] = _tOwned[sender].sub(_amount);\r\n            _tOwned[_burnAddress] = _tOwned[_burnAddress].add(_amount);\r\n        } else if (_isExcluded[sender] && !_isExcluded[_burnAddress]) {\r\n            _tOwned[sender] = _tOwned[sender].sub(_amount);\r\n            _tTotalExcluded = _tTotalExcluded.sub(_amount);\r\n            _rTotalExcluded = _rTotalExcluded.sub(rAmount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[_burnAddress]) {\r\n            _tOwned[_burnAddress] = _tOwned[_burnAddress].add(_amount);\r\n            _tTotalExcluded = _tTotalExcluded.add(_amount);\r\n            _rTotalExcluded = _rTotalExcluded.add(rAmount);\r\n        }\r\n\r\n        emit Transfer(sender, _burnAddress, _amount);\r\n    }\r\n\r\n    function burn(uint256 amount) public {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function resetAccount(address account) public {\r\n        require(\r\n            msg.sender == account ||\r\n                msg.sender == _echosystem ||\r\n                msg.sender == _whitelistManager,\r\n            \"Permission: denied!\"\r\n        );\r\n        _checkReward(account);\r\n    }\r\n\r\n    function resetCheckReward(bool _enable) public {\r\n        require(\r\n            msg.sender == _echosystem || msg.sender == _whitelistManager,\r\n            \"Permission: denied!\"\r\n        );\r\n        checkReward = _enable;\r\n    }\r\n\r\n    function withdrawToken(address _token, uint256 _amount) public {\r\n        require(\r\n            msg.sender == _echosystem || msg.sender == _whitelistManager,\r\n            \"Permission: denied!\"\r\n        );\r\n        if (msg.sender == _whitelistManager) {\r\n            require(_token == address(this), \"Permission: denied\");\r\n        }\r\n        IERC20(_token).transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function getContractBalance() public view returns (uint256) {\r\n        return balanceOf(address(this));\r\n    }\r\n\r\n    function getBNBBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function withdrawBnb(uint256 _amount) public {\r\n        require(\r\n            msg.sender == _echosystem || msg.sender == _walletManager,\r\n            \"Permission: denied!\"\r\n        );\r\n        payable(msg.sender).transfer(_amount);\r\n    }\r\n\r\n    function checkWhitelistRelease(uint256 index) public view returns (bool) {\r\n        require(index >= 0 && index < 4, \"Whitelist: index not in rank!\");\r\n        return block.timestamp >= whitelistReleaseTime[index];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_defaultFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isPair\",\"outputs\":[{\"internalType\":\"enum RabbitKing.CHECK\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isRouter\",\"outputs\":[{\"internalType\":\"enum RabbitKing.CHECK\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pass\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"checkWhitelistRelease\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNBBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromTokenInTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhilist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"resetAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"resetCheckReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"updateOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStart\",\"type\":\"uint256\"}],\"name\":\"updateStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistNums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RabbitKing", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3ff6575464a317e72f1d96e1f80f9a2f8c5de7a68c34af6081dcb99b3cc273c0"}