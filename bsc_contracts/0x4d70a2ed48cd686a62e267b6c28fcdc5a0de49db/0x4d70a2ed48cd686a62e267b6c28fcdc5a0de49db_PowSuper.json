{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Adipt(address indexed from, uint256 value);\r\n\tevent Receave(address indexed from, uint256 value);\r\n\tevent Receiveeveryday(address indexed from, uint256 value);\r\n\tevent Receivedt(address indexed from, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\t\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        require(_totalSupply == 0, \"ERC20: mint only creat\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = amount;\r\n        _balances[account] = amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ncontract TokenHelper is Ownable {\r\n    function transferToken(address token, address receiver, uint256 amount) external onlyOwner {\r\n        IERC20(token).transfer(receiver, amount);\r\n    }\r\n}\r\n\r\ncontract PowSuper is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n    address public FAddress = 0x2eD9a5C8C13b93955103B9a7C167B67Ef4d568a3;\r\n    address public CAddress1 = 0x1109C472a163f7C60E0e03D4D2098B9480CF014C;\r\n\taddress public CAddress2 = 0xaEEd4E54a9c9DCE43e746c72714Ab80394B8eE8b;\r\n\taddress public CAddress4 = 0xf1d3d69d89F9Cb911F809C878c44b74509e4814C;\r\n\taddress public CAddress5 = 0xf9d73B5f7B87e159e871E96d10aC3886B0B18641;\r\n\taddress public CAddress52 = 0xC583437461594F13041Bd121197Fae2439B61999;\r\n\taddress public getmAddress = 0x34B63b9839b73910752D12F9d4D889A629bc950f;\r\n\taddress public busdAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    uint256 public Fee = 1;\r\n\tuint256 public Minsa = 5 * 10 ** 18;\r\n\tuint256 public swapblocknumber = 0;\r\n\tuint256 public usernum=0;\r\n    uint256 public LiquidityAmount;\r\n\tuint256 public AtAmount;\r\n    uint256 public MaxAtAmount;\r\n    mapping(address => bool) public _isExcludedFromFees;\r\n\tmapping(address => bool) public _isExcludedFromnoFees;\r\n\t\r\n\tstruct UserInfo {\r\n        uint256 Allm;\r\n        uint256 Amd;\r\n        uint256 Amt;\r\n        uint256 Amax;\r\n\t\tuint256 Amdt;\r\n        uint256 level;\r\n        uint256 gettime;\r\n\t\tuint256 aditime;\r\n        uint256 rTimes;\r\n        uint256 inviteNumber;\r\n\t\tuint256 inviteNumber2;\r\n\t\taddress[] referrals;\r\n    }\r\n    struct Inviter{\r\n        address account;\r\n        uint256 inviteBlockNumber;\r\n        uint256 inviteTimestamp;\r\n    }\r\n\tstruct Invest{\r\n        uint256 num;\r\n\t\tuint256 num2;\r\n        uint256 investTimestamp;\r\n\t\tuint256 reTime;\r\n\t\tuint256 price;\r\n\t\tbool retrieve ;\r\n    }\r\n\tmapping(address => address ) inviter;\r\n\tmapping(address => address ) ainviter;\r\n    mapping(address => UserInfo) user;\r\n    mapping(address => Inviter[]) memberInviter;\r\n\tmapping(address => Invest[]) memberInvest;\r\n\t\r\n    bool private swapping;\r\n\r\n    TokenHelper public tokenHelper;\r\n\r\n    constructor(address tokenOwner) ERC20(\"PowSuper\", \"POWS\") {\r\n        uint256 totalSupply = 2100000 * (10**18);\r\n\t\tAtAmount = 100 * 10 ** 18;\r\n\t\tMaxAtAmount = 2000 * 10 ** 18;\r\n\r\n        _owner = tokenOwner;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\t\tuniswapV2Router = _uniswapV2Router;\r\n        tokenHelper = new TokenHelper();\r\n\r\n        _isExcludedFromFees[tokenOwner] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[address(tokenHelper)] = true;\r\n\t\t\r\n\t\tUserInfo storage user_ = user[tokenOwner];\r\n\t\tuser_.level=6;\r\n\t\tuser_.Allm=3000;\r\n\t\tinviter[tokenOwner] = tokenOwner;\r\n        _mint(tokenOwner, totalSupply);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\t\trequire(!_isExcludedFromnoFees[from], \"ERC20: transfer limit\");\r\n        if(amount == 0) { super._transfer(from, to, 0); return;}\r\n\t\tsuper._transfer(from, to, amount);\r\n    }\r\n\r\n\r\n    //#                              Setter                                     #\r\n\tfunction setFAddress(address Address_) public onlyOwner {\r\n        FAddress = Address_;\r\n    }\r\n\tfunction setCAddress1(address Address_) public onlyOwner {\r\n        CAddress1 = Address_;\r\n    }\r\n\tfunction setCAddress2(address Address_) public onlyOwner {\r\n        CAddress2 = Address_;\r\n    }\r\n\tfunction setCAddress4(address Address_) public onlyOwner {\r\n        CAddress4 = Address_;\r\n    }\r\n\tfunction setCAddress5(address Address_) public onlyOwner {\r\n        CAddress5 = Address_;\r\n    }\r\n\tfunction setCAddress52(address Address_) public onlyOwner {\r\n        CAddress52 = Address_;\r\n    }\r\n\tfunction setgetmAddress(address Address_) public onlyOwner {\r\n        getmAddress = Address_;\r\n    }\r\n\t\r\n    function setMaxAtAmount(uint256 amount) public onlyOwner {\r\n\t    require(amount>0, \"ERC20: number error\");\r\n        MaxAtAmount = amount;\r\n    }\r\n\tfunction setAtAmount(uint256 amount) public onlyOwner {\r\n\t    require(amount>0, \"ERC20: number error\");\r\n        AtAmount = amount;\r\n    }\r\n\tfunction setFee(uint256 a) public onlyOwner {\r\n\t    require(a>0, \"ERC20: number error\");\r\n        Fee = a;\r\n    }\r\n\tfunction setMinsa(uint256 a) public onlyOwner {\r\n        Minsa = a;\r\n    }\r\n\t\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        require(\r\n            _isExcludedFromFees[account] != excluded,\r\n            \"Account is already the value of 'excluded'\"\r\n        );\r\n        _isExcludedFromFees[account] = excluded;\r\n    }\r\n\r\n    function excludeFromnoFees(address account, bool excluded) public onlyOwner {\r\n        require(\r\n            _isExcludedFromnoFees[account] != excluded,\r\n            \"Account is already the value of 'excluded'\"\r\n        );\r\n\t\trequire(!_isExcludedFromFees[account], \"ERC20: excludeFromnoFees to the excludeFromFees address\");\r\n\t\t\r\n        _isExcludedFromnoFees[account] = excluded;\r\n    }\r\n\r\n\t\r\n\r\n\t\r\n\tfunction isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\t\r\n\tfunction isExcludedFromnoFees(address account) public view returns (bool) {\r\n        return _isExcludedFromnoFees[account];\r\n    }\r\n\t\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly {size := extcodesize(addr)}\r\n        return size > 0;\r\n    }\r\n\t\r\n\tfunction addMemberInviter(address _inviter) public {\r\n        require(!isContract(msg.sender), 'Address: call from contract');\r\n        address parent = inviter[msg.sender];\r\n        if(parent == address(0) && _inviter != msg.sender){\r\n\t\t    usernum=usernum+1;\r\n            \r\n\t\t\tinviter[msg.sender] = _inviter;\r\n\t\t\t\r\n            UserInfo storage user1 = user[_inviter];\r\n            require(user1.Allm>0, 'inviter is not exist');\r\n            \r\n\t\t\tuser1.inviteNumber = user1.inviteNumber.add(1);\r\n\t\t\t\r\n\t\t\tUserInfo storage user2 = user[msg.sender];\r\n\t\t\tuser2.rTimes = block.timestamp;\r\n\t\t\t\r\n            Inviter memory invit = Inviter(msg.sender,block.number,block.timestamp);\r\n            addMemberInviter(_inviter,invit);\r\n            \r\n        }\r\n    }\r\n\r\n    function addMemberInviter(address _inviter, Inviter memory invit) private {\r\n    if (memberInviter[_inviter].length > 0 && memberInviter[_inviter].length < 100) {\r\n        memberInviter[_inviter].push(invit);\r\n    } else {\r\n        if (memberInviter[_inviter].length >= 100) {\r\n            delete memberInviter[_inviter][0];\r\n            for (uint256 i = 0; i < memberInviter[_inviter].length - 1; i++) {\r\n                memberInviter[_inviter][i] = memberInviter[_inviter][i + 1];\r\n            }\r\n            memberInviter[_inviter].pop();\r\n        }\r\n         memberInviter[_inviter].push(invit);\r\n    }\r\n    }\r\n\r\n\tfunction getInviter(address a) public view returns (address){\r\n        return inviter[a];\r\n    }\r\n\t\r\n\tfunction getaInviter(address a) public view returns (address){\r\n        return ainviter[a];\r\n    }\r\n\t\r\n\tfunction adipt(uint256 m) public {\r\n\t\r\n\t    address parent = inviter[msg.sender];\r\n\t\taddress upu = msg.sender;\r\n        UserInfo storage user_ = user[upu];\r\n\t\trequire(user_.aditime<block.timestamp-86400,\"Must be 24 hours apart\");\r\n\t\tuint256 mfee=m.mul(Fee).div(100);\r\n\t\tuint256 m2=m.mul(2);\r\n\t\tuint256 m3=m % AtAmount;\r\n        require(m>= AtAmount,\"Insufficient Balance\");\r\n\t\trequire(m>=user_.Amax,\"must out last\");\r\n\t\trequire(m<=MaxAtAmount,\"out max\");\r\n\t\trequire(m3==0,\"Insufficient Balance\");\r\n\t\trequire(IERC20(FAddress).balanceOf(msg.sender)>= m,\"Insufficient mask Balance\");\r\n\t\trequire(user_.rTimes > 0,\"user is not exist;\");\r\n\t\trequire(balanceOf(msg.sender)>= Minsa,\"Insufficient Balance\");\r\n        require(balanceOf(msg.sender)>= mfee,\"Insufficient Balance\");\r\n\t\t\r\n        user_.aditime=block.timestamp;\r\n\t\tif(user_.Allm==0)\r\n\t\t{\r\n\t\t    user_.Allm=m;\r\n\t\t\tuser_.Amax=m;\r\n            UserInfo storage user32 = user[parent];\r\n\t\t    user32.inviteNumber2 = user32.inviteNumber2.add(1);\r\n\t\t\tif(user32.inviteNumber2>=1 && user32.level<1){user32.level=1;}\r\n\t\t\tif(user32.inviteNumber2>=3 && user32.level<2){user32.level=2;}\r\n\t\t\tif(user32.inviteNumber2>=5 && user32.level<3){user32.level=3;}\r\n\t\t\tif(user32.inviteNumber2>=7 && user32.level<4){user32.level=4;}\r\n\t\t\tif(user32.inviteNumber2>=9 && user32.level<5){user32.level=5;}\r\n\t\t\tif(user32.inviteNumber2>=11 && user32.level<6){user32.level=6;}\r\n\t\t\tuser32.referrals.push(msg.sender);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t    user_.Allm=user_.Allm+m;\r\n\t\t\tif(m>user_.Amax){user_.Amax=m;}\r\n\t\t}\r\n\t\t\r\n\t\taddress[] memory path = new address[](2);\r\n\t    path[0] = FAddress;\r\n\t\tpath[1] = busdAddress;\r\n\t\t//path[1] = uniswapV2Router.WETH();\r\n        uint[] memory amount1 = uniswapV2Router.getAmountsOut(1*10**9,path);\r\n        uint256 price=amount1[1];\r\n\t\t\r\n\t\tInvest memory invet = Invest(m,m2,block.timestamp,block.timestamp,price,false);\r\n\t\tmemberInvest[msg.sender].push(invet);\r\n\t\t\r\n\t\t_takeMarket1(msg.sender, m); \r\n\t\t_takeMarket2(msg.sender, m); \r\n\t\t_takeMarket3(msg.sender, m); \r\n\t\t_takeMarket4(msg.sender, m); \r\n\t\t_takeMarket5(msg.sender, m); \r\n\t\t_takeMarket6(msg.sender, m);\r\n\t\t_takeFee(msg.sender, m);\r\n\t\t_takeInviterFee(msg.sender, m);\r\n\t\t_takeIterationse(msg.sender, m);\r\n        emit Adipt(msg.sender, m);\r\n    }\r\n\t\r\n\tfunction Receave5(uint256 i) public {\r\n\t    require(i> 0,\"is not exist\");\r\n\t\trequire(balanceOf(msg.sender)>= Minsa,\"Insufficient Balance\");\r\n\t    require(memberInvest[msg.sender][i-1].num> 0,\"is not exist\");\r\n\t\trequire(memberInvest[msg.sender][i-1].retrieve==false,\"already receave\");\r\n\t\t\r\n\t\taddress[] memory path = new address[](2);\r\n\t    path[0] = FAddress;\r\n\t\tpath[1] = busdAddress;\r\n\t\t//path[1] = uniswapV2Router.WETH();\r\n        uint[] memory amount1 = uniswapV2Router.getAmountsOut(1*10**9,path);\r\n        uint256 price=amount1[1];\r\n\t\t\r\n\t\tuint256 priceo=memberInvest[msg.sender][i-1].price;\r\n\t\trequire(price>=priceo.mul(5),\"receave fail\");\r\n\t\t\r\n\t\tmemberInvest[msg.sender][i-1].retrieve=true;\r\n\t\t\r\n\t\tuint256 ramount=memberInvest[msg.sender][i-1].num.mul(20).div(100);\r\n\t\t\r\n\t\tUserInfo storage ruser_ = user[msg.sender];\r\n\t\tif((ruser_.Amd+ruser_.Amt)<ruser_.Allm)\r\n\t\t{\r\n\t\ttokenHelper.transferToken(FAddress, msg.sender, ramount);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\ttokenHelper.transferToken(FAddress, address(this), ramount);\r\n\t\t}\r\n\t\t_takeFee(msg.sender,ramount);\r\n        emit Receave(msg.sender, ramount);\r\n    }\r\n\t\r\n\tfunction _takeMarket1(address sender, uint256 ddmm) private {\r\n        uint256 Number1=ddmm.mul(15).div(1000);\r\n\t\tIERC20(FAddress).transferFrom(sender,CAddress1,Number1);\r\n    }\r\n\tfunction _takeMarket2(address sender, uint256 ddmm) private {\r\n        uint256 Number2=ddmm.mul(35).div(1000);\r\n\t\tIERC20(FAddress).transferFrom(sender,CAddress2,Number2);\r\n    }\r\n\tfunction _takeMarket3(address sender, uint256 ddmm) private {\r\n        uint256 Number3=ddmm.mul(20).div(100);\r\n\t\tIERC20(FAddress).transferFrom(sender,address(tokenHelper),Number3);\r\n    }\r\n\tfunction _takeMarket4(address sender, uint256 ddmm) private {\r\n        uint256 Number4=ddmm.mul(2).div(100);\r\n\t\tIERC20(FAddress).transferFrom(sender,CAddress4,Number4);\r\n    }\r\n\tfunction _takeMarket5(address sender, uint256 ddmm) private {\r\n        uint256 Number5=ddmm.mul(20).div(1000);\r\n\t\tuint256 Number52=ddmm.mul(10).div(1000);\r\n\t\tIERC20(FAddress).transferFrom(sender,CAddress5,Number5);\r\n\t\tIERC20(FAddress).transferFrom(sender,CAddress52,Number52);\r\n    }\r\n\tfunction _takeMarket6(address sender, uint256 ddmm) private {\r\n        uint256 Number6=ddmm.mul(70).div(100);\r\n\t\tIERC20(FAddress).transferFrom(sender,address(this),Number6);\r\n    }\r\n\tfunction _takeFee(address sender,uint256 tFee) private {\r\n        uint256 Number=tFee.mul(Fee).div(100);\r\n\t\tsuper._transfer(sender, CAddress4, Number);\r\n    }\r\n\t\r\n\tfunction _takeInviterFee(\r\n        address sender, uint256 tAmount\r\n    ) private {\r\n        address cur = sender;\r\n        uint8[15] memory inviteRate = [50, 40, 30, 20, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];\r\n        for (uint8 i = 0; i < inviteRate.length; i++) {\r\n            uint8 rate = inviteRate[i];\r\n            cur = inviter[cur];\r\n            if (cur == address(0)) {\r\n                cur = deadWallet;\r\n            }\r\n            uint256 curTAmount;\r\n\t\t\tUserInfo storage fuser_ = user[cur];\r\n\t\t\tif((i<5 && fuser_.level>=i+1) || (i>=5 && fuser_.level>=6))\r\n\t\t\t{\r\n\t\t\tif(tAmount>fuser_.Amax){curTAmount = fuser_.Amax.mul(rate).div(1000);}else{curTAmount = tAmount.mul(rate).div(1000);}\r\n\t\t\tif(fuser_.Amd.add(curTAmount)>fuser_.Allm.mul(2)){curTAmount =fuser_.Allm.mul(2).sub(fuser_.Amd); }\r\n            if(curTAmount>0)\r\n            {\r\n\t\t\t    for (uint256 a = 0; a < memberInvest[cur].length; a++) {\r\n                    if(memberInvest[cur][a].num2>0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t    if(memberInvest[cur][a].num2<curTAmount){curTAmount=memberInvest[cur][a].num2;}\r\n\t\t\t\t\t    memberInvest[cur][a].num2=memberInvest[cur][a].num2-curTAmount;\r\n\t\t\t\t\t    fuser_.Amd = fuser_.Amd+curTAmount;\r\n\t\t\t\t\t\tfuser_.Amdt = fuser_.Amdt+curTAmount;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n                }\r\n            }\r\n\t\t\t}\r\n        }\r\n    }\r\n\t\r\n\tfunction _takeIterationse(\r\n        address sender, uint256 m\r\n    ) private {\r\n\t    UserInfo storage user6_ = user[sender];\r\n        uint256 iterations=0;\r\n\t\tuint256 shareholderCount = user6_.referrals.length;\r\n\t\tif(shareholderCount>10){shareholderCount=15;}\r\n\t\tuint256 fTAmounto=m.mul(3).div(100);\r\n\t\tuint256 fTAmount;\r\n\t\twhile (iterations < shareholderCount) \r\n\t\t{\r\n\t\t\tuint256 fTAmounto2=fTAmounto;\r\n\t\t\taddress shareHolder = user6_.referrals[iterations];\r\n\t\t\tUserInfo storage usertop = user[shareHolder];\r\n\t\t\tif(m>usertop.Amax){fTAmounto2 = usertop.Amax.mul(3).div(100);}\r\n\t\t\tfTAmount=fTAmounto2 / shareholderCount;\r\n\t\t\tif(usertop.Amd.add(fTAmount)>usertop.Allm.mul(2)){fTAmount =usertop.Allm.mul(2).sub(usertop.Amd); }\r\n\t\t\tif(usertop.level<2){fTAmount =0; }\r\n\t\t\tif(fTAmount>0)\r\n\t\t\t{\r\n\t\t\t    for (uint256 i = 0; i < memberInvest[shareHolder].length; i++) {\r\n                    if(memberInvest[shareHolder][i].num2>0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t    if(memberInvest[shareHolder][i].num2<fTAmount){fTAmount=memberInvest[shareHolder][i].num2;}\r\n\t\t\t\t\t    memberInvest[shareHolder][i].num2=memberInvest[shareHolder][i].num2-fTAmount;\r\n\t\t\t\t\t    usertop.Amd = usertop.Amd+fTAmount;\r\n\t\t\t\t\t\tusertop.Amdt = usertop.Amdt+fTAmount;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n                }\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\titerations++;\r\n\t\t}\r\n    }\r\n\t\r\n\tfunction receivebyday() public {\r\n\t    require(balanceOf(msg.sender)>= Minsa,\"Insufficient Balance\");\r\n\t\tUserInfo storage usertop = user[msg.sender];\r\n\t\tuint256 getAmount=0;\r\n\t\tfor (uint256 i = 0; i < memberInvest[msg.sender].length; i++) {\r\n\t\t\tif(memberInvest[msg.sender][i].num2>0)\r\n\t\t\t{\r\n\t\t\t    uint256 dayTimestamp =(block.timestamp-memberInvest[msg.sender][i].reTime) / 86400;\r\n\t\t\t    uint256 fjs = memberInvest[msg.sender][i].num;\r\n\t\t\t\tuint256 fTAmount = fjs.mul(16).div(1000);\r\n\t\t\t\tfTAmount=fTAmount.mul(dayTimestamp);\r\n\t\t\t\tif(memberInvest[msg.sender][i].num2<fTAmount){fTAmount=memberInvest[msg.sender][i].num2;}\r\n\t\t\t\tif(fTAmount>0)\r\n\t\t\t\t{\r\n\t\t\t\tmemberInvest[msg.sender][i].num2=memberInvest[msg.sender][i].num2-fTAmount;\r\n\t\t\t\tmemberInvest[msg.sender][i].reTime=block.timestamp;\r\n\t\t\t\tgetAmount=getAmount+fTAmount;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(getAmount>0)\r\n\t\t{\r\n\t\tuint256 mfee=getAmount.mul(Fee).div(100);\r\n\t\trequire(balanceOf(msg.sender)>= mfee,\"Insufficient Balance\");\r\n\t\tusertop.Amt=usertop.Amt+getAmount;\r\n\t\tIERC20(FAddress).transfer(msg.sender,getAmount);\r\n\t\t_takeFee(msg.sender,getAmount);\r\n\t\t}\r\n        emit Receiveeveryday(msg.sender, getAmount);\r\n    }\r\n\t\r\n\tfunction getreceivebyday(address _addr) public view returns (uint){\r\n\t    require(balanceOf(msg.sender)>= Minsa,\"Insufficient Balance\");\r\n\t\tuint256 getAmount=0;\r\n\t\tfor (uint256 i = 0; i < memberInvest[_addr].length; i++) {\r\n\t\t\tif(memberInvest[_addr][i].num2>0)\r\n\t\t\t{\r\n\t\t\t    uint256 dayTimestamp =(block.timestamp-memberInvest[_addr][i].reTime) / 86400;\r\n\t\t\t    uint256 fjs = memberInvest[_addr][i].num;\r\n\t\t\t\tuint256 fTAmount = fjs.mul(16).div(1000);\r\n\t\t\t\tfTAmount=fTAmount.mul(dayTimestamp);\r\n\t\t\t\tif(memberInvest[_addr][i].num2<fTAmount){fTAmount=memberInvest[_addr][i].num2;}\r\n\t\t\t\tgetAmount=getAmount+fTAmount;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn getAmount;\r\n    }\r\n\r\n\tfunction receivebydt() public {\r\n\t    require(balanceOf(msg.sender)>= Minsa,\"Insufficient Balance\");\r\n\t\tUserInfo storage usertop = user[msg.sender];\r\n\t\tuint256 getAmount=usertop.Amdt;\r\n\t\tif(getAmount>0)\r\n\t\t{\r\n\t\tuint256 mfee=getAmount.mul(Fee).div(100);\r\n\t\trequire(balanceOf(msg.sender)>= mfee,\"Insufficient Balance\");\r\n\t\tusertop.Amdt=0;\r\n\t\tIERC20(FAddress).transfer(msg.sender,getAmount);\r\n\t\t_takeFee(msg.sender,getAmount);\r\n\t\t}\r\n        emit Receivedt(msg.sender, getAmount);\r\n    }\r\n\t\r\n\tfunction getUserInvests(address a) public view returns (Invest[] memory invit){\r\n        return memberInvest[a];\r\n    }\r\n\t\r\n\tfunction getUserInviters(address a) public view returns (Inviter[] memory invit){\r\n        return memberInviter[a];\r\n    }\r\n\r\n    function getUser(address a) public view returns(UserInfo memory member){\r\n        return (user[a]);\r\n    }\r\n\t\r\n\tfunction getPrice(address _addr) public view returns (uint){\r\n        address[] memory path = new address[](2);\r\n\t    path[0] = _addr;\r\n\t\tpath[1] = busdAddress;\r\n\t\t//path[1] = uniswapV2Router.WETH();\r\n        uint[] memory amount1 = uniswapV2Router.getAmountsOut(1*10**9,path);\r\n        return amount1[1];\r\n    }\r\n\t\r\n\tfunction getmthis2() public\r\n    {\r\n        IERC20 FIST = IERC20(FAddress);\r\n        uint256 amount = FIST.balanceOf(address(tokenHelper));\r\n        if (amount > 0 && msg.sender==getmAddress) {\r\n\t\t\ttokenHelper.transferToken(FAddress, getmAddress, amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Adipt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Receave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Receivedt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Receiveeveryday\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAddress1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAddress4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAddress5\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAddress52\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Minsa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"Receave5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromnoFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inviter\",\"type\":\"address\"}],\"name\":\"addMemberInviter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"adipt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromnoFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getInviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"Allm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Amd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Amax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Amdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gettime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aditime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteNumber2\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"referrals\",\"type\":\"address[]\"}],\"internalType\":\"struct PowSuper.UserInfo\",\"name\":\"member\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getUserInvests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"retrieve\",\"type\":\"bool\"}],\"internalType\":\"struct PowSuper.Invest[]\",\"name\":\"invit\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getUserInviters\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inviteBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct PowSuper.Inviter[]\",\"name\":\"invit\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getaInviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getmthis2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getreceivebyday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromnoFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receivebyday\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receivebydt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address_\",\"type\":\"address\"}],\"name\":\"setCAddress1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address_\",\"type\":\"address\"}],\"name\":\"setCAddress2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address_\",\"type\":\"address\"}],\"name\":\"setCAddress4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address_\",\"type\":\"address\"}],\"name\":\"setCAddress5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address_\",\"type\":\"address\"}],\"name\":\"setCAddress52\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address_\",\"type\":\"address\"}],\"name\":\"setFAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"setMinsa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address_\",\"type\":\"address\"}],\"name\":\"setgetmAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapblocknumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHelper\",\"outputs\":[{\"internalType\":\"contract TokenHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usernum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PowSuper", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a28373b0600b8bcadfb62cc1783daacc27ce0d9a", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e1efd71673d7bc7e80eeabd8a80255d2e6e69a246ab60daa54ec68efe628921d"}