{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract KFCTheChicken {\r\n    using SafeMath for uint256;\r\n\r\n    struct Deposit {\r\n        uint256 amount;\r\n        uint256 withdrawn;\r\n        uint64 checkpoint;\r\n        uint8 rate;\r\n        uint8 plan;\r\n        bool refunded;\r\n    }\r\n\r\n    mapping(address => Deposit[]) public deposits;\r\n    mapping(address => address) public referrers;\r\n    mapping(address => uint8[]) public plans;\r\n    uint256[5] menus = [0, 0, 0, 0, 0];\r\n\r\n    //events\r\n    event NewBie(\r\n        address indexed user,\r\n        address indexed referrer,\r\n        uint256 amount\r\n    );\r\n\r\n    event DepositEvent(\r\n        address indexed user,\r\n        address indexed referrer,\r\n        uint256 amount\r\n    );\r\n    event MENU(address indexed user, address indexed referrer, uint8 menu);\r\n    event Refund(address indexed user, uint256 amount);\r\n    event MENUChange(address indexed user, uint8 menu, uint256 depositIndex);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n\r\n    address public ceoWallet;\r\n    address public devWallet;\r\n    address public adminWallet;\r\n    address public emergencyContract;\r\n    address public marketingWallet;\r\n    address public bossWallet;\r\n    address public influencerWallet;\r\n    address public owner;\r\n\r\n    uint256 public constant DAY = 1 days;\r\n    uint256 public constant BNB = 1 ether;\r\n    uint8 public constant RATE = 5;\r\n    uint256 public constant MAXRATE = 25;\r\n    uint256 public constant REFUND_THRESHOLD = 1 * BNB;\r\n\r\n    uint256 public refPercent = 3;\r\n    uint256 public totalInvestment;\r\n    uint256 public launchTime;\r\n\r\n    // constructor\r\n    constructor(\r\n        address _devWallet,\r\n        address _ceoWallet,\r\n        address _marketingWallet,\r\n        address _adminWallet,\r\n        address _influencerWallet,\r\n        address _bossWallet\r\n    ) {\r\n        ceoWallet = _ceoWallet;\r\n        devWallet = _devWallet;\r\n        adminWallet = _adminWallet;\r\n        marketingWallet = _marketingWallet;\r\n        bossWallet = _bossWallet;\r\n        influencerWallet = _influencerWallet;\r\n\r\n        owner = msg.sender;\r\n\r\n        launchTime = block.timestamp;\r\n    }\r\n\r\n    function deposit(address _referrer) external payable {\r\n        require(emergencyContract != address(0), \"not initilized\");\r\n        require(is25DaysPassed(), \"not started\");\r\n        require(msg.value >= BNB.div(20), \"insufficient bnb\");\r\n        checkNewUserCore(msg.sender, _referrer);\r\n\r\n        deposits[msg.sender].push(\r\n            Deposit(msg.value, 0, uint64(block.timestamp), RATE, 0, false)\r\n        );\r\n\r\n        payable(referrers[msg.sender]).transfer(msg.value.mul(3).div(100));\r\n        payOwners(msg.value);\r\n        totalInvestment = totalInvestment.add(msg.value);\r\n        emit DepositEvent(msg.sender, referrers[msg.sender], msg.value);\r\n    }\r\n\r\n    function withdraw(uint256 _index) external {\r\n        require(isActive(msg.sender), \"Not active\");\r\n        Deposit storage dep = deposits[msg.sender][_index];\r\n        require(dep.refunded == false, \"refunded\");\r\n\r\n        uint256 dividends = getDividend(msg.sender, _index);\r\n        uint256 userRate = uint256(dep.rate).add(\r\n            getHoldRate(msg.sender, _index)\r\n        );\r\n        if (userRate > MAXRATE) userRate = MAXRATE;\r\n        uint256 rateDrop = getRateDrop(dep.plan);\r\n        if (dep.plan == 0) userRate = RATE;\r\n        else userRate = userRate.sub(rateDrop);\r\n        userRate = userRate < RATE ? RATE : userRate;\r\n\r\n        dep.rate = uint8(userRate);\r\n        dep.checkpoint = uint64(block.timestamp);\r\n        dep.withdrawn = dep.withdrawn.add(dividends);\r\n\r\n        payable(marketingWallet).transfer(dividends.mul(2).div(100));\r\n        payable(emergencyContract).transfer(dividends.mul(4).div(100));\r\n        payable(msg.sender).transfer(dividends);\r\n\r\n        emit Withdraw(msg.sender, dividends);\r\n    }\r\n\r\n    function buyMENU(uint8 menu, address _ref) external payable {\r\n        checkNewUserCore(msg.sender, _ref);\r\n        if (menu == 1) require(msg.value == BNB.div(20), \"invalid value\");\r\n        else if (menu == 2)\r\n            require(msg.value == BNB.mul(2).div(10), \"invalid value\");\r\n        else if (menu == 3)\r\n            require(msg.value == BNB.mul(4).div(10), \"invalid value\");\r\n        else if (menu == 4)\r\n            require(msg.value == BNB.mul(8).div(10), \"invalid value\");\r\n        else if (menu == 5) require(msg.value == BNB, \"invalid value\");\r\n        else require(false, \"invalid plan\");\r\n\r\n        plans[msg.sender].push(menu);\r\n        payable(emergencyContract).transfer(msg.value.mul(85).div(100));\r\n        payable(marketingWallet).transfer(msg.value.mul(5).div(100));\r\n        payable(referrers[msg.sender]).transfer(msg.value.mul(10).div(100));\r\n        menus[menu - 1] = menus[menu - 1].add(1);\r\n        emit MENU(msg.sender, referrers[msg.sender], menu);\r\n    }\r\n\r\n    function assignMENU(uint8 _menuIndex, uint256 _depIndex) external {\r\n        require(\r\n            _menuIndex < plans[msg.sender].length &&\r\n                _depIndex < deposits[msg.sender].length,\r\n            \"invalid index\"\r\n        );\r\n        require(\r\n            deposits[msg.sender][_depIndex].amount > 0 &&\r\n                deposits[msg.sender][_depIndex].plan == 0,\r\n            \"already set\"\r\n        );\r\n        require(\r\n            deposits[msg.sender][_depIndex].withdrawn <\r\n                deposits[msg.sender][_depIndex].amount.mul(2),\r\n            \"deposit ended\"\r\n        );\r\n\r\n        require(plans[msg.sender][_menuIndex] > 0, \"no plan\");\r\n\r\n        deposits[msg.sender][_depIndex].plan = plans[msg.sender][_menuIndex];\r\n        plans[msg.sender][_menuIndex] = 0;\r\n\r\n        emit MENUChange(msg.sender, _menuIndex, _depIndex);\r\n    }\r\n\r\n    function setEmergencyContract(address _emergency) external {\r\n        require(msg.sender == owner, \"access denied\");\r\n        require(_emergency != address(0), \"invalid address\");\r\n        require(emergencyContract == address(0), \"already set\"); //can be set only once after deployment\r\n        emergencyContract = _emergency;\r\n    }\r\n\r\n    function refund(uint256 _depIndex) external {\r\n        require(address(this).balance < REFUND_THRESHOLD, \"refund disabled\"); //refund enabled when balance is less than 1BNB\r\n        require(block.timestamp >= launchTime.add(35 * DAY), \"refund disabled\"); //refund enabled 10 days after roi start. It takes 25 days to roi launch\r\n        require(deposits[msg.sender].length > 0, \"no deposit\");\r\n        require(_depIndex < deposits[msg.sender].length, \"invalid index\");\r\n        require(\r\n            deposits[msg.sender][_depIndex].refunded == false,\r\n            \"already refunded\"\r\n        );\r\n        Deposit storage dep = deposits[msg.sender][_depIndex];\r\n        uint256 refundPercent = getRefundPercent(dep.plan);\r\n        uint256 refundAmount = refundPercent.mul(dep.amount).div(100);\r\n        require(dep.withdrawn < refundAmount, \"already withdrawn\");\r\n        refundAmount = refundAmount.sub(dep.withdrawn);\r\n        dep.refunded = true;\r\n\r\n        IKFCEmergency(emergencyContract).refund(msg.sender, refundAmount);\r\n\r\n        emit Refund(msg.sender, refundAmount);\r\n    }\r\n\r\n    function getRefundPercent(uint8 plan) public pure returns (uint256) {\r\n        if (plan == 0) return 0;\r\n        if (plan == 1) return 35;\r\n        if (plan == 2) return 45;\r\n        if (plan == 3) return 60;\r\n        if (plan == 4) return 75;\r\n        if (plan == 5) return 100;\r\n        return 0;\r\n    }\r\n\r\n    function getRateDrop(uint256 _plan) public pure returns (uint256) {\r\n        if (_plan == 1) {\r\n            return 3;\r\n        }\r\n        if (_plan == 2) {\r\n            return 2;\r\n        }\r\n        if (_plan == 3) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getHoldRate(\r\n        address _addr,\r\n        uint256 _index\r\n    ) public view returns (uint256) {\r\n        uint256 intervals = block\r\n            .timestamp\r\n            .sub(deposits[_addr][_index].checkpoint)\r\n            .div(DAY)\r\n            .div(3);\r\n        return intervals > 20 ? 20 : intervals;\r\n    }\r\n\r\n    function checkNewUserCore(address _addr, address _referrer) private {\r\n        if (_addr == owner) return;\r\n        if (referrers[_addr] == address(0)) {\r\n            require(\r\n                isActive(_referrer) || _referrer == owner,\r\n                \"invalid referrer\"\r\n            );\r\n            referrers[_addr] = _referrer;\r\n            emit NewBie(_addr, _referrer, msg.value);\r\n        }\r\n    }\r\n\r\n    function payOwners(uint256 _amount) private {\r\n        payable(ceoWallet).transfer(_amount.mul(2).div(100));\r\n        payable(devWallet).transfer(_amount.mul(2).div(100));\r\n        payable(adminWallet).transfer(_amount.mul(1).div(100));\r\n        payable(emergencyContract).transfer(_amount.mul(4).div(100)); //emergency contract\r\n        payable(marketingWallet).transfer(_amount.mul(2).div(100)); //marketing\r\n        payable(influencerWallet).transfer(_amount.mul(1).div(100));\r\n        payable(bossWallet).transfer(_amount.mul(2).div(100));\r\n    }\r\n\r\n    function getDividend(\r\n        address _user,\r\n        uint256 _index\r\n    ) public view returns (uint256) {\r\n        Deposit storage dep = deposits[_user][_index];\r\n        if (dep.refunded) return 0;\r\n        uint256 rate = uint256(dep.rate).add(getHoldRate(_user, _index));\r\n        if (rate > 25) rate = 25;\r\n        uint256 dividend = block\r\n            .timestamp\r\n            .sub(dep.checkpoint)\r\n            .mul(dep.amount)\r\n            .mul(rate)\r\n            .div(1000)\r\n            .div(DAY);\r\n        return\r\n            dividend.add(dep.withdrawn) > uint256(dep.amount).mul(2)\r\n                ? dep.amount.mul(2).sub(dep.withdrawn)\r\n                : dividend;\r\n    }\r\n\r\n    function isActive(address _user) public view returns (bool) {\r\n        return deposits[_user].length > 0 || plans[_user].length > 0;\r\n    }\r\n\r\n    function is25DaysPassed() public view returns (bool) {\r\n        return block.timestamp >= launchTime.add(25 * DAY);\r\n    }\r\n\r\n    function getUser(\r\n        address _addr\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint8[] memory userPlans,\r\n            Deposit[] memory userDeposits,\r\n            uint256[] memory userDividends,\r\n            uint8[] memory userHoldRates\r\n        )\r\n    {\r\n        userPlans = plans[_addr];\r\n        userDeposits = deposits[_addr];\r\n        uint256[] memory dividends = new uint256[](userDeposits.length);\r\n        uint8[] memory holdRates = new uint8[](userDeposits.length);\r\n        for (uint i = 0; i < dividends.length; i++) {\r\n            dividends[i] = getDividend(_addr, i);\r\n            holdRates[i] = uint8(getHoldRate(_addr, i));\r\n        }\r\n        userDividends = dividends;\r\n        userHoldRates = holdRates;\r\n    }\r\n\r\n    function getContract() public view returns (uint256, uint256, uint256) {\r\n        return (launchTime, address(this).balance, totalInvestment);\r\n    }\r\n\r\n    function menuCount() public view returns (uint256[5] memory) {\r\n        return menus;\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IKFCEmergency {\r\n    function refund(address _addr, uint256 _amount) external;\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ceoWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adminWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_influencerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bossWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"menu\",\"type\":\"uint8\"}],\"name\":\"MENU\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"menu\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"MENUChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewBie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXRATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFUND_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_menuIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_depIndex\",\"type\":\"uint256\"}],\"name\":\"assignMENU\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bossWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"menu\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"buyMENU\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceoWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"checkpoint\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"rate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getHoldRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"}],\"name\":\"getRateDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getRefundPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"userPlans\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"checkpoint\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"rate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"}],\"internalType\":\"struct KFCTheChicken.Deposit[]\",\"name\":\"userDeposits\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"userDividends\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"userHoldRates\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"influencerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is25DaysPassed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"menuCount\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depIndex\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_emergency\",\"type\":\"address\"}],\"name\":\"setEmergencyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KFCTheChicken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000381a9903ee4802941ad0e51018005c0903693dc700000000000000000000000063a8150ddcda8e3fc9f279c8d51b99be516f1e6a000000000000000000000000259a9aae8ed65748d6e34a16f7fa7d1301058e1b00000000000000000000000008662c5d449850cf1bf628158b16ec90c6517f8a000000000000000000000000e9913395128db225b4ff99cdddbd1fe91e9879d3000000000000000000000000af8755bdb89d27e1c4c5f82b7e30b35d003fb1d5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fc11a9185db34220e7baef94f2edb56f4953e116bda61fa84fb6d913f15f06d4"}