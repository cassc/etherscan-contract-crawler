{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/upgradeable_contracts/modules/fee_manager/WPTBridgeFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"../MediatorOwnableModule.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title WPTBridgeFeeManager\\r\\n * @dev Implements the logic to distribute fees from the WPTBridge mediator contract operations.\\r\\n * The fees are distributed in the form of ERC20/ERC677 tokens to the list of reward addresses.\\r\\n */\\r\\ncontract WPTBridgeFeeManager is MediatorOwnableModule {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // This is not a real fee value but a relative value used to calculate the fee percentage.\\r\\n    // 1 ether = 100% of the value.\\r\\n    uint256 internal constant MAX_FEE = 1 ether;\\r\\n    uint256 internal constant MAX_REWARD_ACCOUNTS = 50;\\r\\n\\r\\n    bytes32 public constant HOME_TO_FOREIGN_FEE = 0x741ede137d0537e88e0ea0ff25b1f22d837903dbbee8980b4a06e8523247ee26; // keccak256(abi.encodePacked(\\\"homeToForeignFee\\\"))\\r\\n    bytes32 public constant FOREIGN_TO_HOME_FEE = 0x03be2b2875cb41e0e77355e802a16769bb8dfcf825061cde185c73bf94f12625; // keccak256(abi.encodePacked(\\\"foreignToHomeFee\\\"))\\r\\n\\r\\n    // mapping feeType => token address => fee percentage\\r\\n    mapping(bytes32 => mapping(address => uint256)) internal fees;\\r\\n    address[] internal rewardAddresses;\\r\\n\\r\\n    // mapping token address => fee receiver\\r\\n    mapping(address => address) internal feeReceivers;\\r\\n\\r\\n    event FeeUpdated(bytes32 feeType, address indexed token, uint256 fee);\\r\\n    event SetFeeReceiver(address indexed token, address indexed receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev Stores the initial parameters of the fee manager.\\r\\n     * @param _mediator address of the mediator contract used together with this fee manager.\\r\\n     * @param _owner address of the contract owner.\\r\\n     * @param _rewardAddresses list of unique initial reward addresses, between whom fees will be distributed\\r\\n     * @param _fees array with initial fees for both bridge directions.\\r\\n     *   [ 0 = homeToForeignFee, 1 = foreignToHomeFee ]\\r\\n     */\\r\\n    constructor(\\r\\n        address _mediator,\\r\\n        address _owner,\\r\\n        address[] memory _rewardAddresses,\\r\\n        uint256[2] memory _fees\\r\\n    ) MediatorOwnableModule(_mediator, _owner) {\\r\\n        require(_rewardAddresses.length <= MAX_REWARD_ACCOUNTS);\\r\\n        _setFee(HOME_TO_FOREIGN_FEE, address(0), _fees[0]);\\r\\n        _setFee(FOREIGN_TO_HOME_FEE, address(0), _fees[1]);\\r\\n\\r\\n        for (uint256 i = 0; i < _rewardAddresses.length; i++) {\\r\\n            require(_isValidAddress(_rewardAddresses[i]));\\r\\n            for (uint256 j = 0; j < i; j++) {\\r\\n                require(_rewardAddresses[j] != _rewardAddresses[i]);\\r\\n            }\\r\\n        }\\r\\n        rewardAddresses = _rewardAddresses;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tells the module interface version that this contract supports.\\r\\n     * @return major value of the version\\r\\n     * @return minor value of the version\\r\\n     * @return patch value of the version\\r\\n     */\\r\\n    function getModuleInterfacesVersion()\\r\\n        external\\r\\n        pure\\r\\n        returns (\\r\\n            uint64 major,\\r\\n            uint64 minor,\\r\\n            uint64 patch\\r\\n        )\\r\\n    {\\r\\n        return (1, 0, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if given fee amount is invalid.\\r\\n     */\\r\\n    modifier validFee(uint256 _fee) {\\r\\n        require(_fee < MAX_FEE);\\r\\n        /* solcov ignore next */\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if given fee type is unknown.\\r\\n     */\\r\\n    modifier validFeeType(bytes32 _feeType) {\\r\\n        require(_feeType == HOME_TO_FOREIGN_FEE || _feeType == FOREIGN_TO_HOME_FEE);\\r\\n        /* solcov ignore next */\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates the value for the particular fee type.\\r\\n     * Only the owner can call this method.\\r\\n     * @param _feeType type of the updated fee, can be one of [HOME_TO_FOREIGN_FEE, FOREIGN_TO_HOME_FEE].\\r\\n     * @param _token address of the token contract for which fee should apply, 0x00..00 describes the initial fee for newly created tokens.\\r\\n     * @param _fee new fee value, in percentage (1 ether == 10**18 == 100%).\\r\\n     */\\r\\n    function setFee(\\r\\n        bytes32 _feeType,\\r\\n        address _token,\\r\\n        uint256 _fee\\r\\n    ) external validFeeType(_feeType) onlyOwner {\\r\\n        _setFee(_feeType, _token, _fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieves the value for the particular fee type.\\r\\n     * @param _feeType type of the updated fee, can be one of [HOME_TO_FOREIGN_FEE, FOREIGN_TO_HOME_FEE].\\r\\n     * @param _token address of the token contract for which fee should apply, 0x00..00 describes the initial fee for newly created tokens.\\r\\n     * @return fee value associated with the requested fee type.\\r\\n     */\\r\\n    function getFee(bytes32 _feeType, address _token) public view validFeeType(_feeType) returns (uint256) {\\r\\n        // use token-specific fee if one is registered\\r\\n        uint256 _tokenFee = fees[_feeType][_token];\\r\\n        if (_tokenFee > 0) {\\r\\n            return _tokenFee - 1;\\r\\n        }\\r\\n        // use default fee otherwise\\r\\n        return fees[_feeType][address(0)] - 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates the amount of fee to pay for the value of the particular fee type.\\r\\n     * @param _feeType type of the updated fee, can be one of [HOME_TO_FOREIGN_FEE, FOREIGN_TO_HOME_FEE].\\r\\n     * @param _token address of the token contract for which fee should apply, 0x00..00 describes the initial fee for newly created tokens.\\r\\n     * @param _value bridged value, for which fee should be evaluated.\\r\\n     * @return amount of fee to be subtracted from the transferred value.\\r\\n     */\\r\\n    function calculateFee(\\r\\n        bytes32 _feeType,\\r\\n        address _token,\\r\\n        uint256 _value\\r\\n    ) public view returns (uint256) {\\r\\n        if (rewardAddresses.length == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 _fee = getFee(_feeType, _token);\\r\\n        return _value.mul(_fee).div(MAX_FEE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a new address to the list of accounts to receive rewards for the operations.\\r\\n     * Only the owner can call this method.\\r\\n     * @param _addr new reward address.\\r\\n     */\\r\\n    function addRewardAddress(address _addr) external onlyOwner {\\r\\n        require(_isValidAddress(_addr));\\r\\n        require(!isRewardAddress(_addr));\\r\\n        require(rewardAddresses.length < MAX_REWARD_ACCOUNTS);\\r\\n        rewardAddresses.push(_addr);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes an address from the list of accounts to receive rewards for the operations.\\r\\n     * Only the owner can call this method.\\r\\n     * finds the element, swaps it with the last element, and then deletes it;\\r\\n     * @param _addr to be removed.\\r\\n     * return boolean whether the element was found and deleted\\r\\n     */\\r\\n    function removeRewardAddress(address _addr) external onlyOwner {\\r\\n        uint256 numOfAccounts = rewardAddresses.length;\\r\\n        for (uint256 i = 0; i < numOfAccounts; i++) {\\r\\n            if (rewardAddresses[i] == _addr) {\\r\\n                rewardAddresses[i] = rewardAddresses[numOfAccounts - 1];\\r\\n                delete rewardAddresses[numOfAccounts - 1];\\r\\n                rewardAddresses.pop();\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        // If account is not found and removed, the transactions is reverted\\r\\n        revert();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a new address to receive rewards for specific token in bridge.\\r\\n     * Only the owner can call this method.\\r\\n     * @param _addr new receiver address.\\r\\n     */\\r\\n    function setFeeReceiverForSupportedToken(address _token, address _addr) external onlyOwner {\\r\\n        feeReceivers[_token] = _addr;\\r\\n        emit SetFeeReceiver(_token, _addr);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tells the number of registered reward receivers.\\r\\n     * @return amount of addresses.\\r\\n     */\\r\\n    function rewardAddressCount() external view returns (uint256) {\\r\\n        return rewardAddresses.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tells the list of registered reward receivers.\\r\\n     * @return list with all registered reward receivers.\\r\\n     */\\r\\n    function rewardAddressList() external view returns (address[] memory) {\\r\\n        return rewardAddresses;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tells a address to receive rewards for specific token in bridge.\\r\\n     * @return _token supported token address.\\r\\n     */\\r\\n    function feeReceiverAddressForSupportedToken(address _token) external view returns (address) {\\r\\n        return feeReceivers[_token];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tells if a given address is part of the reward address list.\\r\\n     * @param _addr address to check if it is part of the list.\\r\\n     * @return true if the given address is in the list\\r\\n     */\\r\\n    function isRewardAddress(address _addr) public view returns (bool) {\\r\\n        for (uint256 i = 0; i < rewardAddresses.length; i++) {\\r\\n            if (rewardAddresses[i] == _addr) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Distributes the fee proportionally between registered reward addresses.\\r\\n     * @param _token address of the token contract for which fee should be distributed.\\r\\n     */\\r\\n    function distributeFee(address _token) external onlyMediator {\\r\\n        uint256 numOfAccounts = rewardAddresses.length;\\r\\n        uint256 fee = IERC20(_token).balanceOf(address(this));\\r\\n        if(feeReceivers[_token] != address(0)) {\\r\\n            IERC20(_token).safeTransfer(feeReceivers[_token], fee);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 feePerAccount = fee.div(numOfAccounts);\\r\\n        uint256 randomAccountIndex;\\r\\n        uint256 diff = fee.sub(feePerAccount.mul(numOfAccounts));\\r\\n        if (diff > 0) {\\r\\n            randomAccountIndex = random(numOfAccounts);\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < numOfAccounts; i++) {\\r\\n            uint256 feeToDistribute = feePerAccount;\\r\\n            if (diff > 0 && randomAccountIndex == i) {\\r\\n                feeToDistribute = feeToDistribute.add(diff);\\r\\n            }\\r\\n            IERC20(_token).safeTransfer(rewardAddresses[i], feeToDistribute);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates a random number based on the block number.\\r\\n     * @param _count the max value for the random number.\\r\\n     * @return a number between 0 and _count.\\r\\n     */\\r\\n    function random(uint256 _count) internal view returns (uint256) {\\r\\n        return uint256(blockhash(block.number.sub(1))) % _count;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function for updating the fee value for the given fee type.\\r\\n     * @param _feeType type of the updated fee, can be one of [HOME_TO_FOREIGN_FEE, FOREIGN_TO_HOME_FEE].\\r\\n     * @param _token address of the token contract for which fee should apply, 0x00..00 describes the initial fee for newly created tokens.\\r\\n     * @param _fee new fee value, in percentage (1 ether == 10**18 == 100%).\\r\\n     */\\r\\n    function _setFee(\\r\\n        bytes32 _feeType,\\r\\n        address _token,\\r\\n        uint256 _fee\\r\\n    ) internal validFee(_fee) {\\r\\n        fees[_feeType][_token] = 1 + _fee;\\r\\n        emit FeeUpdated(_feeType, _token, _fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if a given address can be a reward receiver.\\r\\n     * @param _addr address of the proposed reward receiver.\\r\\n     * @return true, if address is valid.\\r\\n     */\\r\\n    function _isValidAddress(address _addr) internal view returns (bool) {\\r\\n        return _addr != address(0) && _addr != address(mediator);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/upgradeable_contracts/modules/MediatorOwnableModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"./OwnableModule.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MediatorOwnableModule\\r\\n * @dev Common functionality for non-upgradeable WPTBridge extension module.\\r\\n */\\r\\ncontract MediatorOwnableModule is OwnableModule {\\r\\n    address public mediator;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes this contract.\\r\\n     * @param _mediator address of the deployed WPTBridge extension for which this module is deployed.\\r\\n     * @param _owner address of the owner that is allowed to perform additional actions on the particular module.\\r\\n     */\\r\\n    constructor(address _mediator, address _owner) OwnableModule(_owner) {\\r\\n        require(Address.isContract(_mediator));\\r\\n        mediator = _mediator;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if sender is not the WPTBridge extension.\\r\\n     */\\r\\n    modifier onlyMediator {\\r\\n        require(msg.sender == mediator);\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/upgradeable_contracts/modules/OwnableModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title OwnableModule\\r\\n * @dev Common functionality for multi-token extension non-upgradeable module.\\r\\n */\\r\\ncontract OwnableModule {\\r\\n    address public owner;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes this contract.\\r\\n     * @param _owner address of the owner that is allowed to perform additional actions on the particular module.\\r\\n     */\\r\\n    constructor(address _owner) {\\r\\n        owner = _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if sender is not the owner of this contract.\\r\\n     */\\r\\n    modifier onlyOwner {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Changes the owner of this contract.\\r\\n     * @param _newOwner address of the new owner.\\r\\n     */\\r\\n    function transferOwnership(address _newOwner) external onlyOwner {\\r\\n        owner = _newOwner;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mediator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_fees\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"feeType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SetFeeReceiver\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FOREIGN_TO_HOME_FEE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOME_TO_FOREIGN_FEE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_feeType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"distributeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"feeReceiverAddressForSupportedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_feeType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getModuleInterfacesVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"major\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minor\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"patch\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isRewardAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAddressCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAddressList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_feeType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setFeeReceiverForSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WPTBridgeFeeManager", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000e980e3c7be23cf563fe7058bb32268eb08b10171000000000000000000000000a22532963e9b50bd3b861cd4cce5c375e1e39fc900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000059d53c8bd1856e8db53c85f0ea7c8c0306449fe9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}