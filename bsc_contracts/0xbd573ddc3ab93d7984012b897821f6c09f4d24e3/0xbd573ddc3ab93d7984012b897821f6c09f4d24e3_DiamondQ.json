{"SourceCode": "/*\r\n  _____  _                                 _  ____\r\n |  __ \\(_)                               | |/ __ \\\r\n | |  | |_  __ _ _ __ ___   ___  _ __   __| | |  | |\r\n | |  | | |/ _` | '_ ` _ \\ / _ \\| '_ \\ / _` | |  | |\r\n | |__| | | (_| | | | | | | (_) | | | | (_| | |__| |\r\n |_____/|_|\\__,_|_| |_| |_|\\___/|_| |_|\\__,_|\\___\\_\\\r\n\r\n DiamondQ uses the new revolutionary \"Q\" contract that benefits holders\r\n and punishes \"paper hands\". The timing of each buy is tracked by the\r\n contract, the longer you hold the tokens the less tax you pay on a sell.\r\n The extra tokens that are taxed are simply sent to the burn wallet so all\r\n holders benefit even more by the supply becoming more and more scarce.\r\n\r\n Buy tax:\r\n     Tax is the same no matter the time:\r\n         5% to the house wallet\r\n Sell tax:\r\n     If selling within 7 days:\r\n         5% sent to the house wallet\r\n         25% sent to the burn wallet\r\n     If selling within 7-14 days:\r\n         5% sent to the house wallet\r\n         15% sent to the burn wallet\r\n     If selling within 14-21 days:\r\n         5% sent to the house wallet\r\n         5% sent the burn wallet\r\n     If selling after 21 days:\r\n         5% sent to the house wallet\r\n\r\n Author: @HizzleDev\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.9;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Leaves the contract without owner. It will not be possible to call\r\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    *\r\n    * NOTE: Renouncing ownership will leave the contract without an owner,\r\n    * thereby removing any functionality that is only available to the owner.\r\n    */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract DiamondQ is Context, IERC20, Ownable {\r\n    struct TimedTransactions {\r\n        uint[] txBlockTimes;\r\n        mapping (uint => uint256) timedTxAmount;\r\n        uint256 totalBalance;\r\n    }\r\n\r\n    // Track the transaction history of the user\r\n    mapping (address => TimedTransactions) private _timedTransactionsMap;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) private _onlyDiamondHandTxs;\r\n\r\n    uint256 constant DEFAULT_HOUSE_FEE = 5;\r\n    uint256 private _currentHouseFee = 5;\r\n\r\n    uint256 constant DEFAULT_PAPER_HAND_FEE = 25;\r\n    uint256 private _currentPaperHandFee = 25;\r\n    uint256 private _paperHandTime = 7 days;\r\n\r\n    uint256 constant DEFAULT_GATE1_FEE = 15;\r\n    uint256 private _currentGate1Fee = 15;\r\n    uint256 private _gate1Time = 14 days;\r\n\r\n    uint256 constant DEFAULT_GATE2_FEE = 5;\r\n    uint256 private _currentGate2Fee = 5;\r\n    uint256 private _gate2Time = 21 days;\r\n\r\n    string private _name = \"DiamondQ\";\r\n    string private _symbol = \"DIQ\";\r\n    uint8 private _decimals = 9;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    // This unix time is used to aggregate all transaction block times. It is over 21 days and therefore will\r\n    // trigger the lowest tax rate possible\r\n    uint256 constant OVER_21_DAYS_BLOCK_TIME = 1577836800;\r\n\r\n    // Prevent reentrancy by only allowing one swap at a time\r\n    bool swapInProgress;\r\n\r\n    modifier lockTheSwap {\r\n        swapInProgress = true;\r\n        _;\r\n        swapInProgress = false;\r\n    }\r\n\r\n    bool private _swapEnabled = true;\r\n    bool private _burnEnabled = true;\r\n\r\n    uint256 private _totalTokens = 1000 * 10**6 * 10**9;\r\n    uint256 private _minTokensBeforeSwap = 1000 * 10**3 * 10**9;\r\n\r\n    address payable private _houseContract = payable(0x6E73733642485b8EABFe89D2dbd844dcBc52122d);\r\n    address private _deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    constructor() {\r\n        //Pancake Swap V2 address\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n        .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        // Add initial balances\r\n        _timedTransactionsMap[owner()].totalBalance = _totalTokens;\r\n        _timedTransactionsMap[owner()].txBlockTimes.push(OVER_21_DAYS_BLOCK_TIME);\r\n        _timedTransactionsMap[owner()].timedTxAmount[OVER_21_DAYS_BLOCK_TIME] = _totalTokens;\r\n\r\n        // Track balance in the dead wallet\r\n        _timedTransactionsMap[_deadAddress].totalBalance = 0;\r\n        _timedTransactionsMap[_deadAddress].txBlockTimes.push(OVER_21_DAYS_BLOCK_TIME);\r\n        _timedTransactionsMap[_deadAddress].timedTxAmount[OVER_21_DAYS_BLOCK_TIME] = 0;\r\n\r\n        // Exclude contract and owner from fees to prevent contract functions from having a tax\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[_houseContract] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalTokens);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalTokens;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _timedTransactionsMap[account].totalBalance;\r\n    }\r\n\r\n    function balanceLessThan7Days(address account) external view returns (uint256) {\r\n        uint256 totalTokens = 0;\r\n\r\n        for (uint i = 0; i < _timedTransactionsMap[account].txBlockTimes.length; i++) {\r\n            uint txTime = _timedTransactionsMap[account].txBlockTimes[i];\r\n            uint256 tokensAtTime = _timedTransactionsMap[account].timedTxAmount[txTime];\r\n\r\n            // Only add up balance in the last 7 days\r\n            if (txTime > block.timestamp - _paperHandTime) {\r\n                totalTokens = totalTokens + tokensAtTime;\r\n            }\r\n        }\r\n\r\n        return totalTokens;\r\n    }\r\n\r\n    function balanceBetween7And14Days(address account) external view returns (uint256) {\r\n        uint256 totalTokens = 0;\r\n\r\n        for (uint i = 0; i < _timedTransactionsMap[account].txBlockTimes.length; i++) {\r\n            uint txTime = _timedTransactionsMap[account].txBlockTimes[i];\r\n            uint256 tokensAtTime = _timedTransactionsMap[account].timedTxAmount[txTime];\r\n\r\n            // Only add up balance in the last 7-14 days\r\n            if (txTime < block.timestamp - _paperHandTime && txTime > block.timestamp - _gate1Time) {\r\n                totalTokens = totalTokens + tokensAtTime;\r\n            }\r\n        }\r\n\r\n        return totalTokens;\r\n    }\r\n\r\n    function balanceBetween14And21Days(address account) external view returns (uint256) {\r\n        uint256 totalTokens = 0;\r\n\r\n        for (uint i = 0; i < _timedTransactionsMap[account].txBlockTimes.length; i++) {\r\n            uint txTime = _timedTransactionsMap[account].txBlockTimes[i];\r\n            uint256 tokensAtTime = _timedTransactionsMap[account].timedTxAmount[txTime];\r\n\r\n            // Only add up balance in the last 14-21 days\r\n            if (txTime < block.timestamp - _gate1Time && txTime > block.timestamp - _gate2Time) {\r\n                totalTokens = totalTokens + tokensAtTime;\r\n            }\r\n        }\r\n\r\n        return totalTokens;\r\n    }\r\n\r\n    function balanceOver21Days(address account) public view returns (uint256) {\r\n        uint256 totalTokens = 0;\r\n\r\n        for (uint i = 0; i < _timedTransactionsMap[account].txBlockTimes.length; i++) {\r\n            uint txTime = _timedTransactionsMap[account].txBlockTimes[i];\r\n            uint256 tokensAtTime = _timedTransactionsMap[account].timedTxAmount[txTime];\r\n\r\n            // Only add up balance over the last 21 days\r\n            if (txTime < block.timestamp - _gate2Time) {\r\n                totalTokens = totalTokens + tokensAtTime;\r\n            }\r\n        }\r\n\r\n        return totalTokens;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        // Selective competitions are based on \"diamond hand only\" and transfers will only be allowed\r\n        // when the tokens are in the \"diamond hand\" group\r\n        bool isOnlyDiamondHandTx = _onlyDiamondHandTxs[from] || _onlyDiamondHandTxs[to];\r\n        if (isOnlyDiamondHandTx) {\r\n            require(balanceOver21Days(from) >= amount, \"Insufficient diamond hand token balance\");\r\n        }\r\n\r\n        // Reduce balance of sending including calculating and removing all taxes\r\n        uint256 transferAmount = _reduceSenderBalance(from, to, amount);\r\n\r\n        // Increase balance of the recipient address\r\n        _increaseRecipientBalance(to, transferAmount, isOnlyDiamondHandTx);\r\n\r\n        emit Transfer(from, to, transferAmount);\r\n    }\r\n\r\n    function _reduceSenderBalance(address sender, address recipient, uint256 initialTransferAmount) private returns (uint256) {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(initialTransferAmount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        // Keep track of the tokens that haven't had a tax calculated against them\r\n        uint256 remainingTokens = initialTransferAmount;\r\n\r\n        // Keep track of the amount of tokens that are to be burned\r\n        uint256 taxedBurnTokens = 0;\r\n\r\n        // Keep track of the index for which tokens still exist in the bucket\r\n        uint lastIndexToDelete = 0;\r\n\r\n        // Loop over the blockTimes\r\n        for (uint i = 0; i < _timedTransactionsMap[sender].txBlockTimes.length; i++) {\r\n            uint txTime = _timedTransactionsMap[sender].txBlockTimes[i];\r\n            uint256 tokensAtTime = _timedTransactionsMap[sender].timedTxAmount[txTime];\r\n\r\n            // If there are more tokens purchased at the current time than those that are remaining to\r\n            // fulfill the tokens at this transaction then only use the remainingTokens\r\n            if (tokensAtTime > remainingTokens) {\r\n                tokensAtTime = remainingTokens;\r\n            } else {\r\n                // There are more elements to iterate through\r\n                lastIndexToDelete = i + 1;\r\n            }\r\n\r\n            // Depending on when the tokens were bought, tax the correct amount. This is proportional\r\n            // to when the user bought each set of tokens.\r\n            if (txTime > block.timestamp - _paperHandTime) {\r\n                taxedBurnTokens = taxedBurnTokens + ((tokensAtTime * _currentPaperHandFee) / 100);\r\n            } else if (txTime > block.timestamp - _gate1Time) {\r\n                taxedBurnTokens = taxedBurnTokens + ((tokensAtTime * _currentGate1Fee) / 100);\r\n            } else if (txTime > block.timestamp - _gate2Time) {\r\n                taxedBurnTokens = taxedBurnTokens + ((tokensAtTime * _currentGate2Fee) / 100);\r\n            }\r\n\r\n            // Decrease the tokens in the map\r\n            _timedTransactionsMap[sender].timedTxAmount[txTime] = _timedTransactionsMap[sender].timedTxAmount[txTime] - tokensAtTime;\r\n\r\n            remainingTokens = remainingTokens - tokensAtTime;\r\n\r\n            // If there are no more tokens to sell then exit the loop\r\n            if (remainingTokens == 0) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        _sliceBlockTimeArray(sender, lastIndexToDelete);\r\n\r\n        // Update the senders balance\r\n        _timedTransactionsMap[sender].totalBalance = _timedTransactionsMap[sender].totalBalance - initialTransferAmount;\r\n\r\n        // Only burn tokens if the burn is enabled, the sender address is not excluded and it is performed on a sell\r\n        if (!_burnEnabled || _isExcludedFromFees[sender] || _isExcludedFromFees[recipient] || recipient != uniswapV2Pair) {\r\n            taxedBurnTokens = 0;\r\n        }\r\n\r\n        if (taxedBurnTokens > 0) {\r\n            _timedTransactionsMap[_deadAddress].totalBalance = _timedTransactionsMap[_deadAddress].totalBalance + taxedBurnTokens;\r\n            _timedTransactionsMap[_deadAddress].timedTxAmount[OVER_21_DAYS_BLOCK_TIME] = _timedTransactionsMap[_deadAddress].timedTxAmount[OVER_21_DAYS_BLOCK_TIME] + taxedBurnTokens;\r\n        }\r\n\r\n        uint256 taxedHouseTokens = _calculateHouseFee(initialTransferAmount);\r\n\r\n        // Always collect house tokens unless address is excluded\r\n        if (_isExcludedFromFees[sender] || _isExcludedFromFees[recipient]) {\r\n            taxedHouseTokens = 0;\r\n        }\r\n\r\n        // Add taxed tokens to the contract total\r\n        _increaseTaxBalance(taxedHouseTokens);\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        // Only swap tokens when threshold has been met, a swap isn't already in progress,\r\n        // the swap is enabled and never on a buy\r\n        if (\r\n            contractTokenBalance >= _minTokensBeforeSwap &&\r\n            !swapInProgress &&\r\n            _swapEnabled &&\r\n            sender != uniswapV2Pair\r\n        ) {\r\n            // Always swap a set amount of tokens to prevent large dumps\r\n            _swapTokensForHouse(_minTokensBeforeSwap);\r\n        }\r\n\r\n        // The amount to be transferred is the initial amount minus the taxed and burned tokens\r\n        return initialTransferAmount - taxedHouseTokens - taxedBurnTokens;\r\n    }\r\n\r\n    function _increaseTaxBalance(uint256 amount) private {\r\n        _timedTransactionsMap[address(this)].totalBalance = _timedTransactionsMap[address(this)].totalBalance + amount;\r\n        _timedTransactionsMap[address(this)].timedTxAmount[OVER_21_DAYS_BLOCK_TIME] = _timedTransactionsMap[address(this)].timedTxAmount[OVER_21_DAYS_BLOCK_TIME] + amount;\r\n    }\r\n\r\n    function _increaseRecipientBalance(address recipient, uint256 transferAmount, bool isDiamondHandOnlyTx) private {\r\n        _aggregateOldTransactions(recipient);\r\n\r\n        _timedTransactionsMap[recipient].totalBalance = _timedTransactionsMap[recipient].totalBalance + transferAmount;\r\n\r\n        uint256 totalTxs = _timedTransactionsMap[recipient].txBlockTimes.length;\r\n\r\n        if (isDiamondHandOnlyTx) {\r\n            // If it's the first transaction then just add the oldest time to the map and array\r\n            if (totalTxs < 1) {\r\n                _timedTransactionsMap[recipient].txBlockTimes.push(OVER_21_DAYS_BLOCK_TIME);\r\n                _timedTransactionsMap[recipient].timedTxAmount[OVER_21_DAYS_BLOCK_TIME] = transferAmount;\r\n                return;\r\n            }\r\n\r\n            // If the first position in the array is already the oldest block time then just increase the value in the map\r\n            if (_timedTransactionsMap[recipient].txBlockTimes[0] == OVER_21_DAYS_BLOCK_TIME) {\r\n                _timedTransactionsMap[recipient].timedTxAmount[OVER_21_DAYS_BLOCK_TIME] = _timedTransactionsMap[recipient].timedTxAmount[OVER_21_DAYS_BLOCK_TIME] + transferAmount;\r\n                return;\r\n            }\r\n\r\n            // Shift the array with the oldest block time in the 0 position and add the value in the map\r\n            _timedTransactionsMap[recipient].txBlockTimes.push(_timedTransactionsMap[recipient].txBlockTimes[totalTxs - 1]);\r\n            for (uint i = totalTxs - 1; i > 0; i--) {\r\n                _timedTransactionsMap[recipient].txBlockTimes[i] = _timedTransactionsMap[recipient].txBlockTimes[i - 1];\r\n            }\r\n            _timedTransactionsMap[recipient].txBlockTimes[0] = OVER_21_DAYS_BLOCK_TIME;\r\n            _timedTransactionsMap[recipient].timedTxAmount[OVER_21_DAYS_BLOCK_TIME] = transferAmount;\r\n            return;\r\n        }\r\n\r\n        if (totalTxs < 1) {\r\n            _timedTransactionsMap[recipient].txBlockTimes.push(block.timestamp);\r\n            _timedTransactionsMap[recipient].timedTxAmount[block.timestamp] = transferAmount;\r\n            return;\r\n        }\r\n\r\n        uint256 lastTxTime = _timedTransactionsMap[recipient].txBlockTimes[totalTxs - 1];\r\n\r\n        // If transaction was within the past 12 hours then keep as part of the same bucket for efficiency\r\n        if (lastTxTime > block.timestamp - 12 hours) {\r\n            _timedTransactionsMap[recipient].timedTxAmount[lastTxTime] = _timedTransactionsMap[recipient].timedTxAmount[lastTxTime] + transferAmount;\r\n            return;\r\n        }\r\n\r\n        _timedTransactionsMap[recipient].txBlockTimes.push(block.timestamp);\r\n        _timedTransactionsMap[recipient].timedTxAmount[block.timestamp] = transferAmount;\r\n    }\r\n\r\n    function _calculateHouseFee(uint256 initialAmount) private view returns (uint256) {\r\n        return (initialAmount * _currentHouseFee) / 100;\r\n    }\r\n\r\n    function _swapTokensForHouse(uint256 tokensToSwap) private lockTheSwap {\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // Swap to BNB and send to house wallet\r\n        _swapTokensForEth(tokensToSwap);\r\n\r\n        // Total BNB that has been swapped\r\n        uint256 bnbSwapped = address(this).balance - initialBalance;\r\n\r\n        // Transfer the BNB to the house contract\r\n        (bool success, ) = _houseContract.call{value:bnbSwapped}(\"\");\r\n        require(success, \"Unable to send to house contract\");\r\n    }\r\n\r\n    //to receive ETH from uniswapV2Router when swapping\r\n    receive() external payable {}\r\n\r\n    function _swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setBurnEnabled(bool enabled) external onlyOwner {\r\n        _burnEnabled = enabled;\r\n    }\r\n\r\n    function setSwapEnabled(bool enabled) external onlyOwner {\r\n        _swapEnabled = enabled;\r\n    }\r\n\r\n    function removeHouseFee() external onlyOwner {\r\n        _currentHouseFee = 0;\r\n    }\r\n\r\n    function reinstateHouseFee() external onlyOwner {\r\n        _currentHouseFee = DEFAULT_HOUSE_FEE;\r\n    }\r\n\r\n    function removeBurnFees() external onlyOwner {\r\n        _currentPaperHandFee = 0;\r\n        _currentGate1Fee = 0;\r\n        _currentGate2Fee = 0;\r\n    }\r\n\r\n    function reinstateBurnFees() external onlyOwner {\r\n        _currentPaperHandFee = DEFAULT_PAPER_HAND_FEE;\r\n        _currentGate1Fee = DEFAULT_GATE1_FEE;\r\n        _currentGate2Fee = DEFAULT_GATE2_FEE;\r\n    }\r\n\r\n    function removeAllFees() external onlyOwner {\r\n        _currentHouseFee = 0;\r\n        _currentPaperHandFee = 0;\r\n        _currentGate1Fee = 0;\r\n        _currentGate2Fee = 0;\r\n    }\r\n\r\n    function reinstateAllFees() external onlyOwner {\r\n        _currentHouseFee = DEFAULT_HOUSE_FEE;\r\n        _currentPaperHandFee = DEFAULT_PAPER_HAND_FEE;\r\n        _currentGate1Fee = DEFAULT_GATE1_FEE;\r\n        _currentGate2Fee = DEFAULT_GATE2_FEE;\r\n    }\r\n\r\n    // Update minimum tokens accumulated on the contract before a swap is performed\r\n    function updateMinTokensBeforeSwap(uint256 newAmount) external onlyOwner {\r\n        uint256 circulatingTokens = _totalTokens - balanceOf(_deadAddress);\r\n\r\n        // The maximum tokens before swap is 1% of the circulating supply\r\n        uint256 maxTokensBeforeSwap = circulatingTokens / 100;\r\n        uint256 newMinTokensBeforeSwap = newAmount * 10**9;\r\n\r\n        require(newMinTokensBeforeSwap < maxTokensBeforeSwap, \"Amount must be less than 1 percent of the circulating supply\");\r\n        _minTokensBeforeSwap = newMinTokensBeforeSwap;\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFees[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFees[account] = false;\r\n    }\r\n\r\n    function addToOnlyDiamondHandTxs(address account) public onlyOwner {\r\n        _onlyDiamondHandTxs[account] = true;\r\n    }\r\n\r\n    function removeFromOnlyDiamondHandTxs(address account) public onlyOwner {\r\n        _onlyDiamondHandTxs[account] = false;\r\n    }\r\n\r\n    // If there is a PCS upgrade then add the ability to change the router and pairs to the new version\r\n    function changeRouterVersion(address _router) public onlyOwner returns (address) {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_router);\r\n\r\n        address newPair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(this), _uniswapV2Router.WETH());\r\n        if(newPair == address(0)){\r\n            // Pair doesn't exist\r\n            newPair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        }\r\n        // Set the new pair\r\n        uniswapV2Pair = newPair;\r\n\r\n        // Set the router of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        return newPair;\r\n    }\r\n\r\n    // Check all transactions and group transactions older than 21 days into their own bucket\r\n    function _aggregateOldTransactions(address sender) private {\r\n        uint256 totalBlockTimes = _timedTransactionsMap[sender].txBlockTimes.length;\r\n\r\n        if (totalBlockTimes < 1) {\r\n            return;\r\n        }\r\n\r\n        uint256 oldestBlockTime = block.timestamp - _gate2Time;\r\n\r\n        // If the first transaction is not yet 21 days old then do not aggregate\r\n        if (_timedTransactionsMap[sender].txBlockTimes[0] > oldestBlockTime) {\r\n            return;\r\n        }\r\n\r\n        uint lastAggregateIndex = 0;\r\n        uint256 totalTokens = 0;\r\n        for (uint i = 0; i < totalBlockTimes; i++) {\r\n            uint256 txBlockTime = _timedTransactionsMap[sender].txBlockTimes[i];\r\n\r\n            if (txBlockTime > oldestBlockTime) {\r\n                break;\r\n            }\r\n\r\n            totalTokens = totalTokens + _timedTransactionsMap[sender].timedTxAmount[txBlockTime];\r\n            lastAggregateIndex = i;\r\n        }\r\n\r\n        _sliceBlockTimeArray(sender, lastAggregateIndex);\r\n\r\n        _timedTransactionsMap[sender].txBlockTimes[0] = OVER_21_DAYS_BLOCK_TIME;\r\n        _timedTransactionsMap[sender].timedTxAmount[OVER_21_DAYS_BLOCK_TIME] = totalTokens;\r\n    }\r\n\r\n    // _sliceBlockTimeArray removes elements before the provided index from the transaction block\r\n    // time array for the given account. This is in order to keep an ordered list of transaction block\r\n    // times.\r\n    function _sliceBlockTimeArray(address account, uint indexFrom) private {\r\n        uint oldArrayLength = _timedTransactionsMap[account].txBlockTimes.length;\r\n\r\n        if (indexFrom <= 0) return;\r\n\r\n        if (indexFrom >= oldArrayLength) {\r\n            while (_timedTransactionsMap[account].txBlockTimes.length != 0) {\r\n                _timedTransactionsMap[account].txBlockTimes.pop();\r\n            }\r\n            return;\r\n        }\r\n\r\n        uint newArrayLength = oldArrayLength - indexFrom;\r\n\r\n        uint counter = 0;\r\n        for (uint i = indexFrom; i < oldArrayLength; i++) {\r\n            _timedTransactionsMap[account].txBlockTimes[counter] = _timedTransactionsMap[account].txBlockTimes[i];\r\n            counter++;\r\n        }\r\n\r\n        while (newArrayLength != _timedTransactionsMap[account].txBlockTimes.length) {\r\n            _timedTransactionsMap[account].txBlockTimes.pop();\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToOnlyDiamondHandTxs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceBetween14And21Days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceBetween7And14Days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceLessThan7Days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOver21Days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeRouterVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinstateAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinstateBurnFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinstateHouseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeBurnFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromOnlyDiamondHandTxs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeHouseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBurnEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DiamondQ", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://63f3d9368565036c471894e65effd0fdcebf7498b5d3403a8a639ebc3fc1dc3c"}