{"SourceCode": "/*\r\n$$$$$$$$\\                  $$\\             $$\\     $$\\                             $$$$$$$\\  $$\\                                $$\\\r\n$$  _____|                 $$ |            $$ |    \\__|                            $$  __$$\\ $$ |                               $$ |\r\n$$ |  $$\\    $$\\  $$$$$$\\  $$ |$$\\   $$\\ $$$$$$\\   $$\\  $$$$$$\\  $$$$$$$\\          $$ |  $$ |$$ | $$$$$$\\  $$$$$$$\\   $$$$$$\\ $$$$$$\\    $$$$$$$\\\r\n$$$$$\\\\$$\\  $$  |$$  __$$\\ $$ |$$ |  $$ |\\_$$  _|  $$ |$$  __$$\\ $$  __$$\\ $$$$$$\\ $$$$$$$  |$$ | \\____$$\\ $$  __$$\\ $$  __$$\\\\_$$  _|  $$  _____|\r\n$$  __|\\$$\\$$  / $$ /  $$ |$$ |$$ |  $$ |  $$ |    $$ |$$ /  $$ |$$ |  $$ |\\______|$$  ____/ $$ | $$$$$$$ |$$ |  $$ |$$$$$$$$ | $$ |    \\$$$$$$\\\r\n$$ |    \\$$$  /  $$ |  $$ |$$ |$$ |  $$ |  $$ |$$\\ $$ |$$ |  $$ |$$ |  $$ |        $$ |      $$ |$$  __$$ |$$ |  $$ |$$   ____| $$ |$$\\  \\____$$\\\r\n$$$$$$$$\\\\$  /   \\$$$$$$  |$$ |\\$$$$$$  |  \\$$$$  |$$ |\\$$$$$$  |$$ |  $$ |        $$ |      $$ |\\$$$$$$$ |$$ |  $$ |\\$$$$$$$\\  \\$$$$  |$$$$$$$  |\r\n\\________|\\_/     \\______/ \\__| \\______/    \\____/ \\__| \\______/ \\__|  \\__|        \\__|      \\__| \\_______|\\__|  \\__| \\_______|  \\____/ \\_______/\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        require(initialOwner != address(0), \"Zero address initial owner not allowed\");\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n   /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract EvolutionPlanets is Ownable, ReentrancyGuard {\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct User {\r\n        uint256 partnerId;\r\n        uint64 refCount;\r\n        uint32 regDate;\r\n        address payable wallet;\r\n        uint256 totalEarned;\r\n        uint256 totalLost;\r\n        uint256 place;\r\n        uint8 row;\r\n        uint8 lastRow;\r\n        mapping(uint8 => uint256[]) smallMatrix;\r\n        mapping(uint8 => bool) levelActive;\r\n        mapping(uint8 => uint256) reinvests;\r\n        mapping(uint8 => uint256) earned;\r\n    }\r\n\r\n    mapping (address => uint256) public userIds;\r\n    mapping (uint256 => User) public users;\r\n    mapping (uint256 => uint256) public placeToUserId;\r\n\r\n    mapping (uint8 => uint256[4]) private payments;\r\n\r\n    mapping(uint8 => uint256) private lastFreePlaceInRow;\r\n\r\n    mapping(uint8 => uint256) public matrixPool;\r\n\r\n    mapping(uint8 => uint256) public maxMatrixPool;\r\n\r\n    mapping(uint8 => bool) private levelIsActive;\r\n\r\n    uint8 private immutable MAX_ROW = 161;\r\n\r\n    uint256 public lastUserId = 1;\r\n\r\n    uint256[] public ticketsBought;\r\n\r\n    uint256 public maxTickets = 30;\r\n\r\n    uint256 public ticketPrice = 300;\r\n\r\n    uint256 public nonce;\r\n\r\n    uint256 public unclaimed;\r\n\r\n    uint256 public lotteryPool;\r\n\r\n    uint256 public lotteryWinners = 1;\r\n\r\n    uint256 public planetWinners = 1;\r\n\r\n    uint256 public planetsPoolMaxAmount = 100000;\r\n\r\n    uint256 public planetsPool;\r\n\r\n    IERC20 public EPTToken = IERC20(0x035827910e7E599f0b3b2Ff44a8a33A15CdB00e8);\r\n\r\n    address private priceFeed = 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE;\r\n\r\n    address private lotteryCaller = 0x1d27512724f994c90cA5cfaA2DeF14E5a159923B;\r\n\r\n    event Register(uint256 userId, address indexed wallet, uint256 refId, uint256 date);\r\n    event TopWalletChanged(address indexed account);\r\n    event LevelActivated(uint256 userId, uint8 level);\r\n    event Reinvest(uint256 from, uint256 to, uint8 level, uint256 amount);\r\n    event LostProfit(uint256 from, uint256 to, uint8 level, uint256 amount, uint256 rows);\r\n    event OverProfit(uint256 from, uint256 to, uint8 level, uint256 amount, uint256 rows);\r\n    event LevelBonus(uint256 from, uint256 to, uint8 level, uint256 amount);\r\n    event PlanetBonus(uint256 from, uint256 to, uint8 level, uint256 amount);\r\n    event MatrixBonus(uint userId, uint8 level, uint amount);\r\n    event NinePlanetsBonus(uint userId, uint amount);\r\n    event LotteryBonus(uint userId, uint amount);\r\n    event UserPlaced(uint256 placeId, uint8 lastRow);\r\n    event PlanetPoolIsFull();\r\n    event AllTicketsAreBought();\r\n\r\n\r\n    constructor(address initialOwner,\r\n                address payable topUser) Ownable(initialOwner)\r\n    {\r\n        payments[1] = [2500, 1000, 250, 125];\r\n        payments[2] = [5000, 2000, 500, 250];\r\n        payments[3] = [7500, 3000, 750, 375];\r\n        payments[4] = [10000, 4000, 1000, 500];\r\n        payments[5] = [20000, 8000, 2000, 1000];\r\n        payments[6] = [30000, 12000, 3000, 1500];\r\n        payments[7] = [60000, 25000, 5000, 2500];\r\n        payments[8] = [90000, 35000, 10000, 5000];\r\n        payments[9] = [120000, 45000, 15000, 7500];\r\n        maxMatrixPool[1] = 2500;\r\n        maxMatrixPool[2] = 5000;\r\n        maxMatrixPool[3] = 7500;\r\n        maxMatrixPool[4] = 10000;\r\n        maxMatrixPool[5] = 20000;\r\n        maxMatrixPool[6] = 30000;\r\n        maxMatrixPool[7] = 50000;\r\n        maxMatrixPool[8] = 100000;\r\n        maxMatrixPool[9] = 150000;\r\n        User storage u = users[1];\r\n        u.wallet = topUser;\r\n        u.regDate = uint32(block.timestamp);\r\n        u.partnerId = 1;\r\n        u.place = 1;\r\n        u.row = 1;\r\n        u.lastRow = 2;\r\n        userIds[topUser] = 1;\r\n        placeToUserId[1] = 1;\r\n        emit Register(1, topUser, 1, block.timestamp);\r\n        emit UserPlaced(1,1);\r\n        for (uint8 i = 1; i < 10; i++) {\r\n            u.levelActive[i] = true;\r\n            lastFreePlaceInRow[1] = 2;\r\n            emit LevelActivated(1, i);\r\n        }\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function getRate() public view returns (uint256) {\r\n        ( , int256 basePrice, , , ) = AggregatorV3Interface(priceFeed).latestRoundData();\r\n        return uint256(basePrice);\r\n    }\r\n\r\n\r\n    function usdToBNB(uint256 amount) public view returns(uint256) {\r\n        uint256 rate = getRate();\r\n        return uint256(amount) * 10 ** 24 / rate;\r\n    }\r\n\r\n\r\n    function isRegistered(uint256 userId) public view returns(bool) {\r\n        return users[userId].wallet != address(0);\r\n\r\n    }\r\n\r\n    function isRegistered(address account) public view returns(bool) {\r\n        return userIds[account] > 0;\r\n    }\r\n\r\n\r\n    function hasLevels(uint256 userId) public view returns(\r\n                                                            bool[] memory,\r\n                                                            uint256[] memory,\r\n                                                            uint256[] memory\r\n                                                            )\r\n    {\r\n        bool[] memory levels = new bool[](9);\r\n        uint256[] memory reinvests = new uint256[](9);\r\n        uint256[] memory income = new uint256[](9);\r\n        for (uint8 i = 1; i<10;i++) {\r\n            levels[i-1] = users[userId].levelActive[i];\r\n            reinvests[i-1] = users[userId].reinvests[i];\r\n            income[i-1] = users[userId].earned[i];\r\n\r\n        }\r\n        return (levels, reinvests, income);\r\n    }\r\n\r\n\r\n    function getLevelPrices() public view returns (uint256[] memory) {\r\n        uint256[] memory result = new uint256[](9);\r\n        for (uint8 i=1; i<10;i++) {\r\n            result[i-1] = payments[i][0];\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    function getUplinePlaceId(uint256 placeId) internal pure returns (uint256) {\r\n        if (placeId % 3 == 2) {\r\n            return placeId / 3 + 1;\r\n        } else {\r\n            return placeId / 3;\r\n        }\r\n    }\r\n\r\n\r\n    function findFreePlaceId(uint256 refId) internal view returns(\r\n                                                                    uint256,  // placeId\r\n                                                                    uint256, // lastFreePlaceInRow\r\n                                                                    uint8 // userLastRow\r\n                                                                )\r\n    {\r\n        uint256 placeId = users[refId].place;\r\n        uint8 row = users[refId].row;\r\n        uint8 i = users[refId].lastRow - row;\r\n        uint256 start;\r\n        uint256 end;\r\n        while (true) {\r\n            if (row + i > MAX_ROW) break;\r\n            start = placeId * 3 ** i - (3 ** i / 2);\r\n            end = start + 3 ** i - 1;\r\n            if (lastFreePlaceInRow[row+i] > end) {\r\n                i++;\r\n                continue;\r\n            }\r\n            for (uint256 j=max(start, lastFreePlaceInRow[row+i]); j<=end; j++) {\r\n                if (placeToUserId[j] == 0) {\r\n                    if (j == start && lastFreePlaceInRow[row+i] == 0) {\r\n                        return (j, j + 1, row + i);\r\n                    } else if (start > lastFreePlaceInRow[row+i]) {\r\n                        return (j, lastFreePlaceInRow[row+i], row + i);\r\n                    } else {\r\n                        return (j, j + 1, row + i);\r\n                    }\r\n                }\r\n            }\r\n            i++;\r\n        }\r\n        return (0, 0, 0);\r\n    }\r\n\r\n    function registerUser(address wallet, uint256 refId) internal returns (uint256){\r\n        lastUserId++;\r\n        User storage u = users[lastUserId];\r\n        u.wallet = payable(wallet);\r\n        u.regDate = uint32(block.timestamp);\r\n        u.partnerId = refId;\r\n        userIds[wallet] = lastUserId;\r\n        users[refId].refCount += 1;\r\n        emit Register(lastUserId, wallet, refId, block.timestamp);\r\n        return lastUserId;\r\n    }\r\n\r\n\r\n    function buyPlanet(uint256 partnerId, uint8 level) public payable nonReentrant {\r\n        require(!_msgSender().isContract(), \"Only EOA accounts allowed\");\r\n        require(users[partnerId].wallet != address(0), \"Invalid partner ID\");\r\n        require(level > 0 && level < 10, \"Invalid level\");\r\n        require(levelIsActive[level], \"Level is not active\");\r\n        require(msg.value >= usdToBNB(payments[level][0]), \"Invalid BNB amount\");\r\n        require(!users[userIds[_msgSender()]].levelActive[level],\r\n                \"User already has this level\");\r\n        uint256 userId;\r\n        if (userIds[_msgSender()] == 0) {\r\n            userId = registerUser(_msgSender(), partnerId);\r\n        } else {\r\n            userId = userIds[_msgSender()];\r\n            partnerId = users[userId].partnerId;\r\n        }\r\n        users[userId].levelActive[level] = true;\r\n        emit LevelActivated(userId, level);\r\n        matrixPool[level] += usdToBNB(payments[level][2]);\r\n        if (matrixPool[level] >= usdToBNB(maxMatrixPool[level])) {\r\n            (bool sent, ) = users[userId].wallet.call{\r\n                                                        value: matrixPool[level] / 2,\r\n                                                        gas: 50000\r\n                                                    }(\"\");\r\n            require(sent, \"Failed to send BNB\");\r\n            users[userId].totalEarned += matrixPool[level] / 2;\r\n            users[userId].earned[level] += matrixPool[level] / 2;\r\n            emit MatrixBonus(userId, level, matrixPool[level] / 2);\r\n            (sent, ) = users[partnerId].wallet.call{\r\n                                                        value: matrixPool[level] / 2,\r\n                                                        gas: 50000\r\n                                                    }(\"\");\r\n            require(sent, \"Failed to send BNB\");\r\n            users[partnerId].earned[level] += matrixPool[level] / 2;\r\n            users[partnerId].totalEarned += matrixPool[level] / 2;\r\n            emit MatrixBonus(partnerId, level, matrixPool[level] / 2);\r\n            matrixPool[level] = 0;\r\n        }\r\n        planetsPool += usdToBNB(payments[level][3]);\r\n        if (planetsPool >= usdToBNB(planetsPoolMaxAmount)) {\r\n            emit PlanetPoolIsFull();\r\n        }\r\n        lotteryPool += usdToBNB(payments[level][3]);\r\n        placeToSmallMatrix(userId, partnerId, level);\r\n        placeToBigMatrix(userId, partnerId, level);\r\n\r\n    }\r\n\r\n\r\n    function findUpline(uint256 refId, uint8 level) internal view returns (uint256 result) {\r\n        for (uint i = 0; i < 3; i++) {\r\n            if (users[refId].levelActive[level]) {\r\n                result = refId;\r\n                break;\r\n            } else if (i==2) {\r\n                result = 1;\r\n                break;\r\n            }\r\n            refId = users[refId].partnerId;\r\n        }\r\n    }\r\n\r\n\r\n    function placeToSmallMatrix(uint256 userId, uint256 refId, uint8 level) internal {\r\n        uint8 maxMembers;\r\n        uint256 putId;\r\n        uint256 payId;\r\n        uint amount = usdToBNB(payments[level][1]);\r\n        if (level < 4 || level > 6) {\r\n            maxMembers = 3;\r\n        } else {\r\n            maxMembers = 6;\r\n        }\r\n        putId = findUpline(refId, level);\r\n        users[putId].smallMatrix[level].push(userId);\r\n        EPTToken.safeTransfer(users[userId].wallet, payments[level][0] * 10 ** 16);\r\n        if (users[putId].smallMatrix[level].length == maxMembers) {\r\n            delete users[putId].smallMatrix[level];\r\n            EPTToken.safeTransfer(users[putId].wallet, payments[level][0] * 10 ** 16);\r\n            users[putId].reinvests[level] += 1;\r\n            payId = findUpline(users[putId].partnerId, level);\r\n            if (payId != users[putId].partnerId) {\r\n                emit OverProfit(putId, payId, level, amount, 1);\r\n                emit LostProfit(putId, users[putId].partnerId, level, amount, 1);\r\n                users[users[putId].partnerId].totalLost += amount;\r\n            } else {\r\n                emit Reinvest(putId, payId, level, amount);\r\n            }\r\n        } else {\r\n            payId = putId;\r\n            if (payId != refId) {\r\n                emit OverProfit(userId, payId, level, amount, 1);\r\n                emit LostProfit(userId, refId, level, amount, 1);\r\n                users[refId].totalLost += amount;\r\n            } else {\r\n                emit PlanetBonus(userId, payId, level, amount);\r\n            }\r\n\r\n        }\r\n        (bool sent, ) = users[payId].wallet.call{\r\n                                                    value: amount,\r\n                                                    gas: 50000\r\n                                                }(\"\");\r\n        require(sent, \"Failed to send BNB\");\r\n        users[payId].totalEarned += amount;\r\n        users[payId].earned[level] += amount;\r\n    }\r\n\r\n\r\n    function placeToBigMatrix(uint256 userId, uint256 refId, uint8 level) internal {\r\n        if (users[userId].place == 0) {\r\n            (uint256 placeId, uint256 newLastPlaceInRow, uint8 lastRow) = findFreePlaceId(refId);\r\n            require(placeId > 0, \"No free space left in matrix\");\r\n            if (users[refId].lastRow < lastRow) {\r\n                users[refId].lastRow = lastRow;\r\n            }\r\n            if (newLastPlaceInRow > lastFreePlaceInRow[lastRow]) {\r\n                lastFreePlaceInRow[lastRow] = newLastPlaceInRow;\r\n            }\r\n            placeToUserId[placeId] = userId;\r\n            users[userId].place = placeId;\r\n            users[userId].row = lastRow;\r\n            users[userId].lastRow = lastRow + 1;\r\n            emit UserPlaced(placeId, lastRow);\r\n            sendPayments(userId, level, placeId, lastRow);\r\n        } else {\r\n            sendPayments(userId, level, users[userId].place, users[userId].row);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function sendPayments(uint256 userId,\r\n                           uint8 level,\r\n                           uint256 placeId, uint256 row) internal {\r\n        uint256 part = usdToBNB(payments[level][1]) / 9;\r\n        uint256 amount;\r\n        if (row < 10) {\r\n            unclaimed = unclaimed + (10 - row) * part;\r\n        }\r\n        bool sent;\r\n        for (uint i = 0;i < 9; i++) {\r\n            placeId = getUplinePlaceId(placeId);\r\n            if (placeId <= 1) {\r\n                amount += part * (9 - i);\r\n                break;\r\n            }\r\n            amount += part;\r\n            if (!users[placeToUserId[placeId]].levelActive[level]) {\r\n                users[placeToUserId[placeId]].totalLost += amount;\r\n                emit LostProfit(userId, placeToUserId[placeId], level, amount, amount/part);\r\n                continue;\r\n            } else {\r\n                (sent, ) = users[placeToUserId[placeId]].wallet.call{\r\n                                                        value: amount,\r\n                                                        gas: 50000\r\n                                                    }(\"\");\r\n                require(sent, \"Failed to send BNB\");\r\n                users[placeToUserId[placeId]].totalEarned += amount;\r\n                users[placeToUserId[placeId]].earned[level] += amount;\r\n                emit LevelBonus(userId, placeToUserId[placeId], level, amount);\r\n                if (amount > part) {\r\n                    emit OverProfit(userId,\r\n                                    placeToUserId[placeId],\r\n                                    level,\r\n                                    amount-part,\r\n                                    (amount-part)/part);\r\n                }\r\n                amount = 0;\r\n            }\r\n        }\r\n        if (amount > 0) {\r\n            (sent, ) = users[1].wallet.call{\r\n                                                    value: amount,\r\n                                                    gas: 50000\r\n                                            }(\"\");\r\n            require(sent, \"Failed to send BNB\");\r\n            users[1].earned[level] += amount;\r\n            users[1].totalEarned += amount;\r\n            emit LevelBonus(userId, 1, level, amount);\r\n            if (amount > part) {\r\n                emit OverProfit(userId, 1, level, amount-part, (amount-part)/part);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function checkTickets(uint256 userId) internal view returns (bool) {\r\n        for (uint i = 0;i < ticketsBought.length; i++) {\r\n            if (ticketsBought[i] == userId) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    function buyTicket() external payable {\r\n        require(msg.value >= usdToBNB(ticketPrice), \"Invalid BNB amount\");\r\n        require(ticketsBought.length < maxTickets, \"All tickets are bought\");\r\n        require (userIds[_msgSender()] > 0, \"User is not registered\");\r\n        require(!checkTickets(userIds[_msgSender()]), \"User already has bought a ticket\");\r\n        lotteryPool += msg.value;\r\n        ticketsBought.push(userIds[_msgSender()]);\r\n        if (ticketsBought.length == maxTickets) {\r\n            emit AllTicketsAreBought();\r\n        }\r\n    }\r\n\r\n    function runPlanetsPool(uint256[] calldata accounts) external {\r\n        require(_msgSender() == lotteryCaller, \"Unauthorized caller\");\r\n        require(planetsPool >= usdToBNB(planetsPoolMaxAmount),\r\n                                        \"Planet's pool is not full\");\r\n        bool sent;\r\n        uint256 amount = planetsPool / accounts.length;\r\n        for (uint i = 0;i < accounts.length; i++) {\r\n                (sent, ) = users[accounts[i]].wallet.call{\r\n                                                        value: amount,\r\n                                                        gas: 50000\r\n                                                    }(\"\");\r\n                require(sent, \"Failed to send BNB\");\r\n                users[accounts[i]].totalEarned += amount;\r\n                emit NinePlanetsBonus(accounts[i], amount);\r\n        }\r\n        planetsPool = 0;\r\n    }\r\n\r\n    function runLottery(uint256[] calldata accounts) external {\r\n        require(_msgSender() == lotteryCaller, \"Unauthorized caller\");\r\n        require(ticketsBought.length == maxTickets, \"Not all tickets are bought\");\r\n        bool sent;\r\n        uint256 amount = lotteryPool / accounts.length;\r\n        for (uint i = 0;i < accounts.length; i++) {\r\n                (sent, ) = users[accounts[i]].wallet.call{\r\n                                                        value: amount,\r\n                                                        gas: 50000\r\n                                                    }(\"\");\r\n                require(sent, \"Failed to send BNB\");\r\n                users[accounts[i]].totalEarned += amount;\r\n                emit LotteryBonus(accounts[i], amount);\r\n        }\r\n        lotteryPool = 0;\r\n        delete ticketsBought;\r\n    }\r\n\r\n\r\n    function changeTopUser(address account) public onlyOwner {\r\n        require(account != address(0), \"Zero account is not allowed\");\r\n        address oldWallet = users[1].wallet;\r\n        users[1].wallet = payable(account);\r\n        userIds[account] = 1;\r\n        delete userIds[oldWallet];\r\n        emit TopWalletChanged(account);\r\n    }\r\n\r\n\r\n    function retriveBNB(address payable to, uint256 amount) external onlyOwner {\r\n        require(to != address(0), \"Zero address prohibited\");\r\n        uint256 contractBalance = address(this).balance;\r\n        require(amount <= contractBalance, \"Insufficient contract BNB balance\");\r\n        to.transfer(amount);\r\n    }\r\n\r\n    function setMaxMatrixPool(uint8 level, uint256 amount) external onlyOwner {\r\n        require(level > 0 && level < 10, \"Invalid level\");\r\n        require(amount > 0, \"Zero amount not allowed\");\r\n        maxMatrixPool[level] = amount;\r\n    }\r\n\r\n    function setMaxPlanetsPool(uint256 amount) external onlyOwner {\r\n        require(amount > 0, \"Zero amount not allowed\");\r\n        planetsPoolMaxAmount = amount;\r\n    }\r\n\r\n    function setTicketPrice(uint256 amount) external onlyOwner {\r\n        require(amount > 0, \"Zero amount not allowed\");\r\n        ticketPrice = amount;\r\n    }\r\n\r\n    function setMaxTickets(uint256 tickets) external onlyOwner {\r\n        require(tickets > 0, \"Zero amount not allowed\");\r\n        maxTickets = tickets;\r\n    }\r\n\r\n    function setPriceFeed(address _feed) external onlyOwner {\r\n        require(_feed != address(0), \"Zero address not allowed\");\r\n        priceFeed = _feed;\r\n    }\r\n\r\n    function setLotteryCaller(address _caller) external onlyOwner {\r\n        require(_caller != address(0), \"Zero address not allowed\");\r\n        lotteryCaller = _caller;\r\n    }\r\n\r\n    function setLotteryWinnersNumber(uint256 winners) external onlyOwner {\r\n        require((winners > 0 && winners <= maxTickets) , \"Invalid number of winners\");\r\n        lotteryWinners = winners;\r\n    }\r\n\r\n    function setPlanetWinnersNumber(uint256 winners) external onlyOwner {\r\n        require(winners > 0, \"Invalid number of winners\");\r\n        planetWinners = winners;\r\n    }\r\n\r\n\r\n    function updateNonce(uint256 _nonce) external onlyOwner {\r\n        nonce = _nonce;\r\n    }\r\n\r\n\r\n    function setEPTToken(address _token) external onlyOwner {\r\n        require(_token != address(0), \"Zero address not allowed\");\r\n        EPTToken = IERC20(_token);\r\n    }\r\n\r\n    function getNinePlanetsData() public view returns (\r\n                                                       uint256, // current pool,\r\n                                                       uint256, // required pool\r\n                                                       uint256, //winners\r\n                                                       uint256 //nonce\r\n                                                    )\r\n    {\r\n        return (planetsPool, usdToBNB(planetsPoolMaxAmount), planetWinners, nonce);\r\n    }\r\n\r\n    function getLotteryData() public view returns (uint256[] memory, // tickets bought\r\n                                                   uint256, // tickets required\r\n                                                   uint256, // ticket price\r\n                                                   uint256, // pool amount\r\n                                                   uint256 // lottery winners\r\n                                                   )\r\n\r\n    {\r\n        return (\r\n                    ticketsBought,\r\n                    maxTickets,\r\n                    usdToBNB(ticketPrice),\r\n                    lotteryPool,\r\n                    lotteryWinners\r\n                );\r\n    }\r\n\r\n\r\n    function getUserData(uint256 userId) public view returns (\r\n                                                                uint256, //partnerId\r\n                                                                address, //wallet,\r\n                                                                uint256, //refCount\r\n                                                                uint256, //earned\r\n                                                                uint256 //lost,\r\n\r\n                                                                )\r\n    {\r\n        return (users[userId].partnerId, users[userId].wallet,\r\n                users[userId].refCount,\r\n                users[userId].totalEarned, users[userId].totalLost);\r\n    }\r\n\r\n    function getUserData(address account) public view returns (\r\n                                                                uint256, //userId\r\n                                                                uint256, //partnerId\r\n                                                                address, //wallet,\r\n                                                                uint256, //refCount\r\n                                                                uint256, //earned\r\n                                                                uint256 //lost,\r\n                                                                )\r\n    {\r\n\r\n        return (userIds[account], users[userIds[account]].partnerId,\r\n                users[userIds[account]].wallet, users[userIds[account]].refCount,\r\n                users[userIds[account]].totalEarned, users[userIds[account]].totalLost);\r\n    }\r\n\r\n\r\n    function getMatrixPools() public view returns (uint256[] memory) {\r\n        uint256[] memory result = new uint256[](9);\r\n        for (uint8 i=1; i<10;i++) {\r\n            result[i-1] = usdToBNB(maxMatrixPool[i]) - matrixPool[i];\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    function getSmallMatrices(uint256 userId) public view returns (uint256[] memory) {\r\n        uint8 maxMembers;\r\n        uint256[] memory result = new uint256[](36);\r\n        uint8 count = 0;\r\n        for (uint8 i = 1; i < 10; i++) {\r\n            if (i < 4 || i > 6) {\r\n                maxMembers = 3;\r\n            } else {\r\n                maxMembers = 6;\r\n            }\r\n            for (uint8 j = 0; j < max(maxMembers, users[userId].smallMatrix[i].length); j++) {\r\n                if (j < users[userId].smallMatrix[i].length) {\r\n                    result[count] = users[userId].smallMatrix[i][j];\r\n                } else {\r\n                    result[count] = 0;\r\n                }\r\n                count++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function ownerWithdrawToken(uint256 amount, address recepient) public onlyOwner {\r\n        require((recepient != address(0) && amount != 0), \"Zero values are not allowed\");\r\n        uint256 balance = EPTToken.balanceOf(address(this));\r\n        require(balance >= amount,\"Insufficient EPT token balance on contract\");\r\n        EPTToken.safeTransfer(recepient, amount);\r\n    }\r\n\r\n\r\n    function getActivePlanets() public view returns (bool[] memory) {\r\n        bool[] memory result = new bool[](9);\r\n        for (uint8 i=1; i<10; i++) {\r\n            result[i-1] = levelIsActive[i];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function togglePlanets(uint8[] memory planets, bool status) public onlyOwner {\r\n        for (uint8 i = 0; i < planets.length; i++) {\r\n            if (planets[i] > 0 && planets[i] < 10) {\r\n                levelIsActive[planets[i]] = status;\r\n            }\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"topUser\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllTicketsAreBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"LevelActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LevelBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rows\",\"type\":\"uint256\"}],\"name\":\"LostProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LotteryBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MatrixBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NinePlanetsBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rows\",\"type\":\"uint256\"}],\"name\":\"OverProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PlanetBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PlanetPoolIsFull\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TopWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"placeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"lastRow\",\"type\":\"uint8\"}],\"name\":\"UserPlaced\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EPTToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"partnerId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyPlanet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"changeTopUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivePlanets\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLevelPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryData\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMatrixPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNinePlanetsData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"getSmallMatrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"getUserData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"hasLevels\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"matrixPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"maxMatrixPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"ownerWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"placeToUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planetWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planetsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planetsPoolMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retriveBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"accounts\",\"type\":\"uint256[]\"}],\"name\":\"runLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"accounts\",\"type\":\"uint256[]\"}],\"name\":\"runPlanetsPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setEPTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"setLotteryCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"winners\",\"type\":\"uint256\"}],\"name\":\"setLotteryWinnersNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxMatrixPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxPlanetsPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"}],\"name\":\"setMaxTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"winners\",\"type\":\"uint256\"}],\"name\":\"setPlanetWinnersNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketsBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"planets\",\"type\":\"uint8[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"togglePlanets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"updateNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdToBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"partnerId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"refCount\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"regDate\",\"type\":\"uint32\"},{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"place\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lastRow\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EvolutionPlanets", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fc29d991094e4887a570f9a21fa41e1dbf63e66d000000000000000000000000fc29d991094e4887a570f9a21fa41e1dbf63e66d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f1af022a9d9790ab9588611b29df2048f174a2870a39e2685f98b50fb7694578"}