{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.19;\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Address.sol\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor (){\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\ncontract OmegaContract is Ownable, ReentrancyGuard{    \r\n    IERC20 public BUSD;\r\n    IERC20 public token;\r\n    //contract information\r\n    string private _name = \"Omega13 Jackpot\";\r\n    string private _symbol = \"omega13\";\r\n    uint8 private _decimals = 18;\r\n    \r\n    //fees settings\r\n    uint256 public totalDeposit = 0;\r\n    uint256 public totalWithdraw = 0;\r\n    uint256 public standardBet = 10 ether;\r\n    uint256 public dcBet = 16 ether;\r\n    uint256 public sbGameNum = 13;\r\n    uint256 public dcGameNum = 13;\r\n    \r\n    uint256 public totalBets = 0;\r\n    uint256 public winningPercent = 70;\r\n    uint256 public nextJackpotPercent = 20;\r\n    uint256 public nftPercent = 10;\r\n\r\n    uint256 public nextJackpotPercentNoWin = 60;\r\n    uint256 public nftPercentNoWin = 30;\r\n    uint256 public teamNoWin = 10;\r\n\r\n    //bet distribution\r\n    uint256 public alphaLp = 37;\r\n    uint256 public omegaNFT = 30;\r\n    uint256 public omegaJackpot = 15;\r\n    uint256 public seasonJackpot = 2;\r\n    uint256 public weeklyJackpot = 6;\r\n    uint256 public marketing = 5;\r\n    uint256 public team = 5;\r\n    uint256 public weeklyNFT = 20;\r\n    uint256 public seasonNFT = 20;\r\n    uint public dailyNFT = 10;\r\n    uint public nextOmega = 10;\r\n    uint public tokenPriceInBusd = 500;//5busd per alpha\r\n    bool public freebet = false;\r\n    \r\n        address public omegaJackpotAddress = 0xF423860A73FD17DeF9a3029F84a79E7b226121a7;\r\n        address public weeklyJackpotAddress = 0x8D206170f78f53e3E38c771da627EEe89928E2D3;\r\n        address public seasonJackpotAddress = 0x919D30b0A038CaD08Ec07D943076D996E90a6e8B;\r\n\r\n    //fee address\r\n    address public alphaLpAddress = 0x8cBd19dE48E307a5F9fE8414Fc5247E5B17DeA48;//Decentralize Account System Wallet\r\n    address public marketingAddress = 0xCa5C49f3C20D187BdC3D1EC16ce99b76CaFf880b;//Team Wallet\r\n    address public omegaNFTAddress = 0xb20E79bC14ECec995050541bA1E87c30F85f0135; //reward Wallet0xb8F4880b34A1bce21168A38096797015864922F6\r\n    address public teamAddress = 0xF423860A73FD17DeF9a3029F84a79E7b226121a7; // liquidity wallet\r\n    //deposit and withdraw variable settings \r\n    \r\n    uint256 public initialJackpotId; //counting the number of time Betment occur\r\n    //mapping processes\r\n    mapping (uint => string) public sportType;\r\n    mapping(address => uint256[]) public userBets;\r\n    mapping(uint256 => GamesBets[]) public userGameSelected;\r\n    mapping(uint256 => Matches[]) public sportMatches;\r\n    mapping(uint256 => uint[]) public jackpotBets;\r\n    mapping(address => uint256) public userClaims;\r\n    mapping(uint256 => uint256) public matchNum;\r\n    mapping(uint256 => uint256) public matchResult;\r\n    mapping(uint256 => bool) public matchExist;\r\n    mapping(uint256 => mapping(uint256=> uint)) public betExist;\r\n    mapping(uint256 =>mapping(uint256=>Matches)) public allMatches;\r\n    mapping(uint256=> uint256) public jackpotBalances;\r\n    mapping(uint256=> uint256) public jackpotTotalWinner;\r\n    mapping (uint256=>bool) public jackpotIdExist;\r\n    mapping (address=>bool) public adminAddress;\r\n    \r\n\r\n    struct Matches{\r\n        uint256 gameId;\r\n        uint256 matchId;\r\n        string home;\r\n        string away;\r\n        uint256 homeId;\r\n        uint256 awayId;\r\n        string homeLogo;\r\n        string awayLogo;\r\n        uint256 matchTime;\r\n        bool status;\r\n        string finalScore;\r\n        uint256 matchResult;\r\n        uint sportType;\r\n    }\r\n\r\n    struct Bet{\r\n    uint256 _jackpotId;\r\n    address betors;\r\n    uint256 amountBeted;\r\n    uint256 betType;\r\n    uint256 betDate;\r\n    bool winningStatus;\r\n    bool withdrawStatus;\r\n    uint256 withdrawAmount;\r\n    }\r\n\r\n    struct GamesBets{\r\n        uint256 betId;\r\n        address betors;\r\n        uint256 cMatch;\r\n        //uint256 matchId;\r\n        uint256 choice;\r\n        uint256 result;\r\n    }\r\n\r\n    Matches[] public allMatch;\r\n    Bet[] public allBetments;\r\n    GamesBets[] public allGamesBets;\r\n\r\n    //log events\r\n    event LogTokenApproval(address token, uint256 total);\r\n    event BetPlaced(address BetorAddress, uint256 amount, uint256 betSlipId, uint256 ctime);\r\n    event claimBetWinning(address to, uint256 share, uint256 totalEarned, uint256 ctime); \r\n    event updateMatches(address from, uint256 amountCompounded, uint256 ctime);\r\n    modifier onlyAprroveAdmin(){\r\n        require(adminAddress[msg.sender]==true, \"You can't use this function\");\r\n        _;\r\n    }\r\n    constructor(){\r\n        BUSD = IERC20(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);//usdc - 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d\r\n        token = IERC20(0x5d75675E9DA82524B5DfBe3439Fe3a6E29f2b967);\r\n        setAdminAddress(msg.sender, true);\r\n    }\r\n\r\n    //function to return values\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function getBUSDValue(uint _busdAmount) public view returns (uint){\r\n        require(_busdAmount > 0, \"no value to calculate\");\r\n            return (_busdAmount / tokenPriceInBusd) * 100;\r\n    }\r\n\r\n   function getTotalClaimAmount(address _addr) public view returns(uint){\r\n    return userClaims[_addr];\r\n   }\r\n   function getCurrentTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function checkWinning(uint _betId) public view returns (bool) {\r\n        return allBetments[_betId].winningStatus;\r\n    }\r\n\r\n    function getJackpotBalance(uint _jackpotId) public view returns(uint, uint, uint, bool, uint, uint, uint){\r\n        return (jackpotBalances[_jackpotId], initialJackpotId, jackpotTotalWinner[_jackpotId], jackpotIdExist[_jackpotId], BUSD.balanceOf(omegaJackpotAddress),BUSD.balanceOf(weeklyJackpotAddress), BUSD.balanceOf(seasonJackpotAddress));\r\n    }\r\n    function fetchAllUserBet(address _addr) public view returns(uint256[] memory){\r\n        return userBets[_addr];\r\n    }\r\n\r\n    function getAllBets() public view returns (Bet[] memory) {\r\n        return allBetments;\r\n    }\r\n\r\n    function updateJackpotWinner(uint _numb, uint _jid, bool _flag) public onlyAprroveAdmin{\r\n        jackpotTotalWinner[_jid] = _numb;\r\n        freebet = _flag;\r\n    }\r\n\r\n    function startCurrentJackpot(uint256 _jackpotAmount) public onlyAprroveAdmin{\r\n        jackpotIdExist[initialJackpotId] = true;\r\n        jackpotTotalWinner[initialJackpotId]=1;\r\n        jackpotBalances[initialJackpotId] = _jackpotAmount;\r\n        initialJackpotId++;\r\n    }\r\n\r\n    function closeTodayJackpot(uint _jid, bool _flaf, uint _amount) public onlyAprroveAdmin{\r\n        jackpotIdExist[_jid] = _flaf;\r\n        jackpotBalances[_jid] = _amount;\r\n    }\r\n\r\n    function getBetById(uint _id) public view returns (Bet memory) {\r\n        return allBetments[_id];\r\n    }\r\n\r\n    function getMatchByType(uint _stype) public view returns (Matches[] memory) {\r\n        return sportMatches[_stype];\r\n    }\r\n\r\n    function getBetByArr(uint _id) public view returns (uint256[] memory) {\r\n        uint256[] memory ids;\r\n        GamesBets[] memory _game = userGameSelected[_id];\r\n        for(uint256 i=0; i < _game.length; i++){\r\n            //ids.push(_game[i].betId);\r\n            uint id = _game[i].betId;\r\n            ids[i] = id;\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    function getAllSelectedGame(uint _betId) public view returns(GamesBets[] memory){\r\n        return userGameSelected[_betId];\r\n    }\r\n\r\n    function getAllGames() public view returns (GamesBets[] memory) {\r\n        return allGamesBets;\r\n    }\r\n\r\n    function fetchAllMatches() public view returns (Matches[] memory) {\r\n        return allMatch;\r\n    }\r\n\r\n    function fetchMatchById(uint256 _id) public view returns (Matches memory) {\r\n        return allMatch[_id];\r\n    }\r\n    \r\n    function fetchAllJackpotTickets(uint _jid) public view returns(uint){\r\n        uint256[] memory jBet = jackpotBets[_jid];\r\n        uint256 numbOfWinner = 0;\r\n        for(uint i=0; i < jBet.length; i++){\r\n            uint betId = jBet[i];\r\n            //uint256[] memory _arrId = getBetByArr(betId);\r\n            (bool withdrawStatus, ) = checkWinningStatus(betId);//allBetments[_betId].withdrawStatus;\r\n            if(withdrawStatus == true){\r\n                numbOfWinner++;\r\n            }\r\n        }\r\n        return numbOfWinner;\r\n    }\r\n\r\n    function setAdminAddress(address _adminAddress, bool _flag) public onlyOwner{\r\n        adminAddress[_adminAddress] = _flag;\r\n    }\r\n\r\n\r\n\r\n    function uploadAllMatches(uint256[] memory _matchId,uint256[] memory _homeId,uint256[] memory _awayId,uint256[] memory _matchTime, string[] memory _home,string[] memory _away, uint256 _leagueId, uint256 _stype) external onlyAprroveAdmin{\r\n        \r\n        for(uint256 i=0; i < _matchId.length; i++){\r\n       uint256 matchId = _matchId[i];\r\n        string memory home = _home[i];\r\n        string memory away = _away[i];\r\n        uint256 homeId = _homeId[i];\r\n        uint256 awayId = _awayId[i];\r\n        uint256 matchTime = _matchTime[i];\r\n        bool status = false;\r\n        string memory finalScore = \"0-0\";\r\n        if(matchExist[matchId]==true){\r\n            continue ;\r\n        }\r\n\r\n        matchExist[matchId] = true;\r\n        allMatches[_leagueId][i] = Matches(allMatch.length, matchId , home, away, homeId, awayId,\"\",\"\", matchTime,status,finalScore,0,_stype);\r\n        allMatch.push(allMatches[_leagueId][i]);\r\n        sportMatches[_stype].push(allMatches[_leagueId][i]);\r\n       }\r\n       matchNum[_leagueId] = _matchId.length;\r\n    }\r\n\r\n    function updateAllMatches(uint256[] memory _matchId, bool[] memory _status,string[] memory _finalScore, string[] memory _homeLogo,string[] memory _awayLogo,  uint256[] memory _matchResult) external onlyAprroveAdmin{\r\n        for(uint256 i=0; i < _matchId.length; i++){\r\n        uint256 matchId = _matchId[i];\r\n        string memory homeLogo = _homeLogo[i];\r\n        string memory awayLogo = _awayLogo[i];\r\n        bool status = _status[i];\r\n        string memory finalScore = _finalScore[i];\r\n        uint matchResults = _matchResult[i];\r\n        \r\n        allMatch[matchId].status = status;\r\n        allMatch[matchId].finalScore = finalScore;\r\n        allMatch[matchId].homeLogo = homeLogo;\r\n        allMatch[matchId].awayLogo = awayLogo;\r\n        allMatch[matchId].matchResult = matchResults;\r\n           \r\n       }\r\n       \r\n    }\r\n\r\n    function updateRedistrubution(uint256 _alphaLp, uint256 _omegaNFT, uint256 _omegaJackpot, uint256 _seasonJackpot, uint256 _weeklyJackpot, uint256 _marketing, uint256 _team, uint _weeklyNFT, uint _seasonNFT, uint _dailyNFT, uint _nextOmega ) public onlyOwner{\r\n            alphaLp = _alphaLp;\r\n            omegaNFT = _omegaNFT;\r\n            omegaJackpot = _omegaJackpot;\r\n            seasonJackpot = _seasonJackpot;\r\n            weeklyJackpot = _weeklyJackpot;\r\n            marketing = _marketing;\r\n            team = _team;\r\n            weeklyNFT = _weeklyNFT;\r\n            seasonNFT = _seasonNFT;\r\n            dailyNFT = _dailyNFT;\r\n            nextOmega = _nextOmega;\r\n    }\r\n    \r\n    function setSportType(uint256 _index, string memory _value ) external onlyOwner{\r\n        sportType[_index] = _value;\r\n    }\r\n\r\n    function updateFeesAddress(address _omegaNFTAddress,address _marketingAddress,address _alphaLpAddress,address _teamAddress, address _omegaJackpotAddress, address _weeklyJackpotAddress, address _seasonJackpotAddress) public onlyOwner{\r\n        omegaNFTAddress = _omegaNFTAddress;\r\n        marketingAddress = _marketingAddress;\r\n        alphaLpAddress = _alphaLpAddress;\r\n        teamAddress = _teamAddress;\r\n        omegaJackpotAddress = _omegaJackpotAddress;\r\n        weeklyJackpotAddress = _weeklyJackpotAddress;\r\n        seasonJackpotAddress = _seasonJackpotAddress;\r\n    }\r\n\r\n    function setBetAmount(uint _sB, uint _dcB, uint _sbGameNum, uint _dcGameNum) public onlyOwner{\r\n        standardBet = _sB;\r\n        dcBet = _dcB;\r\n        sbGameNum = _sbGameNum;\r\n        dcGameNum = _dcGameNum;\r\n    }\r\n\r\n    function setting(address _token, address _busd) public onlyOwner{\r\n        BUSD = IERC20(_busd);\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    function setWinningShare(uint _winPercent, uint _nextJackpotPercent, uint256 _nftPercent, uint256 _nextJackpotPercentNoWin, uint256 _nftPercentNoWin) public onlyOwner{\r\n        winningPercent = _winPercent;\r\n        nextJackpotPercent = _nextJackpotPercent;\r\n        nftPercent = _nftPercent;\r\n        nextJackpotPercentNoWin = _nextJackpotPercentNoWin;\r\n        nftPercentNoWin = _nftPercentNoWin;\r\n    }\r\n    \r\n\r\n    function betGame(uint256[] memory betInfo, uint256[] memory _cMatchId, uint256[] memory _choice, uint256 betDay, uint _ptype) public nonReentrant{\r\n        uint256 amountBeted =  betInfo[0];\r\n        uint256 betType = betInfo[1];\r\n        uint256 betDate = block.timestamp;\r\n        uint256 count456 = 0;\r\n        if(!adminAddress[msg.sender]){\r\n        if(betType==1){\r\n            require(_cMatchId.length >= sbGameNum, \"You didn't select up to 13 games\");\r\n            if(_ptype==1){\r\n                BUSD.transferFrom(msg.sender, address(this), amountBeted);\r\n            }\r\n            else{\r\n                token.transferFrom(msg.sender, address(this), getBUSDValue(amountBeted));\r\n            }\r\n            \r\n        }\r\n        else{\r\n            require(_cMatchId.length >= dcGameNum, \"You must select up to 10 games\");\r\n            if(_ptype==1){\r\n                BUSD.transferFrom(msg.sender, address(this), amountBeted);\r\n            }\r\n            else{\r\n                token.transferFrom(msg.sender, address(this), getBUSDValue(amountBeted));\r\n            }\r\n        }\r\n        }\r\n        takeFees(amountBeted);\r\n        require(jackpotIdExist[betDay]==true, \"You cannot stake now, bet close!\");\r\n        //jackpotBalances[betDay] += amountBeted;\r\n        jackpotBets[betDay].push(totalBets);\r\n        allBetments.push(Bet(betDay, msg.sender, amountBeted, betType, betDate, false, false, 0));\r\n        userBets[msg.sender].push(totalBets);\r\n        require(_choice.length == _cMatchId.length,\"selected games length not match!\");\r\n        for(uint256 i=0; i < _cMatchId.length; i++){\r\n            \r\n          //  uint256 _match = _matchId[i];\r\n            uint256 choice = _choice[i];\r\n            uint256 cMatch = _cMatchId[i];\r\n            uint256 cMatchTime = allMatch[cMatch].matchTime;\r\n            require(cMatchTime >= block.timestamp || freebet==true, \"You can't stake again!\");\r\n            require(betExist[totalBets][cMatch] != 1, \"You can't bet on same match twice!\");\r\n            require(count456 < 4, \"You can't place more than 3 double chances\");\r\n\r\n            if(choice > 3){\r\n                count456++;\r\n            }\r\n            betExist[totalBets][cMatch] = 1;\r\n            allGamesBets.push(GamesBets(totalBets, msg.sender, cMatch, choice, 0));\r\n            userGameSelected[totalBets].push(allGamesBets[allGamesBets.length-1]);\r\n        }\r\n        totalBets++;\r\n        emit BetPlaced(msg.sender, amountBeted, totalBets, betDate);\r\n    }\r\n\r\n    function takeFees(uint256 _amount) private{\r\n\r\n        uint256 alphaLp1 = (alphaLp * _amount) / 100;\r\n        uint256 omegaNFT1 = (omegaNFT * _amount) / 100;\r\n        uint256 omegaJackpot1 = (omegaJackpot * _amount) / 100;\r\n        uint256 seasonJackpot1 = (seasonJackpot * _amount) / 100;\r\n        uint256 weeklyJackpot1 = (weeklyJackpot * _amount) / 100;\r\n        uint256 marketing1 = (marketing * _amount) / 100;\r\n        uint256 team1 = (team * _amount) / 100;\r\n        \r\n        BUSD.transfer(alphaLpAddress, alphaLp1);\r\n        BUSD.transfer(marketingAddress, marketing1);\r\n        BUSD.transfer(omegaNFTAddress, omegaNFT1);\r\n        BUSD.transfer(teamAddress, team1);\r\n        BUSD.transfer(weeklyJackpotAddress, weeklyJackpot1);\r\n        BUSD.transfer(seasonJackpotAddress, seasonJackpot1);\r\n        BUSD.transfer(omegaJackpotAddress, omegaJackpot1);\r\n        \r\n    }\r\n\r\n    function takeWinningFees(uint256 _amount) private{\r\n        uint256 omegaNFT1 = (dailyNFT * _amount) / 100;\r\n        uint256 omegaJackpot1 = (nextOmega * _amount) / 100;\r\n        BUSD.transfer(omegaNFTAddress, omegaNFT1);\r\n        BUSD.transfer(omegaJackpotAddress, omegaJackpot1);\r\n    }\r\n\r\n    function checkWinningStatus(uint _betId) public view returns(bool, uint) {\r\n        uint _countResult = 0;\r\n        bool result = false;\r\n        GamesBets[] memory allGames = getAllSelectedGame(_betId);\r\n        uint _match = allGames.length;\r\n        \r\n        for(uint8 i=0; i < _match; i++){\r\n            //uint256 id = allGames[i].;\r\n            uint256 _cMatch = allGames[i].cMatch;\r\n            uint256 userChoice = allGames[i].choice;  \r\n            uint256 adminResult = allMatch[_cMatch].matchResult;\r\n            \r\n            if(userChoice==adminResult || (adminResult==2 && (userChoice ==4 || userChoice ==5)) || (adminResult==1 && (userChoice ==4 || userChoice ==6)) ||(adminResult==3 &&  (userChoice ==5 || userChoice ==6)) ){    \r\n                _countResult++;\r\n            }\r\n            \r\n        }\r\n\r\n        if(_countResult > 0 && _countResult==_match){\r\n          result = true;\r\n        }\r\n        return (result,_countResult);\r\n    }\r\n\r\n    function withdrawWinning(uint _betId) external onlyAprroveAdmin {\r\n        bool withdrawStatus = allBetments[_betId].withdrawStatus;\r\n        address winAddress = allBetments[_betId].betors;\r\n        uint _jid = allBetments[_betId]._jackpotId;\r\n        (bool winStatus, ) = checkWinningStatus(_betId);//allBetments[_betId].withdrawStatus;\r\n        require(winStatus == true, \"You didn't win the bet\");\r\n        uint256 numWinners = jackpotTotalWinner[_jid];\r\n        if(numWinners==0){\r\n            numWinners = fetchAllJackpotTickets(_jid);\r\n        }\r\n        require(numWinners > 0, \"You can't claim win bonus now, wait for admin approval!\");\r\n        uint winAmount = (jackpotBalances[_betId] / numWinners);\r\n        allBetments[_betId].withdrawAmount = winAmount;\r\n        \r\n        require(winAddress == msg.sender, \"You are eligible for this tx\");\r\n        require(!withdrawStatus, \"You have withdrawed your winning before\");\r\n        takeWinningFees(winAmount);\r\n        uint256 winnersShare = (winningPercent * winAmount) /100;\r\n        uint256 claimAmount = winnersShare / numWinners;\r\n        BUSD.transfer(winAddress, claimAmount);\r\n        allBetments[_betId].withdrawStatus = true;\r\n        allBetments[_betId].winningStatus = true;\r\n        userClaims[msg.sender] += claimAmount;\r\n        emit claimBetWinning(msg.sender,winnersShare, claimAmount,block.timestamp);\r\n    }\r\n\r\n    // Withdraw ERC20 tokens that are potentially stuck\r\n    function withdrawBusd() external onlyOwner nonReentrant{\r\n        BUSD.transfer(teamAddress, BUSD.balanceOf(address(this)));\r\n    }\r\n    //referer box\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"BetorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betSlipId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ctime\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LogTokenApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ctime\",\"type\":\"uint256\"}],\"name\":\"claimBetWinning\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountCompounded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ctime\",\"type\":\"uint256\"}],\"name\":\"updateMatches\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allBetments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_jackpotId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"betors\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBeted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"winningStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawStatus\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allGamesBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"betors\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cMatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"home\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"away\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"homeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"homeLogo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"awayLogo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"matchTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"finalScore\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"matchResult\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sportType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMatches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"home\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"away\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"homeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"homeLogo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"awayLogo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"matchTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"finalScore\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"matchResult\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sportType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alphaLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alphaLpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betExist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"betInfo\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_cMatchId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_choice\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"betDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ptype\",\"type\":\"uint256\"}],\"name\":\"betGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"checkWinning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"checkWinningStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_flaf\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"closeTodayJackpot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dcBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dcGameNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jid\",\"type\":\"uint256\"}],\"name\":\"fetchAllJackpotTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchAllMatches\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"home\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"away\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"homeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"homeLogo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"awayLogo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"matchTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"finalScore\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"matchResult\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sportType\",\"type\":\"uint256\"}],\"internalType\":\"struct OmegaContract.Matches[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"fetchAllUserBet\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"fetchMatchById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"home\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"away\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"homeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"homeLogo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"awayLogo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"matchTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"finalScore\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"matchResult\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sportType\",\"type\":\"uint256\"}],\"internalType\":\"struct OmegaContract.Matches\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freebet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllBets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_jackpotId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"betors\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBeted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"winningStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawStatus\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OmegaContract.Bet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllGames\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"betors\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cMatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"internalType\":\"struct OmegaContract.GamesBets[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"getAllSelectedGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"betors\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cMatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"internalType\":\"struct OmegaContract.GamesBets[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_busdAmount\",\"type\":\"uint256\"}],\"name\":\"getBUSDValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBetByArr\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBetById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_jackpotId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"betors\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBeted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"winningStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawStatus\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OmegaContract.Bet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jackpotId\",\"type\":\"uint256\"}],\"name\":\"getJackpotBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stype\",\"type\":\"uint256\"}],\"name\":\"getMatchByType\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"home\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"away\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"homeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"homeLogo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"awayLogo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"matchTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"finalScore\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"matchResult\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sportType\",\"type\":\"uint256\"}],\"internalType\":\"struct OmegaContract.Matches[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTotalClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialJackpotId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jackpotBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jackpotBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jackpotIdExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jackpotTotalWinner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matchExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matchNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matchResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextJackpotPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextJackpotPercentNoWin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOmega\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftPercentNoWin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"omegaJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"omegaJackpotAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"omegaNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"omegaNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sbGameNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seasonJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seasonJackpotAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seasonNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dcB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sbGameNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dcGameNum\",\"type\":\"uint256\"}],\"name\":\"setBetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setSportType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextJackpotPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextJackpotPercentNoWin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftPercentNoWin\",\"type\":\"uint256\"}],\"name\":\"setWinningShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_busd\",\"type\":\"address\"}],\"name\":\"setting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sportMatches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"home\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"away\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"homeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"homeLogo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"awayLogo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"matchTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"finalScore\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"matchResult\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sportType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sportType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standardBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jackpotAmount\",\"type\":\"uint256\"}],\"name\":\"startCurrentJackpot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamNoWin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceInBusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_matchId\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_status\",\"type\":\"bool[]\"},{\"internalType\":\"string[]\",\"name\":\"_finalScore\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_homeLogo\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_awayLogo\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_matchResult\",\"type\":\"uint256[]\"}],\"name\":\"updateAllMatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_omegaNFTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alphaLpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_omegaJackpotAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weeklyJackpotAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seasonJackpotAddress\",\"type\":\"address\"}],\"name\":\"updateFeesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"updateJackpotWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_alphaLp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_omegaNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_omegaJackpot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seasonJackpot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weeklyJackpot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_team\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weeklyNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seasonNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextOmega\",\"type\":\"uint256\"}],\"name\":\"updateRedistrubution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_matchId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_homeId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_awayId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_matchTime\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_home\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_away\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_leagueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stype\",\"type\":\"uint256\"}],\"name\":\"uploadAllMatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userGameSelected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"betors\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cMatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weeklyJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weeklyJackpotAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weeklyNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBusd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"withdrawWinning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OmegaContract", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://35d4901b6d98b3eb79b6186a753caaed7c19bc0dd4cf0b75fae2ba1ad2c04795"}