{"SourceCode": "pragma solidity ^0.5.17;\r\n\r\ncontract CloneFactory {\r\n\r\n  function createClone(address target) internal returns (address result) {\r\n    bytes20 targetBytes = bytes20(target);\r\n    assembly {\r\n      let clone := mload(0x40)\r\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n      mstore(add(clone, 0x14), targetBytes)\r\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n      result := create(0, clone, 0x37)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    \r\n    function initOwnable() internal{\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract MinterRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    function initMinter() internal{\r\n        _addMinter(_msgSender());\r\n    }\r\n\r\n    constructor () internal {\r\n        _addMinter(_msgSender());\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    function initWhiteListAdmin() internal{\r\n        _addWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(_msgSender()), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas\r\n     * @param _interfaceId The interface identifier, as specified in ERC-165\r\n     */\r\n    function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n   * @dev Multiplies two unsigned integers, reverts on overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath#mul: OVERFLOW\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, \"SafeMath#div: DIVISION_BY_ZERO\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath#sub: UNDERFLOW\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two unsigned integers, reverts on overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath#add: OVERFLOW\");\r\n\r\n    return c; \r\n  }\r\n\r\n  /**\r\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n   * reverts when dividing by zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath#mod: DIVISION_BY_ZERO\");\r\n    return a % b;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @dev ERC-1155 interface for accepting safe transfers.\r\n */\r\ninterface IERC1155TokenReceiver {\r\n\r\n  /**\r\n   * @notice Handle the receipt of a single ERC1155 token type\r\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\r\n   * This function MAY throw to revert and reject the transfer\r\n   * Return of other amount than the magic value MUST result in the transaction being reverted\r\n   * Note: The token contract address is always the message sender\r\n   * @param _operator  The address which called the `safeTransferFrom` function\r\n   * @param _from      The address which previously owned the token\r\n   * @param _id        The id of the token being transferred\r\n   * @param _amount    The amount of tokens being transferred\r\n   * @param _data      Additional data with no specified format\r\n   * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n   */\r\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\r\n\r\n  /**\r\n   * @notice Handle the receipt of multiple ERC1155 token types\r\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\r\n   * This function MAY throw to revert and reject the transfer\r\n   * Return of other amount than the magic value WILL result in the transaction being reverted\r\n   * Note: The token contract address is always the message sender\r\n   * @param _operator  The address which called the `safeBatchTransferFrom` function\r\n   * @param _from      The address which previously owned the token\r\n   * @param _ids       An array containing ids of each token being transferred\r\n   * @param _amounts   An array containing amounts of each token being transferred\r\n   * @param _data      Additional data with no specified format\r\n   * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n   */\r\n  function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\r\n\r\n  /**\r\n   * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\r\n   * @param  interfaceID The ERC-165 interface ID that is queried for support.s\r\n   * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\r\n   *      This function MUST NOT consume more than 5,000 gas.\r\n   * @return Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported.\r\n   */\r\n  function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n\r\n}\r\n\r\ninterface IERC1155 {\r\n  // Events\r\n\r\n  /**\r\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\r\n   *   Operator MUST be msg.sender\r\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\r\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\r\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\r\n   *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\r\n   */\r\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\r\n\r\n  /**\r\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\r\n   *   Operator MUST be msg.sender\r\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\r\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\r\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\r\n   *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\r\n   */\r\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\r\n\r\n  /**\r\n   * @dev MUST emit when an approval is updated\r\n   */\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n  /**\r\n   * @dev MUST emit when the URI is updated for a token ID\r\n   *   URIs are defined in RFC 3986\r\n   *   The URI MUST point a JSON file that conforms to the \"ERC-1155 Metadata JSON Schema\"\r\n   */\r\n  event URI(string _amount, uint256 indexed _id);\r\n\r\n  /**\r\n   * @notice Transfers amount of an _id from the _from address to the _to address specified\r\n   * @dev MUST emit TransferSingle event on success\r\n   * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\r\n   * MUST throw if `_to` is the zero address\r\n   * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\r\n   * MUST throw on any other error\r\n   * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n   * @param _from    Source address\r\n   * @param _to      Target address\r\n   * @param _id      ID of the token type\r\n   * @param _amount  Transfered amount\r\n   * @param _data    Additional data with no specified format, sent in call to `_to`\r\n   */\r\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\r\n\r\n  /**\r\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n   * @dev MUST emit TransferBatch event on success\r\n   * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\r\n   * MUST throw if `_to` is the zero address\r\n   * MUST throw if length of `_ids` is not the same as length of `_amounts`\r\n   * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\r\n   * MUST throw on any other error\r\n   * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n   * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\r\n   * @param _from     Source addresses\r\n   * @param _to       Target addresses\r\n   * @param _ids      IDs of each token type\r\n   * @param _amounts  Transfer amounts per token type\r\n   * @param _data     Additional data with no specified format, sent in call to `_to`\r\n  */\r\n  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\r\n  \r\n  /**\r\n   * @notice Get the balance of an account's Tokens\r\n   * @param _owner  The address of the token holder\r\n   * @param _id     ID of the Token\r\n   * @return        The _owner's balance of the Token type requested\r\n   */\r\n  function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the balance of multiple account/token pairs\r\n   * @param _owners The addresses of the token holders\r\n   * @param _ids    ID of the Tokens\r\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n   */\r\n  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\r\n\r\n  /**\r\n   * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\r\n   * @dev MUST emit the ApprovalForAll event on success\r\n   * @param _operator  Address to add to the set of authorized operators\r\n   * @param _approved  True if the operator is approved, false to revoke approval\r\n   */\r\n  function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n  /**\r\n   * @notice Queries the approval status of an operator for a given owner\r\n   * @param _owner     The owner of the Tokens\r\n   * @param _operator  Address of authorized operator\r\n   * @return           True if the operator is approved, false if not\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\r\n\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call.value(value)(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of Multi-Token Standard contract\r\n */\r\ncontract ERC1155 is IERC165 {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n\r\n  /***********************************|\r\n  |        Variables and Events       |\r\n  |__________________________________*/\r\n\r\n  // onReceive function signatures\r\n  bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\r\n  bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\r\n\r\n  // Objects balances\r\n  mapping (address => mapping(uint256 => uint256)) internal balances;\r\n\r\n  // Operator Functions\r\n  mapping (address => mapping(address => bool)) internal operators;\r\n\r\n  // Events\r\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\r\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n  event URI(string _uri, uint256 indexed _id);\r\n\r\n\r\n  /***********************************|\r\n  |     Public Transfer Functions     |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n   * @param _from    Source address\r\n   * @param _to      Target address\r\n   * @param _id      ID of the token type\r\n   * @param _amount  Transfered amount\r\n   * @param _data    Additional data with no specified format, sent in call to `_to`\r\n   */\r\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\r\n    public\r\n  {\r\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeTransferFrom: INVALID_OPERATOR\");\r\n    require(_to != address(0),\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\");\r\n    // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\r\n\r\n    _safeTransferFrom(_from, _to, _id, _amount);\r\n    _callonERC1155Received(_from, _to, _id, _amount, _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n   * @param _from     Source addresses\r\n   * @param _to       Target addresses\r\n   * @param _ids      IDs of each token type\r\n   * @param _amounts  Transfer amounts per token type\r\n   * @param _data     Additional data with no specified format, sent in call to `_to`\r\n   */\r\n  function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\r\n    public\r\n  {\r\n    // Requirements\r\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\");\r\n    require(_to != address(0), \"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\");\r\n\r\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\r\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |    Internal Transfer Functions    |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n   * @param _from    Source address\r\n   * @param _to      Target address\r\n   * @param _id      ID of the token type\r\n   * @param _amount  Transfered amount\r\n   */\r\n  function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount)\r\n    internal\r\n  {\r\n    // Update balances\r\n    balances[_from][_id] = balances[_from][_id].sub(_amount); // Subtract amount\r\n    balances[_to][_id] = balances[_to][_id].add(_amount);     // Add amount\r\n\r\n    // Emit event\r\n    emit TransferSingle(msg.sender, _from, _to, _id, _amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\r\n   */\r\n  function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\r\n    internal\r\n  {\r\n    // Check if recipient is contract\r\n    if (_to.isContract()) {\r\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received(msg.sender, _from, _id, _amount, _data);\r\n      require(retval == ERC1155_RECEIVED_VALUE, \"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n   * @param _from     Source addresses\r\n   * @param _to       Target addresses\r\n   * @param _ids      IDs of each token type\r\n   * @param _amounts  Transfer amounts per token type\r\n   */\r\n  function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts)\r\n    internal\r\n  {\r\n    require(_ids.length == _amounts.length, \"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\");\r\n\r\n    // Number of transfer to execute\r\n    uint256 nTransfer = _ids.length;\r\n\r\n    // Executing all transfers\r\n    for (uint256 i = 0; i < nTransfer; i++) {\r\n      // Update storage balance of previous bin\r\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\r\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\r\n    }\r\n\r\n    // Emit event\r\n    emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\r\n  }\r\n\r\n  /**\r\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\r\n   */\r\n  function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\r\n    internal\r\n  {\r\n    // Pass data if recipient is contract\r\n    if (_to.isContract()) {\r\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived(msg.sender, _from, _ids, _amounts, _data);\r\n      require(retval == ERC1155_BATCH_RECEIVED_VALUE, \"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\");\r\n    }\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |         Operator Functions        |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\r\n   * @param _operator  Address to add to the set of authorized operators\r\n   * @param _approved  True if the operator is approved, false to revoke approval\r\n   */\r\n  function setApprovalForAll(address _operator, bool _approved)\r\n    external\r\n  {\r\n    // Update operator status\r\n    operators[msg.sender][_operator] = _approved;\r\n    emit ApprovalForAll(msg.sender, _operator, _approved);\r\n  }\r\n\r\n  /**\r\n   * @notice Queries the approval status of an operator for a given owner\r\n   * @param _owner     The owner of the Tokens\r\n   * @param _operator  Address of authorized operator\r\n   * @return True if the operator is approved, false if not\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool isOperator)\r\n  {\r\n    return operators[_owner][_operator];\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |         Balance Functions         |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Get the balance of an account's Tokens\r\n   * @param _owner  The address of the token holder\r\n   * @param _id     ID of the Token\r\n   * @return The _owner's balance of the Token type requested\r\n   */\r\n  function balanceOf(address _owner, uint256 _id)\r\n    public view returns (uint256)\r\n  {\r\n    return balances[_owner][_id];\r\n  }\r\n\r\n  /**\r\n   * @notice Get the balance of multiple account/token pairs\r\n   * @param _owners The addresses of the token holders\r\n   * @param _ids    ID of the Tokens\r\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n   */\r\n  function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\r\n    public view returns (uint256[] memory)\r\n  {\r\n    require(_owners.length == _ids.length, \"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\");\r\n\r\n    // Variables\r\n    uint256[] memory batchBalances = new uint256[](_owners.length);\r\n\r\n    // Iterate over each owner and token ID\r\n    for (uint256 i = 0; i < _owners.length; i++) {\r\n      batchBalances[i] = balances[_owners[i]][_ids[i]];\r\n    }\r\n\r\n    return batchBalances;\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |          ERC165 Functions         |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n   */\r\n  bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\r\n\r\n  /**\r\n   * INTERFACE_SIGNATURE_ERC1155 =\r\n   * bytes4(keccak256(\"safeTransferFrom(address,address,uint256,uint256,bytes)\")) ^\r\n   * bytes4(keccak256(\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\")) ^\r\n   * bytes4(keccak256(\"balanceOf(address,uint256)\")) ^\r\n   * bytes4(keccak256(\"balanceOfBatch(address[],uint256[])\")) ^\r\n   * bytes4(keccak256(\"setApprovalForAll(address,bool)\")) ^\r\n   * bytes4(keccak256(\"isApprovedForAll(address,address)\"));\r\n   */\r\n  bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\r\n   * @return `true` if the contract implements `_interfaceID` and\r\n   */\r\n  function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\r\n    if (_interfaceID == INTERFACE_SIGNATURE_ERC165 ||\r\n        _interfaceID == INTERFACE_SIGNATURE_ERC1155) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @notice Contract that handles metadata related methods.\r\n * @dev Methods assume a deterministic generation of URI based on token IDs.\r\n *      Methods also assume that URI uses hex representation of token IDs.\r\n */\r\ncontract ERC1155Metadata {\r\n\r\n  // URI's default URI prefix\r\n  string internal baseMetadataURI;\r\n  event URI(string _uri, uint256 indexed _id);\r\n\r\n\r\n  /***********************************|\r\n  |     Metadata Public Function s    |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice A distinct Uniform Resource Identifier (URI) for a given token.\r\n   * @dev URIs are defined in RFC 3986.\r\n   *      URIs are assumed to be deterministically generated based on token ID\r\n   *      Token IDs are assumed to be represented in their hex format in URIs\r\n   * @return URI string\r\n   */\r\n  function uri(uint256 _id) public view returns (string memory) {\r\n    return string(abi.encodePacked(baseMetadataURI, _uint2str(_id), \".json\"));\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |    Metadata Internal Functions    |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Will emit default URI log event for corresponding token _id\r\n   * @param _tokenIDs Array of IDs of tokens to log default URI\r\n   */\r\n  function _logURIs(uint256[] memory _tokenIDs) internal {\r\n    string memory baseURL = baseMetadataURI;\r\n    string memory tokenURI;\r\n\r\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\r\n      tokenURI = string(abi.encodePacked(baseURL, _uint2str(_tokenIDs[i]), \".json\"));\r\n      emit URI(tokenURI, _tokenIDs[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Will emit a specific URI log event for corresponding token\r\n   * @param _tokenIDs IDs of the token corresponding to the _uris logged\r\n   * @param _URIs    The URIs of the specified _tokenIDs\r\n   */\r\n  function _logURIs(uint256[] memory _tokenIDs, string[] memory _URIs) internal {\r\n    require(_tokenIDs.length == _URIs.length, \"ERC1155Metadata#_logURIs: INVALID_ARRAYS_LENGTH\");\r\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\r\n      emit URI(_URIs[i], _tokenIDs[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Will update the base URL of token's URI\r\n   * @param _newBaseMetadataURI New base URL of token's URI\r\n   */\r\n  function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {\r\n    baseMetadataURI = _newBaseMetadataURI;\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |    Utility Internal Functions     |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Convert uint256 to string\r\n   * @param _i Unsigned integer to convert to string\r\n   */\r\n  function _uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\r\n    if (_i == 0) {\r\n      return \"0\";\r\n    }\r\n\r\n    uint256 j = _i;\r\n    uint256 ii = _i;\r\n    uint256 len;\r\n\r\n    // Get number of bytes\r\n    while (j != 0) {\r\n      len++;\r\n      j /= 10;\r\n    }\r\n\r\n    bytes memory bstr = new bytes(len);\r\n    uint256 k = len - 1;\r\n\r\n    // Get each individual ASCII\r\n    while (ii != 0) {\r\n      bstr[k--] = byte(uint8(48 + ii % 10));\r\n      ii /= 10;\r\n    }\r\n\r\n    // Convert to string\r\n    return string(bstr);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\r\n *      a parent contract to be executed as they are `internal` functions\r\n */\r\ncontract ERC1155MintBurn is ERC1155 {\r\n\r\n\r\n  /****************************************|\r\n  |            Minting Functions           |\r\n  |_______________________________________*/\r\n\r\n  /**\r\n   * @notice Mint _amount of tokens of a given id\r\n   * @param _to      The address to mint tokens to\r\n   * @param _id      Token id to mint\r\n   * @param _amount  The amount to be minted\r\n   * @param _data    Data to pass if receiver is contract\r\n   */\r\n  function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data)\r\n    internal\r\n  {\r\n    // Add _amount\r\n    balances[_to][_id] = balances[_to][_id].add(_amount);\r\n\r\n    // Emit event\r\n    emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\r\n\r\n    // Calling onReceive method if recipient is contract\r\n    _callonERC1155Received(address(0x0), _to, _id, _amount, _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Mint tokens for each ids in _ids\r\n   * @param _to       The address to mint tokens to\r\n   * @param _ids      Array of ids to mint\r\n   * @param _amounts  Array of amount of tokens to mint per id\r\n   * @param _data    Data to pass if receiver is contract\r\n   */\r\n  function _batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\r\n    internal\r\n  {\r\n    require(_ids.length == _amounts.length, \"ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH\");\r\n\r\n    // Number of mints to execute\r\n    uint256 nMint = _ids.length;\r\n\r\n     // Executing all minting\r\n    for (uint256 i = 0; i < nMint; i++) {\r\n      // Update storage balance\r\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\r\n    }\r\n\r\n    // Emit batch mint event\r\n    emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\r\n\r\n    // Calling onReceive method if recipient is contract\r\n    _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, _data);\r\n  }\r\n\r\n\r\n  /****************************************|\r\n  |            Burning Functions           |\r\n  |_______________________________________*/\r\n\r\n  /**\r\n   * @notice Burn _amount of tokens of a given token id\r\n   * @param _from    The address to burn tokens from\r\n   * @param _id      Token id to burn\r\n   * @param _amount  The amount to be burned\r\n   */\r\n  function _burn(address _from, uint256 _id, uint256 _amount)\r\n    internal\r\n  {\r\n    //Substract _amount\r\n    balances[_from][_id] = balances[_from][_id].sub(_amount);\r\n\r\n    // Emit event\r\n    emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\r\n   * @param _from     The address to burn tokens from\r\n   * @param _ids      Array of token ids to burn\r\n   * @param _amounts  Array of the amount to be burned\r\n   */\r\n  function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts)\r\n    internal\r\n  {\r\n    require(_ids.length == _amounts.length, \"ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH\");\r\n\r\n    // Number of mints to execute\r\n    uint256 nBurn = _ids.length;\r\n\r\n     // Executing all minting\r\n    for (uint256 i = 0; i < nBurn; i++) {\r\n      // Update storage balance\r\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\r\n    }\r\n\r\n    // Emit batch mint event\r\n    emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\r\n  }\r\n\r\n}\r\n\r\nlibrary Strings {\r\n\t// via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\n\tfunction strConcat(\r\n\t\tstring memory _a,\r\n\t\tstring memory _b,\r\n\t\tstring memory _c,\r\n\t\tstring memory _d,\r\n\t\tstring memory _e\r\n\t) internal pure returns (string memory) {\r\n\t\tbytes memory _ba = bytes(_a);\r\n\t\tbytes memory _bb = bytes(_b);\r\n\t\tbytes memory _bc = bytes(_c);\r\n\t\tbytes memory _bd = bytes(_d);\r\n\t\tbytes memory _be = bytes(_e);\r\n\t\tstring memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n\t\tbytes memory babcde = bytes(abcde);\r\n\t\tuint256 k = 0;\r\n\t\tfor (uint256 i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n\t\tfor (uint256 i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n\t\tfor (uint256 i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n\t\tfor (uint256 i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n\t\tfor (uint256 i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n\t\treturn string(babcde);\r\n\t}\r\n\r\n\tfunction strConcat(\r\n\t\tstring memory _a,\r\n\t\tstring memory _b,\r\n\t\tstring memory _c,\r\n\t\tstring memory _d\r\n\t) internal pure returns (string memory) {\r\n\t\treturn strConcat(_a, _b, _c, _d, \"\");\r\n\t}\r\n\r\n\tfunction strConcat(\r\n\t\tstring memory _a,\r\n\t\tstring memory _b,\r\n\t\tstring memory _c\r\n\t) internal pure returns (string memory) {\r\n\t\treturn strConcat(_a, _b, _c, \"\", \"\");\r\n\t}\r\n\r\n\tfunction strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\r\n\t\treturn strConcat(_a, _b, \"\", \"\", \"\");\r\n\t}\r\n\r\n\tfunction uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\r\n\t\tif (_i == 0) {\r\n\t\t\treturn \"0\";\r\n\t\t}\r\n\t\tuint256 j = _i;\r\n\t\tuint256 len;\r\n\t\twhile (j != 0) {\r\n\t\t\tlen++;\r\n\t\t\tj /= 10;\r\n\t\t}\r\n\t\tbytes memory bstr = new bytes(len);\r\n\t\tuint256 k = len - 1;\r\n\t\twhile (_i != 0) {\r\n\t\t\tbstr[k--] = bytes1(uint8(48 + (_i % 10)));\r\n\t\t\t_i /= 10;\r\n\t\t}\r\n\t\treturn string(bstr);\r\n\t}\r\n}\r\n\r\ncontract OwnableDelegateProxy {}\r\n\r\ncontract ProxyRegistry {\r\n\tmapping(address => OwnableDelegateProxy) public proxies;\r\n}\r\n\r\n/**\r\n * @title ERC1155Tradable\r\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address, \r\n * has create and mint functionality, and supports useful standards from OpenZeppelin,\r\n  like _exists(), name(), symbol(), and totalSupply()\r\n */\r\ncontract ERC1155Tradable is ERC1155, ERC1155MintBurn, ERC1155Metadata, Ownable, MinterRole, WhitelistAdminRole {\r\n\tusing Strings for string;\r\n\r\n\taddress proxyRegistryAddress;\r\n\tuint256 private _currentTokenID = 0;\r\n\tmapping(uint256 => address) public creators;\r\n\tmapping(uint256 => uint256) public tokenSupply;\r\n\tmapping(uint256 => uint256) public tokenMaxSupply;\r\n\t// Contract name\r\n\tstring public name;\r\n\t// Contract symbol\r\n\tstring public symbol;\r\n\r\n    mapping(uint256 => string) private uris;\r\n\r\n    bool private constructed = false;\r\n\r\n    function init(\r\n\t\tstring memory _name,\r\n\t\tstring memory _symbol,\r\n\t\taddress _proxyRegistryAddress\r\n\t) public {\r\n\t    \r\n\t    require(!constructed, \"ERC155 Tradeable must not be constructed yet\");\r\n\t    \r\n\t    constructed = true;\r\n\t    \r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\tproxyRegistryAddress = _proxyRegistryAddress;\r\n\t\t\r\n\t\tsuper.initOwnable();\r\n\t\tsuper.initMinter();\r\n\t\tsuper.initWhiteListAdmin();\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tstring memory _name,\r\n\t\tstring memory _symbol,\r\n\t\taddress _proxyRegistryAddress\r\n\t) public {\r\n\t    constructed = true;\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\tproxyRegistryAddress = _proxyRegistryAddress;\r\n\t}\r\n\r\n\tfunction removeWhitelistAdmin(address account) public onlyOwner {\r\n\t\t_removeWhitelistAdmin(account);\r\n\t}\r\n\r\n\tfunction removeMinter(address account) public onlyOwner {\r\n\t\t_removeMinter(account);\r\n\t}\r\n\r\n\tfunction uri(uint256 _id) public view returns (string memory) {\r\n\t\trequire(_exists(_id), \"ERC721Tradable#uri: NONEXISTENT_TOKEN\");\r\n\t\t//return super.uri(_id);\r\n\t\t\r\n\t\tif(bytes(uris[_id]).length > 0){\r\n\t\t    return uris[_id];\r\n\t\t}\r\n\t\treturn Strings.strConcat(baseMetadataURI, Strings.uint2str(_id));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the total quantity for a token ID\r\n\t * @param _id uint256 ID of the token to query\r\n\t * @return amount of token in existence\r\n\t */\r\n\tfunction totalSupply(uint256 _id) public view returns (uint256) {\r\n\t\treturn tokenSupply[_id];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the max quantity for a token ID\r\n\t * @param _id uint256 ID of the token to query\r\n\t * @return amount of token in existence\r\n\t */\r\n\tfunction maxSupply(uint256 _id) public view returns (uint256) {\r\n\t\treturn tokenMaxSupply[_id];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Will update the base URL of token's URI\r\n\t * @param _newBaseMetadataURI New base URL of token's URI\r\n\t */\r\n\tfunction setBaseMetadataURI(string memory _newBaseMetadataURI) public onlyWhitelistAdmin {\r\n\t\t_setBaseMetadataURI(_newBaseMetadataURI);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Creates a new token type and assigns _initialSupply to an address\r\n\t * @param _maxSupply max supply allowed\r\n\t * @param _initialSupply Optional amount to supply the first owner\r\n\t * @param _uri Optional URI for this token type\r\n\t * @param _data Optional data to pass if receiver is contract\r\n\t * @return The newly created token ID\r\n\t */\r\n\tfunction create(\r\n\t\tuint256 _maxSupply,\r\n\t\tuint256 _initialSupply,\r\n\t\tstring calldata _uri,\r\n\t\tbytes calldata _data\r\n\t) external onlyWhitelistAdmin returns (uint256 tokenId) {\r\n\t\trequire(_initialSupply <= _maxSupply, \"Initial supply cannot be more than max supply\");\r\n\t\tuint256 _id = _getNextTokenID();\r\n\t\t_incrementTokenTypeId();\r\n\t\tcreators[_id] = msg.sender;\r\n\r\n\t\tif (bytes(_uri).length > 0) {\r\n\t\t    uris[_id] = _uri;\r\n\t\t\temit URI(_uri, _id);\r\n\t\t}\r\n\t\telse{\r\n\t\t    emit URI(string(abi.encodePacked(baseMetadataURI, _uint2str(_id), \".json\")), _id);\r\n\t\t}\r\n\r\n\t\tif (_initialSupply != 0) _mint(msg.sender, _id, _initialSupply, _data);\r\n\t\ttokenSupply[_id] = _initialSupply;\r\n\t\ttokenMaxSupply[_id] = _maxSupply;\r\n\t\treturn _id;\r\n\t}\r\n\t\r\n\tfunction updateUri(uint256 _id, string calldata _uri) external onlyWhitelistAdmin{\r\n\t    if (bytes(_uri).length > 0) {\r\n\t\t    uris[_id] = _uri;\r\n\t\t\temit URI(_uri, _id);\r\n\t\t}\r\n\t\telse{\r\n\t\t    emit URI(string(abi.encodePacked(baseMetadataURI, _uint2str(_id), \".json\")), _id);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction burn(address _address, uint256 _id, uint256 _amount) external {\r\n\t    require((msg.sender == _address) || isApprovedForAll(_address, msg.sender), \"ERC1155#burn: INVALID_OPERATOR\");\r\n\t    require(balances[_address][_id] >= _amount, \"Trying to burn more tokens than you own\");\r\n\t    _burn(_address, _id, _amount);\r\n\t}\r\n\t\r\n\tfunction updateProxyRegistryAddress(address _proxyRegistryAddress) external onlyWhitelistAdmin{\r\n\t    require(_proxyRegistryAddress != address(0), \"No zero address\");\r\n\t    proxyRegistryAddress = _proxyRegistryAddress;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Mints some amount of tokens to an address\r\n\t * @param _id          Token ID to mint\r\n\t * @param _quantity    Amount of tokens to mint\r\n\t * @param _data        Data to pass if receiver is contract\r\n\t */\r\n\tfunction mint(\r\n\t\tuint256 _id,\r\n\t\tuint256 _quantity,\r\n\t\tbytes memory _data\r\n\t) public onlyMinter {\r\n\t\tuint256 tokenId = _id;\r\n\t\trequire(tokenSupply[tokenId].add(_quantity) <= tokenMaxSupply[tokenId], \"Max supply reached\");\r\n\t\t_mint(msg.sender, _id, _quantity, _data);\r\n\t\ttokenSupply[_id] = tokenSupply[_id].add(_quantity);\r\n\t}\r\n\r\n\t/**\r\n\t * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\r\n\t */\r\n\t /*\r\n\tfunction isApprovedForAll(address _owner, address _operator) public view returns (bool isOperator) {\r\n\t\t// Whitelist OpenSea proxy contract for easy trading.\r\n\t\tProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\r\n\t\tif (address(proxyRegistry.proxies(_owner)) == _operator) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn ERC1155.isApprovedForAll(_owner, _operator);\r\n\t}*/\r\n\r\n\t/**\r\n\t * @dev Returns whether the specified token exists by checking to see if it has a creator\r\n\t * @param _id uint256 ID of the token to query the existence of\r\n\t * @return bool whether the token exists\r\n\t */\r\n\tfunction _exists(uint256 _id) internal view returns (bool) {\r\n\t\treturn creators[_id] != address(0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev calculates the next token ID based on value of _currentTokenID\r\n\t * @return uint256 for the next token ID\r\n\t */\r\n\tfunction _getNextTokenID() private view returns (uint256) {\r\n\t\treturn _currentTokenID.add(1);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev increments the value of _currentTokenID\r\n\t */\r\n\tfunction _incrementTokenTypeId() private {\r\n\t\t_currentTokenID++;\r\n\t}\r\n}\r\n\r\n/**\r\n * @title Unifty\r\n * Unifty - NFT Tools\r\n * \r\n * Rinkeby Opensea: 0xf57b2c51ded3a29e6891aba85459d600256cf317 \r\n * Mainnet Opensea: 0xa5409ec958c83c3f309868babaca7c86dcb077c1\r\n */\r\ncontract Unifty is ERC1155Tradable {\r\n    \r\n    string private _contractURI = \"https://unifty.io/meta/contract.json\";\r\n    \r\n\tconstructor(address _proxyRegistryAddress) public ERC1155Tradable(\"Unifty\", \"UNIF\", _proxyRegistryAddress) {\r\n\t\t_setBaseMetadataURI(\"https://unifty.io/meta/\");\r\n\t}\r\n\r\n\tfunction contractURI() public view returns (string memory) {\r\n\t\treturn _contractURI;\r\n\t}\r\n\t\r\n\tfunction setContractURI(string memory _uri) public onlyWhitelistAdmin{\r\n\t    _contractURI = _uri;\r\n\t}\r\n\t\r\n\tfunction version() external pure returns (uint256) {\r\n\t\treturn 1;\r\n\t}\r\n\t\r\n}\r\n\r\n\r\ncontract PauserRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    function initPauserRole() internal{\r\n        _addPauser(_msgSender());\r\n    }\r\n\r\n    constructor () internal {\r\n        _addPauser(_msgSender());\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\ncontract Pausable is Context, PauserRole {\r\n\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ncontract Wrap {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;\r\n\tIERC20 public token;\r\n\r\n\tconstructor(IERC20 _tokenAddress) public {\r\n\t\ttoken = IERC20(_tokenAddress);\r\n\t}\r\n\r\n\tuint256 private _totalSupply;\r\n\tmapping(address => uint256) private _balances;\r\n\r\n\tfunction totalSupply() external view returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction stake(uint256 amount) public {\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\t\t_balances[msg.sender] = _balances[msg.sender].add(amount);\r\n\t\tIERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n\t}\r\n\r\n\tfunction withdraw(uint256 amount) public {\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\t_balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n\t\tIERC20(token).safeTransfer(msg.sender, amount);\r\n\t}\r\n\r\n\tfunction _rescueScore(address account) internal {\r\n\t\tuint256 amount = _balances[account];\r\n\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\t_balances[account] = _balances[account].sub(amount);\r\n\t\tIERC20(token).safeTransfer(account, amount);\r\n\t}\r\n}\r\n\r\ninterface DetailedERC20 {\r\n    \r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\ncontract UniftyFarm is Wrap, Ownable, Pausable, CloneFactory, WhitelistAdminRole {\r\n\tusing SafeMath for uint256;\r\n\r\n\tstruct Card {\r\n\t\tuint256 points;\r\n\t\tuint256 releaseTime;\r\n\t\tuint256 mintFee;\r\n\t\tuint256 controllerFee;\r\n\t\taddress artist;\r\n\t\taddress erc1155;\r\n\t\tbool nsfw;\r\n\t\tbool shadowed;\r\n\t\tuint256 supply;\r\n\t}\r\n\t\r\n\taddress public nifAddress = address(0x93fEB07f2823600DD3b9EFFd9356de10C387d9d7);\r\n\taddress payable public feeAddress = address(0x2989018B83436C6bBa00144A8277fd859cdafA7D);\r\n    uint256 public farmFee = 1250000000000000000;\r\n    uint256 public farmFeeMinimumNif = 5000 * 10**18;\r\n    uint256[] public wildcards;\r\n    ERC1155Tradable public wildcardErc1155Address;\r\n\tbool public isCloned = false;\r\n    mapping(address => address[]) public farms;\r\n    bool public constructed = false;\r\n    \r\n    bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\r\n    bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\r\n    bytes4 constant internal ERC1155_RECEIVED_ERR_VALUE = 0x0;\r\n    \r\n\tuint256 public periodStart;\r\n\tuint256 public minStake;\r\n\tuint256 public maxStake;\r\n\tuint256 public rewardRate = 86400; // 1 point per day per staked token, multiples of this lowers time per staked token\r\n\tuint256 public totalFeesCollected;\r\n\tuint256 public spentScore;\r\n\taddress public rescuer;\r\n\taddress public controller;\r\n\r\n\tmapping(address => uint256) public pendingWithdrawals;\r\n\tmapping(address => uint256) public lastUpdateTime;\r\n\tmapping(address => uint256) public points;\r\n\tmapping(address => mapping ( uint256 => Card ) ) public cards;\r\n\r\n\tevent CardAdded(address indexed erc1155, uint256 indexed card, uint256 points, uint256 mintFee, address indexed artist, uint256 releaseTime);\r\n\tevent CardType(address indexed erc1155, uint256 indexed card, string indexed cardType);\r\n\tevent CardShadowed(address indexed erc1155, uint256 indexed card, bool indexed shadowed);\r\n\tevent Removed(address indexed erc1155, uint256 indexed card, address indexed recipient, uint256 amount);\r\n\tevent Staked(address indexed user, uint256 amount);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent Redeemed(address indexed user, address indexed erc1155, uint256 indexed id, uint256 amount);\r\n\tevent RescueRedeemed(address indexed user, uint256 amount);\r\n\tevent FarmCreated(address indexed user, address indexed farm, uint256 fee, string uri);\r\n\tevent FarmUri(address indexed farm, string uri);\r\n\r\n\tmodifier updateReward(address account) {\r\n\t\tif (account != address(0)) {\r\n\t\t\tpoints[account] = earned(account);\r\n\t\t\tlastUpdateTime[account] = block.timestamp;\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tuint256 _periodStart,\r\n\t\tuint256 _minStake,\r\n\t\tuint256 _maxStake,\r\n\t\taddress _controller,\r\n\t\tIERC20 _tokenAddress,\r\n\t\tstring memory _uri\r\n\t) public Wrap(_tokenAddress) {\r\n\t    require(_minStake >= 0 && _maxStake > 0 && _maxStake >= _minStake, \"Problem with min and max stake setup\");\r\n\t    constructed = true;\r\n\t\tperiodStart = _periodStart;\r\n\t\tminStake = _minStake;\r\n\t\tmaxStake = _maxStake;\r\n\t\tcontroller = _controller;\r\n\t\temit FarmCreated(msg.sender, address(this), 0, _uri);\r\n\t    emit FarmUri(address(this), _uri);\r\n\t}\r\n\r\n\tfunction cardMintFee(address erc1155Address, uint256 id) external view returns (uint256) {\r\n\t\treturn cards[erc1155Address][id].mintFee.add(cards[erc1155Address][id].controllerFee);\r\n\t}\r\n\r\n\tfunction cardReleaseTime(address erc1155Address, uint256 id) external view returns (uint256) {\r\n\t\treturn cards[erc1155Address][id].releaseTime;\r\n\t}\r\n\r\n\tfunction cardPoints(address erc1155Address, uint256 id) external view returns (uint256) {\r\n\t\treturn cards[erc1155Address][id].points;\r\n\t}\r\n\r\n\tfunction earned(address account) public view returns (uint256) {\r\n\t\t\r\n\t\tuint256 decimals = DetailedERC20(address(token)).decimals();\r\n\t\tuint256 pow = 1;\r\n\r\n        for(uint256 i = 0; i < decimals; i++){\r\n            pow = pow.mul(10);\r\n        }\r\n\t\t\r\n\t\treturn points[account].add(\r\n\t\t    getCurrPoints(account, pow)\r\n\t    );\r\n\t}\r\n\t\r\n\tfunction getCurrPoints(address account, uint256 pow) internal view returns(uint256){\r\n\t    uint256 blockTime = block.timestamp;\r\n\t    return blockTime.sub(lastUpdateTime[account]).mul(pow).div(rewardRate).mul(balanceOf(account)).div(pow);\r\n\t}\r\n\t\r\n\tfunction setRewardRate(uint256 _rewardRate) external onlyWhitelistAdmin{\r\n\t    require(_rewardRate > 0, \"Reward rate too low\");\r\n\t    rewardRate = _rewardRate;\r\n\t}\r\n\t\r\n\tfunction setMinMaxStake(uint256 _minStake, uint256 _maxStake) external onlyWhitelistAdmin{\r\n\t    require(_minStake >= 0 && _maxStake > 0 && _maxStake >= _minStake, \"Problem with min and max stake setup\");\r\n\t    minStake = _minStake;\r\n\t    maxStake = _maxStake;\r\n\t}\r\n\t\r\n\tfunction stake(uint256 amount) public updateReward(msg.sender) whenNotPaused() {\r\n\t\trequire(block.timestamp >= periodStart, \"Pool not open\");\r\n\t\trequire(amount.add(balanceOf(msg.sender)) >= minStake && amount.add(balanceOf(msg.sender)) > 0, \"Too few deposit\");\r\n\t\trequire(amount.add(balanceOf(msg.sender)) <= maxStake, \"Deposit limit reached\");\r\n\r\n\t\tsuper.stake(amount);\r\n\t\temit Staked(msg.sender, amount);\r\n\t}\r\n\r\n\tfunction withdraw(uint256 amount) public updateReward(msg.sender) {\r\n\t\trequire(amount > 0, \"Cannot withdraw 0\");\r\n\r\n\t\tsuper.withdraw(amount);\r\n\t\temit Withdrawn(msg.sender, amount);\r\n\t}\r\n\r\n\tfunction exit() external {\r\n\t\twithdraw(balanceOf(msg.sender));\r\n\t}\r\n\r\n\tfunction redeem(address erc1155Address, uint256 id) external payable updateReward(msg.sender) {\r\n\t\trequire(cards[erc1155Address][id].points != 0, \"Card not found\");\r\n\t\trequire(block.timestamp >= cards[erc1155Address][id].releaseTime, \"Card not released\");\r\n\t\trequire(points[msg.sender] >= cards[erc1155Address][id].points, \"Redemption exceeds point balance\");\r\n\t\t\r\n\t\tuint256 fees = cards[erc1155Address][id].mintFee.add( cards[erc1155Address][id].controllerFee );\r\n\t\t\r\n        // wildcards and nif passes disabled in clones\r\n        bool enableFees = fees > 0;\r\n        \r\n        if(!isCloned){\r\n            uint256 nifBalance = IERC20(nifAddress).balanceOf(msg.sender);\r\n            if(nifBalance >= farmFeeMinimumNif || iHaveAnyWildcard()){\r\n                enableFees = false;\r\n                fees = 0;\r\n            }\r\n        }\r\n        \r\n        require(msg.value == fees, \"Send the proper ETH for the fees\");\r\n\r\n\t\tif (enableFees) {\r\n\t\t\ttotalFeesCollected = totalFeesCollected.add(fees);\r\n\t\t\tpendingWithdrawals[controller] = pendingWithdrawals[controller].add( cards[erc1155Address][id].controllerFee );\r\n\t\t\tpendingWithdrawals[cards[erc1155Address][id].artist] = pendingWithdrawals[cards[erc1155Address][id].artist].add( cards[erc1155Address][id].mintFee );\r\n\t\t}\r\n\r\n\t\tpoints[msg.sender] = points[msg.sender].sub(cards[erc1155Address][id].points);\r\n\t\tspentScore = spentScore.add(cards[erc1155Address][id].points);\r\n\t\t\r\n\t\tERC1155Tradable(cards[erc1155Address][id].erc1155).safeTransferFrom(address(this), msg.sender, id, 1, \"\");\r\n\t\t\r\n\t\temit Redeemed(msg.sender, cards[erc1155Address][id].erc1155, id, cards[erc1155Address][id].points);\r\n\t}\r\n\r\n\tfunction rescueScore(address account) external updateReward(account) returns (uint256) {\r\n\t\trequire(msg.sender == rescuer, \"!rescuer\");\r\n\t\tuint256 earnedPoints = points[account];\r\n\t\tspentScore = spentScore.add(earnedPoints);\r\n\t\tpoints[account] = 0;\r\n\r\n\t\tif (balanceOf(account) > 0) {\r\n\t\t\t_rescueScore(account);\r\n\t\t}\r\n\r\n\t\temit RescueRedeemed(account, earnedPoints);\r\n\t\treturn earnedPoints;\r\n\t}\r\n\r\n\tfunction setController(address _controller) external onlyWhitelistAdmin {\r\n\t\tuint256 amount = pendingWithdrawals[controller];\r\n\t\tpendingWithdrawals[controller] = 0;\r\n\t\tpendingWithdrawals[_controller] = pendingWithdrawals[_controller].add(amount);\r\n\t\tcontroller = _controller;\r\n\t}\r\n\r\n\tfunction setRescuer(address _rescuer) external onlyWhitelistAdmin {\r\n\t\trescuer = _rescuer;\r\n\t}\r\n\r\n\tfunction setControllerFee(address _erc1155Address, uint256 _id, uint256 _controllerFee) external onlyWhitelistAdmin {\r\n\t\tcards[_erc1155Address][_id].controllerFee = _controllerFee;\r\n\t}\r\n\t\r\n\tfunction setShadowed(address _erc1155Address, uint256 _id, bool _shadowed) external onlyWhitelistAdmin {\r\n\t\tcards[_erc1155Address][_id].shadowed = _shadowed;\r\n\t\temit CardShadowed(_erc1155Address, _id, _shadowed);\r\n\t}\r\n\t\r\n\tfunction emitFarmUri(string calldata _uri) external onlyWhitelistAdmin{\r\n\t    emit FarmUri(address(this), _uri);\r\n\t} \r\n\t\r\n\tfunction removeNfts(address _erc1155Address, uint256 _id, uint256 _amount, address _recipient) external onlyWhitelistAdmin{\r\n\t    \r\n\t    ERC1155Tradable(_erc1155Address).safeTransferFrom(address(this), _recipient, _id, _amount, \"\");\r\n\t    emit Removed(_erc1155Address, _id, _recipient, _amount);\r\n\t} \r\n\r\n\tfunction createNft(\r\n\t\tuint256 _supply,\r\n\t\tuint256 _points,\r\n\t\tuint256 _mintFee,\r\n\t\tuint256 _controllerFee,\r\n\t\taddress _artist,\r\n\t\tuint256 _releaseTime,\r\n\t\taddress _erc1155Address,\r\n\t\tstring calldata _uri,\r\n\t\tstring calldata _cardType\r\n\t) external onlyWhitelistAdmin returns (uint256) {\r\n\t\tuint256 tokenId = ERC1155Tradable(_erc1155Address).create(_supply, _supply, _uri, \"\");\r\n\t\trequire(tokenId > 0, \"ERC1155 create did not succeed\");\r\n        Card storage c = cards[_erc1155Address][tokenId];\r\n\t\tc.points = _points;\r\n\t\tc.releaseTime = _releaseTime;\r\n\t\tc.mintFee = _mintFee;\r\n\t\tc.controllerFee = _controllerFee;\r\n\t\tc.artist = _artist;\r\n\t\tc.erc1155 = _erc1155Address;\r\n\t\tc.supply = _supply;\r\n\t\temitCardAdded(_erc1155Address, tokenId, _points, _mintFee, _controllerFee, _artist, _releaseTime, _cardType);\r\n\t\treturn tokenId;\r\n\t}\r\n\t\r\n\tfunction addNfts(\r\n\t\tuint256 _points,\r\n\t\tuint256 _mintFee,\r\n\t\tuint256 _controllerFee,\r\n\t\taddress _artist,\r\n\t\tuint256 _releaseTime,\r\n\t\taddress _erc1155Address,\r\n\t\tuint256 _tokenId,\r\n\t\tstring calldata _cardType,\r\n\t\tuint256 _cardAmount\r\n\t) external onlyWhitelistAdmin returns (uint256) {\r\n\t\trequire(_tokenId > 0, \"Invalid token id\");\r\n\t\trequire(_cardAmount > 0, \"Invalid card amount\");\r\n\t\tCard storage c = cards[_erc1155Address][_tokenId];\r\n\t\tc.points = _points;\r\n\t\tc.releaseTime = _releaseTime;\r\n\t\tc.mintFee = _mintFee;\r\n\t\tc.controllerFee = _controllerFee;\r\n\t\tc.artist = _artist;\r\n\t\tc.erc1155 = _erc1155Address;\r\n\t\tc.supply = c.supply.add(_cardAmount);\r\n\t\tERC1155Tradable(_erc1155Address).safeTransferFrom(msg.sender, address(this), _tokenId, _cardAmount, \"\");\r\n\t\temitCardAdded(_erc1155Address, _tokenId, _points, _mintFee, _controllerFee, _artist, _releaseTime, _cardType);\r\n\t\treturn _tokenId;\r\n\t}\r\n\t\r\n\tfunction updateNftData(\r\n\t    address _erc1155Address, \r\n\t    uint256 _id,\r\n\t    uint256 _points,\r\n\t\tuint256 _mintFee,\r\n\t\tuint256 _controllerFee,\r\n\t\taddress _artist,\r\n\t\tuint256 _releaseTime,\r\n\t\tbool _nsfw,\r\n\t\tbool _shadowed,\r\n\t\tstring calldata _cardType\r\n    ) external onlyWhitelistAdmin{\r\n        require(_id > 0, \"Invalid token id\");\r\n\t    Card storage c = cards[_erc1155Address][_id];\r\n\t\tc.points = _points;\r\n\t\tc.releaseTime = _releaseTime;\r\n\t\tc.mintFee = _mintFee;\r\n\t\tc.controllerFee = _controllerFee;\r\n\t\tc.artist = _artist;\r\n\t\tc.nsfw = _nsfw;\r\n\t\tc.shadowed = _shadowed;\r\n\t\temit CardType(_erc1155Address, _id, _cardType);\r\n\t}\r\n\t\r\n\tfunction supply(address _erc1155Address, uint256 _id) external view returns (uint256){\r\n\t    return cards[_erc1155Address][_id].supply;\r\n\t}\r\n\t\r\n\tfunction emitCardAdded(address _erc1155Address, uint256 tokenId, uint256 _points, uint256 _mintFee, uint256 _controllerFee, address _artist, uint256 _releaseTime, string memory _cardType) private onlyWhitelistAdmin{\r\n\t    emit CardAdded(_erc1155Address, tokenId, _points, _mintFee.add(_controllerFee), _artist, _releaseTime);\r\n\t\temit CardType(_erc1155Address, tokenId, _cardType);\r\n\t}\r\n\r\n\tfunction withdrawFee() external {\r\n\t\tuint256 amount = pendingWithdrawals[msg.sender];\r\n\t\trequire(amount > 0, \"nothing to withdraw\");\r\n\t\tpendingWithdrawals[msg.sender] = 0;\r\n\t\tmsg.sender.transfer(amount);\r\n\t}\r\n\t\r\n\tfunction getFarmsLength(address _address) external view returns (uint256) {\r\n\t    return farms[_address].length;\r\n\t}\r\n\t\r\n\tfunction onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4){\r\n\t    \r\n\t    if(ERC1155Tradable(_operator) == ERC1155Tradable(address(this))){\r\n\t    \r\n\t        return ERC1155_RECEIVED_VALUE;\r\n\t    \r\n\t    }\r\n\t    \r\n\t    return ERC1155_RECEIVED_ERR_VALUE;\r\n\t}\r\n\t\r\n\tfunction onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4){\r\n\t      \r\n        if(ERC1155Tradable(_operator) == ERC1155Tradable(address(this))){\r\n    \r\n            return ERC1155_BATCH_RECEIVED_VALUE;\r\n    \r\n        }\r\n    \r\n        return ERC1155_RECEIVED_ERR_VALUE;\r\n    }\r\n\t\r\n\t/**\r\n\t * Cloning functions\r\n\t * Disabled in clones and only working in the genesis contract.\r\n\t * */\r\n\t function init( \r\n\t    uint256 _periodStart,\r\n\t    uint256 _minStake,\r\n\t\tuint256 _maxStake,\r\n\t\taddress _controller,\r\n\t\tIERC20 _tokenAddress,\r\n\t\tstring calldata _uri,\r\n\t\taddress _creator\r\n\t) external {\r\n\t    require(!constructed && !isCloned, \"UniftyFarm must not be constructed yet or cloned.\");\r\n\t    require(_minStake >= 0 && _maxStake > 0 && _maxStake >= _minStake, \"Problem with min and max stake setup\");\r\n\t    \r\n\t    rewardRate = 86400;\r\n\t    \r\n\t    periodStart = _periodStart;\r\n\t    minStake = _minStake;\r\n\t\tmaxStake = _maxStake;\r\n\t\tcontroller = _controller;\r\n\t\ttoken = _tokenAddress;\r\n\t    \r\n\t\tsuper.initOwnable();\r\n\t\tsuper.initWhiteListAdmin();\r\n\t\tsuper.initPauserRole();\r\n\t\t\r\n\t\temit FarmCreated(_creator, address(this), 0, _uri);\r\n\t    emit FarmUri(address(this), _uri);\r\n\t}\r\n\t\r\n\t function newFarm(\r\n\t    uint256 _periodStart,\r\n\t    uint256 _minStake,\r\n\t\tuint256 _maxStake,\r\n\t\taddress _controller,\r\n\t\tIERC20 _tokenAddress,\r\n\t\tstring calldata _uri\r\n    ) external payable {\r\n\t    \r\n\t    require(!isCloned, \"Not callable from clone\");\r\n\t    \r\n\t    uint256 nifBalance = IERC20(nifAddress).balanceOf(msg.sender);\r\n\t    if(nifBalance < farmFeeMinimumNif && !iHaveAnyWildcard()){\r\n\t        require(msg.value == farmFee, \"Invalid farm fee\");\r\n\t    }\r\n\t    \r\n\t    address clone = createClone(address(this));\r\n\t    \r\n\t    UniftyFarm(clone).init(_periodStart, _minStake, _maxStake, _controller, _tokenAddress, _uri, msg.sender);\r\n\t    UniftyFarm(clone).setCloned();\r\n\t    UniftyFarm(clone).addWhitelistAdmin(msg.sender);\r\n\t    UniftyFarm(clone).addPauser(msg.sender);\r\n\t    UniftyFarm(clone).renounceWhitelistAdmin();\r\n\t    UniftyFarm(clone).renouncePauser();\r\n\t    UniftyFarm(clone).transferOwnership(msg.sender);\r\n\t    \r\n\t    farms[msg.sender].push(clone);\r\n\t    \r\n\t    // enough NIF or a wildcard? then there won't be no fee\r\n\t    if(nifBalance < farmFeeMinimumNif && !iHaveAnyWildcard()){\r\n\t        feeAddress.transfer(msg.value);\r\n\t    }\r\n\t    \r\n\t    emit FarmCreated(msg.sender, clone, nifBalance < farmFeeMinimumNif && !iHaveAnyWildcard() ? farmFee : 0, _uri);\r\n\t    emit FarmUri(clone, _uri);\r\n\t}\r\n\t\r\n\tfunction iHaveAnyWildcard() public view returns (bool){\r\n\t    for(uint256 i = 0; i < wildcards.length; i++){\r\n\t        if(wildcardErc1155Address.balanceOf(msg.sender, wildcards[i]) > 0){\r\n\t            return true;\r\n\t        }\r\n\t    }\r\n\t  \r\n\t    return false;\r\n\t}\r\n\t\r\n\tfunction setNifAddress(address _nifAddress) external onlyWhitelistAdmin {\r\n\t    require(!isCloned, \"Not callable from clone\");\r\n\t    nifAddress = _nifAddress;\r\n\t}\r\n\t\r\n\tfunction setFeeAddress(address payable _feeAddress) external onlyWhitelistAdmin {\r\n\t    require(!isCloned, \"Not callable from clone\");\r\n\t    feeAddress = _feeAddress;\r\n\t}\r\n\t\r\n\tfunction setFarmFee(uint256 _farmFee) external onlyWhitelistAdmin{\r\n\t    require(!isCloned, \"Not callable from clone\");\r\n\t    farmFee = _farmFee;\r\n\t}\r\n\t\r\n\tfunction setFarmFeeMinimumNif(uint256 _minNif) external onlyWhitelistAdmin{\r\n\t    require(!isCloned, \"Not callable from clone\");\r\n\t    farmFeeMinimumNif = _minNif;\r\n\t}\r\n\t\r\n\tfunction setCloned() external onlyWhitelistAdmin {\r\n\t    require(!isCloned, \"Not callable from clone\");\r\n\t    isCloned = true;\r\n\t}\r\n\t\r\n\tfunction setWildcard(uint256 wildcard) external onlyWhitelistAdmin {\r\n\t    require(!isCloned, \"Not callable from clone\");\r\n\t    wildcards.push(wildcard);\r\n\t}\r\n\t\r\n\tfunction setWildcardErc1155Address(ERC1155Tradable _address) external onlyWhitelistAdmin {\r\n\t    require(!isCloned, \"Not callable from clone\");\r\n\t    wildcardErc1155Address = _address;\r\n\t}\r\n\t\r\n\t\r\n\tfunction removeWildcard(uint256 wildcard) external onlyWhitelistAdmin {\r\n\t    require(!isCloned, \"Not callable from clone\");\r\n\t    uint256 tmp = wildcards[wildcards.length - 1];\r\n\t    bool found = false;\r\n\t    for(uint256 i = 0; i < wildcards.length; i++){\r\n\t        if(wildcards[i] == wildcard){\r\n\t            wildcards[i] = tmp;\r\n\t            found = true;\r\n\t            break;\r\n\t        }\r\n\t    }\r\n\t    if(found){\r\n\t        delete wildcards[wildcards.length - 1];\r\n\t        wildcards.length--;\r\n\t    }\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"card\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"CardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"card\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"shadowed\",\"type\":\"bool\"}],\"name\":\"CardShadowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"card\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"cardType\",\"type\":\"string\"}],\"name\":\"CardType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"FarmCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"FarmUri\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"card\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Removed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescueRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_artist\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc1155Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_cardType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_cardAmount\",\"type\":\"uint256\"}],\"name\":\"addNfts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cardMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cardPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cardReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"controllerFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"nsfw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shadowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"constructed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_artist\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc1155Address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_cardType\",\"type\":\"string\"}],\"name\":\"createNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"emitFarmUri\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"farmFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"farmFeeMinimumNif\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getFarmsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iHaveAnyWildcard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCloned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"newFarm\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nifAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"points\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc1155Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"removeNfts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wildcard\",\"type\":\"uint256\"}],\"name\":\"removeWildcard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rescueScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setCloned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc1155Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"}],\"name\":\"setControllerFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_farmFee\",\"type\":\"uint256\"}],\"name\":\"setFarmFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minNif\",\"type\":\"uint256\"}],\"name\":\"setFarmFeeMinimumNif\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxStake\",\"type\":\"uint256\"}],\"name\":\"setMinMaxStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nifAddress\",\"type\":\"address\"}],\"name\":\"setNifAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rescuer\",\"type\":\"address\"}],\"name\":\"setRescuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc1155Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_shadowed\",\"type\":\"bool\"}],\"name\":\"setShadowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wildcard\",\"type\":\"uint256\"}],\"name\":\"setWildcard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC1155Tradable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWildcardErc1155Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spentScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc1155Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc1155Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_artist\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_nsfw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shadowed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_cardType\",\"type\":\"string\"}],\"name\":\"updateNftData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wildcardErc1155Address\",\"outputs\":[{\"internalType\":\"contract ERC1155Tradable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wildcards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UniftyFarm", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010f0cf064dd592000000000000000000000000000003f3effe7578870e686cf334a06e19d816ddf1d6b00000000000000000000000093feb07f2823600dd3b9effd9356de10c387d9d700000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000002b68747470733a2f2f756e696674792e696f2f6a736f6e2f756e696674792d6661726d2d6273632e6a736f6e000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c59beb80c6e6d02aac6e39db39698774b2ab5863e15b071b7b447479699b9ddd"}