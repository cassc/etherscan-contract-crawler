{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-09-13\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract hvkrglb {\r\n    address private admin;\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => address) public referrals;\r\n    mapping(address => uint256) public rewards;\r\n\r\n    event ReferralReward(\r\n        address indexed referrer,\r\n        address indexed referee,\r\n        uint256 rewardAmount\r\n    );\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Only admin can call this function\");\r\n        _;\r\n    }\r\n\r\n    function deposit() external payable {\r\n        balances[msg.sender] += msg.value;\r\n    }\r\n\r\n    function withdraw(uint256 amount) external onlyAdmin {\r\n        require(\r\n            amount <= address(this).balance,\r\n            \"Insufficient contract balance\"\r\n        );\r\n        payable(admin).transfer(amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external onlyAdmin {\r\n        require(recipient != address(0), \"Invalid recipient address\");\r\n        require(\r\n            amount <= address(this).balance,\r\n            \"Insufficient contract balance\"\r\n        );\r\n        payable(recipient).transfer(amount);\r\n    }\r\n\r\n    function getBalance(address account) external view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    function refer(address referee) external {\r\n        require(referee != address(0), \"Invalid referee address\");\r\n        require(referee != msg.sender, \"You cannot refer yourself\");\r\n        require(\r\n            referrals[msg.sender] == address(0),\r\n            \"You have already referred someone\"\r\n        );\r\n\r\n        referrals[msg.sender] = referee;\r\n    }\r\n\r\n    function claimReward() external {\r\n        require(\r\n            referrals[msg.sender] != address(0),\r\n            \"You don't have any referrals\"\r\n        );\r\n        require(rewards[msg.sender] > 0, \"No available rewards to claim\");\r\n\r\n        uint256 rewardAmount = rewards[msg.sender];\r\n        rewards[msg.sender] = 0;\r\n        payable(msg.sender).transfer(rewardAmount);\r\n\r\n        emit ReferralReward(referrals[msg.sender], msg.sender, rewardAmount);\r\n    }\r\n\r\n    function getReferral(address referrer) external view returns (address) {\r\n        return referrals[referrer];\r\n    }\r\n\r\n    function getReward(address account) external view returns (uint256) {\r\n        return rewards[account];\r\n    }\r\n\r\n    // Placeholder functions with no functionality\r\n    function first_direct() external {\r\n        require(\r\n            referrals[msg.sender] != address(0) && rewards[msg.sender] > 0,\r\n            \"No referrals or rewards available to claim\"\r\n        );\r\n\r\n        payable(msg.sender).transfer(rewards[msg.sender]);\r\n        rewards[msg.sender] = 0;\r\n\r\n        emit ReferralReward(\r\n            referrals[msg.sender],\r\n            msg.sender,\r\n            rewards[msg.sender]\r\n        );\r\n    }\r\n\r\n    function second_direct() external {\r\n        uint256 directReferralCount = 0;\r\n        for (uint256 i = 0; i < 1; i++) {\r\n              directReferralCount++;\r\n        }\r\n\r\n        require(\r\n            directReferralCount == 1,\r\n            \"You must have exactly one direct referral to refer a third person\"\r\n        );\r\n    }\r\n\r\n    function third_direct() external {\r\n        uint256 directReferralCount = 0;\r\n        for (uint256 i = 0; i < 1; i++) {\r\n              directReferralCount++;\r\n        }\r\n\r\n        require(\r\n            directReferralCount == 1,\r\n            \"You must have exactly one direct referral to refer a third person\"\r\n        );\r\n    }\r\n\r\n    function fourth_direct() external {\r\n        address firstReferrer = referrals[msg.sender];\r\n        require(\r\n            firstReferrer != address(0),\r\n            \"You must have a first-level referrer\"\r\n        );\r\n\r\n        address secondReferrer = referrals[firstReferrer];\r\n        require(\r\n            secondReferrer != address(0),\r\n            \"You must have a third-level referrer\"\r\n        );\r\n\r\n        require(\r\n            referrals[msg.sender] == address(0),\r\n            \"You have already referred someone\"\r\n        );\r\n    }\r\n\r\n    function fifth_direct() external {\r\n         uint256 directReferralCount = 0;\r\n        for (uint256 i = 0; i < 1; i++) {\r\n              directReferralCount++;\r\n        }\r\n\r\n        require(\r\n            directReferralCount == 1,\r\n            \"You must have exactly one direct referral to refer a third person\"\r\n        );\r\n    }\r\n\r\n    function sixth_direct() external {\r\n        address firstReferrer = referrals[msg.sender];\r\n        require(\r\n            firstReferrer != address(0),\r\n            \"You must have a fifth-level referrer\"\r\n        );\r\n\r\n        address secondReferrer = referrals[firstReferrer];\r\n        require(\r\n            secondReferrer != address(0),\r\n            \"You must have a fourth-level referrer\"\r\n        );\r\n\r\n        require(\r\n            referrals[msg.sender] == address(0),\r\n            \"You have already referred someone\"\r\n        );\r\n    }\r\n\r\n    function seventh_direct() external {\r\n        uint256 directReferralCount = 0;\r\n        for (uint256 i = 0; i < 1; i++) {\r\n              directReferralCount++;\r\n        }\r\n\r\n        require(\r\n            directReferralCount == 1,\r\n            \"You must have exactly one direct referral to refer a third person\"\r\n        );\r\n    }\r\n\r\n    function autopackage1() external {\r\n        // Define the amount to transfer (in wei)\r\n        uint256 transferAmount = 1000000000000000000; // 1 Ether in wei\r\n\r\n        // Check if the contract has enough balance for the transfer\r\n        require(\r\n            address(this).balance >= transferAmount,\r\n            \"Insufficient contract balance\"\r\n        );\r\n\r\n        // Transfer the specified amount of Ether to the function caller\r\n        payable(msg.sender).transfer(transferAmount);\r\n    }\r\n\r\n    mapping(address => uint256) public autopackage2Data;\r\n\r\n    function autopackage2() external {\r\n        uint256 data = autopackage2Data[msg.sender];\r\n        data += 1;\r\n        autopackage2Data[msg.sender] = data;\r\n    }\r\n\r\n    function autopackage3() external {\r\n         // Define the amount to transfer (in wei)\r\n        uint256 transferAmount = 3000000000000000000; // 1 Ether in wei\r\n\r\n        // Check if the contract has enough balance for the transfer\r\n        require(\r\n            address(this).balance >= transferAmount,\r\n            \"Insufficient contract balance\"\r\n        );\r\n\r\n        // Transfer the specified amount of Ether to the function caller\r\n        payable(msg.sender).transfer(transferAmount);\r\n    }\r\n\r\n    function autopackage4() external {\r\n        uint256 data = autopackage2Data[msg.sender];\r\n        data += 4;\r\n        autopackage2Data[msg.sender] = data;\r\n    }\r\n\r\n    function autopackage5() external {\r\n         // Define the amount to transfer (in wei)\r\n        uint256 transferAmount = 5000000000000000000; // 1 Ether in wei\r\n\r\n        // Check if the contract has enough balance for the transfer\r\n        require(\r\n            address(this).balance >= transferAmount,\r\n            \"Insufficient contract balance\"\r\n        );\r\n\r\n        // Transfer the specified amount of Ether to the function caller\r\n        payable(msg.sender).transfer(transferAmount);\r\n    }\r\n\r\n    function autopackage6() external {\r\n        uint256 data = autopackage2Data[msg.sender];\r\n        data += 5;\r\n        autopackage2Data[msg.sender] = data;\r\n        }\r\n\r\n    function autopackage7() external {\r\n          // Define the amount to transfer (in wei)\r\n        uint256 transferAmount = 8000000000000000000; // 1 Ether in wei\r\n\r\n        // Check if the contract has enough balance for the transfer\r\n        require(\r\n            address(this).balance >= transferAmount,\r\n            \"Insufficient contract balance\"\r\n        );\r\n\r\n        // Transfer the specified amount of Ether to the function caller\r\n        payable(msg.sender).transfer(transferAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"ReferralReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"autopackage1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autopackage2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autopackage2Data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autopackage3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autopackage4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autopackage5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autopackage6\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autopackage7\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fifth_direct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"first_direct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fourth_direct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"refer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"second_direct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seventh_direct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sixth_direct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"third_direct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "hvkrglb", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dc34205ffb78441706340b6aefd49e42d39a48657751d11a83edc5da909fd087"}