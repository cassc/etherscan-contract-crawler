{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.19;\r\n\r\n\r\ninterface tfIERC20 {\r\n\r\n\tfunction totalSupply() external view returns (uint);\r\n\r\n\tfunction balanceOf(address account) external view returns (uint);\r\n\r\n\tfunction transfer(address recipient, uint amount) external returns (bool);\r\n\r\n\tfunction allowance(address owner, address spender) external view returns (uint);\r\n\r\n\tfunction approve(address spender, uint amount) external returns (bool);\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\r\n}\r\n\r\nlibrary tfAddress {\r\n\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\r\n\t\tuint size;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(account)\r\n\t\t}\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\tfunction sendValue(address payable recipient, uint amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\t\t(bool success, ) = recipient.call{value: amount}(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\tfunction functionCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint value\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint value,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\t\t(bool success, bytes memory returndata) = target.call{value: value}(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n\t\treturn functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n\t}\r\n\r\n\tfunction functionStaticCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal view returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: static call to non-contract\");\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\tfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n\t}\r\n\r\n\tfunction functionDelegateCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: delegate call to non-contract\");\r\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\tfunction verifyCallResult(\r\n\t\tbool success,\r\n\t\tbytes memory returndata,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (bytes memory) {\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nlibrary tfSafeERC20 {\r\n\r\n\tusing tfAddress for address;\r\n\r\n\tfunction safeTransfer(\r\n\t\ttfIERC20 token,\r\n\t\taddress to,\r\n\t\tuint value\r\n\t) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n\t}\r\n\r\n\tfunction safeTransferFrom(\r\n\t\ttfIERC20 token,\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint value\r\n\t) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n\t}\r\n\r\n\tfunction safeApprove(\r\n\t\ttfIERC20 token,\r\n\t\taddress spender,\r\n\t\tuint value\r\n\t) internal {\r\n\t\trequire(\r\n\t\t\t(value == 0) || (token.allowance(address(this), spender) == 0),\r\n\t\t\t\"SafeERC20: approve from non-zero to non-zero allowance\"\r\n\t\t);\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n\t}\r\n\r\n\tfunction safeIncreaseAllowance(\r\n\t\ttfIERC20 token,\r\n\t\taddress spender,\r\n\t\tuint value\r\n\t) internal {\r\n\t\tuint newAllowance = token.allowance(address(this), spender) + value;\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t}\r\n\r\n\tfunction safeDecreaseAllowance(\r\n\t\ttfIERC20 token,\r\n\t\taddress spender,\r\n\t\tuint value\r\n\t) internal {\r\n\t\tunchecked {\r\n\t\t\tuint oldAllowance = token.allowance(address(this), spender);\r\n\t\t\trequire(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n\t\t\tuint newAllowance = oldAllowance - value;\r\n\t\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _callOptionalReturn(tfIERC20 token, bytes memory data) private {\r\n\t\tbytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n\t\tif (returndata.length > 0) {\r\n\t\t\trequire(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\ninterface ITrueFundInsurance {\r\n\tfunction fundProject(uint _amountRequested) external returns(uint _amountSent);\r\n}\r\n\r\ncontract TRUEFUND_INSURANCE {\r\n\r\n\treceive() external payable { }\r\n\r\n\tmodifier OnlyProject() { require(msg.sender == PROJECT, 'Only Project' ); _; }\r\n\r\n\tusing tfSafeERC20 for tfIERC20;\r\n\r\n\ttfIERC20 public\tTOKEN;\r\n\taddress public\tPROJECT;\r\n\r\n\tconstructor(address _tokenAddr) {\r\n\r\n\t\tTOKEN = tfIERC20(_tokenAddr);\r\n\t\tPROJECT = msg.sender;\r\n\t}\r\n\r\n\tfunction fundProject(uint _amountRequested) external OnlyProject returns(uint _amountFunded) {\r\n\r\n\t\tuint balance = TOKEN.balanceOf( address(this) );\r\n\t\t_amountFunded = _amountRequested > balance ? balance : _amountRequested;\r\n\t\tTOKEN.safeTransfer(PROJECT, _amountFunded);\r\n\t}\r\n\r\n}\r\n\r\n\r\ncontract TRUEFUND_V2 {\r\n\r\n\treceive() external payable { }\r\n\r\n\tusing tfSafeERC20 for tfIERC20;\r\n\r\n\tmodifier OnlyOwner() { require( msg.sender == OWNER, 'OnlyOwner' ); _; }\r\n\r\n\r\n\taddress public\t\t\t\t\tOWNER;\r\n\ttfIERC20 public\t\t\t\t\tTOKEN;\r\n\tuint public\t\t\t\t\t\tLAUNCHED;\r\n\tuint16 public\t\t\t\t\tDAILY_ROI =\t\t\t\t25;\t\t\t\t\t\t\t// 2.5% fixed\r\n\tuint public\t\t\t\t\t\tEARNINGS_CUTOFF =\t\t3 days;\r\n\tuint public\t\t\t\t\t\tMINIMAL_INVEST =\t\t1 ether;\r\n\tuint16 constant\t\t\t\t\tREF_LVLS =\t\t\t\t3;\r\n\tuint16[REF_LVLS] public\t\t\tREF_PERCENTAGES =\t\t[30, 20, 10];\t\t\t\t// 3-2-1 %\r\n\tuint16[3] public\t\t\t\tTOPREF_BONUS =\t\t\t[500, 250, 100];\t\t\t// 50-25,10 % for 1st, 2nd, 3rd places\r\n\tuint16 public\t\t\t\t\tFEE_INVEST =\t\t\t100;\t\t\t\t\t\t// 10% [updates to 0-10 %]\r\n\r\n\taddress payable public\t\t\tINSURANCE;\r\n\tuint public\t\t\t\t\t\tAGG_INVESTED;\r\n\tuint16 constant\t\t\t\t\tAVG_BALANCE_PERIOD =\t7;\r\n\r\n\tuint16 public\t\t\t\t\tINS_PER_INVEST =\t\t100;\t\t\t\t\t\t// 10% [updates to 0-10 %]\r\n\tuint16 public\t\t\t\t\tINS_PER_TRIGGER =\t\t250;\r\n\r\n\tuint public\t\t\t\t\t\tLOTTERY_ROUND;\r\n\tuint16 public\t\t\t\t\tLOTTERY_USRCNT =\t\t100;\t\t\t\t\t\t// 100 users max [updates to 10-inf]\r\n\tuint public\t\t\t\t\t\tLOTTERY_PRICE =\t\t\t2500000000000000000;\t\t// 2.5 USDT [updates to 1-inf]\r\n\tuint16 public\t\t\t\t\tLOTTERY_PERCENT =\t\t800;\t\t\t\t\t\t// 80% winner prize [updates to 50-100 %]\r\n\r\n\tuint public\t\t\t\t\t\tHT_INVESTED;\r\n\tuint public\t\t\t\t\t\tHT_REFREWARD;\r\n\tuint public\t\t\t\t\t\tHT_EARNED;\r\n\tuint public\t\t\t\t\t\tHT_COMPOUNDED;\r\n\tuint public\t\t\t\t\t\tHT_WITHDRAWN;\r\n\tuint public\t\t\t\t\t\tHT_LOTTERY;\r\n\tuint public\t\t\t\t\t\tHT_INS_SENT;\r\n\tuint public\t\t\t\t\t\tHT_INS_RECV;\r\n\r\n\r\n\tevent event_invest(address user, uint amount);\r\n\tevent event_setUpline(address user, address upline);\r\n\tevent event_lotteryWinner(uint lotteryRound, uint ticketsCount, uint bank, uint prizeAmount, uint winnerTicket, address winnerUser);\r\n\tevent event_leaderPayout(address leader, uint TOP, uint wk_refReward, uint bonus);\r\n\r\n\tenum Flags { NEWCOMER, INVEST, COMPOUND, REFPAYOUT, WITHDRAW, TOP_DEPOSIT, LOTTERY_BUY, LOTTERY_WINNER, REFBONUS_PAID }\r\n\r\n\r\n\tstruct Investment {\r\n\t\taddress\tuser;\r\n\t\taddress referrer;\r\n\t\tuint\tamount;\r\n\t}\r\n\r\n\tstruct History {\r\n\t\tFlags\tflag;\r\n\t\tuint\ttime;\r\n\t\tuint\tamt1;\r\n\t\tuint\tamt2;\r\n\t\tuint\tamt3;\r\n\t\taddress\taddr1;\r\n\t\taddress\taddr2;\r\n\t}\r\n\r\n\tstruct User {\r\n\t\taddress\t\t\t\t\t\tupline;\r\n\t\tmapping(uint => address[])\trefUsers;\r\n\t\tuint\t\t\t\t\t\tinvested;\r\n\t\tuint\t\t\t\t\t\trefReward;\r\n\t\tuint\t\t\t\t\t\tltrReward;\r\n\t\tuint\t\t\t\t\t\tearnReward;\r\n\t\tuint\t\t\t\t\t\tcheckpoint;\r\n\t\tuint\t\t\t\t\t\tht_invested;\r\n\t\tuint\t\t\t\t\t\tht_refReward;\r\n\t\tmapping(uint => uint)\t\twk_refReward;\r\n\t\tuint\t\t\t\t\t\tht_ltrReward;\r\n\t\tuint\t\t\t\t\t\tht_earned;\r\n\t\tuint\t\t\t\t\t\tht_compounded;\r\n\t\tuint\t\t\t\t\t\tht_withdrawn;\r\n\t\tHistory[]\t\t\t\t\thistory;\r\n\t}\r\n\r\n\tstruct Deposit {\r\n\t\taddress\tuser;\r\n\t\tuint\tamount;\r\n\t}\r\n\r\n\tstruct AvgBalance {\r\n\t\tuint\tcount;\r\n\t\tuint\tamount;\r\n\t}\r\n\r\n\r\n\tstruct LotteryUser {\r\n\t\taddress\taddr;\r\n\t\tuint\tticketsCount;\r\n\t}\r\n\r\n\tstruct Lottery {\r\n\t\tuint\t\t\t\t\t\tbank;\r\n\t\tuint\t\t\t\t\t\tticketsCount;\r\n\t\tuint\t\t\t\t\t\twinnerTicket;\r\n\t\taddress\t\t\t\t\t\twinnerUser;\r\n\t\tLotteryUser[]\t\t\t\tusers;\r\n\t\tmapping(address => uint)\tusersTickets;\r\n\t}\r\n\r\n\tstruct LotteryResult {\r\n\t\tuint\tfinished;\r\n\t\taddress\twinner;\r\n\t\tuint\tbank;\r\n\t\tuint\tprize;\r\n\t}\r\n\r\n\tInvestment[] public\t\t\t\t\t\tINVESTMENTS;\r\n\tmapping(address => User) public\t\t\tUSERS;\r\n\tDeposit[10] public\t\t\t\t\t\tTOPDEPOSITS;\r\n\tmapping(uint => AvgBalance) public\t\tAVG_BALANCE;\r\n\tHistory[] public\t\t\t\t\t\tHISTORY;\r\n\tmapping(uint => Lottery) public\t\t\tLOTTERY;\r\n\tmapping(uint => LotteryResult) public\tLOTTERY_RESULTS;\r\n\tmapping(uint => Deposit[10]) public\t\tTOPREFERRERS;\r\n\tmapping(uint => uint) public\t\t\tWK_REFREWARD;\r\n\tuint public\t\t\t\t\t\t\t\tWEEK_INDEX;\r\n\r\n\r\n\r\n\t/*\r\n\t\tconstructor\r\n\t*/\r\n\r\n\tconstructor(address _tokenAddr) {\r\n\r\n\t\tOWNER = msg.sender;\r\n\t\tTOKEN = tfIERC20(_tokenAddr);\r\n\t\tINSURANCE = payable( new TRUEFUND_INSURANCE(_tokenAddr) );\r\n\t}\r\n\r\n\r\n\t/*\r\n\t\tpublic functions\r\n\t*/\r\n\r\n\tfunction invest(uint _amount, address _upline) external {\r\n\r\n\t\trequire( _amount >= MINIMAL_INVEST, 'Insufficient amount');\r\n\t\trequire( (LAUNCHED > 0) || (msg.sender == OWNER), 'Please wait for the official launch');\r\n\r\n\t\tif( LAUNCHED == 0 ) {\r\n\t\t\tLAUNCHED = block.timestamp;\r\n\t\t}\r\n\r\n\t\tUser storage user = USERS[msg.sender];\r\n\r\n\t\tif(!_isUser(msg.sender)) {\r\n\t\t\t_userHistory(user, Flags.NEWCOMER, 0, 0, 0, address(0), address(0) );\r\n\t\t}\r\n\r\n\t\tTOKEN.safeTransferFrom( msg.sender, address(this), _amount );\r\n\r\n\t\tTOKEN.safeTransfer(OWNER, _per(_amount, FEE_INVEST) );\r\n\r\n\t\t_setUpline(msg.sender, _upline);\r\n\r\n\t\t_refPayout(msg.sender, _amount);\r\n\r\n\t\t_encashEarnings(msg.sender);\r\n\r\n\t\t_compoundRewards(msg.sender);\r\n\r\n\t\tunchecked {\r\n\t\t\tuser.invested += _amount;\r\n\t\t\tAGG_INVESTED += _amount;\r\n\r\n\t\t\tuser.ht_invested += _amount;\r\n\t\t\tHT_INVESTED += _amount;\r\n\t\t}\r\n\r\n\t\tINVESTMENTS.push(\r\n\t\t\tInvestment({\r\n\t\t\t\tuser: msg.sender,\r\n\t\t\t\treferrer: user.upline,\r\n\t\t\t\tamount: _amount\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\t_insuranceTrigger(0);\r\n\r\n\t\t_insuranceFill( _per(_amount, INS_PER_INVEST) );\r\n\r\n\t\t_trackBalance();\r\n\r\n\t\t_rateDeposit(msg.sender, _amount);\r\n\r\n\r\n\t\t_userHistory(user, Flags.INVEST, _amount, user.invested, AGG_INVESTED, address(0), address(0) );\r\n\r\n\t\t_globalHistory(Flags.INVEST, _amount, user.invested, AGG_INVESTED, msg.sender, address(0) );\r\n\r\n\t\temit event_invest(msg.sender, _amount);\r\n\t}\r\n\r\n\r\n\tfunction compound() external {\r\n\r\n\t\trequire( _isUser(msg.sender), 'Invalid user');\r\n\r\n\t\t_encashEarnings(msg.sender);\r\n\r\n\t\t_compoundRewards(msg.sender);\r\n\r\n\t\t_trackBalance();\r\n\r\n\t}\r\n\r\n\r\n\tfunction withdraw() external {\r\n\r\n\t\trequire( _isUser(msg.sender), 'Invalid user');\r\n\r\n\t\tUser storage user = USERS[msg.sender];\r\n\r\n\t\t_encashEarnings(msg.sender);\r\n\r\n\t\t(uint refReward, uint ltrReward, uint earnReward, uint totalRewards) = _drainRewards(msg.sender);\r\n\r\n\t\t_insuranceTrigger(totalRewards);\r\n\r\n\t\tTOKEN.safeTransfer(msg.sender, totalRewards);\r\n\r\n\t\tunchecked {\r\n\t\t\tuser.ht_withdrawn += totalRewards;\r\n\t\t\tHT_WITHDRAWN += totalRewards;\r\n\t\t}\r\n\r\n\t\t_trackBalance();\r\n\r\n\t\t_userHistory(user, Flags.WITHDRAW, refReward, ltrReward, earnReward, address(0), address(0) );\r\n\r\n\t}\r\n\r\n\r\n\tfunction lotteryBuy(uint _ticketsCount) external {\r\n\r\n\t\trequire( _isUser(msg.sender), 'Invalid user');\r\n\r\n\t\tUser storage user = USERS[msg.sender];\r\n\r\n\t\tLottery storage lottery = LOTTERY[LOTTERY_ROUND];\r\n\r\n\t\trequire( lottery.users.length < LOTTERY_USRCNT, 'Max users count reached' );\r\n\r\n\t\tuint amount = _ticketsCount * LOTTERY_PRICE;\r\n\r\n\t\tTOKEN.safeTransferFrom( msg.sender, address(this), amount );\r\n\r\n\t\tlottery.users.push(\r\n\t\t\tLotteryUser({\r\n\t\t\t\taddr:\t\t\tmsg.sender,\r\n\t\t\t\tticketsCount:\t_ticketsCount\r\n\t\t\t})\r\n\t\t);\r\n\t\tunchecked {\r\n\t\t\tlottery.usersTickets[msg.sender] += _ticketsCount;\r\n\t\t\tlottery.ticketsCount += _ticketsCount;\r\n\t\t\tlottery.bank += amount;\r\n\t\t}\r\n\r\n\t\t_userHistory(user, Flags.LOTTERY_BUY, _ticketsCount, amount, 0, address(0), address(0) );\r\n\t\t_globalHistory(Flags.LOTTERY_BUY, _ticketsCount, lottery.ticketsCount, 0, msg.sender, address(0) );\r\n\r\n\t}\r\n\r\n\r\n\tfunction leaderBonusPayouts() external {\r\n\r\n\t\trequire( _weekEndsIn() == 0, 'Wait for the end of this week');\r\n\r\n\t\tDeposit[10] storage TOP = TOPREFERRERS[WEEK_INDEX];\r\n\r\n\t\t//top1/2/3 receive their bonus\r\n\t\tfor(uint i; i < TOPREF_BONUS.length; i++) {\r\n\r\n\t\t\tDeposit storage rank = TOP[9-i];\r\n\t\t\tif(rank.amount == 0) break;\r\n\r\n\t\t\tUser storage user = USERS[ rank.user ];\r\n\t\t\tuint refReward = user.wk_refReward[WEEK_INDEX];\r\n\t\t\tuint bonus = _per( refReward, TOPREF_BONUS[i] );\r\n\t\t\tuser.refReward += bonus;\r\n\r\n\t\t\t_userHistory(user, Flags.REFBONUS_PAID, bonus, 0, 0, address(0), address(0) );\r\n\t\t\t_globalHistory(Flags.REFBONUS_PAID, bonus, refReward, 0, rank.user, address(0) );\r\n\t\t\temit event_leaderPayout(rank.user, i, refReward, bonus);\r\n\t\t}\r\n\r\n\t\tWEEK_INDEX++;\r\n\t}\r\n\r\n\r\n\tstruct LotteryInfo {\r\n\t\tuint\tbank;\r\n\t\tuint\tticketsCount;\r\n\t\tuint\tusersCount;\r\n\t\tuint\twinnerTicket;\r\n\t\taddress\twinnerUser;\r\n\t\tuint\tmaxUsers;\r\n\t\tuint\tpercent;\r\n\t\tuint\tprice;\r\n\t\tuint\tprize;\r\n\t}\r\n\r\n\tstruct DataContract {\r\n\t\tuint\t\ttime;\r\n\t\tuint\t\tlaunched;\r\n\t\tuint\t\tbalance;\r\n\t\tuint\t\tminDeposit;\r\n\r\n\t\tuint\t\tagg_invested;\r\n\t\tuint\t\tht_invested;\r\n\t\tuint\t\tht_refReward;\r\n\t\tuint\t\tht_earned;\r\n\t\tuint\t\tht_withdrawn;\r\n\t\tuint\t\tht_lottery;\r\n\r\n\t\tuint\t\tinsBalance;\r\n\t\tuint\t\tht_insSentAgg;\r\n\t\tuint\t\tht_insRecvAgg;\r\n\t\tuint\t\tavgBalance;\r\n\r\n\t\tuint\t\tweekIndex;\r\n\t\tuint\t\twk_refReward;\r\n\t\tuint\t\tweekEndsIn;\r\n\r\n\t\tDeposit[10]\t\t\ttopDeposits;\r\n\t\tDeposit[10]\t\t\ttopReferrers;\r\n\t\tHistory[20]\t\t\thistory;\r\n\t\tLotteryInfo\t\t\tlotteryPrev;\r\n\t\tLotteryInfo\t\t\tlotteryCurr;\r\n\t\tLotteryResult[20]\tlotteryResults;\r\n\t}\r\n\r\n\tstruct DataUser {\r\n\t\tuint\tbalance;\r\n\t\tuint\tallowance;\r\n\t}\r\n\r\n\tfunction contractInfo(address _user) public view returns(DataContract memory _dataContract, DataUser memory _dataUser) {\r\n\r\n\t\tHistory[20] memory _HISTORY;\r\n\t\tfor(uint i = HISTORY.length;  i > 0;  i--) {\r\n\t\t\tuint x = HISTORY.length - i;\r\n\t\t\tif(x >= _HISTORY.length) break;\r\n\t\t\t_HISTORY[x] = HISTORY[i-1];\r\n\t\t}\r\n\r\n\t\tLotteryResult[20] memory _LOTTERY_RESULTS;\r\n\t\tfor(uint i = LOTTERY_ROUND;  i > 0;  i--) {\r\n\t\t\tuint x = LOTTERY_ROUND - i;\r\n\t\t\tif(x >= _LOTTERY_RESULTS.length) break;\r\n\t\t\t_LOTTERY_RESULTS[x] = LOTTERY_RESULTS[i-1];\r\n\t\t}\r\n\r\n\t\tLottery storage lp = LOTTERY[LOTTERY_ROUND > 0 ? LOTTERY_ROUND - 1 : 0];\r\n\t\tLottery storage lc = LOTTERY[LOTTERY_ROUND];\r\n\r\n\t\t_dataContract = DataContract({\r\n\t\t\ttime:\t\t\tblock.timestamp,\r\n\t\t\tlaunched:\t\tLAUNCHED,\r\n\t\t\tbalance:\t\tTOKEN.balanceOf(address(this)),\r\n\t\t\tminDeposit:\t\tMINIMAL_INVEST,\r\n\r\n\t\t\tagg_invested:\tAGG_INVESTED,\r\n\t\t\tht_invested:\tHT_INVESTED,\r\n\t\t\tht_refReward:\tHT_REFREWARD,\r\n\t\t\tht_earned:\t\tHT_EARNED,\r\n\t\t\tht_withdrawn:\tHT_WITHDRAWN,\r\n\t\t\tht_lottery:\t\tHT_LOTTERY,\r\n\r\n\t\t\tinsBalance:\t\tTOKEN.balanceOf(INSURANCE),\r\n\t\t\tht_insSentAgg:\tHT_INS_SENT,\r\n\t\t\tht_insRecvAgg:\tHT_INS_RECV,\r\n\t\t\tavgBalance:\t\t_avgBalance(),\r\n\r\n\t\t\tweekIndex:\t\tWEEK_INDEX,\r\n\t\t\twk_refReward:\tWK_REFREWARD[WEEK_INDEX],\r\n\t\t\tweekEndsIn:\t\t_weekEndsIn(),\r\n\r\n\t\t\ttopDeposits:\tTOPDEPOSITS,\r\n\t\t\ttopReferrers:\tTOPREFERRERS[WEEK_INDEX],\r\n\r\n\t\t\thistory:\t\t_HISTORY,\r\n\t\t\tlotteryPrev:\tLotteryInfo({ bank: lp.bank, ticketsCount: lp.ticketsCount, usersCount: lp.users.length, winnerTicket: lp.winnerTicket, winnerUser: lp.winnerUser, maxUsers: 0,              percent: 0,               price: 0,             prize: 0 }),\r\n\t\t\tlotteryCurr:\tLotteryInfo({ bank: lc.bank, ticketsCount: lc.ticketsCount, usersCount: lc.users.length, winnerTicket: lc.winnerTicket, winnerUser: lc.winnerUser, maxUsers: LOTTERY_USRCNT, percent: LOTTERY_PERCENT, price: LOTTERY_PRICE, prize: _per(lc.bank, LOTTERY_PERCENT) }),\r\n\t\t\tlotteryResults:\t_LOTTERY_RESULTS\r\n\t\t});\r\n\r\n\t\t_dataUser = DataUser({\r\n\t\t\tbalance:\tTOKEN.balanceOf(_user),\r\n\t\t\tallowance:\tTOKEN.allowance(_user, address(this))\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tstruct DataUserEx {\r\n\t\tuint\t\t\ttime;\r\n\t\tuint\t\t\tbalance;\r\n\t\tuint\t\t\tallowance;\r\n\t\tbool\t\t\tisUser;\r\n\t\taddress\t\t\tupline;\r\n\t\tuint\t\t\tcheckpoint;\r\n\t\tuint\t\t\tinvested;\r\n\t\tuint\t\t\trefReward;\r\n\t\tuint\t\t\tltrReward;\r\n\t\tuint\t\t\tearnReward;\r\n\t\tuint\t\t\tamtFull;\r\n\t\tuint\t\t\tamtEarn;\r\n\t\tuint\t\t\tamtDaily;\r\n\t\tuint\t\t\tbeforeCutoff;\r\n\t\tuint[REF_LVLS]\trefCounts;\r\n\t\tuint\t\t\tht_invested;\r\n\t\tuint\t\t\tht_refReward;\r\n\t\tuint\t\t\twk_refReward;\r\n\t\tuint\t\t\twk_percentage;\r\n\t\tuint\t\t\tht_ltrReward;\r\n\t\tuint\t\t\tht_earned;\r\n\t\tuint\t\t\tht_compounded;\r\n\t\tuint\t\t\tht_withdrawn;\r\n\t\tuint\t\t\tlotteryTickets;\r\n\t}\r\n\r\n\tfunction userInfo(address _user) public view returns(DataUserEx memory _dataUserEx, History[10] memory _history) {\r\n\r\n\t\t(/*timeFull*/, uint timeEarn, uint amtFull, uint amtEarn, uint amtDaily) = _calcEarnings(_user);\r\n\r\n\t\tUser storage user = USERS[_user];\r\n\r\n\t\tuint[REF_LVLS] memory refCounts;\r\n\t\tfor(uint16 i; i < REF_LVLS; i++)\r\n\t\t\trefCounts[i] = user.refUsers[i].length;\r\n\r\n\t\t_dataUserEx = DataUserEx({\r\n\t\t\ttime:\t\t\t\tblock.timestamp,\r\n\t\t\tbalance:\t\t\tTOKEN.balanceOf(_user),\r\n\t\t\tallowance:\t\t\tTOKEN.allowance(_user, address(this)),\r\n\t\t\tisUser:\t\t\t\t_isUser(_user),\r\n\t\t\tupline:\t\t\t\tuser.upline,\r\n\t\t\tcheckpoint:\t\t\tuser.checkpoint,\r\n\t\t\tinvested:\t\t\tuser.invested,\r\n\t\t\trefReward:\t\t\tuser.refReward,\r\n\t\t\tltrReward:\t\t\tuser.ltrReward,\r\n\t\t\tearnReward:\t\t\tuser.earnReward,\r\n\t\t\tamtFull:\t\t\tamtFull,\r\n\t\t\tamtEarn:\t\t\tamtEarn,\r\n\t\t\tamtDaily:\t\t\tamtDaily,\r\n\t\t\tbeforeCutoff:\t\ttimeEarn < EARNINGS_CUTOFF ? EARNINGS_CUTOFF - timeEarn : 0,\r\n\t\t\trefCounts:\t\t\trefCounts,\r\n\t\t\tht_invested:\t\tuser.ht_invested,\r\n\t\t\tht_refReward:\t\tuser.ht_refReward,\r\n\t\t\twk_refReward:\t\tuser.wk_refReward[WEEK_INDEX],\r\n\t\t\twk_percentage:\t\tWK_REFREWARD[WEEK_INDEX] > 0 ? user.wk_refReward[WEEK_INDEX]*100/WK_REFREWARD[WEEK_INDEX] : 0,\r\n\t\t\tht_ltrReward:\t\tuser.ht_ltrReward,\r\n\t\t\tht_earned:\t\t\tuser.ht_earned,\r\n\t\t\tht_compounded:\t\tuser.ht_compounded,\r\n\t\t\tht_withdrawn:\t\tuser.ht_withdrawn,\r\n\t\t\tlotteryTickets:\t\tLOTTERY[LOTTERY_ROUND].usersTickets[_user]\r\n\t\t});\r\n\r\n\t\t(,,_history) = userHistory(_user, 0);\r\n\r\n\t}\r\n\r\n\r\n\tfunction userHistory(address _user, uint _offset) public view returns(bool _canPrev, bool _canNext, History[10] memory _history) {\r\n\r\n\t\t_canPrev = _offset > 0;\r\n\t\tuint LEN = USERS[_user].history.length;\r\n\t\tuint len = _history.length;\r\n\r\n\t\tif(LEN < _offset+1) return (false, _canPrev, _history);\r\n\r\n\t\tuint start = LEN - _offset - 1;\r\n\t\tuint cnt = _min(len, start+1);\r\n\t\t_canNext = (start+1 > len);\r\n\t\tfor(uint i; i < cnt; i++)\r\n\t\t\t_history[i] = USERS[_user].history[start-i];\r\n\t}\r\n\r\n\r\n\tstruct RefUser {\r\n\t\taddress\t\t\taddr;\r\n\t\taddress\t\t\tupline;\r\n\t\tuint\t\t\tinvested;\r\n\t\tuint\t\t\trefReward;\r\n\t\tuint[REF_LVLS]\trefCounts;\r\n\t}\r\n\tfunction userReferrals(address _user, uint _level) public view returns(RefUser[] memory) {\r\n\r\n\t\tUser storage user = USERS[_user];\r\n\r\n\t\tuint length = user.refUsers[_level].length;\r\n\r\n\t\tRefUser[] memory referrals = new RefUser[]( length );\r\n\r\n\t\tfor(uint i; i < length; i++) {\r\n\r\n\t\t\taddress addr = user.refUsers[_level][i];\r\n\r\n\t\t\tUser storage ref = USERS[addr];\r\n\r\n\t\t\tuint[REF_LVLS] memory refCounts;\r\n\t\t\tfor(uint16 r; r < REF_LVLS; r++)\r\n\t\t\t\trefCounts[r] = ref.refUsers[r].length;\r\n\r\n\t\t\treferrals[i] = RefUser({\r\n\t\t\t\t\t\t\t\taddr:\t\taddr,\r\n\t\t\t\t\t\t\t\tupline:\t\tref.upline,\r\n\t\t\t\t\t\t\t\tinvested:\tref.ht_invested,\r\n\t\t\t\t\t\t\t\trefReward:\tref.ht_refReward,\r\n\t\t\t\t\t\t\t\trefCounts:\trefCounts\r\n\t\t\t\t\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn referrals;\r\n\t}\r\n\r\n\r\n\t/*\r\n\t\tadmin functions\r\n\t*/\r\n\r\n\r\n\tfunction updateFees(uint16 _FEE_INVEST, uint16 _INS_PER_INVEST) public OnlyOwner {\r\n\r\n\t\trequire( _FEE_INVEST >= 0 && _FEE_INVEST <= 100, 'Incorrect FEE_INVEST' );\r\n\t\trequire( _INS_PER_INVEST >= 0 && _INS_PER_INVEST <= 100, 'Incorrect INS_PER_INVEST' );\r\n\r\n\t\tFEE_INVEST = _FEE_INVEST;\r\n\t\tINS_PER_INVEST = _INS_PER_INVEST;\r\n\t}\r\n\r\n\r\n\t// Force the Insurance contract to fund the Main contract, no USDT will be sent outside\r\n\tfunction pullInsurance(uint _amount) public OnlyOwner {\r\n\r\n\t\t_insurancePull( _amount );\r\n\t}\r\n\r\n\r\n\t// Lottery: choose a winner / start a new lottery\r\n\tfunction lotteryFinish(bool _updateParams, uint _bonusFunds, uint16 _LOTTERY_USRCNT, uint _LOTTERY_PRICE, uint16 _LOTTERY_PERCENT) public OnlyOwner {\r\n\r\n\t\tLottery storage lottery = LOTTERY[LOTTERY_ROUND];\r\n\r\n\t\trequire( lottery.ticketsCount > 0 , 'No tickets');\r\n\r\n\t\tuint prizeAmount = _per(lottery.bank, LOTTERY_PERCENT);\r\n\t\tlottery.winnerTicket = _random(1, lottery.ticketsCount);\r\n\r\n\t\tuint length = lottery.users.length;\r\n\t\tuint tCnt;\r\n\t\tfor(uint i; i < length; i++) {\r\n\t\t\tunchecked {\r\n\t\t\t\ttCnt += lottery.users[i].ticketsCount;\r\n\t\t\t}\r\n\t\t\tif(tCnt >= lottery.winnerTicket) {\r\n\t\t\t\tlottery.winnerUser = lottery.users[i].addr;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_insuranceFill( lottery.bank - prizeAmount );\r\n\r\n\t\tHT_INVESTED += lottery.bank - prizeAmount;\r\n\r\n\t\tUser storage user = USERS[lottery.winnerUser];\r\n\t\t\r\n\t\tuser.ltrReward += prizeAmount;\r\n\r\n\t\tHT_LOTTERY += prizeAmount;\r\n\r\n\t\tLOTTERY_RESULTS[LOTTERY_ROUND] = LotteryResult({ finished: block.timestamp, winner: lottery.winnerUser, bank: lottery.bank, prize: prizeAmount });\r\n\r\n\t\t_userHistory(user, Flags.LOTTERY_WINNER, prizeAmount, 0, 0, address(0), address(0) );\r\n\t\t_globalHistory(Flags.LOTTERY_WINNER, prizeAmount, 0, 0, lottery.winnerUser, address(0) );\r\n\r\n\t\temit event_lotteryWinner(LOTTERY_ROUND, lottery.ticketsCount, lottery.bank, prizeAmount, lottery.winnerTicket, lottery.winnerUser);\r\n\r\n\r\n\t\t//starting a new Lottery\r\n\r\n\t\tLOTTERY_ROUND++;\r\n\r\n\t\t//update params, if specified. Does not affect the current Lottery\r\n\t\tif(_updateParams) {\r\n\t\t\trequire( _LOTTERY_USRCNT >= 10, 'Incorrect LOTTERY_USRCNT' );\r\n\t\t\trequire( _LOTTERY_PRICE >= 1 ether, 'Incorrect LOTTERY_PRICE' );\r\n\t\t\trequire( _LOTTERY_PERCENT >= 500 && _LOTTERY_PERCENT <= 1000, 'Incorrect LOTTERY_PERCENT' );\r\n\r\n\t\t\tLOTTERY_USRCNT = _LOTTERY_USRCNT;\r\n\t\t\tLOTTERY_PRICE = _LOTTERY_PRICE;\r\n\t\t\tLOTTERY_PERCENT = _LOTTERY_PERCENT;\r\n\t\t}\r\n\r\n\t\t//add Bonus funds to Lottery if specified - take it from Owner's wallet\r\n\t\tif(_bonusFunds > 0) {\r\n\t\t\tTOKEN.safeTransferFrom( msg.sender, address(this), _bonusFunds );\r\n\t\t\tLOTTERY[LOTTERY_ROUND].bank += _bonusFunds;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// Interface for Moonarch rankings: accumulated earnings&rewards amount\r\n\tfunction moonArch(address _user) public view returns(uint) {\r\n\r\n\t\tUser storage user = USERS[_user];\r\n\t\t(,,,uint amtEarn,) = _calcEarnings(_user);\r\n\t\treturn amtEarn + user.refReward + user.ltrReward + user.earnReward;\r\n\t}\r\n\r\n\r\n\t/*\r\n\t\tprivate functions\r\n\t*/\r\n\r\n\r\n\tfunction _min(uint num1, uint num2) private pure returns(uint) {\r\n\r\n\t\treturn num1 < num2 ? num1 : num2;\r\n\t}\r\n\r\n\r\n\tfunction _max(uint num1, uint num2) private pure returns(uint) {\r\n\r\n\t\treturn num1 > num2 ? num1 : num2;\r\n\t}\r\n\r\n\tfunction _random(uint _minV, uint _maxV) private view returns(uint) {\r\n\t\treturn _minV + (uint(keccak256(abi.encodePacked(block.timestamp,address(this).balance,HT_EARNED))) % _maxV);\r\n\t}\r\n\r\n\r\n\tfunction _per(uint _amount, uint _percent) private pure returns(uint) {\r\n\r\n\t\treturn (_amount * _percent) / 1000;\r\n\t}\r\n\r\n\r\n\tfunction _isUser(address _user) private view returns(bool) {\r\n\r\n\t\treturn (USERS[_user].checkpoint > 0);\r\n\t}\r\n\r\n\r\n\tfunction _weekEndsIn() private view returns(uint) {\r\n\r\n\t\treturn LAUNCHED + (WEEK_INDEX+1)*604800 > block.timestamp ? LAUNCHED + (WEEK_INDEX+1)*604800 - block.timestamp : 0;\r\n\t}\r\n\r\n\r\n\tfunction _globalHistory(Flags _flag, uint _amt1, uint _amt2, uint _amt3, address _addr1, address _addr2) private {\r\n\r\n\t\tHISTORY.push(\r\n\t\t\tHistory({\r\n\t\t\t\tflag:\t_flag,\r\n\t\t\t\ttime:\tblock.timestamp,\r\n\t\t\t\tamt1:\t_amt1,\r\n\t\t\t\tamt2:\t_amt2,\r\n\t\t\t\tamt3:\t_amt3,\r\n\t\t\t\taddr1:\t_addr1,\r\n\t\t\t\taddr2:\t_addr2\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tfunction _userHistory(User storage _user, Flags _flag, uint _amt1, uint _amt2, uint _amt3, address _addr1, address _addr2) private {\r\n\r\n\t\t_user.history.push(\r\n\t\t\tHistory({\r\n\t\t\t\tflag:\t_flag,\r\n\t\t\t\ttime:\tblock.timestamp,\r\n\t\t\t\tamt1:\t_amt1,\r\n\t\t\t\tamt2:\t_amt2,\r\n\t\t\t\tamt3:\t_amt3,\r\n\t\t\t\taddr1:\t_addr1,\r\n\t\t\t\taddr2:\t_addr2\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tfunction _setUpline(address _user, address _upline) private {\r\n\r\n\t\tif( USERS[_user].upline != address(0) ) return;\r\n\t\tif( !_isUser(_upline) ) return;\r\n\t\tif( _user == _upline ) return;\r\n\r\n\t\tUSERS[_user].upline = _upline;\r\n\t\temit event_setUpline(_user, _upline);\r\n\r\n\t\tfor(uint16 i; i < REF_LVLS; i++) {\r\n\t\t\tUSERS[_upline].refUsers[i].push(_user);\r\n\t\t\t_upline = USERS[_upline].upline;\r\n\t\t\tif(_upline == address(0)) break;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction _refPayout(address _user, uint _amount) private {\r\n\r\n\t\taddress upline = USERS[_user].upline;\r\n\r\n\t\tfor(uint16 i; i < REF_LVLS; i++) {\r\n\r\n\t\t\tif(upline == address(0)) break;\r\n\r\n\t\t\t_mintReferralReward(_user, upline, _per(_amount, REF_PERCENTAGES[i]) );\r\n\r\n\t\t\tupline = USERS[upline].upline;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction _mintReferralReward(address _source, address _referrer, uint _reward) private {\r\n\r\n\t\tuint isNewUser = _isUser(_source) ? 0 : 1;\r\n\r\n\t\tUser storage referrer = USERS[_referrer];\r\n\r\n\t\t//referral payouts\r\n\t\tunchecked {\r\n\t\t\treferrer.refReward += _reward;\r\n\t\t\treferrer.ht_refReward += _reward;\r\n\t\t\tHT_REFREWARD += _reward;\r\n\t\t}\r\n\r\n\t\t_userHistory(referrer, Flags.REFPAYOUT, _reward, isNewUser, 0, _source, address(0) );\r\n\t\tif(isNewUser != 1) return;\r\n\r\n\t\t//increase wk_refReward + recalculate ranking [on Newbie deposits only]\r\n\t\tuint weekIdx = _getWeekIdx();\r\n\t\tunchecked {\r\n\t\t\treferrer.wk_refReward[weekIdx] += _reward;\r\n\t\t\tWK_REFREWARD[weekIdx] += _reward;\r\n\t\t}\r\n\t\t_rateReferrer(_referrer, referrer.wk_refReward[weekIdx], weekIdx);\r\n\t}\r\n\r\n\r\n\tfunction _rateDeposit(address _user, uint _amount) private {\r\n\r\n\t\tuint length = TOPDEPOSITS.length;\r\n\t\tbool move; uint moveIdx;\r\n\t\tfor(uint i; i < length; i++) {\r\n\t\t\tif(TOPDEPOSITS[i].amount == _amount) return;\r\n\t\t\tif(TOPDEPOSITS[i].amount < _amount) {\r\n\t\t\t\tif(!move) move = true;\r\n\t\t\t\tmoveIdx = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(!move) return;\r\n\r\n\t\tfor(uint i; i < moveIdx; i++)\r\n\t\t\tTOPDEPOSITS[i] = TOPDEPOSITS[i+1];\r\n\r\n\t\tTOPDEPOSITS[moveIdx] = Deposit({ user: _user, amount: _amount });\r\n\r\n\t\t_globalHistory(Flags.TOP_DEPOSIT, _amount, 0, 0, _user, address(0) );\r\n\r\n\t}\r\n\r\n\r\n\tfunction _rateReferrer(address _user, uint _amount, uint _weekIdx) private {\r\n\r\n\t\tDeposit[10] storage TOP = TOPREFERRERS[_weekIdx];\r\n\r\n\t\tuint length = TOP.length;\r\n\t\tbool move; uint moveIdx; uint selfIdx;\r\n\t\tfor(uint i; i < length; i++) {\r\n\t\t\tif(TOP[i].user == _user) {\r\n\t\t\t\tselfIdx = i;\r\n\t\t\t}\r\n\t\t\tif(TOP[i].amount < _amount) {\r\n\t\t\t\tif(!move) move = true;\r\n\t\t\t\tmoveIdx = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(!move) return;\r\n\r\n\t\tfor(uint i=selfIdx; i < moveIdx; i++)\r\n\t\t\tTOP[i] = TOP[i+1];\r\n\r\n\t\tTOP[moveIdx] = Deposit({ user: _user, amount: _amount });\r\n\t}\r\n\r\n\r\n\tfunction _calcEarnings(address _user) private view returns(uint _timeFull, uint _timeEarn, uint _amtFull, uint _amtEarn, uint _daily) {\r\n\r\n\t\tUser storage user = USERS[_user];\r\n\r\n\t\t_timeFull = user.checkpoint > 0 ? block.timestamp - user.checkpoint : 0;\r\n\t\t_timeEarn = _min( _timeFull , EARNINGS_CUTOFF );\r\n\r\n\t\t_amtFull = (user.invested * _timeFull * DAILY_ROI) / 86400000;\r\n\t\t_amtEarn = (user.invested * _timeEarn * DAILY_ROI) / 86400000;\r\n\t\t_daily = (user.invested * DAILY_ROI) / 1000;\r\n\t}\r\n\r\n\r\n\tfunction _encashEarnings(address _user) private {\r\n\r\n\t\tUser storage user = USERS[_user];\r\n\r\n\t\t(/*uint timeFull*/, /*uint timeEarn*/, /*uint amtFull*/, uint amtEarn, /*daily*/) = _calcEarnings(_user);\r\n\r\n\t\tunchecked {\r\n\t\t\tuser.checkpoint = block.timestamp;\r\n\t\t\tuser.earnReward += amtEarn;\r\n\t\t\tuser.ht_earned += amtEarn;\r\n\t\t\tHT_EARNED += amtEarn;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction _drainRewards(address _user) private returns(uint _refReward, uint _ltrReward, uint _earnReward, uint _totalRewards) {\r\n\r\n\t\tUser storage user = USERS[_user];\r\n\r\n\t\tunchecked {\r\n\t\t(_refReward, _ltrReward, _earnReward) = (user.refReward, user.ltrReward, user.earnReward);\r\n\t\t_totalRewards = _refReward + _ltrReward + _earnReward;\r\n\t\t(user.refReward, user.ltrReward, user.earnReward) = (0,0,0);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction _compoundRewards(address _user) private {\r\n\r\n\t\tUser storage user = USERS[_user];\r\n\r\n\t\t(uint refReward, uint ltrReward, uint earnReward, uint totalRewards) = _drainRewards(_user);\r\n\r\n\t\tif(totalRewards==0) return;\r\n\r\n\t\tunchecked {\r\n\t\t\tuser.invested += totalRewards;\r\n\t\t\tAGG_INVESTED += totalRewards;\r\n\r\n\t\t\tuser.ht_compounded += totalRewards;\r\n\t\t\tHT_COMPOUNDED += totalRewards;\r\n\t\t}\r\n\r\n\t\t_userHistory(user, Flags.COMPOUND, refReward, ltrReward, earnReward, address(0), address(0) );\r\n\t}\r\n\r\n\r\n\tfunction _getDayIdx() private view returns(uint) {\r\n\r\n\t\treturn block.timestamp / 86400;\r\n\t}\r\n\r\n\r\n\tfunction _getWeekIdx() private view returns(uint) {\r\n\r\n\t\treturn (block.timestamp - LAUNCHED) / 604800;\r\n\t}\r\n\r\n\r\n\tfunction _trackBalance() private {\r\n\r\n\t\tAvgBalance storage avg = AVG_BALANCE[_getDayIdx()];\r\n\t\tunchecked {\r\n\t\t\tavg.amount += TOKEN.balanceOf(address(this));\r\n\t\t\tavg.count++;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction _avgBalance() private view returns(uint) {\r\n\r\n\t\tuint idx = _getDayIdx();\r\n\t\tuint count;\r\n\t\tuint amount;\r\n\t\tfor(uint i = idx - AVG_BALANCE_PERIOD; i < idx; i++) {\r\n\t\t\tAvgBalance storage avg = AVG_BALANCE[i];\r\n\t\t\tif(avg.count == 0) continue;\r\n\t\t\tamount += avg.amount / avg.count;\r\n\t\t\tcount++;\r\n\t\t}\r\n\r\n\t\treturn count == 0 ? 0 : amount / count;\r\n\t}\r\n\r\n\r\n\tfunction _insuranceFill(uint _amount) private {\r\n\r\n\t\tTOKEN.safeTransfer( INSURANCE, _amount );\r\n\r\n\t\tHT_INS_SENT += _amount;\r\n\t}\r\n\r\n\r\n\tfunction _insurancePull(uint _amountRequested) private {\r\n\r\n\t\tuint amountFunded = ITrueFundInsurance(INSURANCE).fundProject( _amountRequested );\r\n\r\n\t\tHT_INS_RECV += amountFunded;\r\n\t}\r\n\r\n\r\n\tfunction _insuranceTrigger(uint _amount) private returns(bool) {\r\n\r\n\t\tuint balance = TOKEN.balanceOf(address(this));\r\n\r\n\t\tif(balance == 0) {\r\n\r\n\t\t\t_insurancePull( TOKEN.balanceOf(INSURANCE) );\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(_amount * 1000 / balance >= INS_PER_TRIGGER) {\r\n\r\n\t\t\t_insurancePull( _amount );\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tuint avg = _avgBalance();\r\n\t\tif(avg > 0) {\r\n\t\t\tif(balance * 1000 / avg <= 1000-INS_PER_TRIGGER) {\r\n\r\n\t\t\t\t_insurancePull( avg - balance );\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"event_invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"leader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TOP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wk_refReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"event_leaderPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryRound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketsCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bank\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnerTicket\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winnerUser\",\"type\":\"address\"}],\"name\":\"event_lotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"}],\"name\":\"event_setUpline\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AGG_INVESTED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AVG_BALANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAILY_ROI\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EARNINGS_CUTOFF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_INVEST\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"HISTORY\",\"outputs\":[{\"internalType\":\"enum TRUEFUND_V2.Flags\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt3\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr2\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HT_COMPOUNDED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HT_EARNED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HT_INS_RECV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HT_INS_SENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HT_INVESTED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HT_LOTTERY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HT_REFREWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HT_WITHDRAWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSURANCE\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INS_PER_INVEST\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INS_PER_TRIGGER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"INVESTMENTS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAUNCHED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LOTTERY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerTicket\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winnerUser\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_PERCENT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LOTTERY_RESULTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finished\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_ROUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_USRCNT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMAL_INVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REF_PERCENTAGES\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract tfIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TOPDEPOSITS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TOPREFERRERS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TOPREF_BONUS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"USERS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltrReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_refReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_ltrReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_compounded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WK_REFREWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"contractInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launched\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agg_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_refReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_lottery\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"insBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_insSentAgg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_insRecvAgg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weekIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wk_refReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weekEndsIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct TRUEFUND_V2.Deposit[10]\",\"name\":\"topDeposits\",\"type\":\"tuple[10]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct TRUEFUND_V2.Deposit[10]\",\"name\":\"topReferrers\",\"type\":\"tuple[10]\"},{\"components\":[{\"internalType\":\"enum TRUEFUND_V2.Flags\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt3\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr2\",\"type\":\"address\"}],\"internalType\":\"struct TRUEFUND_V2.History[20]\",\"name\":\"history\",\"type\":\"tuple[20]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerTicket\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winnerUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"internalType\":\"struct TRUEFUND_V2.LotteryInfo\",\"name\":\"lotteryPrev\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerTicket\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winnerUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"internalType\":\"struct TRUEFUND_V2.LotteryInfo\",\"name\":\"lotteryCurr\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"finished\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"internalType\":\"struct TRUEFUND_V2.LotteryResult[20]\",\"name\":\"lotteryResults\",\"type\":\"tuple[20]\"}],\"internalType\":\"struct TRUEFUND_V2.DataContract\",\"name\":\"_dataContract\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"internalType\":\"struct TRUEFUND_V2.DataUser\",\"name\":\"_dataUser\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaderBonusPayouts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketsCount\",\"type\":\"uint256\"}],\"name\":\"lotteryBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_updateParams\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_bonusFunds\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_LOTTERY_USRCNT\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_LOTTERY_PRICE\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_LOTTERY_PERCENT\",\"type\":\"uint16\"}],\"name\":\"lotteryFinish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"moonArch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pullInsurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_FEE_INVEST\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_INS_PER_INVEST\",\"type\":\"uint16\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"userHistory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_canPrev\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_canNext\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"enum TRUEFUND_V2.Flags\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt3\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr2\",\"type\":\"address\"}],\"internalType\":\"struct TRUEFUND_V2.History[10]\",\"name\":\"_history\",\"type\":\"tuple[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUser\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltrReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtFull\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtEarn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtDaily\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beforeCutoff\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"refCounts\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"ht_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_refReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wk_refReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wk_percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_ltrReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_compounded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ht_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryTickets\",\"type\":\"uint256\"}],\"internalType\":\"struct TRUEFUND_V2.DataUserEx\",\"name\":\"_dataUserEx\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum TRUEFUND_V2.Flags\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt3\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr2\",\"type\":\"address\"}],\"internalType\":\"struct TRUEFUND_V2.History[10]\",\"name\":\"_history\",\"type\":\"tuple[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"userReferrals\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"refCounts\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct TRUEFUND_V2.RefUser[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TRUEFUND_V2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://391560d8e3e810e492238cf7d02e44df6d8377dceb293fcf311bc05b1c1c393b"}