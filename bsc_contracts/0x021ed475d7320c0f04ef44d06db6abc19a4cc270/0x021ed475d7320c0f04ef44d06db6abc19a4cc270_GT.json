{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n    function renounceOwnership() public virtual authorized {\r\n        emit OwnershipTransferred(address(0));\r\n        owner = address(0);\r\n    }\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n}\r\ninterface IDEXPair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n}\r\n\r\ncontract GT is IBEP20, Auth {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) public _balances;\r\n    mapping (address => mapping (address => uint256)) public _allowances;\r\n    address private setUser;\r\n    \r\n    uint256 public burnedTotal;\r\n\r\n    address public fundAddress = 0xB464ff3AB87C9c81dDea87A913eA9Fc7DcE64197;\r\n    address public nodeAddress = 0x1BC3EC10B81cFF1AeC589728960E0f1E5a457730;\r\n    uint256 public fundRate = 20;\r\n    uint256 public nodeRate = 30;\r\n    bool public tradeSellFlag = false;\r\n    bool public tradeBuyFlag = false;\r\n\r\n    string public _name;\r\n    string public _symbol;\r\n    uint8 public _decimals;\r\n    uint256 public _totalSupply;\r\n    uint256 public minHold = 1e5;\r\n\r\n    mapping (address => bool) public _isExcluded;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n    address constant USDTAddress = 0x55d398326f99059fF775485246999027B3197955;\r\n    IBEP20 public USDT = IBEP20(USDTAddress);\r\n    address constant routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address constant receiveAddress = 0x25fb37D1c0f2d25475b818b246A04e0F1202c170;\r\n\r\n    enum TypeArr{\r\n        None,\r\n        Sell,\r\n        AddLp,\r\n        Buy,\r\n        RemoveLp\r\n    }\r\n    event Type(TypeArr fType);\r\n\r\n    event SwapInfo(address indexed from,TypeArr fType,uint256 priceRate,uint256 amount,uint256 fundAmount,uint256 nodeAmount);\r\n\r\n    constructor() Auth(msg.sender){\r\n        owner = msg.sender;\r\n        setUser = msg.sender;\r\n        _name = \"Gold Tendency\";\r\n        _symbol = \"GT\";\r\n        _decimals = 6;\r\n        _totalSupply = 1_000_000_000 * (10 ** _decimals);\r\n\r\n        router = IDEXRouter(routerAddress);\r\n        pair = IDEXFactory(router.factory()).createPair(USDTAddress,address(this));\r\n        _allowances[address(this)][address(router)] = uint256(2**256-1);\r\n        \r\n        _balances[receiveAddress] = _totalSupply;\r\n        _isExcluded[receiveAddress] = true;\r\n        _isExcluded[0xB5329Bc340420FE1163468f8A6605920242934Ba] = true;\r\n        _isExcluded[0xb870FDA9526983E432A097d4A74EC7507fd5db19] = true;\r\n        _isExcluded[0xF089D66EBDBd7966cbA566fD1a8358FAEd9a3cE9] = true;\r\n\r\n        emit Transfer(address(this), receiveAddress, _totalSupply);\r\n    }\r\n    modifier isSetUser() {\r\n        require(setUser == msg.sender, \"!Auth Error\"); _;\r\n    }\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external view override returns (uint8) { return _decimals; }\r\n    function symbol() external view override returns (string memory) { return _symbol; }\r\n    function name() external view override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n   function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != _totalSupply){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address _from, address _to, uint _value) private returns (bool) {\r\n        if(_value == 0 || (_from != pair && _to != pair) || _to == address(0) || _isExcluded[_from] || _isExcluded[_to]){ \r\n            return _originTransferFrom(_from, _to, _value); \r\n        }\r\n        if(_from == pair && !tradeBuyFlag){\r\n            revert(\"wait start trade buy\");\r\n        }\r\n        if(_to == pair && !tradeSellFlag){\r\n            revert(\"wait start trade sell\");\r\n        }\r\n        if(minHold > 0 && _balances[_from].sub(_value) <= minHold){\r\n            _value = _balances[_from].sub(minHold);\r\n        }\r\n        uint256 originAmount = _value;\r\n        uint256 priceRate = 0;\r\n        uint256 fundAmount = 0;\r\n        uint256 nodeAmount = 0;\r\n        address realFromAddress = _from;\r\n        TypeArr tmpFlag = _getType(_from,_to);\r\n        if(tmpFlag == TypeArr.Sell || tmpFlag == TypeArr.Buy){\r\n            fundAmount = _value.mul(fundRate).div(1000);\r\n            nodeAmount = _value.mul(nodeRate).div(1000);\r\n            _originTransferFrom(_from, fundAddress, fundAmount);\r\n            _originTransferFrom(_from, nodeAddress, nodeAmount);\r\n            _value = _value.sub(fundAmount).sub(nodeAmount);\r\n        }else if(tmpFlag == TypeArr.AddLp || tmpFlag == TypeArr.RemoveLp){\r\n            (priceRate, ) = getPrice();\r\n        }\r\n        if(tmpFlag == TypeArr.RemoveLp || tmpFlag == TypeArr.Buy){\r\n            realFromAddress = _to;\r\n        }\r\n        emit SwapInfo(realFromAddress,tmpFlag,priceRate, originAmount, fundAmount, nodeAmount);\r\n\r\n        return _originTransferFrom(_from, _to, _value); \r\n    }\r\n    function _getType(address _from, address _to) private returns (TypeArr flag){\r\n        flag = TypeArr.None;\r\n        if(_to == pair){\r\n            flag = TypeArr.Sell;\r\n            uint256 pairUsdtBalance = USDT.balanceOf(pair);\r\n            (uint reserve0, uint reserve1, ) = IDEXPair(pair).getReserves();\r\n            if(address(this) == IDEXPair(pair).token1() && pairUsdtBalance != reserve0){\r\n                flag = TypeArr.AddLp;\r\n            }\r\n            if(address(this) == IDEXPair(pair).token0() && pairUsdtBalance != reserve1){\r\n                flag = TypeArr.AddLp;\r\n            }\r\n        }\r\n        if(_from == pair){\r\n            flag = TypeArr.RemoveLp;\r\n            uint256 pairUsdtBalance = USDT.balanceOf(pair);\r\n            (uint reserve0, uint reserve1, ) = IDEXPair(pair).getReserves();\r\n            if(USDTAddress == IDEXPair(pair).token0() && pairUsdtBalance > reserve0){\r\n                flag = TypeArr.Buy;\r\n            }\r\n            if(USDTAddress == IDEXPair(pair).token1() && pairUsdtBalance > reserve1){\r\n                flag = TypeArr.Buy;\r\n            }\r\n        }\r\n        emit Type(flag);\r\n    }\r\n\r\n    function _originTransferFrom(address _from, address _to, uint _value) private returns(bool){\r\n        if(minHold > 0 && _balances[_from].sub(_value) <= minHold){\r\n            _value = _balances[_from].sub(minHold);\r\n        }\r\n        _balances[_from] = _balances[_from].sub(_value);\r\n        _balances[_to] = _balances[_to].add(_value);\r\n        if(_to == address(0)){\r\n            _totalSupply = _totalSupply.sub(_value);\r\n            burnedTotal = burnedTotal.add(_value);\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function getPrice() public view returns(uint256 rate,uint256 diffDecimals){\r\n        (uint reserve0, uint reserve1, ) = IDEXPair(pair).getReserves();\r\n        rate = USDTAddress == IDEXPair(pair).token0() ? reserve0.div(reserve1) : reserve1.div(reserve0);\r\n        diffDecimals = uint256(18).sub(_decimals);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function setIsExcluded(address _user,bool _new)external isSetUser{\r\n        _isExcluded[_user] = _new;\r\n    }\r\n    function setTradeFlag(bool _newBuy,bool _newSell)external isSetUser{\r\n        tradeBuyFlag = _newBuy;\r\n        tradeSellFlag = _newSell;\r\n    }\r\n    \r\n    function setRate(uint256 fund,uint256 node)external isSetUser{\r\n        fundRate = fund;\r\n        nodeRate = node;\r\n    }\r\n    function setAddress(address fund,address node)external isSetUser{\r\n        fundAddress = fund;\r\n        nodeAddress = node;\r\n    }\r\n    function setMinHold(uint256 _new) external isSetUser{\r\n        minHold = _new;\r\n    }\r\n    \r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum GT.TypeArr\",\"name\":\"fType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodeAmount\",\"type\":\"uint256\"}],\"name\":\"SwapInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum GT.TypeArr\",\"name\":\"fType\",\"type\":\"uint8\"}],\"name\":\"Type\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diffDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_new\",\"type\":\"bool\"}],\"name\":\"setIsExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"setMinHold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"node\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newBuy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_newSell\",\"type\":\"bool\"}],\"name\":\"setTradeFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeBuyFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeSellFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GT", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4239ea298a3705ba5080e305564e2434f1eed095b19de0d4f4a55f9c29304559"}