{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-08-21\r\n*/\r\n\r\n/**\r\n *Submitted for verification at bscscan.com on 2023-06-03\r\n*/\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/1_Storage.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract AirdropContract {\r\n    address public owner;\r\n    address public tokenAddress;\r\n    uint256 public airdropAmount;\r\n    mapping(address => bool) public hasClaimed;\r\n    mapping(address => uint8) public whitelistCategory;\r\n\r\n    event AirdropClaimed(address recipient, uint256 amount);\r\n    event BNBWithdrawn(address recipient, uint256 amount);\r\n    event TokensWithdrawn(address recipient, uint256 amount);\r\n    event AddressAddedToWhitelist(address indexed account, uint8 category);\r\n    event AddressRemovedFromWhitelist(address indexed account);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        tokenAddress = 0xA4BbBE9856724dD5D766BA6Ea858e54953cb7bbe;\r\n        airdropAmount = 2000000000000 * 10**18; // Airdrop\r\n    }\r\n\r\n    receive() external payable {\r\n        claimAirdrop();\r\n    }\r\n\r\n    function claimAirdrop() public {\r\n        require(whitelistCategory[msg.sender] > 0, \"Address not whitelisted\");\r\n        require(!hasClaimed[msg.sender], \"Airdrop already claimed\");\r\n\r\n        uint256 airdropAmountToClaim = checkAirdropAmount(msg.sender);\r\n        require(airdropAmountToClaim > 0, \"No airdrop available for this address\");\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(token.transfer(msg.sender, airdropAmountToClaim), \"Airdrop transfer failed\");\r\n\r\n        hasClaimed[msg.sender] = true;\r\n        emit AirdropClaimed(msg.sender, airdropAmountToClaim);\r\n    }\r\n\r\n    function withdrawBNB() public {\r\n        require(msg.sender == owner, \"Only the contract owner can withdraw BNB\");\r\n        uint256 contractBalance = address(this).balance;\r\n        require(contractBalance > 0, \"No BNB to withdraw\");\r\n\r\n        payable(msg.sender).transfer(contractBalance);\r\n        emit BNBWithdrawn(msg.sender, contractBalance);\r\n    }\r\n\r\n    function withdrawRemainingTokens() public {\r\n        require(msg.sender == owner, \"Only the contract owner can withdraw remaining tokens\");\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 contractBalance = token.balanceOf(address(this));\r\n        require(contractBalance > 0, \"No tokens to withdraw\");\r\n\r\n        require(token.transfer(msg.sender, contractBalance), \"Token transfer failed\");\r\n        emit TokensWithdrawn(msg.sender, contractBalance);\r\n    }\r\n\r\n    function addAddressesToWhitelist(address[] calldata newAddresses, uint8 category) public {\r\n        require(msg.sender == owner, \"Only the contract owner can modify the whitelist\");\r\n        require(category > 0 && category <= 3, \"Invalid category\");\r\n        \r\n        for (uint256 i = 0; i < newAddresses.length; i++) {\r\n            address newAddress = newAddresses[i];\r\n            whitelistCategory[newAddress] = category;\r\n            emit AddressAddedToWhitelist(newAddress, category);\r\n        }\r\n    }\r\n\r\n    function removeFromWhitelist(address addressToRemove) public {\r\n        require(msg.sender == owner, \"Only the contract owner can modify the whitelist\");\r\n        whitelistCategory[addressToRemove] = 0;\r\n        emit AddressRemovedFromWhitelist(addressToRemove);\r\n    }\r\n\r\n    function checkAirdropAmount(address user) public view returns (uint256) {\r\n        uint8 category = whitelistCategory[user];\r\n        if (category > 0 && !hasClaimed[user]) {\r\n            if (category == 1) {\r\n                return 14020000000 * 10**18; // 14.02 billion tokens\r\n            } else if (category == 2) {\r\n                return 8350000000 * 10**18; // 8.35 billion tokens\r\n            } else if (category == 3) {\r\n                return 4670000000 * 10**18; // 4.67 billion tokens\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"AddressAddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressRemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BNBWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkAirdropAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToRemove\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistCategory\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRemainingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AirdropContract", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9d69a32e66fd72ef57db38e039f1be51b64f7733dc291a6b18f2129c9ee22b4d"}