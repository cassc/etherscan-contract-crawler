{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface INFT {\r\n    function mint(address to, uint256 num) external;\r\n}\r\n\r\ninterface IMintPool {\r\n    function bindInvitor(address account, address invitor) external;\r\n\r\n    function _invitor(address account) external view returns (address invitor);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IToken {\r\n    function addUserLPAmount(address account, uint256 lpAmount) external;\r\n}\r\n\r\nabstract contract AbsPreSale is Ownable {\r\n    struct SaleInfo {\r\n        uint256 price;\r\n        uint256 w3nAmount;\r\n        uint256 saleNum;\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256 buyAmount;\r\n        uint256 saleInviteAccount;\r\n        uint256 claimedNFTNum;\r\n        uint256 lockedLPAmount;\r\n        uint256 claimedLPAmount;\r\n    }\r\n\r\n    SaleInfo[] private _saleInfo;\r\n    mapping(address => UserInfo) private _userInfo;\r\n\r\n    bool private _pauseBuy = true;\r\n    bool private _pauseClaim = true;\r\n    address public _w3n;\r\n    address public _moss;\r\n    address public _cashAddress;\r\n\r\n    uint256 public _totalBNB;\r\n    address public _nftAddress;\r\n    uint256 private _rewardNFTCondition = 10;\r\n\r\n    uint256 public _w3nRate = 7000;\r\n    uint256 public _mossRate = 2000;\r\n    uint256 public _w3nUserRate = 5000;\r\n    uint256 public _lpReleaseTime;\r\n    uint256 public _lpReleaseDuration = 15 days;\r\n\r\n    IMintPool public _mintPool;\r\n    ISwapRouter public immutable _swapRouter;\r\n    address public immutable _weth;\r\n    address public _w3nLP;\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    constructor(\r\n        address RouterAddress, address W3NAddress, address MOSSAddress,\r\n        address NFTAddress, address CashAddress\r\n    ){\r\n        _swapRouter = ISwapRouter(RouterAddress);\r\n        _weth = _swapRouter.WETH();\r\n\r\n        _w3n = W3NAddress;\r\n        _moss = MOSSAddress;\r\n        _nftAddress = NFTAddress;\r\n        _cashAddress = CashAddress;\r\n\r\n        uint256 w3nUnit = 10 ** IERC20(W3NAddress).decimals();\r\n        _saleInfo.push(SaleInfo(4 ether / 10, 70 * w3nUnit, 0));\r\n        _saleInfo.push(SaleInfo(12 ether / 10, 210 * w3nUnit, 0));\r\n        _saleInfo.push(SaleInfo(2 ether, 350 * w3nUnit, 0));\r\n\r\n        IERC20(W3NAddress).approve(RouterAddress, MAX);\r\n        IERC20(MOSSAddress).approve(RouterAddress, MAX);\r\n    }\r\n\r\n    function buy(uint256 saleId, address invitor) external payable {\r\n        require(!_pauseBuy, \"pauseBuy\");\r\n        address account = msg.sender;\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        require(0 == userInfo.buyAmount, \"joined\");\r\n\r\n        _mintPool.bindInvitor(account, invitor);\r\n\r\n        SaleInfo storage sale = _saleInfo[saleId];\r\n        sale.saleNum += 1;\r\n        uint256 price = sale.price;\r\n        require(msg.value >= price, \"invalid value\");\r\n        uint256 cashEth = price;\r\n        userInfo.buyAmount += price;\r\n        _totalBNB += price;\r\n\r\n        uint256 w3nLPETH = price * _w3nRate / 10000;\r\n        cashEth -= w3nLPETH;\r\n        uint256 nowTime = block.timestamp;\r\n        (,,uint256 w3nLPAmount) = _swapRouter.addLiquidityETH{value : w3nLPETH}(_w3n, sale.w3nAmount, 0, 0, address(this), nowTime);\r\n        uint256 userLPAmount = w3nLPAmount * _w3nUserRate / _w3nRate;\r\n        userInfo.lockedLPAmount += userLPAmount;\r\n\r\n        w3nLPAmount -= userLPAmount;\r\n        address cashAddress = _cashAddress;\r\n        if (w3nLPAmount > 0) {\r\n            IERC20(_w3nLP).transfer(cashAddress, w3nLPAmount);\r\n        }\r\n\r\n        uint256 mossLPETH = price * _mossRate / 10000;\r\n        if (mossLPETH > 0) {\r\n            cashEth -= mossLPETH;\r\n            mossLPETH = mossLPETH / 2;\r\n            address moss = _moss;\r\n            uint256 mossAmount = IERC20(moss).balanceOf(address(this));\r\n            address[] memory path = new address[](2);\r\n            path[0] = _weth;\r\n            path[1] = moss;\r\n            _swapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value : mossLPETH}(\r\n                0, path, address(this), nowTime\r\n            );\r\n            mossAmount = IERC20(moss).balanceOf(address(this)) - mossAmount;\r\n            _swapRouter.addLiquidityETH{value : mossLPETH}(moss, mossAmount, 0, 0, cashAddress, nowTime);\r\n        }\r\n\r\n        if (cashEth > 0) {\r\n            payable(cashAddress).transfer(cashEth);\r\n        }\r\n\r\n        _calNFTReward(account);\r\n    }\r\n\r\n    function _calNFTReward(address account) private {\r\n        address invitor = _mintPool._invitor(account);\r\n        if (address(0) != invitor) {\r\n            UserInfo storage invitorInfo = _userInfo[invitor];\r\n            uint256 saleInviteAccount = invitorInfo.saleInviteAccount;\r\n            saleInviteAccount += 1;\r\n            invitorInfo.saleInviteAccount = saleInviteAccount;\r\n            uint256 nftNum = saleInviteAccount / _rewardNFTCondition;\r\n            uint256 claimedNFTNum = invitorInfo.claimedNFTNum;\r\n            if (nftNum > claimedNFTNum) {\r\n                invitorInfo.claimedNFTNum = nftNum;\r\n                INFT(_nftAddress).mint(invitor, nftNum - claimedNFTNum);\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimLP() external {\r\n        address account = msg.sender;\r\n        require(!_pauseClaim, \"pauseClaim\");\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        uint256 pendingLP = getReleaseLPAmount(account) - userInfo.claimedLPAmount;\r\n        require(pendingLP > 0, \"no reward\");\r\n        userInfo.claimedLPAmount += pendingLP;\r\n        _giveToken(_w3nLP, account, pendingLP);\r\n        IToken(_w3n).addUserLPAmount(account, pendingLP);\r\n    }\r\n\r\n    function _giveToken(address tokenAddress, address account, uint256 tokenNum) private {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(token.balanceOf(address(this)) >= tokenNum, \"PTNE\");\r\n        token.transfer(account, tokenNum);\r\n    }\r\n\r\n    function allSaleInfo() external view returns (\r\n        uint256[] memory price, uint256[] memory w3nAmount,\r\n        uint256[] memory saleNum\r\n    ) {\r\n        uint256 len = _saleInfo.length;\r\n        price = new uint256[](len);\r\n        w3nAmount = new uint256[](len);\r\n        saleNum = new uint256[](len);\r\n        for (uint256 i; i < len; i++) {\r\n            SaleInfo memory sale = _saleInfo[i];\r\n            price[i] = sale.price;\r\n            w3nAmount[i] = sale.w3nAmount;\r\n            saleNum[i] = sale.saleNum;\r\n        }\r\n    }\r\n\r\n    function shopInfo() external view returns (\r\n        bool pauseBuy, bool pauseClaim, uint256 rewardNFTCondition\r\n    ){\r\n        pauseBuy = _pauseBuy;\r\n        pauseClaim = _pauseClaim;\r\n        rewardNFTCondition = _rewardNFTCondition;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    modifier onlyWhiteList() {\r\n        address msgSender = msg.sender;\r\n        require(msgSender == _cashAddress || msgSender == _owner, \"nw\");\r\n        _;\r\n    }\r\n\r\n    function setW3nRate(uint256 r) external onlyWhiteList {\r\n        _w3nRate = r;\r\n        require(_w3nRate + _mossRate <= 10000, \"Mw\");\r\n    }\r\n\r\n    function setMossRate(uint256 r) external onlyWhiteList {\r\n        _mossRate = r;\r\n        require(_w3nRate + _mossRate <= 10000, \"Mw\");\r\n    }\r\n\r\n    function setW3nUserRate(uint256 r) external onlyWhiteList {\r\n        _w3nUserRate = r;\r\n        require(_w3nUserRate <= _mossRate, \"Mm\");\r\n    }\r\n\r\n    function setCash(address adr) external onlyWhiteList {\r\n        _cashAddress = adr;\r\n    }\r\n\r\n    function setMintPool(address adr) external onlyWhiteList {\r\n        _mintPool = IMintPool(adr);\r\n    }\r\n\r\n    function setW3N(address adr) external onlyWhiteList {\r\n        _w3n = adr;\r\n        IERC20(adr).approve(address(_swapRouter), MAX);\r\n    }\r\n\r\n    function setW3NLP(address adr) external onlyWhiteList {\r\n        _w3nLP = adr;\r\n    }\r\n\r\n    function setMOSS(address adr) external onlyWhiteList {\r\n        _moss = adr;\r\n        IERC20(adr).approve(address(_swapRouter), MAX);\r\n    }\r\n\r\n    function setNFTAddress(address adr) external onlyWhiteList {\r\n        _nftAddress = adr;\r\n    }\r\n\r\n    function setPauseBuy(bool pause) external onlyWhiteList {\r\n        if (!pause) {\r\n            address w3nLP = ISwapFactory(_swapRouter.factory()).getPair(_w3n, _weth);\r\n            require(address(0) != w3nLP, \"no w3nLP\");\r\n            _w3nLP = w3nLP;\r\n        }\r\n        _pauseBuy = pause;\r\n    }\r\n\r\n    function setPauseClaim(bool pause) external onlyWhiteList {\r\n        _pauseClaim = pause;\r\n    }\r\n\r\n    function setRewardNFTCondition(uint256 num) external onlyWhiteList {\r\n        require(num > 0, \"N0\");\r\n        _rewardNFTCondition = num;\r\n    }\r\n\r\n    function setPrice(uint256 saleId, uint256 price) external onlyWhiteList {\r\n        _saleInfo[saleId].price = price;\r\n    }\r\n\r\n    function setW3NAmount(uint256 saleId, uint256 amount) external onlyWhiteList {\r\n        _saleInfo[saleId].w3nAmount = amount;\r\n    }\r\n\r\n    function setLPReleaseTime(uint256 t) external onlyWhiteList {\r\n        _lpReleaseTime = t;\r\n    }\r\n\r\n    function startLPRelease() external onlyWhiteList {\r\n        require(_lpReleaseTime == 0, \"started\");\r\n        _lpReleaseTime = block.timestamp;\r\n    }\r\n\r\n    function setLPReleaseDuration(uint256 d) external onlyWhiteList {\r\n        require(d > 0, \"N0\");\r\n        _lpReleaseDuration = d;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        address payable addr = payable(_cashAddress);\r\n        addr.transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address erc20Address) external onlyWhiteList {\r\n        IERC20 erc20 = IERC20(erc20Address);\r\n        erc20.transfer(_cashAddress, erc20.balanceOf(address(this)));\r\n    }\r\n\r\n    function getUserInfo(address account) external view returns (\r\n        uint256 buyAmount,\r\n        uint256 balance,\r\n        uint256 saleInviteAccount,\r\n        uint256 claimedNFTNum,\r\n        uint256 lockedLPAmount,\r\n        uint256 claimedLPAmount,\r\n        uint256 releaseLPAmount\r\n    ){\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        buyAmount = userInfo.buyAmount;\r\n        balance = account.balance;\r\n        saleInviteAccount = userInfo.saleInviteAccount;\r\n        claimedNFTNum = userInfo.claimedNFTNum;\r\n        lockedLPAmount = userInfo.lockedLPAmount;\r\n        claimedLPAmount = userInfo.claimedLPAmount;\r\n        releaseLPAmount = getReleaseLPAmount(account);\r\n    }\r\n\r\n    function getReleaseLPAmount(address account) public view returns (uint256 releaseLPAmount){\r\n        uint256 lpReleaseTime = _lpReleaseTime;\r\n        if (lpReleaseTime > 0) {\r\n            uint256 nowTime = block.timestamp;\r\n            if (nowTime > lpReleaseTime) {\r\n                UserInfo storage userInfo = _userInfo[account];\r\n                uint256 lockedLPAmount = userInfo.lockedLPAmount;\r\n                releaseLPAmount = lockedLPAmount * (nowTime - lpReleaseTime) / _lpReleaseDuration;\r\n                if (releaseLPAmount > lockedLPAmount) {\r\n                    releaseLPAmount = lockedLPAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract TokenSale is AbsPreSale {\r\n    constructor() AbsPreSale(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    //W3N\r\n        address(0xbCcA7317D95Fe1F420a9f3C4CECa4E7F24045333),\r\n    //MOSS\r\n        address(0xC651Cf5Dd958B6D7E4c417F1f366659237C34166),\r\n    //WarNFT\r\n        address(0xeCd07e4D240A9Dd8111c7ae7Bc6bd3a00FB0c8Ad),\r\n    //Cash\r\n        address(0x26944342DE6c482bc5f93Fa094dE659DA2433639)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_cashAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpReleaseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintPool\",\"outputs\":[{\"internalType\":\"contract IMintPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_moss\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mossRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_w3n\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_w3nLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_w3nRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_w3nUserRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allSaleInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"price\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"w3nAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"saleNum\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReleaseLPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"releaseLPAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleInviteAccount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedNFTNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedLPAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedLPAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseLPAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setCash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setLPReleaseDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setLPReleaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setMOSS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setMintPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setMossRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"setPauseBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"setPauseClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setRewardNFTCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setW3N\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setW3NAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setW3NLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setW3nRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setW3nUserRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shopInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"pauseBuy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseClaim\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardNFTCondition\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLPRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TokenSale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ee945bacbbcc26b6764e7f1830cdf5ddd6b35b1110fdd17c450eb1b1d879fded"}