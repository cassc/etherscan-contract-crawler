{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.16;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n}\r\n\r\ncontract PizzaTower {\r\n    struct Tower {\r\n        uint256 coins;\r\n        uint256 money;\r\n        uint256 money2;\r\n        uint256 yield;\r\n        uint256 timestamp;\r\n        uint256 hrs;\r\n        address ref;\r\n        uint256[3] refs;\r\n        uint256[3] refDeps;\r\n        uint8[8] chefs;\r\n        uint256 totalCoinsSpend;\r\n        uint256 totalMoneyReceived;\r\n    }\r\n    mapping(address => Tower) public towers;\r\n    uint256 public totalChefs;\r\n    uint256 public totalTowers;\r\n    uint256 public totalInvested;\r\n    address public manager = 0x4439783Efa4B079485ff2e47B7e97825b6801C1a;\r\n    uint256 public startUNIX;\r\n    uint256[] refPercent = [8,5,2];\r\n    IERC20 usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n  \r\n    constructor(uint256 startDate){\r\n        require(startDate > 0);\r\n        startUNIX = startDate;\r\n    }\r\n\r\n    function addCoins(address ref,uint256 tokenAmount) public {\r\n        usdt.transferFrom(msg.sender, address(this), tokenAmount);\r\n        require(block.timestamp > startUNIX, \"We are not live yet!\");\r\n        uint256 coins = tokenAmount / 1e16;\r\n        require(coins > 0, \"Zero coins\");\r\n        address user = msg.sender;\r\n        totalInvested += tokenAmount;\r\n        bool isNew;\r\n        if (towers[user].timestamp == 0) {\r\n            totalTowers++;\r\n            ref = towers[ref].timestamp == 0 ? manager : ref;\r\n            isNew = true;\r\n            towers[user].ref = ref;\r\n            towers[user].timestamp = block.timestamp;\r\n        }\r\n        refEarning(user, coins,isNew);\r\n        towers[user].coins += coins;\r\n        usdt.transfer(manager,(tokenAmount * 10) / 100);\r\n    }\r\n\r\n    function refEarning(address user,uint256 coins,bool isNew) internal\r\n    {\r\n        uint8 i =0;\r\n        address ref = towers[user].ref;\r\n        while(i<3){\r\n            if(ref==address(0)){\r\n                break;\r\n            } \r\n            if(isNew){\r\n                towers[ref].refs[i]++;\r\n            }\r\n            uint256 refTemp = coins * refPercent[i] / 100;\r\n            towers[ref].coins += (refTemp * 70) / 100;\r\n            towers[ref].money += (refTemp * 100 * 30) / 100;\r\n            towers[ref].refDeps[i] += refTemp;\r\n            i++;\r\n            ref = towers[ref].ref;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function withdrawMoney() public {\r\n        address user = msg.sender;\r\n        uint256 money = towers[user].money;\r\n        towers[user].money = 0;\r\n        uint256 amount = money * 1e14;\r\n        usdt.transfer(user,usdt.balanceOf(address(this)) < amount ? usdt.balanceOf(address(this)) : amount);\r\n    }\r\n\r\n    function collectMoney() public {\r\n        address user = msg.sender;\r\n        syncTower(user);\r\n        towers[user].hrs = 0;\r\n        towers[user].money += towers[user].money2;\r\n        \r\n        towers[user].money2 = 0;\r\n    }\r\n\r\n    function upgradeTower(uint256 floorId) public {\r\n        require(floorId < 8, \"Max 8 floors\");\r\n        address user = msg.sender;\r\n        if(floorId>0){\r\n        require(towers[user].chefs[floorId-1]>=5,\"Need to buy previous tower\");\r\n        }\r\n        syncTower(user);\r\n        towers[user].chefs[floorId]++;\r\n        totalChefs++;\r\n        uint256 chefs = towers[user].chefs[floorId];\r\n        towers[user].coins -= getUpgradePrice(floorId, chefs);\r\n        towers[user].totalCoinsSpend += getUpgradePrice(floorId, chefs);\r\n        towers[user].yield += getYield(floorId, chefs);\r\n    }\r\n\r\n\r\n    function getChefs(address addr) public view returns (uint8[8] memory) {\r\n        return towers[addr].chefs;\r\n    }\r\n\r\n    function getRefEarning(address addr) public view returns (uint256[3] memory _refEarning,uint256[3] memory _refCount) {\r\n        return (towers[addr].refDeps,towers[addr].refs);\r\n    }\r\n\r\n    function syncTower(address user) internal {\r\n        require(towers[user].timestamp > 0, \"User is not registered\");\r\n        if (towers[user].yield > 0) {\r\n            uint256 hrs = block.timestamp / 3600 - towers[user].timestamp / 3600;\r\n            if (hrs + towers[user].hrs > 24) {\r\n                hrs = 24 - towers[user].hrs;\r\n            }\r\n            uint256 yield = hrs * towers[user].yield;\r\n            if((towers[user].totalMoneyReceived+yield) > ((towers[user].totalCoinsSpend)*200)){\r\n                 towers[user].money2 += (towers[user].totalCoinsSpend*200)-(towers[user].totalMoneyReceived);\r\n                 towers[user].totalMoneyReceived += (towers[user].totalCoinsSpend*200)-(towers[user].totalMoneyReceived);\r\n                 towers[user].yield = 0;\r\n                 for(uint8 i=0;i<8;i++){\r\n                        towers[user].chefs[i]=0;\r\n                 }\r\n            }else{\r\n                towers[user].money2 += yield;\r\n                towers[user].totalMoneyReceived += yield;\r\n            }\r\n            towers[user].hrs += hrs;\r\n        }\r\n        towers[user].timestamp = block.timestamp;\r\n    }\r\n\r\n    function getUpgradePrice(uint256 floorId, uint256 chefId) internal pure returns (uint256) {\r\n        if (chefId == 1) return [500, 1500, 4500, 13500, 40500, 120000, 365000, 1000000][floorId];\r\n        if (chefId == 2) return [625, 1800, 5600, 16800, 50600, 150000, 456000, 1200000][floorId];\r\n        if (chefId == 3) return [780, 2300, 7000, 21000, 63000, 187000, 570000, 1560000][floorId];\r\n        if (chefId == 4) return [970, 3000, 8700, 26000, 79000, 235000, 713000, 2000000][floorId];\r\n        if (chefId == 5) return [1200, 3600, 11000, 33000, 98000, 293000, 890000, 2500000][floorId];\r\n        revert(\"Incorrect chefId\");\r\n    }\r\n\r\n    function getYield(uint256 floorId, uint256 chefId) internal pure returns (uint256) {\r\n        if (chefId == 1) return [41, 130, 399, 1220, 3750, 11400, 36200, 104000][floorId];\r\n        if (chefId == 2) return [52, 157, 498, 1530, 4700, 14300, 45500, 126500][floorId];\r\n        if (chefId == 3) return [65, 201, 625, 1920, 5900, 17900, 57200, 167000][floorId];\r\n        if (chefId == 4) return [82, 264, 780, 2380, 7400, 22700, 72500, 216500][floorId];\r\n        if (chefId == 5) return [103, 318, 995, 3050, 9300, 28700, 91500, 275000][floorId];\r\n        revert(\"Incorrect chefId\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getChefs\",\"outputs\":[{\"internalType\":\"uint8[8]\",\"name\":\"\",\"type\":\"uint8[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getRefEarning\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"_refEarning\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_refCount\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startUNIX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChefs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"towers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"money\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"money2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hrs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalCoinsSpend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMoneyReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"floorId\",\"type\":\"uint256\"}],\"name\":\"upgradeTower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PizzaTower", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000064eb41c8", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f4cee3e2712a98f1d58f30df9b38101c196c67ee2d76ed0bd4dc2eda6d62c8d9"}