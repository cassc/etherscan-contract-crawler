{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/ApeSwapZapFullV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity 0.8.15;\\r\\n\\r\\n/*\\r\\n  ______                     ______                                 \\r\\n /      \\\\                   /      \\\\                                \\r\\n|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\ ______   ______ |  \u2593\u2593\u2593\u2593\u2593\u2593\\\\__   __   __  ______   ______  \\r\\n| \u2593\u2593__| \u2593\u2593/      \\\\ /      \\\\| \u2593\u2593___\\\\\u2593\u2593  \\\\ |  \\\\ |  \\\\|      \\\\ /      \\\\ \\r\\n| \u2593\u2593    \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\\\\u2593\u2593    \\\\| \u2593\u2593 | \u2593\u2593 | \u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\r\\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593_\\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\ \u2593\u2593 | \u2593\u2593 | \u2593\u2593/      \u2593\u2593 \u2593\u2593  | \u2593\u2593\\r\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593__/ \u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\__| \u2593\u2593 \u2593\u2593_/ \u2593\u2593_/ \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593__/ \u2593\u2593\\r\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593\\\\\u2593\u2593     \\\\\\\\\u2593\u2593    \u2593\u2593\\\\\u2593\u2593   \u2593\u2593   \u2593\u2593\\\\\u2593\u2593    \u2593\u2593 \u2593\u2593    \u2593\u2593\\r\\n \\\\\u2593\u2593   \\\\\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\\\\\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\r\\n         | \u2593\u2593                                             | \u2593\u2593      \\r\\n         | \u2593\u2593                                             | \u2593\u2593      \\r\\n          \\\\\u2593\u2593                                              \\\\\u2593\u2593         \\r\\n\\r\\n * App:             https://apeswap.finance\\r\\n * Medium:          https://ape-swap.medium.com\\r\\n * Twitter:         https://twitter.com/ape_swap\\r\\n * Discord:         https://discord.com/invite/apeswap\\r\\n * Telegram:        https://t.me/ape_swap\\r\\n * Announcements:   https://t.me/ape_swap_news\\r\\n * GitHub:          https://github.com/ApeSwapFinance\\r\\n */\\r\\n\\r\\nimport \\\"./ApeSwapZap.sol\\\";\\r\\nimport \\\"./extensions/bills/ApeSwapZapTBills.sol\\\";\\r\\nimport \\\"./extensions/ApeSwapZapLPMigrator.sol\\\";\\r\\nimport \\\"./extensions/pools/ApeSwapZapPools.sol\\\";\\r\\nimport \\\"./extensions/pools/lib/ITreasury.sol\\\";\\r\\nimport \\\"./lib/IApeRouter02.sol\\\";\\r\\n\\r\\ncontract ApeSwapZapFullV1 is\\r\\n    ApeSwapZap,\\r\\n    ApeSwapZapTBills,\\r\\n    ApeSwapZapLPMigrator,\\r\\n    ApeSwapZapPools\\r\\n{\\r\\n    constructor(IApeRouter02 _router, ITreasury _goldenBananaTreasury)\\r\\n        ApeSwapZap(_router)\\r\\n        ApeSwapZapLPMigrator(_router)\\r\\n        ApeSwapZapPools(_goldenBananaTreasury)\\r\\n    {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/lib/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n pragma solidity 0.8.15;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/lib/IApeRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n pragma solidity 0.8.15;\\r\\n\\r\\nimport \\\"./IApeRouter01.sol\\\";\\r\\n\\r\\ninterface IApeRouter02 is IApeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/lib/IApeRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n pragma solidity 0.8.15;\\r\\n\\r\\ninterface IApeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/lib/IApePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity >=0.6.6;\\r\\n\\r\\ninterface IApePair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/lib/IApeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity >=0.6.6;\\r\\n\\r\\ninterface IApeFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/extensions/pools/lib/ITreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ITreasury {\\r\\n    function adminAddress() external view returns (address);\\r\\n\\r\\n    function banana() external view returns (IERC20);\\r\\n\\r\\n    function bananaReserves() external view returns (uint256);\\r\\n\\r\\n    function buy(uint256 _amount) external;\\r\\n\\r\\n    function buyFee() external view returns (uint256);\\r\\n\\r\\n    function emergencyWithdraw(uint256 _amount) external;\\r\\n\\r\\n    function goldenBanana() external view returns (IERC20);\\r\\n\\r\\n    function goldenBananaReserves() external view returns (uint256);\\r\\n\\r\\n    function maxBuyFee() external view returns (uint256);\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function renounceOwnership() external;\\r\\n\\r\\n    function sell(uint256 _amount) external;\\r\\n\\r\\n    function setAdmin(address _adminAddress) external;\\r\\n\\r\\n    function setBuyFee(uint256 _fee) external;\\r\\n\\r\\n    function transferOwnership(address newOwner) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/extensions/pools/lib/IBEP20RewardApeV5.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; \\r\\n\\r\\ninterface IBEP20RewardApeV5 {\\r\\n    function REWARD_TOKEN() external view returns (IERC20);\\r\\n\\r\\n    function STAKE_TOKEN() external view returns (IERC20);\\r\\n\\r\\n    function bonusEndBlock() external view returns (uint256);\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function poolInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address lpToken,\\r\\n            uint256 allocPoint,\\r\\n            uint256 lastRewardBlock,\\r\\n            uint256 accRewardTokenPerShare\\r\\n        );\\r\\n\\r\\n    function renounceOwnership() external;\\r\\n\\r\\n    function rewardPerBlock() external view returns (uint256);\\r\\n\\r\\n    function startBlock() external view returns (uint256);\\r\\n\\r\\n    function totalRewardsAllocated() external view returns (uint256);\\r\\n\\r\\n    function totalRewardsPaid() external view returns (uint256);\\r\\n\\r\\n    function totalStaked() external view returns (uint256);\\r\\n\\r\\n    function transferOwnership(address newOwner) external;\\r\\n\\r\\n    function userInfo(address)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 amount, uint256 rewardDebt);\\r\\n\\r\\n    function initialize(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _bonusEndBlock\\r\\n    ) external;\\r\\n\\r\\n    function getMultiplier(uint256 _from, uint256 _to)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function setBonusEndBlock(uint256 _bonusEndBlock) external;\\r\\n\\r\\n    function pendingReward(address _user) external view returns (uint256);\\r\\n\\r\\n    function updatePool() external;\\r\\n\\r\\n    function deposit(uint256 _amount) external;\\r\\n\\r\\n    function depositTo(uint256 _amount, address _user) external;\\r\\n\\r\\n    function withdraw(uint256 _amount) external;\\r\\n\\r\\n    function rewardBalance() external view returns (uint256);\\r\\n\\r\\n    function getUnharvestedRewards() external view returns (uint256);\\r\\n\\r\\n    function depositRewards(uint256 _amount) external;\\r\\n\\r\\n    function totalStakeTokenBalance() external view returns (uint256);\\r\\n\\r\\n    function getStakeTokenFeeBalance() external view returns (uint256);\\r\\n\\r\\n    function setRewardPerBlock(uint256 _rewardPerBlock) external;\\r\\n\\r\\n    function skimStakeTokenFees(address _to) external;\\r\\n\\r\\n    function emergencyWithdraw() external;\\r\\n\\r\\n    function emergencyRewardWithdraw(uint256 _amount) external;\\r\\n\\r\\n    function sweepToken(address token) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/extensions/pools/ApeSwapZapPools.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../ApeSwapZap.sol\\\";\\r\\nimport \\\"./lib/IBEP20RewardApeV5.sol\\\";\\r\\nimport \\\"./lib/ITreasury.sol\\\";\\r\\n\\r\\nabstract contract ApeSwapZapPools is ApeSwapZap {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IERC20 public immutable BANANA;\\r\\n    IERC20 public immutable GNANA;\\r\\n    ITreasury public immutable GNANA_TREASURY; // Golden Banana Treasury\\r\\n\\r\\n    event ZapLPPool(\\r\\n        IERC20 inputToken,\\r\\n        uint256 inputAmount,\\r\\n        IBEP20RewardApeV5 pool\\r\\n    );\\r\\n    event ZapLPPoolNative(uint256 inputAmount, IBEP20RewardApeV5 pool);\\r\\n    event ZapSingleAssetPool(\\r\\n        IERC20 inputToken,\\r\\n        uint256 inputAmount,\\r\\n        IBEP20RewardApeV5 pool\\r\\n    );\\r\\n    event ZapSingleAssetPoolNative(\\r\\n        uint256 inputAmount,\\r\\n        IBEP20RewardApeV5 pool\\r\\n    );\\r\\n\\r\\n    constructor(ITreasury goldenBananaTreasury) {\\r\\n        /// @dev Can't access immutable variables in constructor\\r\\n        ITreasury gnanaTreasury = goldenBananaTreasury;\\r\\n        GNANA_TREASURY = gnanaTreasury;\\r\\n        BANANA = gnanaTreasury.banana();\\r\\n        GNANA = gnanaTreasury.goldenBanana();\\r\\n    }\\r\\n\\r\\n    /// @notice Zap token into banana/gnana pool\\r\\n    /// @param inputToken Input token to zap\\r\\n    /// @param inputAmount Amount of input tokens to zap\\r\\n    /// @param path Path from input token to stake token\\r\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\r\\n    /// @param deadline Unix timestamp after which the transaction will revert\\r\\n    /// @param pool Pool address\\r\\n    function zapSingleAssetPool(\\r\\n        IERC20 inputToken,\\r\\n        uint256 inputAmount,\\r\\n        address[] calldata path,\\r\\n        uint256 minAmountsSwap,\\r\\n        uint256 deadline,\\r\\n        IBEP20RewardApeV5 pool\\r\\n    ) external nonReentrant {\\r\\n        uint256 balanceBefore = _getBalance(inputToken);\\r\\n        inputToken.safeTransferFrom(msg.sender, address(this), inputAmount);\\r\\n        inputAmount = _getBalance(inputToken) - balanceBefore;\\r\\n\\r\\n        __zapInternalSingleAssetPool(\\r\\n            inputToken,\\r\\n            inputAmount,\\r\\n            path,\\r\\n            minAmountsSwap,\\r\\n            deadline,\\r\\n            pool\\r\\n        );\\r\\n        emit ZapSingleAssetPool(inputToken, inputAmount, pool);\\r\\n    }\\r\\n\\r\\n    /// @notice Zap native into banana/gnana pool\\r\\n    /// @param path Path from input token to stake token\\r\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\r\\n    /// @param deadline Unix timestamp after which the transaction will revert\\r\\n    /// @param pool Pool address\\r\\n    function zapSingleAssetPoolNative(\\r\\n        address[] calldata path,\\r\\n        uint256 minAmountsSwap,\\r\\n        uint256 deadline,\\r\\n        IBEP20RewardApeV5 pool\\r\\n    ) external payable nonReentrant {\\r\\n        uint256 inputAmount = msg.value;\\r\\n        IERC20 inputToken = IERC20(WNATIVE);\\r\\n        IWETH(WNATIVE).deposit{ value: inputAmount }();\\r\\n\\r\\n        __zapInternalSingleAssetPool(\\r\\n            inputToken,\\r\\n            inputAmount,\\r\\n            path,\\r\\n            minAmountsSwap,\\r\\n            deadline,\\r\\n            pool\\r\\n        );\\r\\n        emit ZapSingleAssetPoolNative(inputAmount, pool);\\r\\n    }\\r\\n\\r\\n    /// @notice Zap token into banana/gnana pool\\r\\n    /// @param inputToken Input token to zap\\r\\n    /// @param inputAmount Amount of input tokens to zap\\r\\n    /// @param lpTokens Tokens of LP to zap to\\r\\n    /// @param path0 Path from input token to LP token0\\r\\n    /// @param path1 Path from input token to LP token1\\r\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\r\\n    /// @param minAmountsLP AmountAMin and amountBMin for adding liquidity\\r\\n    /// @param deadline Unix timestamp after which the transaction will revert\\r\\n    /// @param pool Pool address\\r\\n    function zapLPPool(\\r\\n        IERC20 inputToken,\\r\\n        uint256 inputAmount,\\r\\n        address[] memory lpTokens, //[tokenA, tokenB]\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1,\\r\\n        uint256[] memory minAmountsSwap, //[A, B]\\r\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\r\\n        uint256 deadline,\\r\\n        IBEP20RewardApeV5 pool\\r\\n    ) external nonReentrant {\\r\\n        IApePair pair = IApePair(address(pool.STAKE_TOKEN()));\\r\\n        require(\\r\\n            (lpTokens[0] == pair.token0() &&\\r\\n                lpTokens[1] == pair.token1()) ||\\r\\n                (lpTokens[1] == pair.token0() &&\\r\\n                    lpTokens[0] == pair.token1()),\\r\\n            \\\"ApeSwapZap: Wrong LP pair for Pool\\\"\\r\\n        );\\r\\n\\r\\n        _zapInternal(\\r\\n            inputToken,\\r\\n            inputAmount,\\r\\n            lpTokens,\\r\\n            path0,\\r\\n            path1,\\r\\n            minAmountsSwap,\\r\\n            minAmountsLP,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        uint256 balance = pair.balanceOf(address(this));\\r\\n        pair.approve(address(pool), balance);\\r\\n        pool.depositTo(balance, msg.sender);\\r\\n        pair.approve(address(pool), 0);\\r\\n        emit ZapLPPool(inputToken, inputAmount, pool);\\r\\n    }\\r\\n\\r\\n    /// @notice Zap native into banana/gnana pool\\r\\n    /// @param lpTokens Tokens of LP to zap to\\r\\n    /// @param path0 Path from input token to LP token0\\r\\n    /// @param path1 Path from input token to LP token1\\r\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\r\\n    /// @param minAmountsLP AmountAMin and amountBMin for adding liquidity\\r\\n    /// @param deadline Unix timestamp after which the transaction will revert\\r\\n    /// @param pool Pool address\\r\\n    function zapLPPoolNative(\\r\\n        address[] memory lpTokens, //[tokenA, tokenB]\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1,\\r\\n        uint256[] memory minAmountsSwap, //[A, B]\\r\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\r\\n        uint256 deadline,\\r\\n        IBEP20RewardApeV5 pool\\r\\n    ) external payable nonReentrant {\\r\\n        IApePair pair = IApePair(address(pool.STAKE_TOKEN()));\\r\\n        require(\\r\\n            (lpTokens[0] == pair.token0() &&\\r\\n                lpTokens[1] == pair.token1()) ||\\r\\n                (lpTokens[1] == pair.token0() &&\\r\\n                    lpTokens[0] == pair.token1()),\\r\\n            \\\"ApeSwapZap: Wrong LP pair for Pool\\\"\\r\\n        );\\r\\n\\r\\n        _zapNativeInternal(\\r\\n            lpTokens,\\r\\n            path0,\\r\\n            path1,\\r\\n            minAmountsSwap,\\r\\n            minAmountsLP,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        uint256 balance = pair.balanceOf(address(this));\\r\\n        pair.approve(address(pool), balance);\\r\\n        pool.depositTo(balance, msg.sender);\\r\\n        pair.approve(address(pool), 0);\\r\\n        emit ZapLPPoolNative(msg.value, pool);\\r\\n    }\\r\\n\\r\\n        /// @notice Zap token into banana/gnana pool\\r\\n    /// @param inputToken Input token to zap\\r\\n    /// @param inputAmount Amount of input tokens to zap\\r\\n    /// @param path Path from input token to stake token\\r\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\r\\n    /// @param deadline Unix timestamp after which the transaction will revert\\r\\n    /// @param pool Pool address\\r\\n    function __zapInternalSingleAssetPool(\\r\\n        IERC20 inputToken,\\r\\n        uint256 inputAmount,\\r\\n        address[] calldata path,\\r\\n        uint256 minAmountsSwap,\\r\\n        uint256 deadline,\\r\\n        IBEP20RewardApeV5 pool\\r\\n    ) internal {\\r\\n        IERC20 stakeToken = pool.STAKE_TOKEN();\\r\\n\\r\\n        uint256 amount = inputAmount;\\r\\n        IERC20 neededToken = stakeToken == GNANA ? BANANA : stakeToken;\\r\\n\\r\\n        if (inputToken != neededToken) {\\r\\n            require(\\r\\n                path[0] == address(inputToken),\\r\\n                \\\"ApeSwapZap: wrong path path[0]\\\"\\r\\n            );\\r\\n            require(\\r\\n                path[path.length - 1] == address(neededToken),\\r\\n                \\\"ApeSwapZap: wrong path path[-1]\\\"\\r\\n            );\\r\\n\\r\\n            inputToken.approve(address(router), inputAmount);\\r\\n            uint256[] memory amounts = router.swapExactTokensForTokens(\\r\\n                inputAmount,\\r\\n                minAmountsSwap,\\r\\n                path,\\r\\n                address(this),\\r\\n                deadline\\r\\n            );\\r\\n            amount = amounts[amounts.length - 1];\\r\\n        }\\r\\n\\r\\n        if (stakeToken == GNANA) {\\r\\n            uint256 beforeAmount = _getBalance(stakeToken);\\r\\n            IERC20(BANANA).approve(address(GNANA_TREASURY), amount);\\r\\n            GNANA_TREASURY.buy(amount);\\r\\n            amount = _getBalance(stakeToken) - beforeAmount;\\r\\n        }\\r\\n\\r\\n        stakeToken.approve(address(pool), amount);\\r\\n        pool.depositTo(amount, msg.sender);\\r\\n        stakeToken.approve(address(pool), 0);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/extensions/bills/lib/ICustomBill.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ICustomBill {\\r\\n    function principalToken() external returns (address);\\r\\n\\r\\n    function deposit(\\r\\n        uint256 _amount,\\r\\n        uint256 _maxPrice,\\r\\n        address _depositor\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/extensions/bills/ApeSwapZapTBills.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../ApeSwapZap.sol\\\";\\r\\nimport \\\"./lib/ICustomBill.sol\\\";\\r\\n\\r\\nabstract contract ApeSwapZapTBills is ApeSwapZap {\\r\\n    event ZapTBill(IERC20 inputToken, uint256 inputAmount, ICustomBill bill);\\r\\n    event ZapTBillNative(uint256 inputAmount, ICustomBill bill);\\r\\n\\r\\n    /// @notice Zap single token to LP\\r\\n    /// @param inputToken Input token to zap\\r\\n    /// @param inputAmount Amount of input tokens to zap\\r\\n    /// @param lpTokens Tokens of LP to zap to\\r\\n    /// @param path0 Path from input token to LP token0\\r\\n    /// @param path1 Path from input token to LP token1\\r\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\r\\n    /// @param minAmountsLP AmountAMin and amountBMin for adding liquidity\\r\\n    /// @param deadline Unix timestamp after which the transaction will revert\\r\\n    /// @param bill Treasury bill address\\r\\n    /// @param maxPrice Max price of treasury bill\\r\\n    function zapTBill(\\r\\n        IERC20 inputToken,\\r\\n        uint256 inputAmount,\\r\\n        address[] memory lpTokens, //[tokenA, tokenB]\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1,\\r\\n        uint256[] memory minAmountsSwap, //[A, B]\\r\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\r\\n        uint256 deadline,\\r\\n        ICustomBill bill,\\r\\n        uint256 maxPrice\\r\\n    ) external nonReentrant {\\r\\n        IApePair pair = IApePair(bill.principalToken());\\r\\n        require(\\r\\n            (lpTokens[0] == pair.token0() &&\\r\\n                lpTokens[1] == pair.token1()) ||\\r\\n                (lpTokens[1] == pair.token0() &&\\r\\n                    lpTokens[0] == pair.token1()),\\r\\n            \\\"ApeSwapZap: Wrong LP pair for TBill\\\"\\r\\n        );\\r\\n\\r\\n        _zapInternal(\\r\\n            inputToken,\\r\\n            inputAmount,\\r\\n            lpTokens,\\r\\n            path0,\\r\\n            path1,\\r\\n            minAmountsSwap,\\r\\n            minAmountsLP,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        uint256 balance = pair.balanceOf(address(this));\\r\\n        pair.approve(address(bill), balance);\\r\\n        bill.deposit(balance, maxPrice, msg.sender);\\r\\n        pair.approve(address(bill), 0);\\r\\n        emit ZapTBill(inputToken, inputAmount, bill);\\r\\n    }\\r\\n\\r\\n    /// @notice Zap native token to Treasury Bill\\r\\n    /// @param lpTokens Tokens of LP to zap to\\r\\n    /// @param path0 Path from input token to LP token0\\r\\n    /// @param path1 Path from input token to LP token1\\r\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\r\\n    /// @param minAmountsLP AmountAMin and amountBMin for adding liquidity\\r\\n    /// @param deadline Unix timestamp after which the transaction will revert\\r\\n    /// @param bill Treasury bill address\\r\\n    /// @param maxPrice Max price of treasury bill\\r\\n    function zapTBillNative(\\r\\n        address[] memory lpTokens, //[tokenA, tokenB]\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1,\\r\\n        uint256[] memory minAmountsSwap, //[A, B]\\r\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\r\\n        uint256 deadline,\\r\\n        ICustomBill bill,\\r\\n        uint256 maxPrice\\r\\n    ) external payable nonReentrant {\\r\\n        IApePair pair = IApePair(bill.principalToken());\\r\\n        require(\\r\\n            (lpTokens[0] == pair.token0() &&\\r\\n                lpTokens[1] == pair.token1()) ||\\r\\n                (lpTokens[1] == pair.token0() &&\\r\\n                    lpTokens[0] == pair.token1()),\\r\\n            \\\"ApeSwapZap: Wrong LP pair for TBill\\\"\\r\\n        );\\r\\n\\r\\n        _zapNativeInternal(\\r\\n            lpTokens,\\r\\n            path0,\\r\\n            path1,\\r\\n            minAmountsSwap,\\r\\n            minAmountsLP,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        uint256 balance = pair.balanceOf(address(this));\\r\\n        pair.approve(address(bill), balance);\\r\\n        bill.deposit(balance, maxPrice, msg.sender);\\r\\n        pair.approve(address(bill), 0);\\r\\n        emit ZapTBillNative(msg.value, bill);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/extensions/ApeSwapZapLPMigrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../lib/IApeRouter02.sol\\\";\\r\\nimport \\\"../lib/IApePair.sol\\\";\\r\\n\\r\\nabstract contract ApeSwapZapLPMigrator is ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IApeRouter02 public immutable apeRouter;\\r\\n\\r\\n    event LPMigrated(\\r\\n        IApePair lp,\\r\\n        IApeRouter02 fromRouter,\\r\\n        IApeRouter02 toRouter,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    constructor(IApeRouter02 router) {\\r\\n        apeRouter = router;\\r\\n    }\\r\\n\\r\\n    /// @notice Zap non APE-LPs to APE-LPs\\r\\n    /// @param router The non APE-LP router\\r\\n    /// @param lp LP address to zap\\r\\n    /// @param amount Amount of LPs to zap\\r\\n    /// @param amountAMinRemove The minimum amount of token0 to receive after removing liquidity\\r\\n    /// @param amountBMinRemove The minimum amount of token1 to receive after removing liquidity\\r\\n    /// @param amountAMinAdd The minimum amount of token0 to add to APE-LP on add liquidity\\r\\n    /// @param amountBMinAdd The minimum amount of token1 to add to APE-LP on add liquidity\\r\\n    /// @param deadline Unix timestamp after which the transaction will revert\\r\\n    function zapLPMigrator(\\r\\n        IApeRouter02 router,\\r\\n        IApePair lp,\\r\\n        uint256 amount,\\r\\n        uint256 amountAMinRemove,\\r\\n        uint256 amountBMinRemove,\\r\\n        uint256 amountAMinAdd,\\r\\n        uint256 amountBMinAdd,\\r\\n        uint256 deadline\\r\\n    ) external nonReentrant {\\r\\n        address token0 = lp.token0();\\r\\n        address token1 = lp.token1();\\r\\n\\r\\n        IERC20(address(lp)).safeTransferFrom(msg.sender, address(this), amount);\\r\\n        lp.approve(address(router), amount);\\r\\n        (uint256 amountAReceived, uint256 amountBReceived) = router\\r\\n            .removeLiquidity(\\r\\n                token0,\\r\\n                token1,\\r\\n                amount,\\r\\n                amountAMinRemove,\\r\\n                amountBMinRemove,\\r\\n                address(this),\\r\\n                deadline\\r\\n            );\\r\\n\\r\\n        IERC20(token0).approve(address(apeRouter), amountAReceived);\\r\\n        IERC20(token1).approve(address(apeRouter), amountBReceived);\\r\\n        (uint256 amountASent, uint256 amountBSent, ) = apeRouter.addLiquidity(\\r\\n            token0,\\r\\n            token1,\\r\\n            amountAReceived,\\r\\n            amountBReceived,\\r\\n            amountAMinAdd,\\r\\n            amountBMinAdd,\\r\\n            msg.sender,\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        if (amountAReceived - amountASent > 0) {\\r\\n            IERC20(token0).safeTransfer(\\r\\n                msg.sender,\\r\\n                amountAReceived - amountASent\\r\\n            );\\r\\n        }\\r\\n        if (amountBReceived - amountBSent > 0) {\\r\\n            IERC20(token1).safeTransfer(\\r\\n                msg.sender,\\r\\n                amountBReceived - amountBSent\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit LPMigrated(lp, router, apeRouter, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/IApeSwapZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n  ______                     ______                                 \\r\\n /      \\\\                   /      \\\\                                \\r\\n|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\ ______   ______ |  \u2593\u2593\u2593\u2593\u2593\u2593\\\\__   __   __  ______   ______  \\r\\n| \u2593\u2593__| \u2593\u2593/      \\\\ /      \\\\| \u2593\u2593___\\\\\u2593\u2593  \\\\ |  \\\\ |  \\\\|      \\\\ /      \\\\ \\r\\n| \u2593\u2593    \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\\\\u2593\u2593    \\\\| \u2593\u2593 | \u2593\u2593 | \u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\r\\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593_\\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\ \u2593\u2593 | \u2593\u2593 | \u2593\u2593/      \u2593\u2593 \u2593\u2593  | \u2593\u2593\\r\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593__/ \u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\__| \u2593\u2593 \u2593\u2593_/ \u2593\u2593_/ \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593__/ \u2593\u2593\\r\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593\\\\\u2593\u2593     \\\\\\\\\u2593\u2593    \u2593\u2593\\\\\u2593\u2593   \u2593\u2593   \u2593\u2593\\\\\u2593\u2593    \u2593\u2593 \u2593\u2593    \u2593\u2593\\r\\n \\\\\u2593\u2593   \\\\\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\\\\\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\r\\n         | \u2593\u2593                                             | \u2593\u2593      \\r\\n         | \u2593\u2593                                             | \u2593\u2593      \\r\\n          \\\\\u2593\u2593                                              \\\\\u2593\u2593         \\r\\n\\r\\n * App:             https://apeswap.finance\\r\\n * Medium:          https://ape-swap.medium.com\\r\\n * Twitter:         https://twitter.com/ape_swap\\r\\n * Discord:         https://discord.com/invite/apeswap\\r\\n * Telegram:        https://t.me/ape_swap\\r\\n * Announcements:   https://t.me/ape_swap_news\\r\\n * GitHub:          https://github.com/ApeSwapFinance\\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\ninterface IApeSwapZap {\\r\\n    function zap(\\r\\n        IERC20 _inputToken,\\r\\n        uint256 _inputAmount,\\r\\n        address[] memory _lpTokens, //[tokenA, tokenB]\\r\\n        address[] calldata _path0,\\r\\n        address[] calldata _path1,\\r\\n        uint256[] memory _minAmountsSwap, //[A, B]\\r\\n        uint256[] memory _minAmountsLP, //[amountAMin, amountBMin]\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external;\\r\\n\\r\\n    function zapNative(\\r\\n        address[] memory _lpTokens, //[tokenA, tokenB]\\r\\n        address[] calldata _path0,\\r\\n        address[] calldata _path1,\\r\\n        uint256[] memory _minAmountsSwap, //[A, B]\\r\\n        uint256[] memory _minAmountsLP, //[amountAMin, amountBMin]\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function getMinAmounts(\\r\\n        uint256 _inputAmount,\\r\\n        address[] calldata _path0,\\r\\n        address[] calldata _path1\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[2] memory _minAmountsSwap,\\r\\n            uint256[2] memory _minAmountsLP\\r\\n        );\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/ApeSwapZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity 0.8.15;\\r\\n\\r\\n/*\\r\\n  ______                     ______                                 \\r\\n /      \\\\                   /      \\\\                                \\r\\n|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\ ______   ______ |  \u2593\u2593\u2593\u2593\u2593\u2593\\\\__   __   __  ______   ______  \\r\\n| \u2593\u2593__| \u2593\u2593/      \\\\ /      \\\\| \u2593\u2593___\\\\\u2593\u2593  \\\\ |  \\\\ |  \\\\|      \\\\ /      \\\\ \\r\\n| \u2593\u2593    \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\\\\u2593\u2593    \\\\| \u2593\u2593 | \u2593\u2593 | \u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\r\\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593_\\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\ \u2593\u2593 | \u2593\u2593 | \u2593\u2593/      \u2593\u2593 \u2593\u2593  | \u2593\u2593\\r\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593__/ \u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\__| \u2593\u2593 \u2593\u2593_/ \u2593\u2593_/ \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593__/ \u2593\u2593\\r\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593\\\\\u2593\u2593     \\\\\\\\\u2593\u2593    \u2593\u2593\\\\\u2593\u2593   \u2593\u2593   \u2593\u2593\\\\\u2593\u2593    \u2593\u2593 \u2593\u2593    \u2593\u2593\\r\\n \\\\\u2593\u2593   \\\\\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\\\\\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\r\\n         | \u2593\u2593                                             | \u2593\u2593      \\r\\n         | \u2593\u2593                                             | \u2593\u2593      \\r\\n          \\\\\u2593\u2593                                              \\\\\u2593\u2593         \\r\\n\\r\\n * App:             https://apeswap.finance\\r\\n * Medium:          https://ape-swap.medium.com\\r\\n * Twitter:         https://twitter.com/ape_swap\\r\\n * Discord:         https://discord.com/invite/apeswap\\r\\n * Telegram:        https://t.me/ape_swap\\r\\n * Announcements:   https://t.me/ape_swap_news\\r\\n * GitHub:          https://github.com/ApeSwapFinance\\r\\n */\\r\\n\\r\\nimport \\\"./IApeSwapZap.sol\\\";\\r\\nimport \\\"./lib/IApeRouter02.sol\\\";\\r\\nimport \\\"./lib/IApeFactory.sol\\\";\\r\\nimport \\\"./lib/IApePair.sol\\\";\\r\\nimport \\\"./lib/IWETH.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract ApeSwapZap is IApeSwapZap, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    struct BalanceLocalVars {\\r\\n        uint256 amount0;\\r\\n        uint256 amount1;\\r\\n        uint256 balanceBefore;\\r\\n    }\\r\\n\\r\\n    IApeRouter02 public immutable router;\\r\\n    IApeFactory public immutable factory;\\r\\n    address public immutable WNATIVE;\\r\\n\\r\\n    event Zap(address inputToken, uint256 inputAmount, address[] lpTokens);\\r\\n    event ZapNative(uint256 inputAmount, address[] lpTokens);\\r\\n\\r\\n    constructor(IApeRouter02 _router) {\\r\\n        router = _router;\\r\\n        factory = IApeFactory(router.factory());\\r\\n        WNATIVE = router.WETH();\\r\\n    }\\r\\n\\r\\n    /// @dev The receive method is used as a fallback function in a contract\\r\\n    /// and is called when ether is sent to a contract with no calldata.\\r\\n    receive() external payable {\\r\\n        require(\\r\\n            msg.sender == WNATIVE,\\r\\n            \\\"ApeSwapZap: Only receive ether from wrapped\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Zap single token to LP\\r\\n    /// @param inputToken Input token\\r\\n    /// @param inputAmount Input amount\\r\\n    /// @param lpTokens Tokens of LP to zap to\\r\\n    /// @param path0 Path from input token to LP token0\\r\\n    /// @param path1 Path from input token to LP token1\\r\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\r\\n    /// @param minAmountsLP AmountAMin and amountBMin for adding liquidity\\r\\n    /// @param to address to receive LPs\\r\\n    /// @param deadline Unix timestamp after which the transaction will revert\\r\\n    function zap(\\r\\n        IERC20 inputToken,\\r\\n        uint256 inputAmount,\\r\\n        address[] memory lpTokens, //[tokenA, tokenB]\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1,\\r\\n        uint256[] memory minAmountsSwap, //[A, B]\\r\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external override nonReentrant {\\r\\n        _zapInternal(\\r\\n            inputToken,\\r\\n            inputAmount,\\r\\n            lpTokens,\\r\\n            path0,\\r\\n            path1,\\r\\n            minAmountsSwap,\\r\\n            minAmountsLP,\\r\\n            to,\\r\\n            deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Zap native token to LP\\r\\n    /// @param lpTokens Tokens of LP to zap to\\r\\n    /// @param path0 Path from input token to LP token0\\r\\n    /// @param path1 Path from input token to LP token1\\r\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\r\\n    /// @param minAmountsLP AmountAMin and amountBMin for adding liquidity\\r\\n    /// @param to address to receive LPs\\r\\n    /// @param deadline Unix timestamp after which the transaction will revert\\r\\n    function zapNative(\\r\\n        address[] memory lpTokens, //[tokenA, tokenB]\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1,\\r\\n        uint256[] memory minAmountsSwap, //[A, B]\\r\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable override nonReentrant {\\r\\n        _zapNativeInternal(\\r\\n            lpTokens,\\r\\n            path0,\\r\\n            path1,\\r\\n            minAmountsSwap,\\r\\n            minAmountsLP,\\r\\n            to,\\r\\n            deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice get min amounts for swaps\\r\\n    /// @param inputAmount total input amount for swap\\r\\n    /// @param path0 path from input token to LP token0\\r\\n    /// @param path1 path from input token to LP token1\\r\\n    function getMinAmounts(\\r\\n        uint256 inputAmount,\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256[2] memory minAmountsSwap,\\r\\n            uint256[2] memory minAmountsLP\\r\\n        )\\r\\n    {\\r\\n        require(\\r\\n            path0.length >= 2 || path1.length >= 2,\\r\\n            \\\"ApeSwapZap: Needs at least one path\\\"\\r\\n        );\\r\\n\\r\\n        uint256 inputAmountHalf = inputAmount / 2;\\r\\n\\r\\n        uint256 minAmountSwap0 = inputAmountHalf;\\r\\n        if (path0.length != 0) {\\r\\n            uint256[] memory amountsOut0 = router.getAmountsOut(\\r\\n                inputAmountHalf,\\r\\n                path0\\r\\n            );\\r\\n            minAmountSwap0 = amountsOut0[amountsOut0.length - 1];\\r\\n        }\\r\\n\\r\\n        uint256 minAmountSwap1 = inputAmountHalf;\\r\\n        if (path1.length != 0) {\\r\\n            uint256[] memory amountsOut1 = router.getAmountsOut(\\r\\n                inputAmountHalf,\\r\\n                path1\\r\\n            );\\r\\n            minAmountSwap1 = amountsOut1[amountsOut1.length - 1];\\r\\n        }\\r\\n\\r\\n        address token0 = path0.length == 0 ? path1[0] : path0[path0.length - 1];\\r\\n        address token1 = path1.length == 0 ? path0[0] : path1[path1.length - 1];\\r\\n\\r\\n        IApePair lp = IApePair(factory.getPair(token0, token1));\\r\\n        (uint256 reserveA, uint256 reserveB, ) = lp.getReserves();\\r\\n        if (token0 == lp.token1()) {\\r\\n            (reserveA, reserveB) = (reserveB, reserveA);\\r\\n        }\\r\\n        uint256 amountB = router.quote(minAmountSwap0, reserveA, reserveB);\\r\\n\\r\\n        minAmountsSwap = [minAmountSwap0, minAmountSwap1];\\r\\n        minAmountsLP = [minAmountSwap0, amountB];\\r\\n    }\\r\\n\\r\\n    function _zapInternal(\\r\\n        IERC20 inputToken,\\r\\n        uint256 inputAmount,\\r\\n        address[] memory lpTokens, //[tokenA, tokenB]\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1,\\r\\n        uint256[] memory minAmountsSwap, //[A, B]\\r\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) internal {\\r\\n        uint256 balanceBefore = _getBalance(inputToken);\\r\\n        inputToken.safeTransferFrom(msg.sender, address(this), inputAmount);\\r\\n        inputAmount = _getBalance(inputToken) - balanceBefore;\\r\\n\\r\\n        _zapPrivate(\\r\\n            inputToken,\\r\\n            inputAmount,\\r\\n            lpTokens,\\r\\n            path0,\\r\\n            path1,\\r\\n            minAmountsSwap,\\r\\n            minAmountsLP,\\r\\n            to,\\r\\n            deadline,\\r\\n            false\\r\\n        );\\r\\n        emit Zap(address(inputToken), inputAmount, lpTokens);\\r\\n    }\\r\\n\\r\\n    function _zapNativeInternal(\\r\\n        address[] memory lpTokens, //[tokenA, tokenB]\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1,\\r\\n        uint256[] memory minAmountsSwap, //[A, B]\\r\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) internal {\\r\\n        uint256 inputAmount = msg.value;\\r\\n        IERC20 inputToken = IERC20(WNATIVE);\\r\\n        IWETH(WNATIVE).deposit{ value: inputAmount }();\\r\\n\\r\\n        _zapPrivate(\\r\\n            inputToken,\\r\\n            inputAmount,\\r\\n            lpTokens,\\r\\n            path0,\\r\\n            path1,\\r\\n            minAmountsSwap,\\r\\n            minAmountsLP,\\r\\n            to,\\r\\n            deadline,\\r\\n            true\\r\\n        );\\r\\n        emit ZapNative(inputAmount, lpTokens);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        bool native\\r\\n    ) internal {\\r\\n        if (amount == 0) return;\\r\\n        if (token == WNATIVE && native) {\\r\\n            IWETH(WNATIVE).withdraw(amount);\\r\\n            // 2600 COLD_ACCOUNT_ACCESS_COST plus 2300 transfer gas - 1\\r\\n            // Intended to support transfers to contracts, but not allow for further code execution\\r\\n            (bool success, ) = msg.sender.call{ value: amount, gas: 4899 }(\\\"\\\");\\r\\n            require(success, \\\"native transfer error\\\");\\r\\n        } else {\\r\\n            IERC20(token).safeTransfer(msg.sender, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getBalance(IERC20 token) internal view returns (uint256 balance) {\\r\\n        balance = token.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function _zapPrivate(\\r\\n        IERC20 inputToken,\\r\\n        uint256 inputAmount,\\r\\n        address[] memory lpTokens, //[tokenA, tokenB]\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1,\\r\\n        uint256[] memory minAmountsSwap, //[A, B]\\r\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool native\\r\\n    ) private {\\r\\n        require(to != address(0), \\\"ApeSwapZap: Can't zap to null address\\\");\\r\\n        require(\\r\\n            lpTokens.length == 2,\\r\\n            \\\"ApeSwapZap: need exactly 2 tokens to form a LP\\\"\\r\\n        );\\r\\n        require(\\r\\n            factory.getPair(lpTokens[0], lpTokens[1]) != address(0),\\r\\n            \\\"ApeSwapZap: Pair doesn't exist\\\"\\r\\n        );\\r\\n\\r\\n        BalanceLocalVars memory vars;\\r\\n\\r\\n        inputToken.approve(address(router), inputAmount);\\r\\n\\r\\n        vars.amount0 = inputAmount / 2;\\r\\n        vars.balanceBefore = 0;\\r\\n        if (lpTokens[0] != address(inputToken)) {\\r\\n            require(\\r\\n                path0[0] == address(inputToken),\\r\\n                \\\"ApeSwapZap: wrong path path0[0]\\\"\\r\\n            );\\r\\n            require(\\r\\n                path0[path0.length - 1] == lpTokens[0],\\r\\n                \\\"ApeSwapZap: wrong path path0[-1]\\\"\\r\\n            );\\r\\n            vars.balanceBefore = _getBalance(IERC20(lpTokens[0]));\\r\\n            router.swapExactTokensForTokens(\\r\\n                vars.amount0,\\r\\n                minAmountsSwap[0],\\r\\n                path0,\\r\\n                address(this),\\r\\n                deadline\\r\\n            );\\r\\n            vars.amount0 =\\r\\n                _getBalance(IERC20(lpTokens[0])) -\\r\\n                vars.balanceBefore;\\r\\n        }\\r\\n\\r\\n        vars.amount1 = inputAmount / 2;\\r\\n        if (lpTokens[1] != address(inputToken)) {\\r\\n            require(\\r\\n                path1[0] == address(inputToken),\\r\\n                \\\"ApeSwapZap: wrong path path1[0]\\\"\\r\\n            );\\r\\n            require(\\r\\n                path1[path1.length - 1] == lpTokens[1],\\r\\n                \\\"ApeSwapZap: wrong path path1[-1]\\\"\\r\\n            );\\r\\n            vars.balanceBefore = _getBalance(IERC20(lpTokens[1]));\\r\\n            router.swapExactTokensForTokens(\\r\\n                vars.amount1,\\r\\n                minAmountsSwap[1],\\r\\n                path1,\\r\\n                address(this),\\r\\n                deadline\\r\\n            );\\r\\n            vars.amount1 =\\r\\n                _getBalance(IERC20(lpTokens[1])) -\\r\\n                vars.balanceBefore;\\r\\n        }\\r\\n\\r\\n        IERC20(lpTokens[0]).approve(address(router), vars.amount0);\\r\\n        IERC20(lpTokens[1]).approve(address(router), vars.amount1);\\r\\n        (uint256 amountA, uint256 amountB, ) = router.addLiquidity(\\r\\n            lpTokens[0],\\r\\n            lpTokens[1],\\r\\n            vars.amount0,\\r\\n            vars.amount1,\\r\\n            minAmountsLP[0],\\r\\n            minAmountsLP[1],\\r\\n            to,\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        if (lpTokens[0] == WNATIVE) {\\r\\n            // Ensure WNATIVE is called last\\r\\n            _transfer(lpTokens[1], vars.amount1 - amountB, native);\\r\\n            _transfer(lpTokens[0], vars.amount0 - amountA, native);\\r\\n        } else {\\r\\n            _transfer(lpTokens[0], vars.amount0 - amountA, native);\\r\\n            _transfer(lpTokens[1], vars.amount1 - amountB, native);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IApeRouter02\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract ITreasury\",\"name\":\"_goldenBananaTreasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IApePair\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IApeRouter02\",\"name\":\"fromRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IApeRouter02\",\"name\":\"toRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LPMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"Zap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IBEP20RewardApeV5\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"ZapLPPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IBEP20RewardApeV5\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"ZapLPPoolNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"ZapNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IBEP20RewardApeV5\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"ZapSingleAssetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IBEP20RewardApeV5\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"ZapSingleAssetPoolNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract ICustomBill\",\"name\":\"bill\",\"type\":\"address\"}],\"name\":\"ZapTBill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract ICustomBill\",\"name\":\"bill\",\"type\":\"address\"}],\"name\":\"ZapTBillNative\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BANANA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GNANA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GNANA_TREASURY\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WNATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apeRouter\",\"outputs\":[{\"internalType\":\"contract IApeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IApeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"}],\"name\":\"getMinAmounts\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"minAmountsSwap\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"minAmountsLP\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IApeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsSwap\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsLP\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"zap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IApeRouter02\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"contract IApePair\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMinRemove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMinRemove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMinAdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMinAdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"zapLPMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsSwap\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsLP\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20RewardApeV5\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"zapLPPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsSwap\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsLP\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20RewardApeV5\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"zapLPPoolNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsSwap\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsLP\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"zapNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minAmountsSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20RewardApeV5\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"zapSingleAssetPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minAmountsSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20RewardApeV5\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"zapSingleAssetPoolNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsSwap\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsLP\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"contract ICustomBill\",\"name\":\"bill\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"zapTBill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsSwap\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsLP\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"contract ICustomBill\",\"name\":\"bill\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"zapTBillNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ApeSwapZapFullV1", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cf0febd3f17cef5b47b0cd257acf6025c5bff3b7000000000000000000000000ec4b9d1fd8a3534e31fce1636c7479bcd29213ae", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}