{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\n/**\r\n* @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n* the optional functions; to access them see {ERC20Detailed}.\r\n*/\r\ninterface IERC20 {\r\n    /**\r\n    * @dev Returns the amount of tokens in existence.\r\n    */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n    * @dev Returns the amount of tokens owned by `account`.\r\n    */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n    * @dev Returns the remaining number of tokens that `spender` will be\r\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n    * zero by default.\r\n    *\r\n    * This value changes when {approve} or {transferFrom} are called.\r\n    */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n    * that someone may use both the old and the new allowance by unfortunate\r\n    * transaction ordering. One possible solution to mitigate this race\r\n    * condition is to first reduce the spender's allowance to 0 and set the\r\n    * desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    *\r\n    * Emits an {Approval} event.\r\n    */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n    * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n    * allowance mechanism. `amount` is then deducted from the caller's\r\n    * allowance.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n    * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n    * another (`to`).\r\n    *\r\n    * Note that `value` may be zero.\r\n    */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n    * a call to {approve}. `value` is the new allowance.\r\n    */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n* @title Owner\r\n* @dev Set & change owner\r\n*/\r\ncontract Owner {\r\n\r\n    address private owner;\r\n\r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n\r\n    // modifier to check if caller is owner\r\n    modifier isOwner() {\r\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use 'require' to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Set contract deployer as owner\r\n    */\r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    /**\r\n    * @dev Change owner\r\n    * @param newOwner address of new owner\r\n    */\r\n    function changeOwner(address newOwner) public isOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Return owner address\r\n    * @return address of owner\r\n    */\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\n/**\r\n* @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n* checks.\r\n*\r\n* Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n* in bugs, because programmers usually assume that an overflow raises an\r\n* error, which is the standard behavior in high level programming languages.\r\n* `SafeMath` restores this intuition by reverting the transaction when an\r\n* operation overflows.\r\n*\r\n* Using this library instead of the unchecked operations eliminates an entire\r\n* class of bugs, so it's recommended to use it always.\r\n*/\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Returns the addition of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `+` operator.\r\n    *\r\n    * Requirements:\r\n    * - Addition cannot overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    * - Subtraction cannot overflow.\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the multiplication of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `*` operator.\r\n    *\r\n    * Requirements:\r\n    * - Multiplication cannot overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the integer division of two unsigned integers. Reverts on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * Reverts when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Config is Owner {\r\n    using SafeMath for uint256;\r\n\r\n    address _exchangeAddress;\r\n    address _backflowAddress;\r\n    address _marketAddress;\r\n    address _ecologyAddress;\r\n    address _fundPoolAddress;\r\n\r\n    mapping (address => address) _leadMember;\r\n\r\n    //\u6bd4\u4f8b\u7cbe\u5ea62\r\n    uint256 _ratioDestroy;\r\n    uint256 _ratioBackflow;\r\n    uint256 _ratioMarket;\r\n    uint256 _ratioEcology;\r\n    uint256 _ratioFundPool;\r\n\r\n    uint256 _ratioExtra;\r\n\r\n    uint256 _ratioHoldPool;\r\n\r\n    uint256 [] _ratioBonus;\r\n\r\n    uint256 _transferMaximum;\r\n    uint256 _ratioMaxSell;\r\n\r\n    uint256 _lpPool;\r\n    uint256 _holdPool;\r\n\r\n    function getExchangeAddress() public view returns (address) {\r\n        return _exchangeAddress;\r\n    }\r\n\r\n    function setExchangeAddress(address addr) public isOwner returns (bool) {\r\n        _exchangeAddress = addr;\r\n        return true;\r\n    }\r\n\r\n    function getBackflowAddress() public view returns (address) {\r\n        return _backflowAddress;\r\n    }\r\n\r\n    function setBackflowAddress(address addr) public isOwner returns (bool) {\r\n        _backflowAddress = addr;\r\n        return true;\r\n    }\r\n\r\n    function getMarketAddress() public view returns (address) {\r\n        return _marketAddress;\r\n    }\r\n\r\n    function setEcologyAddress(address addr) public isOwner returns (bool) {\r\n        _ecologyAddress = addr;\r\n        return true;\r\n    }\r\n\r\n    function getEcologyAddress() public view returns (address) {\r\n        return _ecologyAddress;\r\n    }\r\n\r\n    function setMarketAddress(address addr) public isOwner returns (bool) {\r\n        _marketAddress = addr;\r\n        return true;\r\n    }\r\n\r\n    function getFundPoolAddress() public view returns (address) {\r\n        return _fundPoolAddress;\r\n    }\r\n\r\n    function setFundPoolAddress(address addr) public isOwner returns (bool) {\r\n        _fundPoolAddress = addr;\r\n        return true;\r\n    }\r\n\r\n    function getLeadMember(address addr) public view returns (address) {\r\n        return _leadMember[addr];\r\n    }\r\n\r\n    function setLeadMember(address leadMember, address member) public isOwner returns (bool) {\r\n        _setLeadMember(leadMember, member);\r\n        return true;\r\n    }\r\n\r\n    function _setLeadMember(address leadMember, address newMember) internal {\r\n        if (newMember != address(0) && leadMember != _exchangeAddress && newMember != _exchangeAddress && leadMember != address(this) && newMember != address(this)) {\r\n            if (_leadMember[newMember] == address(0)) {\r\n                _leadMember[newMember] = leadMember;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getRatioDestroy() public view returns (uint256) {\r\n        return _ratioDestroy;\r\n    }\r\n\r\n    function setRatioDestroy(uint256 ratio) public isOwner returns (bool) {\r\n        _ratioDestroy = ratio;\r\n        return true;\r\n    }\r\n\r\n    function getRatioBackflow() public view returns (uint256) {\r\n        return _ratioBackflow;\r\n    }\r\n\r\n    function setRatioBackflow(uint256 ratio) public isOwner returns (bool){\r\n        _ratioBackflow = ratio;\r\n        return true;\r\n    }\r\n\r\n    function getRatioMarket() public view returns (uint256) {\r\n        return _ratioMarket;\r\n    }\r\n\r\n    function setRatioMarket(uint256 ratio) public isOwner returns (bool){\r\n        _ratioMarket = ratio;\r\n        return true;\r\n    }\r\n\r\n    function getRatioEcology() public view returns (uint256) {\r\n        return _ratioEcology;\r\n    }\r\n\r\n    function setRatioEcology(uint256 ratio) public isOwner returns (bool){\r\n        _ratioEcology = ratio;\r\n        return true;\r\n    }\r\n\r\n    function getRatioExtra() public view returns (uint256) {\r\n        return _ratioExtra;\r\n    }\r\n\r\n    function setRatioExtra(uint256 ratio) public isOwner returns (bool){\r\n        _ratioExtra = ratio;\r\n        return true;\r\n    }\r\n\r\n    function getRatioFundPool() public view returns (uint256) {\r\n        return _ratioFundPool;\r\n    }\r\n\r\n    function setRatioFundPool(uint256 ratio) public isOwner returns (bool){\r\n        _ratioFundPool = ratio;\r\n        return true;\r\n    }\r\n\r\n    function getRatioHoldPool() public view returns (uint256) {\r\n        return _ratioHoldPool;\r\n    }\r\n\r\n    function setRatioHoldPool(uint256 ratio) public isOwner returns (bool){\r\n        _ratioHoldPool = ratio;\r\n        return true;\r\n    }\r\n\r\n    function getRatioMaxSell() public view returns (uint256) {\r\n        return _ratioMaxSell;\r\n    }\r\n\r\n    function setRatioMaxSell(uint256 value) public isOwner returns (bool){\r\n        _ratioMaxSell = value;\r\n        return true;\r\n    }\r\n\r\n    function getTransferMaximum() public view returns (uint256) {\r\n        return _transferMaximum;\r\n    }\r\n\r\n    function setTransferMaximum(uint256 value) public isOwner returns (bool){\r\n        _transferMaximum = value;\r\n        return true;\r\n    }\r\n\r\n    function getRatioBonus() public view returns (uint256[] memory) {\r\n        return _ratioBonus;\r\n    }\r\n\r\n    function setRatioBonus(uint256[] memory ratios) public isOwner returns (bool) {\r\n        _ratioBonus = ratios;\r\n        return true;\r\n    }\r\n\r\n    function getLpPool() public view returns (uint256) {\r\n        return _lpPool;\r\n    }\r\n\r\n    function setLpPool(uint256 value) public isOwner returns (bool){\r\n        _lpPool = value;\r\n        return true;\r\n    }\r\n\r\n    function getHoldPool() public view returns (uint256) {\r\n        return _holdPool;\r\n    }\r\n\r\n    function setHoldPool(uint256 value) public isOwner returns (bool){\r\n        _holdPool = value;\r\n        return true;\r\n    }\r\n\r\n    function getRatioServiceCharge() public view returns (uint256) {\r\n        uint256 ratioServiceCharge;\r\n        ratioServiceCharge = ratioServiceCharge.add(_ratioDestroy);\r\n        ratioServiceCharge = ratioServiceCharge.add(_ratioBackflow);\r\n        ratioServiceCharge = ratioServiceCharge.add(_ratioMarket);\r\n        ratioServiceCharge = ratioServiceCharge.add(_ratioEcology);\r\n        ratioServiceCharge = ratioServiceCharge.add(_ratioFundPool);\r\n        ratioServiceCharge = ratioServiceCharge.add(_ratioHoldPool);\r\n        ratioServiceCharge = ratioServiceCharge.add(_ratioExtra);\r\n        for(uint i=0;i<_ratioBonus.length;i++) {\r\n            ratioServiceCharge = ratioServiceCharge.add(_ratioBonus[i]);\r\n        }\r\n        return ratioServiceCharge;\r\n    }\r\n}\r\n\r\n/**\r\n* @dev Optional functions from the ERC20 standard.\r\n*/\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n    * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n    * these values are immutable: they can only be set once during\r\n    * construction.\r\n    */\r\n    constructor (string memory tokenName, string memory tokenSymbol, uint8 tokenDecimals) {\r\n        _name = tokenName;\r\n        _symbol = tokenSymbol;\r\n        _decimals = tokenDecimals;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the name of the token.\r\n    */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the symbol of the token, usually a shorter version of the\r\n    * name.\r\n    */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the number of decimals used to get its user representation.\r\n    * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n    * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n    *\r\n    * Tokens usually opt for a value of 18, imitating the relationship between\r\n    * Ether and Wei.\r\n    *\r\n    * NOTE: This information is only used for _display_ purposes: it in\r\n    * no way affects any of the arithmetic of the contract, including\r\n    * {IERC20-balanceOf} and {IERC20-transfer}.\r\n    */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n/**\r\n* @dev Implementation of the {IERC20} interface.\r\n*\r\n* This implementation is agnostic to the way tokens are created. This means\r\n* that a supply mechanism has to be added in a derived contract using {_mint}.\r\n* For a generic mechanism see {ERC20Mintable}.\r\n*\r\n* TIP: For a detailed writeup see our guide\r\n* https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n* to implement supply mechanisms].\r\n*\r\n* We have followed general OpenZeppelin guidelines: functions revert instead\r\n* of returning `false` on failure. This behavior is nonetheless conventional\r\n* and does not conflict with the expectations of ERC20 applications.\r\n*\r\n* Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n* This allows applications to reconstruct the allowance for all accounts just\r\n* by listening to said events. Other implementations of the EIP may not emit\r\n* these events, as it isn't required by the specification.\r\n*\r\n* Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n* functions have been added to mitigate the well-known issues around setting\r\n* allowances. See {IERC20-approve}.\r\n*/\r\nabstract contract ERC20 is IERC20, Config, ERC20Detailed {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev See {IERC20-totalSupply}.\r\n    */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev See {IERC20-balanceOf}.\r\n    */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n    * @dev See {IERC20-transfer}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `recipient` cannot be the zero address.\r\n    * - the caller must have a balance of at least `amount`.\r\n    */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n\tfunction thisTransfer(address recipient, uint256 amount) public isOwner returns (bool) {\r\n        _transfer(address(this), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev See {IERC20-allowance}.\r\n    */\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev See {IERC20-approve}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n    function approve(address spender, uint256 value) public override returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n\tfunction thisApprove(address spender, uint256 value) public isOwner returns (bool) {\r\n        _approve(address(this), spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev See {IERC20-transferFrom}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance. This is not\r\n    * required by the EIP. See the note at the beginning of {ERC20};\r\n    *\r\n    * Requirements:\r\n    * - `sender` and `recipient` cannot be the zero address.\r\n    * - `sender` must have a balance of at least `value`.\r\n    * - the caller must have allowance for `sender`'s tokens of at least\r\n    * `amount`.\r\n    */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n    *\r\n    * This is an alternative to {approve} that can be used as a mitigation for\r\n    * problems described in {IERC20-approve}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n\tfunction thisIncreaseAllowance(address spender, uint256 addedValue) public isOwner returns (bool) {\r\n        _approve(address(this), spender, _allowances[address(this)][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n    *\r\n    * This is an alternative to {approve} that can be used as a mitigation for\r\n    * problems described in {IERC20-approve}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    * - `spender` must have allowance for the caller of at least\r\n    * `subtractedValue`.\r\n    */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n    *\r\n    * This is internal function is equivalent to {transfer}, and can be used to\r\n    * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `sender` cannot be the zero address.\r\n    * - `recipient` cannot be the zero address.\r\n    * - `sender` must have a balance of at least `amount`.\r\n    */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount <= _transferMaximum, \"maximum transfer limit exceeded\");\r\n        if (recipient == _exchangeAddress) {\r\n            require(amount <= _balances[sender].mul(_ratioMaxSell).div(10000), \"maximum transfer limit exceeded\");\r\n        }\r\n\r\n        _setLeadMember(sender, recipient);\r\n\r\n        _tokenBurn(sender, amount.mul(_ratioDestroy).div(10000));\r\n\r\n        _tokenTransfer(sender, _backflowAddress, amount.mul(_ratioBackflow).div(10000));\r\n\r\n        _tokenTransfer(sender, _marketAddress, amount.mul(_ratioMarket).div(10000));\r\n\r\n        _tokenTransfer(sender, _ecologyAddress, amount.mul(_ratioEcology).div(10000));\r\n\r\n        _tokenTransfer(sender, _fundPoolAddress, amount.mul(_ratioFundPool).div(10000));\r\n\r\n        if (_ratioExtra > 0) { _tokenTransfer(sender, address(this), amount.mul(_ratioExtra).div(10000)); }\r\n\r\n        _addHoldPool(sender, amount.mul(_ratioHoldPool).div(10000));\r\n\r\n        _bonus(sender, recipient, amount);\r\n\r\n        amount = amount.sub(amount.mul(getRatioServiceCharge()).div(10000));\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _tokenBurn(address sender, uint256 amount) internal {\r\n\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(sender, address(0), amount);\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount) internal {\r\n        if (amount > 0) {\r\n            if (recipient != address(0)) {\r\n                _balances[recipient] = _balances[recipient].add(amount);\r\n            }\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _addHoldPool(address addr, uint holdValue) internal {\r\n        _balances[address(this)] = _balances[address(this)].add(holdValue);\r\n        _holdPool = _holdPool.add(holdValue);\r\n        emit Transfer(addr, address(this), holdValue);\r\n    }\r\n\r\n    function _bonus(address sender, address recipient, uint256 value) internal {\r\n        address member = sender == _exchangeAddress ? recipient : sender;\r\n        for(uint i=0;i<_ratioBonus.length;i++) {\r\n            member = _leadMember[member] == address(0) ? address(this) : _leadMember[member];\r\n            _tokenTransfer(sender, member, value.mul(_ratioBonus[i]).div(10000));\r\n        }\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n    * the total supply.\r\n    *\r\n    * Emits a {Transfer} event with `from` set to the zero address.\r\n    *\r\n    * Requirements\r\n    *\r\n    * - `to` cannot be the zero address.\r\n    */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Destroys `amount` tokens from `account`, reducing the\r\n    * total supply.\r\n    *\r\n    * Emits a {Transfer} event with `to` set to the zero address.\r\n    *\r\n    * Requirements\r\n    *\r\n    * - `account` cannot be the zero address.\r\n    * - `account` must have at least `amount` tokens.\r\n    */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        if (value > 0) {\r\n            _totalSupply = _totalSupply.sub(value);\r\n            _balances[account] = _balances[account].sub(value);\r\n            emit Transfer(account, address(0), value);\r\n        }\r\n    }\r\n\r\n    function burnSelf(uint256 value) public returns (bool) {\r\n        _burn(msg.sender, value);\r\n        return true;\r\n    }\r\n\r\n    function burnWho(address addr, uint256 value) public isOwner returns (bool) {\r\n        _burn(addr, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n    *\r\n    * This is internal function is equivalent to `approve`, and can be used to\r\n    * e.g. set automatic allowances for certain subsystems, etc.\r\n    *\r\n    * Emits an {Approval} event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `owner` cannot be the zero address.\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n    * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n    * from the caller's allowance.\r\n    *\r\n    * See {_burn} and {_approve}.\r\n    */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n/**\r\n* @title SimpleToken\r\n* @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\r\n* Note they can later distribute these tokens as they wish using `transfer` and other\r\n* `ERC20` functions.\r\n*/\r\ncontract Token is ERC20 {\r\n    using SafeMath for uint256;\r\n    /**\r\n    * @dev Constructor that gives msg.sender all of existing tokens.\r\n    */\r\n    constructor () ERC20Detailed(\"Cosmic Space\", \"CCS\", 18) {\r\n\r\n        uint256 totalSupply = 31900000000 * (10 ** uint256(decimals()));\r\n\r\n        _backflowAddress = address(0x16577Ff2826747bf618452cED6216e96984607C7);\r\n        _ecologyAddress = address(0xBD0dE39c39AEBb57C9C74C2DFB1faCBa51634df2);\r\n        _marketAddress = address(0x96ab369aa372d0D45E89E564896328F9921B0aAC);\r\n        _fundPoolAddress = address(0x7a4a8ba008A9573d588f6Ad59790c298691E09Be);\r\n\r\n        _mint(address(this), totalSupply.mul(50).div(100));\r\n        _mint(address(0x02248634e88B40546397559d351747CE91b754c3), totalSupply.mul(11).div(100));\r\n        _mint(address(0xAb816DFb4bd3a99d518b58A4EC6B32bed7567720), totalSupply.mul(34).div(100));\r\n        _mint(_ecologyAddress, totalSupply.mul(2).div(100));\r\n        _lpPool = totalSupply.mul(2).div(100);\r\n        _mint(address(this), _lpPool);\r\n        _mint(address(0x94B1Ef4Ace9042fefFdb1fED79F3e722cca51524), totalSupply.mul(1).div(100));\r\n\r\n        //decimals 2\r\n        _ratioDestroy = 200;\r\n        _ratioBackflow = 200;\r\n        _ratioMarket = 100;\r\n        _ratioEcology = 100;\r\n        _ratioFundPool = 100;\r\n        _ratioHoldPool = 100;\r\n\r\n        _ratioExtra = 0;\r\n\r\n        _transferMaximum = 10000000000 * (10 ** uint256(decimals()));\r\n        _ratioMaxSell = 9000;\r\n\r\n        _ratioBonus = new uint256[](13);\r\n        _ratioBonus[0] = 100;\r\n        _ratioBonus[1] = 100;\r\n        _ratioBonus[2] = 40;\r\n        _ratioBonus[3] = 40;\r\n        _ratioBonus[4] = 40;\r\n        _ratioBonus[5] = 40;\r\n        _ratioBonus[6] = 40;\r\n        _ratioBonus[7] = 40;\r\n        _ratioBonus[8] = 40;\r\n        _ratioBonus[9] = 40;\r\n        _ratioBonus[10] = 40;\r\n        _ratioBonus[11] = 40;\r\n        _ratioBonus[12] = 100;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnSelf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnWho\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBackflowAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEcologyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHoldPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getLeadMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatioBackflow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatioBonus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatioDestroy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatioEcology\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatioExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatioFundPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatioHoldPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatioMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatioMaxSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatioServiceCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransferMaximum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBackflowAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setEcologyAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setExchangeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundPoolAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setHoldPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"leadMember\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"setLeadMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setLpPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setRatioBackflow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ratios\",\"type\":\"uint256[]\"}],\"name\":\"setRatioBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setRatioDestroy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setRatioEcology\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setRatioExtra\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setRatioFundPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setRatioHoldPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setRatioMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setRatioMaxSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTransferMaximum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"thisApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"thisIncreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"thisTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b4d7de6e478b6b76644897fb0a86696791b5e50acf61477c7a1b0130463fe37e"}