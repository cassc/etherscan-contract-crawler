{"SourceCode": "// File: contracts/InterFaces/IWhiteList.sol\r\n\r\npragma solidity ^0.5.9;\r\n\r\ninterface IWhiteList {\r\n    function address_belongs(address _who) external view returns (address);\r\n\r\n    function isWhiteListed(address _who) external view returns (bool);\r\n\r\n    function isAllowedInAuction(address _which) external view returns (bool);\r\n\r\n    function isAddressByPassed(address _which) external view returns (bool);\r\n\r\n    function isExchangeAddress(address _which) external view returns (bool);\r\n\r\n    function main_isTransferAllowed(\r\n        address _msgSender,\r\n        address _from,\r\n        address _to\r\n    ) external returns (bool);\r\n\r\n    function etn_isTransferAllowed(\r\n        address _msgSender,\r\n        address _from,\r\n        address _to\r\n    ) external returns (bool);\r\n\r\n    function stock_isTransferAllowed(\r\n        address _msgSender,\r\n        address _from,\r\n        address _to\r\n    ) external returns (bool);\r\n\r\n    function addWalletBehalfExchange(address _mainWallet, address _subWallet)\r\n        external\r\n        returns (bool);\r\n\r\n    function main_isReceiveAllowed(address user) external view returns (bool);\r\n\r\n    function etn_isReceiveAllowed(address user) external view returns (bool);\r\n\r\n    function stock_isReceiveAllowed(address user) external view returns (bool);\r\n}\r\n\r\n// File: contracts/Tokens/IBEP20.sol\r\n\r\npragma solidity ^0.5.9;\r\n\r\ninterface IBEP20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/common/SafeMath.sol\r\n\r\npragma solidity ^0.5.9;\r\n\r\ncontract SafeMath {\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function safeExponent(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 result;\r\n        assembly {\r\n            result := exp(a, b)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // calculates a^(1/n) to dp decimal places\r\n    // maxIts bounds the number of iterations performed\r\n    function nthRoot(\r\n        uint256 _a,\r\n        uint256 _n,\r\n        uint256 _dp,\r\n        uint256 _maxIts\r\n    ) internal pure returns (uint256) {\r\n        assert(_n > 1);\r\n\r\n        // The scale factor is a crude way to turn everything into integer calcs.\r\n        // Actually do (a * (10 ^ ((dp + 1) * n))) ^ (1/n)\r\n        // We calculate to one extra dp and round at the end\r\n        uint256 one = 10**(1 + _dp);\r\n        uint256 a0 = one**_n * _a;\r\n\r\n        // Initial guess: 1.0\r\n        uint256 xNew = one;\r\n        uint256 x;\r\n\r\n        uint256 iter = 0;\r\n        while (xNew != x && iter < _maxIts) {\r\n            x = xNew;\r\n            uint256 t0 = x**(_n - 1);\r\n            if (x * t0 > a0) {\r\n                xNew = x - (x - a0 / t0) / _n;\r\n            } else {\r\n                xNew = x + (a0 / t0 - x) / _n;\r\n            }\r\n            ++iter;\r\n        }\r\n\r\n        // Round to nearest in the last dp.\r\n        return (xNew + 5) / 10;\r\n    }\r\n}\r\n\r\n// File: contracts/common/Constant.sol\r\n\r\npragma solidity ^0.5.9;\r\n\r\ncontract Constant {\r\n    string constant ERR_CONTRACT_SELF_ADDRESS = \"ERR_CONTRACT_SELF_ADDRESS\";\r\n\r\n    string constant ERR_ZERO_ADDRESS = \"ERR_ZERO_ADDRESS\";\r\n\r\n    string constant ERR_NOT_OWN_ADDRESS = \"ERR_NOT_OWN_ADDRESS\";\r\n\r\n    string constant ERR_VALUE_IS_ZERO = \"ERR_VALUE_IS_ZERO\";\r\n\r\n    string constant ERR_SAME_ADDRESS = \"ERR_SAME_ADDRESS\";\r\n\r\n    string constant ERR_AUTHORIZED_ADDRESS_ONLY = \"ERR_AUTHORIZED_ADDRESS_ONLY\";\r\n\r\n    modifier notOwnAddress(address _which) {\r\n        require(msg.sender != _which, ERR_NOT_OWN_ADDRESS);\r\n        _;\r\n    }\r\n\r\n    // validates an address is not zero\r\n    modifier notZeroAddress(address _which) {\r\n        require(_which != address(0), ERR_ZERO_ADDRESS);\r\n        _;\r\n    }\r\n\r\n    // verifies that the address is different than this contract address\r\n    modifier notThisAddress(address _which) {\r\n        require(_which != address(this), ERR_CONTRACT_SELF_ADDRESS);\r\n        _;\r\n    }\r\n\r\n    modifier notZeroValue(uint256 _value) {\r\n        require(_value > 0, ERR_VALUE_IS_ZERO);\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/common/Ownable.sol\r\n\r\npragma solidity ^0.5.9;\r\n\r\n\r\ncontract Ownable is Constant {\r\n    address public primaryOwner = address(0);\r\n\r\n    address public authorityAddress = address(0);\r\n\r\n    address public systemAddress = address(0);\r\n\r\n    address public newAuthorityAddress = address(0);\r\n\r\n    event OwnershipTransferred(\r\n        string ownerType,\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event AuthorityAddressChnageCall(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the `primaryOwner` and `systemAddress` and '_multisigAddress'\r\n     * account.\r\n     */\r\n    constructor(address _systemAddress, address _authorityAddress)\r\n        public\r\n        notZeroAddress(_systemAddress)\r\n    {\r\n        require(msg.sender != _systemAddress, ERR_SAME_ADDRESS);\r\n\r\n        require(_systemAddress != _authorityAddress, ERR_SAME_ADDRESS);\r\n\r\n        require(msg.sender != _authorityAddress, ERR_SAME_ADDRESS);\r\n\r\n        primaryOwner = msg.sender;\r\n\r\n        systemAddress = _systemAddress;\r\n\r\n        authorityAddress = _authorityAddress;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == primaryOwner, ERR_AUTHORIZED_ADDRESS_ONLY);\r\n        _;\r\n    }\r\n\r\n    modifier onlySystem() {\r\n        require(msg.sender == systemAddress, ERR_AUTHORIZED_ADDRESS_ONLY);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOneOfOnwer() {\r\n        require(\r\n            msg.sender == primaryOwner || msg.sender == systemAddress,\r\n            ERR_AUTHORIZED_ADDRESS_ONLY\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == authorityAddress, ERR_AUTHORIZED_ADDRESS_ONLY);\r\n        _;\r\n    }\r\n\r\n   /**\r\n     * @dev change primary ownership governance \r\n     */\r\n    function changePrimaryOwner()\r\n        public\r\n        onlyOwner()\r\n        returns (bool)\r\n    {\r\n        emit OwnershipTransferred(\"PRIMARY_OWNER\", primaryOwner, authorityAddress);\r\n        primaryOwner = authorityAddress;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev change system address\r\n     * @param _which The address to which is new system address\r\n     */\r\n    function changeSystemAddress(address _which)\r\n        public\r\n        onlyAuthorized()\r\n        notThisAddress(_which)\r\n        notZeroAddress(_which)\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _which != systemAddress &&\r\n                _which != authorityAddress &&\r\n                _which != primaryOwner,\r\n            ERR_SAME_ADDRESS\r\n        );\r\n        emit OwnershipTransferred(\"SYSTEM_ADDRESS\", systemAddress, _which);\r\n        systemAddress = _which;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev change system address\r\n     * @param _which The address to which is new Authority address\r\n     */\r\n    function changeAuthorityAddress(address _which)\r\n        public\r\n        onlyAuthorized()\r\n        notZeroAddress(_which)\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _which != systemAddress &&\r\n                _which != authorityAddress &&\r\n                _which != primaryOwner,\r\n            ERR_SAME_ADDRESS\r\n        );\r\n        newAuthorityAddress = _which;\r\n        return true;\r\n    }\r\n\r\n    function acceptAuthorityAddress() public returns (bool) {\r\n        require(msg.sender == newAuthorityAddress, ERR_AUTHORIZED_ADDRESS_ONLY);\r\n        emit OwnershipTransferred(\r\n            \"AUTHORITY_ADDRESS\",\r\n            authorityAddress,\r\n            newAuthorityAddress\r\n        );\r\n        authorityAddress = newAuthorityAddress;\r\n        newAuthorityAddress = address(0);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/Tokens/StandardToken.sol\r\n\r\npragma solidity ^0.5.9;\r\n\r\n\r\n\r\n\r\n\r\ncontract StandardToken is IBEP20, SafeMath, Ownable {\r\n    \r\n    uint256 public totalSupply;\r\n    \r\n    string public name;\r\n\r\n    string public symbol;\r\n \r\n    uint256 public constant decimals = 18;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n    constructor(string memory _name,\r\n                string memory _symbol,\r\n                address _systemAddress,\r\n                address _authorityAddress) public Ownable(_systemAddress,_authorityAddress)  {\r\n                    \r\n        require(bytes(_name).length > 0 && bytes(_symbol).length > 0);\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    event Mint(address indexed _to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event TransferFrom(\r\n        address indexed spender,\r\n        address indexed _from,\r\n        address indexed _to\r\n    );\r\n    \r\n    \r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _from The address from token transfer.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        uint256 senderBalance = balances[_from];\r\n        require(senderBalance >= _value, \"ERR_NOT_ENOUGH_BALANCE\");\r\n        senderBalance = safeSub(senderBalance, _value);\r\n        balances[_from] = senderBalance;\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n     /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer tokens\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function _transferFrom(address _from, address _to, uint256 _value)\r\n        internal\r\n        notThisAddress(_to)\r\n        notZeroAddress(_to)\r\n        returns (bool)\r\n    {\r\n        require(allowed[_from][msg.sender] >= _value, \"ERR_NOT_ENOUGH_BALANCE\");\r\n        require(_transfer(_from, _to, _value));\r\n        allowed[_from][msg.sender] = safeSub(\r\n            allowed[_from][msg.sender],\r\n            _value\r\n        );\r\n        emit TransferFrom(msg.sender, _from, _to);\r\n        return true;\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) internal notZeroAddress(spender) {\r\n        \r\n        allowed[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function _burn(address _from, uint256 _value) internal returns (bool) {\r\n        uint256 senderBalance = balances[_from];\r\n        require(senderBalance >= _value, \"ERR_NOT_ENOUGH_BALANCE\");\r\n        senderBalance = safeSub(senderBalance, _value);\r\n        balances[_from] = senderBalance;\r\n        totalSupply = safeSub(totalSupply, _value);\r\n        emit Burn(_from, _value);\r\n        emit Transfer(_from, address(0), _value);\r\n        return true;\r\n    }\r\n    \r\n    function _mint(address _to, uint256 _value) internal returns (bool) {\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        totalSupply = safeAdd(totalSupply, _value);\r\n        emit Mint(_to, _value);\r\n        emit Transfer(address(0), _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _who The address to query the the balance of.\r\n     * @return balance An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _who) public view returns (uint256 balance) {\r\n        return balances[_who];\r\n    }\r\n    \r\n \r\n    /**\r\n     * @dev `msg.sender` approves `spender` to spend `value` tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of wei to be approved for transfer\r\n     * @return ok Whether the approval was successful or not\r\n     */\r\n    function approve(address _spender, uint256 _value)\r\n        external\r\n        notZeroAddress(_spender)\r\n        returns (bool ok)\r\n    {\r\n        _approve(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n     /**\r\n     * @dev `msg.sender` approves `spender` to increase spend `value` tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of wei to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function increaseAllowance(address _spender, uint256 _value) external  returns (bool) {\r\n        uint256 currentAllowed = allowed[msg.sender][_spender];\r\n        _approve(msg.sender, _spender, safeAdd(currentAllowed,_value));\r\n        return true;\r\n        \r\n    }\r\n    \r\n     /**\r\n     * @dev `msg.sender` approves `spender` to decrease spend `value` tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of wei to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function decreaseAllowance(address _spender, uint256 _value) external  returns (bool) {\r\n        uint256 currentAllowed = allowed[msg.sender][_spender];\r\n        require(currentAllowed >= _value,\"ERR_ALLOWENCE\");\r\n        _approve(msg.sender, _spender, safeSub(currentAllowed,_value));\r\n        return true;\r\n    }\r\n\r\n\r\n    \r\n    /**\r\n     * @dev to check allowed token for transferFrom\r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens allowed to spent\r\n     */\r\n    function allowance(address _owner, address _spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n   \r\n\r\n    /**\r\n     * @dev burn token from this address\r\n     * @param _value uint256 the amount of tokens to be burned\r\n     */\r\n    function burn(uint256 _value) external returns (bool) {\r\n        return _burn(msg.sender, _value);\r\n    }\r\n    \r\n    /**\r\n    * @dev Returns the bep token owner.\r\n    */\r\n    function getOwner() external view returns (address) {\r\n        return systemAddress;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/InterFaces/IAuctionRegistery.sol\r\n\r\npragma solidity ^0.5.9;\r\n\r\ncontract AuctionRegisteryContracts {\r\n    bytes32 internal constant MAIN_TOKEN = \"MAIN_TOKEN\";\r\n    bytes32 internal constant ETN_TOKEN = \"ETN_TOKEN\";\r\n    bytes32 internal constant STOCK_TOKEN = \"STOCK_TOKEN\";\r\n    bytes32 internal constant WHITE_LIST = \"WHITE_LIST\";\r\n    bytes32 internal constant AUCTION = \"AUCTION\";\r\n    bytes32 internal constant AUCTION_PROTECTION = \"AUCTION_PROTECTION\";\r\n    bytes32 internal constant LIQUIDITY = \"LIQUIDITY\";\r\n    bytes32 internal constant CURRENCY = \"CURRENCY\";\r\n    bytes32 internal constant VAULT = \"VAULT\";\r\n    bytes32 internal constant CONTRIBUTION_TRIGGER = \"CONTRIBUTION_TRIGGER\";\r\n    bytes32 internal constant COMPANY_FUND_WALLET = \"COMPANY_FUND_WALLET\";\r\n    bytes32 internal constant SMART_SWAP = \"SMART_SWAP\";\r\n    bytes32 internal constant SMART_SWAP_P2P = \"SMART_SWAP_P2P\";\r\n    bytes32 internal constant ESCROW = \"ESCROW\";\r\n}\r\n\r\ninterface IAuctionRegistery {\r\n    function getAddressOf(bytes32 _contractName)\r\n        external\r\n        view\r\n        returns (address payable);\r\n}\r\n\r\n// File: contracts/Tokens/TokenUtils.sol\r\n\r\npragma solidity ^0.5.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**@dev keeps track of registry contract at which all the addresses of the wholes system's contracts are stored */\r\ncontract AuctionRegistery is AuctionRegisteryContracts, Ownable {\r\n    \r\n    IAuctionRegistery public contractsRegistry;\r\n    \r\n    address public whiteListAddress;\r\n    address public smartSwapAddress;\r\n    address public currencyPricesAddress;\r\n    address public vaultAddress;\r\n    address public auctionAddress;\r\n    \r\n    /**@dev sets the initial registry address */\r\n    constructor(address _registeryAddress)\r\n        public\r\n        notZeroAddress(_registeryAddress)\r\n    {\r\n        contractsRegistry = IAuctionRegistery(_registeryAddress);\r\n         _updateAddresses();\r\n    }\r\n\r\n    /**@dev updates the address of the registry, called only by the system */\r\n    function updateRegistery(address _address)\r\n        external\r\n        onlyAuthorized()\r\n        notZeroAddress(_address)\r\n        returns (bool)\r\n    {\r\n        contractsRegistry = IAuctionRegistery(_address);\r\n        _updateAddresses();\r\n        return true;\r\n    }\r\n\r\n    /**@dev returns address of the asked contract got from registry contract at the registryAddress\r\n    @param _contractName name of the contract  */\r\n    function getAddressOf(bytes32 _contractName)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return contractsRegistry.getAddressOf(_contractName);\r\n    }\r\n    \r\n    /**@dev updates all the address from the registry contract\r\n    this decision was made to save gas that occurs from calling an external view function */\r\n    function _updateAddresses() internal {\r\n        whiteListAddress = getAddressOf(WHITE_LIST);\r\n        smartSwapAddress = getAddressOf(SMART_SWAP);\r\n        currencyPricesAddress = getAddressOf(CURRENCY);\r\n        vaultAddress = getAddressOf(VAULT);\r\n        auctionAddress = getAddressOf(AUCTION);\r\n    }\r\n    \r\n    function updateAddresses() external returns (bool) {\r\n        _updateAddresses();\r\n    }\r\n}\r\n\r\n\r\n/**@dev Also is a standard IBEP20 token*/\r\ncontract TokenUtils is StandardToken, AuctionRegistery {\r\n    \r\n    /**\r\n     *@dev contructs standard IBEP20 token and auction registry\r\n     *@param _name name of the token\r\n     *@param _symbol symbol of the token\r\n     *@param _systemAddress address that acts as an admin of the system\r\n     *@param _authorityAddress address that can change the systemAddress\r\n     *@param _registeryAddress address of the registry contract the keeps track of all the contract Addresses\r\n     **/\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _systemAddress,\r\n        address _authorityAddress,\r\n        address _registeryAddress\r\n    )\r\n        public\r\n        StandardToken(_name, _symbol, _systemAddress, _authorityAddress)\r\n        AuctionRegistery(_registeryAddress)\r\n    {\r\n       _updateAddresses();\r\n    }\r\n\r\n    \r\n}\r\n\r\n// File: contracts/Tokens/MainToken.sol\r\n\r\npragma solidity ^0.5.9;\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenMinter is TokenUtils {\r\n    modifier onlyAuthorizedAddress() {\r\n        require(msg.sender == auctionAddress, ERR_AUTHORIZED_ADDRESS_ONLY);\r\n        _;\r\n    }\r\n\r\n    function mintTokens(uint256 _amount)\r\n        external\r\n        onlyAuthorizedAddress()\r\n        returns (bool)\r\n    {\r\n        return _mint(msg.sender, _amount);\r\n    }\r\n}\r\n\r\n\r\ncontract MainToken is TokenMinter {\r\n    mapping(address => uint256) public lockedToken;\r\n    mapping(address => uint256) public lastLock;\r\n\r\n    /**\r\n     *@dev constructs contract and premints tokens\r\n     *@param _name name of the token\r\n     *@param _symbol symbol of the token\r\n     *@param _systemAddress address that acts as an admin of the system\r\n     *@param _authorityAddress address that can change the systemAddress\r\n     *@param _registeryAddress address of the registry contract the keeps track of all the contract Addresses\r\n     *@param _which array of address to mint tokens to\r\n     *@param _amount array of corresponding amount getting minted\r\n     **/\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _systemAddress,\r\n        address _authorityAddress,\r\n        address _registeryAddress,\r\n        address[] memory _which,\r\n        uint256[] memory _amount\r\n    )\r\n        public\r\n        TokenUtils(\r\n            _name,\r\n            _symbol,\r\n            _systemAddress,\r\n            _authorityAddress,\r\n            _registeryAddress\r\n        )\r\n    {\r\n        require(_which.length == _amount.length, \"ERR_NOT_SAME_LENGTH\");\r\n\r\n        for (uint256 tempX = 0; tempX < _which.length; tempX++) {\r\n            require(\r\n                IWhiteList(whiteListAddress).isWhiteListed(_which[tempX]),\r\n                \"ERR_TRANSFER_CHECK_WHITELIST\"\r\n            );\r\n            _mint(_which[tempX], _amount[tempX]);\r\n        }\r\n    }\r\n\r\n    function checkBeforeTransfer(address _from, address _to)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        require(\r\n            IWhiteList(whiteListAddress).main_isTransferAllowed(\r\n                msg.sender,\r\n                _from,\r\n                _to\r\n            ),\r\n            \"ERR_NOT_HAVE_PERMISSION_TO_TRANSFER\"\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) external  returns (bool ok) {\r\n        uint256 senderBalance = safeSub(\r\n            balances[msg.sender],\r\n            lockedToken[msg.sender]\r\n        );\r\n        require(senderBalance >= _value, \"ERR_NOT_ENOUGH_BALANCE\");\r\n        require(checkBeforeTransfer(msg.sender, _to));\r\n        return _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external  returns (bool) {\r\n        \r\n        uint256 senderBalance = safeSub(balances[_from], lockedToken[_from]);\r\n        require(senderBalance >= _value, \"ERR_NOT_ENOUGH_BALANCE\");\r\n        \r\n        require(checkBeforeTransfer(_from, _to));\r\n        return _transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    // we need lock time\r\n    // becuse we can check if user invest after new auction start\r\n    // if user invest before token distrubution we dont change anything\r\n    // ex -> user invest  at 11:35 and token distrubution happened at 11:40\r\n    // if in between user invest we dont unlock user token we keep as it as\r\n    // to unlock token set _amount = 0\r\n    function lockToken(\r\n        address _which,\r\n        uint256 _amount,\r\n        uint256 _locktime\r\n    ) external returns (bool) {\r\n        require(msg.sender == auctionAddress, ERR_AUTHORIZED_ADDRESS_ONLY);\r\n        if (_locktime > lastLock[_which]) {\r\n            lockedToken[_which] = _amount;\r\n            lastLock[_which] = _locktime;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // user can unlock their token after 1 day of locking\r\n    // user dont need to call this function as auction set 0 after token distrubution\r\n    // It is failsafe function for user that their token not locked all the time if AUCTION distrubution dont happened\r\n    function unlockToken() external returns (bool) {\r\n        require(\r\n            safeAdd(lastLock[msg.sender], 86400) > now,\r\n            \"ERR_TOKEN_UNLCOK_AFTER_DAY\"\r\n        );\r\n        lockedToken[msg.sender] = 0;\r\n        return true;\r\n    }\r\n\r\n    function() external payable {\r\n        revert(\"ERR_CAN'T_FORCE_ETH\");\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_which\",\"type\":\"address\"}],\"name\":\"changeSystemAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newAuthorityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptAuthorityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changePrimaryOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteListAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_which\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_locktime\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primaryOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_which\",\"type\":\"address\"}],\"name\":\"changeAuthorityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateRegistery\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smartSwapAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"systemAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currencyPricesAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractsRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_systemAddress\",\"type\":\"address\"},{\"name\":\"_authorityAddress\",\"type\":\"address\"},{\"name\":\"_registeryAddress\",\"type\":\"address\"},{\"name\":\"_which\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"TransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerType\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"AuthorityAddressChnageCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "MainToken", "CompilerVersion": "v0.5.9+commit.e560f70d", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000154a7ed86f3cceecfb54fd03034b3311d102399e000000000000000000000000756d25558130dcaaad42e4e73f91a4ed9ed30bb8000000000000000000000000fc457b77abd158dba515c8642f9d07e8cf0bee80000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000074a6f696e7465720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044a4e545200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000072dc50f76c5982004e311086f44f80d9f325c5a1000000000000000000000000d99634a54e2295f23d4dbd5b004f73d4ed0474f5000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000002689e24e3bacf0401b66700000000000000000000000000000000000000000000000152d02c7e14af6800000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://a77d52f10f1634e8140210cc04885d08bd6296f461b6f8386594fe0b89d8ce37"}