{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/algebra/interfaces/IAlgebraPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IAlgebraPoolImmutables.sol';\\nimport './pool/IAlgebraPoolState.sol';\\nimport './pool/IAlgebraPoolDerivedState.sol';\\nimport './pool/IAlgebraPoolActions.sol';\\nimport './pool/IAlgebraPoolPermissionedActions.sol';\\nimport './pool/IAlgebraPoolEvents.sol';\\n\\n/**\\n * @title The interface for a Algebra Pool\\n * @dev The pool interface is broken up into many smaller pieces.\\n * Credit to Uniswap Labs under GPL-2.0-or-later license:\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\n */\\ninterface IAlgebraPool is\\n  IAlgebraPoolImmutables,\\n  IAlgebraPoolState,\\n  IAlgebraPoolDerivedState,\\n  IAlgebraPoolActions,\\n  IAlgebraPoolPermissionedActions,\\n  IAlgebraPoolEvents\\n{\\n  // used only for combining interfaces\\n}\\n\"\r\n    },\r\n    \"contracts/algebra/interfaces/IDataStorageOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\npragma abicoder v2;\\n\\nimport '../libraries/AdaptiveFee.sol';\\n\\ninterface IDataStorageOperator {\\n  event FeeConfiguration(AdaptiveFee.Configuration feeConfig);\\n\\n  /**\\n   * @notice Returns data belonging to a certain timepoint\\n   * @param index The index of timepoint in the array\\n   * @dev There is more convenient function to fetch a timepoint: observe(). Which requires not an index but seconds\\n   * @return initialized Whether the timepoint has been initialized and the values are safe to use,\\n   * blockTimestamp The timestamp of the observation,\\n   * tickCumulative The tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp,\\n   * secondsPerLiquidityCumulative The seconds per in range liquidity for the life of the pool as of the timepoint timestamp,\\n   * volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp,\\n   * averageTick Time-weighted average tick,\\n   * volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp\\n   */\\n  function timepoints(uint256 index)\\n    external\\n    view\\n    returns (\\n      bool initialized,\\n      uint32 blockTimestamp,\\n      int56 tickCumulative,\\n      uint160 secondsPerLiquidityCumulative,\\n      uint88 volatilityCumulative,\\n      int24 averageTick,\\n      uint144 volumePerLiquidityCumulative\\n    );\\n\\n  /// @notice Initialize the dataStorage array by writing the first slot. Called once for the lifecycle of the timepoints array\\n  /// @param time The time of the dataStorage initialization, via block.timestamp truncated to uint32\\n  /// @param tick Initial tick\\n  function initialize(uint32 time, int24 tick) external;\\n\\n  /// @dev Reverts if an timepoint at or before the desired timepoint timestamp does not exist.\\n  /// 0 may be passed as `secondsAgo' to return the current cumulative values.\\n  /// If called with a timestamp falling between two timepoints, returns the counterfactual accumulator values\\n  /// at exactly the timestamp between the two timepoints.\\n  /// @param time The current block timestamp\\n  /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an timepoint\\n  /// @param tick The current tick\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\n  /// @param liquidity The current in-range pool liquidity\\n  /// @return tickCumulative The cumulative tick since the pool was first initialized, as of `secondsAgo`\\n  /// @return secondsPerLiquidityCumulative The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\\n  /// @return volatilityCumulative The cumulative volatility value since the pool was first initialized, as of `secondsAgo`\\n  /// @return volumePerAvgLiquidity The cumulative volume per liquidity value since the pool was first initialized, as of `secondsAgo`\\n  function getSingleTimepoint(\\n    uint32 time,\\n    uint32 secondsAgo,\\n    int24 tick,\\n    uint16 index,\\n    uint128 liquidity\\n  )\\n    external\\n    view\\n    returns (\\n      int56 tickCumulative,\\n      uint160 secondsPerLiquidityCumulative,\\n      uint112 volatilityCumulative,\\n      uint256 volumePerAvgLiquidity\\n    );\\n\\n  /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\\n  /// @dev Reverts if `secondsAgos` > oldest timepoint\\n  /// @param time The current block.timestamp\\n  /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an timepoint\\n  /// @param tick The current tick\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\n  /// @param liquidity The current in-range pool liquidity\\n  /// @return tickCumulatives The cumulative tick since the pool was first initialized, as of each `secondsAgo`\\n  /// @return secondsPerLiquidityCumulatives The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\\n  /// @return volatilityCumulatives The cumulative volatility values since the pool was first initialized, as of each `secondsAgo`\\n  /// @return volumePerAvgLiquiditys The cumulative volume per liquidity values since the pool was first initialized, as of each `secondsAgo`\\n  function getTimepoints(\\n    uint32 time,\\n    uint32[] memory secondsAgos,\\n    int24 tick,\\n    uint16 index,\\n    uint128 liquidity\\n  )\\n    external\\n    view\\n    returns (\\n      int56[] memory tickCumulatives,\\n      uint160[] memory secondsPerLiquidityCumulatives,\\n      uint112[] memory volatilityCumulatives,\\n      uint256[] memory volumePerAvgLiquiditys\\n    );\\n\\n  /// @notice Returns average volatility in the range from time-WINDOW to time\\n  /// @param time The current block.timestamp\\n  /// @param tick The current tick\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\n  /// @param liquidity The current in-range pool liquidity\\n  /// @return TWVolatilityAverage The average volatility in the recent range\\n  /// @return TWVolumePerLiqAverage The average volume per liquidity in the recent range\\n  function getAverages(\\n    uint32 time,\\n    int24 tick,\\n    uint16 index,\\n    uint128 liquidity\\n  ) external view returns (uint112 TWVolatilityAverage, uint256 TWVolumePerLiqAverage);\\n\\n  /// @notice Writes an dataStorage timepoint to the array\\n  /// @dev Writable at most once per block. Index represents the most recently written element. index must be tracked externally.\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\n  /// @param blockTimestamp The timestamp of the new timepoint\\n  /// @param tick The active tick at the time of the new timepoint\\n  /// @param liquidity The total in-range liquidity at the time of the new timepoint\\n  /// @param volumePerLiquidity The gmean(volumes)/liquidity at the time of the new timepoint\\n  /// @return indexUpdated The new index of the most recently written element in the dataStorage array\\n  function write(\\n    uint16 index,\\n    uint32 blockTimestamp,\\n    int24 tick,\\n    uint128 liquidity,\\n    uint128 volumePerLiquidity\\n  ) external returns (uint16 indexUpdated);\\n\\n  /// @notice Changes fee configuration for the pool\\n  function changeFeeConfiguration(AdaptiveFee.Configuration calldata feeConfig) external;\\n\\n  /// @notice Calculates gmean(volume/liquidity) for block\\n  /// @param liquidity The current in-range pool liquidity\\n  /// @param amount0 Total amount of swapped token0\\n  /// @param amount1 Total amount of swapped token1\\n  /// @return volumePerLiquidity gmean(volume/liquidity) capped by 100000 << 64\\n  function calculateVolumePerLiquidity(\\n    uint128 liquidity,\\n    int256 amount0,\\n    int256 amount1\\n  ) external pure returns (uint128 volumePerLiquidity);\\n\\n  /// @return windowLength Length of window used to calculate averages\\n  function window() external view returns (uint32 windowLength);\\n\\n  /// @notice Calculates fee based on combination of sigmoids\\n  /// @param time The current block.timestamp\\n  /// @param tick The current tick\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\n  /// @param liquidity The current in-range pool liquidity\\n  /// @return fee The fee in hundredths of a bip, i.e. 1e-6\\n  function getFee(\\n    uint32 time,\\n    int24 tick,\\n    uint16 index,\\n    uint128 liquidity\\n  ) external view returns (uint16 fee);\\n}\\n\"\r\n    },\r\n    \"contracts/algebra/interfaces/pool/IAlgebraPoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\ninterface IAlgebraPoolActions {\\n  /**\\n   * @notice Sets the initial price for the pool\\n   * @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n   * @param price the initial sqrt price of the pool as a Q64.96\\n   */\\n  function initialize(uint160 price) external;\\n\\n  /**\\n   * @notice Adds liquidity for the given recipient/bottomTick/topTick position\\n   * @dev The caller of this method receives a callback in the form of IAlgebraMintCallback# AlgebraMintCallback\\n   * in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n   * on bottomTick, topTick, the amount of liquidity, and the current price.\\n   * @param sender The address which will receive potential surplus of paid tokens\\n   * @param recipient The address for which the liquidity will be created\\n   * @param bottomTick The lower tick of the position in which to add liquidity\\n   * @param topTick The upper tick of the position in which to add liquidity\\n   * @param amount The desired amount of liquidity to mint\\n   * @param data Any data that should be passed through to the callback\\n   * @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n   * @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n   * @return liquidityActual The actual minted amount of liquidity\\n   */\\n  function mint(\\n    address sender,\\n    address recipient,\\n    int24 bottomTick,\\n    int24 topTick,\\n    uint128 amount,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      uint256 amount0,\\n      uint256 amount1,\\n      uint128 liquidityActual\\n    );\\n\\n  /**\\n   * @notice Collects tokens owed to a position\\n   * @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n   * Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n   * amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n   * actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n   * @param recipient The address which should receive the fees collected\\n   * @param bottomTick The lower tick of the position for which to collect fees\\n   * @param topTick The upper tick of the position for which to collect fees\\n   * @param amount0Requested How much token0 should be withdrawn from the fees owed\\n   * @param amount1Requested How much token1 should be withdrawn from the fees owed\\n   * @return amount0 The amount of fees collected in token0\\n   * @return amount1 The amount of fees collected in token1\\n   */\\n  function collect(\\n    address recipient,\\n    int24 bottomTick,\\n    int24 topTick,\\n    uint128 amount0Requested,\\n    uint128 amount1Requested\\n  ) external returns (uint128 amount0, uint128 amount1);\\n\\n  /**\\n   * @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n   * @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n   * @dev Fees must be collected separately via a call to #collect\\n   * @param bottomTick The lower tick of the position for which to burn liquidity\\n   * @param topTick The upper tick of the position for which to burn liquidity\\n   * @param amount How much liquidity to burn\\n   * @return amount0 The amount of token0 sent to the recipient\\n   * @return amount1 The amount of token1 sent to the recipient\\n   */\\n  function burn(\\n    int24 bottomTick,\\n    int24 topTick,\\n    uint128 amount\\n  ) external returns (uint256 amount0, uint256 amount1);\\n\\n  /**\\n   * @notice Swap token0 for token1, or token1 for token0\\n   * @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback# AlgebraSwapCallback\\n   * @param recipient The address to receive the output of the swap\\n   * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n   * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n   * value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n   * @param data Any data to be passed through to the callback. If using the Router it should contain\\n   * SwapRouter#SwapCallbackData\\n   * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n   * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n   */\\n  function swap(\\n    address recipient,\\n    bool zeroToOne,\\n    int256 amountSpecified,\\n    uint160 limitSqrtPrice,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n\\n  /**\\n   * @notice Swap token0 for token1, or token1 for token0 (tokens that have fee on transfer)\\n   * @dev The caller of this method receives a callback in the form of I AlgebraSwapCallback# AlgebraSwapCallback\\n   * @param sender The address called this function (Comes from the Router)\\n   * @param recipient The address to receive the output of the swap\\n   * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n   * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n   * value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n   * @param data Any data to be passed through to the callback. If using the Router it should contain\\n   * SwapRouter#SwapCallbackData\\n   * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n   * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n   */\\n  function swapSupportingFeeOnInputTokens(\\n    address sender,\\n    address recipient,\\n    bool zeroToOne,\\n    int256 amountSpecified,\\n    uint160 limitSqrtPrice,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n\\n  /**\\n   * @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n   * @dev The caller of this method receives a callback in the form of IAlgebraFlashCallback# AlgebraFlashCallback\\n   * @dev All excess tokens paid in the callback are distributed to liquidity providers as an additional fee. So this method can be used\\n   * to donate underlying tokens to currently in-range liquidity providers by calling with 0 amount{0,1} and sending\\n   * the donation amount(s) from the callback\\n   * @param recipient The address which will receive the token0 and token1 amounts\\n   * @param amount0 The amount of token0 to send\\n   * @param amount1 The amount of token1 to send\\n   * @param data Any data to be passed through to the callback\\n   */\\n  function flash(\\n    address recipient,\\n    uint256 amount0,\\n    uint256 amount1,\\n    bytes calldata data\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/algebra/interfaces/pool/IAlgebraPoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title Pool state that is not stored\\n * @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n * blockchain. The functions here may have variable gas costs.\\n * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\n */\\ninterface IAlgebraPoolDerivedState {\\n  /**\\n   * @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n   * @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n   * the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n   * you must call it with secondsAgos = [3600, 0].\\n   * @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n   * log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n   * @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n   * @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n   * @return secondsPerLiquidityCumulatives Cumulative seconds per liquidity-in-range value as of each `secondsAgos`\\n   * from the current block timestamp\\n   * @return volatilityCumulatives Cumulative standard deviation as of each `secondsAgos`\\n   * @return volumePerAvgLiquiditys Cumulative swap volume per liquidity as of each `secondsAgos`\\n   */\\n  function getTimepoints(uint32[] calldata secondsAgos)\\n    external\\n    view\\n    returns (\\n      int56[] memory tickCumulatives,\\n      uint160[] memory secondsPerLiquidityCumulatives,\\n      uint112[] memory volatilityCumulatives,\\n      uint256[] memory volumePerAvgLiquiditys\\n    );\\n\\n  /**\\n   * @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n   * @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n   * I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n   * snapshot is taken and the second snapshot is taken.\\n   * @param bottomTick The lower tick of the range\\n   * @param topTick The upper tick of the range\\n   * @return innerTickCumulative The snapshot of the tick accumulator for the range\\n   * @return innerSecondsSpentPerLiquidity The snapshot of seconds per liquidity for the range\\n   * @return innerSecondsSpent The snapshot of the number of seconds during which the price was in this range\\n   */\\n  function getInnerCumulatives(int24 bottomTick, int24 topTick)\\n    external\\n    view\\n    returns (\\n      int56 innerTickCumulative,\\n      uint160 innerSecondsSpentPerLiquidity,\\n      uint32 innerSecondsSpent\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/algebra/interfaces/pool/IAlgebraPoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\ninterface IAlgebraPoolEvents {\\n  /**\\n   * @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n   * @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n   * @param price The initial sqrt price of the pool, as a Q64.96\\n   * @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n   */\\n  event Initialize(uint160 price, int24 tick);\\n\\n  /**\\n   * @notice Emitted when liquidity is minted for a given position\\n   * @param sender The address that minted the liquidity\\n   * @param owner The owner of the position and recipient of any minted liquidity\\n   * @param bottomTick The lower tick of the position\\n   * @param topTick The upper tick of the position\\n   * @param liquidityAmount The amount of liquidity minted to the position range\\n   * @param amount0 How much token0 was required for the minted liquidity\\n   * @param amount1 How much token1 was required for the minted liquidity\\n   */\\n  event Mint(\\n    address sender,\\n    address indexed owner,\\n    int24 indexed bottomTick,\\n    int24 indexed topTick,\\n    uint128 liquidityAmount,\\n    uint256 amount0,\\n    uint256 amount1\\n  );\\n\\n  /**\\n   * @notice Emitted when fees are collected by the owner of a position\\n   * @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n   * @param owner The owner of the position for which fees are collected\\n   * @param recipient The address that received fees\\n   * @param bottomTick The lower tick of the position\\n   * @param topTick The upper tick of the position\\n   * @param amount0 The amount of token0 fees collected\\n   * @param amount1 The amount of token1 fees collected\\n   */\\n  event Collect(address indexed owner, address recipient, int24 indexed bottomTick, int24 indexed topTick, uint128 amount0, uint128 amount1);\\n\\n  /**\\n   * @notice Emitted when a position's liquidity is removed\\n   * @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n   * @param owner The owner of the position for which liquidity is removed\\n   * @param bottomTick The lower tick of the position\\n   * @param topTick The upper tick of the position\\n   * @param liquidityAmount The amount of liquidity to remove\\n   * @param amount0 The amount of token0 withdrawn\\n   * @param amount1 The amount of token1 withdrawn\\n   */\\n  event Burn(address indexed owner, int24 indexed bottomTick, int24 indexed topTick, uint128 liquidityAmount, uint256 amount0, uint256 amount1);\\n\\n  /**\\n   * @notice Emitted by the pool for any swaps between token0 and token1\\n   * @param sender The address that initiated the swap call, and that received the callback\\n   * @param recipient The address that received the output of the swap\\n   * @param amount0 The delta of the token0 balance of the pool\\n   * @param amount1 The delta of the token1 balance of the pool\\n   * @param price The sqrt(price) of the pool after the swap, as a Q64.96\\n   * @param liquidity The liquidity of the pool after the swap\\n   * @param tick The log base 1.0001 of price of the pool after the swap\\n   */\\n  event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 price, uint128 liquidity, int24 tick);\\n\\n  /**\\n   * @notice Emitted by the pool for any flashes of token0/token1\\n   * @param sender The address that initiated the swap call, and that received the callback\\n   * @param recipient The address that received the tokens from flash\\n   * @param amount0 The amount of token0 that was flashed\\n   * @param amount1 The amount of token1 that was flashed\\n   * @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n   * @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n   */\\n  event Flash(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1);\\n\\n  /**\\n   * @notice Emitted when the community fee is changed by the pool\\n   * @param communityFee0New The updated value of the token0 community fee percent\\n   * @param communityFee1New The updated value of the token1 community fee percent\\n   */\\n  event CommunityFee(uint8 communityFee0New, uint8 communityFee1New);\\n\\n  /**\\n   * @notice Emitted when new activeIncentive is set\\n   * @param virtualPoolAddress The address of a virtual pool associated with the current active incentive\\n   */\\n  event Incentive(address indexed virtualPoolAddress);\\n\\n  /**\\n   * @notice Emitted when the fee changes\\n   * @param fee The value of the token fee\\n   */\\n  event Fee(uint16 fee);\\n\\n  /**\\n   * @notice Emitted when the LiquidityCooldown changes\\n   * @param liquidityCooldown The value of locktime for added liquidity\\n   */\\n  event LiquidityCooldown(uint32 liquidityCooldown);\\n}\\n\"\r\n    },\r\n    \"contracts/algebra/interfaces/pool/IAlgebraPoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '../IDataStorageOperator.sol';\\n\\n/// @title Pool state that never changes\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\ninterface IAlgebraPoolImmutables {\\n  /**\\n   * @notice The contract that stores all the timepoints and can perform actions with them\\n   * @return The operator address\\n   */\\n  function dataStorageOperator() external view returns (address);\\n\\n  /**\\n   * @notice The contract that deployed the pool, which must adhere to the IAlgebraFactory interface\\n   * @return The contract address\\n   */\\n  function factory() external view returns (address);\\n\\n  /**\\n   * @notice The first of the two tokens of the pool, sorted by address\\n   * @return The token contract address\\n   */\\n  function token0() external view returns (address);\\n\\n  /**\\n   * @notice The second of the two tokens of the pool, sorted by address\\n   * @return The token contract address\\n   */\\n  function token1() external view returns (address);\\n\\n  /**\\n   * @notice The pool tick spacing\\n   * @dev Ticks can only be used at multiples of this value\\n   * e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ...\\n   * This value is an int24 to avoid casting even though it is always positive.\\n   * @return The tick spacing\\n   */\\n  function tickSpacing() external view returns (int24);\\n\\n  /**\\n   * @notice The maximum amount of position liquidity that can use any tick in the range\\n   * @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n   * also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n   * @return The max amount of liquidity per tick\\n   */\\n  function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"contracts/algebra/interfaces/pool/IAlgebraPoolPermissionedActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title Permissioned pool actions\\n * @notice Contains pool methods that may only be called by the factory owner or tokenomics\\n * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\n */\\ninterface IAlgebraPoolPermissionedActions {\\n  /**\\n   * @notice Set the community's % share of the fees. Cannot exceed 25% (250)\\n   * @param communityFee0 new community fee percent for token0 of the pool in thousandths (1e-3)\\n   * @param communityFee1 new community fee percent for token1 of the pool in thousandths (1e-3)\\n   */\\n  function setCommunityFee(uint8 communityFee0, uint8 communityFee1) external;\\n\\n  /**\\n   * @notice Sets an active incentive\\n   * @param virtualPoolAddress The address of a virtual pool associated with the incentive\\n   */\\n  function setIncentive(address virtualPoolAddress) external;\\n\\n  /**\\n   * @notice Sets new lock time for added liquidity\\n   * @param newLiquidityCooldown The time in seconds\\n   */\\n  function setLiquidityCooldown(uint32 newLiquidityCooldown) external;\\n}\\n\"\r\n    },\r\n    \"contracts/algebra/interfaces/pool/IAlgebraPoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\ninterface IAlgebraPoolState {\\n  /**\\n   * @notice The globalState structure in the pool stores many values but requires only one slot\\n   * and is exposed as a single method to save gas when accessed externally.\\n   * @return price The current price of the pool as a sqrt(token1/token0) Q64.96 value;\\n   * Returns tick The current tick of the pool, i.e. according to the last tick transition that was run;\\n   * Returns This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick\\n   * boundary;\\n   * Returns fee The last pool fee value in hundredths of a bip, i.e. 1e-6;\\n   * Returns timepointIndex The index of the last written timepoint;\\n   * Returns communityFeeToken0 The community fee percentage of the swap fee in thousandths (1e-3) for token0;\\n   * Returns communityFeeToken1 The community fee percentage of the swap fee in thousandths (1e-3) for token1;\\n   * Returns unlocked Whether the pool is currently locked to reentrancy;\\n   */\\n  function globalState()\\n    external\\n    view\\n    returns (\\n      uint160 price,\\n      int24 tick,\\n      uint16 fee,\\n      uint16 timepointIndex,\\n      uint8 communityFeeToken0,\\n      uint8 communityFeeToken1,\\n      bool unlocked\\n    );\\n\\n  /**\\n   * @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n   * @dev This value can overflow the uint256\\n   */\\n  function totalFeeGrowth0Token() external view returns (uint256);\\n\\n  /**\\n   * @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n   * @dev This value can overflow the uint256\\n   */\\n  function totalFeeGrowth1Token() external view returns (uint256);\\n\\n  /**\\n   * @notice The currently in range liquidity available to the pool\\n   * @dev This value has no relationship to the total liquidity across all ticks.\\n   * Returned value cannot exceed type(uint128).max\\n   */\\n  function liquidity() external view returns (uint128);\\n\\n  /**\\n   * @notice Look up information about a specific tick in the pool\\n   * @dev This is a public structure, so the `return` natspec tags are omitted.\\n   * @param tick The tick to look up\\n   * @return liquidityTotal the total amount of position liquidity that uses the pool either as tick lower or\\n   * tick upper;\\n   * Returns liquidityDelta how much liquidity changes when the pool price crosses the tick;\\n   * Returns outerFeeGrowth0Token the fee growth on the other side of the tick from the current tick in token0;\\n   * Returns outerFeeGrowth1Token the fee growth on the other side of the tick from the current tick in token1;\\n   * Returns outerTickCumulative the cumulative tick value on the other side of the tick from the current tick;\\n   * Returns outerSecondsPerLiquidity the seconds spent per liquidity on the other side of the tick from the current tick;\\n   * Returns outerSecondsSpent the seconds spent on the other side of the tick from the current tick;\\n   * Returns initialized Set to true if the tick is initialized, i.e. liquidityTotal is greater than 0\\n   * otherwise equal to false. Outside values can only be used if the tick is initialized.\\n   * In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n   * a specific position.\\n   */\\n  function ticks(int24 tick)\\n    external\\n    view\\n    returns (\\n      uint128 liquidityTotal,\\n      int128 liquidityDelta,\\n      uint256 outerFeeGrowth0Token,\\n      uint256 outerFeeGrowth1Token,\\n      int56 outerTickCumulative,\\n      uint160 outerSecondsPerLiquidity,\\n      uint32 outerSecondsSpent,\\n      bool initialized\\n    );\\n\\n  /** @notice Returns 256 packed tick initialized boolean values. See TickTable for more information */\\n  function tickTable(int16 wordPosition) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the information about a position by the position's key\\n   * @dev This is a public mapping of structures, so the `return` natspec tags are omitted.\\n   * @param key The position's key is a hash of a preimage composed by the owner, bottomTick and topTick\\n   * @return liquidityAmount The amount of liquidity in the position;\\n   * Returns lastLiquidityAddTimestamp Timestamp of last adding of liquidity;\\n   * Returns innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke;\\n   * Returns innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke;\\n   * Returns fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke;\\n   * Returns fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\\n   */\\n  function positions(bytes32 key)\\n    external\\n    view\\n    returns (\\n      uint128 liquidityAmount,\\n      uint32 lastLiquidityAddTimestamp,\\n      uint256 innerFeeGrowth0Token,\\n      uint256 innerFeeGrowth1Token,\\n      uint128 fees0,\\n      uint128 fees1\\n    );\\n\\n  /**\\n   * @notice Returns data about a specific timepoint index\\n   * @param index The element of the timepoints array to fetch\\n   * @dev You most likely want to use #getTimepoints() instead of this method to get an timepoint as of some amount of time\\n   * ago, rather than at a specific index in the array.\\n   * This is a public mapping of structures, so the `return` natspec tags are omitted.\\n   * @return initialized whether the timepoint has been initialized and the values are safe to use;\\n   * Returns blockTimestamp The timestamp of the timepoint;\\n   * Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp;\\n   * Returns secondsPerLiquidityCumulative the seconds per in range liquidity for the life of the pool as of the timepoint timestamp;\\n   * Returns volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp;\\n   * Returns averageTick Time-weighted average tick;\\n   * Returns volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp;\\n   */\\n  function timepoints(uint256 index)\\n    external\\n    view\\n    returns (\\n      bool initialized,\\n      uint32 blockTimestamp,\\n      int56 tickCumulative,\\n      uint160 secondsPerLiquidityCumulative,\\n      uint88 volatilityCumulative,\\n      int24 averageTick,\\n      uint144 volumePerLiquidityCumulative\\n    );\\n\\n  /**\\n   * @notice Returns the information about active incentive\\n   * @dev if there is no active incentive at the moment, virtualPool,endTimestamp,startTimestamp would be equal to 0\\n   * @return virtualPool The address of a virtual pool associated with the current active incentive\\n   */\\n  function activeIncentive() external view returns (address virtualPool);\\n\\n  /**\\n   * @notice Returns the lock time for added liquidity\\n   */\\n  function liquidityCooldown() external view returns (uint32 cooldownInSeconds);\\n}\\n\"\r\n    },\r\n    \"contracts/algebra/libraries/AdaptiveFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\n\\nimport './Constants.sol';\\n\\n/// @title AdaptiveFee\\n/// @notice Calculates fee based on combination of sigmoids\\nlibrary AdaptiveFee {\\n  // alpha1 + alpha2 + baseFee must be <= type(uint16).max\\n  struct Configuration {\\n    uint16 alpha1; // max value of the first sigmoid\\n    uint16 alpha2; // max value of the second sigmoid\\n    uint32 beta1; // shift along the x-axis for the first sigmoid\\n    uint32 beta2; // shift along the x-axis for the second sigmoid\\n    uint16 gamma1; // horizontal stretch factor for the first sigmoid\\n    uint16 gamma2; // horizontal stretch factor for the second sigmoid\\n    uint32 volumeBeta; // shift along the x-axis for the outer volume-sigmoid\\n    uint16 volumeGamma; // horizontal stretch factor the outer volume-sigmoid\\n    uint16 baseFee; // minimum possible fee\\n  }\\n\\n  /// @notice Calculates fee based on formula:\\n  /// baseFee + sigmoidVolume(sigmoid1(volatility, volumePerLiquidity) + sigmoid2(volatility, volumePerLiquidity))\\n  /// maximum value capped by baseFee + alpha1 + alpha2\\n  function getFee(\\n    uint88 volatility,\\n    uint256 volumePerLiquidity,\\n    Configuration memory config\\n  ) internal pure returns (uint16 fee) {\\n    uint256 sumOfSigmoids = sigmoid(volatility, config.gamma1, config.alpha1, config.beta1) +\\n      sigmoid(volatility, config.gamma2, config.alpha2, config.beta2);\\n\\n    if (sumOfSigmoids > type(uint16).max) {\\n      // should be impossible, just in case\\n      sumOfSigmoids = type(uint16).max;\\n    }\\n\\n    return uint16(config.baseFee + sigmoid(volumePerLiquidity, config.volumeGamma, uint16(sumOfSigmoids), config.volumeBeta)); // safe since alpha1 + alpha2 + baseFee _must_ be <= type(uint16).max\\n  }\\n\\n  /// @notice calculates \u03b1 / (1 + e^( (\u03b2-x) / \u03b3))\\n  /// that is a sigmoid with a maximum value of \u03b1, x-shifted by \u03b2, and stretched by \u03b3\\n  /// @dev returns uint256 for fuzzy testing. Guaranteed that the result is not greater than alpha\\n  function sigmoid(\\n    uint256 x,\\n    uint16 g,\\n    uint16 alpha,\\n    uint256 beta\\n  ) internal pure returns (uint256 res) {\\n    if (x > beta) {\\n      x = x - beta;\\n      if (x >= 6 * uint256(g)) return alpha; // so x < 19 bits\\n      uint256 g8 = uint256(g)**8; // < 128 bits (8*16)\\n      uint256 ex = exp(x, g, g8); // < 155 bits\\n      res = (alpha * ex) / (g8 + ex); // in worst case: (16 + 155 bits) / 155 bits\\n      // so res <= alpha\\n    } else {\\n      x = beta - x;\\n      if (x >= 6 * uint256(g)) return 0; // so x < 19 bits\\n      uint256 g8 = uint256(g)**8; // < 128 bits (8*16)\\n      uint256 ex = g8 + exp(x, g, g8); // < 156 bits\\n      res = (alpha * g8) / ex; // in worst case: (16 + 128 bits) / 156 bits\\n      // g8 <= ex, so res <= alpha\\n    }\\n  }\\n\\n  /// @notice calculates e^(x/g) * g^8 in a series, since (around zero):\\n  /// e^x = 1 + x + x^2/2 + ... + x^n/n! + ...\\n  /// e^(x/g) = 1 + x/g + x^2/(2*g^2) + ... + x^(n)/(g^n * n!) + ...\\n  function exp(\\n    uint256 x,\\n    uint16 g,\\n    uint256 gHighestDegree\\n  ) internal pure returns (uint256 res) {\\n    // calculating:\\n    // g**8 + x * g**7 + (x**2 * g**6) / 2 + (x**3 * g**5) / 6 + (x**4 * g**4) / 24 + (x**5 * g**3) / 120 + (x**6 * g^2) / 720 + x**7 * g / 5040 + x**8 / 40320\\n\\n    // x**8 < 152 bits (19*8) and g**8 < 128 bits (8*16)\\n    // so each summand < 152 bits and res < 155 bits\\n    uint256 xLowestDegree = x;\\n    res = gHighestDegree; // g**8\\n\\n    gHighestDegree /= g; // g**7\\n    res += xLowestDegree * gHighestDegree;\\n\\n    gHighestDegree /= g; // g**6\\n    xLowestDegree *= x; // x**2\\n    res += (xLowestDegree * gHighestDegree) / 2;\\n\\n    gHighestDegree /= g; // g**5\\n    xLowestDegree *= x; // x**3\\n    res += (xLowestDegree * gHighestDegree) / 6;\\n\\n    gHighestDegree /= g; // g**4\\n    xLowestDegree *= x; // x**4\\n    res += (xLowestDegree * gHighestDegree) / 24;\\n\\n    gHighestDegree /= g; // g**3\\n    xLowestDegree *= x; // x**5\\n    res += (xLowestDegree * gHighestDegree) / 120;\\n\\n    gHighestDegree /= g; // g**2\\n    xLowestDegree *= x; // x**6\\n    res += (xLowestDegree * gHighestDegree) / 720;\\n\\n    xLowestDegree *= x; // x**7\\n    res += (xLowestDegree * g) / 5040 + (xLowestDegree * x) / (40320);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/algebra/libraries/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nlibrary Constants {\\n  uint8 internal constant RESOLUTION = 96;\\n  uint256 internal constant Q96 = 0x1000000000000000000000000;\\n  uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n  // fee value in hundredths of a bip, i.e. 1e-6\\n  uint16 internal constant BASE_FEE = 100;\\n  int24 internal constant TICK_SPACING = 60;\\n\\n  // max(uint128) / ( (MAX_TICK - MIN_TICK) / TICK_SPACING )\\n  uint128 internal constant MAX_LIQUIDITY_PER_TICK = 11505743598341114571880798222544994;\\n\\n  uint32 internal constant MAX_LIQUIDITY_COOLDOWN = 1 days;\\n  uint8 internal constant MAX_COMMUNITY_FEE = 250;\\n  uint256 internal constant COMMUNITY_FEE_DENOMINATOR = 1000;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHypervisor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../algebra/interfaces/IAlgebraPool.sol\\\";\\ninterface IHypervisor {\\n\\n\\n  function deposit(\\n      uint256,\\n      uint256,\\n      address,\\n      address,\\n      uint256[4] memory minIn\\n  ) external returns (uint256);\\n\\n  function withdraw(\\n    uint256,\\n    address,\\n    address,\\n    uint256[4] memory\\n  ) external returns (uint256, uint256);\\n\\n  function compound() external returns (\\n\\n    uint128 baseToken0Owed,\\n    uint128 baseToken1Owed,\\n    uint128 limitToken0Owed,\\n    uint128 limitToken1Owed\\n  );\\n\\n  function compound(uint256[4] memory inMin) external returns (\\n\\n    uint128 baseToken0Owed,\\n    uint128 baseToken1Owed,\\n    uint128 limitToken0Owed,\\n    uint128 limitToken1Owed\\n  );\\n\\n\\n  function rebalance(\\n    int24 _baseLower,\\n    int24 _baseUpper,\\n    int24 _limitLower,\\n    int24 _limitUpper,\\n    address _feeRecipient,\\n    uint256[4] memory minIn, \\n    uint256[4] memory outMin\\n    ) external;\\n\\n  function addBaseLiquidity(\\n    uint256 amount0, \\n    uint256 amount1,\\n    uint256[2] memory minIn\\n  ) external;\\n\\n  function addLimitLiquidity(\\n    uint256 amount0, \\n    uint256 amount1,\\n    uint256[2] memory minIn\\n  ) external;   \\n\\n  function pullLiquidity(\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 shares,\\n    uint256[2] memory amountMin\\n  ) external returns (\\n    uint256 base0,\\n    uint256 base1\\n  );\\n\\n  function pool() external view returns (IAlgebraPool);\\n\\n  function currentTick() external view returns (int24 tick);\\n  \\n  function tickSpacing() external view returns (int24 spacing);\\n\\n  function baseLower() external view returns (int24 tick);\\n\\n  function baseUpper() external view returns (int24 tick);\\n\\n  function limitLower() external view returns (int24 tick);\\n\\n  function limitUpper() external view returns (int24 tick);\\n\\n  function token0() external view returns (IERC20);\\n\\n  function token1() external view returns (IERC20);\\n\\n  function deposit0Max() external view returns (uint256);\\n\\n  function deposit1Max() external view returns (uint256);\\n\\n  function balanceOf(address) external view returns (uint256);\\n\\n  function approve(address, uint256) external returns (bool);\\n\\n  function transferFrom(address, address, uint256) external returns (bool);\\n\\n  function transfer(address, uint256) external returns (bool);\\n\\n  function getTotalAmounts() external view returns (uint256 total0, uint256 total1);\\n  \\n  function getBasePosition() external view returns (uint256 liquidity, uint256 total0, uint256 total1);\\n\\n  function totalSupply() external view returns (uint256 );\\n\\n  function setWhitelist(address _address) external;\\n  \\n  function setFee(uint8 newFee) external;\\n  \\n  function removeWhitelisted() external;\\n\\n  function transferOwnership(address newOwner) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/UniProxy.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/IHypervisor.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ninterface IClearing {\\n\\n\\tfunction clearDeposit(\\n    uint256 deposit0,\\n    uint256 deposit1,\\n    address from,\\n    address to,\\n    address pos,\\n    uint256[4] memory minIn\\n  ) external view returns (bool cleared);\\n\\n\\tfunction clearShares(\\n    address pos,\\n    uint256 shares\\n  ) external view returns (bool cleared);\\n\\n  function getDepositAmount(\\n    address pos,\\n    address token,\\n    uint256 _deposit\\n  ) external view returns (uint256 amountStart, uint256 amountEnd);\\n}\\n\\n/// @title UniProxy v1.2.3\\n/// @notice Proxy contract for hypervisor positions management\\ncontract UniProxy is ReentrancyGuard {\\n\\n\\tIClearing public clearance;\\n  address public owner;\\n\\n  constructor(address _clearance) {\\n    owner = msg.sender;\\n\\t\\tclearance = IClearing(_clearance);\\t\\n  }\\n\\n  /// @notice Deposit into the given position\\n  /// @param deposit0 Amount of token0 to deposit\\n  /// @param deposit1 Amount of token1 to deposit\\n  /// @param to Address to receive liquidity tokens\\n  /// @param pos Hypervisor Address\\n  /// @param minIn min assets to expect in position during a direct deposit \\n  /// @return shares Amount of liquidity tokens received\\n  function deposit(\\n    uint256 deposit0,\\n    uint256 deposit1,\\n    address to,\\n    address pos,\\n    uint256[4] memory minIn\\n  ) nonReentrant external returns (uint256 shares) {\\n    require(to != address(0), \\\"to should be non-zero\\\");\\n\\t\\trequire(clearance.clearDeposit(deposit0, deposit1, msg.sender, to, pos, minIn), \\\"deposit not cleared\\\");\\n\\n\\t\\t/// transfer assets from msg.sender and mint lp tokens to provided address \\n\\t\\tshares = IHypervisor(pos).deposit(deposit0, deposit1, to, msg.sender, minIn);\\n\\t\\trequire(clearance.clearShares(pos, shares), \\\"shares not cleared\\\");\\n  }\\n\\n  /// @notice Get the amount of token to deposit for the given amount of pair token\\n  /// @param pos Hypervisor Address\\n  /// @param token Address of token to deposit\\n  /// @param _deposit Amount of token to deposit\\n  /// @return amountStart Minimum amounts of the pair token to deposit\\n  /// @return amountEnd Maximum amounts of the pair token to deposit\\n  function getDepositAmount(\\n    address pos,\\n    address token,\\n    uint256 _deposit\\n  ) public view returns (uint256 amountStart, uint256 amountEnd) {\\n\\t\\treturn clearance.getDepositAmount(pos, token, _deposit);\\n\\t}\\n\\n\\tfunction transferClearance(address newClearance) external onlyOwner {\\n    require(newClearance != address(0), \\\"newClearance should be non-zero\\\");\\n\\t\\tclearance = IClearing(newClearance);\\n\\t}\\n\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(newOwner != address(0), \\\"newOwner should be non-zero\\\");\\n    owner = newOwner;\\n  }\\n\\n  modifier onlyOwner {\\n    require(msg.sender == owner, \\\"only owner\\\");\\n    _;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"clearance\",\"outputs\":[{\"internalType\":\"contract IClearing\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pos\",\"type\":\"address\"},{\"internalType\":\"uint256[4]\",\"name\":\"minIn\",\"type\":\"uint256[4]\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pos\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newClearance\",\"type\":\"address\"}],\"name\":\"transferClearance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UniProxy", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000eb8c44d1bf8df4f48cc2ada8a400937d2b4a5b8f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}