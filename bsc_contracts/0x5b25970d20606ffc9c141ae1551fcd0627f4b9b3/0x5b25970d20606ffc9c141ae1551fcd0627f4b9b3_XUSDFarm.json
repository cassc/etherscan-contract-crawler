{"SourceCode": "{\"IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    \\r\\n    function symbol() external view returns(string memory);\\r\\n    \\r\\n    function name() external view returns(string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the number of decimal places\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * @title Owner\\r\\n * @dev Set \\u0026 change owner\\r\\n */\\r\\ncontract Ownable {\\r\\n\\r\\n    address private owner;\\r\\n    \\r\\n    // event for EVM logging\\r\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\r\\n    \\r\\n    // modifier to check if caller is owner\\r\\n    modifier onlyOwner() {\\r\\n        // If the first argument of \\u0027require\\u0027 evaluates to \\u0027false\\u0027, execution terminates and all\\r\\n        // changes to the state and to Ether balances are reverted.\\r\\n        // This used to consume all gas in old EVM versions, but not anymore.\\r\\n        // It is often a good idea to use \\u0027require\\u0027 to check if functions are called correctly.\\r\\n        // As a second argument, you can also provide an explanation about what went wrong.\\r\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Set contract deployer as owner\\r\\n     */\\r\\n    constructor() {\\r\\n        owner = msg.sender; // \\u0027msg.sender\\u0027 is sender of current call, contract deployer for a constructor\\r\\n        emit OwnerSet(address(0), owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner\\r\\n     * @param newOwner address of new owner\\r\\n     */\\r\\n    function changeOwner(address newOwner) public onlyOwner {\\r\\n        emit OwnerSet(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return owner address \\r\\n     * @return address of owner\\r\\n     */\\r\\n    function getOwner() external view returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"YieldFarm.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ninterface IFarmManager {\\r\\n    function distribute() external;\\r\\n}\\r\\n\\r\\ninterface IXUSD {\\r\\n    function sell(uint256 tokenAmount) external returns (address,uint);\\r\\n    function mintWithNative(address recipient, uint256 minOut) external payable;\\r\\n}\\r\\n\\r\\nabstract contract ReentrancyGuard {\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n    uint256 private _status;\\r\\n    constructor () {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    modifier nonReentrant() {\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n        _status = _ENTERED;\\r\\n        _;\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n *\\r\\n * xUSD-BNB Farm Contract\\r\\n * Developed by DeFi Mark\\r\\n *\\r\\n */\\r\\ncontract XUSDFarm is ReentrancyGuard, IERC20, Ownable {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    // xUSD\\r\\n    address constant xUSD = 0x324E8E649A6A3dF817F97CdDBED2b746b62553dD;\\r\\n    \\r\\n    // Farm\\r\\n    IFarmManager public FarmManager;\\r\\n    \\r\\n    // precision factor\\r\\n    uint256 constant precision = 10**18;\\r\\n    \\r\\n    // Total Dividends Per Farm\\r\\n    uint256 dividendsPerToken;\\r\\n    \\r\\n    // Total Rewards Given\\r\\n    uint256 _totalRewards;\\r\\n    \\r\\n    // Liquidity Pool Address for xUSD + BNB\\r\\n    address immutable public pair;\\r\\n    \\r\\n    // Router\\r\\n    IUniswapV2Router02 constant router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n\\r\\n    // Contract To Buy And Burn XUSD With LP Tokens Received\\r\\n    address public liquidityBuyAndBurner = 0x19a9621c051AE81131E60B9AD704723355e48573;\\r\\n    \\r\\n    // if withdrawal occurs before lock period\\r\\n    uint256 public earlyFee = 95;\\r\\n    \\r\\n    // 3 days\\r\\n    uint256 public lockTime = 86400;\\r\\n    \\r\\n    // Locker Structure \\r\\n    struct Locker {\\r\\n        uint256 tokensLocked;\\r\\n        uint256 timeLocked;\\r\\n        uint256 lastClaim;\\r\\n        uint256 totalExcluded;\\r\\n        address DEX;\\r\\n        address rewardToken;\\r\\n    }\\r\\n    \\r\\n    // Users -\\u003e Lockers\\r\\n    mapping ( address =\\u003e Locker ) public lockers;\\r\\n    \\r\\n    // total reward claims\\r\\n    mapping ( address =\\u003e uint256 ) totalClaims;\\r\\n    \\r\\n    // total locked across all lockers\\r\\n    uint256 totalLocked;\\r\\n    \\r\\n    constructor(address farmManager) {\\r\\n        FarmManager = IFarmManager(farmManager);\\r\\n        pair = IUniswapV2Factory(router.factory()).getPair(xUSD, router.WETH());        \\r\\n    }\\r\\n    \\r\\n    function rewardTokenForHolder(address holder) external view returns (address) {\\r\\n        return lockers[holder].rewardToken == address(0) ? router.WETH() : lockers[holder].rewardToken;\\r\\n    }\\r\\n    function totalSupply() external view override returns (uint256) { return totalLocked; }\\r\\n    function balanceOf(address account) public view override returns (uint256) { return lockers[account].tokensLocked; }\\r\\n    function allowance(address holder, address spender) external view override returns (uint256) { return holder == spender ? balanceOf(holder) : 0; }\\r\\n    function name() public pure override returns (string memory) {\\r\\n        return \\\"FARM: BNB-XUSD\\\";\\r\\n    }\\r\\n    function symbol() public pure override returns (string memory) {\\r\\n        return \\\"BNB-xUSD\\\";\\r\\n    }\\r\\n    function decimals() public pure override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        // ensure claim requirements\\r\\n        if (recipient == address(this)) {\\r\\n            _reinvestEarnings(msg.sender);\\r\\n        } else {\\r\\n            _makeClaim(msg.sender);\\r\\n        }\\r\\n        amount;\\r\\n        emit Transfer(msg.sender, recipient, 0);\\r\\n        return true;\\r\\n    }\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        if (recipient == address(this)) {\\r\\n            _reinvestEarnings(msg.sender);\\r\\n        } else {\\r\\n            _makeClaim(msg.sender);\\r\\n        }\\r\\n        amount;\\r\\n        emit Transfer(sender, recipient, 0);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    ///////////////////////////////////\\r\\n    //////    OWNER FUNCTIONS   ///////\\r\\n    ///////////////////////////////////\\r\\n    \\r\\n\\r\\n    function setFarmManager(address newManager) external onlyOwner {\\r\\n        FarmManager = IFarmManager(newManager);\\r\\n    }\\r\\n    \\r\\n    function setLockTime(uint256 newTime) external onlyOwner {\\r\\n        lockTime = newTime;\\r\\n    }\\r\\n\\r\\n    function setEarlyFee(uint newFee) external onlyOwner {\\r\\n        require(newFee \\u003e= 90);\\r\\n        earlyFee = newFee;\\r\\n    }\\r\\n    \\r\\n    function setLiquidityBuyAndBurner(address newBurner) external onlyOwner {\\r\\n        liquidityBuyAndBurner = newBurner;\\r\\n    }\\r\\n\\r\\n    function withdraw(uint amount) external onlyOwner {\\r\\n        (bool s,) = payable(msg.sender).call{value: amount}(\\\"\\\");\\r\\n        require(s, \\u0027Failure BNB Withdrawal\\u0027);\\r\\n    }\\r\\n    \\r\\n    function withdraw(address token) external onlyOwner {\\r\\n        require(token != pair, \\u0027Cannot Withdraw LP Tokens\\u0027);\\r\\n        IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\\r\\n    }\\r\\n    \\r\\n    ///////////////////////////////////\\r\\n    //////   PUBLIC FUNCTIONS   ///////\\r\\n    ///////////////////////////////////\\r\\n    \\r\\n    function claimReward() external {\\r\\n        _makeClaim(msg.sender);      \\r\\n    }\\r\\n    \\r\\n    function unlock(uint256 amount) external nonReentrant {\\r\\n        _unlock(msg.sender, msg.sender, amount, false, false);\\r\\n    }\\r\\n    \\r\\n    function unlockAll() external nonReentrant {\\r\\n        _unlock(msg.sender, msg.sender, lockers[msg.sender].tokensLocked, false, false);\\r\\n    }\\r\\n    \\r\\n    function emergencyWithdraw() external nonReentrant {\\r\\n        _unlock(msg.sender, msg.sender, lockers[msg.sender].tokensLocked, false, true);\\r\\n    }\\r\\n    \\r\\n    function unstake(uint256 amount) external nonReentrant {\\r\\n        _unlock(msg.sender, msg.sender, amount, true, false);\\r\\n    }\\r\\n    \\r\\n    function unstakeAll() external nonReentrant {\\r\\n        _unlock(msg.sender, msg.sender, lockers[msg.sender].tokensLocked, true, false);\\r\\n    }\\r\\n    \\r\\n    function unstakeFor(uint256 amount, address recipient) external nonReentrant {\\r\\n        _unlock(msg.sender, recipient, amount, true, false);\\r\\n    }\\r\\n    \\r\\n    function deposit(uint256 amount) external nonReentrant {\\r\\n        \\r\\n        uint256 balBefore = IERC20(pair).balanceOf(address(this));\\r\\n        \\r\\n        bool s = IERC20(pair).transferFrom(msg.sender, address(this), amount);\\r\\n        require(s, \\u0027Failure on TransferFrom\\u0027);\\r\\n        \\r\\n        uint256 received = IERC20(pair).balanceOf(address(this)).sub(balBefore);\\r\\n        require(received \\u003c= amount \\u0026\\u0026 received \\u003e 0, \\u0027Failure On Transfer\\u0027);\\r\\n        \\r\\n        _lock(msg.sender, received);\\r\\n    }\\r\\n    \\r\\n    function reinvestEarnings() external {\\r\\n        require(lockers[msg.sender].tokensLocked \\u003e 0, \\u0027Zero Tokens Locked\\u0027);\\r\\n        _reinvestEarnings(msg.sender);\\r\\n    }\\r\\n\\r\\n    function setRewardToken(address token, address _DEX) external {\\r\\n        lockers[msg.sender].rewardToken = token;\\r\\n        lockers[msg.sender].DEX = _DEX;\\r\\n    }\\r\\n    \\r\\n    ///////////////////////////////////\\r\\n    //////  INTERNAL FUNCTIONS  ///////\\r\\n    ///////////////////////////////////\\r\\n    \\r\\n    function _makeClaim(address user) internal nonReentrant {\\r\\n        // ensure claim requirements\\r\\n        require(lockers[user].tokensLocked \\u003e 0, \\u0027Zero Tokens Locked\\u0027);\\r\\n        require(lockers[user].lastClaim \\u003c block.number, \\u0027Same Block Entry\\u0027);\\r\\n        \\r\\n        uint256 amount = pendingRewards(user);\\r\\n        require(amount \\u003e 0,\\u0027Zero Rewards\\u0027);\\r\\n        _claimReward(user);\\r\\n    }\\r\\n    \\r\\n    function _claimReward(address user) internal {\\r\\n        \\r\\n        // claim dividends\\r\\n        FarmManager.distribute();\\r\\n        \\r\\n        if (lockers[user].tokensLocked == 0) return;\\r\\n        \\r\\n        uint256 amount = pendingRewards(user);\\r\\n        if (amount \\u003e 0) {\\r\\n            // update claim stats \\r\\n            lockers[user].lastClaim = block.number;\\r\\n            totalClaims[user] += amount;\\r\\n            lockers[user].totalExcluded = currentDividends(lockers[user].tokensLocked);\\r\\n            // send reward\\r\\n            _sendReward(user, amount);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    function _sendReward(address user, uint amount) internal {\\r\\n\\r\\n        if (lockers[user].rewardToken == xUSD) {\\r\\n            IXUSD(xUSD).mintWithNative{value: amount}(user, 0);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (lockers[user].rewardToken == address(0) || lockers[user].DEX == address(0)) {\\r\\n            (bool s,) = payable(user).call{value: amount}(\\\"\\\");\\r\\n            require(s);\\r\\n        } else {\\r\\n            IUniswapV2Router02 _router = IUniswapV2Router02(lockers[user].DEX);\\r\\n\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = _router.WETH();\\r\\n            path[1] = lockers[user].rewardToken;\\r\\n\\r\\n            _router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\\r\\n                0,\\r\\n                path,\\r\\n                user,\\r\\n                block.timestamp + 300\\r\\n            );\\r\\n        }\\r\\n\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function _transferIn(address token, uint256 amount) internal returns (uint256) {\\r\\n        uint256 before = IERC20(token).balanceOf(address(this));\\r\\n        \\r\\n        bool s = IERC20(token).transferFrom(msg.sender, address(this), amount);\\r\\n        \\r\\n        uint256 difference = IERC20(token).balanceOf(address(this)).sub(before);\\r\\n        require(s \\u0026\\u0026 difference \\u003c= amount \\u0026\\u0026 difference \\u003e 0, \\u0027Err Transfer In\\u0027);\\r\\n        return difference;\\r\\n    }\\r\\n    \\r\\n    function _pairAndLock(address forUser, uint256 xUSDAmount, uint256 bnbAmount) internal {\\r\\n        \\r\\n        // balance of LP Tokens Before\\r\\n        uint256 lpBalanceBefore = IERC20(pair).balanceOf(address(this));\\r\\n        \\r\\n        // approve router to move tokens\\r\\n        IERC20(xUSD).approve(address(router), xUSDAmount);\\r\\n        \\r\\n        // check slippage\\r\\n        (uint256 minAmountXUSD, uint256 minBNB) = (xUSDAmount.mul(75).div(100), bnbAmount.mul(75).div(100));\\r\\n        \\r\\n        // Calculated Expected Amounts After LP Pairing\\r\\n        uint256 expectedXUSD = IERC20(xUSD).balanceOf(address(this)).sub(xUSDAmount, \\u0027ERR XUSD Amount\\u0027);\\r\\n        uint256 expectedBNB = address(this).balance.sub(bnbAmount, \\u0027ERR BNB Amount\\u0027);\\r\\n        \\r\\n        // add liquidity\\r\\n        router.addLiquidityETH{value: bnbAmount}(\\r\\n            xUSD,\\r\\n            xUSDAmount,\\r\\n            minAmountXUSD,\\r\\n            minBNB,\\r\\n            address(this),\\r\\n            block.timestamp.add(30)\\r\\n        );\\r\\n        \\r\\n        // Track Balances After Liquidity Pairing \\r\\n        uint256 xusdAfter = IERC20(xUSD).balanceOf(address(this));\\r\\n        uint256 bnbAfter = address(this).balance;\\r\\n\\r\\n        // Note LP Tokens Received\\r\\n        uint256 lpReceived = IERC20(pair).balanceOf(address(this)).sub(lpBalanceBefore);\\r\\n        require(lpReceived \\u003e 0, \\u0027Zero LP Received\\u0027);\\r\\n        \\r\\n        // Lock LP Tokens Received\\r\\n        _lock(forUser, lpReceived);\\r\\n        \\r\\n        if (xusdAfter \\u003e expectedXUSD) {\\r\\n            uint256 diff = xusdAfter.sub(expectedXUSD);\\r\\n            IERC20(xUSD).transfer(forUser, diff);\\r\\n        }\\r\\n        \\r\\n        if (bnbAfter \\u003e expectedBNB) {\\r\\n            uint256 diff = bnbAfter.sub(expectedBNB);\\r\\n            (bool s,) = payable(forUser).call{value: diff}(\\\"\\\");\\r\\n            require(s, \\u0027ERR BNB Transfer\\u0027);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _buyAndFarm(uint value) internal {\\r\\n        \\r\\n        // balance of xUSD before purchase\\r\\n        uint256 before = IERC20(xUSD).balanceOf(address(this));\\r\\n        \\r\\n        // divvy up BNB\\r\\n        uint256 xUSDValue = value.mul(5075).div(10000);\\r\\n        uint256 stakeValue = value.sub(xUSDValue);\\r\\n        \\r\\n        // purchase xUSD with half the BNB\\r\\n        (bool s,) = payable(xUSD).call{value: xUSDValue}(\\\"\\\");\\r\\n        require(s, \\u0027Failure on xUSD Purchase\\u0027);\\r\\n        \\r\\n        // xUSD Received from purchase\\r\\n        uint256 received = IERC20(xUSD).balanceOf(address(this)).sub(before);\\r\\n        require(received \\u003e 0, \\u0027Too Few Surge Received\\u0027);\\r\\n\\r\\n        // burn portion of XUSD Received\\r\\n        uint burnAmount = (received * 75 ) / 10**4;\\r\\n        IERC20(xUSD).transfer(xUSD, burnAmount);\\r\\n        \\r\\n        // Pair + Lock Liquidity For Token Pair\\r\\n        uint256 pairAmount = received.sub(burnAmount);\\r\\n        _pairAndLock(msg.sender, pairAmount, stakeValue);\\r\\n    }\\r\\n    \\r\\n    function stakeInXUSD(uint256 amountXUSD) external payable {\\r\\n        \\r\\n        // xUSD received from purchase\\r\\n        uint256 received = _transferIn(xUSD, amountXUSD);\\r\\n        require(received \\u003e 0, \\u0027Too Few Surge Received\\u0027);\\r\\n        \\r\\n        // Pair + Lock Liquidity For Token Pair\\r\\n        _pairAndLock(msg.sender, received, msg.value);\\r\\n    }\\r\\n\\r\\n    \\r\\n    function _lock(address user, uint256 lpReceived) private {\\r\\n        \\r\\n        if (lockers[user].tokensLocked \\u003e 0) {\\r\\n            _claimReward(user);\\r\\n        }\\r\\n        \\r\\n        // add locker data\\r\\n        lockers[user].tokensLocked += lpReceived;\\r\\n        lockers[user].timeLocked = block.number;\\r\\n        lockers[user].totalExcluded = currentDividends(lockers[user].tokensLocked);\\r\\n        \\r\\n        // increment total locked\\r\\n        totalLocked += lpReceived;\\r\\n        \\r\\n        emit Locked(user, lpReceived, block.number + lockTime);\\r\\n        emit Transfer(address(0), user, lpReceived);\\r\\n    }\\r\\n\\r\\n    function _unlock(address user, address lpRecipient, uint256 nTokens, bool removeLiquidity, bool emergency) internal {\\r\\n        \\r\\n        // Ensure Lock Requirements\\r\\n        require(lockers[user].tokensLocked \\u003e 0, \\u0027Zero Tokens Locked\\u0027);\\r\\n        require(lockers[user].tokensLocked \\u003e= nTokens, \\u0027Insufficient Tokens\\u0027);\\r\\n        \\r\\n        bool takeLeaveEarlyFee = (lockers[user].timeLocked + lockTime) \\u003e block.number;\\r\\n        \\r\\n        if (lockers[user].tokensLocked \\u003e 0 \\u0026\\u0026 !emergency) {\\r\\n            _claimReward(user);\\r\\n        }\\r\\n        \\r\\n        // update storage\\r\\n        if (lockers[user].tokensLocked == nTokens) {\\r\\n            delete lockers[user]; // Free Storage\\r\\n        } else {\\r\\n            lockers[user].tokensLocked = lockers[user].tokensLocked.sub(nTokens); // decrement amount locked\\r\\n            lockers[user].totalExcluded = currentDividends(lockers[user].tokensLocked);\\r\\n        }\\r\\n        \\r\\n        // Update Total Locked\\r\\n        totalLocked = totalLocked.sub(nTokens);\\r\\n        \\r\\n        uint256 sendTokens = takeLeaveEarlyFee ? nTokens.mul(earlyFee).div(100) : nTokens;\\r\\n        require(sendTokens \\u003e 0, \\u0027Zero Send Amount\\u0027);\\r\\n        \\r\\n        if (removeLiquidity) {\\r\\n            // Remove LP Send To User\\r\\n            _removeLiquidity(sendTokens, lpRecipient);\\r\\n        } else {\\r\\n            // Transfer LP Tokens To User\\r\\n            bool s = IERC20(pair).transfer(lpRecipient, sendTokens);\\r\\n            require(s, \\u0027Failure on LP Token Transfer\\u0027);\\r\\n        }\\r\\n        \\r\\n        if (takeLeaveEarlyFee) {\\r\\n            uint256 dif = nTokens.sub(sendTokens);\\r\\n            if (dif \\u003e 0) {\\r\\n                IERC20(pair).transfer(liquidityBuyAndBurner, dif);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // tell Blockchain\\r\\n        emit Unlocked(user, nTokens);\\r\\n        emit Transfer(user, address(0), nTokens);\\r\\n    }\\r\\n    \\r\\n    function _removeLiquidity(uint256 nLiquidity, address recipient) private {\\r\\n        \\r\\n        IERC20(pair).approve(address(router), 2*nLiquidity);\\r\\n        \\r\\n        router.removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n            xUSD,\\r\\n            nLiquidity,\\r\\n            0,\\r\\n            0,\\r\\n            recipient,\\r\\n            block.timestamp.add(30)\\r\\n        );\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Reinvests XUSD Rewards Back Into The Farm */\\r\\n    function _reinvestEarnings(address user) internal nonReentrant {\\r\\n        \\r\\n        // claim dividends\\r\\n        FarmManager.distribute();\\r\\n\\r\\n        uint256 amount = pendingRewards(user);\\r\\n        require(amount \\u003e 0, \\u0027Zero Rewards Pending\\u0027);\\r\\n            \\r\\n        // optimistically set storage\\r\\n        lockers[user].lastClaim = block.number;\\r\\n        totalClaims[user] += amount;\\r\\n        lockers[user].totalExcluded = currentDividends(lockers[user].tokensLocked);\\r\\n            \\r\\n        // split Amount in half\\r\\n        uint256 half = amount / 2;\\r\\n        uint256 pairHalf = amount.sub(half);\\r\\n\\r\\n        uint before = IERC20(xUSD).balanceOf(address(this));\\r\\n        // mint XUSD\\r\\n        IXUSD(xUSD).mintWithNative{value: half}(address(this), 0);\\r\\n        uint received = IERC20(xUSD).balanceOf(address(this)) - before;\\r\\n                \\r\\n        // Pair BNB Received with other half of XUSD\\r\\n        _pairAndLock(user, received, pairHalf);\\r\\n    }\\r\\n    \\r\\n    ///////////////////////////////////\\r\\n    //////    READ FUNCTIONS    ///////\\r\\n    ///////////////////////////////////\\r\\n    \\r\\n    function getTotalQuantitiesInLP() public view returns (uint256, uint256) {\\r\\n        return (IERC20(xUSD).balanceOf(pair), IERC20(router.WETH()).balanceOf(pair));\\r\\n    }\\r\\n    \\r\\n    function getRedeemableValue(address user) external view returns (uint256, uint256) {\\r\\n        (uint256 usd, uint256 bnb) = getTotalQuantitiesInLP();\\r\\n        uint256 share = getLPShareForHolder(user);\\r\\n        \\r\\n        return (share.mul(usd).div(precision),share.mul(bnb).div(precision));\\r\\n    }\\r\\n    \\r\\n    function getLPShareForHolder(address user) public view returns (uint256) {\\r\\n        return lockers[user].tokensLocked.mul(precision).div(IERC20(pair).totalSupply());\\r\\n    }\\r\\n    \\r\\n    function getTimeUntilUnlock(address user) external view returns (uint256) {\\r\\n        uint256 endTime = lockers[user].timeLocked + lockTime;\\r\\n        return endTime \\u003e block.number ? endTime.sub(block.number) : 0;\\r\\n    }\\r\\n    \\r\\n    function currentDividends(uint256 share) internal view returns (uint256) {\\r\\n        return share.mul(dividendsPerToken).div(precision);\\r\\n    }\\r\\n    \\r\\n    function pendingRewards(address user) public view returns (uint256) {\\r\\n        uint256 amount = lockers[user].tokensLocked;\\r\\n        if(amount == 0){ return 0; }\\r\\n\\r\\n        uint256 shareholderTotalDividends = currentDividends(amount);\\r\\n        uint256 shareholderTotalExcluded = lockers[user].totalExcluded;\\r\\n\\r\\n        if(shareholderTotalDividends \\u003c= shareholderTotalExcluded){ return 0; }\\r\\n\\r\\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\\r\\n    }\\r\\n    \\r\\n    function totalRewardsClaimedForUser(address user) external view returns (uint256) {\\r\\n        return totalClaims[user];\\r\\n    }\\r\\n    \\r\\n    function totalRewards() external view returns (uint256) {\\r\\n        return _totalRewards;\\r\\n    }\\r\\n    \\r\\n    function calculateUserLPBalance(address user) external view returns (uint256) {\\r\\n        return IERC20(pair).balanceOf(user);\\r\\n    }\\r\\n\\r\\n    function farmWithBNB() external payable {\\r\\n        require(msg.value \\u003e 0);\\r\\n        _buyAndFarm(msg.value);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        require(msg.value \\u003e 0);\\r\\n        dividendsPerToken += msg.value.mul(precision).div(totalLocked);\\r\\n        _totalRewards += msg.value;\\r\\n    }\\r\\n    \\r\\n    event Locked(address staker, uint256 numTokens, uint256 blockUnlocked);\\r\\n    event Unlocked(address staker, uint256 tokensRedeemed);\\r\\n    event RewardClaimed(address user, uint256 amountClaimed);\\r\\n\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockUnlocked\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensRedeemed\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FarmManager\",\"outputs\":[{\"internalType\":\"contract IFarmManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateUserLPBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmWithBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLPShareForHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRedeemableValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTimeUntilUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalQuantitiesInLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityBuyAndBurner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"DEX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"rewardTokenForHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setEarlyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setFarmManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBurner\",\"type\":\"address\"}],\"name\":\"setLiquidityBuyAndBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DEX\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountXUSD\",\"type\":\"uint256\"}],\"name\":\"stakeInXUSD\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalRewardsClaimedForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unstakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XUSDFarm", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c16fb054ffb024bea4012da3dfe7f4b6638ca8df", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://426ec0cadb900caad7e13868fb4aecf23b6ea8f3ee870e651935f8e8f82f4214"}