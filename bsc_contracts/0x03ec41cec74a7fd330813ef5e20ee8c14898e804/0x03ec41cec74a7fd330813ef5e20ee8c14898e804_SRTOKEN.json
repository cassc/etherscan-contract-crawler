{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.10;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n        \r\n    }\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function addLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint amountADesired,\r\n    uint amountBDesired,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline\r\n   ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IDataToken {\r\n    function lpRewardOwner() external view returns (address);\r\n    function lpRewardToken() external view returns (address);\r\n    function nodeRewardOwener() external view returns(address);\r\n    function nodeRewardToken() external view returns (address);\r\n    function marketingWalletAddress() external view returns (address);\r\n    function liquidityReceiveAddress() external view returns (address);\r\n    function asLpAddress() external view returns (address);\r\n    function contractAddress() external view returns (address);\r\n\r\n    function deadFee() external view returns (uint256);\r\n    function reFee() external view returns (uint256);\r\n    function liquidityFee() external view returns (uint256);\r\n    function lpRewardFee() external view returns (uint256);\r\n    function marketingFee() external view returns (uint256);\r\n    function swapTokensAtAmount() external view returns (uint256);\r\n    function asLpFee() external view returns (uint256);\r\n    function minHolderAmountFee() external view returns (uint256);\r\n    function openState() external view returns (uint256);\r\n\r\n    function excludedFromFees(address _addr) external view returns (uint256);\r\n    function wilteAddress(address _addr) external view returns(uint256);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract SRTOKEN is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    IRouter public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    string private constant _name = \"SR\";\r\n    string private constant _symbol = \"SR\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private _totalSupply = 210000000 * 10 ** _decimals;\r\n    uint256 private _minSupply = 21000000 * 10 ** _decimals;\r\n\r\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD; \r\n\r\n    IDataToken tokenData;\r\n    IERC20 usdtToken;\r\n\r\n    bool private swapping;\r\n\r\n    uint256 public amountLiquidityFee;  \r\n    uint256 public amountLpRewardFee; \r\n    uint256 public amountNodeFee;\r\n    uint256 public amountAsLpFee;\r\n\r\n    modifier lockTheSwap {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    constructor(address _addrData){\r\n        tokenData = IDataToken(_addrData);\r\n        uniswapV2Router = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapV2Pair = IFactory(uniswapV2Router.factory()).createPair(address(this), tokenData.contractAddress());\r\n\r\n        usdtToken = IERC20(tokenData.contractAddress());\r\n\r\n        _rOwned[owner()] = _totalSupply;\r\n        \r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _rOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"amount error\");\r\n        if(tokenData.openState()==1 && (to == uniswapV2Pair || from == uniswapV2Pair) && tokenData.wilteAddress(from)==0){\r\n            require(false ,\"Transaction suspension\");\r\n        }\r\n        require(balanceOf(from).sub(amount)>= balanceOf(from).div(100),\"amount not enough\");\r\n        bool canSwap = balanceOf(address(this)) >= tokenData.swapTokensAtAmount();\r\n        if (canSwap && !swapping && from != uniswapV2Pair && tokenData.excludedFromFees(from) == 0 && tokenData.excludedFromFees(to) == 0) {\r\n             _swapAndLiquify(amountLiquidityFee, amountLpRewardFee,amountNodeFee,amountAsLpFee);\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _tokenTransfer(address from, address to, uint256 amount) private {\r\n        bool takeFee = true;\r\n        if (tokenData.excludedFromFees(from) == 1 || tokenData.excludedFromFees(to) == 1) {\r\n            takeFee = false;\r\n        }\r\n        if(from!= uniswapV2Pair && to!=uniswapV2Pair){\r\n            takeFee = false;\r\n        }\r\n        if (takeFee){\r\n            _rOwned[from] = _rOwned[from].sub(amount);\r\n            amount = takeAllFee(from, amount,to); \r\n            _rOwned[to] = _rOwned[to].add(amount);\r\n        }else{\r\n            _rOwned[from] = _rOwned[from].sub(amount);\r\n            _rOwned[to] = _rOwned[to].add(amount);\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function takeAllFee(address from, uint256 amount,address to) private returns(uint256 amountAfter) {\r\n        amountAfter = amount;\r\n\r\n        uint256 DFee = amount.mul(tokenData.deadFee()).div(100);\r\n        if(DFee > 0 && _totalSupply > _rOwned[deadWallet].add(_minSupply)) {\r\n            if (_rOwned[deadWallet].add(DFee).add(_minSupply) > _totalSupply){\r\n                DFee = _totalSupply.sub(_rOwned[deadWallet]).sub(_minSupply);\r\n            }\r\n\r\n            amountAfter = amountAfter.sub(DFee);\r\n            _rOwned[deadWallet] = _rOwned[deadWallet].add(DFee);\r\n            emit Transfer(from, deadWallet, DFee);\r\n        }\r\n\r\n        uint256 MFee = amount.mul(tokenData.marketingFee()).div(100);\r\n        if(MFee > 0) {\r\n            amountAfter = amountAfter.sub(MFee);\r\n            address marketAddress = tokenData.marketingWalletAddress();\r\n            _rOwned[marketAddress] = _rOwned[marketAddress].add(MFee);\r\n            emit Transfer(from, marketAddress, MFee);\r\n        } \r\n\r\n\r\n        uint256 LFee = amount.mul(tokenData.liquidityFee()).div(100);\r\n        amountLiquidityFee += LFee;\r\n        amountAfter = amountAfter.sub(LFee);\r\n\r\n        uint256 LPFee = amount.mul(tokenData.lpRewardFee()).div(100);\r\n        amountLpRewardFee += LPFee;\r\n        amountAfter = amountAfter.sub(LPFee);\r\n\r\n        uint256 ndFee = amount.mul(tokenData.reFee()).div(100);\r\n        amountNodeFee+=ndFee;\r\n        amountAfter = amountAfter.sub(ndFee);\r\n        uint256 asFee = 0;\r\n        if(to == uniswapV2Pair){\r\n            //\u5356\u51fa\r\n            asFee = amount.mul(tokenData.asLpFee()).div(100);\r\n            amountAsLpFee += asFee;\r\n            amountAfter = amountAfter.sub(asFee);\r\n        }\r\n\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(LFee).add(LPFee).add(ndFee).add(asFee);\r\n        emit Transfer(from, address(this), LFee.add(LPFee).add(ndFee).add(asFee));\r\n    }\r\n\r\n    function _swapAndLiquify(uint256 liquidityTokens, uint256 rewardTokens,uint256 nodeToken,uint256 asLpToken) private lockTheSwap {\r\n        if (rewardTokens > 0){\r\n            _swapTokensForRewardToken(rewardTokens);\r\n            amountLpRewardFee = amountLpRewardFee.sub(rewardTokens);\r\n        }\r\n        if(nodeToken > 0){\r\n            _swapTokensForNodeToken(nodeToken);\r\n            amountNodeFee = amountNodeFee.sub(nodeToken);\r\n        }\r\n        if(asLpToken > 0){\r\n             _swapTokensForAsToken(asLpToken);\r\n            amountAsLpFee = amountAsLpFee.sub(asLpToken);\r\n        }\r\n        \r\n         if (liquidityTokens > 0){\r\n            _swapTokensForUSDT(liquidityTokens);\r\n            amountLiquidityFee = amountLiquidityFee.sub(liquidityTokens);\r\n        }\r\n    }\r\n\r\n    function _swapTokensForUSDT(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = tokenData.contractAddress();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            uniswapV2Pair,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    function _swapTokensForRewardToken(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = tokenData.lpRewardToken();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(tokenAmount, 0, path, tokenData.lpRewardOwner(), block.timestamp);\r\n    }\r\n\r\n    function _swapTokensForNodeToken(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = tokenData.nodeRewardToken();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(tokenAmount, 0, path, tokenData.nodeRewardOwener(), block.timestamp);\r\n    }\r\n    function _swapTokensForAsToken(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = tokenData.nodeRewardToken();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(tokenAmount, 0, path, tokenData.asLpAddress(), block.timestamp);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function contractInfo() external view returns (uint256 _deadFee, uint256 _liquidityFee, uint256 _lpRewardFee, uint256 _marketingFee){\r\n        _deadFee = tokenData.deadFee();\r\n        _liquidityFee = tokenData.liquidityFee();\r\n\r\n\r\n        _lpRewardFee = tokenData.lpRewardFee();\r\n        _marketingFee = tokenData.marketingFee();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addrData\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountAsLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLpRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountNodeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SRTOKEN", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ef62c7bde413e01f9ffaca5fe1574e340d04c6f5", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d19fc89cca04d21669a6a63dd20d09c0bf3331c93569e22e9b48c0d1d2021fae"}