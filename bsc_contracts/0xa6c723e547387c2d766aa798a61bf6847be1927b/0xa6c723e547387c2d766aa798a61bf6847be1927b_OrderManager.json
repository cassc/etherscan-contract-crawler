{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IETHUnwrapper.sol\": {\r\n      \"content\": \"pragma solidity >= 0.8.0;\\n\\ninterface IETHUnwrapper {\\n    function unwrap(uint256 _amount, address _to) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILPToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.15;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILPToken is IERC20 {\\n    function mint(address to, uint amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOrderHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.15;\\n\\ninterface IOrderHook {\\n    function postPlaceOrder(uint256 orderId, bytes calldata extradata) external;\\n\\n    function postPlaceSwapOrder(uint256 swapOrderId, bytes calldata extradata) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOrderManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.15;\\n\\nimport {IPoolForOrderManager} from \\\"./IPoolForOrderManager.sol\\\";\\n\\nstruct Order {\\n    IPoolForOrderManager pool;\\n    address owner;\\n    address indexToken;\\n    address collateralToken;\\n    address payToken;\\n    uint256 expiresAt;\\n    uint256 submissionBlock;\\n    uint256 price;\\n    uint256 executionFee;\\n    bool triggerAboveThreshold;\\n}\\n\\nstruct SwapOrder {\\n    IPoolForOrderManager pool;\\n    address owner;\\n    address tokenIn;\\n    address tokenOut;\\n    uint256 amountIn;\\n    uint256 minAmountOut;\\n    uint256 price;\\n    uint256 executionFee;\\n}\\n\\ninterface IOrderManager {\\n    function orders(uint256 id) external view returns (Order memory);\\n\\n    function swapOrders(uint256 id) external view returns (SwapOrder memory);\\n\\n    function executeOrder(uint256 _key, address payable _feeTo) external;\\n\\n    function executeSwapOrder(uint256 _orderId, address payable _feeTo) external;\\n\\n    function cancelTpslOrders(bytes32 positionKey) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {SignedInt} from \\\"../lib/SignedInt.sol\\\";\\n\\nenum Side {\\n    LONG,\\n    SHORT\\n}\\n\\nstruct TokenWeight {\\n    address token;\\n    uint256 weight;\\n}\\n\\ninterface IPool {\\n    function increasePosition(\\n        address _account,\\n        address _indexToken,\\n        address _collateralToken,\\n        uint256 _sizeChanged,\\n        Side _side\\n    ) external;\\n\\n    function decreasePosition(\\n        address _account,\\n        address _indexToken,\\n        address _collateralToken,\\n        uint256 _desiredCollateralReduce,\\n        uint256 _sizeChanged,\\n        Side _side,\\n        address _receiver\\n    ) external;\\n\\n    function liquidatePosition(address _account, address _indexToken, address _collateralToken, Side _side, address _feeTo) external;\\n\\n    function validateToken(address indexToken, address collateralToken, Side side, bool isIncrease)\\n        external\\n        view\\n        returns (bool);\\n\\n    function swap(address _tokenIn, address _tokenOut, uint256 _minOut, address _to, bytes calldata extradata)\\n        external;\\n\\n    function addLiquidity(address _token, uint256 _amountIn, uint256 _minLpAmount, address _to)\\n        external;\\n\\n    function removeLiquidity(address _tokenOut, uint256 _lpAmount, uint256 _minOut, address _to)\\n        external;\\n\\n    function feeReserves(address _token) external view returns (uint256);\\n\\n    function withdrawFee(address _token, address _recipient) external;\\n\\n    function distributeSurplus() external;\\n\\n    // =========== EVENTS ===========\\n    event SetOrderManager(address indexed orderManager);\\n    event IncreasePosition(\\n        bytes32 indexed key,\\n        address account,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 collateralValue,\\n        uint256 sizeChanged,\\n        Side side,\\n        uint256 indexPrice,\\n        uint256 feeValue\\n    );\\n    event UpdatePosition(\\n        bytes32 indexed key,\\n        uint256 size,\\n        uint256 collateralValue,\\n        uint256 entryPrice,\\n        uint256 entryInterestRate,\\n        uint256 reserveAmount,\\n        uint256 indexPrice\\n    );\\n    event DecreasePosition(\\n        bytes32 indexed key,\\n        address account,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 collateralChanged,\\n        uint256 sizeChanged,\\n        Side side,\\n        uint256 indexPrice,\\n        SignedInt pnl,\\n        uint256 feeValue\\n    );\\n    event ClosePosition(\\n        bytes32 indexed key,\\n        uint256 size,\\n        uint256 collateralValue,\\n        uint256 entryPrice,\\n        uint256 entryInterestRate,\\n        uint256 reserveAmount\\n    );\\n    event LiquidatePosition(\\n        bytes32 indexed key,\\n        address account,\\n        address collateralToken,\\n        address indexToken,\\n        Side side,\\n        uint256 size,\\n        uint256 collateralValue,\\n        uint256 reserveAmount,\\n        uint256 indexPrice,\\n        SignedInt pnl,\\n        uint256 feeValue\\n    );\\n    event DaoFeeWithdrawn(address indexed token, address recipient, uint256 amount);\\n    event DaoFeeReduced(address indexed token, uint256 amount);\\n    event FeeDistributorSet(address indexed feeDistributor);\\n    event LiquidityAdded(address indexed tranche, address indexed sender, address token, uint256 amount, uint256 lpAmount);\\n    event LiquidityRemoved(address indexed tranche, address indexed sender, address token, uint256 lpAmount, uint256 amountOut);\\n    event TokenWeightSet(TokenWeight[]);\\n    event Swap(\\n        address indexed sender, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut, uint256 fee\\n    );\\n    event PositionFeeSet(uint256 positionFee, uint256 liquidationFee);\\n    event DaoFeeSet(uint256 value);\\n    event SwapFeeSet(\\n        uint256 baseSwapFee, uint256 taxBasisPoint, uint256 stableCoinBaseSwapFee, uint256 stableCoinTaxBasisPoint\\n    );\\n    event InterestAccrued(address indexed token, uint256 borrowIndex);\\n    event MaxLeverageChanged(uint256 maxLeverage);\\n    event TokenWhitelisted(address indexed token);\\n    event TokenDelisted(address indexed token);\\n    event OracleChanged(address indexed oldOracle, address indexed newOracle);\\n    event InterestRateSet(uint256 interestRate, uint256 interval);\\n    event MaxPositionSizeSet(uint256 maxPositionSize);\\n    event PoolHookChanged(address indexed hook);\\n    event PnLDistributed(address indexed asset, address indexed tranche, uint256 amount, bool hasProfit);\\n    event MaintenanceMarginChanged(uint256 ratio);\\n    event MaxGlobalShortSizeSet(address indexed token, uint256 max);\\n    event MaxGlobalLongSizeRatioSet(address indexed token, uint256 max);\\n    event LiquidatorAuthorized(address indexed liquidator, bool isAuthorized);\\n    event MaxLiquidationGasPriceSet(uint256 maxLiquidationGasPrice);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolForOrderManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {SignedInt} from \\\"../lib/SignedInt.sol\\\";\\nimport {Position} from \\\"../pool/PoolStorage.sol\\\";\\nimport {Side} from \\\"./IPool.sol\\\";\\n\\n\\ninterface IPoolForOrderManager {\\n    function increasePosition(\\n        address _account,\\n        address _indexToken,\\n        address _collateralToken,\\n        uint256 _sizeChanged,\\n        Side _side\\n    ) external;\\n\\n    function decreasePosition(\\n        address _account,\\n        address _indexToken,\\n        address _collateralToken,\\n        uint256 _desiredCollateralReduce,\\n        uint256 _sizeChanged,\\n        Side _side,\\n        address _receiver\\n    ) external;\\n\\n    function validateToken(address indexToken, address collateralToken, Side side, bool isIncrease)\\n        external\\n        view\\n        returns (bool);\\n\\n    function swap(address _tokenIn, address _tokenOut, uint256 _minOut, address _to, bytes calldata extradata)\\n        external;\\n\\n    function getPositionKey(address _owner, address _indexToken, address _collateralToken, Side _side)\\n    external\\n    pure\\n    returns (bytes32);\\n    \\n    function positions(bytes32) external view returns (Position memory);\\n\\n    function isListed(address) external returns (bool);\\n    function isAsset(address) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport {Side, IPool} from \\\"./IPool.sol\\\";\\n\\ninterface IPoolHook {\\n    function postIncreasePosition(\\n        address owner,\\n        address indexToken,\\n        address collateralToken,\\n        Side side,\\n        bytes calldata extradata\\n    ) external;\\n\\n    function postDecreasePosition(\\n        address owner,\\n        address indexToken,\\n        address collateralToken,\\n        Side side,\\n        bytes calldata extradata\\n    ) external;\\n\\n    function postLiquidatePosition(\\n        address owner,\\n        address indexToken,\\n        address collateralToken,\\n        Side side,\\n        bytes calldata extradata\\n    ) external;\\n\\n    function postSwap(address user, address tokenIn, address tokenOut, bytes calldata data) external;\\n\\n    event PostIncreasePositionExecuted(\\n        address pool, address owner, address indexToken, address collateralToken, Side side, bytes extradata\\n    );\\n    event PostDecreasePositionExecuted(\\n        address pool, address owner, address indexToken, address collateralToken, Side side, bytes extradata\\n    );\\n    event PostLiquidatePositionExecuted(\\n        address pool, address owner, address indexToken, address collateralToken, Side side, bytes extradata\\n    );\\n\\n    event PostSwapExecuted(address pool, address user, address tokenIn, address tokenOut, bytes data);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"pragma solidity >= 0.8.0;\\n\\ninterface IPriceOracle {\\n    function getPrice(address token, bool max) external view returns (uint256);\\n    function getMultiplePrices(address[] calldata tokens, bool max) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >= 0.8.0;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SignedInt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.8.0;\\n\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nuint256 constant POS = 1;\\nuint256 constant NEG = 0;\\n\\n/// SignedInt is integer number with sign. It value range is -(2 ^ 256 - 1) to (2 ^ 256 - 1)\\nstruct SignedInt {\\n    /// @dev sig = 1 -> positive, sig = 0 is negative\\n    /// using uint256 which take up full word to optimize gas and contract size\\n    uint256 sig;\\n    uint256 abs;\\n}\\n\\nlibrary SignedIntOps {\\n    using SafeCast for uint256;\\n\\n    function frac(int256 a, uint256 num, uint256 denom) internal pure returns (int256) {\\n        return a * num.toInt256() / denom.toInt256();\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return x < 0 ? uint256(-x) : uint256(x);\\n    }\\n\\n    function asTuple(int256 x) internal pure returns (SignedInt memory) {\\n        return SignedInt({abs: abs(x), sig: x < 0 ? NEG : POS});\\n    }\\n\\n    function cap(int256 x, uint256 maxAbs) internal pure returns (int256) {\\n        int256 min = -maxAbs.toInt256();\\n        return x > min ? x : min;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/orders/OrderManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IPool, Side} from \\\"../interfaces/IPool.sol\\\";\\nimport {SwapOrder, Order} from \\\"../interfaces/IOrderManager.sol\\\";\\nimport {IPriceOracle} from \\\"../interfaces/IPriceOracle.sol\\\";\\nimport {IPoolForOrderManager} from \\\"../interfaces/IPoolForOrderManager.sol\\\";\\nimport {IWETH} from \\\"../interfaces/IWETH.sol\\\";\\nimport {IETHUnwrapper} from \\\"../interfaces/IETHUnwrapper.sol\\\";\\nimport {IOrderHook} from \\\"../interfaces/IOrderHook.sol\\\";\\n\\nenum UpdatePositionType {\\n    INCREASE,\\n    DECREASE\\n}\\n\\nenum OrderType {\\n    MARKET,\\n    LIMIT\\n}\\n\\nstruct UpdatePositionRequest {\\n    Side side;\\n    uint256 sizeChange;\\n    uint256 collateral;\\n    UpdatePositionType updateType;\\n}\\n\\nstruct TpslOrderHelper {\\n    uint256[7] orderData;\\n    address payToken;\\n    bool isLong;\\n}\\n\\ncontract OrderManager is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IWETH;\\n\\n    uint256 constant MARKET_ORDER_TIMEOUT = 5 minutes;\\n    uint256 constant MAX_MIN_EXECUTION_FEE = 1e17; // 0.1 ETH\\n    address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    IWETH public weth;\\n\\n    uint256 public nextOrderId;\\n    mapping(uint256 => Order) public orders;\\n    mapping(uint256 => UpdatePositionRequest) public requests;\\n\\n    uint256 public nextSwapOrderId;\\n    mapping(uint256 => SwapOrder) public swapOrders;\\n\\n    IPoolForOrderManager public pool;\\n    IPriceOracle public oracle;\\n    uint256 public minPerpetualExecutionFee;\\n\\n    IOrderHook public orderHook;\\n\\n    mapping(address => uint256[]) public userOrders;\\n    mapping(address => uint256[]) public userSwapOrders;\\n\\n    IETHUnwrapper public ethUnwrapper;\\n\\n    address public executor;\\n    uint256 public minSwapExecutionFee;\\n\\n    bool isCancelingTpsl;\\n    mapping(bytes32 => uint256[]) public tpslOrders;\\n\\n    modifier onlyExecutor() {\\n        _validateExecutor(msg.sender);\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    receive() external payable {\\n        // prevent send ETH directly to contract\\n        require(msg.sender == address(weth), \\\"OrderManager:rejected\\\");\\n    }\\n\\n    /**\\n     * \\n     * @param _weth The address of WETH.\\n     * @param _oracle  The address of the oracle contract.\\n     * @param _minExecutionFee The minimum execution fee.\\n     * @param _ethUnwrapper The address of the ETH unwrapper contract.\\n     */\\n    function initialize(address _weth, address _oracle, uint256 _minExecutionFee, uint256 _minSwapExecutionFee, address _ethUnwrapper)\\n        external\\n        initializer\\n    {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        require(_oracle != address(0), \\\"OrderManager:invalidOracle\\\");\\n        require(_weth != address(0), \\\"OrderManager:invalidWeth\\\");\\n        require(_minExecutionFee <= MAX_MIN_EXECUTION_FEE, \\\"OrderManager:minExecutionFeeTooHigh\\\");\\n        require(_ethUnwrapper != address(0), \\\"OrderManager:invalidEthUnwrapper\\\");\\n        minPerpetualExecutionFee = _minExecutionFee;\\n        minSwapExecutionFee = _minSwapExecutionFee;\\n        oracle = IPriceOracle(_oracle);\\n        nextOrderId = 1;\\n        nextSwapOrderId = 1;\\n        weth = IWETH(_weth);\\n        ethUnwrapper = IETHUnwrapper(_ethUnwrapper);\\n    }\\n\\n    // ============= VIEW FUNCTIONS ==============\\n    function version() external pure returns (string memory) {\\n        return \\\"1.0.0\\\";\\n    }\\n\\n    /**\\n     * @notice Get the orders of a user.\\n     * @param user The address of the user.\\n     * @param skip The number of orders to skip.\\n     * @param take The number of orders to return.\\n     * @return orderIds The order ids.\\n     */\\n    function getOrders(address user, uint256 skip, uint256 take)\\n        external\\n        view\\n        returns (uint256[] memory orderIds, uint256 total)\\n    {\\n        total = userOrders[user].length;\\n        uint256 toIdx = skip + take;\\n        toIdx = toIdx > total ? total : toIdx;\\n        uint256 nOrders = toIdx > skip ? toIdx - skip : 0;\\n        orderIds = new uint[](nOrders);\\n        for (uint256 i = skip; i < skip + nOrders; i++) {\\n            orderIds[i - skip] = userOrders[user][i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the swap orders of a user\\n     * @param user The address of the user\\n     * @param skip The number of orders to skip\\n     * @param take The number of orders to return\\n     * @return orderIds The order ids\\n     */\\n    function getSwapOrders(address user, uint256 skip, uint256 take)\\n        external\\n        view\\n        returns (uint256[] memory orderIds, uint256 total)\\n    {\\n        total = userSwapOrders[user].length;\\n        uint256 toIdx = skip + take;\\n        toIdx = toIdx > total ? total : toIdx;\\n        uint256 nOrders = toIdx > skip ? toIdx - skip : 0;\\n        orderIds = new uint[](nOrders);\\n        for (uint256 i = skip; i < skip + nOrders; i++) {\\n            orderIds[i] = userSwapOrders[user][i];\\n        }\\n    }\\n\\n    // =========== MUTATIVE FUNCTIONS ==========\\n    /**\\n     * @notice Place an order to increase or decrease position.\\n     * @dev the msg.value needs to be larger than minExecutionFee. If the payToken is ETH, the msg.value needs\\n     * to be larger than payAmount + minExecutionFee.\\n     * @dev emits OrderPlaced event.\\n     * @param _updateType increase or decrease.\\n     * @param _side long or short.\\n     * @param _indexToken index token address.\\n     * @param _collateralToken collateral token address.\\n     * @param _orderType market or limit.\\n     * @param data order data/\\n     * @dev data is encoded as follows:\\n     * - order.price: uint256\\n     * - payToken: address\\n     * - payAmount: uint256\\n     * - request.sizeChange: uint256\\n     * - request.collateral: uint256\\n     * - extradata: bytes\\n     * @dev extradata is encoded as follows:\\n     * - referral: address\\n    */\\n\\n    function placeOrder(\\n        UpdatePositionType _updateType,\\n        Side _side,\\n        address _indexToken,\\n        address _collateralToken,\\n        OrderType _orderType,\\n        bytes calldata data\\n    ) external payable nonReentrant {\\n        bool isIncrease = _updateType == UpdatePositionType.INCREASE;\\n        require(pool.validateToken(_indexToken, _collateralToken, _side, isIncrease), \\\"OrderManager:invalidTokens\\\");\\n        uint256 orderId;\\n        if (isIncrease) {\\n            (, address payToken, uint256 payAmount, , , ) = abi.decode(data, (uint256, address, uint256, uint256, uint256, bytes));\\n            require(pool.isListed(payToken) || payToken == ETH, \\\"OrderManager:invalidPayToken\\\");\\n            uint256 fee = payToken == ETH ? msg.value - payAmount : msg.value;\\n            orderId = _createIncreasePositionOrder(_side, _indexToken, _collateralToken, _orderType, data, fee);\\n        } else {\\n            orderId = _createDecreasePositionOrder(_side, _indexToken, _collateralToken, _orderType, data, msg.value);\\n        }\\n        userOrders[msg.sender].push(orderId);\\n    }\\n\\n    function placeTpslOrder(\\n        UpdatePositionType _updateType,\\n        Side _side,\\n        address _indexToken,\\n        address _collateralToken,\\n        OrderType _orderType,\\n        bytes calldata data,\\n        bytes calldata tpslData\\n    ) external payable nonReentrant {\\n        require(_updateType == UpdatePositionType.INCREASE, \\\"OrderManager:onlyIncrease\\\");\\n        require(\\n            pool.validateToken(_indexToken, _collateralToken, _side, true)\\n             && pool.validateToken(_indexToken, _collateralToken, _side, false), \\n             \\\"OrderManager:invalidTokens\\\"\\n        );\\n        // Order data.\\n        // [0]: payAmount\\n        // [1]: sizeChange\\n        // [2]: collateral\\n        // [3]: tpPrice\\n        // [4]: slPrice\\n        // [5]: fee\\n        // [6]: orderId\\n        TpslOrderHelper memory helper;\\n        helper.isLong = _side == Side.LONG;\\n        (, helper.payToken, helper.orderData[0], helper.orderData[1], helper.orderData[2], ) =\\n            abi.decode(data, (uint256, address, uint256, uint256, uint256, bytes));\\n        (helper.orderData[3], helper.orderData[4]) = abi.decode(tpslData, (uint256, uint256));\\n        helper.orderData[5] = helper.payToken == ETH ? msg.value - helper.orderData[0] : msg.value;\\n        if (helper.orderData[3] > 0 && helper.orderData[4] > 0) {\\n            helper.orderData[5] /= 3;\\n        } else if (helper.orderData[3] + helper.orderData[4] > 0) {\\n            helper.orderData[5] /= 2;\\n        }\\n        helper.orderData[6] = _createIncreasePositionOrder(_side, _indexToken, _collateralToken, _orderType, data, helper.orderData[5]);\\n        userOrders[msg.sender].push(helper.orderData[6]);\\n        // Check if Take-Profit or Stop-Loss are set.\\n        if (helper.orderData[3] > 0) {\\n            // The order has take-profit set.\\n            // Create a decrease position limit order that will trigger when the price reaches the take-profit price.\\n            helper.orderData[6] = _createDecreasePositionOrder(\\n                _side, \\n                _indexToken, \\n                _collateralToken, \\n                OrderType.LIMIT,\\n                abi.encode(\\n                    // price (take-profit price that will trigger the decrease position order)\\n                    helper.orderData[3],\\n                    // triggerAboveThreshold (for take-profit when longing trigger when price is above the take-profit price; \\n                    // for shorting trigger when price is below the take-profit price)\\n                    helper.isLong, \\n                    // payToken\\n                    _collateralToken, \\n                    // sizeChange (the same as the size of the increase position order)\\n                    helper.orderData[1], \\n                    // collateralChange (the same as the collateral of the increase position order)\\n                    helper.orderData[2],\\n                    // extra data\\n                    \\\"0x\\\"\\n                ),\\n                helper.orderData[5]\\n            );\\n            {\\n                userOrders[msg.sender].push(helper.orderData[6]);\\n                tpslOrders[pool.getPositionKey(msg.sender, _indexToken, _collateralToken, _side)].push(helper.orderData[6]);\\n            }\\n        }\\n\\n        if (helper.orderData[4] > 0) {\\n            // The order has stop-loss set.\\n            // Create a decrease position limit order that will trigger when the price reaches the stop-loss price.\\n            helper.orderData[6] = _createDecreasePositionOrder(\\n                _side, \\n                _indexToken, \\n                _collateralToken, \\n                OrderType.LIMIT,\\n                abi.encode(\\n                    // price (stop-loss price that will trigger the decrease position order)\\n                    helper.orderData[4],\\n                    // triggerAboveThreshold (for take-profit when longing trigger when price is below the stop-loss price;\\n                    // for shorting trigger when price is above the stop-loss price)\\n                    !helper.isLong,\\n                    // payToken\\n                    _collateralToken, \\n                    // sizeChange (the same as the size of the increase position order)\\n                    helper.orderData[1], \\n                    // collateralChange (the same as the collateral of the increase position order)\\n                    helper.orderData[2],\\n                    // extra data\\n                    \\\"0x\\\"\\n                ),\\n                helper.orderData[5]\\n            );\\n            {\\n                userOrders[msg.sender].push(helper.orderData[6]);\\n                tpslOrders[pool.getPositionKey(msg.sender, _indexToken, _collateralToken, _side)].push(helper.orderData[6]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Place an order to swap tokens.\\n     * @dev The msg.value needs to be larger than minExecutionFee. If the payToken is ETH, the msg.value needs\\n     * to be larger than amountIn + minExecutionFee.\\n     * @dev emits SwapOrderPlaced event.\\n     * @param _tokenIn The token to swap from.\\n     * @param _tokenOut The token to swap to.\\n     * @param _amountIn The amount of token to swap from.\\n     * @param _minOut The minimum amount of token to swap to.\\n     * @param _price The price limit.\\n     * @dev Emits a SwapOrderPlaced event.\\n     */\\n    function placeSwapOrder(address _tokenIn, address _tokenOut, uint256 _amountIn, uint256 _minOut, uint256 _price)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        address payToken;\\n        (payToken, _tokenIn) = _tokenIn == ETH ? (ETH, address(weth)) : (_tokenIn, _tokenIn);\\n        // if token out is ETH, check wether pool support WETH\\n        require(\\n            pool.isListed(_tokenIn) && pool.isAsset(_tokenOut == ETH ? address(weth) : _tokenOut),\\n            \\\"OrderManager:invalidTokens\\\"\\n        );\\n\\n        uint256 executionFee;\\n        if (payToken == ETH) {\\n            executionFee = msg.value - _amountIn;\\n            weth.deposit{value: _amountIn}();\\n        } else {\\n            executionFee = msg.value;\\n            IERC20(_tokenIn).safeTransferFrom(msg.sender, address(this), _amountIn);\\n        }\\n\\n        require(executionFee >= minSwapExecutionFee, \\\"OrderManager:executionFeeTooLow\\\");\\n\\n        SwapOrder memory order = SwapOrder({\\n            pool: pool,\\n            owner: msg.sender,\\n            tokenIn: _tokenIn,\\n            tokenOut: _tokenOut,\\n            amountIn: _amountIn,\\n            minAmountOut: _minOut,\\n            price: _price,\\n            executionFee: executionFee\\n        });\\n        swapOrders[nextSwapOrderId] = order;\\n        userSwapOrders[msg.sender].push(nextSwapOrderId);\\n        emit SwapOrderPlaced(nextSwapOrderId);\\n        nextSwapOrderId += 1;\\n    }\\n\\n    /**\\n     * @notice Performs a market price swap.\\n     * @param _fromToken token to swap from.\\n     * @param _toToken token to swap to.\\n     * @param _amountIn amount of token to swap from.\\n     * @param _minAmountOut minimum amount of token to swap to.\\n     * @dev emits a Swap event.\\n     */\\n    function swap(address _fromToken, address _toToken, uint256 _amountIn, uint256 _minAmountOut) external payable nonReentrant {\\n        (address outToken, address receiver) = _toToken == ETH ? (address(weth), address(this)) : (_toToken, msg.sender);\\n        \\n        address inToken;\\n        if (_fromToken == ETH) {\\n            _amountIn = msg.value;\\n            inToken = address(weth);\\n            weth.deposit{value: _amountIn}();\\n            weth.safeTransfer(address(pool), _amountIn);\\n        } else {\\n            inToken = _fromToken;\\n            IERC20(inToken).safeTransferFrom(msg.sender, address(pool), _amountIn);\\n        }        \\n\\n        uint256 amountOut = _doSwap(inToken, outToken, _minAmountOut, receiver, msg.sender);\\n        \\n        if (outToken == address(weth) && _toToken == ETH) {\\n            _safeUnwrapETH(amountOut, msg.sender);\\n        }\\n        emit Swap(msg.sender, _fromToken, _toToken, address(pool), _amountIn, amountOut);\\n    }\\n\\n    /**\\n     * @notice Executes an order.\\n     * @param _orderId order id\\n     * @param _feeTo fee receiver\\n     * @dev requires the msg.sender to be the executor.\\n     * @dev if expiration is due, the order will be expired and the collateral will be returned.\\n     * @dev emits an OrderExecuted event.\\n     */\\n\\n    function executeOrder(uint256 _orderId, address payable _feeTo) external nonReentrant onlyExecutor {\\n        Order memory order = orders[_orderId];\\n        require(order.owner != address(0), \\\"OrderManager:orderNotExists\\\");\\n        require(order.pool == pool, \\\"OrderManager:invalidOrPausedPool\\\");\\n        require(block.number > order.submissionBlock, \\\"OrderManager:blockNotPass\\\");\\n\\n        if (order.expiresAt != 0 && order.expiresAt < block.timestamp) {\\n            _expiresOrder(_orderId, order);\\n            return;\\n        }\\n        UpdatePositionRequest memory request = requests[_orderId];\\n        uint256 indexPrice = _getMarkPrice(order, request);\\n        bool isValid = order.triggerAboveThreshold ? indexPrice >= order.price : indexPrice <= order.price;\\n        if (!isValid) {\\n            return;\\n        }\\n\\n        _executeRequest(order, request, _orderId);\\n        _removeUserOrder(order.owner, _orderId);\\n        delete orders[_orderId];\\n        delete requests[_orderId];\\n        _safeTransferETH(_feeTo, order.executionFee);\\n        emit OrderExecuted(_orderId, order, request, indexPrice);\\n    }\\n\\n    /**\\n     * @notice Cancels an order.\\n     * @param _orderId order id\\n     * @dev requires the msg.sender to be the owner of the order.\\n     * @dev the execution fee will be returned.\\n     * @dev if the order is an increase position order, the collateral will be returned.\\n     * @dev emits an OrderCancelled event\\n     */\\n    function cancelOrder(uint256 _orderId) public nonReentrant {\\n        _cancelOrder(_orderId);\\n    }\\n\\n    function cancelTpslOrders(bytes32 positionKey) external {\\n        require(msg.sender == address(pool), \\\"OrderManager:unauthorizedCancellation\\\");\\n        uint256 length = tpslOrders[positionKey].length;\\n\\n        if (length == 0) {\\n            return;\\n        }\\n\\n        isCancelingTpsl = true;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (orders[tpslOrders[positionKey][i]].owner != address(0)) {\\n                _cancelOrder(tpslOrders[positionKey][i]);\\n            }\\n        }\\n        isCancelingTpsl = false;\\n        delete tpslOrders[positionKey];\\n    }\\n\\n    /**\\n     * @notice Cancels a swap order.\\n     * @param _orderId order id\\n     * @dev requires the msg.sender to be the owner of the order.\\n     * @dev the execution fee will be returned.\\n     * @dev the tokenIn will be returned.\\n     * @dev emits a SwapOrderCancelled event\\n     */\\n    function cancelSwapOrder(uint256 _orderId) external nonReentrant {\\n        SwapOrder memory order = swapOrders[_orderId];\\n        require(order.owner == msg.sender, \\\"OrderManager:unauthorizedCancellation\\\");\\n        delete swapOrders[_orderId];\\n        _safeTransferETH(order.owner, order.executionFee);\\n        IERC20(order.tokenIn).safeTransfer(order.owner, order.amountIn);\\n        emit SwapOrderCancelled(_orderId);\\n    }\\n\\n    /**\\n     * @notice Executes a swap order.\\n     * @param _orderId order id\\n     * @param _feeTo fee receiver\\n     * @dev requires the msg.sender to be the executor.\\n     * @dev emits a SwapOrderExecuted event.\\n     */\\n    function executeSwapOrder(uint256 _orderId, address payable _feeTo) external nonReentrant onlyExecutor {\\n        SwapOrder memory order = swapOrders[_orderId];\\n        require(order.owner != address(0), \\\"OrderManager:notFound\\\");\\n        delete swapOrders[_orderId];\\n        IERC20(order.tokenIn).safeTransfer(address(order.pool), order.amountIn);\\n        uint256 amountOut;\\n        if (order.tokenOut != ETH) {\\n            amountOut = _doSwap(order.tokenIn, order.tokenOut, order.minAmountOut, order.owner, order.owner);\\n        } else {\\n            amountOut = _doSwap(order.tokenIn, address(weth), order.minAmountOut, address(this), order.owner);\\n            _safeUnwrapETH(amountOut, order.owner);\\n        }\\n        _safeTransferETH(_feeTo, order.executionFee);\\n        require(amountOut >= order.minAmountOut, \\\"OrderManager:slippageReached\\\");\\n        emit SwapOrderExecuted(_orderId, order.amountIn, amountOut);\\n    }\\n\\n    // ========= INTERNAL FUNCTIONS ==========\\n\\n    function _getMarkPrice(Order memory order, UpdatePositionRequest memory request) internal view returns (uint256) {\\n        bool max = (request.updateType == UpdatePositionType.INCREASE) == (request.side == Side.LONG);\\n        return oracle.getPrice(order.indexToken, max);\\n    }\\n\\n    function _executeRequest(Order memory _order, UpdatePositionRequest memory _request, uint256 _orderId) internal {\\n        if (_request.updateType == UpdatePositionType.INCREASE) {\\n            bool noSwap = (_order.payToken == ETH && _order.collateralToken == address(weth))\\n                || (_order.payToken == _order.collateralToken);\\n\\n            if (!noSwap) {\\n                address fromToken = _order.payToken == ETH ? address(weth) : _order.payToken;\\n                _request.collateral =\\n                    _poolSwap(fromToken, _order.collateralToken, _request.collateral, 0, address(this), _order.owner);\\n            }\\n\\n            IERC20(_order.collateralToken).safeTransfer(address(_order.pool), _request.collateral);\\n            _order.pool.increasePosition(\\n                _order.owner, _order.indexToken, _order.collateralToken, _request.sizeChange, _request.side\\n            );\\n        } else {\\n            IERC20 collateralToken = IERC20(_order.collateralToken);\\n            uint256 priorBalance = collateralToken.balanceOf(address(this));\\n            _order.pool.decreasePosition(\\n                _order.owner,\\n                _order.indexToken,\\n                _order.collateralToken,\\n                _request.collateral,\\n                _request.sizeChange,\\n                _request.side,\\n                address(this)\\n            );\\n            uint256 payoutAmount = collateralToken.balanceOf(address(this)) - priorBalance;\\n            if (_order.collateralToken == address(weth) && _order.payToken == ETH) {\\n                _safeUnwrapETH(payoutAmount, _order.owner);\\n            } else if (_order.collateralToken != _order.payToken) {\\n                IERC20(_order.collateralToken).safeTransfer(address(_order.pool), payoutAmount);\\n                _order.pool.swap(_order.collateralToken, _order.payToken, 0, _order.owner, abi.encode(_order.owner));\\n            } else {\\n                collateralToken.safeTransfer(_order.owner, payoutAmount);\\n            }\\n            // Check if position is zero, if so, remove from tpslOrders.\\n            bytes32 positionKey = _order.pool.getPositionKey(_order.owner, _order.indexToken, _order.collateralToken, _request.side);\\n            if (_order.pool.positions(positionKey).size == 0) {\\n                uint256[] memory tpslOrderIds = tpslOrders[positionKey];\\n                isCancelingTpsl = true;\\n                for (uint256 i = 0; i < tpslOrderIds.length; i++) {\\n                    if (tpslOrderIds[i] != _orderId && orders[tpslOrderIds[i]].owner == _order.owner) {\\n                        _cancelOrder(tpslOrderIds[i]);\\n                    }\\n                }\\n                isCancelingTpsl = false;\\n                delete tpslOrders[positionKey];\\n            }\\n        }\\n    }\\n\\n    function _cancelOrder(uint256 _orderId) internal {\\n        Order memory order = orders[_orderId];\\n        require(order.owner == msg.sender || isCancelingTpsl, \\\"OrderManager:unauthorizedCancellation\\\");\\n        UpdatePositionRequest memory request = requests[_orderId];\\n\\n        _removeUserOrder(order.owner, _orderId);\\n        delete orders[_orderId];\\n        delete requests[_orderId];\\n\\n        _safeTransferETH(order.owner, order.executionFee);\\n        if (request.updateType == UpdatePositionType.INCREASE) {\\n            _refundCollateral(order.payToken, request.collateral, order.owner);\\n        }\\n\\n        emit OrderCancelled(_orderId);\\n    }\\n\\n    function _createDecreasePositionOrder(\\n        Side _side,\\n        address _indexToken,\\n        address _collateralToken,\\n        OrderType _orderType,\\n        bytes memory _data,\\n        uint256 _executionFee\\n    ) internal returns (uint256 orderId) {\\n        Order memory order;\\n        UpdatePositionRequest memory request;\\n        bytes memory extradata;\\n\\n        if (_orderType == OrderType.MARKET) {\\n            (order.price, order.payToken, request.sizeChange, request.collateral, extradata) =\\n                abi.decode(_data, (uint256, address, uint256, uint256, bytes));\\n            order.triggerAboveThreshold = _side == Side.LONG;\\n        } else {\\n            (\\n                order.price,\\n                order.triggerAboveThreshold,\\n                order.payToken,\\n                request.sizeChange,\\n                request.collateral,\\n                extradata\\n            ) = abi.decode(_data, (uint256, bool, address, uint256, uint256, bytes));\\n        }\\n\\n        order.pool = pool;\\n        order.owner = msg.sender;\\n        order.indexToken = _indexToken;\\n        order.collateralToken = _collateralToken;\\n        order.expiresAt = _orderType == OrderType.MARKET ? block.timestamp + MARKET_ORDER_TIMEOUT : 0;\\n        order.submissionBlock = block.number;\\n        order.executionFee = _executionFee;\\n        uint256 minExecutionFee = _calcMinPerpetualExecutionFee(order.collateralToken, order.payToken);\\n        require(order.executionFee >= minExecutionFee, \\\"OrderManager:executionFeeTooLow\\\");\\n        request.updateType = UpdatePositionType.DECREASE;\\n        request.side = _side;\\n        orderId = nextOrderId;\\n        nextOrderId = orderId + 1;\\n        orders[orderId] = order;\\n        requests[orderId] = request;\\n\\n        if (address(orderHook) != address(0)) {\\n            orderHook.postPlaceOrder(orderId, extradata);\\n        }\\n\\n        emit OrderPlaced(orderId, order, request);\\n    }\\n\\n    function _createIncreasePositionOrder(\\n        Side _side,\\n        address _indexToken,\\n        address _collateralToken,\\n        OrderType _orderType,\\n        bytes memory _data,\\n        uint256 _executionFee\\n    ) internal returns (uint256 orderId) {\\n        Order memory order;\\n        UpdatePositionRequest memory request;\\n        order.triggerAboveThreshold = _side == Side.SHORT;\\n        uint256 payAmount;\\n        bytes memory extradata;\\n        (order.price, order.payToken, payAmount, request.sizeChange, request.collateral, extradata) =\\n            abi.decode(_data, (uint256, address, uint256, uint256, uint256, bytes));\\n\\n        require(payAmount != 0, \\\"OrderManager:invalidPayAmount\\\");\\n        require(order.payToken != address(0), \\\"OrderManager:invalidPayToken\\\");\\n\\n        order.pool = pool;\\n        order.owner = msg.sender;\\n        order.indexToken = _indexToken;\\n        order.collateralToken = _collateralToken;\\n        order.expiresAt = _orderType == OrderType.MARKET ? block.timestamp + MARKET_ORDER_TIMEOUT : 0;\\n        order.submissionBlock = block.number;\\n        order.executionFee = _executionFee;\\n\\n        uint256 minExecutionFee = _calcMinPerpetualExecutionFee(order.collateralToken, order.payToken);\\n        require(order.executionFee >= minExecutionFee, \\\"OrderManager:executionFeeTooLow\\\");\\n        request.updateType = UpdatePositionType.INCREASE;\\n        request.side = _side;\\n        request.collateral = payAmount;\\n        orderId = nextOrderId;\\n        nextOrderId = orderId + 1;\\n        orders[orderId] = order;\\n        requests[orderId] = request;\\n\\n        if (order.payToken == ETH) {\\n            weth.deposit{value: payAmount}();\\n        } else {\\n            IERC20(order.payToken).safeTransferFrom(msg.sender, address(this), request.collateral);\\n        }\\n\\n        if (address(orderHook) != address(0)) {\\n            orderHook.postPlaceOrder(orderId, extradata);\\n        }\\n\\n        emit OrderPlaced(orderId, order, request);\\n    }\\n\\n    function _poolSwap(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        address _receiver,\\n        address _beneficier\\n    ) internal returns (uint256 amountOut) {\\n        IERC20(_fromToken).safeTransfer(address(pool), _amountIn);\\n        return _doSwap(_fromToken, _toToken, _minAmountOut, _receiver, _beneficier);\\n    }\\n\\n    function _doSwap(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _minAmountOut,\\n        address _receiver,\\n        address _beneficier\\n    ) internal returns (uint256 amountOut) {\\n        IERC20 tokenOut = IERC20(_toToken);\\n        uint256 priorBalance = tokenOut.balanceOf(_receiver);\\n        pool.swap(_fromToken, _toToken, _minAmountOut, _receiver, abi.encode(_beneficier));\\n        amountOut = tokenOut.balanceOf(_receiver) - priorBalance;\\n    }\\n\\n    function _expiresOrder(uint256 _orderId, Order memory _order) internal {\\n        UpdatePositionRequest memory request = requests[_orderId];\\n        _removeUserOrder(_order.owner, _orderId);\\n        delete orders[_orderId];\\n        delete requests[_orderId];\\n        emit OrderExpired(_orderId);\\n\\n        _safeTransferETH(_order.owner, _order.executionFee);\\n        if (request.updateType == UpdatePositionType.INCREASE) {\\n            _refundCollateral(_order.payToken, request.collateral, _order.owner);        \\n        }\\n    }\\n\\n    function _removeUserOrder(address _user, uint256 _orderId) internal {\\n        uint256[] storage userOrderIds = userOrders[_user];\\n        uint256 nOrders = userOrderIds.length;\\n        for (uint256 i = 0; i < nOrders; i++) {\\n            if (userOrderIds[i] == _orderId) {\\n                userOrderIds[i] = userOrderIds[nOrders - 1];\\n                userOrderIds.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _refundCollateral(address _refundToken, uint256 _amount, address _orderOwner) internal {\\n        if (_refundToken == address(weth) || _refundToken == ETH) {\\n            _safeUnwrapETH(_amount, _orderOwner);\\n        } else {\\n            IERC20(_refundToken).safeTransfer(_orderOwner, _amount);\\n        }\\n    }\\n\\n    function _safeTransferETH(address _to, uint256 _amount) internal {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success,) = _to.call{value: _amount}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    function _safeUnwrapETH(uint256 _amount, address _to) internal {\\n        weth.safeIncreaseAllowance(address(ethUnwrapper), _amount);\\n        ethUnwrapper.unwrap(_amount, _to);\\n    }\\n\\n    function _validateExecutor(address _sender) internal view {\\n        require(_sender == executor, \\\"OrderManager:onlyExecutor\\\");\\n    }\\n\\n    function _calcMinPerpetualExecutionFee(address _collateralToken, address _payToken)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        bool noSwap = _collateralToken == _payToken || (_collateralToken == address(weth) && _payToken == ETH);\\n        return noSwap ? minPerpetualExecutionFee : minPerpetualExecutionFee + minSwapExecutionFee;\\n    }\\n\\n    function _setMinExecutionFee(uint256 _perpExecutionFee, uint256 _swapExecutionFee) internal {\\n        require(_perpExecutionFee != 0, \\\"OrderManager:invalidFeeValue\\\");\\n        require(_perpExecutionFee <= MAX_MIN_EXECUTION_FEE, \\\"OrderManager:minExecutionFeeTooHigh\\\");\\n        require(_swapExecutionFee != 0, \\\"OrderManager:invalidFeeValue\\\");\\n        require(_swapExecutionFee <= MAX_MIN_EXECUTION_FEE, \\\"OrderManager:minExecutionFeeTooHigh\\\");\\n        minPerpetualExecutionFee = _perpExecutionFee;\\n        minSwapExecutionFee = _swapExecutionFee;\\n    }\\n\\n    // ============ Administrative =============\\n\\n    /** \\n     * @notice Sets the address of the oracle contract.\\n     * @param _oracle The address of the oracle contract.\\n     * @dev Only the owner can call this function.\\n     * @dev The oracle contract must implement the IPriceOracle interface.\\n     * @dev Emits an OracleChanged event.\\n     */\\n    function setOracle(address _oracle) external onlyOwner {\\n        require(_oracle != address(0), \\\"OrderManager:invalidOracleAddress\\\");\\n        oracle = IPriceOracle(_oracle);\\n        emit OracleChanged(_oracle);\\n    }\\n\\n    /** \\n     * @notice Sets the address of the pool contract.\\n     * @param _pool The address of the pool contract.\\n     * @dev Only the owner can call this function.\\n     * @dev The pool contract must implement the IWhitelistedPool interface.\\n     * @dev Emits an PoolSet event.\\n     */\\n    function setPool(address _pool) external onlyOwner {\\n        require(_pool != address(0), \\\"OrderManager:invalidPoolAddress\\\");\\n        require(address(pool) != _pool, \\\"OrderManager:poolAlreadyAdded\\\");\\n        pool = IPoolForOrderManager(_pool);\\n        emit PoolSet(_pool);\\n    }\\n\\n    /**\\n     * @notice Sets the minimum execution fees.\\n     * @param _perpExecutionFee The minimum execution fee for perpetual orders.\\n     * @param _swapExecutionFee The minimum execution fee for swap orders.\\n     * @dev Only the owner can call this function.\\n     * @dev Emits a MinExecutionFeeSet event.\\n     * @dev Emits a MinSwapExecutionFeeSet event.\\n     */\\n    function setMinExecutionFee(uint256 _perpExecutionFee, uint256 _swapExecutionFee) external onlyOwner {\\n        _setMinExecutionFee(_perpExecutionFee, _swapExecutionFee);\\n        emit MinExecutionFeeSet(_perpExecutionFee);\\n        emit MinSwapExecutionFeeSet(_swapExecutionFee);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the order hook contract.\\n     * @param _hook The address of the order hook contract.\\n     * @dev Only the owner can call this function.\\n     * @dev The order hook contract must implement the IOrderHook interface.\\n     * @dev Emits an OrderHookSet event.\\n     */\\n    function setOrderHook(address _hook) external onlyOwner {\\n        orderHook = IOrderHook(_hook);\\n        emit OrderHookSet(_hook);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the executor contract.\\n     * @param _executor The address of the executor contract.\\n     * @dev Only the owner can call this function.\\n     * @dev Emits an ExecutorSet event.\\n     */\\n    function setExecutor(address _executor) external onlyOwner {\\n        require(_executor != address(0), \\\"OrderManager:invalidAddress\\\");\\n        executor = _executor;\\n        emit ExecutorSet(_executor);\\n    }\\n\\n    // ========== EVENTS =========\\n\\n    event OrderPlaced(uint256 indexed key, Order order, UpdatePositionRequest request);\\n    event OrderCancelled(uint256 indexed key);\\n    event OrderExecuted(uint256 indexed key, Order order, UpdatePositionRequest request, uint256 fillPrice);\\n    event OrderExpired(uint256 indexed key);\\n    event OracleChanged(address);\\n    event SwapOrderPlaced(uint256 indexed key);\\n    event SwapOrderCancelled(uint256 indexed key);\\n    event SwapOrderExecuted(uint256 indexed key, uint256 amountIn, uint256 amountOut);\\n    event Swap(\\n        address indexed account,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        address pool,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n    event PoolSet(address indexed pool);\\n    event MinExecutionFeeSet(uint256 fee);\\n    event MinSwapExecutionFeeSet(uint256 swapExecutionFee);\\n    event OrderHookSet(address indexed hook);\\n    event ExecutorSet(address indexed executor);\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {IPriceOracle} from \\\"../interfaces/IPriceOracle.sol\\\";\\nimport {ILPToken} from \\\"../interfaces/ILPToken.sol\\\";\\nimport {IPoolHook} from \\\"../interfaces/IPoolHook.sol\\\";\\n\\n// common precision for fee, tax, interest rate, maintenance margin ratio\\nuint256 constant PRECISION = 1e10;\\nuint256 constant LP_INITIAL_PRICE = 1e12; // fix to 1$\\nuint256 constant MAX_BASE_SWAP_FEE = 1e8; // 1%\\nuint256 constant MAX_TAX_BASIS_POINT = 1e8; // 1%\\nuint256 constant MAX_POSITION_FEE = 1e8; // 1%\\nuint256 constant MAX_LIQUIDATION_FEE = 10e30; // 10$\\nuint256 constant MAX_TRANCHES = 3;\\nuint256 constant MAX_ASSETS = 10;\\nuint256 constant MAX_INTEREST_RATE = 1e7; // 0.1%\\nuint256 constant MAX_MAINTENANCE_MARGIN = 5e8; // 5%\\n\\nstruct Fee {\\n    /// @notice charge when changing position size\\n    uint256 positionFee;\\n    /// @notice charge when liquidate position (in dollar)\\n    uint256 liquidationFee;\\n    /// @notice swap fee used when add/remove liquidity, swap token\\n    uint256 baseSwapFee;\\n    /// @notice tax used to adjust swapFee due to the effect of the action on token's weight\\n    /// It reduce swap fee when user add some amount of a under weight token to the pool\\n    uint256 taxBasisPoint;\\n    /// @notice swap fee used when add/remove liquidity, swap token\\n    uint256 stableCoinBaseSwapFee;\\n    /// @notice tax used to adjust swapFee due to the effect of the action on token's weight\\n    /// It reduce swap fee when user add some amount of a under weight token to the pool\\n    uint256 stableCoinTaxBasisPoint;\\n    /// @notice part of fee will be kept for DAO, the rest will be distributed to pool amount, thus\\n    /// increase the pool value and the price of LP token\\n    uint256 daoFee;\\n}\\n\\nstruct Position {\\n    /// @dev contract size is evaluated in dollar\\n    uint256 size;\\n    /// @dev collateral value in dollar\\n    uint256 collateralValue;\\n    /// @dev contract size in indexToken\\n    uint256 reserveAmount;\\n    /// @dev average entry price\\n    uint256 entryPrice;\\n    /// @dev last cumulative interest rate\\n    uint256 borrowIndex;\\n    /// @dev last time the size was increased\\n    uint256 lastIncreasedTime;\\n}\\n\\nstruct PoolTokenInfo {\\n    /// @notice amount reserved for fee\\n    uint256 feeReserve;\\n    /// @notice recorded balance of token in pool\\n    uint256 poolBalance;\\n    /// @notice last borrow index update timestamp\\n    uint256 lastAccrualTimestamp;\\n    /// @notice accumulated interest rate\\n    uint256 borrowIndex;\\n}\\n\\nstruct AssetInfo {\\n    /// @notice amount of token deposited (via add liquidity or increase long position)\\n    uint256 poolAmount;\\n    /// @notice amount of token reserved for paying out when user decrease long position\\n    uint256 reservedAmount;\\n    /// @notice total borrowed (in USD) to leverage\\n    uint256 guaranteedValue;\\n    /// @notice total size of all short positions\\n    uint256 totalShortSize;\\n}\\n\\nabstract contract PoolStorage {\\n    Fee public fee;\\n\\n    address public feeDistributor;\\n\\n    IPriceOracle public oracle;\\n\\n    address public orderManager;\\n\\n    // ========= Assets management =========\\n    mapping(address => bool) public isAsset;\\n    /// @notice A list of all configured assets\\n    /// @dev use a pseudo address for ETH\\n    /// Note that token will not be removed from this array when it was delisted. We keep this\\n    /// list to calculate pool value properly\\n    address[] public allAssets;\\n\\n    mapping(address => bool) public isListed;\\n\\n    mapping(address => bool) public isStableCoin;\\n\\n    mapping(address => PoolTokenInfo) public poolTokens;\\n\\n    /// @notice target weight for each tokens\\n    mapping(address => uint256) public targetWeights;\\n    /// @notice the array of all tranches\\n    address[] public allTranches;\\n    /// @dev tranche => token => asset info\\n    mapping(address => mapping(address => AssetInfo)) public trancheAssets;\\n    /// @notice position reserve in each tranche\\n    mapping(address => mapping(bytes32 => uint256)) public tranchePositionReserves;\\n\\n    /// @notice interest rate model\\n    uint256 public interestRate;\\n\\n    uint256 public accrualInterval;\\n\\n    uint256 public totalWeight;\\n    // ========= Positions management =========\\n    /// @notice max leverage for each token\\n    uint256 public maxLeverage;\\n    /// @notice positions tracks all open positions\\n    mapping(bytes32 => Position) public positions;\\n\\n    IPoolHook public poolHook;\\n\\n    uint256 public maintenanceMargin;\\n\\n    mapping(address => mapping(address => uint256)) public averageShortPrices;\\n    /// @notice cached pool value for faster computation\\n    uint256 public virtualPoolValue;\\n    /// @notice index token => max global short size\\n    mapping(address => uint256) public maxGlobalShortSizes;\\n    mapping(address => uint256) public maxGlobalLongSizeRatios;\\n    mapping(address => bool) public isLiquidityProvider;\\n    mapping(address => bool) public authorizedLiquidators;\\n    uint256 public maxLiquidationGasPrice;\\n    address public lpToken;\\n    mapping(address => uint256) public addedLiquidity;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"MinExecutionFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapExecutionFee\",\"type\":\"uint256\"}],\"name\":\"MinSwapExecutionFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IPoolForOrderManager\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"submissionBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sizeChange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"enum UpdatePositionType\",\"name\":\"updateType\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct UpdatePositionRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fillPrice\",\"type\":\"uint256\"}],\"name\":\"OrderExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"OrderExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"}],\"name\":\"OrderHookSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IPoolForOrderManager\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"submissionBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sizeChange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"enum UpdatePositionType\",\"name\":\"updateType\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct UpdatePositionRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"OrderPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"SwapOrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"SwapOrderExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"SwapOrderPlaced\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"cancelSwapOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"}],\"name\":\"cancelTpslOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethUnwrapper\",\"outputs\":[{\"internalType\":\"contract IETHUnwrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"executeSwapOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"skip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"take\",\"type\":\"uint256\"}],\"name\":\"getOrders\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"skip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"take\",\"type\":\"uint256\"}],\"name\":\"getSwapOrders\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minExecutionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minSwapExecutionFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ethUnwrapper\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPerpetualExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwapExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOrderId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextSwapOrderId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderHook\",\"outputs\":[{\"internalType\":\"contract IOrderHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"contract IPoolForOrderManager\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"submissionBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum UpdatePositionType\",\"name\":\"_updateType\",\"type\":\"uint8\"},{\"internalType\":\"enum Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"enum OrderType\",\"name\":\"_orderType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"placeOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"placeSwapOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum UpdatePositionType\",\"name\":\"_updateType\",\"type\":\"uint8\"},{\"internalType\":\"enum Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"enum OrderType\",\"name\":\"_orderType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"tpslData\",\"type\":\"bytes\"}],\"name\":\"placeTpslOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPoolForOrderManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sizeChange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"enum UpdatePositionType\",\"name\":\"updateType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perpExecutionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapExecutionFee\",\"type\":\"uint256\"}],\"name\":\"setMinExecutionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"}],\"name\":\"setOrderHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapOrders\",\"outputs\":[{\"internalType\":\"contract IPoolForOrderManager\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tpslOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userSwapOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OrderManager", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}