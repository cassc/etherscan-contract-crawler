{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.6;\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\ncontract Scatter {\r\n    event TransferFailed(address to, uint256 value);\r\n    \r\n    address public owner;\r\n    address public feeAddress;\r\n    uint256 public fee;\r\n    \r\n    \r\n    constructor(address _feeAddress, uint256 _fee){\r\n        feeAddress = _feeAddress;\r\n        fee = _fee;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n\r\n    \r\n    function scatterTokenSimple(IERC20 token, address[] memory recipients, uint256[] memory values,bool revertOnfail) external payable collectFee  {\r\n          \r\n         uint totalSuccess = 0;\r\n          \r\n        for (uint256 i = 0; i < recipients.length; i++){\r\n            (bool success,bytes memory returnData) = address(token).call(abi.encodePacked( \r\n                    token.transferFrom.selector,\r\n                    abi.encode(msg.sender, recipients[i], values[i])\r\n                ));\r\n                \r\n            if(success){\r\n                (bool decoded) = abi.decode(returnData,(bool));\r\n                if(revertOnfail==true) require(decoded,'One of the transfers failed');\r\n                else if(decoded==false) emit TransferFailed(recipients[i],values[i]);\r\n                if(decoded) totalSuccess++;\r\n            }\r\n            else if(success==false){\r\n                if(revertOnfail==true) require(false,'One of the transfers failed');\r\n                else emit TransferFailed(recipients[i],values[i]);\r\n            }\r\n           }\r\n           require(totalSuccess>=1,'all transfers failed');\r\n           returnExtraEth();\r\n    }\r\n    \r\n        \r\n    function returnExtraEth () internal {\r\n        uint256 balance = address(this).balance;\r\n        if (balance > 0){ \r\n            payable(msg.sender).transfer(balance); \r\n        }\r\n    }\r\n    \r\n    \r\n    function scatterEther(address[] memory recipients, uint256[] memory values, bool revertOnfail)  external payable collectFee {\r\n        uint totalSuccess = 0;\r\n         for (uint256 i = 0; i < recipients.length; i++){\r\n           (bool success,)= recipients[i].call{value:values[i],gas:3500}('');\r\n           if(revertOnfail) require(success,'One of the transfers failed');\r\n           else if(success==false){\r\n               emit TransferFailed(recipients[i],values[i]);\r\n           }\r\n           if(success) totalSuccess++;\r\n        }\r\n        \r\n        require(totalSuccess>=1,'all transfers failed');\r\n        returnExtraEth();\r\n    }\r\n    \r\n    function changeFee (uint256 _fee) external onlyOwner {\r\n        fee = _fee;\r\n    }\r\n    \r\n    function changeOwner(address _owner) external onlyOwner {\r\n        owner = _owner;\r\n    }\r\n    \r\n    function changeFeeAddress (address _feeAddress) external onlyOwner {\r\n        feeAddress = _feeAddress;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender==owner,'Only owner can call this function');\r\n        _;\r\n    }\r\n    \r\n    modifier collectFee {\r\n        if(fee>0){\r\n            require(msg.value>=fee,'insufficient fee sent');\r\n            payable(feeAddress).transfer(fee);\r\n        }\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferFailed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"changeFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnfail\",\"type\":\"bool\"}],\"name\":\"scatterEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnfail\",\"type\":\"bool\"}],\"name\":\"scatterTokenSimple\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "Scatter", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "00000000000000000000000085782f07f8342a4a0843ef071fbbb221bc883f450000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b925a46244cab012992af63b918d4c11980377c70c41c2762c33da8aeebfbf1c"}