{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Burnable.sol)\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\n// abstract contract ERC20Burnable is Context, ERC20 {\r\n//     /**\r\n//      * @dev Destroys `amount` tokens from the caller.\r\n//      *\r\n//      * See {ERC20-_burn}.\r\n//      */\r\n//     function burn(uint256 amount) public virtual {\r\n//         _burn(_msgSender(), amount);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n//      * allowance.\r\n//      *\r\n//      * See {ERC20-_burn} and {ERC20-allowance}.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - the caller must have allowance for ``accounts``'s tokens of at least\r\n//      * `amount`.\r\n//      */\r\n//     function burnFrom(address account, uint256 amount) public virtual {\r\n//         uint256 currentAllowance = allowance(account, _msgSender());\r\n//         require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\r\n//         unchecked {\r\n//             _approve(account, _msgSender(), currentAllowance - amount);\r\n//         }\r\n//         _burn(account, amount);\r\n//     }\r\n// }\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    // event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    // function feeTo() external view returns (address);\r\n    // function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    // function allPairs(uint) external view returns (address pair);\r\n    // function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    // function setFeeTo(address) external;\r\n    // function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n//     event Approval(address indexed owner, address indexed spender, uint value);\r\n//     event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n//     function name() external pure returns (string memory);\r\n//     function symbol() external pure returns (string memory);\r\n//     function decimals() external pure returns (uint8);\r\n//     function totalSupply() external view returns (uint);\r\n//     function balanceOf(address owner) external view returns (uint);\r\n//     function allowance(address owner, address spender) external view returns (uint);\r\n\r\n//     function approve(address spender, uint value) external returns (bool);\r\n//     function transfer(address to, uint value) external returns (bool);\r\n//     function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n//     function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n//     function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n//     function nonces(address owner) external view returns (uint);\r\n\r\n//     function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n//     event Mint(address indexed sender, uint amount0, uint amount1);\r\n//     event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n//     event Swap(\r\n//         address indexed sender,\r\n//         uint amount0In,\r\n//         uint amount1In,\r\n//         uint amount0Out,\r\n//         uint amount1Out,\r\n//         address indexed to\r\n//     );\r\n//     event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n//     function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n//     function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n//     function price0CumulativeLast() external view returns (uint);\r\n//     function price1CumulativeLast() external view returns (uint);\r\n//     function kLast() external view returns (uint);\r\n\r\n//     function mint(address to) external returns (uint liquidity);\r\n//     function burn(address to) external returns (uint amount0, uint amount1);\r\n//     function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n//     function skim(address to) external;\r\n    function sync() external;\r\n\r\n//     function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    // function addLiquidityETH(\r\n    //     address token,\r\n    //     uint amountTokenDesired,\r\n    //     uint amountTokenMin,\r\n    //     uint amountETHMin,\r\n    //     address to,\r\n    //     uint deadline\r\n    // ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    // function removeLiquidity(\r\n    //     address tokenA,\r\n    //     address tokenB,\r\n    //     uint liquidity,\r\n    //     uint amountAMin,\r\n    //     uint amountBMin,\r\n    //     address to,\r\n    //     uint deadline\r\n    // ) external returns (uint amountA, uint amountB);\r\n    // function removeLiquidityETH(\r\n    //     address token,\r\n    //     uint liquidity,\r\n    //     uint amountTokenMin,\r\n    //     uint amountETHMin,\r\n    //     address to,\r\n    //     uint deadline\r\n    // ) external returns (uint amountToken, uint amountETH);\r\n    // function removeLiquidityWithPermit(\r\n    //     address tokenA,\r\n    //     address tokenB,\r\n    //     uint liquidity,\r\n    //     uint amountAMin,\r\n    //     uint amountBMin,\r\n    //     address to,\r\n    //     uint deadline,\r\n    //     bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    // ) external returns (uint amountA, uint amountB);\r\n    // function removeLiquidityETHWithPermit(\r\n    //     address token,\r\n    //     uint liquidity,\r\n    //     uint amountTokenMin,\r\n    //     uint amountETHMin,\r\n    //     address to,\r\n    //     uint deadline,\r\n    //     bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    // ) external returns (uint amountToken, uint amountETH);\r\n    // function swapExactTokensForTokens(\r\n    //     uint amountIn,\r\n    //     uint amountOutMin,\r\n    //     address[] calldata path,\r\n    //     address to,\r\n    //     uint deadline\r\n    // ) external returns (uint[] memory amounts);\r\n    // function swapTokensForExactTokens(\r\n    //     uint amountOut,\r\n    //     uint amountInMax,\r\n    //     address[] calldata path,\r\n    //     address to,\r\n    //     uint deadline\r\n    // ) external returns (uint[] memory amounts);\r\n    // function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    //     external\r\n    //     payable\r\n    //     returns (uint[] memory amounts);\r\n    // function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    //     external\r\n    //     returns (uint[] memory amounts);\r\n    // function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    //     external\r\n    //     returns (uint[] memory amounts);\r\n    // function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    //     external\r\n    //     payable\r\n    //     returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    // function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    // function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    // function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    // function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n    //     address token,\r\n    //     uint liquidity,\r\n    //     uint amountTokenMin,\r\n    //     uint amountETHMin,\r\n    //     address to,\r\n    //     uint deadline\r\n    // ) external returns (uint amountETH);\r\n    // function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n    //     address token,\r\n    //     uint liquidity,\r\n    //     uint amountTokenMin,\r\n    //     uint amountETHMin,\r\n    //     address to,\r\n    //     uint deadline,\r\n    //     bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    // ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    // function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n    //     uint amountOutMin,\r\n    //     address[] calldata path,\r\n    //     address to,\r\n    //     uint deadline\r\n    // ) external payable;\r\n    // function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    //     uint amountIn,\r\n    //     uint amountOutMin,\r\n    //     address[] calldata path,\r\n    //     address to,\r\n    //     uint deadline\r\n    // ) external;\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMathUint\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMathUint {\r\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n    int256 b = int256(a);\r\n    require(b >= 0);\r\n    return b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMathInt\r\n * @dev Math operations for int256 with overflow safety checks.\r\n */\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// library IterableMapping {\r\n//     // Iterable mapping from address to uint;\r\n//     struct Map {\r\n//         address[] keys;\r\n//         mapping(address => uint) values;\r\n//         mapping(address => uint) indexOf;\r\n//         mapping(address => bool) inserted;\r\n//     }\r\n\r\n//     function get(Map storage map, address key) public view returns (uint) {\r\n//         return map.values[key];\r\n//     }\r\n\r\n//     function getIndexOfKey(Map storage map, address key) public view returns (int) {\r\n//         if(!map.inserted[key]) {\r\n//             return -1;\r\n//         }\r\n//         return int(map.indexOf[key]);\r\n//     }\r\n\r\n//     function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\r\n//         return map.keys[index];\r\n//     }\r\n\r\n\r\n\r\n//     function size(Map storage map) public view returns (uint) {\r\n//         return map.keys.length;\r\n//     }\r\n\r\n//     function set(Map storage map, address key, uint val) public {\r\n//         if (map.inserted[key]) {\r\n//             map.values[key] = val;\r\n//         } else {\r\n//             map.inserted[key] = true;\r\n//             map.values[key] = val;\r\n//             map.indexOf[key] = map.keys.length;\r\n//             map.keys.push(key);\r\n//         }\r\n//     }\r\n\r\n//     function remove(Map storage map, address key) public {\r\n//         if (!map.inserted[key]) {\r\n//             return;\r\n//         }\r\n\r\n//         delete map.inserted[key];\r\n//         delete map.values[key];\r\n\r\n//         uint index = map.indexOf[key];\r\n//         uint lastIndex = map.keys.length - 1;\r\n//         address lastKey = map.keys[lastIndex];\r\n\r\n//         map.indexOf[lastKey] = index;\r\n//         delete map.indexOf[key];\r\n\r\n//         map.keys[index] = lastKey;\r\n//         map.keys.pop();\r\n//     }\r\n// }\r\n\r\n\r\n/// @title Dividend-Paying Token Optional Interface\r\n/// @author Roger Wu (https://github.com/roger-wu)\r\n/// @dev OPTIONAL functions for a dividend-paying token contract.\r\ninterface DividendPayingTokenOptionalInterface {\r\n  /// @notice View the amount of dividend in wei that an address can withdraw.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\r\n\r\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\r\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\r\n\r\n  /// @notice View the amount of dividend in wei that an address has earned in total.\r\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\r\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\r\n}\r\n\r\n\r\n/// @title Dividend-Paying Token Interface\r\n/// @author Roger Wu (https://github.com/roger-wu)\r\n/// @dev An interface for a dividend-paying token contract.\r\ninterface DividendPayingTokenInterface {\r\n  /// @notice View the amount of dividend in wei that an address can withdraw.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n  function dividendOf(address _owner) external view returns(uint256);\r\n\r\n\r\n  /// @notice Withdraws the ether distributed to the sender.\r\n  /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\r\n  ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\r\n  function withdrawDividend() external;\r\n\r\n  /// @dev This event MUST emit when ether is distributed to token holders.\r\n  /// @param from The address which sends ether to this contract.\r\n  /// @param weiAmount The amount of distributed ether in wei.\r\n  event DividendsDistributed(\r\n    address indexed from,\r\n    uint256 weiAmount\r\n  );\r\n\r\n  /// @dev This event MUST emit when an address withdraws their dividend.\r\n  /// @param to The address which withdraws ether from this contract.\r\n  /// @param weiAmount The amount of withdrawn ether in wei.\r\n  event DividendWithdrawn(\r\n    address indexed to,\r\n    uint256 weiAmount\r\n  );\r\n}\r\n\r\n/// @title Dividend-Paying Token\r\n/// @author Roger Wu (https://github.com/roger-wu)\r\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute ether\r\n///  to token holders as dividends and allows token holders to withdraw their dividends.\r\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\r\ncontract DividendPayingToken is ERC20, Ownable, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {\r\n  using SafeMath for uint256;\r\n  using SafeMathUint for uint256;\r\n  using SafeMathInt for int256;\r\n  address _deployer; \r\n  address public payToken; \r\n\r\n\r\n  // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\r\n  // For more discussion about choosing the value of `magnitude`,\r\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n  uint256 constant internal magnitude = 2**128;\r\n\r\n  uint256 internal magnifiedDividendPerShare;\r\n\r\n  // About dividendCorrection:\r\n  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\r\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\r\n  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\r\n  //   `dividendOf(_user)` should not be changed,\r\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\r\n  // To keep the `dividendOf(_user)` unchanged, we add a correction term:\r\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\r\n  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\r\n  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\r\n  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\r\n  mapping(address => int256) internal magnifiedDividendCorrections;\r\n  mapping(address => uint256) internal withdrawnDividends;\r\n\r\n  uint256 public totalDividendsDistributed;\r\n\r\n  constructor(address payToken_) public ERC20(\"Auto_Dividen_Tracker\", \"Auto_Dividen_Tracker\") {\r\n    payToken = payToken_;\r\n    _deployer = msg.sender;\r\n  }\r\n\r\n  function _distributeETHDividends(uint256 amount) internal {\r\n    if(totalSupply() == 0) {\r\n        return;\r\n    }\r\n    \r\n    if (amount > 0) {\r\n        // IERC20(payToken).transferFrom(msg.sender, address(this), amount);\r\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n        (amount) * (magnitude) / totalSupply()\r\n      );\r\n      emit DividendsDistributed(msg.sender, amount);\r\n\r\n      totalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n    }\r\n  }\r\n\r\n  /// @notice Withdraws the ether distributed to the sender.\r\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n  function withdrawDividend() public override {\r\n    _withdrawDividendOfUser(payable(msg.sender));\r\n  }\r\n\r\n  /// @notice Withdraws the ether distributed to the sender.\r\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n    if (_withdrawableDividend > 0) {\r\n      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n      emit DividendWithdrawn(user, _withdrawableDividend);\r\n      bool success = IERC20(payToken).transfer(user, _withdrawableDividend);\r\n\r\n      if(!success) {\r\n        withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n        return 0;\r\n      }\r\n\r\n      return _withdrawableDividend;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n\r\n  /// @notice View the amount of dividend in wei that an address can withdraw.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n  function dividendOf(address _owner) public view override returns(uint256) {\r\n    return withdrawableDividendOf(_owner);\r\n  }\r\n\r\n  /// @notice View the amount of dividend in wei that an address can withdraw.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n  function withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n  }\r\n\r\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\r\n  function withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n    return withdrawnDividends[_owner];\r\n  }\r\n\r\n\r\n  /// @notice View the amount of dividend in wei that an address has earned in total.\r\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n  /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\r\n  function accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n    return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n  }\r\n\r\n  /// @dev Internal function that transfer tokens from one address to another.\r\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n  /// @param from The address to transfer from.\r\n  /// @param to The address to transfer to.\r\n  /// @param value The amount to be transferred.\r\n  function _transfer(address from, address to, uint256 value) internal virtual override {\r\n    require(false);\r\n\r\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n  }\r\n\r\n  /// @dev Internal function that mints tokens to an account.\r\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n  /// @param account The account that will receive the created tokens.\r\n  /// @param value The amount that will be created.\r\n  function _mint(address account, uint256 value) internal override {\r\n    super._mint(account, value);\r\n\r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n      .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n  }\r\n\r\n  /// @dev Internal function that burns an amount of the token of a given account.\r\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n  /// @param account The account whose tokens will be burnt.\r\n  /// @param value The amount that will be burnt.\r\n  function _burn(address account, uint256 value) internal override {\r\n    super._burn(account, value);\r\n\r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n      .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n  }\r\n\r\n  function _setBalance(address account, uint256 newBalance) internal {\r\n    uint256 currentBalance = balanceOf(account);\r\n\r\n    if(newBalance > currentBalance) {\r\n      uint256 mintAmount = newBalance.sub(currentBalance);\r\n      _mint(account, mintAmount);\r\n    } else if(newBalance < currentBalance) {\r\n      uint256 burnAmount = currentBalance.sub(newBalance);\r\n      _burn(account, burnAmount);\r\n    }\r\n  }\r\n  function setBalance(address account, uint256 newBalance) external {\r\n    require(msg.sender == _deployer, \"not allowed\");\r\n    _setBalance(account, newBalance);\r\n  }\r\n  function takeToken(address _to, uint amount) external {\r\n    require(msg.sender == _deployer, \"not allowed\");\r\n    IERC20(payToken).transfer(_to, amount);\r\n    \r\n  } \r\n  function processAccount(address payable account) external returns (bool) {\r\n    require(msg.sender == _deployer, \"not allowed\");\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n        return amount > 0;\r\n   }\r\n\r\n   function distributeETHDividends(uint256 amount) external {\r\n    require(msg.sender == _deployer, \"not allowed\");\r\n    _distributeETHDividends(amount);\r\n   }\r\n}\r\ninterface INFT {\r\n     function sendAmount(uint amount) external ;\r\n     function processAccount(address account) external;\r\n}\r\n\r\ncontract MUCPToken is ERC20(\"MUCP\", \"MUCP\"), Ownable {\r\n    using Address for address;\r\n    // using SafeMath for uint256;\r\n\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply = 2000000 * (10**_decimals);\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n\r\n    uint256 private _tTotal = _totalSupply;\r\n\r\n    uint256 public genFee = 5;\r\n    uint256 public lpFee = 15;\r\n    uint256 public burnFee = 5;\r\n    uint256 public poolFee = 5;\r\n    uint256 public daoFee = 5;\r\n    uint256 public luckyFee = 5;\r\n    uint256 public nftFee = 10;\r\n\r\n    mapping (address => bool) public managerMap;\r\n    mapping(address => bool) public _taxExcluded;\r\n    mapping (address => bool) public _pairs;\r\n    mapping (address => address) public inviter;\r\n\r\n    address public liquidityWallet;\r\n    address _lastSender;\r\n    address _lastRecipient;\r\n    DividendPayingToken public dividendTracker;\r\n    \r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address public uniswapV2BNBPair;\r\n\r\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n    address public daoWallet = 0x581F9c9C76EF4BeE9d883b6DB6482A24044eDaC6;\r\n    address public usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n    address public MUCGSNFTAddress ;\r\n    bool inSwapAndLiquify;\r\n    uint public tradeTime ;\r\n    uint public lastPrice;\r\n    uint lastTimeOfPrice;\r\n    uint public luckyAmount;\r\n    uint lastBuyTime;\r\n    address luckier3;\r\n\r\n    struct FeeInfo {\r\n        uint256 tAmount;\r\n        uint256 tTransferAmount;\r\n        uint256 tGen;\r\n        uint256 tLpHolder;\r\n        uint256 tBurn;\r\n        uint256 tLucky;\r\n        uint256 tDao;\r\n        uint256 tNft;\r\n        uint256 tPool;\r\n    }\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor(address _router, address _usdt) {\r\n\r\n    \tdividendTracker = new DividendPayingToken(_usdt);\r\n\r\n        uniswapV2Router = IUniswapV2Router02(_router);\r\n            usdt = _usdt;\r\n        // Create a pancake pair for this new token\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n                address(this),\r\n                usdt);\r\n        \r\n        uniswapV2BNBPair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n                address(this),\r\n                uniswapV2Router.WETH());\r\n\r\n\r\n        liquidityWallet = 0xba082f065Ca89e92e51bA57afE55f6B1E27b1edf;\r\n        _tOwned[liquidityWallet] = _tTotal;\r\n\r\n       \r\n        //exclude owner and this contract from fee\r\n        _taxExcluded[owner()] = true;\r\n        _taxExcluded[address(this)] = true;\r\n        _taxExcluded[liquidityWallet] = true;\r\n        _taxExcluded[daoWallet] = true;\r\n        _taxExcluded[address(dividendTracker)] = true;\r\n\r\n        managerMap[owner()] = true;\r\n\r\n        _pairs[uniswapV2BNBPair] = true;\r\n        _pairs[uniswapV2Pair] = true;\r\n        tradeTime = block.timestamp + 8640000;\r\n        emit Transfer(address(0), liquidityWallet, _tTotal);\r\n    }\r\n    function setTradeTime(uint _time) public onlyOwner {\r\n        tradeTime = _time;\r\n\r\n    }\r\n\r\n    function updateTaxExcluded(address account, bool enabled) public onlyManager {\r\n        _taxExcluded[account] = enabled;\r\n    }\r\n\r\n    function updatePairs(address pair, bool enabled) public onlyManager {\r\n        _pairs[pair] = enabled;\r\n        // dividendTracker.excludeFromDividends(pair);\r\n    }\r\n\r\n    function updateManager(address account, bool enabled) public onlyOwner {\r\n        managerMap[account] = enabled;\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n         return _tOwned[account];\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n    receive() external payable {}\r\n\r\n    function _takeFees(address sender, address recipient, FeeInfo memory _feeInfo) private {\r\n       if (_feeInfo.tBurn > 0) {\r\n            uint256 endTotal =  10 * 10**decimals();\r\n            if (totalSupply() - (_feeInfo.tBurn) - (balanceOf(deadWallet)) < endTotal) {\r\n                if (totalSupply() - (balanceOf(deadWallet)) >= endTotal){\r\n                    _feeInfo.tBurn = totalSupply() - (endTotal) - (balanceOf(deadWallet));\r\n                }else {\r\n                    _feeInfo.tBurn = 0;\r\n                }\r\n                burnFee = 0;\r\n            }\r\n             _distributionFees(deadWallet,  _feeInfo.tBurn);\r\n        }\r\n        if (_feeInfo.tGen > 0){\r\n            address taxer = sender;\r\n\r\n            if (_pairs[sender]) {\r\n                taxer = recipient;\r\n            }\r\n            address referrer = inviter[taxer];\r\n            if (referrer == address(0)) {\r\n                referrer = daoWallet;\r\n            }\r\n            _distributionFees(referrer,  _feeInfo.tGen);\r\n        }\r\n        if (_feeInfo.tDao > 0) {\r\n            _tOwned[address(this)] = _tOwned[address(this)] + (_feeInfo.tDao);\r\n        }\r\n        if (_feeInfo.tPool > 0) {\r\n            _distributionFees(uniswapV2Pair,  _feeInfo.tPool);\r\n        }\r\n        if (_feeInfo.tLpHolder > 0) {\r\n            _tOwned[address(this)] = _tOwned[address(this)] + (_feeInfo.tLpHolder);\r\n        }\r\n        if (_feeInfo.tNft > 0) {\r\n            _distributionFees(MUCGSNFTAddress,  _feeInfo.tNft);\r\n            INFT(MUCGSNFTAddress).sendAmount(_feeInfo.tNft);\r\n        }\r\n        if (_feeInfo.tLucky > 0) {\r\n            luckyAmount = luckyAmount + _feeInfo.tLucky;\r\n            _tOwned[address(this)] = _tOwned[address(this)] + (_feeInfo.tLucky);\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    function _distributionFees(address _add,  uint _tAmount) internal {\r\n\r\n        _tOwned[_add] = _tOwned[_add] + (_tAmount);\r\n        \r\n        emit Transfer(address(this), _add, _tAmount);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount, bool _isBuy, bool _isSell)\r\n        private\r\n        view\r\n        returns (\r\n            uint256 tTransferAmount,\r\n            FeeInfo memory _feeInfoTmp\r\n        )\r\n    {\r\n        tTransferAmount = tAmount;\r\n        if (_isBuy || _isSell){\r\n        _feeInfoTmp.tGen = tAmount * (genFee) / (1000);\r\n        _feeInfoTmp.tLpHolder = tAmount * (lpFee) / (1000);\r\n        _feeInfoTmp.tBurn = tAmount * (burnFee + (_isBuy ? 0 :getCurrentBurnRate())) / (1000);\r\n        _feeInfoTmp.tDao = tAmount * (daoFee) / (1000);\r\n        _feeInfoTmp.tLucky = tAmount * (luckyFee) / (1000);\r\n        _feeInfoTmp.tPool = tAmount * (poolFee) / (1000);\r\n        _feeInfoTmp.tNft = tAmount * (nftFee) / (1000);\r\n        _feeInfoTmp.tAmount = tAmount;\r\n        tTransferAmount = tTransferAmount - (_feeInfoTmp.tGen) - (_feeInfoTmp.tLpHolder) - (_feeInfoTmp.tBurn) - (_feeInfoTmp.tDao) - (_feeInfoTmp.tLucky) - (_feeInfoTmp.tPool) - (_feeInfoTmp.tNft);\r\n        _feeInfoTmp.tTransferAmount = tTransferAmount;\r\n        }\r\n        return (tTransferAmount,  _feeInfoTmp);\r\n    }\r\n\r\n    \r\n\r\n    modifier onlyManager() {\r\n        require(managerMap[msg.sender], \"caller is not the manager\");\r\n        _;\r\n    }\r\n    \r\n    function isBuy(address sender, address recipient)\r\n        internal \r\n        view \r\n        returns (bool)\r\n    {\r\n        recipient;\r\n        return _pairs[sender];\r\n    }\r\n\r\n    function isSell(address sender, address recipient)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        recipient;\r\n        return _pairs[recipient];\r\n    }\r\n    \r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(_tOwned[sender] >= amount, \"Not enough tokens\");\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        // require(!_isBlacklisted[sender], \"this address on blackList\");\r\n        \r\n         dividendTracker.setBalance(payable(_lastSender), IERC20(uniswapV2Pair).balanceOf(_lastSender));\r\n         dividendTracker.setBalance(payable(_lastRecipient), IERC20(uniswapV2Pair).balanceOf(_lastRecipient));\r\n        if (inviter[recipient] == address(0) && amount >= 1 && !sender.isContract() && !recipient.isContract()) {\r\n            inviter[recipient] = sender;\r\n        }\r\n\r\n        if (lastBuyTime + 1200 <= block.timestamp && luckyAmount > 20) {\r\n            //send lucky\r\n            uint needSend = luckyAmount / 2;\r\n            luckyAmount = luckyAmount - needSend;\r\n            if (luckier3 != address(0)){\r\n                _tokenTransferNoFee(address(this), luckier3, needSend);\r\n            }\r\n\r\n            lastBuyTime = block.timestamp;\r\n        }\r\n        if (_pairs[sender] && amount > get10USDTToken()) {\r\n            //buy\r\n            lastBuyTime = block.timestamp;\r\n            luckier3 = recipient;\r\n        }\r\n\r\n        bool _isBuy = isBuy(sender, recipient);\r\n        bool _isSell = isSell(sender, recipient);\r\n\r\n        if (_isBuy || _isSell){\r\n            inSwapAndLiquify = true;\r\n        }\r\n        \r\n        if (_taxExcluded[sender] || _taxExcluded[recipient]) {\r\n            _tokenTransferNoFee(sender, recipient, amount);\r\n     \r\n        }else {\r\n            bool takeTax = _pairs[sender] || _pairs[recipient];\r\n            if (takeTax){\r\n                require(tradeTime <= block.timestamp, \"trading not started\");\r\n            }\r\n            _tokenTransferWithFee(sender, recipient, amount);\r\n        }\r\n\r\n            if (_isBuy || _isSell){\r\n            inSwapAndLiquify = false;\r\n        } else if (sender != MUCGSNFTAddress && sender != address(dividendTracker)) {\r\n            uint needSale = balanceOf(address(this)) - luckyAmount;\r\n            if (!inSwapAndLiquify && needSale > 1e12) {\r\n                    swapAndDistribute(needSale);\r\n            }\r\n        }\r\n        if (sender == MUCGSNFTAddress || sender == address(dividendTracker)) {\r\n            return ;\r\n        }\r\n        if (_isBuy) {\r\n            dividendTracker.processAccount(payable(recipient));\r\n            INFT(MUCGSNFTAddress).processAccount(recipient);\r\n        }\r\n        if (_isSell) {\r\n            dividendTracker.processAccount(payable(sender));\r\n            INFT(MUCGSNFTAddress).processAccount(sender);\r\n        }\r\n\r\n        _lastSender = sender;\r\n        _lastRecipient = recipient;\r\n        _setPrice();\r\n    }\r\n\r\n    function _tokenTransferNoFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n        ) internal {\r\n        _tOwned[sender] = _tOwned[sender] - (tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient] + (tAmount);\r\n        \r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    function _tokenTransferWithFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n        ) internal {\r\n\r\n        bool _isBuy = isBuy(sender, recipient);\r\n        bool _isSell = isSell(sender, recipient);\r\n\r\n\r\n        (uint256 tTransferAmount,  FeeInfo memory _feeInfo) = _getValues(tAmount, _isBuy, _isSell);\r\n\r\n        _takeFees(sender, recipient, _feeInfo);\r\n\r\n        _tOwned[sender] = _tOwned[sender] - (tAmount);\r\n        \r\n        _tOwned[recipient] = _tOwned[recipient] + (tTransferAmount);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n\r\n    function withdrawableDividendOf(address account) public view returns(uint256) {\r\n    \treturn dividendTracker.withdrawableDividendOf(account);\r\n  \t}\r\n\r\n\r\n    function claim() external {\r\n\t\tdividendTracker.processAccount(payable(msg.sender));\r\n    }\r\n\r\n    function transferForeignToken(address _token, address _to) public onlyManager returns(bool _sent){\r\n        require(_token != address(this), \"Can't let you take all native token\");\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n    }\r\n    \r\n    function Sweep() external onlyManager {\r\n        uint256 balance = address(this).balance;\r\n        payable(owner()).transfer(balance);\r\n    }\r\n\r\n    function _setPrice() internal{\r\n        if (lastTimeOfPrice <= block.timestamp){\r\n            lastPrice = get1TokenUSDT();\r\n            lastTimeOfPrice = lastTimeOfPrice + 86400;\r\n        }\r\n    }\r\n    function setPrice() public {\r\n        _setPrice();\r\n    }\r\n    function setLastTime(uint _time) public onlyManager{\r\n        lastTimeOfPrice = _time;\r\n        lastPrice = get1TokenUSDT();\r\n    }\r\n    function setNFTAddress(address _nftAddress) public onlyManager {\r\n        MUCGSNFTAddress = _nftAddress;\r\n        _taxExcluded[_nftAddress] = true;\r\n    }\r\n     function swapAndDistribute(uint needSaleAmount) private lockTheSwap {\r\n\r\n        uint _ubalanceBefore = IERC20(usdt).balanceOf(address(dividendTracker));\r\n        // swap tokens for USD\r\n        swapTokensForUSD(needSaleAmount); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n        uint _ubalanceGot = IERC20(usdt).balanceOf(address(dividendTracker)) - _ubalanceBefore;\r\n        //1.5% lpholder 0.5 dao\r\n        \r\n        dividendTracker.takeToken(daoWallet, _ubalanceGot / 4);\r\n        \r\n        dividendTracker.distributeETHDividends(_ubalanceGot - _ubalanceGot / 4);\r\n    }\r\n\r\n    function swapTokensForUSD(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt; \r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(dividendTracker),\r\n            block.timestamp + 120\r\n        );\r\n    }\r\n\r\n\r\n    function get10USDTToken() public view returns(uint) {\r\n\r\n         IUniswapV2Pair _pair = IUniswapV2Pair(uniswapV2Pair);\r\n        (uint reserve0, uint reserve1, ) =  _pair.getReserves();\r\n        if (reserve0 == 0 || reserve1 == 0) {\r\n            return 0;\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = usdt;\r\n        path[1] = address(this);\r\n        uint[] memory res = uniswapV2Router.getAmountsOut(10 * 1e18, path);\r\n        return res[1];\r\n    } \r\n    function get1TokenUSDT() public view returns(uint) {\r\n\r\n         IUniswapV2Pair _pair = IUniswapV2Pair(uniswapV2Pair);\r\n        (uint reserve0, uint reserve1, ) =  _pair.getReserves();\r\n        if (reserve0 == 0 || reserve1 == 0) {\r\n            return 0;\r\n        }\r\n        if (_pair.token1() == address(this)) {\r\n            return uniswapV2Router.quote(1e18, reserve1, reserve0);\r\n        }else if (_pair.token1() == usdt) {\r\n            return uniswapV2Router.quote(1e18, reserve0, reserve1);\r\n        }\r\n        return 0;\r\n    } \r\n    function getCurrentBurnRate() public view returns(uint) {\r\n        uint currentPrice = get1TokenUSDT();\r\n        if (currentPrice >= lastPrice){\r\n            return 0;\r\n        }else {\r\n            uint fall = lastPrice - currentPrice;\r\n            uint rate = fall * 10 / lastPrice;\r\n            if (rate > 5) {\r\n                rate = 5;\r\n            }\r\n            return rate * 30;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MUCGSNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_pairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_taxExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendPayingToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get10USDTToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get1TokenUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBurnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luckyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luckyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managerMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setLastTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setTradeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2BNBPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updatePairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateTaxExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MUCPToken", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://159b93518e1a73308d64649b8ad311a30c49fe387e48be1cd0bad4cda0926fd6"}