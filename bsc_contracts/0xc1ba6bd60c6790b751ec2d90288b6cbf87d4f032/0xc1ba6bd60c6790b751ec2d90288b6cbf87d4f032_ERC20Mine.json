{"SourceCode": "// File: contracts/intf/IERC20.sol\r\n\r\n// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.9;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"MUL_ERROR\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"DIVIDING_ERROR\");\r\n        return a / b;\r\n    }\r\n\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 quotient = div(a, b);\r\n        uint256 remainder = a - quotient * b;\r\n        if (remainder > 0) {\r\n            return quotient + 1;\r\n        } else {\r\n            return quotient;\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SUB_ERROR\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ADD_ERROR\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = x / 2 + 1;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/SafeERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/DecimalMath.sol\r\n\r\n\r\n/**\r\n * @title DecimalMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Functions for fixed point number with 18 decimals\r\n */\r\nlibrary DecimalMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal constant ONE = 10**18;\r\n    uint256 internal constant ONE2 = 10**36;\r\n\r\n    function mulFloor(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d) / (10**18);\r\n    }\r\n\r\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d).divCeil(10**18);\r\n    }\r\n\r\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(10**18).div(d);\r\n    }\r\n\r\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(10**18).divCeil(d);\r\n    }\r\n\r\n    function reciprocalFloor(uint256 target) internal pure returns (uint256) {\r\n        return uint256(10**36).div(target);\r\n    }\r\n\r\n    function reciprocalCeil(uint256 target) internal pure returns (uint256) {\r\n        return uint256(10**36).divCeil(target);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/InitializableOwnable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract InitializableOwnable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n    bool internal _INITIALIZED_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier notInitialized() {\r\n        require(!_INITIALIZED_, \"DODO_INITIALIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function initOwner(address newOwner) public notInitialized {\r\n        _INITIALIZED_ = true;\r\n        _OWNER_ = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/Ownable.sol\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract Ownable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    constructor() internal {\r\n        _OWNER_ = msg.sender;\r\n        emit OwnershipTransferred(address(0), _OWNER_);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() external {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/DODOToken/DODOMineV2/RewardVault.sol\r\n\r\n\r\n\r\ninterface IRewardVault {\r\n    function reward(address to, uint256 amount) external;\r\n    function withdrawLeftOver(address to, uint256 amount) external; \r\n}\r\n\r\ncontract RewardVault is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public rewardToken;\r\n\r\n    constructor(address _rewardToken) public {\r\n        rewardToken = _rewardToken;\r\n    }\r\n\r\n    function reward(address to, uint256 amount) external onlyOwner {\r\n        IERC20(rewardToken).safeTransfer(to, amount);\r\n    }\r\n\r\n    function withdrawLeftOver(address to,uint256 amount) external onlyOwner {\r\n        uint256 leftover = IERC20(rewardToken).balanceOf(address(this));\r\n        require(amount <= leftover, \"VAULT_NOT_ENOUGH\");\r\n        IERC20(rewardToken).safeTransfer(to, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/DODOToken/DODOMineV2/BaseMine.sol\r\n\r\n\r\n\r\n\r\ncontract BaseMine is InitializableOwnable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Storage ============\r\n\r\n    struct RewardTokenInfo {\r\n        address rewardToken;\r\n        uint256 startBlock;\r\n        uint256 endBlock;\r\n        address rewardVault;\r\n        uint256 rewardPerBlock;\r\n        uint256 accRewardPerShare;\r\n        uint256 lastRewardBlock;\r\n        mapping(address => uint256) userRewardPerSharePaid;\r\n        mapping(address => uint256) userRewards;\r\n    }\r\n\r\n    RewardTokenInfo[] public rewardTokenInfos;\r\n\r\n    uint256 internal _totalSupply;\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    // ============ Event =============\r\n\r\n    event Claim(uint256 indexed i, address indexed user, uint256 reward);\r\n    event UpdateReward(uint256 indexed i, uint256 rewardPerBlock);\r\n    event UpdateEndBlock(uint256 indexed i, uint256 endBlock);\r\n    event NewRewardToken(uint256 indexed i, address rewardToken);\r\n    event RemoveRewardToken(address rewardToken);\r\n    event WithdrawLeftOver(address owner, uint256 i);\r\n\r\n    // ============ View  ============\r\n\r\n    function getPendingReward(address user, uint256 i) public view returns (uint256) {\r\n        require(i<rewardTokenInfos.length, \"DODOMineV2: REWARD_ID_NOT_FOUND\");\r\n        RewardTokenInfo storage rt = rewardTokenInfos[i];\r\n        uint256 accRewardPerShare = rt.accRewardPerShare;\r\n        if (rt.lastRewardBlock != block.number) {\r\n            accRewardPerShare = _getAccRewardPerShare(i);\r\n        }\r\n        return\r\n            DecimalMath.mulFloor(\r\n                balanceOf(user), \r\n                accRewardPerShare.sub(rt.userRewardPerSharePaid[user])\r\n            ).add(rt.userRewards[user]);\r\n    }\r\n\r\n    function getPendingRewardByToken(address user, address rewardToken) external view returns (uint256) {\r\n        return getPendingReward(user, getIdByRewardToken(rewardToken));\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address user) public view returns (uint256) {\r\n        return _balances[user];\r\n    }\r\n\r\n    function getRewardTokenById(uint256 i) external view returns (address) {\r\n        require(i<rewardTokenInfos.length, \"DODOMineV2: REWARD_ID_NOT_FOUND\");\r\n        RewardTokenInfo memory rt = rewardTokenInfos[i];\r\n        return rt.rewardToken;\r\n    }\r\n\r\n    function getIdByRewardToken(address rewardToken) public view returns(uint256) {\r\n        uint256 len = rewardTokenInfos.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            if (rewardToken == rewardTokenInfos[i].rewardToken) {\r\n                return i;\r\n            }\r\n        }\r\n        require(false, \"DODOMineV2: TOKEN_NOT_FOUND\");\r\n    }\r\n\r\n    function getRewardNum() external view returns(uint256) {\r\n        return rewardTokenInfos.length;\r\n    }\r\n\r\n    // ============ Claim ============\r\n\r\n    function claimReward(uint256 i) public {\r\n        require(i<rewardTokenInfos.length, \"DODOMineV2: REWARD_ID_NOT_FOUND\");\r\n        _updateReward(msg.sender, i);\r\n        RewardTokenInfo storage rt = rewardTokenInfos[i];\r\n        uint256 reward = rt.userRewards[msg.sender];\r\n        if (reward > 0) {\r\n            rt.userRewards[msg.sender] = 0;\r\n            IRewardVault(rt.rewardVault).reward(msg.sender, reward);\r\n            emit Claim(i, msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    function claimAllRewards() external {\r\n        uint256 len = rewardTokenInfos.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            claimReward(i);\r\n        }\r\n    }\r\n\r\n    // =============== Ownable  ================\r\n\r\n    function addRewardToken(\r\n        address rewardToken,\r\n        uint256 rewardPerBlock,\r\n        uint256 startBlock,\r\n        uint256 endBlock\r\n    ) external onlyOwner {\r\n        require(rewardToken != address(0), \"DODOMineV2: TOKEN_INVALID\");\r\n        require(startBlock > block.number, \"DODOMineV2: START_BLOCK_INVALID\");\r\n        require(endBlock > startBlock, \"DODOMineV2: DURATION_INVALID\");\r\n\r\n        uint256 len = rewardTokenInfos.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            require(\r\n                rewardToken != rewardTokenInfos[i].rewardToken,\r\n                \"DODOMineV2: TOKEN_ALREADY_ADDED\"\r\n            );\r\n        }\r\n\r\n        RewardTokenInfo storage rt = rewardTokenInfos.push();\r\n        rt.rewardToken = rewardToken;\r\n        rt.startBlock = startBlock;\r\n        rt.endBlock = endBlock;\r\n        rt.rewardPerBlock = rewardPerBlock;\r\n        rt.rewardVault = address(new RewardVault(rewardToken));\r\n\r\n        emit NewRewardToken(len, rewardToken);\r\n    }\r\n\r\n    function removeRewardToken(address rewardToken) external onlyOwner {\r\n        uint256 len = rewardTokenInfos.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            if (rewardToken == rewardTokenInfos[i].rewardToken) {\r\n                if(i != len - 1) {\r\n                    rewardTokenInfos[i] = rewardTokenInfos[len - 1];\r\n                }\r\n                rewardTokenInfos.pop();\r\n                emit RemoveRewardToken(rewardToken);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setEndBlock(uint256 i, uint256 newEndBlock)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(i < rewardTokenInfos.length, \"DODOMineV2: REWARD_ID_NOT_FOUND\");\r\n        _updateReward(address(0), i);\r\n        RewardTokenInfo storage rt = rewardTokenInfos[i];\r\n\r\n        require(block.number < newEndBlock, \"DODOMineV2: END_BLOCK_INVALID\");\r\n        require(block.number > rt.startBlock, \"DODOMineV2: NOT_START\");\r\n        require(block.number < rt.endBlock, \"DODOMineV2: ALREADY_CLOSE\");\r\n\r\n        rt.endBlock = newEndBlock;\r\n        emit UpdateEndBlock(i, newEndBlock);\r\n    }\r\n\r\n    function setReward(uint256 i, uint256 newRewardPerBlock)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(i < rewardTokenInfos.length, \"DODOMineV2: REWARD_ID_NOT_FOUND\");\r\n        _updateReward(address(0), i);\r\n        RewardTokenInfo storage rt = rewardTokenInfos[i];\r\n        \r\n        require(block.number < rt.endBlock, \"DODOMineV2: ALREADY_CLOSE\");\r\n\r\n        rt.rewardPerBlock = newRewardPerBlock;\r\n        emit UpdateReward(i, newRewardPerBlock);\r\n    }\r\n\r\n    function withdrawLeftOver(uint256 i, uint256 amount) external onlyOwner {\r\n        require(i < rewardTokenInfos.length, \"DODOMineV2: REWARD_ID_NOT_FOUND\");\r\n        \r\n        RewardTokenInfo storage rt = rewardTokenInfos[i];\r\n        require(block.number > rt.endBlock, \"DODOMineV2: MINING_NOT_FINISHED\");\r\n\r\n        IRewardVault(rt.rewardVault).withdrawLeftOver(msg.sender,amount);\r\n\r\n        emit WithdrawLeftOver(msg.sender, i);\r\n    }\r\n\r\n\r\n    // ============ Internal  ============\r\n\r\n    function _updateReward(address user, uint256 i) internal {\r\n        RewardTokenInfo storage rt = rewardTokenInfos[i];\r\n        if (rt.lastRewardBlock != block.number){\r\n            rt.accRewardPerShare = _getAccRewardPerShare(i);\r\n            rt.lastRewardBlock = block.number;\r\n        }\r\n        if (user != address(0)) {\r\n            rt.userRewards[user] = getPendingReward(user, i);\r\n            rt.userRewardPerSharePaid[user] = rt.accRewardPerShare;\r\n        }\r\n    }\r\n\r\n    function _updateAllReward(address user) internal {\r\n        uint256 len = rewardTokenInfos.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            _updateReward(user, i);\r\n        }\r\n    }\r\n\r\n    function _getUnrewardBlockNum(uint256 i) internal view returns (uint256) {\r\n        RewardTokenInfo memory rt = rewardTokenInfos[i];\r\n        if (block.number < rt.startBlock || rt.lastRewardBlock > rt.endBlock) {\r\n            return 0;\r\n        }\r\n        uint256 start = rt.lastRewardBlock < rt.startBlock ? rt.startBlock : rt.lastRewardBlock;\r\n        uint256 end = rt.endBlock < block.number ? rt.endBlock : block.number;\r\n        return end.sub(start);\r\n    }\r\n\r\n    function _getAccRewardPerShare(uint256 i) internal view returns (uint256) {\r\n        RewardTokenInfo memory rt = rewardTokenInfos[i];\r\n        if (totalSupply() == 0) {\r\n            return rt.accRewardPerShare;\r\n        }\r\n        return\r\n            rt.accRewardPerShare.add(\r\n                DecimalMath.divFloor(_getUnrewardBlockNum(i).mul(rt.rewardPerBlock), totalSupply())\r\n            );\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/DODOToken/DODOMineV2/ERC20Mine.sol\r\n\r\n\r\n\r\ncontract ERC20Mine is BaseMine {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Storage ============\r\n\r\n    address public _TOKEN_;\r\n\r\n    function init(address owner, address token) external {\r\n        super.initOwner(owner);\r\n        _TOKEN_ = token;\r\n    }\r\n\r\n    // ============ Event  ============\r\n\r\n    event Deposit(address indexed user, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n\r\n    // ============ Deposit && Withdraw && Exit ============\r\n\r\n    function deposit(uint256 amount) external {\r\n        require(amount > 0, \"DODOMineV2: CANNOT_DEPOSIT_ZERO\");\r\n\r\n        _updateAllReward(msg.sender);\r\n\r\n        uint256 erc20OriginBalance = IERC20(_TOKEN_).balanceOf(address(this));\r\n        IERC20(_TOKEN_).safeTransferFrom(msg.sender, address(this), amount);\r\n        uint256 actualStakeAmount = IERC20(_TOKEN_).balanceOf(address(this)).sub(erc20OriginBalance);\r\n        \r\n        _totalSupply = _totalSupply.add(actualStakeAmount);\r\n        _balances[msg.sender] = _balances[msg.sender].add(actualStakeAmount);\r\n\r\n        emit Deposit(msg.sender, actualStakeAmount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) external {\r\n        require(amount > 0, \"DODOMineV2: CANNOT_WITHDRAW_ZERO\");\r\n\r\n        _updateAllReward(msg.sender);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        IERC20(_TOKEN_).safeTransfer(msg.sender, amount);\r\n\r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"NewRewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"RemoveRewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateEndBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"WithdrawLeftOver\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TOKEN_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"getIdByRewardToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"getPendingRewardByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getRewardTokenById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokenInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newEndBlock\",\"type\":\"uint256\"}],\"name\":\"setEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLeftOver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC20Mine", "CompilerVersion": "v0.6.9+commit.3e3065ac", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c97f7101dd2d0f1f335d9ff75f16023486a941226b56feaae7de45239bdb84a9"}