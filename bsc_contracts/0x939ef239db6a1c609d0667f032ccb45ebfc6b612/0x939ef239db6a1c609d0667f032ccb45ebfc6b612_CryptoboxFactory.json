{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/EternalOwnable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n    @title EternalOwnable\\n    @author iMe Lab\\n    @notice Ownable, but the owner cannot change\\n */\\nabstract contract EternalOwnable is Context {\\n    error OwnershipIsMissing();\\n\\n    address private immutable _theOwner;\\n\\n    constructor(address owner) {\\n        _theOwner = owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    function _checkOwner() internal view {\\n        if (_msgSender() != _theOwner) revert OwnershipIsMissing();\\n    }\\n\\n    function _owner() internal view returns (address) {\\n        return _theOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Cryptobox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ICryptobox} from \\\"./ICryptobox.sol\\\";\\nimport {Participation} from \\\"./lib/Participation.sol\\\";\\nimport {Currency} from \\\"./lib/Currency.sol\\\";\\nimport {EternalOwnable} from \\\"./access/EternalOwnable.sol\\\";\\n\\ncontract Cryptobox is ICryptobox, EternalOwnable {\\n    using Currency for address;\\n\\n    uint32 private immutable _capacity;\\n    uint32 private _totalParticipated;\\n    bool private _active = true;\\n    address private immutable _signer;\\n    address private immutable _token;\\n    mapping(bytes32 => bool) private _participatedNames;\\n    mapping(address => bool) private _participatedAddresses;\\n    uint256 private immutable _prize;\\n\\n    constructor(\\n        ICryptobox.Info memory blueprint,\\n        address signer,\\n        address owner\\n    ) EternalOwnable(owner) {\\n        require(signer != address(0));\\n        _token = blueprint.token;\\n        _prize = blueprint.prize;\\n        _capacity = blueprint.capacity;\\n        _signer = signer;\\n    }\\n\\n    function info() external view override returns (ICryptobox.Info memory) {\\n        return ICryptobox.Info(_token, _capacity, _prize);\\n    }\\n\\n    function isActive() external view override returns (bool) {\\n        return _active;\\n    }\\n\\n    function participants() external view override returns (uint32) {\\n        return _totalParticipated;\\n    }\\n\\n    function dispense(\\n        Participation.Participant memory candidate,\\n        Participation.Signature memory sig\\n    ) external override {\\n        require(_active);\\n        Participation.requireSigned(candidate, sig, address(this), _signer);\\n        _reward(candidate);\\n    }\\n\\n    function dispenseMany(\\n        Participation.Participant[] memory candidates,\\n        Participation.Signature memory sig\\n    ) external override {\\n        require(candidates.length <= _candidatesLeft());\\n        require(_active);\\n        Participation.requireSigned(candidates, sig, address(this), _signer);\\n        _reward(candidates);\\n    }\\n\\n    function stop() external onlyOwner {\\n        require(_active);\\n        _stop();\\n        _refund();\\n    }\\n\\n    function participated(\\n        Participation.Participant memory participant\\n    ) external view override returns (bool) {\\n        return _participated(participant);\\n    }\\n\\n    function _participated(\\n        Participation.Participant memory participant\\n    ) internal view returns (bool) {\\n        bool isAddressParticipated = _participatedAddresses[participant.addr];\\n        bool isNameParticipated = _participatedNames[participant.name];\\n        return isAddressParticipated || isNameParticipated;\\n    }\\n\\n    function _reward(Participation.Participant memory candidate) private {\\n        _totalParticipated += 1;\\n        _tryToParticipate(candidate);\\n        if (_totalParticipated == _capacity) _finish();\\n        _token.transfer(candidate.addr, _prize);\\n    }\\n\\n    function _reward(Participation.Participant[] memory candidates) private {\\n        _totalParticipated += uint32(candidates.length);\\n        if (_totalParticipated == _capacity) _finish();\\n        for (uint i = 0; i < candidates.length; i++)\\n            _tryToParticipate(candidates[i]);\\n        for (uint i = 0; i < candidates.length; i++)\\n            _token.transfer(candidates[i].addr, _prize);\\n    }\\n\\n    function _tryToParticipate(\\n        Participation.Participant memory candidate\\n    ) private {\\n        require(!_participated(candidate));\\n        _participatedAddresses[candidate.addr] = true;\\n        _participatedNames[candidate.name] = true;\\n    }\\n\\n    function _refund() private {\\n        _token.transfer(_owner(), _token.balanceOf(address(this)));\\n    }\\n\\n    function _finish() private {\\n        _active = false;\\n        emit CryptoboxFinished();\\n    }\\n\\n    function _stop() private {\\n        _active = false;\\n        emit CryptoboxStopped();\\n    }\\n\\n    receive() external payable {\\n        require(_token == Currency.NATIVE);\\n        require(_active);\\n        require(address(this).balance == _tokensNeeded());\\n    }\\n\\n    function _tokensNeeded() private view returns (uint256) {\\n        return _prize * _candidatesLeft();\\n    }\\n\\n    function _candidatesLeft() private view returns (uint32) {\\n        return _capacity - _totalParticipated;\\n    }\\n\\n    function version() external pure returns (uint8) {\\n        return 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CryptoboxFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Currency} from \\\"./lib/Currency.sol\\\";\\nimport {ICryptoboxFactory} from \\\"./ICryptoboxFactory.sol\\\";\\nimport {ICryptobox} from \\\"./ICryptobox.sol\\\";\\nimport {Cryptobox} from \\\"./Cryptobox.sol\\\";\\n\\ncontract CryptoboxFactory is Ownable, ICryptoboxFactory {\\n    using Currency for address;\\n\\n    address private _feeToken;\\n    address private _feeDestination;\\n    uint256 private _participantFee;\\n    uint256 private _creationFee;\\n    uint32 private _minCapacity = 1;\\n    bool private _enabled = true;\\n\\n    constructor() {\\n        _feeDestination = _msgSender();\\n    }\\n\\n    function getFeeToken() external view override returns (address) {\\n        return _feeToken;\\n    }\\n\\n    function setFeeToken(address token) external override onlyOwner {\\n        require(token != _feeToken);\\n        _feeToken = token;\\n        emit RulesChanged();\\n    }\\n\\n    function getFeeDestination() external view override returns (address) {\\n        return _feeDestination;\\n    }\\n\\n    function setFeeDestination(\\n        address destination\\n    ) external override onlyOwner {\\n        require(destination != address(0));\\n        require(destination != _feeDestination);\\n        _feeDestination = destination;\\n    }\\n\\n    function getParticipantFee() external view override returns (uint256) {\\n        return _participantFee;\\n    }\\n\\n    function setParticipantFee(uint256 fee) external override onlyOwner {\\n        require(fee != _participantFee);\\n        _participantFee = fee;\\n        emit RulesChanged();\\n    }\\n\\n    function getCreationFee() external view override returns (uint256) {\\n        return _creationFee;\\n    }\\n\\n    function setCreationFee(uint256 fee) external override onlyOwner {\\n        require(fee != _creationFee);\\n        _creationFee = fee;\\n        emit RulesChanged();\\n    }\\n\\n    function getMinimalCapacity() external view override returns (uint32) {\\n        return _minCapacity;\\n    }\\n\\n    function setMinimalCapacity(uint32 capacity) external override onlyOwner {\\n        require(capacity > 0);\\n        require(capacity != _minCapacity);\\n        _minCapacity = capacity;\\n        emit RulesChanged();\\n    }\\n\\n    function isEnabled() external view override returns (bool) {\\n        return _enabled;\\n    }\\n\\n    function enable() external override onlyOwner {\\n        require(!_enabled);\\n        _enabled = true;\\n        emit RulesChanged();\\n    }\\n\\n    function disable() external override onlyOwner {\\n        require(_enabled);\\n        _enabled = false;\\n        emit RulesChanged();\\n    }\\n\\n    function create(\\n        ICryptobox.Info memory blueprint,\\n        address signer\\n    ) external payable {\\n        _requireCanCreate(blueprint);\\n        Cryptobox cryptobox = _spawn(blueprint, signer);\\n        _collectFeesFor(blueprint);\\n        _fund(cryptobox);\\n    }\\n\\n    function _requireCanCreate(ICryptobox.Info memory blueprint) private view {\\n        if (!_enabled) revert FactoryIsDisabled();\\n        if (blueprint.capacity < _minCapacity) revert NotEnoughParticipants();\\n    }\\n\\n    function _collectFeesFor(ICryptobox.Info memory blueprint) private {\\n        uint256 fee = _creationFee + _participantFee * blueprint.capacity;\\n        _feeToken.take(_msgSender(), _feeDestination, fee);\\n    }\\n\\n    function _spawn(\\n        ICryptobox.Info memory blueprint,\\n        address signer\\n    ) private returns (Cryptobox) {\\n        Cryptobox box = new Cryptobox(blueprint, signer, _msgSender());\\n        emit CryptoboxCreated(address(box));\\n        return box;\\n    }\\n\\n    function _fund(Cryptobox box) private {\\n        ICryptobox.Info memory info = box.info();\\n        uint256 fund = info.capacity * info.prize;\\n        info.token.take(_msgSender(), address(box), fund);\\n        uint256 balance = info.token.balanceOf(address(box));\\n        if (balance < fund) revert CryptoboxFundingFailed();\\n    }\\n\\n    function version() external pure returns (uint8) {\\n        return 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ICryptobox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Participation} from \\\"./lib/Participation.sol\\\";\\n\\ninterface ICryptobox {\\n    struct Info {\\n        address token;\\n        uint32 capacity;\\n        uint256 prize;\\n    }\\n\\n    function info() external view returns (ICryptobox.Info memory);\\n\\n    function isActive() external view returns (bool);\\n\\n    function participants() external view returns (uint32);\\n\\n    function participated(\\n        Participation.Participant calldata\\n    ) external view returns (bool);\\n\\n    function dispense(\\n        Participation.Participant calldata,\\n        Participation.Signature calldata\\n    ) external;\\n\\n    function dispenseMany(\\n        Participation.Participant[] calldata,\\n        Participation.Signature calldata\\n    ) external;\\n\\n    function stop() external;\\n\\n    event CryptoboxFinished();\\n    event CryptoboxStopped();\\n}\\n\"\r\n    },\r\n    \"contracts/ICryptoboxFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ICryptobox} from \\\"./ICryptobox.sol\\\";\\n\\n/**\\n    @title ICryptoboxFactory \\n    @author iMe Lab\\n    @notice Factory iMe Cryptoboxes\\n */\\ninterface ICryptoboxFactory {\\n    event RulesChanged();\\n    event CryptoboxCreated(address addr);\\n\\n    error NotEnoughParticipants();\\n    error FactoryIsDisabled();\\n    error CryptoboxFundingFailed();\\n\\n    function create(ICryptobox.Info memory, address) external payable;\\n\\n    function getFeeToken() external view returns (address);\\n\\n    function setFeeToken(address) external;\\n\\n    function getFeeDestination() external view returns (address);\\n\\n    function setFeeDestination(address) external;\\n\\n    function getParticipantFee() external view returns (uint256);\\n\\n    function setParticipantFee(uint256) external;\\n\\n    function getCreationFee() external view returns (uint256);\\n\\n    function setCreationFee(uint256) external;\\n\\n    function getMinimalCapacity() external view returns (uint32);\\n\\n    function setMinimalCapacity(uint32) external;\\n\\n    function isEnabled() external view returns (bool);\\n\\n    function enable() external;\\n\\n    function disable() external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Currency.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n    @title Currency\\n    @author iMe Lab\\n    @notice Library for working with arbitrary crypto currencies\\n */\\nlibrary Currency {\\n    error CurrencyTransferFailed();\\n\\n    address internal constant NATIVE = address(0);\\n\\n    function balanceOf(\\n        address currency,\\n        address account\\n    ) internal view returns (uint256) {\\n        if (currency == NATIVE) return account.balance;\\n\\n        return IERC20(currency).balanceOf(account);\\n    }\\n\\n    function transfer(\\n        address currency,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        _safe(_transfer(currency, account, amount));\\n    }\\n\\n    function take(\\n        address currency,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        _safe(_take(currency, from, to, amount));\\n    }\\n\\n    function _transfer(\\n        address currency,\\n        address account,\\n        uint256 amount\\n    ) private returns (bool) {\\n        if (currency == NATIVE) return payable(account).send(amount);\\n\\n        return IERC20(currency).transfer(account, amount);\\n    }\\n\\n    function _take(\\n        address currency,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool) {\\n        if (currency == NATIVE) {\\n            // We expect to receive `amount` from `spender` via payable\\n            return payable(to).send(amount);\\n        }\\n\\n        return IERC20(currency).transferFrom(from, to, amount);\\n    }\\n\\n    function _safe(bool transferred) private pure {\\n        if (!transferred) revert CurrencyTransferFailed();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Participation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n    @title Participation \\n    @author iMe Lab\\n    @notice Library for working with centralized participation\\n */\\nlibrary Participation {\\n    string internal constant SIGNED_MSG_PREFIX =\\n        \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n    error ParticipationNotSigned();\\n\\n    struct Participant {\\n        address addr;\\n        bytes32 name;\\n    }\\n\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    function requireSigned(\\n        Participant memory participant,\\n        Signature memory sig,\\n        address issuer,\\n        address trustedSigner\\n    ) internal pure {\\n        bytes32 digest = _digestOf(participant, issuer);\\n        address signer = ecrecover(digest, sig.v, sig.r, sig.s);\\n\\n        if (signer != trustedSigner) revert ParticipationNotSigned();\\n    }\\n\\n    function requireSigned(\\n        Participant[] memory participants,\\n        Signature memory sig,\\n        address issuer,\\n        address trustedSigner\\n    ) internal pure {\\n        bytes32 digest = _digestOf(participants, issuer);\\n        address signer = ecrecover(digest, sig.v, sig.r, sig.s);\\n\\n        if (signer != trustedSigner) revert ParticipationNotSigned();\\n    }\\n\\n    function _digestOf(\\n        Participant memory participant,\\n        address issuer\\n    ) private pure returns (bytes32) {\\n        bytes32 message = keccak256(\\n            abi.encodePacked(participant.addr, participant.name, issuer)\\n        );\\n\\n        return keccak256(abi.encodePacked(SIGNED_MSG_PREFIX, message));\\n    }\\n\\n    function _digestOf(\\n        Participant[] memory participants,\\n        address issuer\\n    ) private pure returns (bytes32) {\\n        bytes32 message = keccak256(abi.encodePacked(issuer, \\\"Waterfall\\\"));\\n\\n        for (uint i = 0; i < participants.length; i++) {\\n            message = keccak256(\\n                abi.encodePacked(\\n                    participants[i].name,\\n                    message,\\n                    participants[i].addr\\n                )\\n            );\\n        }\\n\\n        return keccak256(abi.encodePacked(SIGNED_MSG_PREFIX, message));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 150\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CryptoboxFundingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurrencyTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FactoryIsDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughParticipants\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"CryptoboxCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RulesChanged\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"capacity\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"internalType\":\"struct ICryptobox.Info\",\"name\":\"blueprint\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimalCapacity\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParticipantFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setCreationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"capacity\",\"type\":\"uint32\"}],\"name\":\"setMinimalCapacity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setParticipantFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "CryptoboxFactory", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "150", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}