{"SourceCode": "// Sources flattened with hardhat v2.6.4 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\n\r\n// File contracts/router/interfaces/IOSWAP_HybridRouterRegistry.sol\r\npragma solidity =0.6.11;\r\n\r\ninterface IOSWAP_HybridRouterRegistry {\r\n    event ProtocolRegister(address indexed factory, bytes32 name, uint256 fee, uint256 feeBase, uint256 typeCode);\r\n    event PairRegister(address indexed factory, address indexed pair, address token0, address token1);\r\n    event CustomPairRegister(address indexed pair, uint256 fee, uint256 feeBase, uint256 typeCode);\r\n\r\n    struct Protocol {\r\n        bytes32 name;\r\n        uint256 fee;\r\n        uint256 feeBase;\r\n        uint256 typeCode;\r\n    }\r\n    struct Pair {\r\n        address factory;\r\n        address token0;\r\n        address token1;\r\n    }\r\n    struct CustomPair {\r\n        uint256 fee;\r\n        uint256 feeBase;\r\n        uint256 typeCode;\r\n    }\r\n\r\n\r\n    function protocols(address) external view returns (\r\n        bytes32 name,\r\n        uint256 fee,\r\n        uint256 feeBase,\r\n        uint256 typeCode\r\n    );\r\n    function pairs(address) external view returns (\r\n        address factory,\r\n        address token0,\r\n        address token1\r\n    );\r\n    function customPairs(address) external view returns (\r\n        uint256 fee,\r\n        uint256 feeBase,\r\n        uint256 typeCode\r\n    );\r\n    function protocolList(uint256) external view returns (address);\r\n    function protocolListLength() external view returns (uint256);\r\n\r\n    function governance() external returns (address);\r\n\r\n    function registerProtocol(bytes32 _name, address _factory, uint256 _fee, uint256 _feeBase, uint256 _typeCode) external;\r\n\r\n    function registerPair(address token0, address token1, address pairAddress, uint256 fee, uint256 feeBase, uint256 typeCode) external;\r\n    function registerPairByIndex(address _factory, uint256 index) external;\r\n    function registerPairsByIndex(address _factory, uint256[] calldata index) external;\r\n    function registerPairByTokens(address _factory, address _token0, address _token1) external;\r\n    function registerPairByTokensV3(address _factory, address _token0, address _token1, uint256 pairIndex) external;\r\n    function registerPairsByTokens(address _factory, address[] calldata _token0, address[] calldata _token1) external;\r\n    function registerPairsByTokensV3(address _factory, address[] calldata _token0, address[] calldata _token1, uint256[] calldata pairIndex) external;\r\n    function registerPairByAddress(address _factory, address pairAddress) external;\r\n    function registerPairsByAddress(address _factory, address[] memory pairAddress) external;\r\n    function registerPairsByAddress2(address[] memory _factory, address[] memory pairAddress) external;\r\n\r\n    function getPairTokens(address[] calldata pairAddress) external view returns (address[] memory token0, address[] memory token1);\r\n    function getTypeCode(address pairAddress) external view returns (uint256 typeCode);\r\n    function getFee(address pairAddress) external view returns (uint256 fee, uint256 feeBase);\r\n}\r\n\r\n\r\n// File contracts/libraries/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/gov/interfaces/IOAXDEX_Governance.sol\r\n\r\n\r\npragma solidity =0.6.11;\r\n\r\ninterface IOAXDEX_Governance {\r\n\r\n    struct NewStake {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n    }\r\n    struct VotingConfig {\r\n        uint256 minExeDelay;\r\n        uint256 minVoteDuration;\r\n        uint256 maxVoteDuration;\r\n        uint256 minOaxTokenToCreateVote;\r\n        uint256 minQuorum;\r\n    }\r\n\r\n    event ParamSet(bytes32 indexed name, bytes32 value);\r\n    event ParamSet2(bytes32 name, bytes32 value1, bytes32 value2);\r\n    event AddVotingConfig(bytes32 name, \r\n        uint256 minExeDelay,\r\n        uint256 minVoteDuration,\r\n        uint256 maxVoteDuration,\r\n        uint256 minOaxTokenToCreateVote,\r\n        uint256 minQuorum);\r\n    event SetVotingConfig(bytes32 indexed configName, bytes32 indexed paramName, uint256 minExeDelay);\r\n\r\n    event Stake(address indexed who, uint256 value);\r\n    event Unstake(address indexed who, uint256 value);\r\n\r\n    event NewVote(address indexed vote);\r\n    event NewPoll(address indexed poll);\r\n    event Vote(address indexed account, address indexed vote, uint256 option);\r\n    event Poll(address indexed account, address indexed poll, uint256 option);\r\n    event Executed(address indexed vote);\r\n    event Veto(address indexed vote);\r\n\r\n    function votingConfigs(bytes32) external view returns (uint256 minExeDelay,\r\n        uint256 minVoteDuration,\r\n        uint256 maxVoteDuration,\r\n        uint256 minOaxTokenToCreateVote,\r\n        uint256 minQuorum);\r\n    function votingConfigProfiles(uint256) external view returns (bytes32);\r\n\r\n    function oaxToken() external view returns (address);\r\n    function votingToken() external view returns (address);\r\n    function freezedStake(address) external view returns (uint256 amount, uint256 timestamp);\r\n    function stakeOf(address) external view returns (uint256);\r\n    function totalStake() external view returns (uint256);\r\n\r\n    function votingRegister() external view returns (address);\r\n    function votingExecutor(uint256) external view returns (address);\r\n    function votingExecutorInv(address) external view returns (uint256);\r\n    function isVotingExecutor(address) external view returns (bool);\r\n    function admin() external view returns (address);\r\n    function minStakePeriod() external view returns (uint256);\r\n\r\n    function voteCount() external view returns (uint256);\r\n    function votingIdx(address) external view returns (uint256);\r\n    function votings(uint256) external view returns (address);\r\n\r\n\r\n\tfunction votingConfigProfilesLength() external view returns(uint256);\r\n\tfunction getVotingConfigProfiles(uint256 start, uint256 length) external view returns(bytes32[] memory profiles);\r\n    function getVotingParams(bytes32) external view returns (uint256 _minExeDelay, uint256 _minVoteDuration, uint256 _maxVoteDuration, uint256 _minOaxTokenToCreateVote, uint256 _minQuorum);\r\n\r\n    function setVotingRegister(address _votingRegister) external;\r\n    function votingExecutorLength() external view returns (uint256);\r\n    function initVotingExecutor(address[] calldata _setVotingExecutor) external;\r\n    function setVotingExecutor(address _setVotingExecutor, bool _bool) external;\r\n    function initAdmin(address _admin) external;\r\n    function setAdmin(address _admin) external;\r\n    function addVotingConfig(bytes32 name, uint256 minExeDelay, uint256 minVoteDuration, uint256 maxVoteDuration, uint256 minOaxTokenToCreateVote, uint256 minQuorum) external;\r\n    function setVotingConfig(bytes32 configName, bytes32 paramName, uint256 paramValue) external;\r\n    function setMinStakePeriod(uint _minStakePeriod) external;\r\n\r\n    function stake(uint256 value) external;\r\n    function unlockStake() external;\r\n    function unstake(uint256 value) external;\r\n    function allVotings() external view returns (address[] memory);\r\n    function getVotingCount() external view returns (uint256);\r\n    function getVotings(uint256 start, uint256 count) external view returns (address[] memory _votings);\r\n\r\n    function isVotingContract(address votingContract) external view returns (bool);\r\n\r\n    function getNewVoteId() external returns (uint256);\r\n    function newVote(address vote, bool isExecutiveVote) external;\r\n    function voted(bool poll, address account, uint256 option) external;\r\n    function executed() external;\r\n    function veto(address voting) external;\r\n    function closeVote(address vote) external;\r\n}\r\n\r\n\r\n// File contracts/gov/interfaces/IOAXDEX_VotingExecutor.sol\r\n\r\n\r\npragma solidity =0.6.11;\r\n\r\ninterface IOAXDEX_VotingExecutor {\r\n    function execute(bytes32[] calldata params) external;\r\n}\r\n\r\n\r\n// File contracts/router/OSWAP_HybridRouterRegistry.sol\r\n\r\n\r\npragma solidity =0.6.11;\r\n\r\n\r\n\r\n\r\ninterface IFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n}\r\ninterface IFactoryV3 {\r\n    function getPair(address tokenA, address tokenB, uint256 index) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n}\r\n\r\ninterface IPair {\r\n    function token0() external returns (address);\r\n    function token1() external returns (address);\r\n}\r\n\r\ncontract OSWAP_HybridRouterRegistry is Ownable, IOSWAP_HybridRouterRegistry, IOAXDEX_VotingExecutor {\r\n\r\n    modifier onlyVoting() {\r\n        require(IOAXDEX_Governance(governance).isVotingExecutor(msg.sender), \"Not from voting\");\r\n        _; \r\n    }\r\n\r\n    mapping (address => Pair) public override pairs;\r\n    mapping (address => CustomPair) public override customPairs;\r\n    mapping (address => Protocol) public override protocols;\r\n    address[] public override protocolList;\r\n\r\n    address public override governance;\r\n\r\n    constructor(address _governance) public {\r\n        governance = _governance;\r\n    }\r\n\r\n    function protocolListLength() public override view returns (uint256) {\r\n        return protocolList.length;\r\n    }\r\n\r\n    function init(bytes32[] calldata _name, address[] calldata _factory, uint256[] calldata _fee, uint256[] calldata _feeBase, uint256[] calldata _typeCode) external onlyOwner {\r\n        require(protocolList.length == 0 , \"Already init\");\r\n        uint256 length = _name.length;\r\n        require(length == _factory.length && _factory.length == _fee.length && _fee.length == _typeCode.length, \"length not match\");\r\n        for (uint256 i = 0 ; i < length ; i++) {\r\n            _registerProtocol(_name[i], _factory[i], _fee[i], _feeBase[i], _typeCode[i]);\r\n        }\r\n    }\r\n    function execute(bytes32[] calldata params) external override {\r\n        require(IOAXDEX_Governance(governance).isVotingContract(msg.sender), \"Not from voting\");\r\n        require(params.length > 1, \"Invalid length\");\r\n        bytes32 name = params[0];\r\n        if (params.length == 6) {\r\n            if (name == \"registerProtocol\") {\r\n                _registerProtocol(params[1], address(bytes20(params[2])), uint256(params[3]), uint256(params[4]), uint256(params[5]));\r\n                return;\r\n            }\r\n        } else if (params.length == 7) {\r\n            if (name == \"registerPair\") {\r\n                _registerPair(address(bytes20(params[1])), address(bytes20(params[2])), address(bytes20(params[3])), uint256(params[4]), uint256(params[5]), uint256(params[6]));\r\n                return;\r\n            }\r\n        }\r\n        revert(\"Invalid parameters\");\r\n    }\r\n    function registerProtocol(bytes32 _name, address _factory, uint256 _fee, uint256 _feeBase, uint256 _typeCode) external override onlyVoting {\r\n        _registerProtocol(_name, _factory, _fee, _feeBase, _typeCode);\r\n    }\r\n    // register protocol with standard trade fee\r\n    function _registerProtocol(bytes32 _name, address _factory, uint256 _fee, uint256 _feeBase, uint256 _typeCode) internal {\r\n        require(_factory > address(0), \"Invalid protocol address\");\r\n        require(_fee <= _feeBase, \"Fee too large\");\r\n        require(_feeBase > 0, \"Protocol not regconized\");\r\n        protocols[_factory] = Protocol({\r\n            name: _name,\r\n            fee: _fee,\r\n            feeBase: _feeBase,\r\n            typeCode: _typeCode\r\n        });\r\n        protocolList.push(_factory);\r\n        emit ProtocolRegister(_factory, _name, _fee, _feeBase, _typeCode);\r\n    }\r\n\r\n    // register individual pair\r\n    function registerPair(address token0, address token1, address pairAddress, uint256 fee, uint256 feeBase, uint256 typeCode) external override onlyVoting {\r\n        _registerPair(token0, token1, pairAddress, fee, feeBase, typeCode);\r\n    }\r\n    function _registerPair(address token0, address token1, address pairAddress, uint256 fee, uint256 feeBase, uint256 typeCode) internal {\r\n        require(token0 > address(0), \"Invalid token address\");\r\n        require(token0 < token1, \"Invalid token order\");\r\n        require(pairAddress > address(0), \"Invalid pair address\");\r\n        // require(token0 == IPair(pairAddress).token0());\r\n        // require(token1 == IPair(pairAddress).token1());\r\n        require(fee <= feeBase, \"Fee too large\");\r\n        require(feeBase > 0, \"Protocol not regconized\");\r\n\r\n        pairs[pairAddress].factory = address(0);\r\n        pairs[pairAddress].token0 = token0;\r\n        pairs[pairAddress].token1 = token1;\r\n        customPairs[pairAddress].fee = fee;\r\n        customPairs[pairAddress].feeBase = feeBase;\r\n        customPairs[pairAddress].typeCode = typeCode;\r\n        emit PairRegister(address(0), pairAddress, token0, token1);\r\n        emit CustomPairRegister(pairAddress, fee, feeBase, typeCode);\r\n    }\r\n\r\n    // register pair with registered protocol\r\n    function registerPairByIndex(address _factory, uint256 index) external override {\r\n        require(protocols[_factory].typeCode > 0, \"Protocol not regconized\");\r\n        address pairAddress = IFactory(_factory).allPairs(index);\r\n        _registerPair(_factory, pairAddress);\r\n    }\r\n    function registerPairsByIndex(address _factory, uint256[] calldata index) external override {\r\n        require(protocols[_factory].typeCode > 0, \"Protocol not regconized\");\r\n        uint256 length = index.length;\r\n        for (uint256 i = 0 ; i < length ; i++) {\r\n            address pairAddress = IFactory(_factory).allPairs(index[i]);\r\n            _registerPair(_factory, pairAddress);\r\n        }\r\n    }\r\n    function registerPairByTokens(address _factory, address _token0, address _token1) external override {\r\n        require(protocols[_factory].typeCode > 0 && protocols[_factory].typeCode != 3, \"Invalid type\");\r\n        address pairAddress = IFactory(_factory).getPair(_token0, _token1);\r\n        _registerPair(_factory, pairAddress);\r\n    }\r\n\r\n    function registerPairByTokensV3(address _factory, address _token0, address _token1, uint256 pairIndex) external override {\r\n        require(protocols[_factory].typeCode == 3, \"Invalid type\");\r\n        address pairAddress = IFactoryV3(_factory).getPair(_token0, _token1, pairIndex);\r\n        _registerPair(_factory, pairAddress);\r\n    }\r\n    function registerPairsByTokens(address _factory, address[] calldata _token0, address[] calldata _token1) external override {\r\n        require(protocols[_factory].typeCode > 0 && protocols[_factory].typeCode != 3, \"Invalid type\");\r\n        uint256 length = _token0.length;\r\n        require(length == _token1.length, \"array length not match\");\r\n        for (uint256 i = 0 ; i < length ; i++) {\r\n            address pairAddress = IFactory(_factory).getPair(_token0[i], _token1[i]);\r\n            _registerPair(_factory, pairAddress);\r\n        }\r\n    }\r\n    function registerPairsByTokensV3(address _factory, address[] calldata _token0, address[] calldata _token1, uint256[] calldata _pairIndex) external override {\r\n        require(protocols[_factory].typeCode == 3, \"Invalid type\");\r\n        uint256 length = _token0.length;\r\n        require(length == _token1.length, \"array length not match\");\r\n        for (uint256 i = 0 ; i < length ; i++) {\r\n            address pairAddress = IFactoryV3(_factory).getPair(_token0[i], _token1[i], _pairIndex[i]);\r\n            _registerPair(_factory, pairAddress);\r\n        }\r\n    }\r\n    function registerPairByAddress(address _factory, address pairAddress) external override {\r\n        require(protocols[_factory].typeCode > 0 && protocols[_factory].typeCode != 3, \"Protocol not regconized\");\r\n        _registerPair(_factory, pairAddress, true);\r\n    }\r\n    function registerPairsByAddress(address _factory, address[] memory pairAddress) external override {\r\n        require(protocols[_factory].typeCode > 0 && protocols[_factory].typeCode != 3, \"Protocol not regconized\");\r\n        uint256 length = pairAddress.length;\r\n        for (uint256 i = 0 ; i < length ; i++) {\r\n            _registerPair(_factory, pairAddress[i], true);\r\n        }\r\n    }\r\n    function registerPairsByAddress2(address[] memory _factory, address[] memory pairAddress) external override {\r\n        uint256 length = pairAddress.length;\r\n        require(length == _factory.length, \"array length not match\");\r\n        for (uint256 i = 0 ; i < length ; i++) {\r\n            require(protocols[_factory[i]].typeCode > 0 && protocols[_factory[i]].typeCode != 3, \"Protocol not regconized\");\r\n            _registerPair(_factory[i], pairAddress[i], true);\r\n        }\r\n    }\r\n\r\n    function _registerPair(address _factory, address pairAddress) internal {\r\n        _registerPair(_factory, pairAddress, false);\r\n    }\r\n    function _registerPair(address _factory, address pairAddress, bool checkPairAddress) internal {\r\n        require(pairAddress > address(0), \"Invalid pair address/Pair not found\");\r\n        address token0 = IPair(pairAddress).token0();\r\n        address token1 = IPair(pairAddress).token1();\r\n        require(token0 < token1, \"Invalid tokens order\");\r\n        if (checkPairAddress) {\r\n            address _pairAddress = IFactory(_factory).getPair(token0, token1);\r\n            require(pairAddress == _pairAddress, \"invalid pair\");\r\n        }\r\n        pairs[pairAddress].factory = _factory;\r\n        pairs[pairAddress].token0 = token0;\r\n        pairs[pairAddress].token1 = token1;\r\n        emit PairRegister(_factory, pairAddress, token0, token1);\r\n    }\r\n\r\n    function getPairTokens(address[] calldata pairAddress) external override view returns (address[] memory token0, address[] memory token1) {\r\n        uint256 length = pairAddress.length;\r\n        token0 = new address[](length);\r\n        token1 = new address[](length);\r\n        for (uint256 i = 0 ; i < length ; i++) {\r\n            Pair storage pair = pairs[pairAddress[i]];\r\n            token0[i] = pair.token0;\r\n            token1[i] = pair.token1;\r\n        }\r\n    }\r\n    // caller needs to check if typeCode = 0 (or other invalid value)\r\n    function getTypeCode(address pairAddress) external override view returns (uint256 typeCode) {\r\n        address factory = pairs[pairAddress].factory;\r\n        if (factory != address(0)) {\r\n            typeCode = protocols[factory].typeCode;\r\n        } else {\r\n            typeCode = customPairs[pairAddress].typeCode;\r\n        }\r\n    }\r\n    // if getFee() is called without prior getTypeCode(), caller needs to check if feeBase = 0\r\n    function getFee(address pairAddress) external override view returns (uint256 fee, uint256 feeBase) {\r\n        address factory = pairs[pairAddress].factory;\r\n        if (factory != address(0)) {\r\n            fee = protocols[factory].fee;\r\n            feeBase = protocols[factory].feeBase;\r\n        } else {\r\n            feeBase = customPairs[pairAddress].feeBase;\r\n            fee = customPairs[pairAddress].fee;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"typeCode\",\"type\":\"uint256\"}],\"name\":\"CustomPairRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"PairRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"typeCode\",\"type\":\"uint256\"}],\"name\":\"ProtocolRegister\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customPairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"typeCode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"params\",\"type\":\"bytes32[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBase\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pairAddress\",\"type\":\"address[]\"}],\"name\":\"getPairTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"token0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"token1\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"getTypeCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"typeCode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_name\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_factory\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fee\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_feeBase\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_typeCode\",\"type\":\"uint256[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protocolList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocols\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"typeCode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"typeCode\",\"type\":\"uint256\"}],\"name\":\"registerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"registerPairByAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"registerPairByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"registerPairByTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"registerPairByTokensV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"pairAddress\",\"type\":\"address[]\"}],\"name\":\"registerPairsByAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_factory\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairAddress\",\"type\":\"address[]\"}],\"name\":\"registerPairsByAddress2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"index\",\"type\":\"uint256[]\"}],\"name\":\"registerPairsByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_token0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_token1\",\"type\":\"address[]\"}],\"name\":\"registerPairsByTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_token0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_token1\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pairIndex\",\"type\":\"uint256[]\"}],\"name\":\"registerPairsByTokensV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_typeCode\",\"type\":\"uint256\"}],\"name\":\"registerProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OSWAP_HybridRouterRegistry", "CompilerVersion": "v0.6.11+commit.5ef660b1", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000510a179aa399672e26e54ed8ce0e822cc9d0a98d", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3eca006eace6022ce828d6154a168d35d90464bcaf85fece4da58c3dc77eb55c"}