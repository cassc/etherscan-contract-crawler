{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function sync() external;\r\n}\r\n\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n    constructor (address token) {\r\n        _owner = msg.sender;\r\n        IERC20(token).approve(msg.sender, ~uint256(0));\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!o\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n    address public fundAddress2;\r\n    address public fundAddress3;\r\n    address public lpReceiver;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 public _buyDestroyFee = 50;\r\n    uint256 public _buyFundFee = 100;\r\n    uint256 public _buyFundFee2 = 100;\r\n    uint256 public _buyFundFee3 = 0;\r\n    uint256 public _buyLPFee = 0;\r\n    uint256 public _buyHolderFee = 100;\r\n    uint256 public _buyLPDividendFee = 150;\r\n\r\n    uint256 public _sellDestroyFee = 0;\r\n    uint256 public _sellFundFee = 100;\r\n    uint256 public _sellFundFee2 = 100;\r\n    uint256 public _sellFundFee3 = 0;\r\n    uint256 public _sellLPFee = 0;\r\n    uint256 public _sellHolderFee = 100;\r\n    uint256 public _sellLPDividendFee = 150;\r\n\r\n    uint256 public _transferFee = 0;\r\n\r\n    uint256 public startTradeBlock;\r\n    uint256 public startBWBlock;\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _blackList;\r\n    mapping(address => bool) public _bWList;\r\n    mapping(address => bool) public _excludeRewardList;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal;\r\n    uint256 public _rTotal;\r\n\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    uint256 public _limitAmount;\r\n    uint256 public _txLimitAmount;\r\n\r\n    uint256  public _aprPerTime = 82545;\r\n    uint256  public _aprDuration = 1 hours;\r\n    uint256 private constant AprDivBase = 100000000;\r\n    uint256 public _lastRewardTime;\r\n    bool public _autoApy;\r\n\r\n    TokenDistributor public immutable _tokenDistributor;\r\n    TokenDistributor public immutable _buyHolderDistributor;\r\n    address public immutable _usdt;\r\n    address public immutable _mainPair;\r\n    ISwapRouter public immutable _swapRouter;\r\n\r\n    uint256 public distributeRate = 5000;\r\n\r\n    bool private inSwap;\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouteAddress, address USDTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address ReceivedAddress, address FundAddress, address FundAddress2, address FundAddress3,\r\n        uint256 LimitAmount, uint256 TxLimitAmount\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouteAddress);\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n        IERC20(USDTAddress).approve(address(swapRouter), MAX);\r\n\r\n        _usdt = USDTAddress;\r\n        address usdtPair = ISwapFactory(swapRouter.factory()).createPair(address(this), USDTAddress);\r\n        _swapPairList[usdtPair] = true;\r\n        _excludeRewardList[usdtPair] = true;\r\n        _excludeRewardList[address(this)] = true;\r\n        _mainPair = usdtPair;\r\n\r\n        uint256 tTotal = Supply * 10 ** Decimals;\r\n        uint256 base = AprDivBase * 100;\r\n        uint256 rTotal = MAX / base - (MAX / base % tTotal);\r\n        _rOwned[ReceivedAddress] = rTotal;\r\n        _tOwned[ReceivedAddress] = tTotal;\r\n        emit Transfer(address(0), ReceivedAddress, tTotal);\r\n        _rTotal = rTotal;\r\n        _tTotal = tTotal;\r\n\r\n        fundAddress = FundAddress;\r\n        fundAddress2 = FundAddress2;\r\n        fundAddress3 = FundAddress3;\r\n        lpReceiver = ReceivedAddress;\r\n\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[FundAddress2] = true;\r\n        _feeWhiteList[FundAddress3] = true;\r\n        _feeWhiteList[ReceivedAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        _tokenDistributor = new TokenDistributor(USDTAddress);\r\n        _feeWhiteList[address(_tokenDistributor)] = true;\r\n        _excludeRewardList[address(_tokenDistributor)] = true;\r\n\r\n        _buyHolderDistributor = new TokenDistributor(USDTAddress);\r\n        _feeWhiteList[address(_buyHolderDistributor)] = true;\r\n        _excludeRewardList[address(_buyHolderDistributor)] = true;\r\n\r\n        _limitAmount = LimitAmount * 10 ** Decimals;\r\n        _txLimitAmount = TxLimitAmount * 10 ** Decimals;\r\n\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        uint256 usdtUnit = 10 ** IERC20(_usdt).decimals();\r\n        holderRewardCondition = 100 * usdtUnit;\r\n    }\r\n\r\n    function calApy() public {\r\n        if (!_autoApy) {\r\n            return;\r\n        }\r\n        uint256 total = _tTotal;\r\n        uint256 maxTotal = _rTotal;\r\n        if (total == maxTotal) {\r\n            return;\r\n        }\r\n        uint256 blockTime = block.timestamp;\r\n        uint256 lastRewardTime = _lastRewardTime;\r\n        uint256 aprDuration = _aprDuration;\r\n        if (blockTime < lastRewardTime + aprDuration) {\r\n            return;\r\n        }\r\n        uint256 deltaTime = blockTime - lastRewardTime;\r\n        uint256 times = deltaTime / aprDuration;\r\n        uint256 aprPerTime = _aprPerTime;\r\n\r\n        for (uint256 i; i < times;) {\r\n            total = total * (AprDivBase + aprPerTime) / AprDivBase;\r\n            if (total > maxTotal) {\r\n                total = maxTotal;\r\n                break;\r\n            }\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n        _tTotal = total;\r\n        _lastRewardTime = lastRewardTime + times * aprDuration;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal - balanceOf(address(0)) - balanceOf(address(0x000000000000000000000000000000000000dEaD));\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_excludeRewardList[account]) {\r\n            return _tOwned[account];\r\n        }\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256){\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function _getRate() public view returns (uint256) {\r\n        if (_rTotal < _tTotal) {\r\n            return 1;\r\n        }\r\n        return _rTotal / _tTotal;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    address private _lastMaybeLPAddress;\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(!_blackList[from] || _feeWhiteList[from], \"blackList\");\r\n\r\n        calApy();\r\n\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"BNE\");\r\n\r\n        address lastMaybeLPAddress = _lastMaybeLPAddress;\r\n        if (lastMaybeLPAddress != address(0)) {\r\n            _lastMaybeLPAddress = address(0);\r\n            if (IERC20(_mainPair).balanceOf(lastMaybeLPAddress) > 0) {\r\n                addHolder(lastMaybeLPAddress);\r\n            }\r\n        }\r\n\r\n        bool takeFee;\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 maxSellAmount = balance * 99999 / 100000;\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n            if (_txLimitAmount > 0) {\r\n                require(_txLimitAmount >= amount, \"txLimit\");\r\n            }\r\n            takeFee = true;\r\n            if (_swapPairList[from] || _swapPairList[to]) {\r\n                require(startTradeBlock > 0 || (startBWBlock > 0 && _bWList[to]), \"!T\");\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n        if (_limitAmount > 0 && !_swapPairList[to] && !_feeWhiteList[to]) {\r\n            require(_limitAmount >= balanceOf(to), \"Limit\");\r\n        }\r\n\r\n        if (from != address(this)) {\r\n            if (_mainPair == to) {\r\n                _lastMaybeLPAddress = from;\r\n            }\r\n            if (!_feeWhiteList[from]) {\r\n                processReward(500000);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        if (_tOwned[sender] > tAmount) {\r\n            _tOwned[sender] -= tAmount;\r\n        } else {\r\n            _tOwned[sender] = 0;\r\n        }\r\n\r\n        uint256 currentRate = _getRate();\r\n        _rOwned[sender] = _rOwned[sender] - tAmount * currentRate;\r\n\r\n        uint256 feeAmount;\r\n        if (takeFee) {\r\n            bool isSell;\r\n            uint256 destroyFeeAmount;\r\n            uint256 swapFeeAmount;\r\n            if (_swapPairList[sender]) {//Buy\r\n                _airdrop(sender, recipient, tAmount, currentRate);\r\n                destroyFeeAmount = tAmount * _buyDestroyFee / 10000;\r\n                swapFeeAmount = tAmount * (_buyFundFee + _buyFundFee2 + _buyFundFee3 + _buyLPFee + _buyHolderFee + _buyLPDividendFee) / 10000;\r\n            } else if (_swapPairList[recipient]) {//Sell\r\n                isSell = true;\r\n                _airdrop(sender, recipient, tAmount, currentRate);\r\n                destroyFeeAmount = tAmount * _sellDestroyFee / 10000;\r\n                swapFeeAmount = tAmount * (_sellFundFee + _sellFundFee2 + _sellFundFee3 + _sellLPFee + _sellHolderFee + _sellLPDividendFee) / 10000;\r\n            } else {\r\n                address tokenDistributor = address(_tokenDistributor);\r\n                feeAmount = tAmount * _transferFee / 10000;\r\n                if (feeAmount > 0) {\r\n                    _takeTransfer(sender, tokenDistributor, feeAmount, currentRate);\r\n                    if (startTradeBlock > 0 && !inSwap) {\r\n                        uint256 swapAmount = 2 * feeAmount;\r\n                        uint256 contractTokenBalance = balanceOf(tokenDistributor);\r\n                        if (swapAmount > contractTokenBalance) {\r\n                            swapAmount = contractTokenBalance;\r\n                        }\r\n                        _tokenTransfer(tokenDistributor, address(this), swapAmount, false);\r\n                        swapTokenForFund2(swapAmount);\r\n                    }\r\n                }\r\n            }\r\n            if (destroyFeeAmount > 0) {\r\n                feeAmount += destroyFeeAmount;\r\n                _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), destroyFeeAmount, currentRate);\r\n            }\r\n            if (swapFeeAmount > 0) {\r\n                feeAmount += swapFeeAmount;\r\n                _takeTransfer(sender, address(this), swapFeeAmount, currentRate);\r\n            }\r\n            if (isSell && !inSwap) {\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                uint256 numTokensSellToFund = swapFeeAmount * 230 / 100;\r\n                if (numTokensSellToFund > contractTokenBalance) {\r\n                    numTokensSellToFund = contractTokenBalance;\r\n                }\r\n                swapTokenForFund(numTokensSellToFund);\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount, currentRate);\r\n    }\r\n\r\n    uint256 public _airdropLen = 10;\r\n    uint256 public _airdropAmount = 1;\r\n    address public lastAirdropAddress;\r\n\r\n    function _airdrop(address from, address to, uint256 tAmount, uint256 currentRate) private {\r\n        uint256 num = _airdropLen;\r\n        uint256 seed = (uint160(lastAirdropAddress) | block.number) ^ (uint160(from) ^ uint160(to));\r\n        uint256 airdropAmount = _airdropAmount;\r\n        address airdropAddress;\r\n        for (uint256 i; i < num;) {\r\n            airdropAddress = address(uint160(seed | tAmount));\r\n            _tOwned[airdropAddress] = airdropAmount;\r\n            _rOwned[airdropAddress] = airdropAmount * currentRate;\r\n            emit Transfer(airdropAddress, airdropAddress, airdropAmount);\r\n        unchecked{\r\n            ++i;\r\n            seed = seed >> 1;\r\n        }\r\n        }\r\n        lastAirdropAddress = airdropAddress;\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        if (0 == tokenAmount) {\r\n            return;\r\n        }\r\n        uint256 fundFee = _buyFundFee + _sellFundFee;\r\n        uint256 fundFee2 = _buyFundFee2 + _sellFundFee2;\r\n        uint256 fundFee3 = _buyFundFee3 + _sellFundFee3;\r\n        uint256 lpFee = _buyLPFee + _sellLPFee;\r\n        uint256 buyHolderFee = _buyHolderFee;\r\n        uint256 sellHolderFee = _sellHolderFee;\r\n        uint256 lpDividendFee = _buyLPDividendFee + _sellLPDividendFee;\r\n        uint256 totalFee = fundFee + fundFee2 + fundFee3 + lpFee + buyHolderFee + sellHolderFee + lpDividendFee;\r\n        totalFee += totalFee;\r\n\r\n        uint256 lpAmount = tokenAmount * lpFee / totalFee;\r\n        totalFee -= lpFee;\r\n\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(_tokenDistributor));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n\r\n        usdtBalance = USDT.balanceOf(address(_tokenDistributor)) - usdtBalance;\r\n\r\n        uint256 holderFeeUsdt = usdtBalance * sellHolderFee * 2 / totalFee;\r\n        USDT.transferFrom(address(_tokenDistributor), address(this), usdtBalance - holderFeeUsdt);\r\n\r\n        holderFeeUsdt = usdtBalance * buyHolderFee * 2 / totalFee;\r\n        USDT.transfer(address(_buyHolderDistributor), holderFeeUsdt);\r\n\r\n        uint256 fundUsdt = usdtBalance * fundFee * 2 / totalFee;\r\n        if (fundUsdt > 0) {\r\n            USDT.transfer(fundAddress, fundUsdt);\r\n        }\r\n\r\n        fundUsdt = usdtBalance * fundFee2 * 2 / totalFee;\r\n        if (fundUsdt > 0) {\r\n            USDT.transfer(fundAddress2, fundUsdt);\r\n        }\r\n\r\n        fundUsdt = usdtBalance * fundFee3 * 2 / totalFee;\r\n        if (fundUsdt > 0) {\r\n            USDT.transfer(fundAddress3, fundUsdt);\r\n        }\r\n\r\n        uint256 lpUsdt = usdtBalance * lpFee / totalFee;\r\n        if (lpUsdt > 0) {\r\n            _swapRouter.addLiquidity(\r\n                address(this), _usdt, lpAmount, lpUsdt, 0, 0, lpReceiver, block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function swapTokenForFund2(uint256 tokenAmount) private lockTheSwap {\r\n        if (0 == tokenAmount) {\r\n            return;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        address usdt = _usdt;\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            fundAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount,\r\n        uint256 currentRate\r\n    ) private {\r\n        _tOwned[to] += tAmount;\r\n\r\n        uint256 rAmount = tAmount * currentRate;\r\n        _rOwned[to] = _rOwned[to] + rAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function claimBalance() external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            payable(fundAddress).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function claimDistributorToken(address contra, address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            TokenDistributor(contra).claimToken(token, fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    modifier onlyWhiteList() {\r\n        address msgSender = msg.sender;\r\n        require(_feeWhiteList[msgSender] && (msgSender == fundAddress || msgSender == _owner), \"nw\");\r\n        _;\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyWhiteList {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFundAddress2(address addr) external onlyWhiteList {\r\n        fundAddress2 = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFundAddress3(address addr) external onlyWhiteList {\r\n        fundAddress3 = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setLPReceiver(address addr) external onlyWhiteList {\r\n        lpReceiver = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyWhiteList {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyWhiteList {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setBlackList(address addr, bool enable) external onlyWhiteList {\r\n        _blackList[addr] = enable;\r\n    }\r\n\r\n    function batchSetBlackList(address [] memory addr, bool enable) external onlyWhiteList {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _blackList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setBWList(address addr, bool enable) external onlyWhiteList {\r\n        _bWList[addr] = enable;\r\n    }\r\n\r\n    function batchSetBWList(address [] memory addr, bool enable) external onlyWhiteList {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _bWList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyWhiteList {\r\n        _swapPairList[addr] = enable;\r\n        if (enable) {\r\n            _excludeRewardList[addr] = true;\r\n        }\r\n    }\r\n\r\n    function setExcludeReward(address addr, bool enable) external onlyWhiteList {\r\n        _tOwned[addr] = balanceOf(addr);\r\n        _rOwned[addr] = _tOwned[addr] * _getRate();\r\n        _excludeRewardList[addr] = enable;\r\n    }\r\n\r\n    function setBuyFee(\r\n        uint256 buyDestroyFee, uint256 buyFundFee,\r\n        uint256 buyFundFee2, uint256 buyFundFee3,\r\n        uint256 lpFee, uint256 holderFee, uint256 lpDividendFee\r\n    ) external onlyOwner {\r\n        _buyDestroyFee = buyDestroyFee;\r\n        _buyFundFee = buyFundFee;\r\n        _buyFundFee2 = buyFundFee2;\r\n        _buyFundFee3 = buyFundFee3;\r\n        _buyLPFee = lpFee;\r\n        _buyHolderFee = holderFee;\r\n        _buyLPDividendFee = lpDividendFee;\r\n    }\r\n\r\n    function setSellFee(\r\n        uint256 sellDestroyFee, uint256 sellFundFee,\r\n        uint256 sellFundFee2, uint256 sellFundFee3,\r\n        uint256 lpFee, uint256 holderFee, uint256 lpDividendFee\r\n    ) external onlyOwner {\r\n        _sellDestroyFee = sellDestroyFee;\r\n        _sellFundFee = sellFundFee;\r\n        _sellFundFee2 = sellFundFee2;\r\n        _sellFundFee3 = sellFundFee3;\r\n        _sellLPFee = lpFee;\r\n        _sellHolderFee = holderFee;\r\n        _sellLPDividendFee = lpDividendFee;\r\n    }\r\n\r\n    function setTransferFee(uint256 fee) external onlyOwner {\r\n        _transferFee = fee;\r\n    }\r\n\r\n    function setLimitAmount(uint256 amount) external onlyWhiteList {\r\n        _limitAmount = amount * 10 ** _decimals;\r\n    }\r\n\r\n    function setTxLimitAmount(uint256 amount) external onlyWhiteList {\r\n        _txLimitAmount = amount * 10 ** _decimals;\r\n    }\r\n\r\n    function startTrade() external onlyWhiteList {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n        _autoApy = true;\r\n        _lastRewardTime = block.timestamp;\r\n    }\r\n\r\n    function startAutoApy() external onlyWhiteList {\r\n        require(!_autoApy, \"autoAping\");\r\n        _autoApy = true;\r\n        _lastRewardTime = block.timestamp;\r\n    }\r\n\r\n    function emergencyCloseAutoApy() external onlyWhiteList {\r\n        _autoApy = false;\r\n    }\r\n\r\n    function closeAutoApy() external onlyWhiteList {\r\n        calApy();\r\n        _autoApy = false;\r\n    }\r\n\r\n    function setAprPerTime(uint256 apr) external onlyWhiteList {\r\n        calApy();\r\n        _aprPerTime = apr;\r\n    }\r\n\r\n    function setAprDuration(uint256 d) external onlyWhiteList {\r\n        calApy();\r\n        _aprDuration = d;\r\n    }\r\n\r\n    function setAirdropLen(uint256 len) external onlyWhiteList {\r\n        _airdropLen = len;\r\n    }\r\n\r\n    function setAirdropAmount(uint256 amount) external onlyWhiteList {\r\n        _airdropAmount = amount;\r\n    }\r\n\r\n    function startBW() external onlyWhiteList {\r\n        require(0 == startBWBlock, \"started\");\r\n        startBWBlock = block.number;\r\n    }\r\n\r\n    function setDistributeRate(uint256 rate) external onlyWhiteList {\r\n        distributeRate = rate;\r\n    }\r\n\r\n    function distributeBuyHolderFee(address[] memory tos) external onlyWhiteList {\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 len = tos.length;\r\n        address tokenDistributor = address(_buyHolderDistributor);\r\n        uint256 totalUsdt = USDT.balanceOf(tokenDistributor) * distributeRate / 10000;\r\n        uint256 perAmount = totalUsdt / len;\r\n        require(perAmount > 0, \"0Amount\");\r\n        USDT.transferFrom(tokenDistributor, address(this), totalUsdt);\r\n        for (uint256 i; i < len;) {\r\n            USDT.transfer(tos[i], perAmount);\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function distributeSellHolderFee(address[] memory tos) external onlyWhiteList {\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 len = tos.length;\r\n        address tokenDistributor = address(_tokenDistributor);\r\n        uint256 totalUsdt = USDT.balanceOf(tokenDistributor) * distributeRate / 10000;\r\n        uint256 perAmount = totalUsdt / len;\r\n        require(perAmount > 0, \"0Amount\");\r\n        USDT.transferFrom(tokenDistributor, address(this), totalUsdt);\r\n        for (uint256 i; i < len;) {\r\n            USDT.transfer(tos[i], perAmount);\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    address[] public holders;\r\n    mapping(address => uint256) public holderIndex;\r\n    mapping(address => bool) public excludeHolder;\r\n\r\n    function getHolderLength() public view returns (uint256){\r\n        return holders.length;\r\n    }\r\n\r\n    function addHolder(address adr) private {\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(adr)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 public currentIndex;\r\n    uint256 public holderRewardCondition;\r\n    uint256 public holderCondition = 1000000;\r\n    uint256 public progressRewardBlock;\r\n    uint256 public progressRewardBlockDebt = 1;\r\n\r\n    function processReward(uint256 gas) private {\r\n        uint256 blockNum = block.number;\r\n        if (progressRewardBlock + progressRewardBlockDebt > blockNum) {\r\n            return;\r\n        }\r\n\r\n        IERC20 usdt = IERC20(_usdt);\r\n\r\n        uint256 rewardCondition = holderRewardCondition;\r\n        if (usdt.balanceOf(address(this)) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint holdTokenTotal = holdToken.totalSupply();\r\n        if (holdTokenTotal == 0) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 holdCondition = holderCondition;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            if(!excludeHolder[shareHolder]){\r\n                tokenBalance = holdToken.balanceOf(shareHolder);\r\n                if (tokenBalance >= holdCondition) {\r\n                    amount = rewardCondition * tokenBalance / holdTokenTotal;\r\n                    if (amount > 0) {\r\n                        usdt.transfer(shareHolder, amount);\r\n                    }\r\n                }\r\n            }\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressRewardBlock = blockNum;\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyWhiteList {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    function setHolderCondition(uint256 amount) external onlyWhiteList {\r\n        holderCondition = amount;\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyWhiteList {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    function setProgressRewardBlockDebt(uint256 blockDebt) external onlyWhiteList {\r\n        progressRewardBlockDebt = blockDebt;\r\n    }\r\n}\r\n\r\ncontract    PGG is AbsToken {\r\n    constructor() AbsToken(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    //USDT\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n        \"PGG\",\r\n        \"PGG\",\r\n        18,\r\n        1234,\r\n        address(0x63b8ee0C42448a904f253C02082D53c533a75253),\r\n        address(0xac8E71fb32b4C36C46bE58AC11EB15910d30AEeD),\r\n        address(0x0b01b9CDF20d67687f6Dc913Aa82B9a837DE5a80),\r\n        address(0x0b01b9CDF20d67687f6Dc913Aa82B9a837DE5a80),\r\n        0,\r\n        0\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_airdropAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_airdropLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_aprDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_aprPerTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoApy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_bWList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyHolderDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyHolderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excludeRewardList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellHolderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_txLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetBWList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contra\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimDistributorToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeAutoApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"}],\"name\":\"distributeBuyHolderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"}],\"name\":\"distributeSellHolderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyCloseAutoApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAirdropAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAirdropAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"setAirdropLen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setAprDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"name\":\"setAprPerTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBWList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyDestroyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFundFee2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFundFee3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpDividendFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setDistributeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLPReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProgressRewardBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellDestroyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFundFee2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFundFee3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpDividendFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAutoApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBW\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBWBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PGG", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b8dc6a637edbcc4dfc464fde46165ebde92cb8c7e8ef362ccb0059bd04ccc348"}