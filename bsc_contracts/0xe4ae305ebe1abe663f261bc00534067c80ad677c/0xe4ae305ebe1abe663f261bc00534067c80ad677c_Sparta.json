{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.6.8;\r\npragma experimental ABIEncoderV2;\r\n//iBEP20 Interface\r\ninterface iBEP20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address, uint) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n}\r\n    //======================================SPARTA=========================================//\r\ncontract Sparta is iBEP20 {\r\n    using SafeMath for uint256;\r\n\r\n    // ERC-20 Parameters\r\n    string public override name; string public override symbol;\r\n    uint256 public override decimals; uint256 public override totalSupply;\r\n\r\n    // ERC-20 Mappings\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    // Parameters\r\n    uint256 one;\r\n    bool public emitting;\r\n    uint256 public emissionCurve;\r\n    uint256 public _100m;\r\n    uint256 public totalCap;\r\n    uint256 public secondsPerEra;\r\n    uint256 public currentEra;\r\n    uint256 public nextEraTime;\r\n\r\n    address public incentiveAddress;\r\n    address public DAO;\r\n    address public burnAddress;\r\n    address public DEPLOYER;\r\n\r\n    address[] public assetArray;\r\n    mapping(address => bool) public isListed;\r\n    mapping(address => uint256) public mapAsset_claimRate;\r\n    mapping(address => uint256) public mapAsset_claimed;\r\n    mapping(address => uint256) public mapAsset_allocation;\r\n\r\n    struct AssetDetailsStruct {\r\n        bool listed;\r\n        uint256 claimRate;\r\n        uint256 claimed;\r\n        uint256 allocation;\r\n    }\r\n\r\n    // Events\r\n    event ListedAsset(address indexed DAO, address indexed asset, uint256 claimRate, uint256 allocation);\r\n    event DelistedAsset(address indexed DAO, address indexed asset);\r\n    event NewCurve(address indexed DAO, uint256 newCurve);\r\n    event NewIncentiveAddress(address indexed DAO, address newIncentiveAddress);\r\n    event NewDuration(address indexed DAO, uint256 newDuration);\r\n    event NewDAO(address indexed DAO, address newOwner);\r\n    event NewEra(uint256 currentEra, uint256 nextEraTime, uint256 emission);\r\n\r\n    // Only DAO can execute\r\n    modifier onlyDAO() {\r\n        require(msg.sender == DAO || msg.sender == DEPLOYER, \"Must be DAO\");\r\n        _;\r\n    }\r\n\r\n    //=====================================CREATION=========================================//\r\n    // Constructor\r\n    constructor() public {\r\n        name = 'SPARTAN PROTOCOL TOKEN';\r\n        symbol = 'SPARTA';\r\n        decimals = 18;\r\n        one = 10 ** decimals;\r\n        _100m = 100 * 10**6 * one;\r\n        totalSupply = 0;\r\n        totalCap = 300 * 10**6 * one;\r\n        emissionCurve = 2048;\r\n        emitting = false;\r\n        currentEra = 1;\r\n        secondsPerEra = 86400;\r\n        nextEraTime = now + secondsPerEra;\r\n        DEPLOYER = msg.sender;\r\n        burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n    }\r\n\r\n    receive() external payable {\r\n        claim(address(0), msg.value);\r\n    }\r\n\r\n    //========================================iBEP20=========================================//\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    // iBEP20 Transfer function\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    // iBEP20 Approve, change allowance functions\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"iBEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"iBEP20: approve from the zero address\");\r\n        require(spender != address(0), \"iBEP20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    // iBEP20 TransferFrom function\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"iBEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    // TransferTo function\r\n    function transferTo(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(tx.origin, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    // Internal transfer function\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"iBEP20: transfer from the zero address\");\r\n        _balances[sender] = _balances[sender].sub(amount, \"iBEP20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        _checkEmission();\r\n    }\r\n    // Internal mint (upgrading and daily emissions)\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"iBEP20: mint to the zero address\");\r\n        totalSupply = totalSupply.add(amount);\r\n        require(totalSupply <= totalCap, \"Must not mint more than the cap\");\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    // Burn supply\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(msg.sender, amount);\r\n    }\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 decreasedAllowance = allowance(account, msg.sender).sub(amount, \"iBEP20: burn amount exceeds allowance\");\r\n        _approve(account, msg.sender, decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"iBEP20: burn from the zero address\");\r\n        _balances[account] = _balances[account].sub(amount, \"iBEP20: burn amount exceeds balance\");\r\n        totalSupply = totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    //=========================================DAO=========================================//\r\n    // Can list\r\n    function listAsset(address asset, uint256 claimRate, uint256 allocation) public onlyDAO returns(bool){\r\n        if(!isListed[asset]){\r\n            isListed[asset] = true;\r\n            assetArray.push(asset);\r\n        }\r\n        mapAsset_claimRate[asset] = claimRate;\r\n        mapAsset_allocation[asset] = allocation;\r\n        emit ListedAsset(msg.sender, asset, claimRate, allocation);\r\n        return true;\r\n    }\r\n    // Can delist\r\n    function delistAsset(address asset) public onlyDAO returns(bool){\r\n        isListed[asset] = false;\r\n        mapAsset_claimRate[asset] = 0;\r\n        mapAsset_allocation[asset] = 0;\r\n        emit DelistedAsset(msg.sender, asset);\r\n        return true;\r\n    }\r\n    // Can start\r\n    function startEmissions() public onlyDAO returns(bool){\r\n        emitting = true;\r\n        return true;\r\n    }\r\n    // Can stop\r\n    function stopEmissions() public onlyDAO returns(bool){\r\n        emitting = false;\r\n        return true;\r\n    }\r\n    // Can change emissionCurve\r\n    function changeEmissionCurve(uint256 newCurve) public onlyDAO returns(bool){\r\n        emissionCurve = newCurve;\r\n        emit NewCurve(msg.sender, newCurve);\r\n        return true;\r\n    }\r\n    // Can change daily time\r\n    function changeEraDuration(uint256 newDuration) public onlyDAO returns(bool) {\r\n        secondsPerEra = newDuration;\r\n        emit NewDuration(msg.sender, newDuration);\r\n        return true;\r\n    }\r\n    // Can change Incentive Address\r\n    function changeIncentiveAddress(address newIncentiveAddress) public onlyDAO returns(bool) {\r\n        incentiveAddress = newIncentiveAddress;\r\n        emit NewIncentiveAddress(msg.sender, newIncentiveAddress);\r\n        return true;\r\n    }\r\n    // Can change DAO\r\n    function changeDAO(address newDAO) public onlyDAO returns(bool){\r\n        require(newDAO != address(0), \"Must not be zero address\");\r\n        DAO = newDAO;\r\n        emit NewDAO(msg.sender, newDAO);\r\n        return true;\r\n    }\r\n    // Can purge DAO\r\n    function purgeDAO() public onlyDAO returns(bool){\r\n        DAO = address(0);\r\n        emit NewDAO(msg.sender, address(0));\r\n        return true;\r\n    }\r\n    // Can purge DEPLOYER\r\n    function purgeDeployer() public onlyDAO returns(bool){\r\n        DEPLOYER = address(0);\r\n        return true;\r\n    }\r\n\r\n   //======================================EMISSION========================================//\r\n    // Internal - Update emission function\r\n    function _checkEmission() private {\r\n        if ((now >= nextEraTime) && emitting) {                                            // If new Era and allowed to emit\r\n            currentEra += 1;                                                               // Increment Era\r\n            nextEraTime = now + secondsPerEra;                                             // Set next Era time\r\n            uint256 _emission = getDailyEmission();                                        // Get Daily Dmission\r\n            _mint(incentiveAddress, _emission);                                            // Mint to the Incentive Address\r\n            emit NewEra(currentEra, nextEraTime, _emission);                               // Emit Event\r\n        }\r\n    }\r\n    // Calculate Daily Emission\r\n    function getDailyEmission() public view returns (uint256) {\r\n        uint _adjustedCap;\r\n        if(totalSupply <= _100m){ // If less than 100m, then adjust cap down\r\n            _adjustedCap = (totalCap.mul(totalSupply)).div(_100m); // 300m * 50m / 100m = 300m * 50% = 150m\r\n        } else {\r\n            _adjustedCap = totalCap;  // 300m\r\n        }\r\n        return (_adjustedCap.sub(totalSupply)).div(emissionCurve); // outstanding / 2048 \r\n    }\r\n    //======================================CLAIM========================================//\r\n    // Anyone to Claim\r\n    function claim(address asset, uint amount) public payable {\r\n        \r\n        uint _claim = amount;\r\n        if(mapAsset_claimed[asset].add(amount) > mapAsset_allocation[asset]){\r\n            _claim = mapAsset_allocation[asset].sub(mapAsset_claimed[asset]);\r\n        }\r\n\r\n        if(asset == address(0)){\r\n            require(amount == msg.value, \"Must get BNB\");\r\n            payable(burnAddress).call{value:_claim}(\"\");\r\n            payable(msg.sender).call{value:amount.sub(_claim)}(\"\");\r\n        } else {\r\n            iBEP20(asset).transferFrom(msg.sender, burnAddress, _claim);\r\n        }\r\n        \r\n        mapAsset_claimed[asset] = mapAsset_claimed[asset].add(amount);\r\n        uint256 _adjustedClaimRate = getAdjustedClaimRate(asset);\r\n        // sparta = rate * claim / 1e8\r\n        uint256 _sparta = (_adjustedClaimRate.mul(_claim)).div(one);\r\n        _mint(msg.sender, _sparta);\r\n    }\r\n     // Calculate Adjusted Claim Rate\r\n    function getAdjustedClaimRate(address asset) public view returns (uint256 adjustedClaimRate) {\r\n        uint256 _claimRate = mapAsset_claimRate[asset];                           // Get Claim Rate\r\n        if(totalSupply <= _100m){\r\n            // return 100%\r\n            return _claimRate;\r\n        } else {\r\n            // (claim*(200-(totalSupply-_100m)))/200 -> starts 100% then goes to 0 at 300m. \r\n            uint256 _200m = totalCap.sub(_100m);\r\n            return _claimRate.mul(_200m.sub((totalSupply.sub(_100m)))).div(_200m);\r\n        }\r\n    }\r\n    //======================================HELPERS========================================//\r\n    // Helper Functions\r\n\r\n    function assetCount() public view returns (uint256 count){\r\n        return assetArray.length;\r\n    }\r\n    function allAssets() public view returns (address[] memory _allAssets){\r\n        return assetArray;\r\n    }\r\n    function assetsInRange(uint start, uint count) public view returns (address[] memory someAssets){\r\n        if(count > assetCount()){count = assetCount();}\r\n        address[] memory result = new address[](count);\r\n        for (uint i = start; i<start.add(count); i++){\r\n            result[i] = assetArray[i];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getAssetDetails(address asset) public view returns (AssetDetailsStruct memory assetDetails){\r\n        assetDetails.listed = isListed[asset];\r\n        assetDetails.claimRate = mapAsset_claimRate[asset];\r\n        assetDetails.claimed = mapAsset_claimed[asset];\r\n        assetDetails.allocation = mapAsset_allocation[asset];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"DAO\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"DelistedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"DAO\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"ListedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"DAO\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCurve\",\"type\":\"uint256\"}],\"name\":\"NewCurve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"DAO\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewDAO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"DAO\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"NewDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentEra\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextEraTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"}],\"name\":\"NewEra\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"DAO\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newIncentiveAddress\",\"type\":\"address\"}],\"name\":\"NewIncentiveAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100m\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_allAssets\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"assetsInRange\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"someAssets\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDAO\",\"type\":\"address\"}],\"name\":\"changeDAO\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCurve\",\"type\":\"uint256\"}],\"name\":\"changeEmissionCurve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"changeEraDuration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newIncentiveAddress\",\"type\":\"address\"}],\"name\":\"changeIncentiveAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"delistAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionCurve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAdjustedClaimRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"adjustedClaimRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"listed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"internalType\":\"struct Sparta.AssetDetailsStruct\",\"name\":\"assetDetails\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDailyEmission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"listAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapAsset_allocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapAsset_claimRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapAsset_claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEraTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purgeDAO\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purgeDeployer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsPerEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startEmissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopEmissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Sparta", "CompilerVersion": "v0.6.8+commit.0bbfe453", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f1c453259ae38ef9559a5604262e6f8abcfa4c285d98640fb489ddf63f947410"}