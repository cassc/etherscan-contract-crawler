{"SourceCode": "// Copyright (c) 2022 EverRise Pte Ltd. All rights reserved.\r\n// EverRise licenses this file to you under the MIT license.\r\n/*\r\n The EverRise token is the keystone in the EverRise Ecosytem of dApps\r\n and the overaching key that unlocks multi-blockchain unification via\r\n the EverBridge.\r\n\r\n On EverRise token transactions 6% buyback and business development fees are collected:\r\n\r\n * 4% for token Buyback from the market, with bought back tokens directly\r\n      distributed as ve-staking rewards\r\n * 2% for Business Development (Development, Sustainability and Marketing)\r\n  ________                              _______   __\r\n /        |                            /       \\ /  |\r\n $$$$$$$$/__     __  ______    ______  $$$$$$$  |$$/   _______   ______  v3.14159265\r\n $$ |__  /  \\   /  |/      \\  /      \\ $$ |__$$ |/  | /       | /      \\\r\n $$    | $$  \\ /$$//$$$$$$  |/$$$$$$  |$$    $$< $$ |/$$$$$$$/ /$$$$$$  |\r\n $$$$$/   $$  /$$/ $$    $$ |$$ |  $$/ $$$$$$$  |$$ |$$      \\ $$    $$ |\r\n $$ |_____ $$ $$/  $$$$$$$$/ $$ |      $$ |  $$ |$$ | $$$$$$  |$$$$$$$$/\r\n $$       | $$$/   $$       |$$ |      $$ |  $$ |$$ |/     $$/ $$       |\r\n $$$$$$$$/   $/     $$$$$$$/ $$/       $$/   $$/ $$/ $$$$$$$/   $$$$$$$/ Magnum opus\r\n\r\n Learn more about EverRise and the EverRise Ecosystem of dApps and\r\n how our utilities and partners can help protect your investors\r\n and help your project grow: https://everrise.com\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.13;\r\n\r\nerror NotContractAddress();             // 0xd9716e43\r\nerror NoSameBlockSandwichTrades();      // 0x5fe87cb3\r\nerror TransferTooLarge();               // 0x1b97a875\r\nerror AmountLargerThanUnlockedAmount(); // 0x170abf7c\r\nerror TokenNotStarted();                // 0xd87a63e0\r\nerror TokenAlreadyStarted();            // 0xe529091f\r\nerror SandwichTradesAreDisallowed();    // 0xe069ee1d\r\nerror AmountLargerThanAvailable();      // 0xbb296109\r\nerror StakeCanOnlyBeExtended();         // 0x73f7040a\r\nerror NotStakeContractRequesting();     // 0x2ace6531\r\nerror NotEnoughToCoverStakeFee();       // 0x627554ed\r\nerror NotZeroAddress();                 // 0x66385fa3\r\nerror CallerNotApproved();              // 0x4014f1a5\r\nerror InvalidAddress();                 // 0xe6c4247b\r\nerror CallerNotOwner();                 // 0x5cd83192\r\nerror NotZero();                        // 0x0295aa98\r\nerror LiquidityIsLocked();              // 0x6bac637f\r\nerror LiquidityAddOwnerOnly();          // 0x878d6363\r\nerror Overflow();                       // 0x35278d12\r\nerror WalletLocked();                   // 0xd550ed24\r\nerror LockTimeTooLong();                // 0xb660e89a\r\nerror LockTimeTooShort();               // 0x6badcecf\r\nerror NotLocked();                      // 0x1834e265\r\nerror AmountMustBeGreaterThanZero();    // 0x5e85ae73\r\nerror Expired();                        // 0x203d82d8\r\nerror InvalidSignature();               // 0x8baa579f\r\nerror AmountLargerThanAllowance();      // 0x9b144c57\r\nerror AmountOutOfRange();               // 0xc64200e9\r\nerror Unlocked();                       // 0x19aad371\r\nerror FailedEthSend();                  // 0xb5747cc7\r\n\r\n// File: EverRise-v3/Interfaces/IERC2612-Permit.sol\r\n\r\npragma solidity 0.8.13;\r\ninterface IERC2612 {\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n    function nonces(address owner) external view returns (uint256);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: EverRise-v3/Interfaces/IERC173-Ownable.sol\r\n\r\ninterface IOwnable {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function owner() external view returns (address);\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\n// File: EverRise-v3/Abstract/Context.sol\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\n\r\n// File: EverRise-v3/Interfaces/IERC721-Nft.sol\r\n\r\ninterface IERC721 /* is ERC165 */ {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n// File: EverRise-v3/Interfaces/InftEverRise.sol\r\n\r\nstruct StakingDetails {\r\n    uint96 initialTokenAmount;    // Max 79 Bn tokens\r\n    uint96 withdrawnAmount;       // Max 79 Bn tokens\r\n    uint48 depositTime;           // 8 M years\r\n    uint8 numOfMonths;            // Max 256 month period\r\n    uint8 achievementClaimed;\r\n    // 256 bits, 20000 gwei gas\r\n    address stakerAddress;        // 160 bits (96 bits remaining)\r\n    uint32 nftId;                 // Max 4 Bn nfts issued\r\n    uint32 lookupIndex;           // Max 4 Bn active stakes\r\n    uint24 stakerIndex;           // Max 16 M active stakes per wallet\r\n    uint8 isActive;\r\n    // 256 bits, 20000 gwei gas\r\n} // Total 512 bits, 40000 gwei gas\r\n\r\ninterface InftEverRise is IERC721 {\r\n    function voteEscrowedBalance(address account) external view returns (uint256);\r\n    function unclaimedRewardsBalance(address account) external view returns (uint256);\r\n    function totalAmountEscrowed() external view returns (uint256);\r\n    function totalAmountVoteEscrowed() external view returns (uint256);\r\n    function totalRewardsDistributed() external view returns (uint256);\r\n    function totalRewardsUnclaimed() external view returns (uint256);\r\n\r\n    function createRewards(uint256 tAmount) external;\r\n\r\n    function getNftData(uint256 id) external view returns (StakingDetails memory);\r\n    function enterStaking(address fromAddress, uint96 amount, uint8 numOfMonths) external returns (uint32 nftId);\r\n    function leaveStaking(address fromAddress, uint256 id, bool overrideNotClaimed) external returns (uint96 amount);\r\n    function earlyWithdraw(address fromAddress, uint256 id, uint96 amount) external returns (uint32 newNftId, uint96 penaltyAmount);\r\n    function withdraw(address fromAddress, uint256 id, uint96 amount, bool overrideNotClaimed) external returns (uint32 newNftId);\r\n    function bridgeStakeNftOut(address fromAddress, uint256 id) external returns (uint96 amount);\r\n    function bridgeOrAirdropStakeNftIn(address toAddress, uint96 depositAmount, uint8 numOfMonths, uint48 depositTime, uint96 withdrawnAmount, uint96 rewards, bool achievementClaimed) external returns (uint32 nftId);\r\n    function addStaker(address staker, uint256 nftId) external;\r\n    function removeStaker(address staker, uint256 nftId) external;\r\n    function reissueStakeNft(address staker, uint256 oldNftId, uint256 newNftId) external;\r\n    function increaseStake(address staker, uint256 nftId, uint96 amount) external returns (uint32 newNftId, uint96 original, uint8 numOfMonths);\r\n    function splitStake(uint256 id, uint96 amount) external payable returns (uint32 newNftId0, uint32 newNftId1);\r\n    function claimAchievement(address staker, uint256 nftId) external returns (uint32 newNftId);\r\n    function stakeCreateCost() external view returns (uint256);\r\n    function approve(address owner, address _operator, uint256 nftId) external;\r\n}\r\n// File: EverRise-v3/Interfaces/IEverRiseWallet.sol\r\n\r\nstruct ApprovalChecks {\r\n    // Prevent permits being reused (IERC2612)\r\n    uint64 nonce;\r\n    // Allow revoke all spenders/operators approvals in single txn\r\n    uint32 nftCheck;\r\n    uint32 tokenCheck;\r\n    // Allow auto timeout on approvals\r\n    uint16 autoRevokeNftHours;\r\n    uint16 autoRevokeTokenHours;\r\n    // Allow full wallet locking of all transfers\r\n    uint48 unlockTimestamp;\r\n}\r\n\r\nstruct Allowance {\r\n    uint128 tokenAmount;\r\n    uint32 nftCheck;\r\n    uint32 tokenCheck;\r\n    uint48 timestamp;\r\n    uint8 nftApproval;\r\n    uint8 tokenApproval;\r\n}\r\n\r\ninterface IEverRiseWallet {\r\n    event RevokeAllApprovals(address indexed account, bool tokens, bool nfts);\r\n    event SetApprovalAutoTimeout(address indexed account, uint16 tokensHrs, uint16 nftsHrs);\r\n    event LockWallet(address indexed account, address altAccount, uint256 length);\r\n    event LockWalletExtend(address indexed account, uint256 length);\r\n}\r\n// File: EverRise-v3/Interfaces/IUniswap.sol\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint256) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r,bytes32 s) external;\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function nonces(address owner) external view returns (uint256);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint256);\r\n    function price1CumulativeLast() external view returns (uint256);\r\n    function kLast() external view returns (uint256);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function swapETHForExactTokens(uint256 amountOut, address[] calldata path, address to, uint256 deadline) external payable returns (uint256[] memory amounts);\r\n    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable returns (uint256[] memory amounts);\r\n    function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n    function removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external returns (uint256 amountA, uint256 amountB);\r\n    function removeLiquidityETH(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external returns (uint256 amountToken, uint256 amountETH);\r\n    function removeLiquidityWithPermit(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint256 amountA, uint256 amountB);\r\n    function removeLiquidityETHWithPermit(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint256 amountToken, uint256 amountETH);\r\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n    function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n    function swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n    function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountOut);\r\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountIn);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external returns (uint256 amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint256 amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;\r\n}\r\n// File: EverRise-v3/Abstract/ErrorNotZeroAddress.sol\r\n\r\ncontract Ownable is IOwnable, Context {\r\n    address public owner;\r\n\r\n    function _onlyOwner() private view {\r\n        if (owner != _msgSender()) revert CallerNotOwner();\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    // Allow contract ownership and access to contract onlyOwner functions\r\n    // to be locked using EverOwn with control gated by community vote.\r\n    //\r\n    // EverRise ($RISE) stakers become voting members of the\r\n    // decentralized autonomous organization (DAO) that controls access\r\n    // to the token contract via the EverRise Ecosystem dApp EverOwn\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        if (newOwner == address(0)) revert NotZeroAddress();\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n// File: EverRise-v3/Abstract/EverRiseRoles.sol\r\n\r\n\r\nabstract contract EverRiseRoles is Ownable {\r\n    mapping (Role => mapping (address => bool)) public roles;\r\n\r\n    enum Role \r\n    { \r\n        NotValidRole, \r\n        BuyBack, \r\n        NftBridge,\r\n        Limits, \r\n        Liquidity, \r\n        Fees,\r\n        Exchanges,\r\n        CrossChainBuyback,\r\n        Upgrader\r\n    }\r\n\r\n    event ControlAdded(address indexed controller, Role indexed role);\r\n    event ControlRemoved(address indexed controller, Role indexed role);\r\n    \r\n    function _onlyController(Role role) private view {\r\n        if (!roles[role][_msgSender()]) revert CallerNotApproved();\r\n    }\r\n    \r\n    modifier onlyController(Role role) {\r\n        _onlyController(role);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        address deployer = _msgSender();\r\n        ownerRoles(deployer, true);\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) override external onlyOwner {\r\n        if (newOwner == address(0)) revert NotZeroAddress();\r\n\r\n        address previousOwner = owner;\r\n        ownerRoles(previousOwner, false);\r\n        ownerRoles(newOwner, true);\r\n\r\n        owner = newOwner;\r\n\r\n        emit OwnershipTransferred(previousOwner, newOwner);\r\n    }\r\n\r\n    function ownerRoles(address _owner, bool enable) private {\r\n        roles[Role.BuyBack][_owner] = enable;\r\n        roles[Role.NftBridge][_owner] = enable;\r\n        roles[Role.Limits][_owner] = enable;\r\n        roles[Role.Liquidity][_owner] = enable;\r\n        roles[Role.Fees][_owner] = enable;\r\n        roles[Role.Exchanges][_owner] = enable;\r\n        roles[Role.CrossChainBuyback][_owner] = enable;\r\n        roles[Role.Upgrader][_owner] = enable;\r\n    }\r\n\r\n    function addControlRole(address newController, Role role) external onlyOwner\r\n    {\r\n        if (role == Role.NotValidRole) revert NotZero();\r\n        if (newController == address(0)) revert NotZeroAddress();\r\n\r\n        roles[role][newController] = true;\r\n\r\n        emit ControlAdded(newController, role);\r\n    }\r\n\r\n    function removeControlRole(address oldController, Role role) external onlyOwner\r\n    {\r\n        if (role == Role.NotValidRole) revert NotZero();\r\n        if (oldController == address(0)) revert NotZeroAddress();\r\n\r\n        roles[role][oldController] = false;\r\n\r\n        emit ControlRemoved(oldController, role);\r\n    }\r\n}\r\n// File: EverRise-v3/Abstract/EverRiseLib.sol\r\n\r\nlibrary EverRiseAddressNumberLib {\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n        if (value > type(uint96).max) revert Overflow();\r\n        return uint96(value);\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    bytes private constant token0Selector =\r\n        abi.encodeWithSelector(IUniswapV2Pair.token0.selector);\r\n    bytes private constant token1Selector =\r\n        abi.encodeWithSelector(IUniswapV2Pair.token1.selector);\r\n\r\n    function pairTokens(address pair) internal view returns (address token0, address token1) {\r\n        // Do not check if pair is not a contract to avoid warning in txn log\r\n        if (!isContract(pair)) return (address(0), address(0)); \r\n\r\n        return (tokenLookup(pair, token0Selector), tokenLookup(pair, token1Selector));\r\n    }\r\n\r\n    function tokenLookup(address pair, bytes memory selector)\r\n        private\r\n        view\r\n        returns (address)\r\n    {\r\n        (bool success, bytes memory data) = pair.staticcall(selector);\r\n\r\n        if (success && data.length >= 32) {\r\n            return abi.decode(data, (address));\r\n        }\r\n        \r\n        return address(0);\r\n    }\r\n\r\n}\r\n\r\nlibrary EverRiseLib {\r\n    function swapTokensForEth(\r\n        IUniswapV2Router02 uniswapV2Router,\r\n        uint256 tokenAmount\r\n    ) external {\r\n        address tokenAddress = address(this);\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenAddress;\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            tokenAddress, // The contract\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapETHForTokensNoFee(\r\n        IUniswapV2Router02 uniswapV2Router,\r\n        address toAddress, \r\n        uint256 amount\r\n    ) external {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactETHForTokens{\r\n            value: amount\r\n        }(\r\n            0, // accept any amount of Tokens\r\n            path,\r\n            toAddress, // The contract\r\n            block.timestamp\r\n        );\r\n    }\r\n}\r\n// File: EverRise-v3/Interfaces/IEverDrop.sol\r\n\r\ninterface IEverDrop {\r\n    function mirgateV1V2Holder(address holder, uint96 amount) external returns(bool);\r\n    function mirgateV2Staker(address toAddress, uint96 rewards, uint96 depositTokens, uint8 numOfMonths, uint48 depositTime, uint96 withdrawnAmount) external returns(uint256 nftId);\r\n}\r\n// File: EverRise-v3/Interfaces/IERC20-Token.sol\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transferFromWithPermit(address sender, address recipient, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n// File: EverRise-v3/Abstract/EverRiseWallet.sol\r\n\r\nabstract contract EverRiseWallet is Context, IERC2612, IEverRiseWallet, IERC20Metadata {\r\n    using EverRiseAddressNumberLib for address;\r\n\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    // keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\r\n\r\n    mapping (address => ApprovalChecks) internal _approvals;\r\n    mapping (address => mapping (address => Allowance)) public allowances;\r\n    //Lock related fields\r\n    mapping(address => address) private _userUnlocks;\r\n\r\n    function _walletLock(address fromAddress) internal view {\r\n        if (_isWalletLocked(fromAddress)) revert WalletLocked();\r\n    }\r\n\r\n    modifier walletLock(address fromAddress) {\r\n        _walletLock(fromAddress);\r\n        _;\r\n    }\r\n    \r\n    function _isWalletLocked(address fromAddress) internal view returns (bool) {\r\n        return _approvals[fromAddress].unlockTimestamp > block.timestamp;\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\r\n        // Unique DOMAIN_SEPARATOR per user nbased on their current token check\r\n        uint32 tokenCheck = _approvals[_msgSender()].tokenCheck;\r\n\r\n        return keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name())),\r\n                keccak256(abi.encodePacked(tokenCheck)),\r\n                block.chainid,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function name() public virtual view returns (string memory);\r\n\r\n    function nonces(address owner) external view returns (uint256) {\r\n        return _approvals[owner].nonce;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function _setApprovalForAll(address owner, address operator, bool approved) internal {\r\n        if (operator == address(0)) revert NotZeroAddress();\r\n\r\n        Allowance storage _allowance = allowances[owner][operator];\r\n        ApprovalChecks storage _approval = _approvals[owner];\r\n        if (approved) {\r\n\r\n            uint16 autoRevokeNftHours = _approval.autoRevokeNftHours;\r\n            uint48 timestamp = autoRevokeNftHours == 0 ? \r\n                type(uint48).max : // Don't timeout approval\r\n                uint48(block.timestamp) + autoRevokeNftHours * 1 hours; // Timeout after user chosen period\r\n\r\n            _allowance.nftCheck = _approval.nftCheck;\r\n            _allowance.timestamp = timestamp;\r\n            _allowance.nftApproval = 1;\r\n        } else {\r\n            unchecked {\r\n                // nftCheck gets incremented, so set one behind approval\r\n                _allowance.nftCheck = _approval.nftCheck - 1;\r\n            }\r\n            _allowance.nftApproval = 0;\r\n        }\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public {\r\n        if (spender == address(0)) revert NotZeroAddress();\r\n        if (deadline < block.timestamp) revert Expired();\r\n\r\n        ApprovalChecks storage _approval = _approvals[owner];\r\n        uint64 nonce = _approval.nonce;\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR(),\r\n                keccak256(\r\n                    abi.encode(\r\n                        PERMIT_TYPEHASH,\r\n                        owner,\r\n                        spender,\r\n                        value,\r\n                        nonce,\r\n                        deadline\r\n                    )\r\n                )\r\n            )\r\n        );\r\n\r\n        unchecked {\r\n            // Nonces can wrap\r\n            ++nonce;\r\n        }\r\n\r\n        _approval.nonce = nonce;\r\n        \r\n        if (v < 27) {\r\n            v += 27;\r\n        } else if (v > 30) {\r\n            digest = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", digest));\r\n        }\r\n\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        if (recoveredAddress == address(0) || recoveredAddress != owner) revert InvalidSignature();\r\n        \r\n        _approve(owner, spender, value, true);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        return _approve(_msgSender(), spender, amount, true);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        bool extend\r\n    ) internal returns (bool) {\r\n        if (owner == address(0)) revert NotZeroAddress();\r\n        if (spender == address(0)) revert NotZeroAddress();\r\n\r\n        if (amount > type(uint128).max) amount = type(uint128).max;\r\n\r\n        ApprovalChecks storage _approval = _approvals[owner];\r\n        Allowance storage _allowance = allowances[owner][spender];\r\n\r\n        _allowance.tokenAmount = uint128(amount);\r\n        _allowance.tokenCheck = _approval.tokenCheck;\r\n        if (extend) {\r\n            uint48 autoRevokeTokenHours = _approval.autoRevokeTokenHours;\r\n            // Time extention approval\r\n            _allowance.timestamp = autoRevokeTokenHours == 0 ? \r\n                type(uint48).max : // Don't timeout approval\r\n                uint48(block.timestamp) + autoRevokeTokenHours * 1 hours; // Timeout after user chosen period\r\n        }\r\n\r\n        _allowance.tokenApproval = 1;\r\n        \r\n        emit Approval(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        uint32 tokenCheck = _approvals[owner].tokenCheck;\r\n        Allowance storage allowanceSettings = allowances[owner][spender];\r\n\r\n        if (tokenCheck != allowanceSettings.tokenCheck ||\r\n            block.timestamp > allowanceSettings.timestamp ||\r\n            allowanceSettings.tokenApproval != 1)\r\n        {\r\n            return 0;\r\n        }\r\n\r\n        return allowanceSettings.tokenAmount;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 _allowance = allowance(sender, _msgSender());\r\n        if (amount > _allowance) revert AmountLargerThanAllowance();\r\n        unchecked {\r\n            _allowance -= amount;\r\n        }\r\n        _approve(sender, _msgSender(), _allowance, false);\r\n        return true;\r\n    }\r\n\r\n    function transferFromWithPermit(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (bool) {\r\n        permit(sender, _msgSender(), amount, deadline, v, r, s);\r\n\r\n        return transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function lockTokensAndNfts(address altAccount, uint48 length) external walletLock(_msgSender()) {\r\n        if (altAccount == address(0)) revert NotZeroAddress();\r\n        if (length / 1 days > 10 * 365 days) revert LockTimeTooLong();\r\n\r\n        _approvals[_msgSender()].unlockTimestamp = uint48(block.timestamp) + length;\r\n        _userUnlocks[_msgSender()] = altAccount;\r\n\r\n        emit LockWallet(_msgSender(), altAccount, length);\r\n    }\r\n\r\n    function extendLockTokensAndNfts(uint48 length) external {\r\n        if (length / 1 days > 10 * 365 days) revert LockTimeTooLong();\r\n        uint48 currentLock = _approvals[_msgSender()].unlockTimestamp;\r\n\r\n        if (currentLock < block.timestamp) revert Unlocked();\r\n\r\n        uint48 newLock = uint48(block.timestamp) + length;\r\n        if (currentLock > newLock) revert LockTimeTooShort();\r\n        _approvals[_msgSender()].unlockTimestamp = newLock;\r\n\r\n        emit LockWalletExtend(_msgSender(), length);\r\n    }\r\n\r\n    function unlockTokensAndNfts(address actualAccount) external {\r\n        if (_userUnlocks[actualAccount] != _msgSender()) revert CallerNotApproved();\r\n        uint48 currentLock = _approvals[_msgSender()].unlockTimestamp;\r\n\r\n        if (currentLock < block.timestamp) revert Unlocked();\r\n\r\n        _approvals[_msgSender()].unlockTimestamp = 1;\r\n    }\r\n\r\n    function revokeApprovals(bool tokens, bool nfts) external {\r\n        address account = _msgSender();\r\n        ApprovalChecks storage _approval = _approvals[account];\r\n\r\n        unchecked {\r\n            // Nonces can wrap\r\n            if (nfts) {\r\n                ++_approval.nftCheck;\r\n            }\r\n            if (tokens) {\r\n                ++_approval.tokenCheck;\r\n            }\r\n        }\r\n\r\n        emit RevokeAllApprovals(account, tokens, nfts);\r\n    }\r\n\r\n    function setAutoTimeout(uint16 tokensHrs, uint16 nftsHrs) external {\r\n        address account = _msgSender();\r\n        ApprovalChecks storage _approval = _approvals[account];\r\n\r\n        _approval.autoRevokeNftHours = nftsHrs;\r\n        _approval.autoRevokeTokenHours = tokensHrs;\r\n\r\n        emit SetApprovalAutoTimeout(account, tokensHrs, nftsHrs);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function _isApprovedForAll(address account, address operator) internal view returns (bool) {\r\n        uint32 nftCheck = _approvals[account].nftCheck;\r\n        Allowance storage _allowance = allowances[account][operator];\r\n\r\n        if (nftCheck != _allowance.nftCheck ||\r\n            block.timestamp > _allowance.timestamp ||\r\n            _allowance.nftApproval != 1)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual;\r\n}\r\n// File: EverRise-v3/Interfaces/IEverRise.sol\r\n\r\ninterface IEverRise is IERC20Metadata {\r\n    function totalBuyVolume() external view returns (uint256);\r\n    function totalSellVolume() external view returns (uint256);\r\n    function holders() external view returns (uint256);\r\n    function uniswapV2Pair() external view returns (address);\r\n    function transferStake(address fromAddress, address toAddress, uint96 amountToTransfer) external;\r\n    function isWalletLocked(address fromAddress) external view returns (bool);\r\n    function setApprovalForAll(address fromAddress, address operator, bool approved) external;\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n    function isExcludedFromFee(address account) external view returns (bool);\r\n\r\n    function approvals(address account) external view returns (ApprovalChecks memory);\r\n}\r\n// File: EverRise-v3/Abstract/EverRiseConfigurable.sol\r\n\r\nabstract contract EverRiseConfigurable is EverRiseRoles, EverRiseWallet, IEverRise {\r\n    using EverRiseAddressNumberLib for uint256;\r\n\r\n    event BuyBackEnabledUpdated(bool enabled);\r\n    event SwapEnabledUpdated(bool enabled);\r\n\r\n    event ExcludeFromFeeUpdated(address account);\r\n    event IncludeInFeeUpdated(address account);\r\n\r\n    event LiquidityFeeUpdated(uint256 newValue);\r\n    event TransactionCapUpdated(uint256 newValue);\r\n    event MinStakeSizeUpdated(uint256 newValue);\r\n\r\n    event BusinessDevelopmentDivisorUpdated(uint256 newValue);\r\n    event MinTokensBeforeSwapUpdated(uint256 newValue);\r\n    event BuybackMinAvailabilityUpdated(uint256 newValue);\r\n    event MinBuybackAmountUpdated(uint256 newvalue);\r\n    event MaxBuybackAmountUpdated(uint256 newvalue);\r\n\r\n    event BuybackUpperLimitUpdated(uint256 newValue);\r\n    event BuyBackTriggerTokenLimitUpdated(uint256 newValue);\r\n    event BuybackBlocksUpdated(uint256 newValue);\r\n\r\n    event BridgeVaultAddressUpdated(address indexed contractAddress);\r\n    event BurnAddressUpdated(address indexed deadAddress);\r\n    event OffChainBalanceExcluded(bool enable);\r\n    event RouterAddressUpdated(address indexed newAddress);\r\n    event BusinessDevelopmentAddressUpdated(address indexed newAddress);\r\n    event StakingAddressUpdated(address indexed contractAddress);\r\n\r\n    event LiquidityLocked(bool isLocked);\r\n    event AutoBurnEnabled(bool enabled);\r\n    event BurnableTokensZeroed();\r\n\r\n    event ExchangeHotWalletAdded(address indexed exchangeHotWallet);\r\n    event ExchangeHotWalletRemoved(address indexed exchangeHotWallet);\r\n    event BuyBackTriggered();\r\n    event BuyBackCrossChainTriggered();\r\n\r\n    address payable public businessDevelopmentAddress =\r\n        payable(0x24D8DAbebD6c0d5CcC88EC40D95Bf8eB64F0CF9E); // Business Development Address\r\n    address public everBridgeVault;\r\n    address public burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n    mapping (address => bool) internal _isExcludedFromFee;\r\n    mapping (address => bool) internal _exchangeHotWallet;\r\n\r\n    uint8 public constant decimals = 18;\r\n    // Golden supply\r\n    uint96 internal immutable _totalSupply = uint96(7_1_618_033_988 * 10**decimals);\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // Fee and max txn are set by setTradingEnabled\r\n    // to allow upgrading balances to arrange their wallets\r\n    // and stake their assets before trading start\r\n\r\n    uint256 public totalBuyVolume;\r\n    uint256 public totalSellVolume;\r\n    uint256 public transactionCap;\r\n    uint96 public liquidityFee = 6;\r\n\r\n    uint256 public businessDevelopmentDivisor = 2;\r\n\r\n    uint96 internal _minimumTokensBeforeSwap = uint96(5 * 10**6 * 10**decimals);\r\n    uint256 internal _buyBackUpperLimit = 10 * 10**18;\r\n    uint256 internal _buyBackTriggerTokenLimit = 1 * 10**6 * 10**decimals;\r\n    uint256 internal _buyBackMinAvailability = 1 * 10**18; //1 BNB\r\n\r\n    uint256 internal _nextBuybackAmount;\r\n    uint256 internal _latestBuybackBlock;\r\n    uint256 internal _numberOfBlocks = 1000;\r\n    uint256 internal _minBuybackAmount = 1 * 10**18 / (10**1);\r\n    uint256 internal _maxBuybackAmount = 1 * 10**18;\r\n\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n    uint256 constant _FALSE = 1;\r\n    uint256 constant _TRUE = 2;\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to modifiers will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 internal _inSwap = _FALSE;\r\n    uint256 internal _swapEnabled = _FALSE;\r\n    uint256 internal _buyBackEnabled = _FALSE;\r\n    uint256 internal _liquidityLocked = _TRUE;\r\n    uint256 internal _offchainBalanceExcluded = _FALSE;\r\n    uint256 internal _autoBurn = _FALSE;\r\n    uint256 internal _burnableTokens = 1;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    \r\n    InftEverRise public stakeToken;\r\n\r\n    function swapEnabled() external view returns (bool) {\r\n        return _swapEnabled == _TRUE;\r\n    }\r\n    function offchainBalanceExcluded() external view returns (bool) {\r\n        return _offchainBalanceExcluded == _TRUE;\r\n    }\r\n    function buyBackEnabled() external view returns (bool) {\r\n        return _buyBackEnabled == _TRUE;\r\n    }\r\n    function liquidityLocked() external view returns (bool) {\r\n        return _liquidityLocked == _TRUE;\r\n    }\r\n    function autoBurn() external view returns (bool) {\r\n        return _autoBurn == _TRUE;\r\n    }\r\n\r\n    function setBurnableTokensZero() external onlyController(Role.Liquidity)  {\r\n        // set to 1 rather than zero to save on gas\r\n        _burnableTokens = 1;\r\n        emit BurnableTokensZeroed();\r\n    }\r\n    function setBurnAddress(address _burnAddress) external onlyController(Role.Liquidity)  {\r\n        // May be bridgable burn (so only send to actual burn address on one chain)\r\n        burnAddress = _burnAddress;\r\n        emit BurnAddressUpdated(_burnAddress);\r\n    }\r\n\r\n    function setOffchainBalanceExcluded(bool _enabled) external onlyOwner {\r\n        _offchainBalanceExcluded = _enabled ? _TRUE : _FALSE;\r\n        emit OffChainBalanceExcluded(_enabled);\r\n    }\r\n\r\n    function setLiquidityLock(bool _enabled) public onlyController(Role.Liquidity) {\r\n        _liquidityLocked = _enabled ? _TRUE : _FALSE;\r\n        emit LiquidityLocked(_enabled);\r\n    }\r\n\r\n    function setAutoBurn(bool _enabled) external onlyController(Role.Liquidity) {\r\n        _autoBurn = _enabled ? _TRUE : _FALSE;\r\n        emit AutoBurnEnabled(_enabled);\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyController(Role.Fees) {\r\n        if (_isExcludedFromFee[account]) revert InvalidAddress();\r\n        \r\n        _isExcludedFromFee[account] = true;\r\n        emit ExcludeFromFeeUpdated(account);\r\n    }\r\n\r\n    function addExchangeHotWallet(address account) external onlyController(Role.Exchanges) {\r\n        _exchangeHotWallet[account] = true;\r\n        emit ExchangeHotWalletAdded(account);\r\n    }\r\n\r\n    function removeExchangeHotWallet(address account) external onlyController(Role.Exchanges) {\r\n        _exchangeHotWallet[account] = false;\r\n        emit ExchangeHotWalletRemoved(account);\r\n    }\r\n\r\n    function isExchangeHotWallet(address account) public view returns(bool) {\r\n        return _exchangeHotWallet[account];\r\n    }\r\n\r\n    function includeInFee(address account) external onlyController(Role.Fees) {\r\n        if (!_isExcludedFromFee[account]) revert InvalidAddress();\r\n\r\n        _isExcludedFromFee[account] = false;\r\n        emit IncludeInFeeUpdated(account);\r\n    }\r\n\r\n    function setTransactionCap(uint256 txAmount) external onlyController(Role.Limits) {\r\n        // Never under 0.001%\r\n        if (txAmount < _totalSupply / 100_000) revert AmountOutOfRange();\r\n\r\n        transactionCap = txAmount;\r\n        emit TransactionCapUpdated(txAmount);\r\n    }\r\n\r\n    function setNumberOfBlocksForBuyback(uint256 value) external onlyController(Role.BuyBack){\r\n        if (value < 100 || value > 1_000_000) revert AmountOutOfRange();\r\n        _numberOfBlocks = value;\r\n        emit BuybackBlocksUpdated(value);\r\n    }\r\n\r\n    function setBusinessDevelopmentDivisor(uint256 divisor) external onlyController(Role.Liquidity) {\r\n        if (divisor > liquidityFee) revert AmountOutOfRange();\r\n\r\n        businessDevelopmentDivisor = divisor;\r\n        emit BusinessDevelopmentDivisorUpdated(divisor);\r\n    }\r\n\r\n    function setNumTokensSellToAddToLiquidity(uint96 minimumTokensBeforeSwap)\r\n        external\r\n        onlyController(Role.Liquidity)\r\n    {\r\n        if (minimumTokensBeforeSwap > 1_000_000_000) revert AmountOutOfRange();\r\n\r\n        _minimumTokensBeforeSwap = uint96(minimumTokensBeforeSwap * (10**uint256(decimals)));\r\n        emit MinTokensBeforeSwapUpdated(minimumTokensBeforeSwap);\r\n    }\r\n\r\n    function setBuybackUpperLimit(uint256 buyBackLimit, uint256 numOfDecimals)\r\n        external\r\n        onlyController(Role.BuyBack)\r\n    {\r\n        // Catch typos, if decimals are pre-added\r\n        if (buyBackLimit > 1_000_000_000) revert AmountOutOfRange();\r\n\r\n        _buyBackUpperLimit = buyBackLimit * (10**18) / (10**numOfDecimals);\r\n        emit BuybackUpperLimitUpdated(_buyBackUpperLimit);\r\n    }\r\n\r\n    function setMinBuybackAmount(uint256 minAmount, uint256 numOfDecimals)\r\n        external\r\n        onlyController(Role.BuyBack)\r\n    {\r\n        // Catch typos, if decimals are pre-added\r\n        if (minAmount > 1_000) revert AmountOutOfRange();\r\n\r\n        _minBuybackAmount = minAmount * (10**18) / (10**numOfDecimals);\r\n        emit MinBuybackAmountUpdated(minAmount);\r\n    }\r\n\r\n    function setMaxBuybackAmountUpdated(uint256 maxAmount, uint256 numOfDecimals)\r\n        external\r\n        onlyController(Role.BuyBack)\r\n    {\r\n        // Catch typos, if decimals are pre-added\r\n        if (maxAmount > 1_000_000) revert AmountOutOfRange();\r\n\r\n        _maxBuybackAmount = maxAmount * (10**18) / (10**numOfDecimals);\r\n        emit MaxBuybackAmountUpdated(maxAmount);\r\n    }\r\n\r\n    function setBuybackTriggerTokenLimit(uint256 buyBackTriggerLimit)\r\n        external\r\n        onlyController(Role.BuyBack)\r\n    {\r\n        if (buyBackTriggerLimit > 100_000_000) revert AmountOutOfRange();\r\n        \r\n        _buyBackTriggerTokenLimit = buyBackTriggerLimit * (10**uint256(decimals));\r\n        emit BuyBackTriggerTokenLimitUpdated(_buyBackTriggerTokenLimit);\r\n    }\r\n\r\n    function setBuybackMinAvailability(uint256 amount, uint256 numOfDecimals)\r\n        external\r\n        onlyController(Role.BuyBack)\r\n    {\r\n        if (amount > 100_000) revert AmountOutOfRange();\r\n\r\n        _buyBackMinAvailability = amount * (10**18) / (10**numOfDecimals);\r\n        emit BuybackMinAvailabilityUpdated(_buyBackMinAvailability);\r\n    }\r\n\r\n    function setBuyBackEnabled(bool _enabled) external onlyController(Role.BuyBack) {\r\n        _buyBackEnabled = _enabled ? _TRUE : _FALSE;\r\n        emit BuyBackEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setBusinessDevelopmentAddress(address newAddress)\r\n        external\r\n        onlyController(Role.Liquidity)\r\n    {\r\n        if (newAddress == address(0)) revert NotZeroAddress();\r\n\r\n        businessDevelopmentAddress = payable(newAddress);\r\n        emit BusinessDevelopmentAddressUpdated(newAddress);\r\n    }\r\n\r\n    function setEverBridgeVaultAddress(address contractAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        \r\n        excludeFromFee(contractAddress);\r\n        \r\n        everBridgeVault = contractAddress;\r\n        emit BridgeVaultAddressUpdated(contractAddress);\r\n    }\r\n\r\n    function setStakingAddress(address contractAddress) external onlyOwner {\r\n        stakeToken = InftEverRise(contractAddress);\r\n\r\n        excludeFromFee(contractAddress);\r\n\r\n        emit StakingAddressUpdated(contractAddress);\r\n    }\r\n\r\n    function setRouterAddress(address newAddress) external onlyController(Role.Liquidity) {\r\n        if (newAddress == address(0)) revert NotZeroAddress();\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(newAddress); \r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(\r\n            address(this),\r\n            _uniswapV2Router.WETH()\r\n        );\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        emit RouterAddressUpdated(newAddress);\r\n    }\r\n\r\n    function isExcludedFromFee(address account) external view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function setSwapEnabled(bool _enabled) external onlyOwner {\r\n        _swapEnabled = _enabled ? _TRUE : _FALSE;\r\n        emit SwapEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function hasTokenStarted() public view returns (bool) {\r\n        return transactionCap > 0;\r\n    }\r\n\r\n    function setLiquidityFeePercent(uint96 liquidityFeeRate) external onlyController(Role.Liquidity) {\r\n        if (liquidityFeeRate > 10) revert AmountOutOfRange();\r\n        liquidityFee = liquidityFeeRate;\r\n        emit LiquidityFeeUpdated(liquidityFeeRate);\r\n    }\r\n}\r\n// File: EverRise-v3/EverRise.sol\r\n\r\n// Copyright (c) 2022 EverRise Pte Ltd. All rights reserved.\r\n// EverRise licenses this file to you under the MIT license.\r\n/*\r\n The EverRise token is the keystone in the EverRise Ecosytem of dApps\r\n and the overaching key that unlocks multi-blockchain unification via\r\n the EverBridge.\r\n\r\n On EverRise token txns 6% buyback and business development fees are collected\r\n * 4% for token Buyback from the market, \r\n     with bought back tokens directly distributed as ve-staking rewards\r\n * 2% for Business Development (Development, Sustainability and Marketing)\r\n\r\n  ________                              _______   __\r\n /        |                            /       \\ /  |\r\n $$$$$$$$/__     __  ______    ______  $$$$$$$  |$$/   _______   ______  v3.14159265\r\n $$ |__  /  \\   /  |/      \\  /      \\ $$ |__$$ |/  | /       | /      \\\r\n $$    | $$  \\ /$$//$$$$$$  |/$$$$$$  |$$    $$< $$ |/$$$$$$$/ /$$$$$$  |\r\n $$$$$/   $$  /$$/ $$    $$ |$$ |  $$/ $$$$$$$  |$$ |$$      \\ $$    $$ |\r\n $$ |_____ $$ $$/  $$$$$$$$/ $$ |      $$ |  $$ |$$ | $$$$$$  |$$$$$$$$/\r\n $$       | $$$/   $$       |$$ |      $$ |  $$ |$$ |/     $$/ $$       |\r\n $$$$$$$$/   $/     $$$$$$$/ $$/       $$/   $$/ $$/ $$$$$$$/   $$$$$$$/\r\n\r\n Learn more about EverRise and the EverRise Ecosystem of dApps and\r\n how our utilities and partners can help protect your investors\r\n and help your project grow: https://www.everrise.com\r\n*/\r\n\r\n// 2^96 is 79 * 10**10 * 10**18\r\nstruct TransferDetails {\r\n    uint96 balance0;\r\n    address to;\r\n\r\n    uint96 balance1;\r\n    address origin;\r\n\r\n    uint32 blockNumber;\r\n}\r\n\r\ncontract EverRise is EverRiseConfigurable, IEverDrop {\r\n    using EverRiseAddressNumberLib for address;\r\n    using EverRiseAddressNumberLib for uint256;\r\n\r\n    event BuybackTokensWithETH(uint256 amountIn, uint256 amountOut);\r\n    event ConvertTokensForETH(uint256 amountIn, uint256 amountOut);\r\n\r\n    event TokenStarted();\r\n    event RewardStakers(uint256 amount);\r\n    event AutoBurn(uint256 amount);\r\n\r\n    event StakingIncreased(address indexed from, uint256 amount, uint8 numberOfmonths);\r\n    event StakingDecreased(address indexed from, uint256 amount);\r\n\r\n    event RiseBridgedIn(address indexed contractAddress, address indexed to, uint256 amount);\r\n    event RiseBridgedOut(address indexed contractAddress, address indexed from, uint256 amount);\r\n    event NftBridgedIn(address indexed contractAddress, address indexed operator, address indexed to, uint256 id, uint256 value);\r\n    event NftBridgedOut(address indexed contractAddress, address indexed operator, address indexed from, uint256 id, uint256 value);\r\n    event TransferExternalTokens(address indexed tokenAddress, address indexed to, uint256 count);\r\n\r\n    // Holder count\r\n    uint256 private _holders;\r\n    // Balance and locked (staked) balance\r\n    mapping (address => uint96) private _tOwned;\r\n    mapping (address => uint96) private _amountLocked;\r\n\r\n    // Tracking for protections against sandwich trades\r\n    // and rogue LP pairs\r\n    mapping (address => uint256) private _lastTrade;\r\n    TransferDetails private _lastTransfer;\r\n\r\n    string public constant symbol = \"RISE\";\r\n    function name() public override (EverRiseWallet, IERC20Metadata) pure returns (string memory) {\r\n        return \"EverRise\";\r\n    }\r\n\r\n    modifier lockTheSwap() {\r\n        require(_inSwap != _TRUE);\r\n        _inSwap = _TRUE;\r\n        _;\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _inSwap = _FALSE;\r\n    }\r\n\r\n    constructor(address routerAddress) {\r\n        if (routerAddress == address(0)) revert NotZeroAddress();\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); //Pancakeswap router mainnet - BSC\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1); //Testnet\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xa5e0829caced8ffdd4de3c43696c57f7d7a678ff); //Quickswap V2 router mainnet - Polygon\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506); //Sushiswap router mainnet - Polygon\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //Uniswap V2 router mainnet - ETH\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n  \r\n        _isExcludedFromFee[owner] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        // Put all tokens in contract so we can airdrop\r\n        _tOwned[address(this)] = _totalSupply;\r\n        emit Transfer(address(0), address(this), _totalSupply);\r\n\r\n        _holders = 1;\r\n    }\r\n\r\n    // Function to receive ETH when msg.data is be empty\r\n    receive() external payable {}\r\n\r\n    // Balances\r\n    function isWalletLocked(address fromAddress) override (IEverRise) external view returns (bool) {\r\n        return _isWalletLocked(fromAddress);\r\n    }\r\n\r\n    function holders() external view returns (uint256) {\r\n        return _holders;\r\n    }\r\n\r\n    function getAmountLocked(address account) external view returns (uint256) {\r\n        return _amountLocked[account];\r\n    }\r\n\r\n    function _balanceOf(address account) private view returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function bridgeVaultLockedBalance() external view returns (uint256) {\r\n        return _balanceOf(everBridgeVault);\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        // Bridge vault balances are on other chains\r\n        if (account == everBridgeVault && _offchainBalanceExcluded == _TRUE) return 0;\r\n\r\n        uint256 balance = _balanceOf(account);\r\n        if (_inSwap != _TRUE &&\r\n            _lastTransfer.blockNumber == uint32(block.number) &&\r\n            account.isContract() &&\r\n            !_isExcludedFromFee[account]\r\n        ) {\r\n            // Balance being checked is same address as last to in _transfer\r\n            // check if likely same txn and a Liquidity Add\r\n            _validateIfLiquidityChange(account, uint112(balance));\r\n        }\r\n\r\n        return balance;\r\n    }\r\n\r\n    // Transfers\r\n\r\n    function approvals(address account) external view returns (ApprovalChecks memory) {\r\n        return _approvals[account]; \r\n    }\r\n    \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override walletLock(from) {\r\n        if (from == address(0) || to == address(0)) revert NotZeroAddress();\r\n        if (amount == 0) revert AmountMustBeGreaterThanZero();\r\n        if (amount > (_balanceOf(from) - _amountLocked[from])) revert AmountLargerThanUnlockedAmount();\r\n\r\n        bool isIgnoredAddress = _isExcludedFromFee[from] || _isExcludedFromFee[to];\r\n\r\n        bool notInSwap = _inSwap != _TRUE;\r\n        bool hasStarted = hasTokenStarted();\r\n        address pair = uniswapV2Pair;\r\n        bool isSell = to == pair;\r\n        bool isBuy = from == pair;\r\n        if (!isIgnoredAddress) {\r\n            if (to == address(this)) revert NotContractAddress();\r\n            if (amount > transactionCap) revert TransferTooLarge();\r\n            if (!hasStarted) revert TokenNotStarted();\r\n            if (notInSwap) {\r\n                // Disallow multiple same source trades in same block\r\n                if ((isSell || isBuy) && _lastTrade[tx.origin] == block.number) {\r\n                    revert SandwichTradesAreDisallowed();\r\n                }\r\n\r\n                _lastTrade[tx.origin] = block.number;\r\n\r\n                // Following block is for the contract to convert the tokens to ETH and do the buy back\r\n                if (isSell && _swapEnabled == _TRUE) {\r\n                    uint96 swapTokens = _minimumTokensBeforeSwap;\r\n                    if (_balanceOf(address(this)) > swapTokens) {\r\n                        // Greater than to always leave at least 1 token in contract\r\n                        // reducing gas from switching from 0 to not-zero and not tracking\r\n                        // token in holder count changes.\r\n                        _convertTokens(swapTokens);\r\n                    }\r\n\r\n                    if (_buyback()) {\r\n                        emit BuyBackTriggered();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (hasStarted) {\r\n            if (isBuy) {\r\n                totalBuyVolume += amount;\r\n            } else if (isSell) { \r\n                totalSellVolume += amount;\r\n                if (amount > _buyBackTriggerTokenLimit) {\r\n                    // Start at 1% of balance\r\n                    uint256 amountToAdd = address(this).balance / 100;\r\n                    uint256 maxToAdd = _buyBackUpperLimit / 100;\r\n                    // Don't add more than the 1% of the upper limit\r\n                    if (amountToAdd > maxToAdd) amountToAdd = maxToAdd;\r\n                    // Add to next buyback\r\n                    _nextBuybackAmount += amountToAdd;\r\n                }\r\n            }\r\n        }\r\n\r\n        // If any account belongs to _isExcludedFromFee account then remove the fee\r\n        bool takeFee = true;\r\n        if (isIgnoredAddress || isExchangeHotWallet(to)) {\r\n            takeFee = false;\r\n        }\r\n        \r\n        // For safety Liquidity Adds should only be done by an owner, \r\n        // and transfers to and from EverRise Ecosystem contracts\r\n        // are not considered LP adds\r\n        if (notInSwap) {\r\n            if (isIgnoredAddress) {\r\n                // Just set blocknumber to 1 to clear, to save gas on changing back\r\n                _lastTransfer.blockNumber = 1;\r\n            } else {\r\n                // Not in a swap during a LP add, so record the transfer details\r\n                _recordPotentialLiquidityChangeTransaction(to);\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, uint96(amount), takeFee);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint96 amount,\r\n        bool takeFee\r\n    ) private {\r\n        uint96 fromAfter = _tOwned[sender] - amount;\r\n        _tOwned[sender] = fromAfter;\r\n\r\n        uint96 tLiquidity = takeFee ? amount * liquidityFee / (10**2) : 0;\r\n        uint96 tTransferAmount = amount - tLiquidity;\r\n\r\n        uint96 toBefore = _tOwned[recipient]; \r\n        _tOwned[recipient] = toBefore + tTransferAmount;\r\n\r\n        if (tLiquidity > 0) {\r\n            // Skip writing to save gas if unchanged\r\n            _tOwned[address(this)] += tLiquidity;\r\n        }\r\n\r\n        _trackHolders(fromAfter, toBefore);\r\n        if (sender == everBridgeVault) {\r\n            emit RiseBridgedIn(everBridgeVault, recipient, amount);\r\n        } else if (recipient == everBridgeVault) {\r\n            emit RiseBridgedOut(everBridgeVault, sender, amount);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _lockedTokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint96 amount\r\n    ) private {\r\n        // Do the locked token transfer\r\n        _decreaseLockedAmount(sender, amount, false);\r\n        uint96 fromAfter = _tOwned[sender] - amount;\r\n        _tOwned[sender] = fromAfter;\r\n        \r\n        uint96 toBefore = _tOwned[recipient]; \r\n        _tOwned[recipient] = toBefore + amount;\r\n        _increaseLockedAmount(recipient, amount);\r\n\r\n        _trackHolders(fromAfter, toBefore);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _trackHolders(uint96 fromAfter, uint96 toBefore) private {\r\n        uint256 startHolderCount = _holders;\r\n        uint256 holderCount = startHolderCount;\r\n        \r\n        if (fromAfter == 0) --holderCount;\r\n        if (toBefore == 0) ++holderCount;\r\n\r\n        if (startHolderCount != holderCount) {\r\n            // Skip writing to save gas if unchanged\r\n            _holders = holderCount;\r\n        }\r\n    }\r\n\r\n    // Buyback\r\n    function crossChainBuyback() external onlyController(Role.CrossChainBuyback) {\r\n        if (_buyback()) {\r\n            emit BuyBackCrossChainTriggered();\r\n        }\r\n\r\n        // Is autoburn on?\r\n        if (_autoBurn == _TRUE) {\r\n            uint96 swapTokens = _minimumTokensBeforeSwap;\r\n            // Have we collected enough tokens to burn?\r\n            if (_burnableTokens > swapTokens) {\r\n                unchecked {\r\n                    // Just confirmed is valid above\r\n                    _burnableTokens -= swapTokens;\r\n                }\r\n                // Burn the tokens\r\n                _tokenTransfer(uniswapV2Pair, burnAddress, swapTokens, false);\r\n                // Reset LP balances\r\n                IUniswapV2Pair(uniswapV2Pair).sync();\r\n\r\n                emit AutoBurn(swapTokens);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _buyback() private returns (bool boughtBack) {\r\n        if (_buyBackEnabled == _TRUE) {\r\n            uint256 balance = address(this).balance;\r\n            if (balance > _buyBackMinAvailability &&\r\n                block.number > _latestBuybackBlock + _numberOfBlocks \r\n            ) {\r\n                // Max of 10% of balance\r\n                balance /= 10;\r\n                uint256 buybackAmount = _nextBuybackAmount;\r\n                if (buybackAmount > _maxBuybackAmount) {\r\n                    buybackAmount = _maxBuybackAmount;\r\n                }\r\n                if (buybackAmount > balance) {\r\n                    // Don't try to buyback more than is available.\r\n                    buybackAmount = balance;\r\n                }\r\n\r\n                if (buybackAmount > 0) {\r\n                    boughtBack = _buyBackTokens(buybackAmount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _buyBackTokens(uint256 amount) private lockTheSwap returns (bool boughtBack) {\r\n        _nextBuybackAmount = _minBuybackAmount; // reset the next buyback amount, set non-zero to save on future gas\r\n\r\n        if (amount > 0) {\r\n            uint256 tokensBefore = _balanceOf(address(stakeToken));\r\n            EverRiseLib.swapETHForTokensNoFee(uniswapV2Router, address(stakeToken), amount);\r\n            // Don't trust the return value; calculate it ourselves\r\n            uint256 tokensReceived = _balanceOf(address(stakeToken)) - tokensBefore;\r\n\r\n            emit BuybackTokensWithETH(amount, tokensReceived);\r\n            _latestBuybackBlock = block.number;\r\n            //Distribute the rewards to the staking pool\r\n            _distributeStakingRewards(tokensReceived);\r\n\r\n            boughtBack = true;\r\n        }\r\n    }\r\n    \r\n    // Non-EverSwap LP conversion\r\n    function _convertTokens(uint256 tokenAmount) private lockTheSwap {\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount, true);\r\n        // Mark the tokens as available to burn\r\n        _burnableTokens += uint96(tokenAmount);\r\n\r\n        EverRiseLib.swapTokensForEth(uniswapV2Router, tokenAmount);\r\n\r\n        uint256 transferredETHBalance = address(this).balance - initialETHBalance;\r\n        emit ConvertTokensForETH(tokenAmount, transferredETHBalance);\r\n\r\n        // Send split to Business Development address\r\n        transferredETHBalance = transferredETHBalance * businessDevelopmentDivisor / liquidityFee;\r\n        sendEthViaCall(businessDevelopmentAddress, transferredETHBalance);\r\n    }\r\n\r\n    // Staking\r\n\r\n    function _distributeStakingRewards(uint256 amount) private {\r\n        if (amount > 0) {\r\n            stakeToken.createRewards(amount);\r\n\r\n            emit RewardStakers(amount);\r\n        }\r\n    }\r\n    \r\n    function transferStake(address fromAddress, address toAddress, uint96 amountToTransfer) external walletLock(fromAddress) {\r\n        if (_msgSender() != address(stakeToken)) revert NotStakeContractRequesting();\r\n\r\n        _lockedTokenTransfer(fromAddress, toAddress, amountToTransfer);\r\n    }\r\n\r\n    function enterStaking(uint96 amount, uint8 numOfMonths) external payable walletLock(_msgSender()) {\r\n        address staker = _msgSender();\r\n        if (msg.value < stakeToken.stakeCreateCost()) revert NotEnoughToCoverStakeFee();\r\n\r\n        uint32 nftId = stakeToken.enterStaking(staker, amount, numOfMonths);\r\n\r\n        _lockAndAddStaker(staker, amount, numOfMonths, nftId);\r\n    }\r\n\r\n    function increaseStake(uint256 nftId, uint96 amount)\r\n        external walletLock(_msgSender())\r\n    {\r\n        address staker = _msgSender();\r\n        _increaseLockedAmount(staker, amount);\r\n\r\n        uint8 numOfMonths;\r\n        uint96 original;\r\n        (, original, numOfMonths) = stakeToken.increaseStake(staker, nftId, amount);\r\n\r\n        emit StakingDecreased(staker, original);\r\n        emit StakingIncreased(staker, original + amount, numOfMonths);\r\n    }\r\n\r\n    function _increaseLockedAmount(address staker, uint96 amount) private {\r\n        uint96 lockedAmount = _amountLocked[staker] + amount;\r\n        if (lockedAmount > _balanceOf(staker)) revert AmountLargerThanUnlockedAmount();\r\n        _amountLocked[staker] = lockedAmount;\r\n        \r\n        emit Transfer(staker, staker, amount);\r\n    }\r\n\r\n    function _decreaseLockedAmount(address staker, uint96 amount, bool emitEvent) private {\r\n        _amountLocked[staker] -= amount;\r\n        if (emitEvent) {\r\n            emit StakingDecreased(staker, amount);\r\n            emit Transfer(staker, staker, amount);\r\n        }\r\n    }\r\n\r\n    function leaveStaking(uint256 nftId, bool overrideNotClaimed) external walletLock(_msgSender()) {\r\n        address staker = _msgSender();\r\n\r\n        uint96 amount = stakeToken.leaveStaking(staker, nftId, overrideNotClaimed);\r\n        _decreaseLockedAmount(staker, amount, true);\r\n        stakeToken.removeStaker(staker, nftId);\r\n    }\r\n\r\n    function earlyWithdraw(uint256 nftId, uint96 amount) external walletLock(_msgSender()) {\r\n        address staker = _msgSender();\r\n\r\n        (uint32 newNftId, uint96 penaltyAmount) = stakeToken.earlyWithdraw(staker, nftId, amount);\r\n        _decreaseLockedAmount(staker, amount, true);\r\n        \r\n        if (penaltyAmount > 0) {\r\n            _tokenTransfer(staker, address(stakeToken), penaltyAmount, false);\r\n            _distributeStakingRewards(penaltyAmount);\r\n        }\r\n\r\n        stakeToken.reissueStakeNft(staker, nftId, newNftId);\r\n    }\r\n\r\n    function withdraw(uint256 nftId, uint96 amount, bool overrideNotClaimed) external walletLock(_msgSender()) {\r\n        address staker = _msgSender();\r\n\r\n        (uint32 newNftId) = stakeToken.withdraw(staker, nftId, amount, overrideNotClaimed);\r\n        if (amount > 0) {\r\n            _decreaseLockedAmount(staker, amount, true);\r\n        }\r\n        if (nftId != newNftId && newNftId != 0) {\r\n            stakeToken.reissueStakeNft(staker, nftId, newNftId);\r\n        }\r\n    }\r\n\r\n    function setApprovalForAll(address fromAddress, address operator, bool approved) external {\r\n        if (_msgSender() != address(stakeToken)) revert NotStakeContractRequesting();\r\n\r\n        _setApprovalForAll(fromAddress, operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address account, address operator) external view returns (bool) {\r\n        if (_msgSender() != address(stakeToken)) revert NotStakeContractRequesting();\r\n\r\n        return _isApprovedForAll(account, operator);\r\n    }\r\n    \r\n    // Nft bridging\r\n    function approveNFTAndTokens(address bridgeAddress, uint256 nftId, uint256 tokenAmount) external {\r\n        if (!roles[Role.NftBridge][bridgeAddress]) revert NotContractAddress();\r\n\r\n        stakeToken.approve(_msgSender(), bridgeAddress, nftId);\r\n        _approve(_msgSender(), bridgeAddress, tokenAmount, true);\r\n    }\r\n\r\n    function bridgeStakeNftOut(address fromAddress, uint256 nftId) external onlyController(Role.NftBridge) {\r\n        if (stakeToken.getApproved(nftId) != _msgSender() && !stakeToken.isApprovedForAll(_msgSender(), fromAddress)) {\r\n            revert CallerNotApproved();\r\n        }\r\n        \r\n        _walletLock(fromAddress);\r\n\r\n        uint96 amount = stakeToken.bridgeStakeNftOut(fromAddress, nftId);\r\n        _decreaseLockedAmount(fromAddress, amount, true);\r\n        // Send tokens to vault\r\n        _tokenTransfer(fromAddress, everBridgeVault, amount, false);\r\n\r\n        stakeToken.removeStaker(fromAddress, nftId);\r\n        emit NftBridgedOut(address(this), everBridgeVault, fromAddress, nftId, amount);\r\n    }\r\n\r\n    function bridgeStakeNftIn(address toAddress, uint96 depositTokens, uint8 numOfMonths, uint48 depositTime, uint96 withdrawnAmount, bool achievementClaimed) external onlyController(Role.NftBridge) returns (uint256 nftId)\r\n    {\r\n        nftId = stakeToken.bridgeOrAirdropStakeNftIn(toAddress, depositTokens, numOfMonths, depositTime, withdrawnAmount, 0, achievementClaimed);\r\n\r\n        uint96 amount = depositTokens - withdrawnAmount;\r\n        //Send the tokens from Vault\r\n        _tokenTransfer(everBridgeVault, toAddress, amount, false);\r\n\r\n        _lockAndAddStaker(toAddress, amount, numOfMonths, nftId);\r\n\r\n        emit NftBridgedIn(address(this), everBridgeVault, toAddress, nftId, amount);\r\n    }\r\n\r\n    function _lockAndAddStaker(address toAddress, uint96 amount, uint8 numOfMonths, uint256 nftId) private {\r\n        _increaseLockedAmount(toAddress, amount);\r\n        stakeToken.addStaker(toAddress, nftId);\r\n\r\n        emit StakingIncreased(toAddress, amount, numOfMonths);\r\n    }\r\n\r\n    // Liquidity\r\n\r\n    function _recordPotentialLiquidityChangeTransaction(address to) private {\r\n        uint96 balance0 = uint96(_balanceOf(to));\r\n        (address token0, address token1) = to.pairTokens();\r\n        if (token1 == address(this)) {\r\n            // Switch token so token1 is always other side of pair\r\n            token1 = token0;\r\n        } \r\n        \r\n        if (token1 == address(0)) {\r\n            // Not LP pair, just set blocknumber to 1 to clear, to save gas on changing back\r\n            _lastTransfer.blockNumber = 1;\r\n            return;\r\n        }\r\n        \r\n        uint96 balance1 = uint96(IERC20(token1).balanceOf(to));\r\n\r\n        _lastTransfer = TransferDetails({\r\n            balance0: balance0,\r\n            to: to,\r\n            balance1: balance1,\r\n            origin: tx.origin,\r\n            blockNumber: uint32(block.number)\r\n        });\r\n    }\r\n\r\n    // account must be recorded in _transfer and same block\r\n    function _validateIfLiquidityChange(address account, uint112 balance0) private view {\r\n        if (_lastTransfer.origin != tx.origin ||\r\n            account != _lastTransfer.to) {\r\n            // Not same txn, or not LP addETH\r\n            return;\r\n        }\r\n\r\n        // Check if LP change using the data recorded in _transfer\r\n        // May be same transaction as _transfer\r\n        (address token0, address token1) = account.pairTokens();\r\n        // Not LP pair\r\n        if (token1 == address(0)) return;\r\n        bool switchTokens;\r\n        if (token1 == address(this)) {\r\n            // Switch token so token1 is always other side of pair\r\n            token1 = token0;\r\n            switchTokens = true;\r\n        } else if (token0 != address(this)) {\r\n            // Not LP for this token\r\n            return;\r\n        }\r\n\r\n        uint256 balance1 = IERC20(token1).balanceOf(account);\r\n        // Test to see if this tx is part of a liquidity add\r\n        if (balance0 > _lastTransfer.balance0 &&\r\n            balance1 > _lastTransfer.balance1) {\r\n            // Both pair balances have increased, this is a Liquidty Add\r\n            // Will block addETH and where other token address sorts higher\r\n            revert LiquidityAddOwnerOnly();\r\n        }\r\n    }\r\n\r\n    // Admin\r\n\r\n    function upgradeComplete() external onlyOwner {\r\n        // Can only be called before start\r\n        if (hasTokenStarted()) revert TokenAlreadyStarted();\r\n\r\n        // We will keep one token always in contract\r\n        // so we don't need to track it in holder changes\r\n        _tokenTransfer(address(this), _msgSender(), _tOwned[address(this)] - 1, false);\r\n\r\n        _buyBackEnabled = _TRUE;\r\n        _swapEnabled = _TRUE;\r\n        transactionCap = _totalSupply / 1000; // Max txn 0.1% of supply\r\n\r\n        emit TokenStarted();\r\n    }\r\n\r\n    function sendEthViaCall(address payable to, uint256 amount) private {\r\n        (bool sent, ) = to.call{value: amount}(\"\");\r\n        if (!sent) revert FailedEthSend();\r\n    }\r\n\r\n    function transferBalance(uint256 amount) external onlyOwner {\r\n        sendEthViaCall(_msgSender(), amount);\r\n    }\r\n\r\n    function transferExternalTokens(address tokenAddress, address to, uint256 amount) external onlyOwner {\r\n        if (tokenAddress == address(0)) revert NotZeroAddress();\r\n\r\n        transferTokens(tokenAddress, to, amount);\r\n    }\r\n\r\n    function transferTokens(address tokenAddress, address to, uint256 amount) private {\r\n        IERC20(tokenAddress).transfer(to, amount);\r\n\r\n        emit TransferExternalTokens(tokenAddress, to, amount);\r\n    }\r\n\r\n    function mirgateV2Staker(address toAddress, uint96 rewards,uint96 depositTokens, uint8 numOfMonths, uint48 depositTime, uint96 withdrawnAmount) external onlyController(Role.Upgrader) returns(uint256 nftId)\r\n    {\r\n        nftId = stakeToken.bridgeOrAirdropStakeNftIn(toAddress, depositTokens, numOfMonths, depositTime, withdrawnAmount, rewards, false);\r\n\r\n        uint96 amount = depositTokens - withdrawnAmount;\r\n\r\n        _tokenTransfer(address(this), toAddress, amount, false);\r\n        if (rewards > 0) {\r\n            _tokenTransfer(address(this), address(stakeToken), rewards, false);\r\n        }\r\n        \r\n        _lockAndAddStaker(toAddress, amount, numOfMonths, nftId);\r\n    }\r\n\r\n    function mirgateV1V2Holder(address holder, uint96 amount) external onlyController(Role.Upgrader) returns(bool) {\r\n        _tokenTransfer(address(this), holder, amount, false);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountLargerThanAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountLargerThanUnlockedAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedEthSend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidityAddOwnerOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockTimeTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockTimeTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotContractAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughToCoverStakeFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStakeContractRequesting\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SandwichTradesAreDisallowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAlreadyStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WalletLocked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AutoBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"AutoBurnEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"BridgeVaultAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deadAddress\",\"type\":\"address\"}],\"name\":\"BurnAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BurnableTokensZeroed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"BusinessDevelopmentAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"BusinessDevelopmentDivisorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BuyBackCrossChainTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"BuyBackEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"BuyBackTriggerTokenLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BuyBackTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"BuybackBlocksUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"BuybackMinAvailabilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"BuybackTokensWithETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"BuybackUpperLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum EverRiseRoles.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"ControlAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum EverRiseRoles.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"ControlRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"ConvertTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchangeHotWallet\",\"type\":\"address\"}],\"name\":\"ExchangeHotWalletAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchangeHotWallet\",\"type\":\"address\"}],\"name\":\"ExchangeHotWalletRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludeFromFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludeInFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"LiquidityFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"name\":\"LiquidityLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"altAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"LockWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"LockWalletExtend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newvalue\",\"type\":\"uint256\"}],\"name\":\"MaxBuybackAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newvalue\",\"type\":\"uint256\"}],\"name\":\"MinBuybackAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinStakeSizeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NftBridgedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NftBridgedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"OffChainBalanceExcluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"tokens\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"nfts\",\"type\":\"bool\"}],\"name\":\"RevokeAllApprovals\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardStakers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RiseBridgedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RiseBridgedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"RouterAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tokensHrs\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"nftsHrs\",\"type\":\"uint16\"}],\"name\":\"SetApprovalAutoTimeout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"StakingAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"numberOfmonths\",\"type\":\"uint8\"}],\"name\":\"StakingIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"TransactionCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"TransferExternalTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"},{\"internalType\":\"enum EverRiseRoles.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"addControlRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addExchangeHotWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"tokenAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"nftCheck\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenCheck\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"timestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"nftApproval\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenApproval\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"approvals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"nftCheck\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenCheck\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"autoRevokeNftHours\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"autoRevokeTokenHours\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"unlockTimestamp\",\"type\":\"uint48\"}],\"internalType\":\"struct ApprovalChecks\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"approveNFTAndTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"depositTokens\",\"type\":\"uint96\"},{\"internalType\":\"uint8\",\"name\":\"numOfMonths\",\"type\":\"uint8\"},{\"internalType\":\"uint48\",\"name\":\"depositTime\",\"type\":\"uint48\"},{\"internalType\":\"uint96\",\"name\":\"withdrawnAmount\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"achievementClaimed\",\"type\":\"bool\"}],\"name\":\"bridgeStakeNftIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"bridgeStakeNftOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeVaultLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"businessDevelopmentAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"businessDevelopmentDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossChainBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"earlyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint8\",\"name\":\"numOfMonths\",\"type\":\"uint8\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"everBridgeVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"length\",\"type\":\"uint48\"}],\"name\":\"extendLockTokensAndNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAmountLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasTokenStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"increaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExchangeHotWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"isWalletLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"overrideNotClaimed\",\"type\":\"bool\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"altAccount\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"length\",\"type\":\"uint48\"}],\"name\":\"lockTokensAndNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"mirgateV1V2Holder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"rewards\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"depositTokens\",\"type\":\"uint96\"},{\"internalType\":\"uint8\",\"name\":\"numOfMonths\",\"type\":\"uint8\"},{\"internalType\":\"uint48\",\"name\":\"depositTime\",\"type\":\"uint48\"},{\"internalType\":\"uint96\",\"name\":\"withdrawnAmount\",\"type\":\"uint96\"}],\"name\":\"mirgateV2Staker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offchainBalanceExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"internalType\":\"enum EverRiseRoles.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"removeControlRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeExchangeHotWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"tokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nfts\",\"type\":\"bool\"}],\"name\":\"revokeApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EverRiseRoles.Role\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setAutoBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokensHrs\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"nftsHrs\",\"type\":\"uint16\"}],\"name\":\"setAutoTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBurnableTokensZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setBusinessDevelopmentAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setBusinessDevelopmentDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setBuyBackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfDecimals\",\"type\":\"uint256\"}],\"name\":\"setBuybackMinAvailability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyBackTriggerLimit\",\"type\":\"uint256\"}],\"name\":\"setBuybackTriggerTokenLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyBackLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfDecimals\",\"type\":\"uint256\"}],\"name\":\"setBuybackUpperLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setEverBridgeVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"liquidityFeeRate\",\"type\":\"uint96\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setLiquidityLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfDecimals\",\"type\":\"uint256\"}],\"name\":\"setMaxBuybackAmountUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfDecimals\",\"type\":\"uint256\"}],\"name\":\"setMinBuybackAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"minimumTokensBeforeSwap\",\"type\":\"uint96\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setNumberOfBlocksForBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setOffchainBalanceExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txAmount\",\"type\":\"uint256\"}],\"name\":\"setTransactionCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract InftEverRise\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferExternalTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferFromWithPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amountToTransfer\",\"type\":\"uint96\"}],\"name\":\"transferStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"actualAccount\",\"type\":\"address\"}],\"name\":\"unlockTokensAndNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"overrideNotClaimed\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EverRise", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "EverRiseLib:99fe7b37639ae33d0f15f61f4288a2fc9cff7bc1", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://91e982e5bd4e999830b5c60ea202a439612419afc9a698006fb4989473cf7523"}