{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/key/Mar3KeyV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract Mar3KeyV1 is Ownable, Pausable {\\n    address public protocolFeeDestination;\\n    uint256 public protocolFeePercent;\\n    uint256 public creatorFeePercent;\\n    uint256 private referralFeePercent;\\n    address private admin;\\n    mapping(uint256 => Order) private _orders;\\n\\n    struct Order {\\n        address userAddress;\\n        uint256 amount;\\n    }\\n\\n    event BuyKey(\\n        uint256 indexed orderId,\\n        uint256 keyPrice,\\n        address creator,\\n        address referral\\n    );\\n\\n    event SellKey(\\n        uint256 indexed orderId,\\n        uint256 keyPrice,\\n        address creator,\\n        address referral\\n    );\\n\\n    constructor(address _protocolFeeDestination, uint256 _protocolFeePercent) {\\n        protocolFeeDestination = _protocolFeeDestination;\\n        protocolFeePercent = _protocolFeePercent;\\n    }\\n\\n    function setFeeDestination(address _feeDestination) public onlyOwner {\\n        protocolFeeDestination = _feeDestination;\\n    }\\n\\n    function setProtocolFeePercent(uint256 _feePercent) public onlyOwner {\\n        protocolFeePercent = _feePercent;\\n    }\\n\\n    function setCreatorFeePercent(uint256 _feePercent) public onlyOwner {\\n        creatorFeePercent = _feePercent;\\n    }\\n\\n    function setReferralFeePercent(uint256 _feePercent) public onlyOwner {\\n        referralFeePercent = _feePercent;\\n    }\\n\\n    function setAdmin(address _admin) public onlyOwner {\\n        admin = _admin;\\n    }\\n\\n    function buyKey(\\n        uint256 orderId,\\n        address sender,\\n        uint256 totalKeyPrice,\\n        address creator,\\n        address referral,\\n        uint256 expiredAt,\\n        bytes memory signature\\n    ) external payable whenNotPaused {\\n        require(expiredAt > block.timestamp, \\\"Order expired\\\");\\n        require(totalKeyPrice > 0, \\\"Amount must be more than zero\\\");\\n        require(orderId > 0, \\\"Invalid orderId\\\");\\n        require(\\n            _orders[orderId].userAddress == address(0),\\n            \\\"Cannot use this order\\\"\\n        );\\n        require(\\n            !isContract(sender) &&\\n                !isContract(creator) &&\\n                !isContract(referral),\\n            \\\"Not EOA\\\"\\n        );\\n\\n        bytes32 messageHash = getMessageHash(\\n            orderId,\\n            sender,\\n            totalKeyPrice,\\n            creator,\\n            referral,\\n            expiredAt\\n        );\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n        require(\\n            recoverSigner(ethSignedMessageHash, signature) == admin,\\n            \\\"Signature is wrong\\\"\\n        );\\n        require(\\n            msg.value >=\\n                (totalKeyPrice *\\n                    (10000 +\\n                        protocolFeePercent +\\n                        creatorFeePercent +\\n                        referralFeePercent)) /\\n                    10000,\\n            \\\"Insufficient balance\\\"\\n        );\\n\\n        _orders[orderId] = Order(_msgSender(), totalKeyPrice);\\n\\n        (bool success1, ) = protocolFeeDestination.call{\\n            value: (totalKeyPrice * protocolFeePercent) / 10000\\n        }(\\\"\\\");\\n        require(success1, \\\"Unable to send protocol fee\\\");\\n\\n        (bool success2, ) = creator.call{\\n            value: (totalKeyPrice * creatorFeePercent) / 10000\\n        }(\\\"\\\");\\n        require(success2, \\\"Unable to send creator fee\\\");\\n\\n        if (referral == address(0)) {\\n            (bool success3, ) = protocolFeeDestination.call{\\n                value: (totalKeyPrice * referralFeePercent) / 10000\\n            }(\\\"\\\");\\n            require(success3, \\\"Unable to send referral fee to protocol\\\");\\n        } else {\\n            (bool success3, ) = referral.call{\\n                value: (totalKeyPrice * referralFeePercent) / 10000\\n            }(\\\"\\\");\\n            require(success3, \\\"Unable to send referral fee\\\");\\n        }\\n\\n        emit BuyKey(orderId, totalKeyPrice, creator, referral);\\n    }\\n\\n    function sellKey(\\n        uint256 orderId,\\n        address sender,\\n        uint256 totalKeyPrice,\\n        address creator,\\n        address referral,\\n        uint256 expiredAt,\\n        bytes memory signature\\n    ) external whenNotPaused {\\n        require(expiredAt > block.timestamp, \\\"Order expired\\\");\\n        require(totalKeyPrice > 0, \\\"Amount must be more than zero\\\");\\n        require(orderId > 0, \\\"Invalid orderId\\\");\\n        require(\\n            _orders[orderId].userAddress == address(0),\\n            \\\"Cannot use this order\\\"\\n        );\\n        require(\\n            !isContract(sender) &&\\n                !isContract(creator) &&\\n                !isContract(referral),\\n            \\\"Not EOA\\\"\\n        );\\n\\n        bytes32 messageHash = getMessageHash(\\n            orderId,\\n            sender,\\n            totalKeyPrice,\\n            creator,\\n            referral,\\n            expiredAt\\n        );\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n        require(\\n            recoverSigner(ethSignedMessageHash, signature) == admin,\\n            \\\"Signature is wrong\\\"\\n        );\\n        require(address(this).balance >= totalKeyPrice, \\\"Insufficient balance\\\");\\n\\n        _orders[orderId] = Order(_msgSender(), totalKeyPrice);\\n\\n        (bool success1, ) = sender.call{\\n            value: (totalKeyPrice *\\n                (10000 -\\n                    protocolFeePercent -\\n                    creatorFeePercent -\\n                    referralFeePercent)) / 10000\\n        }(\\\"\\\");\\n        require(success1, \\\"Unable to send funds to seller\\\");\\n        (bool success2, ) = protocolFeeDestination.call{\\n            value: (totalKeyPrice * protocolFeePercent) / 10000\\n        }(\\\"\\\");\\n        require(success2, \\\"Unable to send protocol fee\\\");\\n        (bool success3, ) = creator.call{\\n            value: (totalKeyPrice * creatorFeePercent) / 10000\\n        }(\\\"\\\");\\n        require(success3, \\\"Unable to send creator fee\\\");\\n        if (referral == address(0)) {\\n            (bool success4, ) = protocolFeeDestination.call{\\n                value: (totalKeyPrice * referralFeePercent) / 10000\\n            }(\\\"\\\");\\n            require(success4, \\\"Unable to send referral fee to protocol\\\");\\n        } else {\\n            (bool success4, ) = referral.call{\\n                value: (totalKeyPrice * referralFeePercent) / 10000\\n            }(\\\"\\\");\\n            require(success4, \\\"Unable to send referral fee\\\");\\n        }\\n\\n        emit SellKey(orderId, totalKeyPrice, creator, referral);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function isContract(address _addr) internal view returns (bool) {\\n        return _addr.code.length > 0;\\n    }\\n\\n    function recoverSigner(\\n        bytes32 _ethSignedMessageHash,\\n        bytes memory _signature\\n    ) internal pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function getMessageHash(\\n        uint256 _orderId,\\n        address _sender,\\n        uint256 _keyPrice,\\n        address _creator,\\n        address _referral,\\n        uint256 _expiredAt\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    _orderId,\\n                    _sender,\\n                    _keyPrice,\\n                    _creator,\\n                    _referral,\\n                    _expiredAt\\n                )\\n            );\\n    }\\n\\n    function getEthSignedMessageHash(\\n        bytes32 _messageHash\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    _messageHash\\n                )\\n            );\\n    }\\n\\n    function splitSignature(\\n        bytes memory sig\\n    ) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n        assembly {\\n            /*\\n            First 32 bytes stores the length of the signature\\n\\n            add(sig, 32) = pointer of sig + 32\\n            effectively, skips first 32 bytes of signature\\n\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\n            */\\n\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFeePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"BuyKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"SellKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalKeyPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"buyKey\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalKeyPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"sellKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setCreatorFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setReferralFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Mar3KeyV1", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e9a6868d1664d1d621c228e521c287ca156a701a0000000000000000000000000000000000000000000000000000000000000005", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}