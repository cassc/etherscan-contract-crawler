{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n// import \"hardhat/console.sol\"; \r\n\r\n/**\r\n * BEP20 standard interface.\r\n */\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC165 {\r\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint indexed tokenId\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed approved,\r\n    uint indexed tokenId\r\n  );\r\n\r\n  event ApprovalForAll(\r\n    address indexed owner,\r\n    address indexed operator,\r\n    bool approved\r\n  );\r\n\r\n  function balanceOf(address owner) external view returns (uint balance);\r\n\r\n  function ownerOf(uint tokenId) external view returns (address owner);\r\n\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint tokenId\r\n  ) external;\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint tokenId\r\n  ) external;\r\n\r\n  function approve(address to, uint tokenId) external;\r\n\r\n  function getApproved(uint tokenId)\r\n    external\r\n    view\r\n    returns (address operator);\r\n\r\n  function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n  function isApprovedForAll(address owner, address operator)\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint tokenId,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n\r\ninterface IERC721Receiver {\r\n  function onERC721Received(\r\n    address operator,\r\n    address from,\r\n    uint tokenId,\r\n    bytes calldata data\r\n  ) external returns (bytes4);\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n  function name() external view returns (string memory);\r\n  function symbol() external view returns (string memory);\r\n  function tokenURI(uint tokenId) external view returns (string memory);\r\n}\r\n\r\nlibrary Address {\r\n  function isContract(address account) internal view returns (bool) {\r\n    // This method relies on extcodesize, which returns 0 for contracts in\r\n    // construction, since the code is only stored at the end of the\r\n    // constructor execution.\r\n\r\n    uint size;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      size := extcodesize(account)\r\n    }\r\n    return size > 0;\r\n  }\r\n}\r\n\r\nlibrary Strings {\r\n  bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n  /**\r\n   * @dev Converts a `uint` to its ASCII `string` decimal representation.\r\n   */\r\n  function toString(uint value) internal pure returns (string memory) {\r\n    // Inspired by OraclizeAPI's implementation - MIT licence\r\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n    if (value == 0) {\r\n      return \"0\";\r\n    }\r\n    uint temp = value;\r\n    uint digits;\r\n    while (temp != 0) {\r\n      digits++;\r\n      temp /= 10;\r\n    }\r\n    bytes memory buffer = new bytes(digits);\r\n    while (value != 0) {\r\n      digits -= 1;\r\n      buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\r\n      value /= 10;\r\n    }\r\n    return string(buffer);\r\n  }\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return interfaceId == type(IERC165).interfaceId;\r\n  }\r\n}\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n  using Address for address;\r\n  using Strings for uint;\r\n\r\n  // Token name\r\n  string private _name;\r\n\r\n  // Token symbol\r\n  string private _symbol;\r\n\r\n  // Mapping from token ID to owner address\r\n  mapping(uint => address) private _owners;\r\n\r\n  // Mapping owner address to token count\r\n  mapping(address => uint) private _balances;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping(uint => address) private _tokenApprovals;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n  /**\r\n   * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n   */\r\n  constructor(string memory name_, string memory symbol_) {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(ERC165, IERC165)\r\n    returns (bool)\r\n  {\r\n    return\r\n      interfaceId == type(IERC721).interfaceId ||\r\n      interfaceId == type(IERC721Metadata).interfaceId ||\r\n      super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-balanceOf}.\r\n   */\r\n  function balanceOf(address owner)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint)\r\n  {\r\n    require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-ownerOf}.\r\n   */\r\n  function ownerOf(uint tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (address)\r\n  {\r\n    address owner = _owners[tokenId];\r\n    require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-name}.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-symbol}.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-tokenURI}.\r\n   */\r\n  function tokenURI(uint tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (string memory)\r\n  {\r\n    require(\r\n      _exists(tokenId),\r\n      \"ERC721Metadata: URI query for nonexistent token\"\r\n    );\r\n\r\n    string memory baseURI = _baseURI();\r\n    return\r\n      bytes(baseURI).length > 0\r\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n        : \"\";\r\n  }\r\n\r\n  /**\r\n   * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\r\n   * in child contracts.\r\n   */\r\n  function _baseURI() internal view virtual returns (string memory) {\r\n    return \"\";\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-approve}.\r\n   */\r\n  function approve(address to, uint tokenId) public virtual override {\r\n    address owner = ERC721.ownerOf(tokenId);\r\n    require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n    require(\r\n      _msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\r\n      \"ERC721: approve caller is not owner nor approved for all\"\r\n    );\r\n\r\n    _approve(to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-getApproved}.\r\n   */\r\n  function getApproved(uint tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (address)\r\n  {\r\n    require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-setApprovalForAll}.\r\n   */\r\n  function setApprovalForAll(address operator, bool approved)\r\n    public\r\n    virtual\r\n    override\r\n  {\r\n    require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n    _operatorApprovals[_msgSender()][operator] = approved;\r\n    emit ApprovalForAll(_msgSender(), operator, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-isApprovedForAll}.\r\n   */\r\n  function isApprovedForAll(address owner, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-transferFrom}.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint tokenId\r\n  ) public virtual override {\r\n    //solhint-disable-next-line max-line-length\r\n    require(\r\n      _isApprovedOrOwner(_msgSender(), tokenId),\r\n      \"ERC721: transfer caller is not owner nor approved\"\r\n    );\r\n\r\n    _transfer(from, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-safeTransferFrom}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint tokenId\r\n  ) public virtual override {\r\n    safeTransferFrom(from, to, tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-safeTransferFrom}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint tokenId,\r\n    bytes memory _data\r\n  ) public virtual override {\r\n    require(\r\n      _isApprovedOrOwner(_msgSender(), tokenId),\r\n      \"ERC721: transfer caller is not owner nor approved\"\r\n    );\r\n    _safeTransfer(from, to, tokenId, _data);\r\n  }\r\n\r\n  function _safeTransfer(\r\n    address from,\r\n    address to,\r\n    uint tokenId,\r\n    bytes memory _data\r\n  ) internal virtual {\r\n    _transfer(from, to, tokenId);\r\n    require(\r\n      _checkOnERC721Received(from, to, tokenId, _data),\r\n      \"ERC721: transfer to non ERC721Receiver implementer\"\r\n    );\r\n  }\r\n\r\n  function _exists(uint tokenId) internal view virtual returns (bool) {\r\n    return _owners[tokenId] != address(0);\r\n  }\r\n\r\n  function _isApprovedOrOwner(address spender, uint tokenId)\r\n    internal\r\n    view\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n    address owner = ERC721.ownerOf(tokenId);\r\n    return (spender == owner ||\r\n      getApproved(tokenId) == spender ||\r\n      ERC721.isApprovedForAll(owner, spender));\r\n  }\r\n\r\n  function _safeMint(address to, uint tokenId) internal virtual {\r\n    _safeMint(to, tokenId, \"\");\r\n  }\r\n\r\n  function _safeMint(\r\n    address to,\r\n    uint tokenId,\r\n    bytes memory _data\r\n  ) internal virtual {\r\n    _mint(to, tokenId);\r\n    require(\r\n      _checkOnERC721Received(address(0), to, tokenId, _data),\r\n      \"ERC721: transfer to non ERC721Receiver implementer\"\r\n    );\r\n  }\r\n\r\n  function _mint(address to, uint tokenId) internal virtual {\r\n    require(to != address(0), \"ERC721: mint to the zero address\");\r\n    require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n    _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n    _balances[to] += 1;\r\n    _owners[tokenId] = to;\r\n\r\n    emit Transfer(address(0), to, tokenId);\r\n  }\r\n\r\n  function _burn(uint tokenId) internal virtual {\r\n    address owner = ERC721.ownerOf(tokenId);\r\n\r\n    _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n    // Clear approvals\r\n    _approve(address(0), tokenId);\r\n\r\n    _balances[owner] -= 1;\r\n    delete _owners[tokenId];\r\n\r\n    emit Transfer(owner, address(0), tokenId);\r\n  }\r\n\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint tokenId\r\n  ) internal virtual {\r\n    require(\r\n      ERC721.ownerOf(tokenId) == from,\r\n      \"ERC721: transfer of token that is not own\"\r\n    );\r\n    require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n    _beforeTokenTransfer(from, to, tokenId);\r\n\r\n    // Clear approvals from the previous owner\r\n    _approve(address(0), tokenId);\r\n\r\n    _balances[from] -= 1;\r\n    _balances[to] += 1;\r\n    _owners[tokenId] = to;\r\n\r\n    emit Transfer(from, to, tokenId);\r\n  }\r\n\r\n  function _approve(address to, uint tokenId) internal virtual {\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n  }\r\n\r\n  function _checkOnERC721Received(\r\n    address from,\r\n    address to,\r\n    uint tokenId,\r\n    bytes memory _data\r\n  ) private returns (bool) {\r\n    if (to.isContract()) {\r\n      try\r\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\r\n      returns (bytes4 retval) {\r\n        return retval == IERC721Receiver(to).onERC721Received.selector;\r\n      } catch (bytes memory reason) {\r\n        if (reason.length == 0) {\r\n          revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n        } else {\r\n          // solhint-disable-next-line no-inline-assembly\r\n          assembly {\r\n            revert(add(32, reason), mload(reason))\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint tokenId\r\n  ) internal virtual {}\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n  function totalSupply() external view returns (uint);\r\n  function tokenOfOwnerByIndex(address owner, uint index)\r\n    external\r\n    view\r\n    returns (uint tokenId);\r\n  function tokenByIndex(uint index) external view returns (uint);\r\n}\r\n\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => mapping(uint => uint)) private _ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint => uint) private _ownedTokensIndex;\r\n\r\n  // The current index of the token\r\n  uint public currentIndex;\r\n\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(IERC165, ERC721)\r\n    returns (bool)\r\n  {\r\n    return\r\n      interfaceId == type(IERC721Enumerable).interfaceId ||\r\n      super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n   */\r\n  function tokenOfOwnerByIndex(address owner, uint index)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint)\r\n  {\r\n    require(\r\n      index < ERC721.balanceOf(owner),\r\n      \"ERC721Enumerable: owner index out of bounds\"\r\n    );\r\n    return _ownedTokens[owner][uint(index)];\r\n  }\r\n\r\n  function totalSupply() public view virtual override returns (uint) {\r\n    return currentIndex;\r\n  }\r\n\r\n  function tokenByIndex(uint index)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint)\r\n  {\r\n    require(\r\n      index < currentIndex,\r\n      \"ERC721Enumerable: global index out of bounds\"\r\n    );\r\n    return index;\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint tokenId\r\n  ) internal virtual override {\r\n    require (to != address(0), \"Token not burnable\");\r\n\r\n    super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n    if (from == address(0)) {\r\n      currentIndex++;\r\n    } else if (from != to) {\r\n      _removeTokenFromOwnerEnumeration(from, tokenId);\r\n    }\r\n\r\n    if (to != from) {\r\n      _addTokenToOwnerEnumeration(to, tokenId);\r\n    }\r\n  }\r\n\r\n  function _addTokenToOwnerEnumeration(address to, uint tokenId) private {\r\n    uint length = ERC721.balanceOf(to);\r\n    _ownedTokens[to][length] = tokenId;\r\n    _ownedTokensIndex[tokenId] = length;\r\n  }\r\n\r\n  function _removeTokenFromOwnerEnumeration(address from, uint tokenId)\r\n    private\r\n  {\r\n    // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot (swap and pop).\r\n\r\n    uint lastTokenIndex = uint(ERC721.balanceOf(from) - 1);\r\n    uint tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n    // When the token to delete is the last token, the swap operation is unnecessary\r\n    if (tokenIndex != lastTokenIndex) {\r\n      uint lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n      _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n      _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n    }\r\n\r\n    // This also deletes the contents at the last position of the array\r\n    delete _ownedTokensIndex[tokenId];\r\n    delete _ownedTokens[from][lastTokenIndex];\r\n  }\r\n}\r\n\r\nenum Permission {\r\n    Authorize,\r\n    Unauthorize,\r\n    LockPermissions,\r\n\r\n    AdjustVariables,\r\n    RetrieveTokens,\r\n\r\n    MintCrates\r\n}\r\n\r\n/**\r\n * Allows for contract ownership along with multi-address authorization for different permissions\r\n */\r\nabstract contract RSunAuth {\r\n    struct PermissionLock {\r\n        bool isLocked;\r\n        uint64 expiryTime;\r\n    }\r\n\r\n    address public owner;\r\n    mapping(address => mapping(uint => bool)) private authorizations; // uint is permission index\r\n    \r\n    uint constant NUM_PERMISSIONS = 6; // always has to be adjusted when Permission element is added or removed\r\n    mapping(string => uint) permissionNameToIndex;\r\n    mapping(uint => string) permissionIndexToName;\r\n\r\n    mapping(uint => PermissionLock) lockedPermissions;\r\n\r\n    constructor(address owner_) {\r\n        owner = owner_;\r\n        for (uint i; i < NUM_PERMISSIONS; i++) {\r\n            authorizations[owner_][i] = true;\r\n        }\r\n\r\n        // a permission name can't be longer than 32 bytes\r\n        permissionNameToIndex[\"Authorize\"] = uint(Permission.Authorize);\r\n        permissionNameToIndex[\"Unauthorize\"] = uint(Permission.Unauthorize);\r\n        permissionNameToIndex[\"LockPermissions\"] = uint(Permission.LockPermissions);\r\n        permissionNameToIndex[\"AdjustVariables\"] = uint(Permission.AdjustVariables);\r\n        permissionNameToIndex[\"RetrieveTokens\"] = uint(Permission.RetrieveTokens);\r\n        permissionNameToIndex[\"MintCrates\"] = uint(Permission.MintCrates);\r\n\r\n        permissionIndexToName[uint(Permission.Authorize)] = \"Authorize\";\r\n        permissionIndexToName[uint(Permission.Unauthorize)] = \"Unauthorize\";\r\n        permissionIndexToName[uint(Permission.LockPermissions)] = \"LockPermissions\";\r\n        permissionIndexToName[uint(Permission.AdjustVariables)] = \"AdjustVariables\";\r\n        permissionIndexToName[uint(Permission.RetrieveTokens)] = \"RetrieveTokens\";\r\n        permissionIndexToName[uint(Permission.MintCrates)] = \"MintCrates\";\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"Ownership required.\"); _;\r\n    }\r\n\r\n    /**\r\n     * Function to require caller to be authorized\r\n     */\r\n    function authorizedFor(Permission permission) internal view {\r\n        require(!lockedPermissions[uint(permission)].isLocked, \"Permission is locked.\");\r\n        require(isAuthorizedFor(msg.sender, permission), string(abi.encodePacked(\"Not authorized. You need the permission \", permissionIndexToName[uint(permission)])));\r\n    }\r\n\r\n    /**\r\n     * Authorize address for one permission\r\n     */\r\n    function authorizeFor(address adr, string memory permissionName) public {\r\n        authorizedFor(Permission.Authorize);\r\n        uint permIndex = permissionNameToIndex[permissionName];\r\n        authorizations[adr][permIndex] = true;\r\n        emit AuthorizedFor(adr, permissionName, permIndex);\r\n    }\r\n\r\n    /**\r\n     * Authorize address for multiple permissions\r\n     */\r\n    function authorizeForMultiplePermissions(address adr, string[] calldata permissionNames) public {\r\n        authorizedFor(Permission.Authorize);\r\n        for (uint i; i < permissionNames.length; i++) {\r\n            uint permIndex = permissionNameToIndex[permissionNames[i]];\r\n            authorizations[adr][permIndex] = true;\r\n            emit AuthorizedFor(adr, permissionNames[i], permIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Authorize address for all permissions\r\n     */\r\n    function authorizeForAllPermissions(address adr) public {\r\n        authorizedFor(Permission.Authorize);\r\n        for (uint i; i < NUM_PERMISSIONS; i++) {\r\n            authorizations[adr][i] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove address' authorization\r\n     */\r\n    function unauthorizeFor(address adr, string memory permissionName) public {\r\n        authorizedFor(Permission.Unauthorize);\r\n        require(adr != owner, \"Can't unauthorize owner\");\r\n\r\n        uint permIndex = permissionNameToIndex[permissionName];\r\n        authorizations[adr][permIndex] = false;\r\n        emit UnauthorizedFor(adr, permissionName, permIndex);\r\n    }\r\n\r\n    /**\r\n     * Unauthorize address for multiple permissions\r\n     */\r\n    function unauthorizeForMultiplePermissions(address adr, string[] calldata permissionNames) public {\r\n        authorizedFor(Permission.Unauthorize);\r\n        require(adr != owner, \"Can't unauthorize owner\");\r\n\r\n        for (uint i; i < permissionNames.length; i++) {\r\n            uint permIndex = permissionNameToIndex[permissionNames[i]];\r\n            authorizations[adr][permIndex] = false;\r\n            emit UnauthorizedFor(adr, permissionNames[i], permIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unauthorize address for all permissions\r\n     */\r\n    function unauthorizeForAllPermissions(address adr) public {\r\n        authorizedFor(Permission.Unauthorize);\r\n        for (uint i; i < NUM_PERMISSIONS; i++) {\r\n            authorizations[adr][i] = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorizedFor(address adr, string memory permissionName) public view returns (bool) {\r\n        return authorizations[adr][permissionNameToIndex[permissionName]];\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorizedFor(address adr, Permission permission) public view returns (bool) {\r\n        return authorizations[adr][uint(permission)];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner.\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        address oldOwner = owner;\r\n        owner = adr;\r\n        for (uint i; i < NUM_PERMISSIONS; i++) {\r\n            authorizations[oldOwner][i] = false;\r\n            authorizations[owner][i] = true;\r\n        }\r\n        emit OwnershipTransferred(oldOwner, owner);\r\n    }\r\n\r\n    /**\r\n     * Get the index of the permission by its name\r\n     */\r\n    function getPermissionNameToIndex(string memory permissionName) public view returns (uint) {\r\n        return permissionNameToIndex[permissionName];\r\n    }\r\n    \r\n    /**\r\n     * Get the time the timelock expires\r\n     */\r\n    function getPermissionUnlockTime(string memory permissionName) public view returns (uint) {\r\n        return lockedPermissions[permissionNameToIndex[permissionName]].expiryTime;\r\n    }\r\n\r\n    /**\r\n     * Check if the permission is locked\r\n     */\r\n    function isLocked(string memory permissionName) public view returns (bool) {\r\n        return lockedPermissions[permissionNameToIndex[permissionName]].isLocked;\r\n    }\r\n\r\n    /*\r\n     *Locks the permission from being used for the amount of time provided\r\n     */\r\n    function lockPermission(string memory permissionName, uint64 time) public virtual {\r\n        authorizedFor(Permission.LockPermissions);\r\n\r\n        uint permIndex = permissionNameToIndex[permissionName];\r\n        uint64 expiryTime = uint64(block.timestamp) + time;\r\n        lockedPermissions[permIndex] = PermissionLock(true, expiryTime);\r\n        emit PermissionLocked(permissionName, permIndex, expiryTime);\r\n    }\r\n    \r\n    /*\r\n     * Unlocks the permission if the lock has expired \r\n     */\r\n    function unlockPermission(string memory permissionName) public virtual {\r\n        require(block.timestamp > getPermissionUnlockTime(permissionName) , \"Permission is locked until the expiry time.\");\r\n        uint permIndex = permissionNameToIndex[permissionName];\r\n        lockedPermissions[permIndex].isLocked = false;\r\n        emit PermissionUnlocked(permissionName, permIndex);\r\n    }\r\n\r\n    event PermissionLocked(string permissionName, uint permissionIndex, uint64 expiryTime);\r\n    event PermissionUnlocked(string permissionName, uint permissionIndex);\r\n    event OwnershipTransferred(address from, address to);\r\n    event AuthorizedFor(address adr, string permissionName, uint permissionIndex);\r\n    event UnauthorizedFor(address adr, string permissionName, uint permissionIndex);\r\n}\r\n\r\ninterface ISamuraiRising is IERC721Enumerable {\r\n    function teamMintSingle(uint8 packId, address recipient) external;\r\n}\r\n\r\ninterface IMysteriousCrates {\r\n    function mintCrate(address user, uint[] memory cardIds) external;\r\n    // function openCrate(uint crateId) external;\r\n}\r\n\r\ncontract MysteriousCrates is ERC721Enumerable, RSunAuth, IMysteriousCrates, IERC721Receiver {\r\n\r\n    struct Crate {\r\n        uint72 cardIds;\r\n    }\r\n\r\n    struct OutputCrate {\r\n        uint crateId;\r\n        uint[] cardIds;\r\n    }\r\n\r\n    mapping(uint => Crate) public crates;\r\n\r\n    address public samuraiAdr = 0xC3c3B849ED5164Fb626c4a4F78e0675907B2C94E;\r\n    ISamuraiRising samurai;\r\n\r\n    uint8 public packId = 10;\r\n    bool public openingEnabled = false;\r\n    \r\n    string baseURI;\r\n\r\n    event CrateMinted(address indexed user, uint indexed crateId, uint[] cardIds);\r\n    event CrateOpened(address indexed user, uint indexed crateId, uint indexed newSamuraiId);\r\n\r\n    constructor() ERC721(\"MysteriousCrates\", \"Mysterious Crates\") RSunAuth(tx.origin) {\r\n        samurai = ISamuraiRising(samuraiAdr);\r\n    }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n\r\n    function mintCrate(address user, uint[] memory cardIds) external override {\r\n        authorizedFor(Permission.MintCrates);\r\n        require(cardIds.length == 3, \"Incorrect number of IDs\");\r\n\r\n        uint mintIndex = currentIndex;\r\n\r\n        _safeMint(user, mintIndex);\r\n        \r\n        crates[mintIndex].cardIds = getIdsAsSingleUint(cardIds);\r\n        emit CrateMinted(user, mintIndex, cardIds);\r\n    }\r\n\r\n    function openCrate(uint crateId) external {\r\n        require(openingEnabled, \"Crate opening not enabled\");\r\n        require(ownerOf(crateId) == msg.sender, \"Can only open one's own crates\");\r\n\r\n        safeTransferFrom(msg.sender, address(this), crateId); // reverts if it fails\r\n\r\n        samurai.teamMintSingle(packId, msg.sender);\r\n        emit CrateOpened(msg.sender, crateId, samurai.totalSupply() - 1);\r\n    }\r\n\r\n    function getCrate(uint id) external view returns(OutputCrate memory crate_) {\r\n        Crate memory crate = crates[id];\r\n        uint[] memory ids = _getIdsAsArray(crate.cardIds);\r\n\r\n        crate_ = OutputCrate(id, ids);\r\n    }\r\n\r\n    function getAllCratesOfUser(address user) external view returns(OutputCrate[] memory crates_) {\r\n        uint userBal = balanceOf(user);\r\n        uint[] memory crateIds = new uint[](userBal);\r\n\r\n        for (uint256 i = 0; i < userBal; i++) {\r\n            crateIds[i] = tokenOfOwnerByIndex(user, i);\r\n        }\r\n        \r\n        crates_ = new OutputCrate[](crateIds.length);\r\n        for (uint256 i = 0; i < crateIds.length; i++) {\r\n            Crate memory crate = crates[crateIds[i]];\r\n            uint[] memory ids = _getIdsAsArray(crate.cardIds);\r\n\r\n            crates_[i] = OutputCrate(crateIds[i], ids);\r\n        }\r\n    }\r\n\r\n    function getIdsAsSingleUint(uint[] memory cardIds) public pure returns(uint72 ids) {\r\n        ids = uint72(cardIds[0]);\r\n        ids |= uint72(cardIds[1] << 24);\r\n        ids |= uint72(cardIds[2] << 48);\r\n    }\r\n\r\n    function getIdsAsArray(uint crateId) public view returns(uint[] memory arr) {\r\n        uint72 ids = crates[crateId].cardIds;\r\n\r\n        arr = _getIdsAsArray(ids);\r\n    }\r\n\r\n    function _getIdsAsArray(uint72 ids) internal pure returns(uint[] memory arr) {       \r\n        arr = new uint[](3);\r\n        for (uint256 i = 0; i < 3; i++) {\r\n            arr[i] = uint24(ids >> (i * 24));\r\n        }\r\n    }\r\n\r\n    function setBaseURI(string memory baseURI_) external {\r\n        authorizedFor(Permission.AdjustVariables);\r\n        baseURI = baseURI_;\r\n    }\r\n        \r\n    function setSamuraiAdr(address samuraiAdr_) external {\r\n        authorizedFor(Permission.AdjustVariables);\r\n        samuraiAdr = samuraiAdr_;\r\n        samurai = ISamuraiRising(samuraiAdr_);\r\n    }\r\n            \r\n    function setPackId(uint id_) external {\r\n        authorizedFor(Permission.AdjustVariables);\r\n        packId = uint8(id_);\r\n    }\r\n\r\n    function setOpeningEnabled(bool enabled_) external {\r\n        authorizedFor(Permission.AdjustVariables);\r\n        openingEnabled = enabled_;\r\n    }\r\n\r\n    function onERC721Received(address, address, uint, bytes calldata) public pure override returns (bytes4) {\r\n        return 0x150b7a02;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"permissionIndex\",\"type\":\"uint256\"}],\"name\":\"AuthorizedFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"crateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"cardIds\",\"type\":\"uint256[]\"}],\"name\":\"CrateMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"crateId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newSamuraiId\",\"type\":\"uint256\"}],\"name\":\"CrateOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"permissionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expiryTime\",\"type\":\"uint64\"}],\"name\":\"PermissionLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"permissionIndex\",\"type\":\"uint256\"}],\"name\":\"PermissionUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"permissionIndex\",\"type\":\"uint256\"}],\"name\":\"UnauthorizedFor\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"authorizeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorizeForAllPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"permissionNames\",\"type\":\"string[]\"}],\"name\":\"authorizeForMultiplePermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crates\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"cardIds\",\"type\":\"uint72\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllCratesOfUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"crateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"cardIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MysteriousCrates.OutputCrate[]\",\"name\":\"crates_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCrate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"crateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"cardIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MysteriousCrates.OutputCrate\",\"name\":\"crate_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"crateId\",\"type\":\"uint256\"}],\"name\":\"getIdsAsArray\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"arr\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"cardIds\",\"type\":\"uint256[]\"}],\"name\":\"getIdsAsSingleUint\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"ids\",\"type\":\"uint72\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"getPermissionNameToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"getPermissionUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"enum Permission\",\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"isAuthorizedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"isAuthorizedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"lockPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"cardIds\",\"type\":\"uint256[]\"}],\"name\":\"mintCrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"crateId\",\"type\":\"uint256\"}],\"name\":\"openCrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"packId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"samuraiAdr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled_\",\"type\":\"bool\"}],\"name\":\"setOpeningEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"setPackId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"samuraiAdr_\",\"type\":\"address\"}],\"name\":\"setSamuraiAdr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"unauthorizeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorizeForAllPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"permissionNames\",\"type\":\"string[]\"}],\"name\":\"unauthorizeForMultiplePermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"unlockPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MysteriousCrates", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e7fbd2d4994ae02515de5658ffa72e76aa9bcd0fae7176dfc54578744359bfa1"}