{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ninterface IAccessControl {\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n    function grantRole(bytes32 role, address account) external;\r\n    function revokeRole(bytes32 role, address account) external;\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\nabstract contract ERC165 is IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n    mapping(bytes32 => RoleData) private _roles;\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\ninterface IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\ninterface IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n    string private _name;\r\n    string private _symbol;\r\n    mapping(uint256 => address) private _owners;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\r\n        return _balances[owner];\r\n    }\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: invalid token ID\");\r\n        return owner;\r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        _requireMinted(tokenId);\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not token owner nor approved for all\"\r\n        );\r\n        _approve(to, tokenId);\r\n    }\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        _requireMinted(tokenId);\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, data);\r\n    }\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\r\n    }\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n        emit Transfer(address(0), to, tokenId);\r\n        _afterTokenTransfer(address(0), to, tokenId);\r\n    }\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n        _approve(address(0), tokenId);\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n        emit Transfer(owner, address(0), tokenId);\r\n        _afterTokenTransfer(owner, address(0), tokenId);\r\n    }\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n        _approve(address(0), tokenId);\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfer(from, to, tokenId);\r\n    }\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n    function _requireMinted(uint256 tokenId) internal view virtual {\r\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\r\n    }\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\ninterface IERC721Enumerable is IERC721 {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n    uint256[] private _allTokens;\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n            _ownedTokens[from][tokenIndex] = lastTokenId;\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\r\n        }\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n        _allTokens[tokenIndex] = lastTokenId;\r\n        _allTokensIndex[lastTokenId] = tokenIndex;\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\ncontract MetagaugeNFT is ERC721Enumerable, Ownable, AccessControl, ReentrancyGuard {\r\n    using Strings for uint256;\r\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\r\n    uint256 private minPrice;\r\n    uint256 private RODTransferFee;\r\n    uint256 private BNBTransferFee;\r\n    address private MGRCA;\r\n    address private RODCA;\r\n    mapping(uint256 => string) private _tokenURIs;\r\n    mapping(string => AdminSale) private adminSales;\r\n    mapping(uint256 => Sale) private sales;\r\n    constructor() ERC721(\"Metagauge NFT\", \"MGN\") {\r\n        _transferOwnership(_msgSender());\r\n        setAdminRole(_msgSender());\r\n        minPrice = 10 ** 15;\r\n        RODTransferFee = 500;\r\n        BNBTransferFee = 250;\r\n        adminSales[\"PB\"] = AdminSale(false, new address[](0), new address[](0), 0, 0, 0);\r\n        adminSales[\"OG\"] = AdminSale(false, new address[](0), new address[](0), 0, 0, 0);\r\n        adminSales[\"WL\"] = AdminSale(false, new address[](0), new address[](0), 0, 0, 0);\r\n        adminSales[\"AD\"] = AdminSale(false, new address[](0), new address[](0), 0, 0, 0);\r\n    }\r\n    struct AdminSale {\r\n        bool status;\r\n        address[] members;\r\n        address[] buyers;\r\n        uint256 price;\r\n        uint256 amountPerMember;\r\n        uint256 totalAmount;\r\n    }\r\n    struct Sale {\r\n        bool status;\r\n        bool isAuction;\r\n        address manager;\r\n        string unit;\r\n        uint256 price;\r\n        uint256 minBidAmount;\r\n        address topBidder;\r\n        uint256 topBidAmount;\r\n        \r\n    }\r\n    event SaleTransferred(string unit, uint256 price, address topBidder, uint256 topBidAmount);\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Enumerable, AccessControl) returns (bool) {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        _requireMinted(tokenId);\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n        string memory base = _baseURI();\r\n        if (bytes(base).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(base, _tokenURI));\r\n        }\r\n        return super.tokenURI(tokenId);\r\n    }\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n    function _burn(uint256 tokenId) internal virtual override {\r\n        super._burn(tokenId);\r\n\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n    }\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n    function setAdminRole(address to) public onlyOwner {\r\n        _grantRole(ADMIN_ROLE, to);\r\n    }\r\n    function revokeAdminRole(address to) public onlyOwner {\r\n        _revokeRole(ADMIN_ROLE, to);\r\n    }\r\n    function setCA(\r\n        address _MGRCA,\r\n        address _RODCA\r\n    ) public onlyOwner {\r\n        if (MGRCA != _MGRCA) {\r\n            revokeAdminRole(MGRCA);\r\n            setAdminRole(_MGRCA);\r\n            MGRCA = _MGRCA;\r\n        }\r\n        if (RODCA != _RODCA) {\r\n            revokeAdminRole(RODCA);\r\n            setAdminRole(_RODCA);\r\n            RODCA = _RODCA;\r\n        }\r\n    }\r\n    function getCA() public view returns (address, address) {\r\n        return (MGRCA, RODCA);\r\n    }\r\n    function setOptions(\r\n        uint256 _minPrice,\r\n        uint256 _RODTransferFee,\r\n        uint256 _BNBTransferFee\r\n    ) public onlyOwner {\r\n        minPrice = _minPrice;\r\n        RODTransferFee = _RODTransferFee;\r\n        BNBTransferFee = _BNBTransferFee;\r\n    }\r\n    function getOptions() public view returns (uint256, uint256, uint256) {\r\n        return (minPrice, RODTransferFee, BNBTransferFee);\r\n    }\r\n    function setAdminSale(\r\n        string memory saleType,\r\n        uint256 status,\r\n        uint256 price,\r\n        uint256 totalAmount\r\n    ) public onlyOwner {\r\n        require(status < 2, \"invalid status value\");\r\n        if (keccak256(abi.encode(saleType)) != keccak256(abi.encode(\"AD\"))) {\r\n            require(price >= minPrice, \"price must bigger than minimum price\");\r\n        }\r\n        bool adminSaleStatus = false;\r\n        if (status == 1) {\r\n            adminSaleStatus = true;\r\n        }\r\n        adminSales[saleType].status = adminSaleStatus;\r\n        adminSales[saleType].price = price;\r\n        adminSales[saleType].totalAmount = totalAmount;\r\n    }\r\n    function setAdminSaleForMembers(\r\n        string memory saleType,\r\n        uint256 status,\r\n        address[] memory members,\r\n        uint256 price,\r\n        uint256 amountPerMember,\r\n        uint256 totalAmount\r\n    ) public onlyOwner {\r\n        require(status < 2, \"invalid status value\");\r\n        if (keccak256(abi.encode(saleType)) != keccak256(abi.encode(\"AD\"))) {\r\n            require(price >= minPrice, \"price must bigger than minimum price\");\r\n        }\r\n        bool adminSaleStatus = false;\r\n        if (status == 1) {\r\n            adminSaleStatus = true;\r\n        }\r\n        adminSales[saleType].status = adminSaleStatus;\r\n        adminSales[saleType].members = members;\r\n        adminSales[saleType].price = price;\r\n        adminSales[saleType].amountPerMember = amountPerMember;\r\n        adminSales[saleType].totalAmount = totalAmount;\r\n    }\r\n    function initializeAdminSale(\r\n        string memory saleType\r\n    ) public onlyOwner {\r\n        adminSales[saleType] = AdminSale(false, new address[](0), new address[](0), 0, 0, 0);\r\n    }\r\n    function getAdminSale(string memory key) public view returns (AdminSale memory) {\r\n        return adminSales[key];\r\n    }\r\n    function _mint(\r\n        address to,\r\n        uint256 tokenId,\r\n        string memory uri\r\n    ) internal virtual {\r\n        super._mint(to, tokenId);\r\n        _setTokenURI(tokenId, uri);\r\n    }\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        require(!sales[tokenId].status, \"cannot transfer token during sell on market\");\r\n        super._transfer(from, to, tokenId);\r\n    }\r\n    function mintByAdmin(\r\n        address to,\r\n        uint256 tokenId,\r\n        string memory uri\r\n    ) public onlyRole(ADMIN_ROLE) {\r\n        _mint(to, tokenId, uri);\r\n    }\r\n    function transferByAdmin(\r\n        address holder,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public onlyRole(ADMIN_ROLE) {\r\n        _transfer(holder, to, tokenId);\r\n    }\r\n    function mintWithRODByAdmin(\r\n        address to,\r\n        uint256 rod,\r\n        uint256 tokenId,\r\n        string memory uri\r\n    ) public onlyRole(ADMIN_ROLE) {\r\n        address sender = _msgSender();\r\n        (bool success,) = address(RODCA).call(abi.encodeWithSignature(\"transferByAdmin(address,address,uint256)\", to, sender, rod));\r\n        require(success, \"failed to call transferByAdmin() in ROD contract\");\r\n        mintByAdmin(to, tokenId, uri);\r\n    }\r\n    function transferWithRODByAdmin(\r\n        uint256 tokenId,\r\n        address holder,\r\n        address buyer,\r\n        uint256 rod\r\n    ) public onlyRole(ADMIN_ROLE) {\r\n        (bool success,) = address(RODCA).call(abi.encodeWithSignature(\"transferByAdmin(address,address,uint256)\", buyer, holder, rod));\r\n        require(success, \"failed to call transferByAdmin() in ROD contract\");\r\n        transferByAdmin(holder, buyer, tokenId);\r\n    }\r\n    function airdropByAdmin(\r\n        address to,\r\n        uint256 tokenId,\r\n        string memory uri\r\n    ) public onlyRole(ADMIN_ROLE) {\r\n        AdminSale memory adminSale = getAdminSale(\"AD\");\r\n        require(adminSale.status, \"admin airdrop closed\");\r\n        require(adminSale.totalAmount > 0, \"amount sold out\");\r\n        require(!_exists(tokenId), \"token id already exists\");\r\n        _mint(to, tokenId, uri);\r\n        adminSales[\"AD\"].totalAmount = adminSale.totalAmount - 1;\r\n    }\r\n    function buyAdminSale(\r\n        string memory saleType,\r\n        uint256 tokenId,\r\n        string memory uri\r\n    ) public payable nonReentrant {\r\n        AdminSale memory adminSale = getAdminSale(saleType);\r\n        uint256 bnb = msg.value;\r\n        address buyer = _msgSender();\r\n        require(buyer.balance >= bnb, \"not enough BNB\");\r\n        require(adminSale.status, \"not on sale\");\r\n        require(bnb == adminSale.price, \"incorrect BNB value for sale\");\r\n        require(adminSale.totalAmount > 0, \"sold out\");\r\n        require(!_exists(tokenId), \"token id already exists\");\r\n        require(adminSale.members.length == 0, \"sale not for public\");\r\n        (bool sendToOwner,) = payable(owner()).call{value: bnb}(\"\");\r\n        require(sendToOwner, \"failed to send BNB for owner\");\r\n        if (adminSale.amountPerMember > 0) {\r\n            uint256 buyCount;\r\n            for (uint256 n; n < adminSale.buyers.length; n ++) {\r\n                if (adminSale.buyers[n] == buyer) {\r\n                    buyCount ++;\r\n                }\r\n            }\r\n            require(buyCount < adminSale.amountPerMember, \"already buyed as limit\");\r\n        }\r\n        _mint(buyer, tokenId, uri);\r\n        adminSales[saleType].buyers.push(buyer);\r\n        adminSales[saleType].totalAmount = adminSale.totalAmount - 1;\r\n    }\r\n    function buyAdminSaleByMember(\r\n        string memory saleType,\r\n        uint256 tokenId,\r\n        string memory uri\r\n    ) public payable nonReentrant {\r\n        AdminSale memory adminSale = getAdminSale(saleType);\r\n        uint256 bnb = msg.value;\r\n        address buyer = _msgSender();\r\n        require(buyer.balance >= bnb, \"not enough BNB\");\r\n        require(adminSale.status, \"not on sale\");\r\n        require(bnb == adminSale.price, \"incorrect bnb value for sale\");\r\n        require(adminSale.totalAmount > 0, \"sold out\");\r\n        require(!_exists(tokenId), \"token id already exists\");\r\n        require(adminSale.members.length > 0, \"cannot find member set\");\r\n        bool isMember = false;\r\n        for (uint256 i; i < adminSale.members.length; i ++) {\r\n            if (adminSale.members[i] == buyer) {\r\n                isMember = true;\r\n            }\r\n        }\r\n        require(isMember, \"buyer is not member for this sale\");\r\n        if (adminSale.amountPerMember > 0) {\r\n            uint256 buyCount;\r\n            for (uint256 n; n < adminSale.buyers.length; n ++) {\r\n                if (adminSale.buyers[n] == buyer) {\r\n                    buyCount ++;\r\n                }\r\n            }\r\n            require(buyCount < adminSale.amountPerMember, \"already buyed as limit\");\r\n        }\r\n        (bool sendToOwner,) = payable(owner()).call{value: bnb}(\"\");\r\n        require(sendToOwner, \"failed to send BNB for owner\");\r\n        _mint(buyer, tokenId, uri);\r\n        adminSales[saleType].buyers.push(buyer);\r\n        adminSales[saleType].totalAmount = adminSale.totalAmount - 1;\r\n    }\r\n    function setSale(\r\n        uint256 tokenId,\r\n        bool status,\r\n        bool isAuction,\r\n        address manager,\r\n        string memory unit,\r\n        uint256 price,\r\n        uint256 minBidAmount,\r\n        address topBidder,\r\n        uint256 topBidAmount\r\n    ) internal {\r\n        require(_exists(tokenId), \"token not exists\");\r\n        sales[tokenId] = Sale(status, isAuction, manager, unit, price, minBidAmount, topBidder, topBidAmount);\r\n    }\r\n    function switchSaleStatus(\r\n        uint256 tokenId\r\n    ) public onlyRole(ADMIN_ROLE) {\r\n        Sale memory sale = getSale(tokenId);\r\n        require(bytes(sale.unit).length > 0, \"token not on sale\");\r\n        if (sale.status) {\r\n            sales[tokenId].status = false;\r\n        }\r\n        if (!sale.status) {\r\n            sales[tokenId].status = true;\r\n        }\r\n    }\r\n    function unregisterSaleByHolder(\r\n        uint256 tokenId\r\n    ) public {\r\n        Sale memory sale = getSale(tokenId);\r\n        address holder = _msgSender();\r\n        require(ownerOf(tokenId) == holder, \"only holder can unregister sale\");\r\n        require(sale.status, \"token not on sale\");\r\n        require(sale.topBidAmount == 0, \"cannot cancel after bid\");\r\n        setSale(tokenId, false, false, address(0), \"\", 0, 0, address(0), 0);\r\n    }\r\n    function getSale(\r\n        uint256 tokenId\r\n    ) public view returns (Sale memory) {\r\n        return sales[tokenId];\r\n    }\r\n    function calculateSaleFee(\r\n        uint256 tokenId\r\n    ) public view returns (uint256, uint256) {\r\n        Sale memory sale = getSale(tokenId);\r\n        require(sale.status, \"token not on sale\");\r\n        uint256 value;\r\n        uint256 fee;\r\n        uint256 result;\r\n        if (sale.isAuction) {\r\n            value = sale.topBidAmount;\r\n        } else {\r\n            value = sale.price;\r\n        }\r\n        if (keccak256(abi.encode(sale.unit)) == keccak256(abi.encode(\"ROD\"))) {\r\n            fee = value * RODTransferFee / 10000;\r\n            result = value - fee;\r\n        }\r\n        if (keccak256(abi.encode(sale.unit)) == keccak256(abi.encode(\"BNB\"))) {\r\n            fee = value * BNBTransferFee / 10000;\r\n            result = value - fee;\r\n        }\r\n        return (fee, result);\r\n    }\r\n    function registerOnMarketByAdmin(\r\n        address seller,\r\n        uint256 tokenId,\r\n        uint256 isAuction,\r\n        address manager,\r\n        string memory unit,\r\n        uint256 price,\r\n        uint256 minBidAmount\r\n    ) public onlyRole(ADMIN_ROLE) {\r\n        require(ownerOf(tokenId) == seller, \"seller is not owner of token\");\r\n        require(!sales[tokenId].status, \"already on sale\");\r\n        require(isAuction < 2, \"invalid auction value\");\r\n        bool auction = false;\r\n        if (isAuction == 1) {\r\n            require(hasRole(ADMIN_ROLE, manager), \"invalid manager address\");\r\n            require(minBidAmount >= minPrice, \"bid amount must bigger than minimum price\");\r\n            auction = true;\r\n        }\r\n        if (isAuction == 0) {\r\n            require(price >= minPrice, \"price must bigger than minimum price\");\r\n        }\r\n        setSale(tokenId, true, auction, manager, unit, price, minBidAmount, address(0), 0);\r\n    }\r\n    function bidOnMarket(\r\n        uint256 tokenId\r\n    ) public payable nonReentrant {\r\n        Sale memory sale = getSale(tokenId);\r\n        address bidder = _msgSender();\r\n        address seller = ownerOf(tokenId);\r\n        uint bnb = msg.value;\r\n        require(bidder != seller, \"already holding token\");\r\n        require(bidder.balance >= bnb, \"not enough BNB to bid\");\r\n        require(sale.status, \"token not on sale\");\r\n        require(sale.isAuction, \"type of sale is not auction\");\r\n        require(keccak256(abi.encode(sale.unit)) == keccak256(abi.encode(\"BNB\")), \"sale does not for BNB\");\r\n        require(bnb >= sale.minBidAmount, \"BNB must bigger than minimum amount for bidding\");\r\n        require(bnb > sale.topBidAmount, \"BNB must bigger than current top bid amount\");\r\n        if (sale.price > 0) {\r\n            require(bnb <= sale.price, \"cannot bid BNB bigger than price\");\r\n        }\r\n        sales[tokenId].topBidder = bidder;\r\n        sales[tokenId].topBidAmount = bnb;\r\n        uint256 forManager = bnb - sale.topBidAmount;\r\n        (bool sendToManager,) = payable(sale.manager).call{value: forManager}(\"\");\r\n        require(sendToManager, \"failed to send BNB for owner\");\r\n        if (sale.topBidAmount > 0) {\r\n            (bool sendToCurrentTopBidder,) = payable(sale.topBidder).call{value: sale.topBidAmount}(\"\");\r\n            require(sendToCurrentTopBidder, \"failed to send BNB for current top bidder\");\r\n        }\r\n    }\r\n    function bidOnMarketByRODCA(\r\n        uint256 tokenId,\r\n        address bidder,\r\n        uint256 rod\r\n    ) public onlyRole(ADMIN_ROLE) returns (address, uint256, address) {\r\n        Sale memory sale = getSale(tokenId);\r\n        address seller = ownerOf(tokenId);\r\n        require(bidder != seller, \"already holding token\");\r\n        require(sale.status, \"token not on sale\");\r\n        require(sale.isAuction, \"type of sale is not auction\");\r\n        require(hasRole(ADMIN_ROLE, sale.manager), \"invalid manager address\");\r\n        require(keccak256(abi.encode(sale.unit)) == keccak256(abi.encode(\"ROD\")), \"sale does not for ROD\");\r\n        require(rod >= sale.minBidAmount, \"ROD must bigger than minimum amount for bidding\");\r\n        require(rod > sale.topBidAmount, \"ROD must bigger than current top bid amount\");\r\n        if (sale.price > 0) {\r\n            require(rod <= sale.price, \"cannot bid ROD bigger than price\");\r\n        }\r\n        sales[tokenId].topBidder = bidder;\r\n        sales[tokenId].topBidAmount = rod;\r\n        return (sale.topBidder, sale.topBidAmount, sale.manager);\r\n    }\r\n    function finishBidByAdmin(\r\n        uint256 tokenId\r\n    ) public payable onlyRole(ADMIN_ROLE) {\r\n        Sale memory sale = getSale(tokenId);\r\n        (, uint256 forSeller) = calculateSaleFee(tokenId);\r\n        require(_msgSender() == sale.manager, \"only manager can finish auction\");\r\n        require(msg.value == forSeller, \"invalid BNB value for seller\");\r\n        require(sale.status, \"token not on sale\");\r\n        require(sale.isAuction, \"type of sale is not auction\");\r\n        require(keccak256(abi.encode(sale.unit)) == keccak256(abi.encode(\"BNB\")), \"sale does not for BNB\");\r\n        require(sale.topBidder !=  address(0), \"no bid for sale\");\r\n        setSale(tokenId, false, false, address(0), \"\", 0, 0, address(0), 0);\r\n        if (sale.topBidAmount > 0) {\r\n            address seller = ownerOf(tokenId);\r\n            _transfer(seller, sale.topBidder, tokenId);\r\n            (bool sendToSeller,) = payable(seller).call{value: forSeller}(\"\");\r\n            require(sendToSeller, \"failed to send BNB for seller\");\r\n            emit SaleTransferred(sale.unit, sale.price, sale.topBidder, sale.topBidAmount);\r\n        }   \r\n    }\r\n    function finishRODBidByAdmin(\r\n        uint256 tokenId\r\n    ) public onlyRole(ADMIN_ROLE) {\r\n        Sale memory sale = getSale(tokenId);\r\n        (, uint256 forSeller) = calculateSaleFee(tokenId);\r\n        require(_msgSender() == sale.manager, \"only manager can finish auction\");\r\n        require(sale.status, \"token not on sale\");\r\n        require(sale.isAuction, \"type of sale is not auction\");\r\n        require(keccak256(abi.encode(sale.unit)) == keccak256(abi.encode(\"ROD\")), \"sale does not for ROD\");\r\n        require(sale.topBidder !=  address(0), \"no bid for sale\");\r\n        setSale(tokenId, false, false, address(0), \"\", 0, 0, address(0), 0);\r\n        if (sale.topBidAmount > 0) {\r\n            address seller = ownerOf(tokenId);\r\n            _transfer(ownerOf(tokenId), sale.topBidder, tokenId);\r\n            (bool sendToSeller,) = address(RODCA).call(abi.encodeWithSignature(\"transferByAdmin(address,address,uint256)\", sale.manager, seller, forSeller));\r\n            require(sendToSeller, \"failed to send BNB for seller\");\r\n            emit SaleTransferred(sale.unit, sale.price, sale.topBidder, sale.topBidAmount);\r\n        }\r\n    }\r\n    function transferOnMarket(\r\n        uint256 tokenId\r\n    ) public payable nonReentrant {\r\n        Sale memory sale = getSale(tokenId);\r\n        uint256 bnb = msg.value;\r\n        address buyer = _msgSender();\r\n        address seller = ownerOf(tokenId);\r\n        require(buyer != seller, \"already holding token\");\r\n        require(sale.status, \"token not on sale\");\r\n        require(!sale.isAuction, \"type of sale is auction\");\r\n        require(keccak256(abi.encode(sale.unit)) == keccak256(abi.encode(\"BNB\")), \"sale does not for BNB\");\r\n        require(sale.price == bnb, \"incorrect amount of BNB\");\r\n        require(buyer.balance >= sale.price, \"not enough BNB to transfer\");\r\n        (uint256 forOwner, uint256 forSeller) = calculateSaleFee(tokenId);\r\n        if (forOwner > 0) {\r\n            (bool sendToOwner,) = payable(owner()).call{value: forOwner}(\"\");\r\n            require(sendToOwner, \"failed to send BNB for owner\");\r\n        }\r\n        (bool sendToSeller,) = payable(seller).call{value: forSeller}(\"\");\r\n        require(sendToSeller, \"failed to send BNB for seller\");\r\n        setSale(tokenId, false, false, address(0), \"\", 0, 0, address(0), 0);\r\n        _transfer(seller, buyer, tokenId);\r\n        emit SaleTransferred(sale.unit, sale.price, buyer, sale.price);\r\n    }\r\n    function transferOnMarketByRODCA(\r\n        uint256 tokenId,\r\n        address buyer,\r\n        uint256 rod\r\n    ) public onlyRole(ADMIN_ROLE) returns (uint256, uint256, address) {\r\n        Sale memory sale = getSale(tokenId);\r\n        address seller = ownerOf(tokenId);\r\n        require(buyer != seller, \"already holding token\");\r\n        require(sale.status, \"token not on sale\");\r\n        require(!sale.isAuction, \"type of sale is auction\");\r\n        require(keccak256(abi.encode(sale.unit)) == keccak256(abi.encode(\"ROD\")), \"sale does not for ROD\");\r\n        require(sale.price == rod, \"incorrect amount of ROD\");\r\n        (uint256 forOwner, uint256 forSeller) = calculateSaleFee(tokenId);\r\n        setSale(tokenId, false, false, address(0), \"\", 0, 0, address(0), 0);\r\n        _transfer(seller, buyer, tokenId);\r\n        emit SaleTransferred(sale.unit, sale.price, buyer, sale.price);\r\n        return (forOwner, forSeller, seller);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"unit\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"topBidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topBidAmount\",\"type\":\"uint256\"}],\"name\":\"SaleTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"airdropByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bidOnMarket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rod\",\"type\":\"uint256\"}],\"name\":\"bidOnMarketByRODCA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"saleType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"buyAdminSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"saleType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"buyAdminSaleByMember\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"calculateSaleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"finishBidByAdmin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"finishRODBidByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getAdminSale\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPerMember\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct MetagaugeNFT.AdminSale\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSale\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAuction\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"unit\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"topBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"topBidAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct MetagaugeNFT.Sale\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"saleType\",\"type\":\"string\"}],\"name\":\"initializeAdminSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mintByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mintWithRODByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"isAuction\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"unit\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBidAmount\",\"type\":\"uint256\"}],\"name\":\"registerOnMarketByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"revokeAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"saleType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"setAdminSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"saleType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPerMember\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"setAdminSaleForMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_MGRCA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_RODCA\",\"type\":\"address\"}],\"name\":\"setCA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_RODTransferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BNBTransferFee\",\"type\":\"uint256\"}],\"name\":\"setOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"switchSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferOnMarket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rod\",\"type\":\"uint256\"}],\"name\":\"transferOnMarketByRODCA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rod\",\"type\":\"uint256\"}],\"name\":\"transferWithRODByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unregisterSaleByHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MetagaugeNFT", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aea95933032c7cd82649863c98a23c1ee50a70ad1d9f5368ce9bd4c7bf25d346"}