{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2235\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/__mocks__/PriorityQueueMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\n/***\\n *      ______             _______   __\\n *     /      \\\\           |       \\\\ |  \\\\\\n *    |  $$$$$$\\\\ __    __ | $$$$$$$\\\\| $$  ______    _______  ______ ____    ______\\n *    | $$$\\\\| $$|  \\\\  /  \\\\| $$__/ $$| $$ |      \\\\  /       \\\\|      \\\\    \\\\  |      \\\\\\n *    | $$$$\\\\ $$ \\\\$$\\\\/  $$| $$    $$| $$  \\\\$$$$$$\\\\|  $$$$$$$| $$$$$$\\\\$$$$\\\\  \\\\$$$$$$\\\\\\n *    | $$\\\\$$\\\\$$  >$$  $$ | $$$$$$$ | $$ /      $$ \\\\$$    \\\\ | $$ | $$ | $$ /      $$\\n *    | $$_\\\\$$$$ /  $$$$\\\\ | $$      | $$|  $$$$$$$ _\\\\$$$$$$\\\\| $$ | $$ | $$|  $$$$$$$\\n *     \\\\$$  \\\\$$$|  $$ \\\\$$\\\\| $$      | $$ \\\\$$    $$|       $$| $$ | $$ | $$ \\\\$$    $$\\n *      \\\\$$$$$$  \\\\$$   \\\\$$ \\\\$$       \\\\$$  \\\\$$$$$$$ \\\\$$$$$$$  \\\\$$  \\\\$$  \\\\$$  \\\\$$$$$$$\\n *\\n *\\n *\\n */\\n\\npragma solidity 0.8.13;\\n\\nimport {PriorityQueue} from \\\"../libraries/PriorityQueue.sol\\\";\\n\\ncontract PriorityQueueMock {\\n    using PriorityQueue for PriorityQueue.Heap;\\n\\n    PriorityQueue.Heap internal _queue;\\n\\n    function enqueue(uint256 key, uint256 value) external {\\n        _queue.enqueue(key, value);\\n    }\\n\\n    function dequeue() external returns (uint256) {\\n        return _queue.dequeue();\\n    }\\n\\n    function headKey() external view returns (uint256) {\\n        return _queue.headKey();\\n    }\\n\\n    function headValue() external view returns (uint256) {\\n        return _queue.headValue();\\n    }\\n\\n    function numBy(uint256 key) external view returns (uint256) {\\n        return _queue.numBy(key);\\n    }\\n\\n    function length() external view returns (uint256) {\\n        return _queue.size;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/PriorityQueue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\n/***\\n *      ______             _______   __\\n *     /      \\\\           |       \\\\ |  \\\\\\n *    |  $$$$$$\\\\ __    __ | $$$$$$$\\\\| $$  ______    _______  ______ ____    ______\\n *    | $$$\\\\| $$|  \\\\  /  \\\\| $$__/ $$| $$ |      \\\\  /       \\\\|      \\\\    \\\\  |      \\\\\\n *    | $$$$\\\\ $$ \\\\$$\\\\/  $$| $$    $$| $$  \\\\$$$$$$\\\\|  $$$$$$$| $$$$$$\\\\$$$$\\\\  \\\\$$$$$$\\\\\\n *    | $$\\\\$$\\\\$$  >$$  $$ | $$$$$$$ | $$ /      $$ \\\\$$    \\\\ | $$ | $$ | $$ /      $$\\n *    | $$_\\\\$$$$ /  $$$$\\\\ | $$      | $$|  $$$$$$$ _\\\\$$$$$$\\\\| $$ | $$ | $$|  $$$$$$$\\n *     \\\\$$  \\\\$$$|  $$ \\\\$$\\\\| $$      | $$ \\\\$$    $$|       $$| $$ | $$ | $$ \\\\$$    $$\\n *      \\\\$$$$$$  \\\\$$   \\\\$$ \\\\$$       \\\\$$  \\\\$$$$$$$ \\\\$$$$$$$  \\\\$$  \\\\$$  \\\\$$  \\\\$$$$$$$\\n *\\n *\\n *\\n */\\n\\npragma solidity 0.8.13;\\n\\nlibrary PriorityQueue {\\n    struct Heap {\\n        mapping(uint256 => uint256) next;\\n        mapping(uint256 => uint256) prev;\\n        mapping(uint256 => uint256) values;\\n        uint256 size;\\n    }\\n\\n    function enqueue(\\n        PriorityQueue.Heap storage self,\\n        uint256 key,\\n        uint256 value\\n    ) internal {\\n        require(key != 0 && value != 0, \\\"!ZV\\\");\\n        if (!contains(self, key)) {\\n            if (headKey(self) > key) {\\n                _prepend(self, key);\\n            } else if (tailKey(self) < key) {\\n                _append(self, key);\\n            } else {\\n                uint256 i = tailKey(self);\\n                for (; i != 0; ) {\\n                    i = self.prev[i];\\n                    if (i < key) {\\n                        _insert(self, i, key, self.next[i]);\\n                        break;\\n                    }\\n                }\\n                require(i != 0, \\\"!ALG\\\");\\n            }\\n        }\\n        self.values[key] += value;\\n    }\\n\\n    function dequeue(PriorityQueue.Heap storage self)\\n        internal\\n        returns (uint256 value)\\n    {\\n        uint256 key = self.next[0];\\n        value = self.values[key];\\n        delete self.values[key];\\n        _remove(self, key);\\n    }\\n\\n    function headKey(PriorityQueue.Heap storage self)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return self.next[0];\\n    }\\n\\n    function tailKey(PriorityQueue.Heap storage self)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return self.prev[0];\\n    }\\n\\n    function headValue(PriorityQueue.Heap storage self)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return self.values[headKey(self)];\\n    }\\n\\n    function tailValue(PriorityQueue.Heap storage self)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return self.values[tailKey(self)];\\n    }\\n\\n    function numBy(PriorityQueue.Heap storage self, uint256 key)\\n        internal\\n        view\\n        returns (uint256 num)\\n    {\\n        if (self.size != 0 && key != 0) {\\n            uint256 i = headKey(self);\\n            for (; i != 0; ) {\\n                if (i > key) {\\n                    break;\\n                }\\n                unchecked {\\n                    i = self.next[i];\\n                    num++;\\n                }\\n            }\\n        }\\n    }\\n\\n    function contains(Heap storage self, uint256 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return headKey(self) == key || self.prev[key] != 0;\\n    }\\n\\n    function _append(Heap storage self, uint256 key) private {\\n        _insert(self, tailKey(self), key, 0);\\n    }\\n\\n    function _prepend(Heap storage self, uint256 key) private {\\n        _insert(self, 0, key, headKey(self));\\n    }\\n\\n    function _insert(\\n        Heap storage self,\\n        uint256 prev_,\\n        uint256 key,\\n        uint256 next_\\n    ) private {\\n        require(key != 0, \\\"!ERR\\\");\\n        self.next[prev_] = key;\\n        self.next[key] = next_;\\n        self.prev[next_] = key;\\n        self.prev[key] = prev_;\\n        self.size++;\\n    }\\n\\n    function _remove(Heap storage self, uint256 key) private {\\n        require(key != 0 && contains(self, key), \\\"!ERR\\\");\\n        self.next[self.prev[key]] = self.next[key];\\n        self.prev[self.next[key]] = self.prev[key];\\n        delete self.next[key];\\n        delete self.prev[key];\\n        self.size--;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"dequeue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"enqueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"headKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"headValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"numBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PriorityQueueMock", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "2235", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "BSL 1.1", "Proxy": "0", "Implementation": "", "SwarmSource": ""}