{"SourceCode": "# @version 0.3.7\r\n\"\"\"\r\n@title Token\r\n@author Liquid Lab Company Limited\r\n@license UNLICENSED\r\n@notice Implementation of ERC-20 token standard, with Burnable, Ownable, and Mintable support\r\n@dev Constructor does not initialize contract completely adopting the Initializable pattern\r\n@see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\nfrom vyper.interfaces import ERC20Detailed\r\n\r\nimplements: ERC20\r\nimplements: ERC20Detailed\r\n\r\n############### events ###############\r\nevent Approval:\r\n    owner: indexed(address)\r\n    spender: indexed(address)\r\n    value: uint256\r\n\r\nevent OwnershipTransferred:\r\n    # Emits smart contract ownership transfer from current to new owner\r\n    previousOwner: indexed(address)\r\n    newOwner: indexed(address)\r\n\r\nevent Transfer:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    value: uint256\r\n\r\nname: public(String[32])\r\nsymbol: public(String[32])\r\ndecimals: public(uint8)\r\n\r\n# Initializable pattern\r\n_initialized: bool\r\n\r\n# NOTE: By declaring `balanceOf` as public, vyper automatically generates a 'balanceOf()' getter\r\n#       method to allow access to account balances.\r\n#       The _KeyType will become a required parameter for the getter and it will return _ValueType.\r\n#       See: https://vyper.readthedocs.io/en/v0.1.0-beta.8/types.html?highlight=getter#mappings\r\nbalanceOf: public(HashMap[address, uint256])\r\n# By declaring `allowance` as public, vyper automatically generates the `allowance()` getter\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\n# By declaring `totalSupply` as public, we automatically create the `totalSupply()` getter\r\ntotalSupply: public(uint256)\r\n\r\n# the contract owner\r\n# not part of the core spec but a common feature for NFT projects\r\nowner: public(address)                          \r\n\r\n############### constructor & initializable ###############\r\n@external\r\ndef __init__():\r\n    self._initialized = False\r\n\r\n@external\r\ndef initialize(_name: String[32], _symbol: String[32], _decimals: uint8, _supply: uint256) -> bool:\r\n    assert not self._initialized, \"Contract already initialized\"\r\n    assert _supply <= max_value(uint256) / 10 ** convert(_decimals, uint256), \"Supply error\"\r\n    init_supply: uint256 = _supply * 10 ** convert(_decimals, uint256)\r\n    self.name = _name\r\n    self.symbol = _symbol\r\n    self.decimals = _decimals\r\n    self.balanceOf[msg.sender] = init_supply\r\n    self.totalSupply = init_supply\r\n    self.owner = msg.sender\r\n    log Transfer(empty(address), msg.sender, init_supply)\r\n    # Initializable pattern completed\r\n    self._initialized = True\r\n    return self._initialized\r\n\r\n############### ERC-20 methods ###############\r\n@external\r\ndef transfer(_to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @dev Transfer token for a specified address\r\n    @param _to The address to transfer to.\r\n    @param _value The amount to be transferred.\r\n    \"\"\"\r\n    assert _to != empty(address), \"Transfer to zero address not allowed.\"\r\n    # NOTE: vyper does not allow underflows\r\n    #       so the following subtraction would revert on insufficient balance\r\n    self.balanceOf[msg.sender] -= _value\r\n    self.balanceOf[_to] += _value\r\n    log Transfer(msg.sender, _to, _value)\r\n    return True\r\n\r\n@external\r\ndef transferFrom(_from : address, _to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n     @dev Transfer tokens from one address to another.\r\n     @param _from address The address which you want to send tokens from\r\n     @param _to address The address which you want to transfer to\r\n     @param _value uint256 the amount of tokens to be transferred\r\n    \"\"\"\r\n    assert _to != empty(address), \"Transfer to zero address not allowed.\"\r\n    # NOTE: vyper does not allow underflows\r\n    #       so the following subtraction would revert on insufficient balance\r\n    self.balanceOf[_from] -= _value\r\n    self.balanceOf[_to] += _value\r\n    # NOTE: vyper does not allow underflows\r\n    #      so the following subtraction would revert on insufficient allowance\r\n    self.allowance[_from][msg.sender] -= _value\r\n    log Transfer(_from, _to, _value)\r\n    return True\r\n\r\n@external\r\ndef approve(_spender : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n         Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n         and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n         race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n         https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    @param _spender The address which will spend the funds.\r\n    @param _value The amount of tokens to be spent.\r\n    \"\"\"\r\n    self.allowance[msg.sender][_spender] = _value\r\n    log Approval(msg.sender, _spender, _value)\r\n    return True\r\n\r\n############### mintable ###############\r\n@external\r\ndef mint(_to: address, _value: uint256):\r\n    \"\"\"\r\n    @dev Mint an amount of the token and assigns it to an account.\r\n         This encapsulates the modification of balances such that the\r\n         proper events are emitted.\r\n    @param _to The account that will receive the created tokens.\r\n    @param _value The amount that will be created.\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"Ownable: caller is not the owner\"\r\n    assert _to != empty(address), \"Cannot mint to empty address\"\r\n    self.totalSupply += _value\r\n    self.balanceOf[_to] += _value\r\n    log Transfer(empty(address), _to, _value)\r\n\r\n############### burnable ###############\r\n@internal\r\ndef _burn(_from: address, _value: uint256):\r\n    \"\"\"\r\n    @dev Internal function that burns an amount of the token of a given\r\n         account.\r\n    @param _from The account whose tokens will be burned.\r\n    @param _value The amount that will be burned.\r\n    \"\"\"\r\n    assert _from != empty(address), \"Cannot burn from empty address\"\r\n    # NOTE: vyper does not allow underflows\r\n    #       so the following subtraction would revert on insufficient balance\r\n    self.totalSupply -= _value\r\n    self.balanceOf[_from] -= _value\r\n    log Transfer(_from, empty(address), _value)\r\n\r\n@external\r\ndef burn(_value: uint256):\r\n    \"\"\"\r\n    @dev Burn an amount of the token of msg.sender.\r\n    @param _value The amount that will be burned.\r\n    \"\"\"\r\n    self._burn(msg.sender, _value)\r\n\r\n@external\r\ndef burnFrom(_from: address, _value: uint256):\r\n    \"\"\"\r\n    @dev Burn an amount of the token from a given account.\r\n    @param _from The account whose tokens will be burned.\r\n    @param _value The amount that will be burned.\r\n    \"\"\"\r\n    # NOTE: vyper does not allow underflows\r\n    #       so the following subtraction would revert on insufficient balance\r\n    self.allowance[_from][msg.sender] -= _value\r\n    self._burn(_from, _value)\r\n\r\n############### ownable ###############\r\n@external\r\ndef transferOwnership(newOwner: address):\r\n    \"\"\"\r\n    @dev Transfer the ownership. Checks for current owner and prevent transferring to zero address\r\n    @dev emits an OwnershipTransferred event with the old and new owner addresses\r\n    @param newOwner The address of the new owner.\r\n    \"\"\"\r\n    assert self.owner == msg.sender, \"Ownable: caller is not the owner\"\r\n    assert newOwner != empty(address), \"Ownable: new owner is the zero address\"\r\n    oldOwner: address = self.owner\r\n    self.owner = newOwner\r\n    log OwnershipTransferred(oldOwner, newOwner)\r\n\r\n@external\r\ndef renounceOwnership():\r\n    \"\"\"\r\n    @dev Transfer the ownership to the zero address, this will lock the contract\r\n    @dev emits an OwnershipTransferred event with the old and new zero owner addresses\r\n    \"\"\"\r\n    assert self.owner == msg.sender, \"Ownable: caller is not the owner\"\r\n    oldOwner: address = self.owner\r\n    self.owner = empty(address)\r\n    log OwnershipTransferred(oldOwner, empty(address))", "ABI": "[{\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_supply\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"burn\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"burnFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]", "ContractName": "Token", "CompilerVersion": "vyper:0.3.7", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}