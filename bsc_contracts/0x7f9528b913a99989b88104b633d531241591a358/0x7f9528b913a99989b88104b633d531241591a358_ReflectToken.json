{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/reflect/ReflectToken.sol\": {\r\n      \"content\": \"/*\\n\\n        \u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\\n        \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\\n        \u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2554\u255d\u2591\\n        \u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2591\\n        \u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2557\\n        \u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\\n\\n Token is created with CryptEx token constructor, uses Reflect.finance model.\\n\\n \u2022 website:                           https://cryptexlock.me\\n \u2022 medium:                            https://medium.com/cryptex-locker\\n \u2022 Telegram Announcements Channel:    https://t.me/CryptExAnnouncements\\n \u2022 Telegram Main Channel:             https://t.me/cryptexlocker\\n \u2022 Twitter Page:                      https://twitter.com/ExLocker\\n \u2022 Reddit:                            https://www.reddit.com/r/CryptExLocker/\\n\\n SPDX-License-Identifier: UNLICENSED\\n\\n*/\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"../ITokenConstructorFactory.sol\\\";\\n\\ncontract ReflectToken is IERC20, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    mapping(address => uint256) private _reflections;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    mapping(address => bool) public excludedFromFee;\\n    mapping(address => bool) public excludedFromReward;\\n    uint256 private _totalRatedBalance;\\n    uint256 private _totalRatedReflection;\\n\\n    uint256 public totalFees;\\n    uint256 private _totalSupply;\\n\\n    bool public BRN_ENABLED;\\n    bool public MRK_ENABLED;\\n    bool public REF_ENABLED;\\n\\n    uint256 public taxFee;\\n    uint256 public liqFee;\\n    uint256 public brnFee;\\n    uint256 public mrkFee;\\n    uint256 public refFee;\\n    uint256 public feeLimit; // up to FLOAT_FACTOR / 2\\n    uint256 private constant TX_FACTOR = 1e3; // txLimit <= totalSupply / TX_FACTOR\\n    uint256 private constant FLOAT_FACTOR = 1e4;\\n    uint256 private constant MAX = type(uint256).max;\\n\\n    IUniswapV2Router02 public swapRouter;\\n    mapping(address => bool) public swapPairs;\\n    address private swapWETH;\\n\\n    bool private _liqInProgress;\\n    bool public liqStatus;\\n    uint256 private liqThreshold;\\n    uint256 public txLimit;\\n    address public liquidityAddress;\\n    address public marketingAddress;\\n    mapping(address => address) private referrals;\\n\\n    address public factory;\\n\\n    event UpdateFees(\\n        uint256 newTaxFee,\\n        uint256 newLiqFee,\\n        uint256 newBrnFee,\\n        uint256 newMrkFee,\\n        uint256 newRefFee\\n    );\\n    event UpdateTxLimit(uint256 newTxLimit);\\n    event UpdateLiqThreshold(uint256 newLiqThreshold);\\n    event UpdateLiqStatus(bool newLiqStatus);\\n    event UpdateLiquidityAddress(address newLiquidityAddress);\\n    event UpdateMarketingAddress(address newMarketingkAddress);\\n    event UpdateSwapRouter(address newRouter, address newPair);\\n    event LiquidityAdded(\\n        uint256 indexed tokensToLiqudity,\\n        uint256 indexed bnbToLiquidity\\n    );\\n    event ReferralSet(address indexed referrer, address referee);\\n    event SwapPairUpdated(address indexed pair);\\n    event DistributionProceeds(uint256 amount);\\n    event ExcludedFromReward(address indexed account);\\n    event IncludedInReward(address indexed account);\\n    event ExcludedFromFee(address indexed account);\\n    event IncludedInFee(address indexed account);\\n    event RecoveredLockedTokens(address indexed token, address indexed receiver, uint256 amount);\\n\\n    modifier lockTheSwap() {\\n        _liqInProgress = true;\\n        _;\\n        _liqInProgress = false;\\n    }\\n\\n    /**\\n    * @param flags_ boolean parameters:\\n                    [0] burning fee on transfers, cannot be updated after creation\\n                    [1] marketing fee on transfers, cannot be updated after creation\\n                    [2] referrals fee on transfers, cannot be updated after creation\\n                    [3] autoLiquify flag, updatable by the owner after creation\\n    * @param feesAndLimits_ uint256 parameters:\\n                    [0] totalSupply, initial token amount in wei\\n                    [1] taxFee on transfers, updatable within limits after creation\\n                    [2] liquidityFee on transfers, updatable within limits after creation\\n                    [3] burnFee on transfers, only if _flags[0] is set\\n                    [4] marketingFee on transfers, only if _flags[1] is set\\n                    [5] referralFee on transfers, only if _flags[2] is set\\n                    [6] feeLimit of total fees, cannot be updated after creation\\n                    [7] liquidityThreshold, min amount of tokens to be swapped on transfers\\n                    [8] txLimit, max amount of transfer for non-privileged users\\n    * @param addresses_ address parameters:\\n                    [0] owner, receives totalSupply and controls the parameters\\n                    [1] Uniswap-like router for autoLiquify on transfers, must have WETH() function\\n                    [2] liquidityAddress to accumulate LP tokens from autoLiquify process\\n                    [3] marketingAddress, only if _flags[1] is set\\n    */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        bool[4] memory flags_,\\n        uint256[9] memory feesAndLimits_,\\n        address[4] memory addresses_,\\n        address _factory\\n    ) {\\n        require(bytes(name_).length != 0, \\\"Empty name\\\");\\n        require(bytes(symbol_).length != 0, \\\"Empty symbol\\\");\\n        require(feesAndLimits_[0] != 0, \\\"Zero total supply\\\");\\n        require(addresses_[1] != address(0), \\\"Zero Router address\\\");\\n\\n        require(feesAndLimits_[6] <= FLOAT_FACTOR / 2, \\\"Wrong limit\\\");\\n        require(\\n            feesAndLimits_[1] +\\n                feesAndLimits_[2] +\\n                feesAndLimits_[3] +\\n                feesAndLimits_[4] +\\n                feesAndLimits_[5] <=\\n                feesAndLimits_[6],\\n            \\\"Fee's too high\\\"\\n        );\\n\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n\\n        _totalSupply = feesAndLimits_[0];\\n        uint256 maxReflection = MAX / feesAndLimits_[0];\\n        _totalRatedBalance = feesAndLimits_[0];\\n        _totalRatedReflection = maxReflection;\\n        _reflections[addresses_[0]] = maxReflection;\\n\\n        BRN_ENABLED = flags_[0];\\n        MRK_ENABLED = flags_[1];\\n        REF_ENABLED = flags_[2];\\n\\n        taxFee = feesAndLimits_[1];\\n        liqFee = feesAndLimits_[2];\\n        liquidityAddress = addresses_[2];\\n        liqStatus = flags_[3];\\n        feeLimit = feesAndLimits_[6];\\n\\n        if (flags_[0]) {\\n            brnFee = feesAndLimits_[3];\\n        }\\n        if (flags_[1]) {\\n            mrkFee = feesAndLimits_[4];\\n            marketingAddress = addresses_[3];\\n        }\\n        if (flags_[2]) {\\n            refFee = feesAndLimits_[5];\\n            if (!flags_[1]) marketingAddress = addresses_[3];\\n        }\\n\\n        require(feesAndLimits_[8] >= feesAndLimits_[0] / (TX_FACTOR ** 2), \\\"txLimit is too low\\\");\\n        require(\\n            feesAndLimits_[8] <= feesAndLimits_[0] / TX_FACTOR,\\n            \\\"txLimit is too high\\\"\\n        );\\n        require(\\n            feesAndLimits_[7] <= feesAndLimits_[8],\\n            \\\"liqThreshold is too high\\\"\\n        );\\n        txLimit = feesAndLimits_[8];\\n        liqThreshold = feesAndLimits_[7];\\n\\n        factory = _factory;\\n        require(ITokenConstructorFactory(_factory).isGoodRouter(addresses_[1]), \\\"router is not allowed\\\");\\n        address _weth = IUniswapV2Router02(addresses_[1]).WETH();\\n        require(_weth != address(0), \\\"Wrong router\\\");\\n        swapWETH = _weth;\\n        address _swapPair = IUniswapV2Factory(\\n            IUniswapV2Router02(addresses_[1]).factory()\\n        ).createPair(address(this), _weth);\\n        _updateSwapPair(_swapPair);\\n        swapRouter = IUniswapV2Router02(addresses_[1]);\\n        excludeFromReward(_swapPair);\\n        excludeFromFee(addresses_[0]);\\n\\n        transferOwnership(addresses_[0]);\\n        emit Transfer(address(0), addresses_[0], feesAndLimits_[0]);\\n        emit UpdateFees(\\n            feesAndLimits_[1],\\n            feesAndLimits_[2],\\n            feesAndLimits_[3],\\n            feesAndLimits_[4],\\n            feesAndLimits_[5]\\n        );\\n        emit UpdateTxLimit(feesAndLimits_[8]);\\n        emit UpdateLiqThreshold(feesAndLimits_[7]);\\n        emit UpdateLiqStatus(flags_[3]);\\n        emit UpdateLiquidityAddress(addresses_[2]);\\n        emit UpdateMarketingAddress(addresses_[3]);\\n    }\\n\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() external view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function getOwner() external view returns (address) {\\n        return owner();\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (excludedFromReward[account]) return _balances[account];\\n        (uint256 reflection, uint256 balance) = _getRate();\\n        return _reflections[account] * balance / reflection;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner_, address spender)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner_][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function _approve(\\n        address owner_,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(owner_ != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner_][spender] = amount;\\n        emit Approval(owner_, spender, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n        _transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n        return true;\\n    }\\n\\n    function distribute(uint256 amount) external {\\n        require(!excludedFromReward[msg.sender], \\\"Not for excluded\\\");\\n        (uint256 reflection, uint256 balance) = _getRate();\\n        uint256 rAmount = amount * reflection / balance;\\n        uint256 userBalance = _reflections[msg.sender];\\n        require(userBalance >= rAmount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _reflections[msg.sender] = userBalance - rAmount;\\n        _totalRatedReflection -= rAmount;\\n        totalFees += amount;\\n\\n        emit DistributionProceeds(amount);\\n    }\\n\\n    function excludeFromReward(address account) public onlyOwner {\\n        require(!excludedFromReward[account], \\\"Already excluded\\\");\\n\\n        uint256 currentReflection = _reflections[account];\\n        if (currentReflection > 0) {\\n            (uint256 reflection, uint256 balance) = _getRate();\\n            uint256 currentBalance = currentReflection * balance / reflection;\\n            _balances[account] = currentBalance;\\n            _totalRatedBalance -= currentBalance;\\n            _totalRatedReflection -= currentReflection;\\n\\n            _reflections[account] = 0;\\n        }\\n\\n        excludedFromReward[account] = true;\\n\\n        emit ExcludedFromReward(account);\\n    }\\n\\n    function includeInReward(address account) external onlyOwner {\\n        require(excludedFromReward[account], \\\"Not excluded\\\");\\n\\n        uint256 currentBalance = _balances[account];\\n        if (currentBalance > 0) {\\n            (uint256 reflection, uint256 balance) = _getRate();\\n            uint256 currentReflection = currentBalance * reflection / balance;\\n\\n            _totalRatedBalance += currentBalance;\\n            _totalRatedReflection += currentReflection;\\n            _reflections[account] = currentReflection;\\n\\n            _balances[account] = 0;\\n        }\\n\\n        excludedFromReward[account] = false;\\n\\n        emit IncludedInReward(account);\\n    }\\n\\n    function excludeFromFee(address account) public onlyOwner {\\n        require(!swapPairs[account], \\\"Not for Pair address\\\");\\n        excludedFromFee[account] = true;\\n\\n        emit ExcludedFromFee(account);\\n    }\\n\\n    function includeInFee(address account) external onlyOwner {\\n        delete excludedFromFee[account];\\n\\n        emit IncludedInFee(account);\\n    }\\n\\n    function setFee(\\n        uint256 newTaxFee,\\n        uint256 newLiqFee,\\n        uint256 newBrnFee,\\n        uint256 newMrkFee,\\n        uint256 newRefFee\\n    ) external onlyOwner {\\n        require(\\n            newTaxFee + newLiqFee + newBrnFee + newMrkFee + newRefFee <=\\n                feeLimit,\\n            \\\"Fee's too high\\\"\\n        );\\n        taxFee = newTaxFee;\\n        liqFee = newLiqFee;\\n\\n        if (BRN_ENABLED) {\\n            brnFee = newBrnFee;\\n        }\\n        if (MRK_ENABLED) {\\n            mrkFee = newMrkFee;\\n        }\\n        if (REF_ENABLED) {\\n            refFee = newRefFee;\\n        }\\n\\n        emit UpdateFees(newTaxFee, newLiqFee, brnFee, mrkFee, refFee);\\n    }\\n\\n    function setLiquifyStatus(bool newStatus) external onlyOwner {\\n        liqStatus = newStatus;\\n\\n        emit UpdateLiqStatus(newStatus);\\n    }\\n\\n    function setLiquifyThreshold(uint256 newThreshold) external onlyOwner {\\n        require(newThreshold <= txLimit, \\\"Threshold exceeds txLimit\\\");\\n        liqThreshold = newThreshold;\\n\\n        emit UpdateLiqThreshold(newThreshold);\\n    }\\n\\n    function setLiquidyAddress(address newLiquidityAddress) external onlyOwner {\\n        require(newLiquidityAddress != address(0), \\\"zero address\\\");\\n        liquidityAddress = newLiquidityAddress;\\n\\n        emit UpdateLiquidityAddress(newLiquidityAddress);\\n    }\\n\\n    function setMarketingAddress(address newMarketingAddress)\\n        external\\n        onlyOwner\\n    {\\n        require(MRK_ENABLED || REF_ENABLED, \\\"Denied\\\");\\n        require(newMarketingAddress != address(0), \\\"Zero address\\\");\\n        marketingAddress = newMarketingAddress;\\n\\n        emit UpdateMarketingAddress(newMarketingAddress);\\n    }\\n\\n    function setReferral(address referralAddress) external {\\n        require(REF_ENABLED, \\\"Denied\\\");\\n        referrals[msg.sender] = referralAddress;\\n\\n        emit ReferralSet(referralAddress, msg.sender);\\n    }\\n\\n    function setTxLimit(uint256 newTxLimit) external onlyOwner {\\n        require(newTxLimit >= liqThreshold, \\\"txLimit is below liqThreshold\\\");\\n        require(newTxLimit >= _totalSupply / (TX_FACTOR ** 2), \\\"txLimit is too low\\\");\\n        require(newTxLimit <= _totalSupply / TX_FACTOR, \\\"txLimit is too high\\\");\\n        txLimit = newTxLimit;\\n\\n        emit UpdateTxLimit(newTxLimit);\\n    }\\n\\n    function setSwapRouter(IUniswapV2Router02 newRouter) external onlyOwner {\\n        address newPair = IUniswapV2Factory(newRouter.factory()).getPair(\\n            address(this),\\n            newRouter.WETH()\\n        );\\n        require(newPair != address(0), \\\"Pair doesn't exist\\\");\\n        require(ITokenConstructorFactory(factory).isGoodRouter(address(newRouter)), \\\"router is not allowed\\\");\\n        swapRouter = newRouter;\\n        _updateSwapPair(newPair);\\n        swapWETH = newRouter.WETH();\\n        require(swapWETH != address(0), \\\"Wrong router\\\");\\n        excludeFromReward(newPair);\\n\\n        emit UpdateSwapRouter(address(newRouter), newPair);\\n    }\\n\\n    function _updateSwapPair(address pair) internal {\\n        swapPairs[pair] = true;\\n\\n        emit SwapPairUpdated(pair);\\n    }\\n\\n    function _getRate() public view returns (uint256, uint256) {\\n        uint256 totalRatedBalance_ = _totalRatedBalance;\\n\\n        if (totalRatedBalance_ == 0) {\\n            uint256 ___totalSupply = _totalSupply;\\n            return (MAX / ___totalSupply, ___totalSupply);\\n        }\\n        return (_totalRatedReflection, totalRatedBalance_);\\n    }\\n\\n    function _takeLiquidity(uint256 amount, uint256 reflect, uint256 reflectBalance) private {\\n        uint256 rAmount = amount * reflect / reflectBalance;\\n\\n        if (excludedFromReward[address(this)]) {\\n            _balances[address(this)] += amount;\\n            _totalRatedBalance -= amount;\\n            _totalRatedReflection -= rAmount;\\n            return;\\n        }\\n        _reflections[address(this)] += rAmount;\\n    }\\n\\n    function _getFeeValues(uint256 amount, bool takeFee)\\n        private\\n        view\\n        returns (\\n            uint256 _tax,\\n            uint256 _liq,\\n            uint256 _brn,\\n            uint256 _mrk,\\n            uint256 _ref\\n        )\\n    {\\n        if (takeFee) {\\n            _tax = (amount * taxFee) / FLOAT_FACTOR;\\n            _liq = (amount * liqFee) / FLOAT_FACTOR;\\n            if (BRN_ENABLED) _brn = (amount * brnFee) / FLOAT_FACTOR;\\n            if (MRK_ENABLED) _mrk = (amount * mrkFee) / FLOAT_FACTOR;\\n            if (REF_ENABLED) _ref = (amount * refFee) / FLOAT_FACTOR;\\n        }\\n    }\\n\\n    function _reflectFee(\\n        address from,\\n        uint256 reflect,\\n        uint256 reflectBalance,\\n        uint256 tax,\\n        uint256 liq,\\n        uint256 brn,\\n        uint256 mrk,\\n        uint256 ref\\n    ) private returns (uint256) {\\n        _totalRatedReflection -= tax * reflect / reflectBalance;\\n        totalFees += tax;\\n\\n        if (BRN_ENABLED && brn > 0) {\\n            _totalSupply -= brn;\\n            _totalRatedBalance -= brn;\\n            _totalRatedReflection -= brn * reflect / reflectBalance;\\n            emit Transfer(from, address(0), brn);\\n        }\\n        if (REF_ENABLED) {\\n            uint256 mrk_;\\n            if (MRK_ENABLED) mrk_ = mrk;\\n            address referralAddress = referrals[tx.origin];\\n            if (referralAddress == address(0)) {\\n                _takeFee(from, marketingAddress, mrk_ + ref, reflect, reflectBalance);\\n            } else {\\n                _takeFee(from, marketingAddress, mrk_, reflect, reflectBalance);\\n                _takeFee(from, tx.origin, ref / 2, reflect, reflectBalance);\\n                _takeFee(from, referralAddress, ref - ref / 2, reflect, reflectBalance);\\n            }\\n        } else if (MRK_ENABLED) {\\n            _takeFee(from, marketingAddress, mrk, reflect, reflectBalance);\\n        }\\n\\n        return liq;\\n    }\\n\\n    function _takeFee(\\n        address from,\\n        address recipient,\\n        uint256 amount,\\n        uint256 reflect,\\n        uint256 reflectBalance\\n    ) private {\\n        if (amount == 0) return;\\n        uint256 rAmount = amount * reflect / reflectBalance;\\n\\n        emit Transfer(from, recipient, amount);\\n\\n        if (excludedFromReward[recipient]) {\\n            _balances[recipient] += amount;\\n            _totalRatedBalance -= amount;\\n            _totalRatedReflection -= rAmount;\\n            return;\\n        }\\n        _reflections[recipient] += rAmount;\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        address owner_ = owner();\\n        if (from != owner_ && to != owner_)\\n            require(amount <= txLimit, \\\"txLimit exceeded\\\");\\n\\n        uint256 _liqThreshold = liqThreshold;\\n        bool liquifyReady = (balanceOf(address(this)) >= _liqThreshold &&\\n            !_liqInProgress &&\\n            liqStatus &&\\n            !swapPairs[from]);\\n        if (liquifyReady) _swapAndLiquify(_liqThreshold);\\n\\n        (uint256 reflection, uint256 balance) = _getRate();\\n        bool takeFee = !(excludedFromFee[from] || excludedFromFee[to]);\\n        (\\n            uint256 tax,\\n            uint256 liq,\\n            uint256 brn,\\n            uint256 mrk,\\n            uint256 ref\\n        ) = _getFeeValues(amount, takeFee);\\n\\n        _updateBalances(from, to, amount, reflection, balance, tax + liq + brn + mrk + ref);\\n        uint256 liqAmount = _reflectFee(\\n            from,\\n            reflection,\\n            balance,\\n            tax,\\n            liq,\\n            brn,\\n            mrk,\\n            ref\\n        );\\n        _takeLiquidity(liqAmount, reflection, balance);\\n    }\\n\\n    function _updateBalances(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 reflect,\\n        uint256 reflectBalance,\\n        uint256 fees\\n    ) private {\\n        uint256 rAmount = amount * reflect / reflectBalance;\\n        uint256 transferAmount = amount - fees;\\n        uint256 rTransferAmount = transferAmount * reflect / reflectBalance;\\n\\n        if (excludedFromReward[from]) {\\n            uint256 balanceFrom = _balances[from];\\n            require(\\n                balanceFrom >= amount,\\n                \\\"ERC20: transfer amount exceeds balance\\\"\\n            );\\n            _balances[from] = balanceFrom - amount;\\n            _totalRatedBalance += amount;\\n            _totalRatedReflection += rAmount;\\n        } else {\\n            uint256 balanceFrom = _reflections[from];\\n            require(\\n                balanceFrom >= rAmount,\\n                \\\"ERC20: transfer amount exceeds balance\\\"\\n            );\\n            _reflections[from] = balanceFrom - rAmount;\\n        }\\n        if (excludedFromReward[to]) {\\n            _balances[to] += transferAmount;\\n            _totalRatedBalance -= transferAmount;\\n            _totalRatedReflection -= rTransferAmount;\\n        } else {\\n            _reflections[to] += rTransferAmount;\\n        }\\n\\n        emit Transfer(from, to, transferAmount);\\n    }\\n\\n    function _swapAndLiquify(uint256 amount) internal lockTheSwap {\\n        uint256 half = amount / 2;\\n        amount -= half;\\n\\n        IUniswapV2Router02 _swapRouter = swapRouter;\\n        bool result = _swapTokensForBNB(half, _swapRouter);\\n        if (!result) {\\n            return;\\n        }\\n        uint256 balance = address(this).balance;\\n        result = _addLiquidity(amount, balance, _swapRouter);\\n        if (!result) {\\n            return;\\n        }\\n\\n        emit LiquidityAdded(amount, balance);\\n    }\\n\\n    function _swapTokensForBNB(\\n        uint256 tokenAmount,\\n        IUniswapV2Router02 _swapRouter\\n    ) private returns(bool) {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = swapWETH;\\n\\n        _approve(address(this), address(_swapRouter), tokenAmount);\\n        try _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        ) {\\n            return true;\\n        } catch(bytes memory) {\\n            return false;\\n        }\\n    }\\n\\n    function _addLiquidity(\\n        uint256 tokenAmount,\\n        uint256 ethAmount,\\n        IUniswapV2Router02 _swapRouter\\n    ) private returns(bool) {\\n        _approve(address(this), address(_swapRouter), tokenAmount);\\n        try _swapRouter.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0,\\n            0,\\n            liquidityAddress,\\n            block.timestamp\\n        ) {\\n            return true;\\n        } catch (bytes memory) {\\n            return false;\\n        }\\n    }\\n\\n    receive() external payable {\\n        require(_liqInProgress, \\\"Only for swaps\\\");\\n    }\\n\\n    function recoverLockedTokens(address receiver, address token)\\n        external\\n        onlyOwner\\n        returns (uint256 balance)\\n    {\\n        require(token != address(this), \\\"Only 3rd party\\\");\\n        if (token == address(0)) {\\n            balance = address(this).balance;\\n            (bool success, ) = receiver.call{value: balance}(\\\"\\\");\\n            require(success, \\\"transfer eth failed\\\");\\n            return balance;\\n        }\\n        balance = IERC20(token).balanceOf(address(this));\\n        IERC20(token).safeTransfer(receiver, balance);\\n\\n        emit RecoveredLockedTokens(token, receiver, balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/ITokenConstructorFactory.sol\": {\r\n      \"content\": \"/*\\n\\n        \u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\\n        \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\\n        \u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2554\u255d\u2591\\n        \u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2591\\n        \u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2557\\n        \u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\\n\\n Interface for factory contract to create ERC20 and RFI tokens.\\n\\n \u2022 website:                           https://cryptexlock.me\\n \u2022 medium:                            https://medium.com/cryptex-locker\\n \u2022 Telegram Announcements Channel:    https://t.me/CryptExAnnouncements\\n \u2022 Telegram Main Channel:             https://t.me/cryptexlocker\\n \u2022 Twitter Page:                      https://twitter.com/ExLocker\\n \u2022 Reddit:                            https://www.reddit.com/r/CryptExLocker/\\n\\n SPDX-License-Identifier: UNLICENSED\\n\\n*/\\n\\npragma solidity 0.8.4;\\n\\ninterface ITokenConstructorFactory {\\n    function isGoodRouter(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"bool[4]\",\"name\":\"flags_\",\"type\":\"bool[4]\"},{\"internalType\":\"uint256[9]\",\"name\":\"feesAndLimits_\",\"type\":\"uint256[9]\"},{\"internalType\":\"address[4]\",\"name\":\"addresses_\",\"type\":\"address[4]\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributionProceeds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludedInFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludedInReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokensToLiqudity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bnbToLiquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredLockedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"ReferralSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"SwapPairUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTaxFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiqFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBrnFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMrkFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRefFee\",\"type\":\"uint256\"}],\"name\":\"UpdateFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newLiqStatus\",\"type\":\"bool\"}],\"name\":\"UpdateLiqStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiqThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdateLiqThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLiquidityAddress\",\"type\":\"address\"}],\"name\":\"UpdateLiquidityAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMarketingkAddress\",\"type\":\"address\"}],\"name\":\"UpdateMarketingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"UpdateSwapRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTxLimit\",\"type\":\"uint256\"}],\"name\":\"UpdateTxLimit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRN_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MRK_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REF_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mrkFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLiqFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBrnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMrkFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRefFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityAddress\",\"type\":\"address\"}],\"name\":\"setLiquidyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"setLiquifyStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"setLiquifyThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"}],\"name\":\"setReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTxLimit\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ReflectToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5ea0000000000000000000000000e92651c0a980f60a7f352a4cbb06e8a429876d2400000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000e92651c0a980f60a7f352a4cbb06e8a429876d24000000000000000000000000e92651c0a980f60a7f352a4cbb06e8a429876d240000000000000000000000009c98ecaa9fa7f47fa6baf8e46ea75414f9abc7b60000000000000000000000000000000000000000000000000000000000000004546573740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045445535400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}