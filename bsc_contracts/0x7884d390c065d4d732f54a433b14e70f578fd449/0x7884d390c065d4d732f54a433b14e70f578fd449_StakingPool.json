{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n\r\ncontract StakingPool{\r\n    using SafeMath for uint256;\r\n\r\n    address public token;\r\n    uint256 public intervalTime = 7 days;\r\n    mapping (address => uint256) public stakeTime;\r\n\r\n    event Stake(address,uint256,uint256);\r\n    event Unstake(address,uint256,uint256);\r\n\r\n    constructor(address _token) {\r\n        token = _token;\r\n    }\r\n\r\n    function stake(uint256 _amount) public returns (bool){\r\n        Vault(SuperToken(token).vault()).reward();\r\n        IERC20 superToken = IERC20(token);\r\n        IERC20 lpToken = IERC20(SuperToken(token).lpToken());\r\n        if(lpToken.totalSupply() == 0){\r\n            lpToken.mint(msg.sender,_amount);\r\n            emit Stake(msg.sender,_amount,_amount);\r\n        }else{\r\n            uint256 mintLp = _amount.mul(lpToken.totalSupply()).div(superToken.balanceOf(address(this)));\r\n            lpToken.mint(msg.sender,mintLp);\r\n            emit Stake(msg.sender,_amount,mintLp);\r\n        }\r\n        superToken.transferFrom(msg.sender,address(this),_amount);\r\n        stakeTime[msg.sender] = block.timestamp;\r\n        return true;\r\n    }\r\n\r\n    function unstake(uint256 _lpAmount) public returns (bool){\r\n        require(stakeTime[msg.sender].add(intervalTime) < block.timestamp,\"StakingPool: staking must be greater than 7 days\");\r\n        Vault(SuperToken(token).vault()).reward();\r\n        IERC20 lpToken = IERC20(SuperToken(token).lpToken());\r\n        IERC20 superToken = IERC20(token);\r\n        uint256 withdrawAmount = _lpAmount.mul(superToken.balanceOf(address(this))).div(lpToken.totalSupply());\r\n        superToken.transfer(msg.sender,withdrawAmount);\r\n        lpToken.transferFrom(msg.sender,address(this),_lpAmount);\r\n        lpToken.burn(_lpAmount);\r\n        emit Unstake(msg.sender,withdrawAmount,_lpAmount);\r\n        return true;\r\n    }\r\n\r\n    function move(address _token,uint256 _amount,address _account) public onlyOwner {\r\n        IERC20 erc = IERC20(_token);\r\n        erc.transfer(_account,_amount);\r\n    }\r\n\r\n    function setIntervalTime(uint256 _time) public onlyOwner{\r\n        intervalTime = _time;\r\n    }\r\n\r\n    function getPrice() public view returns (uint256){\r\n        IUniswapV2Pair uniswapV2Pair = IUniswapV2Pair(SuperToken(token).pair());\r\n        (uint112 reserve0, uint112 reserve1, ) = uniswapV2Pair.getReserves();\r\n        if(token == uniswapV2Pair.token0()){\r\n            return uint256(reserve1).mul(1e18).div(reserve0);\r\n        }\r\n        return uint256(reserve0).mul(1e18).div(reserve1);\r\n    }\r\n\r\n    function apy() public view returns(uint256){\r\n        uint256 rewardAmount = Vault(SuperToken(token).vault()).rewardAmount();\r\n        IERC20 superToken = IERC20(token);\r\n        if(superToken.balanceOf(address(this)) == 0){\r\n            return 0; \r\n        }\r\n        return rewardAmount.mul(24).mul(1e18).mul(365).div(superToken.balanceOf(address(this)));\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == SuperToken(token).owner(),\"StakingPool: address is not owner\");\r\n        _;\r\n    }\r\n}\r\ninterface SuperToken {\r\n    function tokenB() external view returns(address);\r\n    function owner() external view returns(address);\r\n    function lpToken() external view returns(address);\r\n    function vault() external view returns(address);\r\n    function stPool() external view returns(address);\r\n    function pair() external view returns(address);\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function burn(uint256 value) external returns (bool);\r\n    function mint(address account,uint256 amount) external;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\ninterface Vault {\r\n    function reward() external;\r\n    function rewardAmount() external view returns(uint256);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setIntervalTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingPool", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007e18c1fac52ed497fc0bf11c5fac5fc6566060f7", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://131606205ab5b1e739432a4445c07ee1044804130b8b38aa4ece900e8dca27e2"}