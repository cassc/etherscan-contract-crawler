{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nabstract contract Storage{\r\n    address public admin;\r\n    address public implementation;\r\n}\r\n\r\ninterface IERC721 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ninterface IERC721Receiver {\r\n\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\nabstract contract ERC721Holder is IERC721Receiver {\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\ncontract StorageV1 is Storage, ERC721Holder{\r\n     enum State{\r\n        sold,\r\n        sellIn,\r\n        cancelled\r\n    }\r\n\r\n    struct Option{\r\n        uint256 optionId;\r\n        address holder;\r\n        uint256 tokenId;\r\n        address payment;\r\n        uint256 price;\r\n        State   state;\r\n    }\r\n    mapping(uint256 => Option) public optionInfo;\r\n    mapping(address => uint256[]) userOptionIds;\r\n\r\n    struct Record{\r\n        uint256 optionId;\r\n        address payment;\r\n        uint256 income;\r\n        uint256 time;\r\n    }\r\n    mapping(address => Record[]) userRecords;\r\n    \r\n    uint256[] optionIds;\r\n    mapping(uint256 => uint256) public index;\r\n\r\n    mapping(address => bool) public supported;\r\n    address public nfts;\r\n    address dead;\r\n    uint256 public feeRate = 50;\r\n    uint256 public initNum = 1;\r\n}\r\n\r\n\r\n\r\ncontract Marketplace is StorageV1{\r\n   \r\n\r\n    event Create(uint256 optionId, address holder, address payment, uint256 tokenId, uint256 price);\r\n    event Operate(uint256 optionId, address operator, uint256 tokenId);\r\n\r\n    constructor(){\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(admin == msg.sender,\"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    function initialize(address _nfts,address _long,address _lt) external onlyOwner(){\r\n        nfts = _nfts;\r\n        dead = 0x000000000000000000000000000000000000dEaD;\r\n        initNum = 1;\r\n        feeRate = 50;\r\n        supported[_long] = true;\r\n        supported[_lt] = true;\r\n    }\r\n\r\n    function setFeeRate(uint256 _feeRate) external onlyOwner{\r\n        feeRate = _feeRate;\r\n    }\r\n\r\n    function setNfts(address _nfts) external onlyOwner{\r\n        nfts = _nfts;\r\n    }\r\n\r\n    function addSupported(address token, bool isSupport) external onlyOwner{\r\n        supported[token] = isSupport;\r\n    }\r\n\r\n\r\n    function createOption(uint256 tokenId, address payment,uint256 price) external {\r\n        require(price > 0, \"Invalid price params.\");\r\n        require(supported[payment],\"Invalid payment address.\");\r\n        IERC721(nfts).transferFrom(msg.sender, address(this), tokenId);\r\n        require(IERC721(nfts).ownerOf(tokenId) == address(this),\"TransferFrom nfts failed.\");\r\n        optionInfo[initNum] = Option(initNum, msg.sender, tokenId, payment, price, State.sellIn);\r\n        userOptionIds[msg.sender].push(initNum);\r\n        optionIds.push(initNum);\r\n        index[initNum] = optionIds.length - 1;\r\n        emit Create(initNum, msg.sender, payment, tokenId, price);\r\n        initNum++;\r\n    }\r\n\r\n    function purchaseOption(uint256 optionId) external {\r\n        Option storage option = optionInfo[optionId];\r\n        require(option.state == State.sellIn, \"Invalid option state.\");\r\n        require(option.holder != msg.sender, \"Invalid buyer.\");\r\n        uint256 fee = option.price * feeRate / 1000;\r\n        option.state = State.sold;\r\n        _removeOption(optionId);\r\n\r\n        TransferHelper.safeTransferFrom(option.payment, msg.sender, dead, fee);\r\n        TransferHelper.safeTransferFrom(option.payment, msg.sender, option.holder, option.price - fee);\r\n        IERC721(nfts).transferFrom(address(this), msg.sender, option.tokenId);\r\n        require(IERC721(nfts).ownerOf(option.tokenId) == msg.sender,\"TransferFrom nfts failed.\");\r\n        userRecords[option.holder].push(Record(option.tokenId,option.payment,option.price,block.timestamp));\r\n        emit Operate(optionId, msg.sender, option.tokenId);\r\n    }\r\n\r\n    function cancelOption(uint256 optionId) external {\r\n        Option storage option = optionInfo[optionId];\r\n        require(option.state == State.sellIn, \"Invalid option state.\");\r\n        require(option.holder == msg.sender, \"Invalid operator.\");\r\n        option.state = State.cancelled;\r\n        _removeOption(optionId);\r\n        IERC721(nfts).transferFrom(address(this), msg.sender, option.tokenId);\r\n        require(IERC721(nfts).ownerOf(option.tokenId) == msg.sender,\"TransferFrom nfts failed.\");\r\n        emit Operate(optionId, msg.sender, option.tokenId);\r\n    }\r\n\r\n    function _removeOption(uint256 optionId) internal{\r\n        uint256 lastOptionId = optionIds[optionIds.length - 1];\r\n        index[lastOptionId] = index[optionId];\r\n        optionIds[index[lastOptionId]] = lastOptionId;\r\n        optionIds.pop();\r\n        delete index[optionId];\r\n    }\r\n\r\n    function emergencyWithdraw(address to,uint256[] calldata tokenIds) external onlyOwner(){\r\n        for(uint i=0; i<tokenIds.length; i++){\r\n            IERC721(nfts).safeTransferFrom(address(this), to, tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function getOptions() external view returns(Option[] memory){\r\n        Option[] memory options = new Option[](optionIds.length);\r\n        for(uint i=0; i<optionIds.length; i++){\r\n            Option memory option = optionInfo[optionIds[i]];\r\n            options[i] = Option(option.optionId,option.holder,option.tokenId,option.payment,option.price,option.state);\r\n        }\r\n        return options;\r\n    }\r\n\r\n    function getUserOptions(address user) external view returns(Option[] memory){\r\n        Option[] memory options = new Option[](userOptionIds[user].length);\r\n        for(uint i=0; i<userOptionIds[user].length; i++){\r\n            Option memory option = optionInfo[userOptionIds[user][i]];\r\n            options[i] = Option(option.optionId,option.holder,option.tokenId,option.payment,option.price,option.state);\r\n        }\r\n        return options;\r\n    }\r\n\r\n    function getUserIncomeRecords(address user) external view returns(Record[] memory){\r\n        return userRecords[user];\r\n    }\r\n\r\n    function getOptionIds() external   view returns(uint256[] memory){\r\n        return optionIds;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payment\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Operate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSupport\",\"type\":\"bool\"}],\"name\":\"addSupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"cancelOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"createOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOptionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOptions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum StorageV1.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct StorageV1.Option[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserIncomeRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"income\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageV1.Record[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserOptions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum StorageV1.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct StorageV1.Option[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nfts\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_long\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lt\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nfts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum StorageV1.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"purchaseOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nfts\",\"type\":\"address\"}],\"name\":\"setNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Marketplace", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://19525d7e7cee7b17ce877fb995d7e41f1d9bdf9447908977df0f8eb7a6720b2a"}