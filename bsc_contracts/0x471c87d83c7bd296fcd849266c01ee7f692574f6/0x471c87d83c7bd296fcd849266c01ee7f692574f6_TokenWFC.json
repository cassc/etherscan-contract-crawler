{"SourceCode": "// SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.10;\r\nabstract contract Erc20Token{  \r\n    \r\n    function balanceOf(address _owner) public view virtual returns (uint256 val);\r\n    function transfer(address _to, uint256 _value) public virtual returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public virtual returns (bool success);\r\n    function approve(address _spender, uint256 _value) public virtual returns (bool success);\r\n    function allowance(address _owner, address _spender) public view virtual returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256  _value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external;\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool) ;\r\n    function decimals() external view returns (uint8);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\ncontract TokenWFC is Erc20Token {\r\n    using SafeMath for uint256;\r\n    uint256 public totalSupply = 1000000000 * 100000000;\r\n    string public name = \"World Finance Coin\";\r\n    string public symbol = \"WFC\";\r\n    uint8 public constant decimals = 8;\r\n    address public owner;\r\n    mapping (address => uint256) balance;  \r\n    mapping (address => mapping (address => uint256)) allowed; \r\n    \r\n    mapping(address => address) whiteAddress;\r\n    \r\n    address public heidong;\r\n    \r\n    address public fenhong;\r\n    \r\n    address public zhiyaAddress;\r\n    \r\n    constructor(address _owner) public {\r\n        owner = _owner;\r\n        balance[owner] = totalSupply;\r\n    }\r\n  \r\n    \r\n    function setHeiDong(address _heidong) public onlyOwner{\r\n        heidong = _heidong;\r\n    }\r\n    \r\n    \r\n    function setFenHong(address _fenhong) public onlyOwner{\r\n        fenhong = _fenhong;\r\n    }\r\n    \r\n    function setZhiYa(address _zhiya) public onlyOwner{\r\n        zhiyaAddress = _zhiya;\r\n    }    \r\n    \r\n    function addWhite(address _white) public onlyOwner{\r\n        whiteAddress[_white]=_white;\r\n    }\r\n    \r\n    function delWhite(address _white) public onlyOwner{\r\n        delete whiteAddress[_white];\r\n    }\r\n  \r\n    function transfer(address _to, uint256 _value) public override returns (bool success) {\r\n        require(_to != address(0x0));\r\n        uint256 reladAmount;\r\n        if(whiteAddress[_to] == address(0x0)){\r\n            uint256 burnValue = _value.mul(5)/100;\r\n            uint256 heidongValue = burnValue.mul(20)/100;\r\n            uint256 zhiyaValue = burnValue.mul(20)/100;\r\n            uint256 fenhongValue = burnValue.mul(60)/100;\r\n            balance[zhiyaAddress]=balance[zhiyaAddress].add(zhiyaValue);\r\n            balance[fenhong]=balance[fenhong].add(fenhongValue);\r\n            balance[heidong]=balance[heidong].add(heidongValue);      \r\n            reladAmount = _value.sub(burnValue);\r\n        }else{\r\n            reladAmount = _value;\r\n        }\r\n        require(balance[msg.sender] >= _value && balance[_to] + reladAmount > balance[_to]);\r\n        balance[msg.sender] = balance[msg.sender].sub(_value);\r\n        balance[_to] = balance[_to].add(reladAmount);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool success) {\r\n        require(_to != address(0x0) && _from != address(0x0) ,'_from is invalid or _to is invalid');\r\n        uint256 reladAmount;\r\n        if(whiteAddress[_to] == address(0x0)){\r\n            uint256 burnValue = _value.mul(5)/100;\r\n            uint256 heidongValue = burnValue.mul(20)/100;\r\n            uint256 zhiyaValue = burnValue.mul(20)/100;\r\n            uint256 fenhongValue = burnValue.mul(60)/100;\r\n            balance[zhiyaAddress]=balance[zhiyaAddress].add(zhiyaValue);\r\n            balance[fenhong]=balance[fenhong].add(fenhongValue);\r\n            balance[heidong]=balance[heidong].add(heidongValue);      \r\n            reladAmount = _value.sub(burnValue);\r\n        }else{\r\n            reladAmount = _value;\r\n        }        \r\n        require(balance[_from] >= _value && allowed[_from][msg.sender] >= _value);\r\n        balance[_from] = balance[_from].sub(_value);\r\n        balance[_to] = balance[_to].add(reladAmount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);  \r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view override returns (uint256 val) {  \r\n        return balance[_owner];\r\n    }\r\n  \r\n    function approve(address _spender, uint256 _value) public override returns (bool success) {   \r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n  \r\n    function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {  \r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require(msg.sender ==  owner,'Must be the owner');\r\n        _;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_white\",\"type\":\"address\"}],\"name\":\"addWhite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_white\",\"type\":\"address\"}],\"name\":\"delWhite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fenhong\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heidong\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fenhong\",\"type\":\"address\"}],\"name\":\"setFenHong\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_heidong\",\"type\":\"address\"}],\"name\":\"setHeiDong\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zhiya\",\"type\":\"address\"}],\"name\":\"setZhiYa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zhiyaAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenWFC", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "0000000000000000000000000f58e3a677725352bd723a6ab634fdc02f994019", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5c58ca8a67c1fdd48bd1f9ea8e33c842eb74c54e6c654c0d7907c2bdad500b47"}