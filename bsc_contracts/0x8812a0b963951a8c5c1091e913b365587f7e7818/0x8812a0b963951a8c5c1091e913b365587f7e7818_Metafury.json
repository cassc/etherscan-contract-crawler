{"SourceCode": "// Sources flattened with hardhat v2.11.2 https://hardhat.org\r\n\r\n// File contracts/interface/IReflectionToken.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IReflectionToken {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function migrate(address account, uint256 amount) external;\r\n\r\n\r\n    function isMigrationStarted() external view returns (bool);\r\n\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/interface/IUniswapV2Factory.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File contracts/interface/IUniswapV2Pair.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File contracts/interface/IUniswapV2Router01.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// File contracts/interface/IUniswapV2Router02.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.7.3\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.7.3\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.7.3\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Metafury.sol\r\n\r\n\r\npragma solidity ^0.8.1;\r\n\r\n\r\n\r\n\r\n\r\ncontract Metafury is IReflectionToken, Ownable {\r\n    struct FeeTier {\r\n        uint256 ecoSystemFee;\r\n        uint256 liquidityFee;\r\n        uint256 taxFee;\r\n        uint256 ownerFee;\r\n        uint256 burnFee;\r\n        address ecoSystem;\r\n        address owner;\r\n    }\r\n\r\n    struct FeeValues {\r\n        uint256 rAmount;\r\n        uint256 rTransferAmount;\r\n        uint256 rFee;\r\n        uint256 tTransferAmount;\r\n        uint256 tEchoSystem;\r\n        uint256 tLiquidity;\r\n        uint256 tFee;\r\n        uint256 tOwner;\r\n        uint256 tBurn;\r\n    }\r\n\r\n    struct tFeeValues {\r\n        uint256 tTransferAmount;\r\n        uint256 tEchoSystem;\r\n        uint256 tLiquidity;\r\n        uint256 tFee;\r\n        uint256 tOwner;\r\n        uint256 tBurn;\r\n    }\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcluded;\r\n    mapping(address => bool) private _isBlacklisted;\r\n    mapping(address => uint256) private _accountsTier;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal;\r\n    uint256 private _rTotal;\r\n    uint256 private _tFeeTotal;\r\n    uint256 public maxFee;\r\n\r\n    string private _name = \"Metafury\";\r\n    string private _symbol = \"FURYX\";\r\n\r\n    FeeTier public defaultFees;\r\n    FeeTier private _previousFees;\r\n    FeeTier private _emptyFees;\r\n\r\n    FeeTier[] private _feeTiers;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address public WETH;\r\n    address public migration;\r\n    address public burnAddress;\r\n\r\n    uint256 public numTokensToCollectETH;\r\n    uint256 public numOfETHToSwapAndEvolve;\r\n\r\n    uint256 public maxTxAmount;\r\n\r\n    uint256 private _rTotalExcluded;\r\n    uint256 private _tTotalExcluded;\r\n\r\n    uint8 private _decimals;\r\n\r\n    bool public inSwapAndLiquify;\r\n    bool private _upgraded;\r\n\r\n    bool public swapAndEvolveEnabled;\r\n\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    modifier lockUpgrade() {\r\n        require(!_upgraded, \"ReflectionToken: Already upgraded\");\r\n        _;\r\n        _upgraded = true;\r\n    }\r\n\r\n    modifier checkTierIndex(uint256 _index) {\r\n        require(_feeTiers.length > _index, \"ReflectionToken: Invalid tier index\");\r\n        _;\r\n    }\r\n\r\n    modifier preventBlacklisted(address _account, string memory errorMsg) {\r\n        require(!_isBlacklisted[_account], errorMsg);\r\n        _;\r\n    }\r\n\r\n    modifier isRouter(address _sender) {\r\n        {\r\n            uint32 size;\r\n            assembly {\r\n                size := extcodesize(_sender)\r\n            }\r\n            if (size > 0) {\r\n                if (_accountsTier[_sender] == 0) {\r\n                    IUniswapV2Router02 _routerCheck = IUniswapV2Router02(_sender);\r\n                    try _routerCheck.factory() returns (address factory) {\r\n                        _accountsTier[_sender] = 1;\r\n                    } catch {}\r\n                }\r\n            }\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    event SwapAndEvolveEnabledUpdated(bool enabled);\r\n    event SwapAndEvolve(uint256 ethSwapped, uint256 tokenReceived, uint256 ethIntoLiquidity);\r\n\r\n    constructor(address _router, string memory __name, string memory __symbol) {\r\n        _name = __name;\r\n        _symbol = __symbol;\r\n        _decimals = 18;\r\n\r\n        uint tTotal = 820000 * 10**6 * 10**18;\r\n        uint rTotal = (MAX - (MAX % tTotal));\r\n\r\n        _tTotal = tTotal;\r\n        _rTotal = rTotal;\r\n\r\n        maxFee = 1000;\r\n\r\n        maxTxAmount = 5000 * 10**6 * 10**18;\r\n\r\n        burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n        address ownerAddress = owner();\r\n        _rOwned[ownerAddress] = rTotal;\r\n\r\n        uniswapV2Router = IUniswapV2Router02(_router);\r\n        WETH = uniswapV2Router.WETH();\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), WETH);\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[ownerAddress] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n\r\n        // init _feeTiers\r\n\r\n        // liquidityFee, taxFee\r\n        defaultFees = _addTier(0, 500, 500, 0, 0, address(0), address(0));\r\n        // ecoSystemFee, liquidityFee, taxFee\r\n        _addTier(50, 50, 100, 0, 0, address(0), address(0));\r\n        // ecoSystemFee, liquidityFee, taxFee, ownerFee\r\n        _addTier(50, 50, 100, 100, 0, address(0), address(0));\r\n        // ecoSystemFee, liquidityFee, taxFee, ownerFee\r\n        _addTier(100, 125, 125, 150, 0, address(0), address(0));\r\n\r\n        emit Transfer(address(0), msg.sender, tTotal);\r\n    }\r\n\r\n    // IERC20 functions\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        require(_allowances[sender][msg.sender] >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender] - amount\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        require(_allowances[msg.sender][spender] >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender] - subtractedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    // Reflection functions\r\n\r\n    function migrate(address account, uint256 amount)\r\n    external\r\n    override\r\n    preventBlacklisted(account, \"ReflectionToken: Migrated account is blacklisted\")\r\n    {\r\n        require(migration != address(0), \"ReflectionToken: Migration is not started\");\r\n        require(msg.sender == migration, \"ReflectionToken: Not Allowed\");\r\n        _migrate(account, amount);\r\n    }\r\n\r\n    // onlyOwner\r\n\r\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\r\n    // or when increase, decrease exclude value\r\n    function excludeFromReward(address account) external onlyOwner {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        _excludeFromReward(account);\r\n    }\r\n\r\n    function _excludeFromReward(address account) private {\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n            _tTotalExcluded = _tTotalExcluded + _tOwned[account];\r\n            _rTotalExcluded = _rTotalExcluded + _rOwned[account];\r\n        }\r\n\r\n        _isExcluded[account] = true;\r\n    }\r\n\r\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\r\n    // or when increase, decrease exclude value\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is already included\");\r\n        _tTotalExcluded = _tTotalExcluded - _tOwned[account];\r\n        _rTotalExcluded = _rTotalExcluded - _rOwned[account];\r\n        _tOwned[account] = 0;\r\n        _isExcluded[account] = false;\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function whitelistAddress(address _account, uint256 _tierIndex)\r\n    public\r\n    onlyOwner\r\n    checkTierIndex(_tierIndex)\r\n    preventBlacklisted(_account, \"ReflectionToken: Selected account is in blacklist\")\r\n    {\r\n        require(_account != address(0), \"ReflectionToken: Invalid address\");\r\n        _accountsTier[_account] = _tierIndex;\r\n    }\r\n\r\n    function excludeWhitelistedAddress(address _account) public onlyOwner {\r\n        require(_account != address(0), \"ReflectionToken: Invalid address\");\r\n        require(_accountsTier[_account] > 0, \"ReflectionToken: Account is not in whitelist\");\r\n        _accountsTier[_account] = 0;\r\n    }\r\n\r\n    function blacklistAddress(address account) public onlyOwner {\r\n        _isBlacklisted[account] = true;\r\n        _accountsTier[account] = 0;\r\n    }\r\n\r\n    function unBlacklistAddress(address account) public onlyOwner {\r\n        _isBlacklisted[account] = false;\r\n    }\r\n\r\n    // functions for setting fees\r\n\r\n    function setEcoSystemFeePercent(uint256 _tierIndex, uint256 _ecoSystemFee)\r\n    external\r\n    onlyOwner\r\n    checkTierIndex(_tierIndex)\r\n    {\r\n        FeeTier memory tier = _feeTiers[_tierIndex];\r\n        _checkFeesChanged(tier, tier.ecoSystemFee, _ecoSystemFee);\r\n        _feeTiers[_tierIndex].ecoSystemFee = _ecoSystemFee;\r\n        if (_tierIndex == 0) {\r\n            defaultFees.ecoSystemFee = _ecoSystemFee;\r\n        }\r\n    }\r\n\r\n    function setLiquidityFeePercent(uint256 _tierIndex, uint256 _liquidityFee)\r\n    external\r\n    onlyOwner\r\n    checkTierIndex(_tierIndex)\r\n    {\r\n        FeeTier memory tier = _feeTiers[_tierIndex];\r\n        _checkFeesChanged(tier, tier.liquidityFee, _liquidityFee);\r\n        _feeTiers[_tierIndex].liquidityFee = _liquidityFee;\r\n        if (_tierIndex == 0) {\r\n            defaultFees.liquidityFee = _liquidityFee;\r\n        }\r\n    }\r\n\r\n    function setTaxFeePercent(uint256 _tierIndex, uint256 _taxFee) external onlyOwner checkTierIndex(_tierIndex) {\r\n        FeeTier memory tier = _feeTiers[_tierIndex];\r\n        _checkFeesChanged(tier, tier.taxFee, _taxFee);\r\n        _feeTiers[_tierIndex].taxFee = _taxFee;\r\n        if (_tierIndex == 0) {\r\n            defaultFees.taxFee = _taxFee;\r\n        }\r\n    }\r\n\r\n    function setOwnerFeePercent(uint256 _tierIndex, uint256 _ownerFee) external onlyOwner checkTierIndex(_tierIndex) {\r\n        FeeTier memory tier = _feeTiers[_tierIndex];\r\n        _checkFeesChanged(tier, tier.ownerFee, _ownerFee);\r\n        _feeTiers[_tierIndex].ownerFee = _ownerFee;\r\n        if (_tierIndex == 0) {\r\n            defaultFees.ownerFee = _ownerFee;\r\n        }\r\n    }\r\n\r\n    function setBurnFeePercent(uint256 _tierIndex, uint256 _burnFee) external onlyOwner checkTierIndex(_tierIndex) {\r\n        FeeTier memory tier = _feeTiers[_tierIndex];\r\n        _checkFeesChanged(tier, tier.burnFee, _burnFee);\r\n        _feeTiers[_tierIndex].burnFee = _burnFee;\r\n        if (_tierIndex == 0) {\r\n            defaultFees.burnFee = _burnFee;\r\n        }\r\n    }\r\n\r\n    function setEcoSystemFeeAddress(uint256 _tierIndex, address _ecoSystem)\r\n    external\r\n    onlyOwner\r\n    checkTierIndex(_tierIndex)\r\n    {\r\n        require(_ecoSystem != address(0), \"ReflectionToken: Address Zero is not allowed\");\r\n        if (!_isExcluded[_ecoSystem]) _excludeFromReward(_ecoSystem);\r\n        _feeTiers[_tierIndex].ecoSystem = _ecoSystem;\r\n        if (_tierIndex == 0) {\r\n            defaultFees.ecoSystem = _ecoSystem;\r\n        }\r\n    }\r\n\r\n    function setOwnerFeeAddress(uint256 _tierIndex, address _owner) external onlyOwner checkTierIndex(_tierIndex) {\r\n        require(_owner != address(0), \"ReflectionToken: Address Zero is not allowed\");\r\n        if (!_isExcluded[_owner]) _excludeFromReward(_owner);\r\n        _feeTiers[_tierIndex].owner = _owner;\r\n        if (_tierIndex == 0) {\r\n            defaultFees.owner = _owner;\r\n        }\r\n    }\r\n\r\n    function addTier(\r\n        uint256 _ecoSystemFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _taxFee,\r\n        uint256 _ownerFee,\r\n        uint256 _burnFee,\r\n        address _ecoSystem,\r\n        address _owner\r\n    ) public onlyOwner {\r\n        _addTier(_ecoSystemFee, _liquidityFee, _taxFee, _ownerFee, _burnFee, _ecoSystem, _owner);\r\n    }\r\n\r\n    // functions related to uniswap\r\n\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner {\r\n        maxTxAmount = _tTotal * maxTxPercent / (10**4);\r\n    }\r\n\r\n    function setDefaultSettings() external onlyOwner {\r\n        swapAndEvolveEnabled = true;\r\n    }\r\n\r\n    function setSwapAndEvolveEnabled(bool _enabled) public onlyOwner {\r\n        swapAndEvolveEnabled = _enabled;\r\n        emit SwapAndEvolveEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function updateRouterAndPair(address _uniswapV2Router, address _uniswapV2Pair) public onlyOwner {\r\n        uniswapV2Router = IUniswapV2Router02(_uniswapV2Router);\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        WETH = uniswapV2Router.WETH();\r\n    }\r\n\r\n    function swapAndEvolve() public onlyOwner lockTheSwap {\r\n        // split the contract balance into halves\r\n        uint256 contractETHBalance = address(this).balance;\r\n        require(contractETHBalance >= numOfETHToSwapAndEvolve, \"ETH balance is not reach for S&E Threshold\");\r\n\r\n        contractETHBalance = numOfETHToSwapAndEvolve;\r\n\r\n        uint256 half = contractETHBalance / 2;\r\n        uint256 otherHalf = contractETHBalance - half;\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = IReflectionToken(address(this)).balanceOf(msg.sender);\r\n        // swap ETH for Tokens\r\n        _swapETHForTokens(half);\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = IReflectionToken(address(this)).balanceOf(msg.sender);\r\n        uint256 swapeedToken = newBalance - initialBalance;\r\n\r\n        _approve(msg.sender, address(this), swapeedToken);\r\n        require(IReflectionToken(address(this)).transferFrom(msg.sender, address(this), swapeedToken), \"transferFrom is failed\");\r\n        // add liquidity to uniswap\r\n        _addLiquidity(swapeedToken, otherHalf);\r\n        emit SwapAndEvolve(half, swapeedToken, otherHalf);\r\n    }\r\n\r\n    // update some addresses\r\n\r\n    function setMigrationAddress(address _migration) public onlyOwner {\r\n        migration = _migration;\r\n    }\r\n\r\n    function updateBurnAddress(address _newBurnAddress) external onlyOwner {\r\n        burnAddress = _newBurnAddress;\r\n        if (!_isExcluded[_newBurnAddress]) {\r\n            _excludeFromReward(_newBurnAddress);\r\n        }\r\n    }\r\n\r\n    function setNumberOfTokenToCollectETH(uint256 _numToken) public onlyOwner {\r\n        numTokensToCollectETH = _numToken;\r\n    }\r\n\r\n    function setNumOfETHToSwapAndEvolve(uint256 _numETH) public onlyOwner {\r\n        numOfETHToSwapAndEvolve = _numETH;\r\n    }\r\n\r\n    // withdraw functions\r\n\r\n    function withdrawToken(address _token, uint256 _amount) public onlyOwner {\r\n        require(IReflectionToken(_token).transfer(msg.sender, _amount), \"transfer is failed\");\r\n    }\r\n\r\n    function withdrawETH(uint256 _amount) public onlyOwner {\r\n        (bool sent, ) = payable(msg.sender).call{value: (_amount)}(\"\");\r\n        require(sent, \"transfer is failed\");\r\n    }\r\n\r\n    // internal or private\r\n\r\n    function _addTier(\r\n        uint256 _ecoSystemFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _taxFee,\r\n        uint256 _ownerFee,\r\n        uint256 _burnFee,\r\n        address _ecoSystem,\r\n        address _owner\r\n    ) internal returns (FeeTier memory) {\r\n        FeeTier memory _newTier = _checkFees(\r\n            FeeTier(_ecoSystemFee, _liquidityFee, _taxFee, _ownerFee, _burnFee, _ecoSystem, _owner)\r\n        );\r\n        if (!_isExcluded[_ecoSystem]) _excludeFromReward(_ecoSystem);\r\n        if (!_isExcluded[_owner]) _excludeFromReward(_owner);\r\n        _feeTiers.push(_newTier);\r\n\r\n        return _newTier;\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal - rFee;\r\n        _tFeeTotal = _tFeeTotal + tFee;\r\n    }\r\n\r\n    function _removeAllFee() private {\r\n        _previousFees = _feeTiers[0];\r\n        _feeTiers[0] = _emptyFees;\r\n    }\r\n\r\n    function _restoreAllFee() private {\r\n        _feeTiers[0] = _previousFees;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    )\r\n    private\r\n    preventBlacklisted(owner, \"ReflectionToken: Owner address is blacklisted\")\r\n    preventBlacklisted(spender, \"ReflectionToken: Spender address is blacklisted\")\r\n    {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n    private\r\n    preventBlacklisted(msg.sender, \"ReflectionToken: Address is blacklisted\")\r\n    preventBlacklisted(from, \"ReflectionToken: From address is blacklisted\")\r\n    preventBlacklisted(to, \"ReflectionToken: To address is blacklisted\")\r\n    isRouter(msg.sender)\r\n    {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (from != owner() && to != owner())\r\n            require(amount <= maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is uniswap pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        if (contractTokenBalance >= maxTxAmount) {\r\n            contractTokenBalance = maxTxAmount;\r\n        }\r\n        bool overMinTokenBalance = contractTokenBalance >= numTokensToCollectETH;\r\n        if (overMinTokenBalance && !inSwapAndLiquify && from != uniswapV2Pair && swapAndEvolveEnabled) {\r\n            contractTokenBalance = numTokensToCollectETH;\r\n            _collectETH(contractTokenBalance);\r\n        }\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n        uint256 tierIndex = 0;\r\n        if (takeFee) {\r\n            tierIndex = _accountsTier[from];\r\n\r\n            if (msg.sender != from) {\r\n                tierIndex = _accountsTier[msg.sender];\r\n            }\r\n        }\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, tierIndex, takeFee);\r\n    }\r\n\r\n    function _collectETH(uint256 contractTokenBalance) private lockTheSwap {\r\n        _swapTokensForETH(contractTokenBalance);\r\n    }\r\n\r\n    function _swapTokensForETH(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapETHForTokens(uint256 ethAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n        _approve(owner(), address(uniswapV2Router), ethAmount);\r\n        // make the swap\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: ethAmount }(\r\n            0, // accept any amount of Token\r\n            path,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{ value: ethAmount }(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        uint256 tierIndex,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) _removeAllFee();\r\n\r\n        if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount, tierIndex);\r\n        } else if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount, tierIndex);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount, tierIndex);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount, tierIndex);\r\n        }\r\n\r\n        if (!takeFee) _restoreAllFee();\r\n    }\r\n\r\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\r\n    // or when increase, decrease exclude value\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 tierIndex\r\n    ) private {\r\n        FeeValues memory _values = _getValues(tAmount, tierIndex);\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - _values.rAmount;\r\n        _tOwned[recipient] = _tOwned[recipient] + _values.tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + _values.rTransferAmount;\r\n\r\n        _tTotalExcluded = _tTotalExcluded + _values.tTransferAmount - tAmount;\r\n        _rTotalExcluded = _rTotalExcluded + _values.rTransferAmount - _values.rAmount;\r\n\r\n        _takeFees(sender, _values, tierIndex);\r\n        _reflectFee(_values.rFee, _values.tFee);\r\n        emit Transfer(sender, recipient, _values.tTransferAmount);\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 tierIndex\r\n    ) private {\r\n        FeeValues memory _values = _getValues(tAmount, tierIndex);\r\n        _rOwned[sender] = _rOwned[sender] - _values.rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + _values.rTransferAmount;\r\n        _takeFees(sender, _values, tierIndex);\r\n        _reflectFee(_values.rFee, _values.tFee);\r\n        emit Transfer(sender, recipient, _values.tTransferAmount);\r\n    }\r\n\r\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\r\n    // or when increase, decrease exclude value\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 tierIndex\r\n    ) private {\r\n        FeeValues memory _values = _getValues(tAmount, tierIndex);\r\n        _rOwned[sender] = _rOwned[sender] - _values.rAmount;\r\n        _tOwned[recipient] = _tOwned[recipient] + _values.tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + _values.rTransferAmount;\r\n\r\n        _tTotalExcluded = _tTotalExcluded + _values.tTransferAmount;\r\n        _rTotalExcluded = _rTotalExcluded + _values.rTransferAmount;\r\n\r\n        _takeFees(sender, _values, tierIndex);\r\n        _reflectFee(_values.rFee, _values.tFee);\r\n        emit Transfer(sender, recipient, _values.tTransferAmount);\r\n    }\r\n\r\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\r\n    // or when increase, decrease exclude value\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 tierIndex\r\n    ) private {\r\n        FeeValues memory _values = _getValues(tAmount, tierIndex);\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - _values.rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + _values.rTransferAmount;\r\n        _tTotalExcluded = _tTotalExcluded - tAmount;\r\n        _rTotalExcluded = _rTotalExcluded - _values.rAmount;\r\n\r\n        _takeFees(sender, _values, tierIndex);\r\n        _reflectFee(_values.rFee, _values.tFee);\r\n        emit Transfer(sender, recipient, _values.tTransferAmount);\r\n    }\r\n\r\n    function _takeFees(\r\n        address sender,\r\n        FeeValues memory values,\r\n        uint256 tierIndex\r\n    ) private {\r\n        _takeFee(sender, values.tLiquidity, address(this));\r\n        _takeFee(sender, values.tEchoSystem, _feeTiers[tierIndex].ecoSystem);\r\n        _takeFee(sender, values.tOwner, _feeTiers[tierIndex].owner);\r\n        _takeBurn(sender, values.tBurn);\r\n    }\r\n\r\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\r\n    // or when increase, decrease exclude value\r\n    function _takeFee(\r\n        address sender,\r\n        uint256 tAmount,\r\n        address recipient\r\n    ) private {\r\n        if (recipient == address(0)) return;\r\n        if (tAmount == 0) return;\r\n\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = tAmount * currentRate;\r\n        _rOwned[recipient] = _rOwned[recipient] + rAmount;\r\n\r\n        if (_isExcluded[recipient]) {\r\n            _tOwned[recipient] = _tOwned[recipient] + tAmount;\r\n            _tTotalExcluded = _tTotalExcluded + tAmount;\r\n            _rTotalExcluded = _rTotalExcluded + rAmount;\r\n        }\r\n\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\r\n    // or when increase, decrease exclude value\r\n    function _takeBurn(address sender, uint256 _amount) private {\r\n        if (_amount == 0) return;\r\n        address _burnAddress = burnAddress;\r\n        _tOwned[_burnAddress] = _tOwned[_burnAddress] + _amount;\r\n        if (_isExcluded[_burnAddress]) {\r\n            _tTotalExcluded = _tTotalExcluded + _amount;\r\n        }\r\n\r\n        emit Transfer(sender, _burnAddress, _amount);\r\n    }\r\n\r\n    function _migrate(address account, uint256 amount) private {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _tokenTransfer(owner(), account, amount, 0, false);\r\n    }\r\n\r\n    // Reflection - Read functions\r\n\r\n    // external or public\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function reflectionFromTokenInTiers(\r\n        uint256 tAmount,\r\n        uint256 _tierIndex,\r\n        bool deductTransferFee\r\n    ) public view returns (uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            FeeValues memory _values = _getValues(tAmount, _tierIndex);\r\n            return _values.rAmount;\r\n        } else {\r\n            FeeValues memory _values = _getValues(tAmount, _tierIndex);\r\n            return _values.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {\r\n        return reflectionFromTokenInTiers(tAmount, 0, deductTransferFee);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function accountTier(address _account) public view returns (FeeTier memory) {\r\n        return _feeTiers[_accountsTier[_account]];\r\n    }\r\n\r\n    function feeTier(uint256 _tierIndex) public view checkTierIndex(_tierIndex) returns (FeeTier memory) {\r\n        return _feeTiers[_tierIndex];\r\n    }\r\n\r\n    function feeTiersLength() public view returns (uint256) {\r\n        return _feeTiers.length;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isWhitelisted(address _account) public view returns (bool) {\r\n        return _accountsTier[_account] > 0;\r\n    }\r\n\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return _isBlacklisted[account];\r\n    }\r\n\r\n    function isMigrationStarted() external view override returns (bool) {\r\n        return migration != address(0);\r\n    }\r\n\r\n    function getContractBalance() public view returns (uint256) {\r\n        return balanceOf(address(this));\r\n    }\r\n\r\n    function getETHBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    // internal or private\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        if (_rTotalExcluded > _rTotal || _tTotalExcluded > _tTotal) {\r\n            return (_rTotal, _tTotal);\r\n        }\r\n        uint256 rSupply = _rTotal - _rTotalExcluded;\r\n        uint256 tSupply = _tTotal - _tTotalExcluded;\r\n\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _calculateFee(uint256 _amount, uint256 _fee) private pure returns (uint256) {\r\n        if (_fee == 0) return 0;\r\n        return _amount * _fee / (10**4);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tTransferFee,\r\n        uint256 currentRate\r\n    )\r\n    private\r\n    pure\r\n    returns (\r\n        uint256,\r\n        uint256,\r\n        uint256\r\n    )\r\n    {\r\n        uint256 rAmount = tAmount * currentRate;\r\n        uint256 rFee = tFee * currentRate;\r\n        uint256 rTransferFee = tTransferFee * currentRate;\r\n        uint256 rTransferAmount = rAmount - rFee - rTransferFee;\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount, uint256 _tierIndex) private view returns (FeeValues memory) {\r\n        tFeeValues memory tValues = _getTValues(tAmount, _tierIndex);\r\n        uint256 tTransferFee = tValues.tLiquidity + tValues.tEchoSystem + tValues.tOwner + tValues.tBurn;\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\r\n            tAmount,\r\n            tValues.tFee,\r\n            tTransferFee,\r\n            _getRate()\r\n        );\r\n        return\r\n        FeeValues(\r\n            rAmount,\r\n            rTransferAmount,\r\n            rFee,\r\n            tValues.tTransferAmount,\r\n            tValues.tEchoSystem,\r\n            tValues.tLiquidity,\r\n            tValues.tFee,\r\n            tValues.tOwner,\r\n            tValues.tBurn\r\n        );\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 _tierIndex) private view returns (tFeeValues memory) {\r\n        FeeTier memory tier = _feeTiers[_tierIndex];\r\n        tFeeValues memory tValues = tFeeValues(\r\n            0,\r\n            _calculateFee(tAmount, tier.ecoSystemFee),\r\n            _calculateFee(tAmount, tier.liquidityFee),\r\n            _calculateFee(tAmount, tier.taxFee),\r\n            _calculateFee(tAmount, tier.ownerFee),\r\n            _calculateFee(tAmount, tier.burnFee)\r\n        );\r\n\r\n        tValues.tTransferAmount = tAmount - tValues.tEchoSystem - tValues.tFee - tValues.tLiquidity - tValues.tOwner - tValues.tBurn;\r\n\r\n        return tValues;\r\n    }\r\n\r\n    function _checkFees(FeeTier memory _tier) internal view returns (FeeTier memory) {\r\n        uint256 _fees = _tier.ecoSystemFee + _tier.liquidityFee + _tier.taxFee + _tier.ownerFee + _tier.burnFee;\r\n        require(_fees <= maxFee, \"ReflectionToken: Fees exceeded max limitation\");\r\n\r\n        return _tier;\r\n    }\r\n\r\n    function _checkFeesChanged(\r\n        FeeTier memory _tier,\r\n        uint256 _oldFee,\r\n        uint256 _newFee\r\n    ) internal view {\r\n        uint256 _fees = _tier.ecoSystemFee + _tier.liquidityFee + _tier.taxFee + _tier.ownerFee + _tier.burnFee - _oldFee + _newFee;\r\n\r\n        require(_fees <= maxFee, \"ReflectionToken: Fees exceeded max limitation\");\r\n    }\r\n\r\n    //to receive ETH from uniswapV2Router when swapping\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndEvolve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndEvolveEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"accountTier\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ecoSystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ecoSystem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Metafury.FeeTier\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ecoSystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ecoSystem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ecoSystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ecoSystem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"excludeWhitelistedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"}],\"name\":\"feeTier\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ecoSystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ecoSystem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Metafury.FeeTier\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTiersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrationStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migration\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOfETHToSwapAndEvolve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensToCollectETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromTokenInTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDefaultSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ecoSystem\",\"type\":\"address\"}],\"name\":\"setEcoSystemFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ecoSystemFee\",\"type\":\"uint256\"}],\"name\":\"setEcoSystemFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migration\",\"type\":\"address\"}],\"name\":\"setMigrationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numETH\",\"type\":\"uint256\"}],\"name\":\"setNumOfETHToSwapAndEvolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numToken\",\"type\":\"uint256\"}],\"name\":\"setNumberOfTokenToCollectETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwnerFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownerFee\",\"type\":\"uint256\"}],\"name\":\"setOwnerFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndEvolveEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndEvolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndEvolveEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unBlacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBurnAddress\",\"type\":\"address\"}],\"name\":\"updateBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Pair\",\"type\":\"address\"}],\"name\":\"updateRouterAndPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Metafury", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000084d6574616675727900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054675727958000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3a41f11861a1a262eeb4f3909ea2c8daca035157eca1d0db9b929dfcc8095571"}