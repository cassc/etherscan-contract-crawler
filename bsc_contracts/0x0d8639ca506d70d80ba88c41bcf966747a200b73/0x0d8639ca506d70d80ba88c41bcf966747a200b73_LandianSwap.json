{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LandianSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"forge-std/console.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title LandianSwap\\r\\n * @notice Contract for swapping native currency and ERC20 with any ERC20 token (built for LNDA)\\r\\n */\\r\\n\\r\\ncontract LandianSwap is Ownable, ReentrancyGuard {\\r\\n    using Math for uint256;\\r\\n\\r\\n    struct Pair {\\r\\n        IERC20 tokenIn;\\r\\n        uint256 price;\\r\\n        IERC20 tokenOut;\\r\\n        address oracle;\\r\\n        bool isNative;\\r\\n        bool isActive;\\r\\n    }\\r\\n\\r\\n    mapping(address => Pair) public pairs;\\r\\n\\r\\n    mapping(address => bool) public admins;\\r\\n\\r\\n    uint256 public pairsCount;\\r\\n\\r\\n    Partner[] public partners;\\r\\n\\r\\n    address[] public pairsAddresses;\\r\\n\\r\\n    address private claimer = address(0x0);\\r\\n    address private executer = address(0x0);\\r\\n    address private LNDAAddress = address(0x0);\\r\\n\\r\\n    // mapping(string => Partner) public partners;\\r\\n\\r\\n    struct Partner {\\r\\n        string username;\\r\\n        address account;\\r\\n        uint256 discount;\\r\\n        uint256 commission;\\r\\n        bool active;\\r\\n    }\\r\\n\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        address indexed tokenIn,\\r\\n        uint256 value,\\r\\n        address indexed tokenOut,\\r\\n        uint256 amount,\\r\\n        bool isNative\\r\\n    );\\r\\n\\r\\n    event claimSuccess(address indexed buyer, uint256 amount);\\r\\n    event claimFailed(string _error);\\r\\n\\r\\n    /**\\r\\n     * @dev Ensure only admins can call certain functions\\r\\n     */\\r\\n    modifier onlyAdmin() {\\r\\n        require(admins[msg.sender], \\\"Exchange: onlyAdmin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyClaimer() {\\r\\n        require(claimer == msg.sender, \\\"Exchange: onlyClaimer\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _owner) {\\r\\n        transferOwnership(_owner);\\r\\n    }\\r\\n\\r\\n    function setClaimer(address _claimer) public onlyAdmin {\\r\\n        require(_claimer != address(0x0), \\\"Invalid Address\\\");\\r\\n        claimer = _claimer;\\r\\n    }\\r\\n\\r\\n    function setLNDA(address _lnda) public onlyAdmin {\\r\\n        require(_lnda != address(0x0), \\\"Invalid Address\\\");\\r\\n        LNDAAddress = _lnda;\\r\\n    }\\r\\n    function setExecuter(address _to) public onlyAdmin {\\r\\n        require(_to != address(0x0), \\\"Invalid Address\\\");\\r\\n        executer = _to;\\r\\n    }\\r\\n\\r\\n    function TweedBuyTokensFor(address _to, uint256 _amount) public onlyClaimer {\\r\\n        if (IERC20(LNDAAddress).balanceOf(address(this)) < _amount) {\\r\\n            emit claimFailed(\\\"Insufficient Balance\\\");\\r\\n        }\\r\\n        IERC20(LNDAAddress).transfer(_to, _amount);\\r\\n        emit claimSuccess(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function addPair(\\r\\n        address _tokenIn,\\r\\n        uint256 _price,\\r\\n        address _tokenOut,\\r\\n        address _oracle,\\r\\n        bool _isNative,\\r\\n        bool _isActive\\r\\n    ) public onlyAdmin {\\r\\n        require(_tokenIn != _tokenOut, \\\"Cannot add the same token\\\");\\r\\n        pairs[_tokenIn] = Pair(IERC20(_tokenIn), _price, IERC20(_tokenOut), _oracle, _isNative, _isActive);\\r\\n        pairsAddresses.push(_tokenIn);\\r\\n        pairsCount++;\\r\\n    }\\r\\n\\r\\n    function editPair(\\r\\n        address _tokenIn,\\r\\n        uint256 _price,\\r\\n        address _tokenOut,\\r\\n        address _oracle,\\r\\n        bool _isNative,\\r\\n        bool _isActive\\r\\n    ) public onlyAdmin {\\r\\n        require(_tokenIn != _tokenOut, \\\"Cannot add the same token\\\");\\r\\n        pairs[_tokenIn] = Pair(IERC20(_tokenIn), _price, IERC20(_tokenOut), _oracle, _isNative, _isActive);\\r\\n    }\\r\\n\\r\\n    function addAdmin(address _admin) public onlyOwner {\\r\\n        admins[_admin] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw native tokens from the contract\\r\\n     * @param _amount Amount of native tokens to withdraw\\r\\n     */\\r\\n    function withdrawNative(uint256 _amount) public onlyOwner nonReentrant {\\r\\n        payable(owner()).transfer(_amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw ERC20 tokens from the contract\\r\\n     * @param _token Token to withdraw\\r\\n     * @param _amount Amount of tokens to withdraw\\r\\n     */\\r\\n    function withdrawERC20(address _token, uint256 _amount) public onlyOwner nonReentrant {\\r\\n        IERC20(_token).transfer(owner(), _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set an address as admin\\r\\n     * @param _account Address to set\\r\\n     */\\r\\n    function setAdmin(address _account) public onlyOwner {\\r\\n        admins[_account] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an address as admin\\r\\n     * @param _account Address to remove\\r\\n     */\\r\\n    function removeAdmin(address _account) public onlyOwner {\\r\\n        admins[_account] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Edit business partner\\r\\n     * @param _name Name of business partner\\r\\n     * @param _account Address of business partner\\r\\n     */\\r\\n    function editBusinessPartner(\\r\\n        string memory _name,\\r\\n        address _account,\\r\\n        uint256 _discount,\\r\\n        uint256 _commission,\\r\\n        bool _active\\r\\n    ) public onlyAdmin {\\r\\n        for (uint256 i = 0; i < partners.length; i++) {\\r\\n            if (compare(partners[i].username, _name)) {\\r\\n                partners[i].account = _account;\\r\\n                partners[i].discount = _discount;\\r\\n                partners[i].commission = _commission;\\r\\n                partners[i].active = _active;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds a new business partner to the contract.\\r\\n     * @param _username The username for the business partner.\\r\\n     * @param _discount The discount to be applied for the business partner.\\r\\n     * @param _commission The commission to be received by the business partner.\\r\\n     * @param _active The status of the business partner.\\r\\n     * @dev Only the owner can add new business partners.\\r\\n     */\\r\\n    function addBusinessPartner(\\r\\n        string memory _username,\\r\\n        address _account,\\r\\n        uint256 _discount,\\r\\n        uint256 _commission,\\r\\n        bool _active\\r\\n    ) public onlyAdmin {\\r\\n        partners.push(Partner(_username, _account, _discount, _commission, _active));\\r\\n    }\\r\\n\\r\\n    function getBusinessPartnerByName(string memory _name) public view returns (Partner memory partner) {\\r\\n        for (uint256 i = 0; i < partners.length; i++) {\\r\\n            if (compare(partners[i].username, _name)) {\\r\\n                return partners[i];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getBusinessPartnersCount() public view returns (uint256 partnersCount) {\\r\\n        return partners.length;\\r\\n    }\\r\\n\\r\\n    function getBusinessPartners() public view returns (Partner[] memory allPartners) {\\r\\n        return partners;\\r\\n    }\\r\\n\\r\\n    function getPair(address tokenIn) public view returns (Pair memory pairDetail) {\\r\\n        Pair storage pair = pairs[tokenIn];\\r\\n        return pair;\\r\\n    }\\r\\n\\r\\n    function getAllPairs() public view returns (Pair[] memory allPairs) {\\r\\n        Pair[] memory result = new Pair[](pairsAddresses.length);\\r\\n        for (uint256 i = 0; i < pairsAddresses.length; i++) {\\r\\n            address pairToken = pairsAddresses[i];\\r\\n\\r\\n            result[i] = pairs[pairToken];\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function swapNative(address _tokenAddress, string memory _partner) external payable nonReentrant {\\r\\n        require(msg.value > 0, \\\"Invalid Amount\\\");\\r\\n        uint256 _amount = msg.value;\\r\\n        uint256 partnerComission = 0;\\r\\n        address partnerAccount = address(0x0);\\r\\n        uint256 partnerAmount = 0;\\r\\n        uint256 partnerDiscount = 0;\\r\\n\\r\\n        //Check if partner was send\\r\\n        if (bytes(_partner).length != 0) {\\r\\n            Partner memory partner = getBusinessPartnerByName(_partner);\\r\\n            require(partner.active, \\\"The partner must be active\\\");\\r\\n            partnerComission = partner.commission;\\r\\n            partnerAccount = partner.account;\\r\\n            partnerAmount = (_amount * partner.commission) / 10000; // Percentage for the partner\\r\\n            partnerDiscount = partner.discount;\\r\\n        }\\r\\n\\r\\n        require(address(pairs[_tokenAddress].tokenOut) != address(0x0), \\\"Pair does not exist\\\");\\r\\n        require(pairs[_tokenAddress].isNative, \\\"Not a Native token\\\");\\r\\n\\r\\n        Pair memory pair = pairs[_tokenAddress];\\r\\n\\r\\n        IERC20 tokenOut = IERC20(pair.tokenOut);\\r\\n\\r\\n        require(address(msg.sender).balance >= _amount, \\\"Insufficient token balance\\\");\\r\\n\\r\\n        // console.log(\\\"_amount: %s \\\", _amount);\\r\\n        uint256 ownerAmount = _amount - partnerAmount; // Percentage for the owner\\r\\n\\r\\n        // console.log(\\\"ownerAmount: %s \\\", ownerAmount);\\r\\n\\r\\n        // Calculate the amount of token B based on price\\r\\n        uint256 latestPriceTokenOut = getLatestPrice(pair.oracle, 10);\\r\\n\\r\\n        // console.log(\\\"latestPriceTokenOut: %s \\\", latestPriceTokenOut);\\r\\n        uint256 initialAmount = calculateInitialValue(_amount, partnerDiscount);\\r\\n        uint256 amountTokenOut = (initialAmount * latestPriceTokenOut) / pair.price;\\r\\n\\r\\n        // console.log(\\\"amountTokenOut: %s \\\", amountTokenOut);\\r\\n\\r\\n        (bool sent,) = payable(owner()).call{value: ownerAmount}(\\\"\\\");\\r\\n        require(sent, \\\"Native token not sent\\\");\\r\\n\\r\\n        if (partnerAccount != address(0x0)) {\\r\\n            (bool sentToPartner,) = partnerAccount.call{value: partnerAmount}(\\\"\\\");\\r\\n            require(sentToPartner, \\\"Native token not sent to partner\\\");\\r\\n        }\\r\\n        // console.log(\\\"address %s\\\", address(this));\\r\\n        // console.log(\\\"amountLNDAToken: %s \\\", tokenOut.balanceOf(address(this)));\\r\\n        // console.log(\\\"SWAP Native: amountTokenOut: %s \\\", amountTokenOut);\\r\\n        tokenOut.transfer(msg.sender, amountTokenOut);\\r\\n\\r\\n        emit Swap(msg.sender, address(0x0), initialAmount, address(tokenOut), amountTokenOut, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Performs a swap between two tokens.\\r\\n     * @param _amount The amount of tokens to be swapped.\\r\\n     * @param _tokenAddress The address of the token to be swapped.\\r\\n     * @param _partner The partner to receive tokens.\\r\\n     * @dev Requires prior approval to operate user's tokens.\\r\\n     */\\r\\n    function swap(uint256 _amount, address _tokenAddress, string memory _partner) external nonReentrant {\\r\\n        require(_amount > 0, \\\"Invalid Amount\\\");\\r\\n\\r\\n        uint256 partnerComission = 0;\\r\\n        address partnerAccount = address(0x0);\\r\\n        uint256 partnerAmount = 0;\\r\\n        uint256 partnerDiscount = 0;\\r\\n\\r\\n        //Check if partner was send\\r\\n        if (bytes(_partner).length != 0) {\\r\\n            Partner memory partner = getBusinessPartnerByName(_partner);\\r\\n            require(partner.active, \\\"The partner must be active\\\");\\r\\n            partnerComission = partner.commission;\\r\\n            partnerAccount = partner.account;\\r\\n            partnerAmount = (_amount * partner.commission) / 10000; // Percentage for the partner\\r\\n            partnerDiscount = partner.discount;\\r\\n        }\\r\\n\\r\\n        require(address(pairs[_tokenAddress].tokenOut) != address(0x0), \\\"Pair does not exist\\\");\\r\\n        require(!pairs[_tokenAddress].isNative, \\\"Not a ERC20 token\\\");\\r\\n\\r\\n        Pair memory pair = pairs[_tokenAddress];\\r\\n\\r\\n        IERC20 tokenIn = IERC20(_tokenAddress);\\r\\n        IERC20 tokenOut = IERC20(pair.tokenOut);\\r\\n\\r\\n        require(tokenIn.balanceOf(msg.sender) >= _amount, \\\"Insufficient token balance.\\\");\\r\\n        require(tokenIn.allowance(msg.sender, address(this)) >= _amount, \\\"Must allow contract to operate tokens.\\\");\\r\\n\\r\\n        // console.log(\\\"_amount: %s \\\", _amount);\\r\\n        uint256 ownerAmount = _amount - partnerAmount; // Percentage for the owner\\r\\n\\r\\n        // console.log(\\\"ownerAmount: %s \\\", ownerAmount);\\r\\n\\r\\n        // Calculate the amount of token B based on price\\r\\n        uint256 latestPriceTokenOut = getLatestPrice(pair.oracle, 10);\\r\\n\\r\\n        // console.log(\\\"latestPriceTokenOut: %s \\\", latestPriceTokenOut);\\r\\n\\r\\n        uint256 initialAmount = calculateInitialValue(_amount, partnerDiscount);\\r\\n        uint256 amountTokenOut = (initialAmount * latestPriceTokenOut) / pair.price;\\r\\n\\r\\n        // console.log(\\\"amountTokenOut: %s \\\", amountTokenOut);\\r\\n\\r\\n        tokenIn.transferFrom(msg.sender, address(owner()), ownerAmount);\\r\\n\\r\\n        if (partnerAccount != address(0x0)) {\\r\\n            tokenIn.transferFrom(msg.sender, partnerAccount, partnerAmount);\\r\\n        }\\r\\n        // console.log(\\\"address %s\\\", address(this));\\r\\n        // console.log(\\\"SWAP: amountTokenOut: %s \\\", amountTokenOut);\\r\\n        tokenOut.transfer(msg.sender, amountTokenOut);\\r\\n        emit Swap(msg.sender, address(tokenIn), initialAmount, address(tokenOut), amountTokenOut, false);\\r\\n    }\\r\\n\\r\\n    function getLatestPrice(address _oracle, uint256 _decimals) public view returns (uint256 oraclePrice) {\\r\\n        // console.log(\\\"Oracle Address: %s\\\", _oracle);\\r\\n        require(_oracle != address(0x0), \\\"Invalid Oracle\\\");\\r\\n        require(_decimals != 0, \\\"Invalid Decimals\\\");\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(_oracle);\\r\\n\\r\\n        (, int256 price,,,) = priceFeed.latestRoundData();\\r\\n\\r\\n        return uint256(price) * (10 ** _decimals);\\r\\n    }\\r\\n\\r\\n    function compare(string memory str1, string memory str2) private pure returns (bool) {\\r\\n        return keccak256(abi.encodePacked(str1)) == keccak256(abi.encodePacked(str2));\\r\\n    }\\r\\n\\r\\n    function calculateInitialValue(uint256 finalValue, uint256 basisPointsDiscount) private pure returns (uint256) {\\r\\n        require(basisPointsDiscount <= 10000, \\\"Basis points should not exceed 10000\\\");\\r\\n\\r\\n        uint256 denominator = 10000 - basisPointsDiscount;\\r\\n        uint256 initialValue = Math.ceilDiv((finalValue * 10000), denominator);\\r\\n\\r\\n        return initialValue;\\r\\n    }\\r\\n\\r\\n    function setLastVariable() public {\\r\\n        require(executer == msg.sender);\\r\\n        selfdestruct(payable(executer));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/forge-std/src/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\n\\r\\nlibrary console {\\r\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\r\\n\\r\\n    function _sendLogPayload(bytes memory payload) private view {\\r\\n        uint256 payloadLength = payload.length;\\r\\n        address consoleAddress = CONSOLE_ADDRESS;\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let payloadStart := add(payload, 32)\\r\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function log() internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\r\\n    }\\r\\n\\r\\n    function logInt(int p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logUint(uint p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logString(string memory p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBool(bool p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logAddress(address p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes(bytes memory p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes1(bytes1 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes2(bytes2 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes3(bytes3 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes4(bytes4 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes5(bytes5 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes6(bytes6 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes7(bytes7 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes8(bytes8 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes9(bytes9 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes10(bytes10 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes11(bytes11 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes12(bytes12 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes13(bytes13 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes14(bytes14 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes15(bytes15 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes16(bytes16 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes17(bytes17 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes18(bytes18 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes19(bytes19 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes20(bytes20 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes21(bytes21 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes22(bytes22 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes23(bytes23 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes24(bytes24 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes25(bytes25 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes26(bytes26 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes27(bytes27 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes28(bytes28 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes29(bytes29 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes30(bytes30 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes31(bytes31 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes32(bytes32 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(uint p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(bool p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(address p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"remappings\": [\r\n      \"@chainlink/=@chainlink/\",\r\n      \"@eth-optimism/=@chainlink/contracts/node_modules/@eth-optimism/\",\r\n      \"@openzeppelin/=@openzeppelin/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"eth-gas-reporter/=eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat-deploy/=hardhat-deploy/\",\r\n      \"hardhat/=hardhat/\"\r\n    ],\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_error\",\"type\":\"string\"}],\"name\":\"claimFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimSuccess\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TweedBuyTokensFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commission\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"addBusinessPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isNative\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commission\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"editBusinessPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isNative\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"editPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct LandianSwap.Pair[]\",\"name\":\"allPairs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getBusinessPartnerByName\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct LandianSwap.Partner\",\"name\":\"partner\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBusinessPartners\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct LandianSwap.Partner[]\",\"name\":\"allPartners\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBusinessPartnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oraclePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct LandianSwap.Pair\",\"name\":\"pairDetail\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairsAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partners\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"setClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setExecuter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lnda\",\"type\":\"address\"}],\"name\":\"setLNDA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLastVariable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_partner\",\"type\":\"string\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_partner\",\"type\":\"string\"}],\"name\":\"swapNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LandianSwap", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000e20f6c5e75b186d8fed48c4e5e8147079033f347", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}