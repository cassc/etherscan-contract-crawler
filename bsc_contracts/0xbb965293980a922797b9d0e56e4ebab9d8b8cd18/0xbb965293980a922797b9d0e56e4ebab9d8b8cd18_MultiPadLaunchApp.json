{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.4.24;\r\n\r\n//-----------------------------------------------------------------------------//\r\n//                             Name : MPadLaunchPad                            //\r\n//                     Swap tokens to claim launch tokens                      //\r\n//                         Distribution Contract                               //\r\n//-----------------------------------------------------------------------------//\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract IMainToken{\r\n    function transfer(address, uint256) public pure returns (bool);\r\n }\r\n \r\ncontract IBUSD{\r\n    function transferFrom(address, address, uint256) public pure returns (bool);\r\n    function transfer(address, uint256) public pure returns (bool);\r\n }\r\n \r\n \r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b,\"Invalid values\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0,\"Invalid values\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a,\"Invalid values\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a,\"Invalid values\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0,\"Invalid values\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract MultiPadLaunchApp is IBEP20{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    IMainToken iMainToken;\r\n    IBUSD iBUSD;\r\n    \r\n    //variable declaration\r\n    address private _owner;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    \r\n    // Special business use case variables\r\n    mapping (address => bool) _whitelistedAddress;\r\n    mapping (address => uint256) _lockingTimeForSale;\r\n    mapping (address => uint256) _recordSale;\r\n    mapping (address => bool) _addressLocked;\r\n    mapping (address => uint256) _finalSoldAmount;\r\n    mapping (address => mapping(uint256 => bool)) reEntrance;\r\n    mapping (address => uint256) specialAddBal;\r\n    mapping (address => uint256) _contributionBUSD;\r\n    mapping (address => mapping(uint256 => uint256)) _claimedByUser;\r\n    mapping (address =>mapping(uint256 => uint256))_thisSaleContribution;\r\n    mapping (address => uint) _multiplier;\r\n    \r\n    address[] private _whitelistedUserAddresses;\r\n    uint256 private saleStartTime;\r\n    uint256 private saleEndTime;\r\n    uint256 private saleMinimumAmount;\r\n    uint256 private saleMaximumAmount;\r\n    uint256 private saleId = 0;\r\n    uint256 private tokenPrice;\r\n    uint256 private deploymentTime; \r\n    uint256 private pricePerToken;\r\n    uint256 private hardCap;\r\n    uint256 private decimalBalancer = 1000000000;\r\n    uint256 private IDOAvailable;\r\n    address private tokenContractAddress;\r\n    bool whitelistFlag = true;\r\n    address private IDOAddress;\r\n    string private _baseName;\r\n    uint256 private _claimTime1;\r\n    address public _BUSDAddress;\r\n    uint256 public BUSDPrice;\r\n    \r\n    constructor (string memory name, string memory symbol, uint256 totalSupply, address owner, uint256 _totalDummySupply) public {\r\n        _name = name;\r\n        _symbol = symbol; \r\n        _totalSupply = totalSupply*(10**uint256(_decimals));\r\n        _balances[owner] = _totalSupply;\r\n        _owner = owner;\r\n         deploymentTime =  block.timestamp;\r\n        _transfer(_owner,address(this),_totalDummySupply*(10**uint256(_decimals)));\r\n    }\r\n\r\n    function setTokenAddress(address _ITokenContract) onlyOwner external returns(bool){\r\n        tokenContractAddress = _ITokenContract;\r\n        iMainToken = IMainToken(_ITokenContract);\r\n    }\r\n    \r\n    function setBUSDAddress(address _iBUSDAdd) onlyOwner external returns(bool){\r\n        _BUSDAddress = _iBUSDAdd;\r\n        iBUSD = IBUSD(_iBUSDAdd);\r\n    }\r\n    \r\n    function setBUSDprice(uint256 _BUSDPrice) onlyOwner external returns(bool){\r\n        BUSDPrice = _BUSDPrice;\r\n    }\r\n    \r\n    \r\n    \r\n\r\n    /* ----------------------------------------------------------------------------\r\n     * View only functions\r\n     * ----------------------------------------------------------------------------\r\n     */\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function setBaseName(string baseName) external onlyOwner returns (bool) {\r\n         _baseName = baseName;\r\n         return true;\r\n    }\r\n    \r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function baseName() external view returns (string memory) {\r\n        return _baseName;\r\n    }\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence.\r\n     */\r\n    function totalSupply() external  view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public  view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n\r\n\r\n    /* ----------------------------------------------------------------------------\r\n     * Transfer, allow and burn functions\r\n     * ----------------------------------------------------------------------------\r\n     */\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses.\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0),\"Invalid to address\");\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    \r\n    /*----------------------------------------------------------------------------\r\n     * Functions for owner\r\n     *----------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n    * @dev get address of smart contract owner\r\n    * @return address of owner\r\n    */\r\n    function getowner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev modifier to check if the message sender is owner\r\n    */\r\n    modifier onlyOwner() {\r\n        require(isOwner(),\"You are not authenticate to make this transfer\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for modifier\r\n     */\r\n    function isOwner() internal view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer ownership of the smart contract. For owner only\r\n     * @return request status\r\n      */\r\n    function transferOwnership(address newOwner) external onlyOwner returns (bool){\r\n        require(newOwner != address(0), \"Owner address cant be zero\");\r\n        _owner = newOwner;\r\n        return true;\r\n    }\r\n\r\n    /* ----------------------------------------------------------------------------\r\n     *  Functions for Additional Business Logic For Owner Functions\r\n     * ----------------------------------------------------------------------------\r\n     */\r\n     \r\n     /**\r\n     * @dev Whitelist Addresses for further transactions\r\n     * @param _userAddresses  Array of user addresses\r\n     */\r\n     function whitelistUserAdress(address[]  _userAddresses, uint[] _multiplierAmount) external onlyOwner returns(bool){\r\n         uint256 count = _userAddresses.length;\r\n         require(count < 201, \"Array Overflow\");    //Max 200 enteries at a time\r\n          for (uint256 i = 0; i < count; i++){\r\n               _whitelistedUserAddresses.push(_userAddresses[i]);\r\n               _whitelistedAddress[_userAddresses[i]] = true;\r\n               _multiplier[_userAddresses[i]] = _multiplierAmount[i];\r\n          }\r\n         return true;\r\n     }\r\n     \r\n     //Get the multiplier details\r\n     function getMultiplierbyAddress(address _userAddress) external view returns(uint256){\r\n      return _multiplier[_userAddress];\r\n     }\r\n     \r\n     /**\r\n     * @dev get the list of whitelisted addresses\r\n     */\r\n     function getWhitelistUserAdress() external view returns(address[] memory){\r\n         return _whitelistedUserAddresses;\r\n     }\r\n     \r\n     /**\r\n     * @dev Set sale parameters for users to buy new tokens\r\n     * @param _startTime Start time of the sale\r\n     * @param _endTime End time of the sale\r\n     * @param _minimumAmount Minimum accepted amount\r\n     * @param _maximumAmount Maximum accepted amount\r\n     */\r\n     function setSaleParameter(\r\n         uint256 _startTime,\r\n         uint256 _endTime,\r\n         uint256 _minimumAmount,\r\n         uint256 _maximumAmount,\r\n         bool _whitelistFlag\r\n         ) external onlyOwner returns(bool){\r\n          require(_startTime > 0 && _endTime > 0  && _minimumAmount > 0  && _maximumAmount > 0, \"Invalid Values\");\r\n          saleStartTime = _startTime;\r\n          saleEndTime = _endTime;\r\n          saleMinimumAmount = _minimumAmount;\r\n          saleMaximumAmount = _maximumAmount;\r\n          saleId = saleId.add(1);\r\n          whitelistFlag = _whitelistFlag;\r\n         return true;\r\n     }\r\n     \r\n     /**\r\n     * @dev Get Sale Details Description\r\n     */\r\n     function getSaleParameter(address _userAddress) external view returns(\r\n         uint256 _startTime,\r\n         uint256 _endTime,\r\n         uint256 _minimumAmount,\r\n         uint256 _maximumAmount,\r\n         uint256 _saleId,\r\n         bool _whitelistFlag\r\n         ){\r\n            if(whitelistFlag == true && _whitelistedAddress[_userAddress] == true){    \r\n            _maximumAmount = saleMaximumAmount.mul(_multiplier[_userAddress]);\r\n           }\r\n           else{\r\n            _maximumAmount = saleMaximumAmount;\r\n           }\r\n          _startTime  =  saleStartTime;\r\n          _endTime = saleEndTime;\r\n          _minimumAmount = saleMinimumAmount;\r\n          \r\n          _saleId = saleId;\r\n          _whitelistFlag = whitelistFlag;\r\n     }\r\n     \r\n     /**\r\n     * @dev Owner can set token price\r\n     * @param _tokenPrice price of 1 Token\r\n     */\r\n     function setTokenPrice(\r\n         uint256 _tokenPrice\r\n         ) external onlyOwner returns(bool){\r\n          tokenPrice = _tokenPrice;\r\n         return true;\r\n     }\r\n     \r\n     /**\r\n     * @dev Get token price\r\n     */\r\n     function getTokenPrice() external view returns(uint256){\r\n          return tokenPrice;\r\n     }\r\n     \r\n     \r\n    /* ----------------------------------------------------------------------------\r\n     *  Functions for Additional Business Logic For Users \r\n     * ----------------------------------------------------------------------------\r\n     */    \r\n     \r\n    modifier checkSaleValidations(address _userAddress, uint256 _value){\r\n     if(whitelistFlag == true){    \r\n     require(_whitelistedAddress[_userAddress] == true, \"Address not Whitelisted\" );\r\n     require(_value <= saleMaximumAmount.mul(_multiplier[_userAddress]), \"Total amount should be less than maximum limit\");\r\n     require(_thisSaleContribution[_userAddress][saleId].add(_value) <= saleMaximumAmount.mul(_multiplier[_userAddress]), \"Total amount should be less than maximum limit\");\r\n     }\r\n     else{\r\n         require(_thisSaleContribution[_userAddress][saleId].add(_value) <= saleMaximumAmount, \"Total amount should be less than maximum limit\");\r\n     }\r\n     require(saleStartTime < block.timestamp , \"Sale not started\");\r\n     require(saleEndTime > block.timestamp, \"Sale Ended\");\r\n     require(_contributionBUSD[_userAddress].add(_value) >= saleMinimumAmount, \"Total amount should be more than minimum limit\");\r\n     require(_value <= IDOAvailable, \"Hard Cap Reached\");\r\n        _;\r\n    }\r\n    \r\n    //Check the expected amount per bnb \r\n    function checkTokensExpected(uint256 _value) view external returns(uint256){\r\n        return _value.mul(tokenPrice).div(decimalBalancer);\r\n    }\r\n    \r\n    /*\r\n     * @dev Get Purchaseable amount\r\n     */\r\n      function getPurchaseableTokens() external view returns(uint256){\r\n         return hardCap;\r\n     }\r\n     \r\n    \r\n    /*\r\n     * @dev Buy New tokens from the sale\r\n     */\r\n     function buyTokens(uint256 _contribution) external checkSaleValidations(msg.sender, _contribution) returns(bool){\r\n         iBUSD.transferFrom(msg.sender,address(this),_contribution);\r\n         _trasferInLockingState(msg.sender, _contribution);\r\n         return true;\r\n     }\r\n     \r\n     /*\r\n      * @dev Internal function to achieve \r\n      */\r\n     function _trasferInLockingState(\r\n         address _userAddress,\r\n         uint256 _amountTransfer\r\n         ) internal returns(bool){\r\n        _lockingTimeForSale[_userAddress] = block.timestamp;\r\n        uint256 calculateTokens = (_amountTransfer.mul(tokenPrice)).div(decimalBalancer);\r\n        uint256 earnedTokens = _recordSale[_userAddress].add(calculateTokens);\r\n        _transfer(address(this),msg.sender,calculateTokens);\r\n        _recordSale[_userAddress] = earnedTokens;\r\n        _finalSoldAmount[_userAddress] = earnedTokens;\r\n        _contributionBUSD[_userAddress] = _contributionBUSD[_userAddress].add(_amountTransfer);\r\n        _thisSaleContribution[_userAddress][saleId] = _thisSaleContribution[_userAddress][saleId].add(_amountTransfer);\r\n        IDOAvailable = IDOAvailable.sub(calculateTokens);\r\n         return true;\r\n     }\r\n     \r\n     /*\r\n     * @dev Owner can set hard cap for IDO \r\n     */\r\n     function setIDOavailable(uint256 _IDOHardCap) external onlyOwner returns(bool){\r\n         require(_IDOHardCap <= balanceOf(address(this)) && _IDOHardCap > 0, \"Value should not be more than IDO balance and greater than 0\" );\r\n         hardCap = _IDOHardCap;\r\n         IDOAvailable = _IDOHardCap;\r\n         return true;\r\n     }\r\n     \r\n    /*\r\n     * @dev Claim Purchased token by lock number \r\n     */\r\n    function claimPurchasedTokens(uint256 _lockNumber) external validateClaim(msg.sender,_lockNumber) returns (bool){\r\n        uint256 calculation;\r\n        if(_lockNumber == 1)\r\n        calculation  = (_finalSoldAmount[msg.sender]).div(10);\r\n        else\r\n        calculation  = (_finalSoldAmount[msg.sender]).mul(30).div(100);\r\n        iMainToken.transfer(msg.sender,calculation);\r\n        _recordSale[msg.sender] = _recordSale[msg.sender].sub(calculation);\r\n        reEntrance[msg.sender][_lockNumber] = true;\r\n        _claimedByUser[msg.sender][_lockNumber] = calculation;\r\n    }\r\n    \r\n    //validate claim tokens\r\n    modifier validateClaim(address _userAddress, uint256 _lockNumber)\r\n    {\r\n        require(_recordSale[_userAddress] > 0, \"Not sufficient purchase Balance\");\r\n        require(_lockNumber == 1 || _lockNumber == 2 || _lockNumber == 3 || _lockNumber == 4, \"Invalid Lock Number\");\r\n        if(_lockNumber == 1){   //Users will be able to withdraw tokens only after 1.5 hours of end time\r\n            require(block.timestamp > saleEndTime + _claimTime1 && reEntrance[_userAddress][_lockNumber] != true, \"Insufficient Unlocked Tokens\");\r\n        }\r\n        if(_lockNumber == 2){    // 1 month\r\n            require(block.timestamp > saleEndTime + _claimTime1 +  2592000  && reEntrance[_userAddress][_lockNumber] != true , \"Insufficient Unlocked Tokens\");\r\n        }\r\n        if(_lockNumber == 3){    // 2 month\r\n            require(block.timestamp > saleEndTime + _claimTime1 +  5184000  && reEntrance[_userAddress][_lockNumber] != true , \"Insufficient Unlocked Tokens\");\r\n        }\r\n        if(_lockNumber == 4){    // 3 month\r\n            require(block.timestamp > saleEndTime + _claimTime1 +  7776000  && reEntrance[_userAddress][_lockNumber] != true , \"Insufficient Unlocked Tokens\");\r\n        }\r\n        _;\r\n    }\r\n    \r\n    /*\r\n     * @dev Check if the user address is whitelisted or not\r\n     */ \r\n    function checkWhitelistedAddress(address _userAddress) view external returns(bool){\r\n        require(_userAddress != address(0), \"addresses should not be 0\");\r\n        return _whitelistedAddress[_userAddress];\r\n    }\r\n    \r\n    /*\r\n     * @dev Check all locking addresses\r\n     */\r\n    modifier checkLockedAddresses(address _lockedAddresses){\r\n           require(_addressLocked[_lockedAddresses] != true, \"Locking Address\");\r\n       _;\r\n    }\r\n    \r\n    /*\r\n     * @dev Admin can withdraw the bnb  \r\n     */\r\n    function withdrawCurrency(uint256 _amount) external onlyOwner returns(bool){\r\n        msg.sender.transfer(_amount);\r\n        return true;\r\n    }\r\n    \r\n    /*\r\n     * @dev Get user tokens by address \r\n     */\r\n    function getUserTokensByAdd(address _userAddress) external view returns(uint256 _div1, uint256 _div2, uint256 _div3, uint256 _div4, uint256 _div5){\r\n        _div1 = _finalSoldAmount[_userAddress].div(10);\r\n        _div2 = _finalSoldAmount[_userAddress].mul(30).div(100);\r\n        _div3 = _finalSoldAmount[_userAddress].mul(30).div(100);\r\n        _div4 = _finalSoldAmount[_userAddress].mul(30).div(100);\r\n        _div5 = 0;\r\n        if(reEntrance[_userAddress][1] == true){\r\n            _div1 = 0;\r\n        }\r\n        if(reEntrance[_userAddress][2] == true){\r\n            _div2 = 0;\r\n        }\r\n        if(reEntrance[_userAddress][3] == true){\r\n            _div3 = 0;\r\n        }\r\n        if(reEntrance[_userAddress][4] == true){\r\n            _div4 = 0;\r\n        }\r\n        if(reEntrance[_userAddress][5] == true){\r\n            _div5 = 0;\r\n        }\r\n        return(_div1,_div2,_div3,_div4,_div5);\r\n    }\r\n    \r\n    /*\r\n     * @dev Get contract BNb balance to display\r\n     */ \r\n    function checkContractBNBBalance() external view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n    \r\n    //get sold status\r\n    function getSoldStatus() external view returns(uint256 _totalAvailable, uint256 _currentAvailable){\r\n       _totalAvailable = hardCap;\r\n       _currentAvailable = IDOAvailable;\r\n    }\r\n    \r\n    function getAmountPurchased(address _userAddress) external view returns(uint256 _contribution, uint256 _allocation){\r\n       _contribution =  _contributionBUSD[_userAddress];\r\n        _allocation = _finalSoldAmount[_userAddress];\r\n    }\r\n    \r\n    //check contract block.timestamp time \r\n    function checkContractTime() external view returns(uint256){\r\n        return block.timestamp;\r\n    }\r\n    \r\n    function getClaimDates() view external returns(uint256 _d1, uint256 _d2, uint256 _d3, uint256 _d4, uint256 _d5){\r\n        _d1 = saleEndTime + _claimTime1;  \r\n        _d2 = saleEndTime + _claimTime1 +  2592000;\r\n        _d3 = saleEndTime + _claimTime1 +  5184000;\r\n        _d4 = saleEndTime + _claimTime1 +  7776000;\r\n        _d5 = 0;\r\n        return(_d1, _d2, _d3, _d4,_d5);\r\n    }\r\n    \r\n    /*\r\n     * @dev Get claimed tokens by user address\r\n     */\r\n    function getClaimedTokensHistory(address _userAddress) view external returns(uint256 r1,uint256 r2, uint256 r3, uint256 r4, uint256 r5){\r\n        r1 = _claimedByUser[_userAddress][1];\r\n        r2 = _claimedByUser[_userAddress][2];\r\n        r3 = _claimedByUser[_userAddress][3];\r\n        r4 = _claimedByUser[_userAddress][4];\r\n        r5 = 0;\r\n        return(r1, r2, r3, r4, r5);\r\n    }\r\n    \r\n    /*\r\n     * @dev Set bnb price to display per token\r\n     */\r\n    function setViewPricePerToken(uint256 _price) external onlyOwner returns(bool){\r\n        pricePerToken = _price;\r\n        return true;\r\n    }\r\n    \r\n    /*\r\n     * @dev Get BNB price per token to display \r\n     */\r\n    function getViewPricePerToken() view external returns(uint256){\r\n        return pricePerToken;\r\n    }\r\n    \r\n\r\n    function setclaimTime1(uint256 claimTime1) external onlyOwner returns(bool){\r\n        _claimTime1 = claimTime1;\r\n        return true;\r\n    }\r\n    \r\n\r\n    function getclaimTime1() view external returns(uint256){\r\n        return _claimTime1;\r\n    }\r\n    \r\n    function withdrawPeningTokens(uint256 _amount) external onlyOwner returns(bool){\r\n       iBUSD.transfer(msg.sender, _amount);\r\n       return true;\r\n         \r\n    }\r\n    \r\n    function getBUSDAddress() public view returns(address){\r\n        return _BUSDAddress;\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"name\":\"_multiplierAmount\",\"type\":\"uint256[]\"}],\"name\":\"whitelistUserAdress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserTokensByAdd\",\"outputs\":[{\"name\":\"_div1\",\"type\":\"uint256\"},{\"name\":\"_div2\",\"type\":\"uint256\"},{\"name\":\"_div3\",\"type\":\"uint256\"},{\"name\":\"_div4\",\"type\":\"uint256\"},{\"name\":\"_div5\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_IDOHardCap\",\"type\":\"uint256\"}],\"name\":\"setIDOavailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"baseName\",\"type\":\"string\"}],\"name\":\"setBaseName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSoldStatus\",\"outputs\":[{\"name\":\"_totalAvailable\",\"type\":\"uint256\"},{\"name\":\"_currentAvailable\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ITokenContract\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contribution\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBUSDAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getclaimTime1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockNumber\",\"type\":\"uint256\"}],\"name\":\"claimPurchasedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_minimumAmount\",\"type\":\"uint256\"},{\"name\":\"_maximumAmount\",\"type\":\"uint256\"},{\"name\":\"_whitelistFlag\",\"type\":\"bool\"}],\"name\":\"setSaleParameter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPeningTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_BUSDAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_BUSDPrice\",\"type\":\"uint256\"}],\"name\":\"setBUSDprice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkContractTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getClaimDates\",\"outputs\":[{\"name\":\"_d1\",\"type\":\"uint256\"},{\"name\":\"_d2\",\"type\":\"uint256\"},{\"name\":\"_d3\",\"type\":\"uint256\"},{\"name\":\"_d4\",\"type\":\"uint256\"},{\"name\":\"_d5\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getAmountPurchased\",\"outputs\":[{\"name\":\"_contribution\",\"type\":\"uint256\"},{\"name\":\"_allocation\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BUSDPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getMultiplierbyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkContractBNBBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_iBUSDAdd\",\"type\":\"address\"}],\"name\":\"setBUSDAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setViewPricePerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"checkWhitelistedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelistUserAdress\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getClaimedTokensHistory\",\"outputs\":[{\"name\":\"r1\",\"type\":\"uint256\"},{\"name\":\"r2\",\"type\":\"uint256\"},{\"name\":\"r3\",\"type\":\"uint256\"},{\"name\":\"r4\",\"type\":\"uint256\"},{\"name\":\"r5\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPurchaseableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getSaleParameter\",\"outputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_minimumAmount\",\"type\":\"uint256\"},{\"name\":\"_maximumAmount\",\"type\":\"uint256\"},{\"name\":\"_saleId\",\"type\":\"uint256\"},{\"name\":\"_whitelistFlag\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"checkTokensExpected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getViewPricePerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getowner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"claimTime1\",\"type\":\"uint256\"}],\"name\":\"setclaimTime1\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"_totalDummySupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "MultiPadLaunchApp", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000072456b616c589178bff29e9f70254870e976abf20000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000442544c4400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000442544c4400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://514878dc109e0c751889f476c6fbd2406be659774209045be028c41c86a05511"}