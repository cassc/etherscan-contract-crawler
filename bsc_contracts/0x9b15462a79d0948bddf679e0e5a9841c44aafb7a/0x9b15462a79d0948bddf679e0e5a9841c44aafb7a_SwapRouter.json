{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Swap/IRouterHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\ninterface IRouterHelper {\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/Swap/RouterHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./lib/PancakeLibrary.sol\\\";\\nimport \\\"./interfaces/IWBNB.sol\\\";\\nimport \\\"./lib/TransferHelper.sol\\\";\\n\\nimport \\\"./interfaces/CustomErrors.sol\\\";\\nimport \\\"./IRouterHelper.sol\\\";\\n\\nabstract contract RouterHelper is IRouterHelper {\\n    /// @notice Select the type of Token for which either a supporting fee would be deducted or not at the time of transfer.\\n    enum TypesOfTokens {\\n        NON_SUPPORTING_FEE,\\n        SUPPORTING_FEE\\n    }\\n\\n    /// @notice Address of WBNB contract.\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable WBNB;\\n\\n    /// @notice Address of pancake swap factory contract.\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable factory;\\n\\n    // **************\\n    // *** EVENTS ***\\n    // **************\\n    /// @notice This event is emitted whenever a successful swap (tokenA -> tokenB) occurs\\n    event SwapTokensForTokens(address indexed swapper, address[] indexed path, uint256[] indexed amounts);\\n\\n    /// @notice This event is emitted whenever a successful swap (tokenA -> tokenB) occurs\\n    event SwapTokensForTokensAtSupportingFee(address indexed swapper, address[] indexed path);\\n\\n    /// @notice This event is emitted whenever a successful swap (BNB -> token) occurs\\n    event SwapBnbForTokens(address indexed swapper, address[] indexed path, uint256[] indexed amounts);\\n\\n    /// @notice This event is emitted whenever a successful swap (BNB -> token) occurs\\n    event SwapBnbForTokensAtSupportingFee(address indexed swapper, address[] indexed path);\\n\\n    /// @notice This event is emitted whenever a successful swap (token -> BNB) occurs\\n    event SwapTokensForBnb(address indexed swapper, address[] indexed path, uint256[] indexed amounts);\\n\\n    /// @notice This event is emitted whenever a successful swap (token -> BNB) occurs\\n    event SwapTokensForBnbAtSupportingFee(address indexed swapper, address[] indexed path);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address WBNB_, address factory_) {\\n        if (WBNB_ == address(0) || factory_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        WBNB = WBNB_;\\n        factory = factory_;\\n    }\\n\\n    /**\\n     * @notice Perform swap on the path(pairs)\\n     * @param amounts Araay of amounts of tokens after performing the swap\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param _to Recipient of the output tokens.\\n     */\\n    function _swap(uint256[] memory amounts, address[] memory path, address _to) internal virtual {\\n        for (uint256 i; i < path.length - 1; ) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            address to = i < path.length - 2 ? PancakeLibrary.pairFor(factory, output, path[i + 2]) : _to;\\n            IPancakePair(PancakeLibrary.pairFor(factory, input, output)).swap(amount0Out, amount1Out, to, new bytes(0));\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n    }\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n\\n    /**\\n     * @notice Perform swap on the path(pairs) for supporting fee\\n     * @dev requires the initial amount to have already been sent to the first pair\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param _to Recipient of the output tokens.\\n     */\\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\\n        for (uint256 i; i < path.length - 1; ) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\\n            IPancakePair pair = IPancakePair(PancakeLibrary.pairFor(factory, input, output));\\n            uint256 amountInput;\\n            uint256 amountOutput;\\n            {\\n                // scope to avoid stack too deep errors\\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0\\n                    ? (reserve0, reserve1)\\n                    : (reserve1, reserve0);\\n\\n                uint256 balance = IERC20(input).balanceOf(address(pair));\\n                amountInput = balance - reserveInput;\\n                amountOutput = PancakeLibrary.getAmountOut(amountInput, reserveInput, reserveOutput);\\n            }\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOutput)\\n                : (amountOutput, uint256(0));\\n            address to = i < path.length - 2 ? PancakeLibrary.pairFor(factory, output, path[i + 2]) : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Swap token A for token B\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param swapFor TypesOfTokens, either supporing fee or non supporting fee\\n     * @return amounts Array of amounts after performing swap for respective pairs in path\\n     */\\n    function _swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        TypesOfTokens swapFor\\n    ) internal returns (uint256[] memory amounts) {\\n        address pairAddress = PancakeLibrary.pairFor(factory, path[0], path[1]);\\n        if (swapFor == TypesOfTokens.NON_SUPPORTING_FEE) {\\n            amounts = PancakeLibrary.getAmountsOut(factory, amountIn, path);\\n            if (amounts[amounts.length - 1] < amountOutMin) {\\n                revert OutputAmountBelowMinimum(amounts[amounts.length - 1], amountOutMin);\\n            }\\n            TransferHelper.safeTransferFrom(path[0], msg.sender, pairAddress, amounts[0]);\\n            _swap(amounts, path, to);\\n            emit SwapTokensForTokens(msg.sender, path, amounts);\\n        } else {\\n            TransferHelper.safeTransferFrom(path[0], msg.sender, pairAddress, amountIn);\\n            _swapSupportingFeeOnTransferTokens(path, to);\\n            emit SwapTokensForTokensAtSupportingFee(msg.sender, path);\\n        }\\n    }\\n\\n    /**\\n     * @notice Swap exact BNB for token\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param swapFor TypesOfTokens, either supporing fee or non supporting fee\\n     * @return amounts Array of amounts after performing swap for respective pairs in path\\n     */\\n    function _swapExactBNBForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        TypesOfTokens swapFor\\n    ) internal returns (uint256[] memory amounts) {\\n        address wBNBAddress = WBNB;\\n        if (path[0] != wBNBAddress) {\\n            revert WrongAddress(wBNBAddress, path[0]);\\n        }\\n        IWBNB(wBNBAddress).deposit{ value: msg.value }();\\n        TransferHelper.safeTransfer(wBNBAddress, PancakeLibrary.pairFor(factory, path[0], path[1]), msg.value);\\n        if (swapFor == TypesOfTokens.NON_SUPPORTING_FEE) {\\n            amounts = PancakeLibrary.getAmountsOut(factory, msg.value, path);\\n            if (amounts[amounts.length - 1] < amountOutMin) {\\n                revert OutputAmountBelowMinimum(amounts[amounts.length - 1], amountOutMin);\\n            }\\n            _swap(amounts, path, to);\\n            emit SwapBnbForTokens(msg.sender, path, amounts);\\n        } else {\\n            _swapSupportingFeeOnTransferTokens(path, to);\\n            emit SwapBnbForTokensAtSupportingFee(msg.sender, path);\\n        }\\n    }\\n\\n    /**\\n     * @notice Swap token A for BNB\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of BNB to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param swapFor TypesOfTokens, either supporing fee or non supporting fee\\n     * @return amounts Array of amounts after performing swap for respective pairs in path\\n     */\\n    function _swapExactTokensForBNB(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        TypesOfTokens swapFor\\n    ) internal returns (uint256[] memory amounts) {\\n        if (path[path.length - 1] != WBNB) {\\n            revert WrongAddress(WBNB, path[path.length - 1]);\\n        }\\n        uint256 WBNBAmount;\\n        if (swapFor == TypesOfTokens.NON_SUPPORTING_FEE) {\\n            amounts = PancakeLibrary.getAmountsOut(factory, amountIn, path);\\n            if (amounts[amounts.length - 1] < amountOutMin) {\\n                revert OutputAmountBelowMinimum(amounts[amounts.length - 1], amountOutMin);\\n            }\\n            TransferHelper.safeTransferFrom(\\n                path[0],\\n                msg.sender,\\n                PancakeLibrary.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n            );\\n            _swap(amounts, path, address(this));\\n            WBNBAmount = amounts[amounts.length - 1];\\n        } else {\\n            uint256 balanceBefore = IWBNB(WBNB).balanceOf(address(this));\\n            TransferHelper.safeTransferFrom(\\n                path[0],\\n                msg.sender,\\n                PancakeLibrary.pairFor(factory, path[0], path[1]),\\n                amountIn\\n            );\\n            _swapSupportingFeeOnTransferTokens(path, address(this));\\n            uint256 balanceAfter = IWBNB(WBNB).balanceOf(address(this));\\n            WBNBAmount = balanceAfter - balanceBefore;\\n        }\\n        IWBNB(WBNB).withdraw(WBNBAmount);\\n        if (to != address(this)) {\\n            TransferHelper.safeTransferBNB(to, WBNBAmount);\\n        }\\n        if (swapFor == TypesOfTokens.NON_SUPPORTING_FEE) {\\n            emit SwapTokensForBnb(msg.sender, path, amounts);\\n        } else {\\n            emit SwapTokensForBnbAtSupportingFee(msg.sender, path);\\n        }\\n    }\\n\\n    /**\\n     * @notice Swap token A for exact amount of token B\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @return amounts Array of amounts after performing swap for respective pairs in path\\n     **/\\n    function _swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to\\n    ) internal returns (uint256[] memory amounts) {\\n        amounts = PancakeLibrary.getAmountsIn(factory, amountOut, path);\\n        if (amounts[0] > amountInMax) {\\n            revert InputAmountAboveMaximum(amounts[0], amountInMax);\\n        }\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            PancakeLibrary.pairFor(factory, path[0], path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, path, to);\\n        emit SwapTokensForTokens(msg.sender, path, amounts);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for exact amount of token B\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @return amounts Array of amounts after performing swap for respective pairs in path\\n     **/\\n    function _swapBNBForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to\\n    ) internal returns (uint256[] memory amounts) {\\n        if (path[0] != WBNB) {\\n            revert WrongAddress(WBNB, path[0]);\\n        }\\n        amounts = PancakeLibrary.getAmountsIn(factory, amountOut, path);\\n        if (amounts[0] > msg.value) {\\n            revert ExcessiveInputAmount(amounts[0], msg.value);\\n        }\\n        IWBNB(WBNB).deposit{ value: amounts[0] }();\\n        TransferHelper.safeTransfer(WBNB, PancakeLibrary.pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(amounts, path, to);\\n        // refund dust BNB, if any\\n        if (msg.value > amounts[0]) TransferHelper.safeTransferBNB(msg.sender, msg.value - amounts[0]);\\n        emit SwapBnbForTokens(msg.sender, path, amounts);\\n    }\\n\\n    /**\\n     * @notice Swap token A for exact BNB\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @return amounts Array of amounts after performing swap for respective pairs in path\\n     **/\\n    function _swapTokensForExactBNB(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to\\n    ) internal returns (uint256[] memory amounts) {\\n        if (path[path.length - 1] != WBNB) {\\n            revert WrongAddress(WBNB, path[path.length - 1]);\\n        }\\n        amounts = PancakeLibrary.getAmountsIn(factory, amountOut, path);\\n        if (amounts[0] > amountInMax) {\\n            revert InputAmountAboveMaximum(amounts[amounts.length - 1], amountInMax);\\n        }\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            PancakeLibrary.pairFor(factory, path[0], path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, path, address(this));\\n        IWBNB(WBNB).withdraw(amounts[amounts.length - 1]);\\n        if (to != address(this)) {\\n            TransferHelper.safeTransferBNB(to, amounts[amounts.length - 1]);\\n        }\\n        emit SwapTokensForBnb(msg.sender, path, amounts);\\n    }\\n\\n    // **** LIBRARY FUNCTIONS ****\\n\\n    /**\\n     * @notice Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n     * @param amountA The amount of token A\\n     * @param reserveA The amount of reserves for token A before swap\\n     * @param reserveB The amount of reserves for token B before swap\\n     * @return amountB An equivalent amount of the token B\\n     **/\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure virtual override returns (uint256 amountB) {\\n        return PancakeLibrary.quote(amountA, reserveA, reserveB);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n     * @param amountIn The amount of token A need to swap\\n     * @param reserveIn The amount of reserves for token A before swap\\n     * @param reserveOut The amount of reserves for token B after swap\\n     * @return amountOut The maximum output amount of the token B\\n     **/\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure virtual override returns (uint256 amountOut) {\\n        return PancakeLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\\n    }\\n\\n    /**\\n     * @notice Given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n     * @param amountOut The amount of token B after swap\\n     * @param reserveIn The amount of reserves for token A before swap\\n     * @param reserveOut The amount of reserves for token B after swap\\n     * @return amountIn Required input amount of the token A\\n     **/\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure virtual override returns (uint256 amountIn) {\\n        return PancakeLibrary.getAmountIn(amountOut, reserveIn, reserveOut);\\n    }\\n\\n    /**\\n     * @notice performs chained getAmountOut calculations on any number of pairs.\\n     * @param amountIn The amount of tokens to swap.\\n     * @param path Array with addresses of the underlying assets to be swapped.\\n     */\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] memory path\\n    ) external view virtual override returns (uint256[] memory amounts) {\\n        return PancakeLibrary.getAmountsOut(factory, amountIn, path);\\n    }\\n\\n    /**\\n     * @notice performs chained getAmountIn calculations on any number of pairs.\\n     * @param amountOut amountOut The amount of the tokens needs to be as output token.\\n     * @param path Array with addresses of the underlying assets to be swapped.\\n     */\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] memory path\\n    ) external view virtual override returns (uint256[] memory amounts) {\\n        return PancakeLibrary.getAmountsIn(factory, amountOut, path);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Swap/SwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IPancakeSwapV2Router.sol\\\";\\nimport \\\"./interfaces/IVtoken.sol\\\";\\nimport \\\"./RouterHelper.sol\\\";\\nimport \\\"./interfaces/IVBNB.sol\\\";\\nimport \\\"./interfaces/IVtoken.sol\\\";\\nimport \\\"./interfaces/InterfaceComptroller.sol\\\";\\n\\n/**\\n * @title Venus's Pancake Swap Integration Contract\\n * @notice This contracts allows users to swap a token for another one and supply/repay with the latter.\\n * @dev For all functions that do not swap native BNB, user must approve this contract with the amount, prior the calling the swap function.\\n * @author 0xlucian\\n */\\n\\ncontract SwapRouter is Ownable2Step, RouterHelper, IPancakeSwapV2Router {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable comptrollerAddress;\\n\\n    uint256 private constant _NOT_ENTERED = 1;\\n\\n    uint256 private constant _ENTERED = 2;\\n\\n    address public vBNBAddress;\\n\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    uint256 internal _status;\\n\\n    // ***************\\n    // ** MODIFIERS **\\n    // ***************\\n    modifier ensure(uint256 deadline) {\\n        if (deadline < block.timestamp) {\\n            revert SwapDeadlineExpire(deadline, block.timestamp);\\n        }\\n        _;\\n    }\\n\\n    modifier ensurePath(address[] calldata path) {\\n        if (path.length < 2) {\\n            revert InvalidPath();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        if (_status == _ENTERED) {\\n            revert ReentrantCheck();\\n        }\\n        _status = _ENTERED;\\n        _;\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /// @notice event emitted on sweep token success\\n    event SweepToken(address indexed token, address indexed to, uint256 sweepAmount);\\n\\n    /// @notice event emitted on vBNBAddress update\\n    event VBNBAddressUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    // *********************\\n    // **** CONSTRUCTOR ****\\n    // *********************\\n\\n    /// @notice Constructor for the implementation contract. Sets immutable variables.\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(\\n        address WBNB_,\\n        address factory_,\\n        address _comptrollerAddress,\\n        address _vBNBAddress\\n    ) RouterHelper(WBNB_, factory_) {\\n        if (_comptrollerAddress == address(0) || _vBNBAddress == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        comptrollerAddress = _comptrollerAddress;\\n        _status = _NOT_ENTERED;\\n        vBNBAddress = _vBNBAddress;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WBNB); // only accept BNB via fallback from the WBNB contract\\n    }\\n\\n    // ****************************\\n    // **** EXTERNAL FUNCTIONS ****\\n    // ****************************\\n\\n    /**\\n     * @notice Setter for the vBNB address.\\n     * @param _vBNBAddress Address of the BNB vToken to update.\\n     */\\n    function setVBNBAddress(address _vBNBAddress) external onlyOwner {\\n        if (_vBNBAddress == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        _isVTokenListed(_vBNBAddress);\\n\\n        address oldAddress = vBNBAddress;\\n        vBNBAddress = _vBNBAddress;\\n\\n        emit VBNBAddressUpdated(oldAddress, vBNBAddress);\\n    }\\n\\n    /**\\n     * @notice Swap token A for token B and supply to a Venus market\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     */\\n    function swapExactTokensForTokensAndSupply(\\n        address vTokenAddress,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _supply(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap deflationary (a small amount of fee is deducted at the time of transfer of token) token A for token B and supply to a Venus market.\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     */\\n    function swapExactTokensForTokensAndSupplyAtSupportingFee(\\n        address vTokenAddress,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\\n        uint256 swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, address(this));\\n        _supply(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for another token and supply to a Venus market\\n     * @dev The amount to be swapped is obtained from the msg.value, since we are swapping BNB\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapExactBNBForTokensAndSupply(\\n        address vTokenAddress,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapExactBNBForTokens(amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _supply(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for another deflationary token (a small amount of fee is deducted at the time of transfer of token) and supply to a Venus market\\n     * @dev The amount to be swapped is obtained from the msg.value, since we are swapping BNB\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapExactBNBForTokensAndSupplyAtSupportingFee(\\n        address vTokenAddress,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapExactBNBForTokens(amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\\n        uint256 swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, address(this));\\n        _supply(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for Exact tokens and supply to a Venus market\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapTokensForExactTokensAndSupply(\\n        address vTokenAddress,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapTokensForExactTokens(amountOut, amountInMax, path, address(this));\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _supply(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for Exact tokens and supply to a Venus market\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapBNBForExactTokensAndSupply(\\n        address vTokenAddress,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapBNBForExactTokens(amountOut, path, address(this));\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _supply(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap Exact tokens for BNB and supply to a Venus market\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapExactTokensForBNBAndSupply(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        uint256 balanceBefore = address(this).balance;\\n        _swapExactTokensForBNB(amountIn, amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\\n        uint256 balanceAfter = address(this).balance;\\n        uint256 swapAmount = balanceAfter - balanceBefore;\\n        _mintVBNBandTransfer(swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap Exact deflationary tokens (a small amount of fee is deducted at the time of transfer of tokens) for BNB and supply to a Venus market\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapExactTokensForBNBAndSupplyAtSupportingFee(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        uint256 balanceBefore = address(this).balance;\\n        _swapExactTokensForBNB(amountIn, amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\\n        uint256 balanceAfter = address(this).balance;\\n        uint256 swapAmount = balanceAfter - balanceBefore;\\n        if (swapAmount < amountOutMin) {\\n            revert SwapAmountLessThanAmountOutMin(swapAmount, amountOutMin);\\n        }\\n        _mintVBNBandTransfer(swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for Exact BNB and supply to a Venus market\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapTokensForExactBNBAndSupply(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        uint256 balanceBefore = address(this).balance;\\n        _swapTokensForExactBNB(amountOut, amountInMax, path, address(this));\\n        uint256 balanceAfter = address(this).balance;\\n        uint256 swapAmount = balanceAfter - balanceBefore;\\n        _mintVBNBandTransfer(swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap token A for token B and repay a borrow from a Venus market\\n     * @param vTokenAddress The address of the vToken contract to repay.\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive (and repay)\\n     */\\n    function swapExactTokensForTokensAndRepay(\\n        address vTokenAddress,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _repay(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap deflationary token (a small amount of fee is deducted at the time of transfer of token) token A for token B and repay a borrow from a Venus market\\n     * @param vTokenAddress The address of the vToken contract to repay.\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive (and repay)\\n     */\\n    function swapExactTokensForTokensAndRepayAtSupportingFee(\\n        address vTokenAddress,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\\n        uint256 swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, address(this));\\n        _repay(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for another token and repay a borrow from a Venus market\\n     * @dev The amount to be swapped is obtained from the msg.value, since we are swapping BNB\\n     * @param vTokenAddress The address of the vToken contract to repay.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered so the swap path tokens are listed first and last asset is the token we receive\\n     */\\n    function swapExactBNBForTokensAndRepay(\\n        address vTokenAddress,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapExactBNBForTokens(amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _repay(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for another deflationary token (a small amount of fee is deducted at the time of transfer of token) and repay a borrow from a Venus market\\n     * @dev The amount to be swapped is obtained from the msg.value, since we are swapping BNB\\n     * @param vTokenAddress The address of the vToken contract to repay.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered so the swap path tokens are listed first and last asset is the token we receive\\n     */\\n    function swapExactBNBForTokensAndRepayAtSupportingFee(\\n        address vTokenAddress,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapExactBNBForTokens(amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\\n        uint256 swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, address(this));\\n        _repay(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for Exact tokens and repay to a Venus market\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapTokensForExactTokensAndRepay(\\n        address vTokenAddress,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapTokensForExactTokens(amountOut, amountInMax, path, address(this));\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _repay(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for full tokens debt and repay to a Venus market\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapTokensForFullTokenDebtAndRepay(\\n        address vTokenAddress,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        uint256 amountOut = IVToken(vTokenAddress).borrowBalanceCurrent(msg.sender);\\n        _swapTokensForExactTokens(amountOut, amountInMax, path, address(this));\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _repay(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for Exact tokens and repay to a Venus market\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapBNBForExactTokensAndRepay(\\n        address vTokenAddress,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapBNBForExactTokens(amountOut, path, address(this));\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _repay(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for Exact tokens and repay to a Venus market\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapBNBForFullTokenDebtAndRepay(\\n        address vTokenAddress,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        uint256 amountOut = IVToken(vTokenAddress).borrowBalanceCurrent(msg.sender);\\n        _swapBNBForExactTokens(amountOut, path, address(this));\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _repay(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap Exact tokens for BNB and repay to a Venus market\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapExactTokensForBNBAndRepay(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        uint256 balanceBefore = address(this).balance;\\n        _swapExactTokensForBNB(amountIn, amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\\n        uint256 balanceAfter = address(this).balance;\\n        uint256 swapAmount = balanceAfter - balanceBefore;\\n        IVBNB(vBNBAddress).repayBorrowBehalf{ value: swapAmount }(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Swap Exact deflationary tokens (a small amount of fee is deducted at the time of transfer of tokens) for BNB and repay to a Venus market\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapExactTokensForBNBAndRepayAtSupportingFee(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        uint256 balanceBefore = address(this).balance;\\n        _swapExactTokensForBNB(amountIn, amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\\n        uint256 balanceAfter = address(this).balance;\\n        uint256 swapAmount = balanceAfter - balanceBefore;\\n        if (swapAmount < amountOutMin) {\\n            revert SwapAmountLessThanAmountOutMin(swapAmount, amountOutMin);\\n        }\\n        IVBNB(vBNBAddress).repayBorrowBehalf{ value: swapAmount }(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for Exact BNB and repay to a Venus market\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapTokensForExactBNBAndRepay(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        uint256 balanceBefore = address(this).balance;\\n        _swapTokensForExactBNB(amountOut, amountInMax, path, address(this));\\n        uint256 balanceAfter = address(this).balance;\\n        uint256 swapAmount = balanceAfter - balanceBefore;\\n        IVBNB(vBNBAddress).repayBorrowBehalf{ value: swapAmount }(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for Exact BNB and repay to a Venus market\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapTokensForFullBNBDebtAndRepay(\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        uint256 balanceBefore = address(this).balance;\\n        uint256 amountOut = IVToken(vBNBAddress).borrowBalanceCurrent(msg.sender);\\n        _swapTokensForExactBNB(amountOut, amountInMax, path, address(this));\\n        uint256 balanceAfter = address(this).balance;\\n        uint256 swapAmount = balanceAfter - balanceBefore;\\n        IVBNB(vBNBAddress).repayBorrowBehalf{ value: swapAmount }(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Swaps an exact amount of input tokens for as many output tokens as possible,\\n     *         along the route determined by the path. The first element of path is the input token,\\n     *         the last is the output token, and any intermediate elements represent intermediate\\n     *         pairs to trade through (if, for example, a direct pair does not exist).\\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\\n     * @param amountIn The address of the vToken contract to repay.\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override nonReentrant ensure(deadline) ensurePath(path) returns (uint256[] memory amounts) {\\n        amounts = _swapExactTokensForTokens(amountIn, amountOutMin, path, to, TypesOfTokens.NON_SUPPORTING_FEE);\\n    }\\n\\n    /**\\n     * @notice Swaps an exact amount of input tokens for as many output tokens as possible,\\n     *         along the route determined by the path. The first element of path is the input token,\\n     *         the last is the output token, and any intermediate elements represent intermediate\\n     *         pairs to trade through (if, for example, a direct pair does not exist).\\n     *         This method to swap deflationary tokens which would require supporting fee.\\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\\n     * @param amountIn The address of the vToken contract to repay.\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function swapExactTokensForTokensAtSupportingFee(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override nonReentrant ensure(deadline) ensurePath(path) returns (uint256 swapAmount) {\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(to);\\n        _swapExactTokensForTokens(amountIn, amountOutMin, path, to, TypesOfTokens.SUPPORTING_FEE);\\n        swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, to);\\n    }\\n\\n    /**\\n     * @notice Swaps an exact amount of BNB for as many output tokens as possible,\\n     *         along the route determined by the path. The first element of path must be WBNB,\\n     *         the last is the output token, and any intermediate elements represent\\n     *         intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n     * @dev amountIn is passed through the msg.value of the transaction\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function swapExactBNBForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        virtual\\n        override\\n        nonReentrant\\n        ensure(deadline)\\n        ensurePath(path)\\n        returns (uint256[] memory amounts)\\n    {\\n        amounts = _swapExactBNBForTokens(amountOutMin, path, to, TypesOfTokens.NON_SUPPORTING_FEE);\\n    }\\n\\n    /**\\n     * @notice Swaps an exact amount of ETH for as many output tokens as possible,\\n     *         along the route determined by the path. The first element of path must be WBNB,\\n     *         the last is the output token, and any intermediate elements represent\\n     *         intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n     *         This method to swap deflationary tokens which would require supporting fee.\\n     * @dev amountIn is passed through the msg.value of the transaction\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function swapExactBNBForTokensAtSupportingFee(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual override nonReentrant ensure(deadline) ensurePath(path) returns (uint256 swapAmount) {\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(to);\\n        _swapExactBNBForTokens(amountOutMin, path, to, TypesOfTokens.SUPPORTING_FEE);\\n        swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, to);\\n    }\\n\\n    /**\\n     * @notice Swaps an exact amount of input tokens for as many output ETH as possible,\\n     *         along the route determined by the path. The first element of path is the input token,\\n     *         the last is the output ETH, and any intermediate elements represent intermediate\\n     *         pairs to trade through (if, for example, a direct pair does not exist).\\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\\n     * @param amountIn The address of the vToken contract to repay.\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function swapExactTokensForBNB(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) returns (uint256[] memory amounts) {\\n        amounts = _swapExactTokensForBNB(amountIn, amountOutMin, path, to, TypesOfTokens.NON_SUPPORTING_FEE);\\n    }\\n\\n    /**\\n     * @notice Swaps an exact amount of input tokens for as many output ETH as possible,\\n     *         along the route determined by the path. The first element of path is the input token,\\n     *         the last is the output ETH, and any intermediate elements represent intermediate\\n     *         pairs to trade through (if, for example, a direct pair does not exist).\\n     *         This method to swap deflationary tokens which would require supporting fee.\\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\\n     * @param amountIn The address of the vToken contract to repay.\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function swapExactTokensForBNBAtSupportingFee(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) returns (uint256 swapAmount) {\\n        uint256 balanceBefore = to.balance;\\n        _swapExactTokensForBNB(amountIn, amountOutMin, path, to, TypesOfTokens.SUPPORTING_FEE);\\n        uint256 balanceAfter = to.balance;\\n        swapAmount = balanceAfter - balanceBefore;\\n        if (swapAmount < amountOutMin) {\\n            revert SwapAmountLessThanAmountOutMin(swapAmount, amountOutMin);\\n        }\\n    }\\n\\n    /**\\n     * @notice Swaps an as many amount of input tokens for as exact amount of tokens as output,\\n     *         along the route determined by the path. The first element of path is the input token,\\n     *         the last is the output token, and any intermediate elements represent intermediate\\n     *         pairs to trade through (if, for example, a direct pair does not exist).\\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     **/\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override nonReentrant ensure(deadline) ensurePath(path) returns (uint256[] memory amounts) {\\n        amounts = _swapTokensForExactTokens(amountOut, amountInMax, path, to);\\n    }\\n\\n    /**\\n     * @notice Swaps an as ETH as input tokens for as exact amount of tokens as output,\\n     *         along the route determined by the path. The first element of path is the input WBNB,\\n     *         the last is the output as token, and any intermediate elements represent intermediate\\n     *         pairs to trade through (if, for example, a direct pair does not exist).\\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     **/\\n    function swapBNBForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        virtual\\n        override\\n        nonReentrant\\n        ensure(deadline)\\n        ensurePath(path)\\n        returns (uint256[] memory amounts)\\n    {\\n        amounts = _swapBNBForExactTokens(amountOut, path, to);\\n    }\\n\\n    /**\\n     * @notice Swaps an as many amount of input tokens for as exact amount of ETH as output,\\n     *         along the route determined by the path. The first element of path is the input token,\\n     *         the last is the output as ETH, and any intermediate elements represent intermediate\\n     *         pairs to trade through (if, for example, a direct pair does not exist).\\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     **/\\n    function swapTokensForExactBNB(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override nonReentrant ensure(deadline) ensurePath(path) returns (uint256[] memory amounts) {\\n        amounts = _swapTokensForExactBNB(amountOut, amountInMax, path, to);\\n    }\\n\\n    /**\\n     * @notice A public function to sweep accidental BEP-20 transfers to this contract. Tokens are sent to the address `to`, provided in input\\n     * @param token The address of the ERC-20 token to sweep\\n     * @param to Recipient of the output tokens.\\n     * @param sweepAmount The ampunt of the tokens to sweep\\n     * @custom:access Only Governance\\n     */\\n    function sweepToken(IERC20 token, address to, uint256 sweepAmount) external onlyOwner nonReentrant {\\n        if (to == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        uint256 balance = token.balanceOf(address(this));\\n        if (sweepAmount > balance) {\\n            revert InsufficientBalance(sweepAmount, balance);\\n        }\\n        token.safeTransfer(to, sweepAmount);\\n\\n        emit SweepToken(address(token), to, sweepAmount);\\n    }\\n\\n    /**\\n     * @notice Supply token to a Venus market\\n     * @param path The addresses of the underlying token\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param swapAmount The amount of tokens supply to Venus Market.\\n     */\\n    function _supply(address path, address vTokenAddress, uint256 swapAmount) internal {\\n        TransferHelper.safeApprove(path, vTokenAddress, 0);\\n        TransferHelper.safeApprove(path, vTokenAddress, swapAmount);\\n        uint256 response = IVToken(vTokenAddress).mintBehalf(msg.sender, swapAmount);\\n        if (response != 0) {\\n            revert SupplyError(msg.sender, vTokenAddress, response);\\n        }\\n    }\\n\\n    /**\\n     * @notice Repay a borrow from Venus market\\n     * @param path The addresses of the underlying token\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param swapAmount The amount of tokens repay to Venus Market.\\n     */\\n    function _repay(address path, address vTokenAddress, uint256 swapAmount) internal {\\n        TransferHelper.safeApprove(path, vTokenAddress, 0);\\n        TransferHelper.safeApprove(path, vTokenAddress, swapAmount);\\n        uint256 response = IVToken(vTokenAddress).repayBorrowBehalf(msg.sender, swapAmount);\\n        if (response != 0) {\\n            revert RepayError(msg.sender, vTokenAddress, response);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if the balance of to minus the balanceBefore is greater or equal to the amountOutMin.\\n     * @param asset The address of the underlying token\\n     * @param balanceBefore Balance before the swap.\\n     * @param amountOutMin Min amount out threshold.\\n     * @param to Recipient of the output tokens.\\n     */\\n    function _checkForAmountOut(\\n        address asset,\\n        uint256 balanceBefore,\\n        uint256 amountOutMin,\\n        address to\\n    ) internal view returns (uint256 swapAmount) {\\n        uint256 balanceAfter = IERC20(asset).balanceOf(to);\\n        swapAmount = balanceAfter - balanceBefore;\\n        if (swapAmount < amountOutMin) {\\n            revert SwapAmountLessThanAmountOutMin(swapAmount, amountOutMin);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the difference between the balance of this and the balanceBefore\\n     * @param asset The address of the underlying token\\n     * @param balanceBefore Balance before the swap.\\n     */\\n    function _getSwapAmount(address asset, uint256 balanceBefore) internal view returns (uint256 swapAmount) {\\n        uint256 balanceAfter = IERC20(asset).balanceOf(address(this));\\n        swapAmount = balanceAfter - balanceBefore;\\n    }\\n\\n    /**\\n     * @notice Check isVTokenListed and last address in the path should be vToken underlying.\\n     * @param vTokenAddress Address of the vToken.\\n     * @param underlying Address of the underlying asset.\\n     */\\n    function _ensureVTokenChecks(address vTokenAddress, address underlying) internal {\\n        _isVTokenListed(vTokenAddress);\\n        if (IVToken(vTokenAddress).underlying() != underlying) {\\n            revert VTokenUnderlyingInvalid(underlying);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check is vToken listed in the pool.\\n     * @param vToken Address of the vToken.\\n     */\\n    function _isVTokenListed(address vToken) internal view {\\n        bool isListed = InterfaceComptroller(comptrollerAddress).markets(vToken);\\n        if (!isListed) {\\n            revert VTokenNotListed(vToken);\\n        }\\n    }\\n\\n    /**\\n     * @notice Mint vBNB tokens to the market then transfer them to user\\n     * @param swapAmount Swapped BNB amount\\n     */\\n    function _mintVBNBandTransfer(uint256 swapAmount) internal {\\n        uint256 vBNBBalanceBefore = IVBNB(vBNBAddress).balanceOf(address(this));\\n        IVBNB(vBNBAddress).mint{ value: swapAmount }();\\n        uint256 vBNBBalanceAfter = IVBNB(vBNBAddress).balanceOf(address(this));\\n        IERC20(vBNBAddress).safeTransfer(msg.sender, (vBNBBalanceAfter - vBNBBalanceBefore));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Swap/interfaces/CustomErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n// **************\\n// *** ERRORS ***\\n// **************\\n\\n///@notice Error indicating that suplying to a given market failed.\\nerror SupplyError(address supplier, address vToken, uint256 errorCode);\\n\\n///@notice Error indicating that repaying to given market failed.\\nerror RepayError(address repayer, address vToken, uint256 errorCode);\\n\\n///@notice Error indicating wBNB address passed is not the expected one.\\nerror WrongAddress(address expectedAdddress, address passedAddress);\\n\\n///@notice Error thrown when deadline for swap has expired\\nerror SwapDeadlineExpire(uint256 deadline, uint256 timestemp);\\n\\n///@notice Error thrown where the input amount parameter for a token is 0\\nerror InsufficientInputAmount();\\n\\n///@notice Error thrown when the amount out passed is 0\\nerror InsufficientOutputAmount();\\n\\n///@notice Error thrown when the amount received from a trade is below the minimum\\nerror OutputAmountBelowMinimum(uint256 amountOut, uint256 amountOutMin);\\n\\n///@notice Error thrown when the amount In is above the amount in maximum\\nerror InputAmountAboveMaximum(uint256 amountIn, uint256 amountIntMax);\\n\\n///@notice Error thrown when amount is above the msg.value(amountMax)\\nerror ExcessiveInputAmount(uint256 amount, uint256 amountMax);\\n\\n///@notice Error thrown when the given reserves are equal to 0\\nerror InsufficientLiquidity();\\n\\n///@notice Error thrown if a zero address is passed\\nerror ZeroAddress();\\n\\n///@notice Error thrown if two token addresses are identical\\nerror IdenticalAddresses();\\n\\n///@notice Error thrown when the trade path[] parameter consists of only 1 token (i.e. path.length<2)\\nerror InvalidPath();\\n\\n///@notice Error thrown when invalid vToken address is passed to swap router\\nerror VTokenNotListed(address vToken);\\n\\n///@notice Error thrown when invalid underlying is passed as per given vToken\\nerror VTokenUnderlyingInvalid(address underlying);\\n\\n///@notice Error thrown when swapamount is less than the amountOutmin\\nerror SwapAmountLessThanAmountOutMin(uint256 swapAmount, uint256 amountOutMin);\\n\\n///@notice Error thrown when swapRouter's balance is less than sweep amount\\nerror InsufficientBalance(uint256 sweepAmount, uint256 balance);\\n\\n///@notice Error thrown when safeApprove failed\\nerror SafeApproveFailed();\\n\\n///@notice Error thrown when safeTransfer failed\\nerror SafeTransferFailed();\\n\\n///@notice Error thrown when transferFrom failed\\nerror SafeTransferFromFailed();\\n\\n///@notice Error thrown when safeTransferBNB failed\\nerror SafeTransferBNBFailed();\\n\\n///@notice Error thrown when reentrant check fails\\nerror ReentrantCheck();\\n\"\r\n    },\r\n    \"contracts/Swap/interfaces/IPancakePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint);\\n\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Swap/interfaces/IPancakeSwapV2Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\ninterface IPancakeSwapV2Router {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokensAtSupportingFee(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 swapAmount);\\n\\n    function swapExactBNBForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactBNBForTokensAtSupportingFee(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 swapAmount);\\n\\n    function swapExactTokensForBNB(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForBNBAtSupportingFee(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 swapAmount);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapBNBForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactBNB(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokensAndSupply(\\n        address vTokenAddress,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForTokensAndSupplyAtSupportingFee(\\n        address vTokenAddress,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactBNBForTokensAndSupply(\\n        address vTokenAddress,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactBNBForTokensAndSupplyAtSupportingFee(\\n        address vTokenAddress,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapTokensForExactTokensAndSupply(\\n        address vTokenAddress,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapBNBForExactTokensAndSupply(\\n        address vTokenAddress,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForBNBAndSupply(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForBNBAndSupplyAtSupportingFee(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapTokensForExactBNBAndSupply(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapBNBForFullTokenDebtAndRepay(\\n        address vTokenAddress,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForTokensAndRepay(\\n        address vTokenAddress,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForTokensAndRepayAtSupportingFee(\\n        address vTokenAddress,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactBNBForTokensAndRepay(\\n        address vTokenAddress,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactBNBForTokensAndRepayAtSupportingFee(\\n        address vTokenAddress,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapTokensForExactTokensAndRepay(\\n        address vTokenAddress,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapTokensForFullTokenDebtAndRepay(\\n        address vTokenAddress,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapBNBForExactTokensAndRepay(\\n        address vTokenAddress,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForBNBAndRepay(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForBNBAndRepayAtSupportingFee(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapTokensForExactBNBAndRepay(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapTokensForFullBNBDebtAndRepay(uint256 amountInMax, address[] calldata path, uint256 deadline) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Swap/interfaces/IVBNB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\ninterface IVBNB {\\n    function repayBorrowBehalf(address borrower) external payable;\\n\\n    function mint() external payable;\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Swap/interfaces/IVtoken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\ninterface IVToken {\\n    function mintBehalf(address receiver, uint mintAmount) external returns (uint);\\n\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n\\n    function underlying() external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/Swap/interfaces/IWBNB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\ninterface IWBNB {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function withdraw(uint) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n}\\n\"\r\n    },\r\n    \"contracts/Swap/interfaces/InterfaceComptroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\ninterface InterfaceComptroller {\\n    function markets(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Swap/lib/PancakeLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IPancakePair.sol\\\";\\nimport \\\"../interfaces/CustomErrors.sol\\\";\\n\\nlibrary PancakeLibrary {\\n    /**\\n     * @notice Used to handle return values from pairs sorted in this order\\n     * @param tokenA The address of token A\\n     * @param tokenB The address of token B\\n     * @return token0 token1 Sorted token addresses\\n     **/\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        if (tokenA == tokenB) {\\n            revert IdenticalAddresses();\\n        }\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        if (token0 == address(0)) {\\n            revert ZeroAddress();\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the CREATE2 address for a pair without making any external calls\\n     * @param factory Address of the pancake swap factory\\n     * @param tokenA The address of token A\\n     * @param tokenB The address of token B\\n     * @return pair Address for a pair\\n     **/\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            hex\\\"00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Fetches and sorts the reserves for a pair\\n     * @param factory Address of the pancake swap factory\\n     * @param tokenA The address of token A\\n     * @param tokenB The address of token B\\n     * @return reserveA reserveB Reserves for the token A and token B\\n     **/\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        address pairAddress = pairFor(factory, tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IPancakePair(pairAddress).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    /**\\n     * @notice Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n     * @param amountA The amount of token A\\n     * @param reserveA The amount of reserves for token A before swap\\n     * @param reserveB The amount of reserves for token B before swap\\n     * @return amountB An equivalent amount of the token B\\n     **/\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) internal pure returns (uint256 amountB) {\\n        if (amountA == 0) {\\n            revert InsufficientInputAmount();\\n        } else if (reserveA == 0 || reserveB == 0) {\\n            revert InsufficientLiquidity();\\n        }\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n     * @param amountIn The amount of token A need to swap\\n     * @param reserveIn The amount of reserves for token A before swap\\n     * @param reserveOut The amount of reserves for token B after swap\\n     * @return amountOut The maximum output amount of the token B\\n     **/\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        if (amountIn == 0) {\\n            revert InsufficientInputAmount();\\n        } else if (reserveIn == 0 || reserveOut == 0) {\\n            revert InsufficientLiquidity();\\n        }\\n        uint256 amountInWithFee = amountIn * 9975;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = (reserveIn * 10000) + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    /**\\n     * @notice Given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n     * @param amountOut The amount of token B after swap\\n     * @param reserveIn The amount of reserves for token A before swap\\n     * @param reserveOut The amount of reserves for token B after swap\\n     * @return amountIn Required input amount of the token A\\n     **/\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        if (amountOut == 0) {\\n            revert InsufficientOutputAmount();\\n        } else if (reserveIn == 0 || reserveOut == 0) {\\n            revert InsufficientLiquidity();\\n        }\\n        uint256 numerator = reserveIn * amountOut * 10000;\\n        uint256 denominator = (reserveOut - amountOut) * 9975;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n\\n    /**\\n     * @notice Performs chained getAmountOut calculations on any number of pairs\\n     * @param factory Address of the pancake swap factory\\n     * @param amountIn The amount of tokens to swap.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @return amounts Array of amounts after performing swap for respective pairs in path\\n     **/\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        if (path.length <= 1) {\\n            revert InvalidPath();\\n        }\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; ) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Performs chained getAmountIn calculations on any number of pairs\\n     * @param factory Address of the pancake swap factory\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @return amounts Array of amounts after performing swap for respective pairs in path\\n     **/\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        if (path.length <= 1) {\\n            revert InvalidPath();\\n        }\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; ) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n            unchecked {\\n                i -= 1;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Swap/lib/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/CustomErrors.sol\\\";\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    /**\\n     * @dev `value` as the allowance of `spender` over the caller's tokens.\\n     * @param token Address of the token\\n     * @param to Address of the spender\\n     * @param value Amount as allowance\\n     */\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        if (!(success && (data.length == 0 || abi.decode(data, (bool))))) {\\n            revert SafeApproveFailed();\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     * @param token Address of the token\\n     * @param to Address of the receiver\\n     * @param value Amount need to transfer\\n     */\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        if (!(success && (data.length == 0 || abi.decode(data, (bool))))) {\\n            revert SafeTransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     * @param token Address of the token\\n     * @param from Address of the asset'sowner\\n     * @param to Address of the receiver\\n     * @param value Amount need to transfer\\n     */\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        if (!(success && (data.length == 0 || abi.decode(data, (bool))))) {\\n            revert SafeTransferFromFailed();\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `BNB` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     * @param to Address of the receiver\\n     * @param value Amount need to transfer\\n     */\\n    function safeTransferBNB(address to, uint256 value) internal {\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\n        if (!success) {\\n            revert SafeTransferBNBFailed();\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"WBNB_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comptrollerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vBNBAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMax\",\"type\":\"uint256\"}],\"name\":\"ExcessiveInputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IdenticalAddresses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIntMax\",\"type\":\"uint256\"}],\"name\":\"InputAmountAboveMaximum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientInputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPath\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"OutputAmountBelowMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrantCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"RepayError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeApproveFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferBNBFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFromFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"SupplyError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"SwapAmountLessThanAmountOutMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestemp\",\"type\":\"uint256\"}],\"name\":\"SwapDeadlineExpire\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"VTokenNotListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"VTokenUnderlyingInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expectedAdddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"passedAddress\",\"type\":\"address\"}],\"name\":\"WrongAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"SwapBnbForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapBnbForTokensAtSupportingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"SwapTokensForBnb\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForBnbAtSupportingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"SwapTokensForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForTokensAtSupportingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"SweepToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"VBNBAddressUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vBNBAddress\",\"type\":\"address\"}],\"name\":\"setVBNBAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapBNBForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapBNBForExactTokensAndRepay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapBNBForExactTokensAndSupply\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapBNBForFullTokenDebtAndRepay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactBNBForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactBNBForTokensAndRepay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactBNBForTokensAndRepayAtSupportingFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactBNBForTokensAndSupply\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactBNBForTokensAndSupplyAtSupportingFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactBNBForTokensAtSupportingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForBNB\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForBNBAndRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForBNBAndRepayAtSupportingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForBNBAndSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForBNBAndSupplyAtSupportingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForBNBAtSupportingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensAndRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensAndRepayAtSupportingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensAndSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensAndSupplyAtSupportingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensAtSupportingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactBNB\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactBNBAndRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactBNBAndSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokensAndRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokensAndSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForFullBNBDebtAndRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForFullTokenDebtAndRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBNBAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SwapRouter", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000ca143ce32fe78f1f7019d7d551a6402fc5350c7300000000000000000000000094c1495cd4c557f1560cbd68eab0d197e62915710000000000000000000000002e7222e51c0f6e98610a1543aa3836e092cde62c", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}