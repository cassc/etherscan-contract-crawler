{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\npragma solidity ^0.8.0;\r\n\r\ninterface VRFCoordinatorV2Interface {\r\n    /**\r\n     * @notice Get configuration relevant for making requests\r\n     * @return minimumRequestConfirmations global min for request confirmations\r\n     * @return maxGasLimit global max for request gas limit\r\n     * @return s_provingKeyHashes list of registered key hashes\r\n     */\r\n    function getRequestConfig()\r\n        external\r\n        view\r\n        returns (\r\n            uint16,\r\n            uint32,\r\n            bytes32[] memory\r\n        );\r\n\r\n    /**\r\n     * @notice Request a set of random words.\r\n     * @param keyHash - Corresponds to a particular oracle job which uses\r\n     * that key for generating the VRF proof. Different keyHash's have different gas price\r\n     * ceilings, so you can select a specific one to bound your maximum per request cost.\r\n     * @param subId  - The ID of the VRF subscription. Must be funded\r\n     * with the minimum subscription balance required for the selected keyHash.\r\n     * @param minimumRequestConfirmations - How many blocks you'd like the\r\n     * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\r\n     * for why you may want to request more. The acceptable range is\r\n     * [minimumRequestBlockConfirmations, 200].\r\n     * @param callbackGasLimit - How much gas you'd like to receive in your\r\n     * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\r\n     * may be slightly less than this amount because of gas used calling the function\r\n     * (argument decoding etc.), so you may need to request slightly more than you expect\r\n     * to have inside fulfillRandomWords. The acceptable range is\r\n     * [0, maxGasLimit]\r\n     * @param numWords - The number of uint256 random values you'd like to receive\r\n     * in your fulfillRandomWords callback. Note these numbers are expanded in a\r\n     * secure way by the VRFCoordinator from a single random value supplied by the oracle.\r\n     * @return requestId - A unique identifier of the request. Can be used to match\r\n     * a request to a response in fulfillRandomWords.\r\n     */\r\n    function requestRandomWords(\r\n        bytes32 keyHash,\r\n        uint64 subId,\r\n        uint16 minimumRequestConfirmations,\r\n        uint32 callbackGasLimit,\r\n        uint32 numWords\r\n    ) external returns (uint256 requestId);\r\n\r\n    /**\r\n     * @notice Create a VRF subscription.\r\n     * @return subId - A unique subscription id.\r\n     * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\r\n     * @dev Note to fund the subscription, use transferAndCall. For example\r\n     * @dev  LINKTOKEN.transferAndCall(\r\n     * @dev    address(COORDINATOR),\r\n     * @dev    amount,\r\n     * @dev    abi.encode(subId));\r\n     */\r\n    function createSubscription() external returns (uint64 subId);\r\n\r\n    /**\r\n     * @notice Get a VRF subscription.\r\n     * @param subId - ID of the subscription\r\n     * @return balance - LINK balance of the subscription in juels.\r\n     * @return reqCount - number of requests for this subscription, determines fee tier.\r\n     * @return owner - owner of the subscription.\r\n     * @return consumers - list of consumer address which are able to use this subscription.\r\n     */\r\n    function getSubscription(uint64 subId)\r\n        external\r\n        view\r\n        returns (\r\n            uint96 balance,\r\n            uint64 reqCount,\r\n            address owner,\r\n            address[] memory consumers\r\n        );\r\n\r\n    /**\r\n     * @notice Request subscription owner transfer.\r\n     * @param subId - ID of the subscription\r\n     * @param newOwner - proposed new owner of the subscription\r\n     */\r\n    function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner)\r\n        external;\r\n\r\n    /**\r\n     * @notice Request subscription owner transfer.\r\n     * @param subId - ID of the subscription\r\n     * @dev will revert if original owner of subId has\r\n     * not requested that msg.sender become the new owner.\r\n     */\r\n    function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n    /**\r\n     * @notice Add a consumer to a VRF subscription.\r\n     * @param subId - ID of the subscription\r\n     * @param consumer - New consumer which can use the subscription\r\n     */\r\n    function addConsumer(uint64 subId, address consumer) external;\r\n\r\n    /**\r\n     * @notice Remove a consumer from a VRF subscription.\r\n     * @param subId - ID of the subscription\r\n     * @param consumer - Consumer to remove from the subscription\r\n     */\r\n    function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n    /**\r\n     * @notice Cancel a subscription\r\n     * @param subId - ID of the subscription\r\n     * @param to - Where to send the remaining LINK to\r\n     */\r\n    function cancelSubscription(uint64 subId, address to) external;\r\n\r\n    /*\r\n     * @notice Check to see if there exists a request commitment consumers\r\n     * for all consumers and keyhashes for a given sub.\r\n     * @param subId - ID of the subscription\r\n     * @return true if there exists at least one unfulfilled request for the subscription, false\r\n     * otherwise.\r\n     */\r\n    function pendingRequestExists(uint64 subId) external view returns (bool);\r\n}\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\r\n * @dev 1. The fulfillment came from the VRFCoordinator\r\n * @dev 2. The consumer contract implements fulfillRandomWords.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash). Create subscription, fund it\r\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\r\n * @dev subscription management functions).\r\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\r\n * @dev callbackGasLimit, numWords),\r\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomWords method.\r\n *\r\n * @dev The randomness argument to fulfillRandomWords is a set of random words\r\n * @dev generated from your requestId and the blockHash of the request.\r\n *\r\n * @dev If your contract could have concurrent requests open, you can use the\r\n * @dev requestId returned from requestRandomWords to track which response is associated\r\n * @dev with which randomness request.\r\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ.\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request. It is for this reason that\r\n * @dev that you can signal to an oracle you'd like them to wait longer before\r\n * @dev responding to the request (however this is not enforced in the contract\r\n * @dev and so remains effective only in the case of unmodified oracle software).\r\n */\r\nabstract contract VRFConsumerBaseV2 {\r\n    error OnlyCoordinatorCanFulfill(address have, address want);\r\n    address private immutable vrfCoordinator;\r\n\r\n    /**\r\n     * @param _vrfCoordinator address of VRFCoordinator contract\r\n     */\r\n    constructor(address _vrfCoordinator) {\r\n        vrfCoordinator = _vrfCoordinator;\r\n    }\r\n\r\n    /**\r\n     * @notice fulfillRandomness handles the VRF response. Your contract must\r\n     * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n     * @notice principles to keep in mind when implementing your fulfillRandomness\r\n     * @notice method.\r\n     *\r\n     * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\r\n     * @dev signature, and will call it once it has verified the proof\r\n     * @dev associated with the randomness. (It is triggered via a call to\r\n     * @dev rawFulfillRandomness, below.)\r\n     *\r\n     * @param requestId The Id initially returned by requestRandomness\r\n     * @param randomWords the VRF output expanded to the requested number of words\r\n     */\r\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\r\n        internal\r\n        virtual;\r\n\r\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n    // the origin of the call\r\n    function rawFulfillRandomWords(\r\n        uint256 requestId,\r\n        uint256[] memory randomWords\r\n    ) external {\r\n        if (msg.sender != vrfCoordinator) {\r\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\r\n        }\r\n        fulfillRandomWords(requestId, randomWords);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.7;\r\n\r\ncontract FridayLottery is ReentrancyGuard,VRFConsumerBaseV2 {\r\n    struct guessRandomNumberAndStars {\r\n        uint256 number1;\r\n        uint256 number2;\r\n        uint256 number3;\r\n        uint256 number4;\r\n        uint256 number5;\r\n        uint256 star1;\r\n        uint256 star2;\r\n    }\r\n    struct guessInfo {\r\n        guessRandomNumberAndStars guess;\r\n        address user;\r\n    }\r\n    struct distributionPercentage {\r\n        uint16 prize1;\r\n        uint16 prize2;\r\n        uint16 prize3;\r\n        uint16 prize4;\r\n        uint16 prize5;\r\n        uint16 prize6;\r\n    }\r\n\r\n    struct totalPrize {\r\n        uint256 totalPrize1Winner;\r\n        uint256 totalPrize2Winner;\r\n        uint256 totalPrize3Winner;\r\n        uint256 totalPrize4Winner;\r\n        uint256 totalPrize5Winner;\r\n        uint256 totalPrize6Winner;\r\n    }\r\n    struct prizes {\r\n        uint256 prize1;\r\n        uint256 prize2;\r\n        uint256 prize3;\r\n        uint256 prize4;\r\n        uint256 prize5;\r\n        uint256 prize6;\r\n    }\r\n    struct historyOfPrizeWinners {\r\n        uint256 prize1Winners;\r\n        uint256 prize2Winners;\r\n        uint256 prize3Winners;\r\n        uint256 prize4Winners;\r\n        uint256 prize5Winners;\r\n        uint256 prize6Winners;\r\n    }\r\n    struct historyOfPrizePerPersonAmount {\r\n        uint256 prize1PerPersonAmount;\r\n        uint256 prize2PerPersonAmount;\r\n        uint256 prize3PerPersonAmount;\r\n        uint256 prize4PerPersonAmount;\r\n        uint256 prize5PerPersonAmount;\r\n        uint256 prize6PerPersonAmount;\r\n    }\r\n\r\n    struct historyOfPrizeTotalAmount {\r\n        uint256 totalPoolPrize;\r\n        uint256 drawnDate;\r\n        uint256 totalPlayers;\r\n        uint256 prize1TotalAmount;\r\n        uint256 prize2TotalAmount;\r\n        uint256 prize3TotalAmount;\r\n        uint256 prize4TotalAmount;\r\n        uint256 prize5TotalAmount;\r\n        uint256 prize6TotalAmount;\r\n        uint256 maintenanceStakeAndGoodCausesAmount;\r\n    }\r\n    struct historyOfWinnigNumber {\r\n        uint256 number1;\r\n        uint256 number2;\r\n        uint256 number3;\r\n        uint256 number4;\r\n        uint256 number5;\r\n        uint256 star1;\r\n        uint256 star2;\r\n    }\r\n    struct roundInfoPerPerson {\r\n        guessRandomNumberAndStars guessNumbersAndStars;\r\n        uint256 ticketNumber;\r\n        uint8 lotteryType;\r\n    }\r\n\r\n    struct Distribute {\r\n        uint256 winningIndex;\r\n        uint256 wininnigCategory;\r\n        uint256 winningPrice;\r\n        bool status;\r\n        uint8 lotteryType;\r\n    }\r\n    struct Ticketwinner {\r\n        uint256 winningIndex;\r\n        uint256 wininnigCategory;\r\n        bool status;\r\n        uint8 lotteryType;\r\n        uint256 ticketNumber;\r\n    }\r\n\r\n    struct roundHistory {\r\n        historyOfWinnigNumber historyOfWinningNumbers;\r\n        historyOfPrizeTotalAmount historyOfPrizeTotalAmount;\r\n        historyOfPrizePerPersonAmount historyOfPrizePerPersonAmount;\r\n        historyOfPrizeWinners historyOfPrizeWinners;\r\n    }\r\n    \r\n    address public owner;\r\n    uint256 public ticketPrice;\r\n    IERC20 public usdt;\r\n\r\n    mapping(uint256 => guessInfo) public guessInfos; //random guess numbers and stars by players\r\n    uint256 public guessCount; //number of tickets\r\n\r\n    uint16 public constant maintenanceStakeAndGoodCausesFee=2000;\r\n    address public maintenanceStakeAndGoodCauses;\r\n\r\n     distributionPercentage public distributionFee = //distribution fee for each prize winner\r\n        distributionPercentage(\r\n            4000, //distributionFee1\r\n            2000, //distributionFee2\r\n            1000, //distributionFee3\r\n            500, //distributionFee4\r\n            300, //distributionFee5\r\n            200 //distributionFee6\r\n        ); \r\n    guessRandomNumberAndStars private winningNumbersAndStars;\r\n\r\n    uint256 public roundNumber=1;\r\n    uint256 public lotteryStartTime;\r\n    uint256 public lotteryEndTime;\r\n    uint256 public cooldownTime;\r\n    bool public isLotteryStarted=true;\r\n    bool public isTicketCanBeSold=true;\r\n    bool public isTuesdayLotteryActive=true;\r\n    mapping(address => uint256) public buyTickets;\r\n    address public tuesdayLotteryAddress=0x4104d3414C4a6053b07651D54485a03412619fBc;\r\n    VRFCoordinatorV2Interface public constant i_vrfCoordinator=VRFCoordinatorV2Interface(0xc587d9053cd1118f25F645F9E08BB98c9712A4EE);\r\n    bytes32 public constant i_gasLane=bytes32(0x17cd473250a9a479dc7f234c64332ed4bc8af9e8ded7556aa6e66d83da49f470);\r\n    uint64 public immutable s_subscriptionId;\r\n    uint32 public constant i_callbackGasLimit=500000;\r\n    uint16 public constant requestConfirmations = 3;\r\n    uint32 public constant numWords =  7;\r\n\r\n    modifier checkTicketSold(address buyer, uint256 guesses) {\r\n        require(buyTickets[buyer] >= 1, \"Please Buy Ticket First\");\r\n        require(\r\n            buyTickets[buyer] >= guesses,\r\n            \"You have not enough tickets to add these lucky numbers\"\r\n        );\r\n        _;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only Owner Allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier checkLotteryStarted() {\r\n        require(isLotteryStarted, \"The Lottery Is Not Started Yet!\");\r\n        _;\r\n    }\r\n    event TicketBought(address indexed buyer, uint256 tickets);\r\n    event TicketGuessed(\r\n        uint256 indexed roundNumber,\r\n        address indexed buyer,\r\n        roundInfoPerPerson info\r\n    );\r\n    event DistributePrize(\r\n        uint256 indexed roundNumber,\r\n        address indexed winner,\r\n        Distribute info\r\n    );\r\n    event TicketWinner(\r\n        uint256 indexed roundNumber,\r\n        address indexed winner,\r\n        Ticketwinner info\r\n    );\r\n\r\n    event RoundHistory(\r\n        uint256 roundNumber,\r\n        roundHistory info,\r\n        uint8 lotteryType\r\n    );\r\n    event RequestId(uint256 _id);\r\n\r\n    constructor(\r\n        address _owner,\r\n        address _usdt,\r\n        address _maintenanceStakeAndGoodCauses,\r\n        uint256 _ticketPrice,\r\n        uint256 _cooldownTime,\r\n        uint256 _lotteryStartTime,\r\n        uint64 _subscriptionId\r\n    )VRFConsumerBaseV2(0xc587d9053cd1118f25F645F9E08BB98c9712A4EE) ReentrancyGuard() {\r\n        owner = _owner;\r\n        usdt = IERC20(_usdt);\r\n        maintenanceStakeAndGoodCauses = _maintenanceStakeAndGoodCauses;\r\n        ticketPrice = _ticketPrice;\r\n        cooldownTime = _cooldownTime;\r\n        lotteryStartTime = _lotteryStartTime;\r\n        lotteryEndTime = _lotteryStartTime + 7 days;\r\n        s_subscriptionId = _subscriptionId;\r\n    }\r\n\r\n    function buyTicket() external checkLotteryStarted {\r\n        require(\r\n            block.timestamp > (lotteryStartTime + cooldownTime),\r\n            \"The Lottery Is Not Started Yet!\"\r\n        );\r\n\r\n        require(block.timestamp <= lotteryEndTime, \"The Lottery has ended!\");\r\n\r\n        require(isTicketCanBeSold,\"Tickets sale is closed for this draw\");\r\n\r\n        uint256 _ticketPrice = ticketPrice;\r\n        uint256 allowance = usdt.allowance(msg.sender, address(this));\r\n        require(allowance >= _ticketPrice, \"You do not have enough allowance\");\r\n        uint256 totalTickets = allowance / _ticketPrice;\r\n        bool success = usdt.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            (totalTickets * _ticketPrice)\r\n        );\r\n        require(success, \"Usdt Transfer Failed\");\r\n        buyTickets[msg.sender] += totalTickets;\r\n        emit TicketBought(msg.sender, totalTickets);\r\n    }\r\n\r\n    function addGuessNumber(\r\n        guessRandomNumberAndStars[] calldata _guessNumberAndStars\r\n    )\r\n        external\r\n        checkLotteryStarted\r\n        checkTicketSold(msg.sender, _guessNumberAndStars.length)\r\n    {\r\n        require(\r\n            block.timestamp > (lotteryStartTime + cooldownTime),\r\n            \"The Lottery Is Not Started Yet!\"\r\n        );\r\n\r\n        require(block.timestamp <= lotteryEndTime, \"The Lottery has ended!\");\r\n        require(isTicketCanBeSold,\"Add Lucky Number is closed for this draw\");\r\n\r\n        uint256 len = _guessNumberAndStars.length;\r\n        uint256 _buyTickets = buyTickets[msg.sender];\r\n        uint256 _guessCount = guessCount;\r\n\r\n        for (uint256 i = 0; i < len; ) {\r\n            guessRandomNumberAndStars\r\n                calldata _numbersAndStars = _guessNumberAndStars[i];\r\n            require(\r\n                (_numbersAndStars.number1 != 0 &&\r\n                    _numbersAndStars.number2 != 0 &&\r\n                    _numbersAndStars.number3 != 0 &&\r\n                    _numbersAndStars.number4 != 0 &&\r\n                    _numbersAndStars.number5 != 0 &&\r\n                    _numbersAndStars.star1 != 0 &&\r\n                    _numbersAndStars.star2 != 0),\r\n                \"Lucky Numbers And Stars Cannot Be Zero\"\r\n            );\r\n            require(\r\n                ((_numbersAndStars.number1 != _numbersAndStars.number2 &&\r\n                    _numbersAndStars.number1 != _numbersAndStars.number3 &&\r\n                    _numbersAndStars.number1 != _numbersAndStars.number4 &&\r\n                    _numbersAndStars.number1 != _numbersAndStars.number5) &&\r\n                    (\r\n                        (_numbersAndStars.number2 != _numbersAndStars.number3 &&\r\n                            _numbersAndStars.number2 !=\r\n                            _numbersAndStars.number4 &&\r\n                            _numbersAndStars.number2 !=\r\n                            _numbersAndStars.number5)\r\n                    ) &&\r\n                    (\r\n                        (_numbersAndStars.number3 != _numbersAndStars.number4 &&\r\n                            _numbersAndStars.number3 !=\r\n                            _numbersAndStars.number5)\r\n                    ) &&\r\n                    ((_numbersAndStars.number4 != _numbersAndStars.number5)) &&\r\n                    (_numbersAndStars.star1 != _numbersAndStars.star2)),\r\n                \"Lucky Numbers And Stars Must Be Unique Numbers\"\r\n            );\r\n\r\n            guessInfos[_guessCount] = guessInfo(\r\n                guessRandomNumberAndStars(\r\n                    _numbersAndStars.number1,\r\n                    _numbersAndStars.number2,\r\n                    _numbersAndStars.number3,\r\n                    _numbersAndStars.number4,\r\n                    _numbersAndStars.number5,\r\n                    _numbersAndStars.star1,\r\n                    _numbersAndStars.star2\r\n                ),\r\n                msg.sender\r\n            );\r\n            emit TicketGuessed(\r\n                roundNumber,\r\n                msg.sender,\r\n                roundInfoPerPerson(\r\n                    guessRandomNumberAndStars(\r\n                        _numbersAndStars.number1,\r\n                        _numbersAndStars.number2,\r\n                        _numbersAndStars.number3,\r\n                        _numbersAndStars.number4,\r\n                        _numbersAndStars.number5,\r\n                        _numbersAndStars.star1,\r\n                        _numbersAndStars.star2\r\n                    ),\r\n                    _guessCount,\r\n                    1\r\n                )\r\n            );\r\n            --_buyTickets;\r\n            ++_guessCount;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        buyTickets[msg.sender] = _buyTickets;\r\n        guessCount = _guessCount;\r\n    }\r\n\r\n    function generateWinningNumber()external checkLotteryStarted onlyOwner{\r\n\r\n        require(\r\n            block.timestamp >= lotteryEndTime,\r\n            \"Lottery Is Not Ended Yet!\"\r\n        );\r\n        require(\r\n            winningNumbersAndStars.number1 == 0,\r\n            \"Winning Numbers Already Added\"\r\n        );\r\n\r\n        uint256 requestId=i_vrfCoordinator.requestRandomWords(\r\n            i_gasLane,\r\n            s_subscriptionId,\r\n            requestConfirmations,\r\n            i_callbackGasLimit,\r\n            numWords\r\n        );\r\n        emit RequestId(requestId);\r\n    }\r\n\r\n    function fulfillRandomWords(\r\n            uint256, /* requestId */\r\n            uint256[] memory randomWords\r\n        ) internal override {\r\n        guessRandomNumberAndStars memory _winningNumbersAndStars = guessRandomNumberAndStars(\r\n            (randomWords[0]%50)+1,\r\n            (randomWords[1]%50)+1,\r\n            (randomWords[2]%50)+1,\r\n            (randomWords[3]%50)+1,\r\n            (randomWords[4]%50)+1,\r\n            (randomWords[5]%12)+1,\r\n            (randomWords[6]%12)+1\r\n        );\r\n            require(\r\n            (_winningNumbersAndStars.number1 != 0 &&\r\n                _winningNumbersAndStars.number2 != 0 &&\r\n                _winningNumbersAndStars.number3 != 0 &&\r\n                _winningNumbersAndStars.number4 != 0 &&\r\n                _winningNumbersAndStars.number5 != 0 &&\r\n                _winningNumbersAndStars.star1 != 0 &&\r\n                _winningNumbersAndStars.star2 != 0),\r\n            \"Winning Numbers And Stars Cannot Be Zero\"\r\n        );\r\n\r\n        require(\r\n            ((_winningNumbersAndStars.number1 != _winningNumbersAndStars.number2 &&\r\n                _winningNumbersAndStars.number1 != _winningNumbersAndStars.number3 &&\r\n                _winningNumbersAndStars.number1 != _winningNumbersAndStars.number4 &&\r\n                _winningNumbersAndStars.number1 != _winningNumbersAndStars.number5) &&\r\n                (\r\n                    (_winningNumbersAndStars.number2 != _winningNumbersAndStars.number3 &&\r\n                        _winningNumbersAndStars.number2 != _winningNumbersAndStars.number4 &&\r\n                        _winningNumbersAndStars.number2 != _winningNumbersAndStars.number5)\r\n                ) &&\r\n                ((_winningNumbersAndStars.number3 != _winningNumbersAndStars.number4 && _winningNumbersAndStars.number3 != _winningNumbersAndStars.number5)) &&\r\n                ((_winningNumbersAndStars.number4 != _winningNumbersAndStars.number5)) &&\r\n                (_winningNumbersAndStars.star1 != _winningNumbersAndStars.star2)),\r\n            \"Winning Numbers And Stars Must Be Unique Numbers\"\r\n        );\r\n        winningNumbersAndStars = _winningNumbersAndStars;\r\n        }\r\n\r\n    function annouceWinner() external checkLotteryStarted nonReentrant onlyOwner {\r\n        uint256 _lotteryEndTime = lotteryEndTime;\r\n        require(\r\n            (winningNumbersAndStars.number1 != 0 &&\r\n                winningNumbersAndStars.number2 != 0 &&\r\n                winningNumbersAndStars.number3 != 0 &&\r\n                winningNumbersAndStars.number4 != 0 &&\r\n                winningNumbersAndStars.number5 != 0 &&\r\n                winningNumbersAndStars.star1 != 0 &&\r\n                winningNumbersAndStars.star2 != 0),\r\n            \"Please Enter Winning Numbers Before Annoucing The Winners\"\r\n        );\r\n\r\n        require(block.timestamp >= _lotteryEndTime,\"Lottery Is Not Ended Yet!\");\r\n\r\n        (\r\n            totalPrize memory winners,\r\n            address[] memory prize1Winner,\r\n            address[] memory prize2Winner,\r\n            address[] memory prize3Winner,\r\n            address[] memory prize4Winner,\r\n            address[] memory prize5Winner,\r\n            address[] memory prize6Winner\r\n        ) = getWinners();\r\n\r\n        uint256 poolPrize = usdt.balanceOf(address(this));\r\n        distributionPercentage memory distributionFees = distributionFee;\r\n\r\n        prizes memory prize = prizes(0, 0, 0, 0, 0, 0);\r\n\r\n        prize.prize1 = (poolPrize * distributionFees.prize1) / 10000;\r\n        prize.prize2 = (poolPrize * distributionFees.prize2) / 10000;\r\n        prize.prize3 = (poolPrize * distributionFees.prize3) / 10000;\r\n        prize.prize4 = (poolPrize * distributionFees.prize4) / 10000;\r\n        prize.prize5 = (poolPrize * distributionFees.prize5) / 10000;\r\n        prize.prize6 = (poolPrize * distributionFees.prize6) / 10000;\r\n        uint256 maintenanceStakeAndGoodCausesAmount = (poolPrize *\r\n            maintenanceStakeAndGoodCausesFee) / 10000;\r\n\r\n        if (winners.totalPrize1Winner > 0) {\r\n            distributePrize(\r\n                winners.totalPrize1Winner,\r\n                prize1Winner,\r\n                prize.prize1,\r\n                1\r\n            );\r\n        }\r\n        if (winners.totalPrize2Winner > 0) {\r\n            distributePrize(\r\n                winners.totalPrize2Winner,\r\n                prize2Winner,\r\n                prize.prize2,\r\n                2\r\n            );\r\n        }\r\n        if (winners.totalPrize3Winner > 0) {\r\n            distributePrize(\r\n                winners.totalPrize3Winner,\r\n                prize3Winner,\r\n                prize.prize3,\r\n                3\r\n            );\r\n        }\r\n        if (winners.totalPrize4Winner > 0) {\r\n            distributePrize(\r\n                winners.totalPrize4Winner,\r\n                prize4Winner,\r\n                prize.prize4,\r\n                4\r\n            );\r\n        }\r\n        if (winners.totalPrize5Winner > 0) {\r\n            distributePrize(\r\n                winners.totalPrize5Winner,\r\n                prize5Winner,\r\n                prize.prize5,\r\n                5\r\n            );\r\n        }\r\n        if (winners.totalPrize6Winner > 0) {\r\n            distributePrize(\r\n                winners.totalPrize6Winner,\r\n                prize6Winner,\r\n                prize.prize6,\r\n                6\r\n            );\r\n        }\r\n\r\n        sendMaintenanceStakeAndGoodCausesAmount(\r\n            maintenanceStakeAndGoodCausesAmount\r\n        );\r\n        totalPrize memory _totalPrizeWinner = totalPrize(\r\n            winners.totalPrize1Winner,\r\n            winners.totalPrize2Winner,\r\n            winners.totalPrize3Winner,\r\n            winners.totalPrize4Winner,\r\n            winners.totalPrize5Winner,\r\n            winners.totalPrize6Winner\r\n        );\r\n        historyOfPrizeWinners memory historyOfLotteryPrizeWinnerss = historyOfPrizeWinners(\r\n            _totalPrizeWinner.totalPrize1Winner, //prize1Winners,\r\n            _totalPrizeWinner.totalPrize2Winner, //prize2Winners,\r\n            _totalPrizeWinner.totalPrize3Winner, //prize3Winners,\r\n            _totalPrizeWinner.totalPrize4Winner, //prize4Winners,\r\n            _totalPrizeWinner.totalPrize5Winner, //prize5Winners,\r\n            _totalPrizeWinner.totalPrize6Winner //prize6Winners,\r\n        );\r\n        historyOfPrizePerPersonAmount memory historyOfPrizePerPersonAmountss = historyOfPrizePerPersonAmount(\r\n            calculatePrize(prize.prize1, _totalPrizeWinner.totalPrize1Winner), //prize1PerPersonAmount,\r\n            calculatePrize(prize.prize2, _totalPrizeWinner.totalPrize2Winner), //prize2PerPersonAmount,\r\n            calculatePrize(prize.prize3, _totalPrizeWinner.totalPrize3Winner), //prize3PerPersonAmount,\r\n            calculatePrize(prize.prize4, _totalPrizeWinner.totalPrize4Winner), //prize4PerPersonAmount,\r\n            calculatePrize(prize.prize5, _totalPrizeWinner.totalPrize5Winner), //prize5PerPersonAmount,\r\n            calculatePrize(prize.prize6, _totalPrizeWinner.totalPrize6Winner) //prize6PerPersonAmount\r\n        );\r\n\r\n        historyOfPrizeTotalAmount memory historyOfPrizeTotalAmountss = historyOfPrizeTotalAmount(\r\n            poolPrize, //totalPrize,\r\n            block.timestamp,\r\n            guessCount,\r\n            prize.prize1, //prize1PerPersonAmount,\r\n            prize.prize2, //prize2PerPersonAmount,\r\n            prize.prize3, //prize3PerPersonAmount,\r\n            prize.prize4, //prize4PerPersonAmount,\r\n            prize.prize5, //prize5PerPersonAmount,\r\n            prize.prize6, //prize6PerPersonAmount,\r\n            maintenanceStakeAndGoodCausesAmount //maintenanceStakeAndGoodCausesAmount\r\n        );\r\n\r\n        historyOfWinnigNumber memory historyOfWinningNumberss = historyOfWinnigNumber(\r\n            winningNumbersAndStars.number1, //number1,\r\n            winningNumbersAndStars.number2, //number2,\r\n            winningNumbersAndStars.number3, //number3,\r\n            winningNumbersAndStars.number4, //number4,\r\n            winningNumbersAndStars.number5, //number5,\r\n            winningNumbersAndStars.star1, //star1,\r\n            winningNumbersAndStars.star2 //star2,\r\n        );\r\n\r\n        emit RoundHistory(\r\n            roundNumber,\r\n            roundHistory(\r\n                historyOfWinningNumberss,\r\n                historyOfPrizeTotalAmountss,\r\n                historyOfPrizePerPersonAmountss,\r\n                historyOfLotteryPrizeWinnerss\r\n            ),\r\n            1\r\n        );\r\n        \r\n        // reset lottery for new round\r\n        guessCount = 0;\r\n        lotteryStartTime = lotteryEndTime;\r\n        lotteryEndTime = (lotteryEndTime + 7 days);\r\n        winningNumbersAndStars = guessRandomNumberAndStars(0, 0, 0, 0, 0, 0, 0);\r\n        ++roundNumber;\r\n\r\n        //Roll Over Amount To next draw if tuesday lottery is activated or not\r\n        if (isTuesdayLotteryActive) {\r\n            bool success = usdt.transfer( tuesdayLotteryAddress, usdt.balanceOf(address(this)));\r\n            require(success, \"Roll Over Failed!\");\r\n        }    \r\n    }\r\n\r\n    function calculatePrize(uint256 prize, uint256 total)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (total > 0) {\r\n            return prize / total;\r\n        } else {\r\n            return prize;\r\n        }\r\n    }\r\n\r\n    function distributePrize(\r\n        uint256 _totalWinner,\r\n        address[] memory winners,\r\n        uint256 prize,\r\n        uint256 _wininnigCategory\r\n    ) private {\r\n        uint256 amountPerWinner = prize / _totalWinner;\r\n        for (uint256 i = 0; i < _totalWinner; ) {\r\n            bool success = usdt.transfer(winners[i], amountPerWinner);\r\n            require(success, \"Usdt Transfer Failed!\");\r\n            emit DistributePrize(\r\n                roundNumber,\r\n                winners[i],\r\n                Distribute(i, _wininnigCategory, amountPerWinner, true, 1)\r\n            );\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendMaintenanceStakeAndGoodCausesAmount(uint256 _amount) private {\r\n        bool success = usdt.transfer(maintenanceStakeAndGoodCauses, _amount);\r\n        require(success, \"Usdt Transfer Failed!\");\r\n    }\r\n\r\n    function getWinners()\r\n        private\r\n        returns (\r\n            totalPrize memory prizeWinner,\r\n            address[] memory prize1Winner,\r\n            address[] memory prize2Winner,\r\n            address[] memory prize3Winner,\r\n            address[] memory prize4Winner,\r\n            address[] memory prize5Winner,\r\n            address[] memory prize6Winner\r\n        )\r\n    {\r\n        uint256 totalTickets = guessCount;\r\n\r\n        prize1Winner = new address[](totalTickets);\r\n        prize2Winner = new address[](totalTickets);\r\n        prize3Winner = new address[](totalTickets);\r\n        prize4Winner = new address[](totalTickets);\r\n        prize5Winner = new address[](totalTickets);\r\n        prize6Winner = new address[](totalTickets);\r\n\r\n        {\r\n            for (uint256 i = 0; i < totalTickets; ) {\r\n                uint8 matchedNumber = 0;\r\n                uint8 matchedStar = 0;\r\n                guessInfo memory guess = guessInfos[i];\r\n                if (\r\n                    guess.guess.number1 == winningNumbersAndStars.number1 ||\r\n                    guess.guess.number1 == winningNumbersAndStars.number2 ||\r\n                    guess.guess.number1 == winningNumbersAndStars.number3 ||\r\n                    guess.guess.number1 == winningNumbersAndStars.number4 ||\r\n                    guess.guess.number1 == winningNumbersAndStars.number5\r\n                ) {\r\n                    ++matchedNumber;\r\n                }\r\n                if (\r\n                    guess.guess.number2 == winningNumbersAndStars.number1 ||\r\n                    guess.guess.number2 == winningNumbersAndStars.number2 ||\r\n                    guess.guess.number2 == winningNumbersAndStars.number3 ||\r\n                    guess.guess.number2 == winningNumbersAndStars.number4 ||\r\n                    guess.guess.number2 == winningNumbersAndStars.number5\r\n                ) {\r\n                    ++matchedNumber;\r\n                }\r\n                if (\r\n                    guess.guess.number3 == winningNumbersAndStars.number1 ||\r\n                    guess.guess.number3 == winningNumbersAndStars.number3 ||\r\n                    guess.guess.number3 == winningNumbersAndStars.number3 ||\r\n                    guess.guess.number3 == winningNumbersAndStars.number4 ||\r\n                    guess.guess.number3 == winningNumbersAndStars.number5\r\n                ) {\r\n                    ++matchedNumber;\r\n                }\r\n                if (\r\n                    guess.guess.number4 == winningNumbersAndStars.number1 ||\r\n                    guess.guess.number4 == winningNumbersAndStars.number4 ||\r\n                    guess.guess.number4 == winningNumbersAndStars.number3 ||\r\n                    guess.guess.number4 == winningNumbersAndStars.number4 ||\r\n                    guess.guess.number4 == winningNumbersAndStars.number5\r\n                ) {\r\n                    ++matchedNumber;\r\n                }\r\n                if (\r\n                    guess.guess.number5 == winningNumbersAndStars.number1 ||\r\n                    guess.guess.number5 == winningNumbersAndStars.number5 ||\r\n                    guess.guess.number5 == winningNumbersAndStars.number3 ||\r\n                    guess.guess.number5 == winningNumbersAndStars.number4 ||\r\n                    guess.guess.number5 == winningNumbersAndStars.number5\r\n                ) {\r\n                    ++matchedNumber;\r\n                }\r\n                if (matchedNumber == 5) {\r\n                    if (\r\n                        guess.guess.star1 == winningNumbersAndStars.star1 ||\r\n                        guess.guess.star1 == winningNumbersAndStars.star2\r\n                    ) {\r\n                        ++matchedStar;\r\n                    }\r\n                    if (\r\n                        guess.guess.star2 == winningNumbersAndStars.star1 ||\r\n                        guess.guess.star2 == winningNumbersAndStars.star2\r\n                    ) {\r\n                        ++matchedStar;\r\n                    }\r\n                }\r\n                if (matchedNumber == 5 && matchedStar == 2) {\r\n                    uint256 winningIndex = prizeWinner.totalPrize1Winner;\r\n                    emit TicketWinner(\r\n                        roundNumber,\r\n                        guess.user,\r\n                        Ticketwinner(winningIndex, 1, true, 1, i)\r\n                    );\r\n                    prize1Winner[prizeWinner.totalPrize1Winner] = guess.user;\r\n                    ++prizeWinner.totalPrize1Winner;\r\n                } else if (matchedNumber == 5 && matchedStar == 1) {\r\n                    uint256 winningIndex = prizeWinner.totalPrize2Winner;\r\n                    emit TicketWinner(\r\n                        roundNumber,\r\n                        guess.user,\r\n                        Ticketwinner(winningIndex, 2, true, 1, i)\r\n                    );\r\n                    prize2Winner[prizeWinner.totalPrize2Winner] = guess.user;\r\n                    ++prizeWinner.totalPrize2Winner;\r\n                } else if (matchedNumber == 5) {\r\n                    uint256 winningIndex = prizeWinner.totalPrize3Winner;\r\n                    emit TicketWinner(\r\n                        roundNumber,\r\n                        guess.user,\r\n                        Ticketwinner(winningIndex, 3, true, 1, i)\r\n                    );\r\n\r\n                    prize3Winner[prizeWinner.totalPrize3Winner] = guess.user;\r\n                    ++prizeWinner.totalPrize3Winner;\r\n                } else if (matchedNumber == 4) {\r\n                    uint256 winningIndex = prizeWinner.totalPrize4Winner;\r\n                    emit TicketWinner(\r\n                        roundNumber,\r\n                        guess.user,\r\n                        Ticketwinner(winningIndex, 4, true, 1, i)\r\n                    );\r\n\r\n                    prize4Winner[prizeWinner.totalPrize4Winner] = guess.user;\r\n                    ++prizeWinner.totalPrize4Winner;\r\n                } else if (matchedNumber == 3) {\r\n                    uint256 winningIndex = prizeWinner.totalPrize5Winner;\r\n                    emit TicketWinner(\r\n                        roundNumber,\r\n                        guess.user,\r\n                        Ticketwinner(winningIndex, 5, true, 1, i)\r\n                    );\r\n\r\n                    prize5Winner[prizeWinner.totalPrize5Winner] = guess.user;\r\n                    ++prizeWinner.totalPrize5Winner;\r\n                } else if (matchedNumber == 2) {\r\n                    uint256 winningIndex = prizeWinner.totalPrize6Winner;\r\n                    emit TicketWinner(\r\n                        roundNumber,\r\n                        guess.user,\r\n                        Ticketwinner(winningIndex, 6, true, 1, i)\r\n                    );\r\n                    prize6Winner[prizeWinner.totalPrize6Winner] = guess.user;\r\n                    ++prizeWinner.totalPrize6Winner;\r\n                }\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function changeTicketPrice(uint256 _price) external onlyOwner {\r\n        require(_price > 0, \"Ticket price must be greater than 0\");\r\n\r\n        ticketPrice = _price;\r\n    }\r\n\r\n    function getMaintenanceStakeAndGoodCausesFee()\r\n        external\r\n        pure\r\n        returns (uint16)\r\n    {\r\n        return maintenanceStakeAndGoodCausesFee;\r\n    }\r\n\r\n    function changeMaintenanceStakeAndGoodCausesAddress(\r\n        address _maintenanceStakeAndGoodCausesAddress\r\n    ) external onlyOwner {\r\n        maintenanceStakeAndGoodCauses = _maintenanceStakeAndGoodCausesAddress;\r\n    }\r\n\r\n    function getDistributionFee()\r\n        external\r\n        view\r\n        returns (distributionPercentage memory)\r\n    {\r\n        return distributionFee;\r\n    }\r\n\r\n    function getBalance() external view returns (uint256) {\r\n        return usdt.balanceOf(address(this));\r\n    }\r\n\r\n    function setIsTicketCanBeSold(bool _isTicketCanBeSold)\r\n        external\r\n        onlyOwner\r\n        checkLotteryStarted\r\n    {\r\n        isTicketCanBeSold = _isTicketCanBeSold;\r\n    }\r\n\r\n    function setLotteryStartTime(uint256 _lotteryStartTime)\r\n        external\r\n        onlyOwner\r\n        checkLotteryStarted\r\n    {\r\n        require(\r\n            block.timestamp < _lotteryStartTime,\r\n            \"Lottery Start Time Cannot Be In The Past!\"\r\n        );\r\n\r\n        lotteryStartTime = _lotteryStartTime;\r\n        lotteryEndTime = lotteryStartTime + 7 days;\r\n    }\r\n\r\n    function setLotteryEndTime(uint256 _lotteryEndTime)\r\n        external\r\n        onlyOwner\r\n        checkLotteryStarted\r\n    {\r\n        require(\r\n            block.timestamp < _lotteryEndTime,\r\n            \"Lottery End Time Cannot Be In The Past!\"\r\n        );\r\n\r\n        lotteryEndTime = _lotteryEndTime;\r\n    }\r\n\r\n    function setCooldownTime(uint256 _cooldownTime) external onlyOwner {\r\n        cooldownTime = _cooldownTime;\r\n    }\r\n\r\n    function stopLottery() external onlyOwner checkLotteryStarted {\r\n        require(\r\n            guessCount == 0,\r\n            \"Please Annouce Winner Before Stopping The Lottery\"\r\n        );\r\n\r\n        require(\r\n            block.timestamp >= lotteryEndTime,\r\n            \"Lottery Cannot Be Stopped Before The Lottery End Time\"\r\n        );\r\n\r\n        isLotteryStarted = false;\r\n    }\r\n\r\n    function startLottery(uint256 _lotteryStartTime) external onlyOwner {\r\n        require(!isLotteryStarted, \"Lottery Has Already Started\");\r\n\r\n        require(\r\n            block.timestamp < _lotteryStartTime,\r\n            \"Lottery Start Time Cannot Be In The Past!\"\r\n        );\r\n\r\n        lotteryStartTime = _lotteryStartTime;\r\n        lotteryEndTime = _lotteryStartTime + 7 days;\r\n        isTicketCanBeSold = true;\r\n        isLotteryStarted = true;\r\n    }\r\n\r\n    function getCurrentTotalPlayers() external view returns (uint256) {\r\n        return guessCount;\r\n    }\r\n\r\n    function transferOwnerShip(address _newOwner) external onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function getTotalBuyTickets() external view returns (uint256) {\r\n        return buyTickets[msg.sender];\r\n    }\r\n\r\n    function setTuesdayLotteryAddress(address _tuesdayLotteryAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        tuesdayLotteryAddress = _tuesdayLotteryAddress;\r\n    }\r\n\r\n    function setTuesdayLotteryActive(bool _isActive) external onlyOwner {\r\n        isTuesdayLotteryActive = _isActive;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_maintenanceStakeAndGoodCauses\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cooldownTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lotteryStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"winningIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wininnigCategory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"lotteryType\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct FridayLottery.Distribute\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"DistributePrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"RequestId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"star1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"star2\",\"type\":\"uint256\"}],\"internalType\":\"struct FridayLottery.historyOfWinnigNumber\",\"name\":\"historyOfWinningNumbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalPoolPrize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawnDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize1TotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize2TotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize3TotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize4TotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize5TotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize6TotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maintenanceStakeAndGoodCausesAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct FridayLottery.historyOfPrizeTotalAmount\",\"name\":\"historyOfPrizeTotalAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"prize1PerPersonAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize2PerPersonAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize3PerPersonAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize4PerPersonAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize5PerPersonAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize6PerPersonAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct FridayLottery.historyOfPrizePerPersonAmount\",\"name\":\"historyOfPrizePerPersonAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"prize1Winners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize2Winners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize3Winners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize4Winners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize5Winners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize6Winners\",\"type\":\"uint256\"}],\"internalType\":\"struct FridayLottery.historyOfPrizeWinners\",\"name\":\"historyOfPrizeWinners\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct FridayLottery.roundHistory\",\"name\":\"info\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"lotteryType\",\"type\":\"uint8\"}],\"name\":\"RoundHistory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"}],\"name\":\"TicketBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"star1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"star2\",\"type\":\"uint256\"}],\"internalType\":\"struct FridayLottery.guessRandomNumberAndStars\",\"name\":\"guessNumbersAndStars\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"lotteryType\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct FridayLottery.roundInfoPerPerson\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"TicketGuessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"winningIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wininnigCategory\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"lotteryType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"ticketNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FridayLottery.Ticketwinner\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"TicketWinner\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"star1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"star2\",\"type\":\"uint256\"}],\"internalType\":\"struct FridayLottery.guessRandomNumberAndStars[]\",\"name\":\"_guessNumberAndStars\",\"type\":\"tuple[]\"}],\"name\":\"addGuessNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"annouceWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maintenanceStakeAndGoodCausesAddress\",\"type\":\"address\"}],\"name\":\"changeMaintenanceStakeAndGoodCausesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changeTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"prize1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"prize2\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"prize3\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"prize4\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"prize5\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"prize6\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generateWinningNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTotalPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionFee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"prize1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"prize2\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"prize3\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"prize4\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"prize5\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"prize6\",\"type\":\"uint16\"}],\"internalType\":\"struct FridayLottery.distributionPercentage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaintenanceStakeAndGoodCausesFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBuyTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guessCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guessInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"star1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"star2\",\"type\":\"uint256\"}],\"internalType\":\"struct FridayLottery.guessRandomNumberAndStars\",\"name\":\"guess\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_gasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLotteryStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTicketCanBeSold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTuesdayLotteryActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenanceStakeAndGoodCauses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenanceStakeAndGoodCausesFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldownTime\",\"type\":\"uint256\"}],\"name\":\"setCooldownTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isTicketCanBeSold\",\"type\":\"bool\"}],\"name\":\"setIsTicketCanBeSold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryEndTime\",\"type\":\"uint256\"}],\"name\":\"setLotteryEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryStartTime\",\"type\":\"uint256\"}],\"name\":\"setLotteryStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setTuesdayLotteryActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tuesdayLotteryAddress\",\"type\":\"address\"}],\"name\":\"setTuesdayLotteryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryStartTime\",\"type\":\"uint256\"}],\"name\":\"startLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnerShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tuesdayLotteryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FridayLottery", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cd9c23c10b64c5502d3d8c2d92edf4a19aa323bd00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000c7558e259f97efe867eee8cdc7101f495dc1e2ed0000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000638940000000000000000000000000000000000000000000000000000000000000000210", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f9254a9aa8ce31ad1243ebac4cc88111d9729bfa6329b58f1bb9ce1e0092c7ce"}