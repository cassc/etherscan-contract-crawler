{"SourceCode": "// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10**64) {\r\n                value /= 10**64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10**32) {\r\n                value /= 10**32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10**16) {\r\n                value /= 10**16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10**8) {\r\n                value /= 10**8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10**4) {\r\n                value /= 10**4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10**2) {\r\n                value /= 10**2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10**1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/IAccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     *\r\n     * Format of the revert message is described in {_checkRole}.\r\n     *\r\n     * _Available since v4.6._\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(account),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: PandAIEarnV1.sol\r\n\r\n\r\n/*\r\n==================================================================================================================================\r\n==== Terms of Use\r\n==================================================================================================================================\r\n\r\n1. INTRODUCTION\r\nPandAI Corp Ltd. (collectively, \u201cwe,\u201d \u201cour,\u201d \u201cus\u201d, or \u201cPandAI\u201d ) provide the following Terms of Use that, as they may be modified from time to time by PandAI in its sole discretion (the \u201cTerms\u201d) apply to our users (\u201cyou\u201d or \u201cUser(s)\u201d) and govern each User\u2019s access to, and use of, PandAI\u2019s services as well as our website(s), any software, programs, documentation, tools, hardware, internet-based services, components, and any updates (including software maintenance, service information, help content, bug fixes or maintenance releases) provided to you by PandAI, directly or indirectly, through our website, or any other online services we provide (each a \u201cService\u201d and collectively the \u201cServices\u201d).\r\nPLEASE CAREFULLY REVIEW THESE TERMS BEFORE USING, OR CONTINUING TO USE, ANY OF PANDAI\u2019 SERVICES. THE TERMS INCLUDE IMPORTANT INFORMATION ABOUT YOUR RELATIONSHIP WITH PANDAI, INCLUDING MANDATORY ARBITRATION OF DISPUTES BETWEEN YOU AND PANDAI INSTEAD OF CLASS ACTIONS OR JURY TRIALS THE SERVICES ARE PROVIDED SOLELY FOR USE BY YOU, AND YOUR USE OF THE SERVICES IS EXPRESSLY CONDITIONED ON YOUR CONSENT TO, AND COMPLIANCE WITH, THE TERMS. BY ACCESSING OR USING OUR SERVICES, YOU AGREE TO BE BOUND BY THE TERMS. IF YOU DO NOT AGREE TO ANY OF THE PROVISIONS OF THESE TERMS YOU SHOULD IMMEDIATELY STOP USING THE SERVICES OR DO NOT START TO USE OUR SERVICES. IN ADDITION, READ OUR PRIVACY POLICY LOCATED AT: https://app.pandai.io/Privacy_Policy.pdf. WE ENCOURAGE YOU TO READ THE TERMS CAREFULLY AND USE THEM TO MAKE INFORMED DECISIONS.\r\n\r\nTERMS APPLICABLE TO ALL USERS RESIDING IN THE UNITED STATES\r\nIF YOU RESIDE IN THE UNITED STATES AND ARE NOT REGISTERED WITH PANDAI AS ACCREDITED INVESTORS (A \u201cNON-ACCREDITED U.S. USER\u201d) THE EARN SERVICE IS FORBIDEN TO USE. HOWEVER, YOU MAY USE OTHER SERVICES PROVIDED BY PANDAI.\r\nIF YOU ARE A NON-ACCREDITED U.S. USER, ANY DIGITAL ASSET TRANSFERRED TO PANDAI WILL NOT EARN REWARDS AND NOT HAVE ACCESS TO THE EARN SERVICE.\r\nIF YOU RESIDE IN THE UNITED STATES AND ARE REGISTERED WITH PANDAI AS AN ACCREDITED INVESTOR (AN \u201cACCREDITED U.S. USER\u201d), YOU SHALL HAVE ACCESS TO THE EARN SERVICE SUBJECT TO THE TERMS HEREIN.\r\nTERMS APPLICABLE TO USERS RESIDING OUTSIDE THE UNITED STATES AND OUTSIDE OF RESTRICTED COUNTRIES\r\nIF YOU RESIDE OUTSIDE THE UNITED STATES AND OUTSIDE OF RESTRICTED COUNTRIES, YOU SHALL HAVE ACCESS TO THE EARN SERVICE SUBJECT TO THE TERMS HEREIN.\r\n\r\nPlease take further notice that PandAI may modify the Terms at any time and in its sole discretion by posting the revised Terms on the PandAI website. You shall be bound by such modifications effective immediately upon posting. It is your responsibility to review these Terms prior to each use of the Services.\r\nPandAI reserves the right to implement, change, modify, or increase any fee, rates or other related cost in connection with the Services at any time. By accepting the Terms you hereby agree to pay all fees associated with or incurred by your use of the PandAI of the Services.\r\n\r\n2. DEFINITIONS\r\nCapitalized terms shall have the meanings assigned to them in these Terms, unless the context requires otherwise.\r\n\r\n\u201cPandAI Earn\u201d or \u201cService\u201d means a Service on the PandAI website, allowing a Client to view the Clients\u2019s balance of Eligible Digital Assets loaned by the Client to PandAI, and any rewards gained on loaned Eligible Digital Assets, and manage the Clients\u2019s personal information and Terms of Use. \r\nTHE USE OF PANDAI SERVICES IS NOT A BANK ACCOUNT, DEPOSIT ACCOUNT, SAVINGS ACCOUNTS, CHECKING ACCOUNT, OR ANY OTHER TYPE OF ASSET ACCOUNT AND SHOULD NOT BE CHARACTERIZED AS A BANKING PRODUCT OR INVESTMENT ADVICE NOR INVESTMENT PRODUCT. THE USE OF TERMS SUCH AS \u201cSERVICE\u201d \u201cBALANCE\u201d \u201cSETTLEMENT\u201d AND SIMILAR LANGUAGE IN CONNECTION WITH THE EARN SERVICE DOES NOT IMPLY OR ESTABLISH, AND SHALL NOT BE TAKEN TO SUGGEST, ANY FORM OF CUSTODY RELATIONSHIP, AND SUCH LANGUAGE IS USED HEREIN AS TERMS OF CONVENIENCE ONLY IN REFERRING TO USERS\u2019 LENDING OF DIGITAL ASSETS TO PANDAI AS PART OF THE EARN SERVICE, AND PANDAI\u2019 OBLIGATION TO TRANSFER DIGITAL ASSETS TO USERS UPON THE TERMINATION OF SUCH LOANS IN CONNECTION WITH THESE SERVICES.\r\n\r\n\u201cAML\u201d stands for Anti-Money Laundering, which means a set of procedures, laws, and regulations that are intended to stop the practice of generating income through illegal actions.\r\n\u201cBlockchain\u201d means a system in which records of transactions made in Digital Assets are maintained across several computers that are linked in a peer-to-peer network.\r\n\u201cDigital Asset\u201d means a digital representation of value in which encryption techniques are used to regulate the generation of digital units and verify the transfer of assets, operating independently from a central bank.\r\n\u201cEligible Digital Assets\u201d means the types of Digital Assets we may choose to designate for inclusion under our Services from time to time, which are subject to change and/or limitation in our sole discretion, based on business, regulatory and/or other considerations.\r\n\u201cReferral\u201d a unique Referral Link for any address. If a new user follows Referral Link and makes his first deposit into PandAI Earn, his address is being linked with the address that provided the link, forever. The address providing the link is being rewarded.\r\n\u201cUnhosted Wallet\u201d means a Virtual Wallet where all Eligible Digital Assets held therein are assets maintained by YOU provided by Third Party Service Provider.\r\n\u201cKYC\u201d stands for Know Your Customer (or Client), which means the process of a business verifying the identity of its customers or clients and assessing potential risks of illegal intentions for the business relationship.\r\n\u201cStablecoin\u201d means a Digital Asset that is Pegged to a Fiat currency.\r\n\u201cVirtual Wallet\u201d or \u201cVirtual Wallet Address\u201d means an on-Blockchain virtual address in which Digital Assets can be held and transferred.\r\n\r\n3. ELIGIBILITY AND PROOF OF IDENTITY\r\nIn order to use the Services you must first select the duration of the services and connect your virtual wallet as described conditions of the Earn services subject to the terms herin.\r\n\r\nIn order to be eligible to access and use the Services, you must (i) be eighteen (18) years of age or older, (ii) have the legal ability to enter into and be bound by these Terms, (iii) comply with these Terms. PandAI is not obligated to accept any application from any applicant and has sole and absolute discretion to accept or reject applications to use PandAI earn services.\r\nThe Services are not available where prohibited by law or by PandAI policy, as updated from time to time; currently, such places include, but are not necessarily limited to, the Restricted countries list in table below:\r\n\r\nBurkina Faso, Afghanistan, Albania, Barbados, Cuba, Burundi, Iran, Crimea Region, Haiti, Venezuela, Central African Republic, Iraq, Donetsk Region, Jamaica, Chad, Jordan, Gibraltar, Nicaragua , Comoros , Myanmar , Luhansk Region , Democratic Republic of the Congo , Pakistan , Equatorial Guinea , Philippines , Guinea - Bissau , Syria , Libya , The Democratic People\u2019s Republic of Korea , Mali , Turkey , Mozambique , Turkmenistan , Niger , Yemen , Nigeria , Senegal , Somalia , South Africa , South Sudan , Sudan , Tanzania , Uganda\r\n\r\nor any other country against which the United States, the United Kingdom or the European Union imposes financial sanctions or embargoes.\r\nBe advised that in some jurisdictions, due to regulatory considerations, PandAI may not provide the Services.\r\nDue to changing regulatory requirements and interpretations in the Digital Assets markets, PandAI may use its sole and absolute discretion to, among other things, reject specific applications to use PandAI services, therefore prohibit use of the Services. PandAI, in its sole and absolute discretion, has determined that regulatory or policy reasons prevent PandAI from being able to offer its Services.\r\nPandAI is subject to AML, KYC, according to The FATF Recommendations, therefore, set an international standard, which countries should implement through measures adapted to their particular circumstances. The FATF Standards comprise the Recommendations themselves and their Interpretive Notes, together with the applicable definitions.  \r\nAlso with respect to and U.S. sanction requirements under the Bank Secrecy Act (\u201cBSA\u201d), Uniting and Strengthening America by Providing Appropriate Tools Required to Intercept and Obstruct Terrorism Act (\u201cUSA PATRIOT Act\u201d), and the Office of Foreign Assets Control (\u201cOFAC\u201d).\r\nEU's tools and objectives of the Common Foreign and Security Policy (CFSP). These include safe-guarding the EU's values, its fundamental interests and security; consolidating and supporting democracy, the rule of law, human rights and the principles of international law; preserving peace; preventing conflicts and strengthening international security.\r\nOn top of above PandAI is obligated to check Clients and business partners against all major lists of financial sanctions issued by regulators (UN Security List, EU Lists, OFAC, SDN, FinCEN, 311, Treasury, SECO, FDFA and Finma).\r\nUnder applicable AML rules, PandAI is obligated to maintain certain information about you, including User records and transaction history, for five years or a longer period as may be required under applicable laws. Under certain circumstances, PandAI is required to report to the competent authorities of any unusual transactions, or of any suspicion it may have that any Client might be involved in any financial crime or illicit activity.\r\nPandAI is required to comply with applicable AML and KYC requirements before and after you use our Services. When you want to use our Service, we may ask for documentation and information, including but not limited to copies of your government-issued identification document (e.g. Passport, driver\u2019s license). For corporate Clients of PandAI, we may require identification information related to the directors, officers, authorized representatives, or equity owners of the business. We may also gather and use information about you from third parties, to help us confirm your identity, perform our AML/KYC checks and/or determine your access to the Services You represent and warrant at all times that any and all information provided by you to us is true, accurate, and not misleading in any respect. If any such information changes, it is your obligation to provide the new information to us as soon as practicable following such change.\r\n\r\n4. SERVICES\r\nA. Overview of Services\r\nYou can use the services of PandAI trough official website at the address https://pandai.io/ or trough link send by any user of PandAI services trough refferal program. PandAI allows also gain of access to its services trough commercial link directed to PandAI Earn product.  Your PandAI Services are available to view upon visiting our website and connection of your Virual Wallet trough which you are able to Claim your interest from PandAI Earn Service provided to you by PandAI. You access the Services and conduct certain transactions online using your Virtual Wallet. You are solely responsible for the activities under your Virtual Wallet and for securing your Virtual Wallet seed prahse, hints, or any other codes that you use to access your Virtual Wallet and the Services of PandAI. PandAI is not responsible for any loss or compromise of your access information and/or your personal information, or for any loss that you may sustain due to compromise of your access information and/or personal information to your Virtual Wallet.\r\n\r\nPANDAI MAY RESTRICT SERVICES IN CERTAIN JURISDICTIONS DUE TO APPLICABLE LAWS, REGULATIONS, AND BUSINESS CONSIDERATIONS, AT ITS SOLE DISCRETION. ANY SERVICES AVAILABLE TO YOU WILL BE THOSE ACCESSIBLE VIA PANDAI WEBSITE. IF YOU RESIDE IN THE UNITED STATES, THE SERVICES AVAILABLE TO YOU MAY DEPEND ON YOUR STATUS AS AN ACCREDITED INVESTOR OR GEOGRAPHIC LOCATION IF RESTRICTED COUNTRIES APPLY. PANDAI MAY REQUEST FROM YOU PROOF OF ACCREDITED INVESTOR STATUS OR GEOGRAHPIC LOCATION PERIODICALLY OR AT ANY TIME, IN PANDAI\u2019 SOLE DISCRETION. THE FAILURE OF A CLIENT TO TIMELY RESPOND TO SUCH A REQUEST MAY RESULT IN THE TEMPORARY OR PERMANENT LOSS OF THAT CLIENT\u2019S ABILITY TO USE A SERVICE. PANDAI IS NOT LIABLE TO ANY LOSS OR DAMAGE RESULTING FROM SUCH TEMPORARY OR PERMANENT LOSS OF USE TO ANY SERVICE.\r\n\r\nWe will not be liable for following any instruction we receive through your Virtual Wallet and Choosed Services, even if it was not authorized by you, or if it was entered by mistake or is otherwise inaccurate. To verify the authenticity of any instruction we receive through in accordance to our Services, at our sole discretion we may require your identification in any form we deem necessary. You agree to reimburse us (and we may charge you) for all claims, costs, losses, and damages, including reasonable attorneys\u2019 fees, that result from our following instructions we receive through your ordered Services and take any action related to your ordered Services.\r\nWhen you use our Services, the Services provided by PandAI are not a banking services, deposit account, savings accounts, checking account, investment advice, invesmtents product or any other type of asset account and should not be characterized as a banking or investments product or service. All Eligible Digital Asset loaned by you to PandAI, therefore, owned, held and/or controlled by PandAI (under the applicable Service, as further detailed herein), and subject to PandAI\u2019 obligation to deliver such Digital Assets back to you upon the termination of the applicable Service.\r\nPandAI may inform government and regulatory bodies if PandAI suspects your involvement in any fraudulent activity of any kind or other misuse of the Services, provision by you of inaccurate or misleading information, or your involvement in any money laundering or other financial crime related to you.\r\n\r\nB. PandAI Earn Rewards\r\nOur Earn Service allows you to gain interest from PandAI earn, referred to as \u201cRewards,\u201d in the form of Digital Assets (based on the value of assets being deposited, with minimum deposit of $100.) In exchange for entering into Fixed duration loans of your Eligible Digital Assets to PandAI under the terms hereof. If our Earn Service is available to you, upon your election, you will lend your Eligible Digital Assets to PandAI and grant PandAI all rights and title to such Digital Assets, for PandAI to use in its sole discretion while using the Earn Service.\r\nThe value of Eligible Digital Assets loaned by you to PandAI, and any Rewards gained thereon (see further Section 9 below, \u201cHow Rewards are Calculated and Earned\u201d) are visible via your Virtual Wallet connection with PandAI. Once such Eligible Digital Assets are received by PandAI into your Earn balance, they shall be PandAI\u2019 property, in every sense and for all purposes, and you will immediately start accruing Rewards on such Digital Assets in accordance with the terms hereof, and the corresponding amount of Eligible Digital Assets shall be reflected in your Virtual Wallet balance. We reserve the right to reject entry into any loan transaction, and/or the right to repay any loan of Digital Asset already made, each at your expense.\r\nYou may claim your Reward to PandAI at any time with fee, and request that PandAI return the borrowed Eligible Digital Assets and deliver any Rewards accrued from the Earn Service, by transferring such Eligible Digital Assets and Claim Rewards to your external Virtual Wallet (in accordance with Section 9 below,\u201d).\r\nThe Earn Service is not an investment program nor a speculative tool. Rather, you are earning Rewards as a financing fee on the loan of Eligible Digital Assets you have transferred to PandAI in connection with the Earn Service, and in accordance with the rates and terms published by PandAI from time to time, pursuant to these Terms.\r\n\r\n5. VIRTUAL WALLET BALANCE\r\nYour Virtual Wallet Balance is visible through the connection of your Virtual Wallet with PandAI and shall indicate, the balance of Eligible Digital Assets attributed to Earn Service, to the extent applicable and available. You can transfer additional Eligible Digital Assets to PandAI by transferring the same to the Virtual Wallet Address(es) provided to you in PandAI Service. Any Eligible Digital Asset received will be treated by us as being transferred for the purpose of PandAI Earn Service beginning on the date and at the time stamped on the Blockchain confirmation.\r\nIt is your sole responsibility to make sure that Digital Assets you wish to loan to PandAI are Eligible Digital Assets, and that your transfer of Eligible Digital Assets on the Blockchain is directed over the correct Blockchain and to the correct Virtual Wallet Address as provided to you by PandAI.\r\n\r\nIf you do not carefully follow these instructions, your Digital Assets may be irrevocably lost, and PandAI may not be able to assist you in retrieving them. PandAI will not be liable to you for any such loss and shall not be under any obligation to retrieve such Digital Assets.\r\n\r\n6. OWNERSHIP OF DIGITAL ASSETS\r\nYou hereby represent and warrant to us that any Eligible Digital Asset transferred by you for the purpose of utilizing PandAI\u2019 Services is owned by you or that you are fully permitted to carry out transactions using such Eligible Digital Assets without restriction or limitation, and that your use of the Services is solely for your own behalf and benefit, and not on behalf of any other person or entity. You further represent and warrant that all such Eligible Digital Assets are free from any claims, indebtedness, liens, or third party interests.\r\n\r\n7. SETOFF AND SECURITY INTEREST\r\nYour acceptance of these Terms serves as your consent to PandAI\u2019 asserting its security interest or exercising its right of setoff should any laws governing your schoosed Services which require your consent. If the law restricts our ability to take, transfer, or setoff from any obligations to you, or if our Services are protected from attachment, levy, or legal process, you waive those conditions and limits to the full extent that you may do so by contract, and you authorize us to take any actions to offset your Obligations in the use of PandAI Earn Service.\r\nWe hereby agree that, to the extent permitted by applicable law, in the event that PandAI breaches its obligation under these Terms, you may set off assets or amounts we owe you with respect to your loan trough Earn Services, against your Obligations. If the law restricts your ability to take, transfer, or setoff our obligations to you, or if they are protected from attachment, levy, or legal process, we waive those conditions and limits to the full extent that we may do so by contract, and we authorize you to apply our obligations to you to your Obligations.\r\n\r\n8. RISK DISCLOUSURE\r\nBefore using PandAI\u2019 Services, you should ensure that you fully understand and can afford to undertake the risks involved. You should carefully read and make sure you understand the Risk of PandAI Services.\r\nThese Terms and your use of any of our Services do not create a fiduciary relationship between us and you; PandAI Earn Service is not a checking or savings account, and it is not covered by insurance against losses. PandAI has no duty to inquire into, supervise, or determine the suitability of any transaction you initiate involving Eligible Digital Assets in connection with PandAI Earn Service. We may lend, sell, pledge, hypothecate, assign, invest, use, commingle or otherwise dispose of assets and hold the Eligible Digital Assets with counterparties, and we will use our best commercial and operational efforts to prevent losses. By lending Eligible Digital Assets to PandAI while using the Earn Service, or otherwise using the Services, you will not be entitled to any profits or income PandAI may generate from any subsequent use of any Digital Assets (or otherwise), nor will you be exposed to any losses which PandAI may suffer as a result thereof. You agree and acknowledge that you are exposed to the possibility that PandAI may become unable to repay its obligations to you in part or in full, in which case any Digital Assets may be at risk of partial or total loss.\r\n\r\nELIGIBLE DIGITAL ASSETS ARE NOT LEGAL TENDER. PANDAI IS NOT A BANK OR DEPOSITORY INSTITUTION, AND USING PANDAI EARN SERVICES IS NOT A DEPOSIT ACCOUNT. ELIGIBLE DIGITAL ASSETS USED IN PANDAI SERVICE ARE NOT INSURED BY ANY PRIVATE OR GOVERNMENTAL INSURANCE PLAN, AND ARE NOT COVERED BY ANY COMPENSATION SCHEME. USING PANDAI SERVICE DOES NOT CONSTITUTE AN INVESTMENT CONTRACT OR A SECURITY, IS NOT TRANSFERABLE AND MAY NOT BE TRADED, EXCHANGED OR SOLD TO ANY THIRD PARTY UNDER ANY CIRCUMSTANCES.\r\n\r\nPandAI does not provide any legal, tax or financial advice and you are strongly advised to obtain independent legal, tax or financial advice prior to making any decision using Digital Assets. There are significant risks associated with Digital Assets, and you are solely responsible to make sure you understand such risks and assess whether such risks are appropriate for you. PandAI does not make any offers, recommendations, or invitations for you to deal in Digital Assets or use any Services, and does not take into account your personal circumstances, financial situation, needs or goals. Before making any decision, you should carefully assess your financial situation and capacity, and only use funds that you can afford to lose. Before entering into any transaction or using any of the Services you should ensure that you understand and have made an independent assessment of the suitability and appropriateness of a transaction into which you are entering and the nature and extent of your exposure to risk of loss in light of your own objectives, financial and operational resources, and other relevant circumstances.\r\nLegislative and regulatory changes or actions at the state, federal, or international level may adversely affect the use of Digital Assets. Transactions in Digital Assets may be irreversible, and, accordingly, losses due to fraudulent or accidental transactions may not be recoverable.\r\nThe nature of Digital Assets may lead to an increased risk of fraud or cyber-attack, including rollback attacks or Blockchain reorganizations. The nature of Digital Assets means that any technological difficulties experienced by PandAI or third parties may limit, delay or prevent the access or use of Digital Assets and/or cause losses of Digital Assets. Although PandAI takes precautionary measures to protect against cyber threats, circumstances may arise where losses or damages are incurred.\r\nIn light of these risks, which are only some of the risks involved in using the Services and do not constitute an exhaustive list of such risks, you should carefully consider whether Digital Assets in general and/or using our Services is suitable for you in light of your financial condition.\r\n\r\n9. SETTLEMENT ANDREWARDS OF PANDAI EARN\r\nSubject to these Terms, for any of your Eligible Digital Assets that you utilize in the Earn Service (if available to you), you have a call option on all loans made to PandAI to demand repayment of any loan at any time to your Virtual Wallet. Such payment will terminate in whole your loan to PandAI and you shall no longer accrue Rewards on the amount of loans as of the time of your exercise of the call option. If you exercise call option of all loans or partial loan to PandAI and demand repyment of any loan at any time to your Virtual Wallet, PandAI reserves the right to exercise the settlement within 14 days of such demand by you or upon expiration of Lockup period. PandAI initiates the settlement process immediately following expiration of Lockup period when possible in the consideration of the paragraph above. Everyone can entrust his assets to PandAI Earn, but when claiming the reward, there's a claim fee \u226410 % paid in PandAI Token that's being burned.\r\nPandAI Earn is a product that introduces the PandAI Token burn mechanism to support token price and bring value to the whole PandAI ecosystem.\r\n\r\nFor PandAI Earn Rewards based on Lockup periods and claim fee see table below: \r\nThere are several Tiers of PandAI Earn based on the value of assets being deposited, with minimum deposit of $100 and parameters defined in contract constructor.\r\n\r\nLet's demonstrate Tier parameters on two examples\r\nExample1: Client deposits d\u00a0=\u00a0$2,000 (it's his first deposit). \r\nHe's in Tier 3, with Monthly Gain =\u00a01.5 %. User returns in t\u00a0=\u00a03 months to claim his Clients Reward, which is (no compound interest)\r\nThere's 8 % Claim Fee in Tier 3 which means Client must pay 0.08\u00a0*\u00a090\u00a0=\u00a0$7.2 in PandAI Token when claiming the reward (those PandAI Tokens are being burned).\r\n\r\nExample2: User deposits d\u00a0=\u00a0$10,000 (it's his first deposit). \r\nHe's in Tier 5, with Monthly Gain =\u00a02.2 %. User returns in t\u00a0=\u00a03 months to claim his Clients Reward, which is (compound interest)\r\nThere's 5 % Claim Fee in Tier 5 which means Client must pay 0.05\u00a0*\u00a0682.27\u00a0=\u00a0$34.11 in PandAI Token when claiming the reward (those PandAI Tokens are being burned). \r\n\r\nIT IS POSSIBLE TO WITHDRAWING DEPOSIT BEFORE LOCKUP, BUT THIS COMES WITH ADDITIONAL WITHDRAW FEE PAID IN PANDAI TOKEN. IN CASE DEPOSIT IS WITHDRAWN AFTER LOCKUP, THERE IS NO WITHDRAW FEE APPLIED.\r\n\r\nWithdrawal limits for Rewards on amounts Greater then 1000 USDT may apply, based on legal, regulatory and AML considerations. Our policies and procedures may require additional compliance checks that require additional time to complete. Any individual request to exceed withdrawal limits set by PandAI must be sent via email to info@pandai.com. \r\nEvery transaction request shall be deemed pending until accepted by us. We may refuse to accept such request, or delay the processing of an approved request for any reasonable reason, including but not limited to inaccurate or misleading information provided by you, or any doubt or suspicion of fraud, misrepresentation, a sanctioned transaction, money laundering, terrorism financing or other financial crime related to your Assets used for PandAI Earn services.\r\nPandAI and our third-party partners may experience cyber-attacks, extreme market conditions, or other operational or technical difficulties which could result in the immediate halt of transactions either temporarily or permanently. Provided that PandAI has taken reasonable commercial and operational measures to prevent such events in technical systems controlled by PandAI, PandAI is not and will not be responsible or liable for any loss or damage of any sort incurred by you as a result of such cyber-attacks, operational or technical difficulties or suspensions of transactions.\r\n\r\n10. CONSENT TO PANDAI\u2019 USE OF DIGITAL ASSETS\r\nIn consideration for the Rewards payable to you on the Eligible Digital Assets using the Earn Service, for us entering into any Loan Agreement, and the use of our Services, you grant PandAI, subject to applicable law and for the duration of the period during which you elect to utilize the Eligible Digital Assets in the Earn Service (if available to you) and thus loan such Eligible Digital Assets to us through PandAI Earn, all right and title to such Eligible Digital Assets, including ownership rights, and the right, without further notice to you, to hold such Digital Assets in PandAI\u2019 own Virtual Wallet or elsewhere, and to pledge, re-pledge, hypothecate, rehypothecate, sell, lend, or otherwise transfer or use any amount of such Digital Assets, separately or together with other property, with all attendant rights of ownership, and for any period of time, and without retaining in PandAI\u2019 possession and/or control a like amount of Digital Assets, and to use or invest such Digital Assets in PandAI\u2019 full discretion. You acknowledge that with respect to Digital Assets used by PandAI pursuant to this paragraph:\r\nYou will not be able to exercise rights of ownership;\r\nPandAI may receive compensation in connection with lending or otherwise using Digital Assets in its business to which you have no claim or entitlement; and\r\nIn the event that PandAI becomes bankrupt, enters liquidation or is otherwise unable to repay its obligations, any Eligible Digital Assets used in the Earn Service may not be recoverable, and you may not have any legal remedies or rights in connection with PandAI\u2019 obligations to you other than your rights as a creditor of PandAI under any applicable laws.\r\n\r\n11. TAXES\r\nDuring using of PandAI services a record of the transactions related to your use of the Services which you may wish to use for the purposes of making any required tax filings or payments. It is your responsibility to determine what, if any, taxes apply to your use of the Services, and to collect, report, and remit the correct tax to the appropriate tax authority. We may deduct or make any tax withholdings or filings that we are required by law to make, but we are not responsible for determining whether and which taxes apply to your transaction, or for collecting, reporting, or remitting any taxes arising from any transaction or in connection with your use of PandAI services. You are responsible for complying with applicable law. You agree that PandAI is not responsible for determining whether or which laws may apply to your transactions, including tax law. You are solely responsible for reporting and paying any taxes arising from your use of the Services.\r\n\r\n12. SERVICE ACTIVITY STATEMENTS\r\nWe will make all logs and records of activities concerning your use of the Services available to you by PandAI only. \r\n\r\n13. DISCLOSURE OF INFORMATION\r\nWe may disclose information to third parties about you, in regards to PandAI services, or the transactions you make:\r\n* where it is necessary for the provision of our Services under these Terms;\r\n* in order to verify the existence and condition of your use of PandAI services for a third party, such as a referral partner;\r\n* for the purpose of conducting our AML and KYC checks and compliance with applicable laws;\r\n* If you give us written authorization;\r\n* In order to comply with any request or order by any government agency or competent court; \r\n* As described in our Privacy Policy located at: https://app.pandai.io/Privacy_Policy.pdf\r\n\r\n14. CONFLICT/DISPUTES INVOLVING OUR SERVICES\r\nWe are not liable to you for errors that may result in a financial loss to you. We may take any action that is authorized or permitted by these Terms or applicable laws without liability to you, even if such action causes you to incur fees, expenses or damages. If third parties make claims or if we receive conflicting instructions from you, or if we become involved in or concerned about a dispute between you and any third party, we reserve the right to react in ways that we believe in good faith to be appropriate, delivering the Digital Assets available therein to you or to any third party, or interpleading assets to court, all as we reasonably deem appropriate under the circumstances. You are liable for all expenses and fees we incur for such conflicts or disputes, including internal costs and attorneys\u2019 fees, and we may charge them to you.15. CHANGES IN TERMS\r\nPlease be aware that the terms and conditions governing the Services can change over time. We reserve the right to discontinue or make changes to any of the Services. We may change these Terms, and we may add to or delete from these Terms, and the updated version will supersede all prior versions.. The continued maintenance of PandAI services following the effective date of any change will constitute your acceptance of such change and subject to PandAI modified Terms.\r\n\r\n==================================================================================================================================\r\n==== Referral Terms of Use\r\n==================================================================================================================================\r\n\r\nPandAI Corp Ltd. (collectively, \u201cwe,\u201d \u201cour,\u201d \u201cus\u201d, or \u201cPandAI\u201d ) provide the following Terms of Use.\r\nThe following Referral Program Terms of Use (the \u201cRefferal Program Terms\u201d) govern your participation in the PandAI\u2019s afliate program (the \u201cRefferal Program\u201d).\r\nThese Refferal Program Terms supplement, and form part of, our standard terms of use, the current version of which is located at: https://app.pandai.io/Terms_of_Use.pdf (\u201cTerms of Use\u201d). Accordingly, capitalized terms used, but not defned in these Refferal Program Terms, have the meanings set out in the Terms of Use.\r\nPlease refer to our Privacy Policy located at: https://app.pandai.io/Privacy_Policy.pdf for information on how we collect, use and disclose information from our clients. You acknowledge and agree that your use of the Services is subject to our Privacy Policy.\r\n\r\nPlease consider the following important limitations before deciding whether to participate in the Refferal Program.\r\nBy entering the Refferal Program, you acknowledge that you have read, understand, and completely agree to these Refferal Program Terms, as updated and amended from time to time. If you wish not to be bound by these Refferal Program Terms, as updated and amended from time to time, you have to either: (1) never enter, generate or send a Referral Code (defned below), or (2) cease your participation in the Refferal Program by writing us and completing the process required by us.\r\nYour participation in the Refferal Program is always entirely at PandAI\u2019s discretion. You can be removed from the Afliate Program at any time for any reason or no reason. If you violate any of the Refferal Program Terms, you can be immediately removed from the Refferal Program and any amounts you may have been entitled to receive under it may be forfeited. PandAI reserves the right to review and investigate all Refferal Program activities and to suspend or modify any conditions in PandAI\u2019s sole discretion as deemed fair and appropriate. PandAI will also be eligible to revoke all Afliate Program rewards for violations of these Afliate Program Terms, Terms of Use, as well as for fraud, refunds, cancellations, and chargebacks or a substantial change in business circumstances.\r\n\r\n1. Description\r\n1.1 The Refferal Program allows you to elect to participate in receiving revenue from Clients you refer to the Services of PandAI Earn, Client who uses PandAI Earn services using a Referral Code you provide (each a \u201cClient\u201d). You can participate in the Refferal Program by referring Client to the Services (each person so referring Client, an \u201cRefferal\u201d). Participation in the Refferal Program is entirely on your discretion and is not required to use the Site or Services.\r\n\r\n2. Codes\r\n2.1 Under the Refferal  Program, PandAI may provide you with a unique alphanumeric or other code (the \u201cReferral Code\u201d) to distribute to eligible individuals each to become an Client of PandAI Earn services. You acknowledge and agree that: (a) PandAI have the right to limit the number of times you may use or share your Referral Code, (b) you have no ownership rights in any form over the Referral Code, and (c) PandAI may reclaim, deactivate, invalidate or terminate your Referral Code at any time at PandAI sole discretion.\r\n\r\n3. Restrictions\r\n3.1 You may invite eligible individuals to become Clients of PandAI Earn services by distributing your Referral Code directly and instructing them to input your Referral Code during the sign-up process. Referral Codes should only be used for personal and non-commercial purposes. You must disclose that you are eligible to receive an Refferal Reward (defned below) in connection with a use of your Referral Code. You are prohibited from 'spamming' anyone with referral invitations.\r\n3.2 No spamming. You agree that you will not 'spam' anyone with invitations to join the PandAI Earn Platform. Further, you acknowledge and agree that the following activities are prohibited under these Refferal Program Terms: (a) mass emailing, texting or messaging people you do not personally know or otherwise engaging in any other promotion that would constitute or appear to constitute unsolicited commercial email or 'spam', (b) use of automated systems or bots through any channel to distribute, post or respond to your Referral Code, and (c) use of scripts, programmed or automatic dialers to send invites or to communicate a Referral Code. Without limiting the foregoing, you agree to comply with all local, state and federal laws and regulations governing your obligations under these Refferal Program Terms, including but not limited to all applicable laws that govern marketing emails, including the anti-spam laws.\r\n3.3 No Misrepresentations. You agree that you will not mislead or attempt to mislead anyone in connection with the Refferal Program, either by afrmative representation, implication, or omission. Further, you agree that you will not: \r\n(a) create fake webpages, profles, websites, or links, \r\n(b) misrepresent your relationship with PandAI or any other third party, including but not limited to suggesting an afliation or partnership exists with a third party where none exists,\r\n(c) make misleading claims about PandAI, including but not limited to misleading claims about the specifcations, features of functionality of the Services provided by PandAI or the Refferal Program,\r\n(d) act in an unfair or disruptive manner, or \r\ne) otherwise make any false or misleading statements to get a invitee to use your Referral Code. Further you agree that you will not undertake any deceptive or fraudulent methods to increase your Refferal Reward.\r\n3.4 Prohibited content. You agree that you will not use the PandAI brand in connection with: (a) disparaging or defamatory content concerning PandAI or third parties, involved in providing Services to you; (b) ofensive, abusive, intimidating or harassing content; or (c) content that violates the law or rights of anyone else.\r\n3.5 Using paid advertising with branded key-words. You agree that you will not use words such as \u201cpandai.io\u201d, \u201cPandAI Earn\u201d, \u201cpandai\u201d or any other look-alike, sound-alike, or other \u201cPandAI\u201c branded terms in your advertising materials. It is necessary to prevent any confusion with the ofcial Pandai.io   domains. Do not post your own PandAI referral link as advertisements on search engines such as Google, Bing, Baidu, etc.\r\n3.6 Sharing referral links using fake accounts. You agree that you will not create of use any fake webpages, profles in social media, making fraud actions or any other prohibited unlawful actions.\r\n\r\n4. Responsibilities\r\n4.1 You acknowledge that the purpose of the Refferal Program is to encourage new Users/Clients to the Site and Services. You agree to act in good faith in accordance with this intentions.\r\n4.2 You must comply with all applicable laws in connection with your activities under the Refferal Program, including when referring Users/Clients to the Site or Services.\r\n4.3 You should inform PandAI if you discover that any other third party makes fraud or other unlawful actions.\r\n4.4 You should be responsible for covering any damage caused to PandAI by any kind of unlawful action, caused by yourself or any third party who was provided a Referral Code by you.\r\n4.5 You are responsible for any costs or expenses associated with your activities referring Users to the Site or Services. You incur those costs and expenses entirely at your own risk.\r\n4.6 You must ensure that any statements you make in connection with referring Users/Clients to the Site or services are (i) professional, accurate, and truthful; (ii) not misleading or deceptive (for example, do not embellish the nature of your relationship with PandAI); and (iii) not ofensive, illegal or obscene.\r\n4.7 You agree not to engage in any electronic messaging that is prohibited by applicable laws, illegal solicitation, or fraudulent or deceptive solicitation.\r\n\r\n5. Rewards\r\n5.1 PandAI will transfer Rewards to your cryptocurrency wallet with a set percentage of fees on the transactions earned from the Clients using PandAI Earn services with your Referral Code. For clarity, those fees are the amounts actually collected from the Clients using services.\r\n5.2 There are two types of rewards in PandAI Earn\r\n- User Rewards derived from user's own deposit (defined in PandAI Earn Terms of use) and\r\n- Referral Rewards.\r\nReferral Rewards are derived from sum of deposited assets of users that joined PandAI Earn following given Referral Link, generates Monthly Gain g = 0.2% and comes with claim fee of 10%.\r\nLet's demonstrate how Referral Reward is calculated on one example.\r\n\r\nExample: Users that followed given Referral Link has deposited total D = $100,000. User that created the Referral Link returns in t = 3 months to claim his Referral Reward r, which is\r\nr = D * g * t = 100000 * 0.002 * 3 = $600\r\nThere's 10% Claim Fee so the user must pay 0.1\u00a0*\u00a0600\u00a0=\u00a0$60 in PandAI Token when claiming the referral reward (those PandAI Tokens are being burned).\r\n\r\n6. Statistics\r\n6.1 You can check the amount of the rewards you get on the PandAI Earn platform page. \r\n6.2 Information on the PandAI Earn platform page is updated in real-time.\r\n\r\n7. Relationship\r\n7.1 Both you and PandAI are independent contractors and nothing in this agreement will create any partnership, joint venture, franchise, sales representation, or employment relationship between you and PandAI.\r\n\r\n8. Non-exclusive\r\n8.1 The Refferal Program is not exclusive. Your participation in the Refferal Program does not grant you any additional right to use or continue to use the Site or Services.\r\n\r\n9. Changes\r\n9.1 PandAI may update or amend the Terms of Use, Refferal Program Terms, Site, Services, any Refferal Rewards, fees charged in connection with the Services or other elements of the transactions contemplated by these Refferal Program Terms at any time and from time to time (\u201cChanges\u201d). PandAI may make Changes for any reason or no reason. These Changes may make your participation in the Refferal Program more or less valuable to you and may result in you no longer being eligible to participate in the Refferal Program. Please be informed that your continued participation in the Refferal Program following a Change will constitute your binding acceptance of the Change.\r\n\r\n10. Liability\r\n10.1 In addition to the Limitation of Liability set out in the PandAI Earn Terms of Use, PandAI also assumes no liability or responsibility for and shall have no liability or responsibility for any losses directly or indirectly arising out of or related to:\r\n10.1.1 these Refferal Program Terms;\r\n10.1.2 the Refferal Program and your participation in it;\r\n10.1.3 any breach of these Refferal Program Terms;\r\n10.1.4 any failure by you to comply with applicable laws (including laws governing privacy or electronic messaging, disclosure laws, etc.); and\r\n10.1.5 any negligent or intentional acts or omissions by you.\r\n10.2 You hereby agree to release the PandAI from liability for any and all losses, and you shall indemnify and save and hold the PandAI harmless from and against all losses. The foregoing limitations of liability shall apply whether the alleged liability or losses are based on contract, negligence, tort, unjust enrichment, strict liability, violation of law or regulation, or any other basis, even if the PandAI have been advised of or should have known of the possibility of such losses and damages,\r\n\r\n11. Term\r\n11.1 These Refferal Program Terms will apply indefnitely after that, until your participation in the Refferal Program ends. If your participation in the Referal Program ends, all Refferal Rewards will end on the same date. These terms will continue to apply after your participation in the Refferal Program ends.\r\n11.2 The Terms of Use apply in their entirety to these Refferal Program Terms.\r\n\r\nContact us\r\nIf you have any questions relating to these Refferal Program Terms, your rights and obligations arising from it and/or your use of the Site and the Service, or any other matter, please, contact info@pandai.io\r\n\r\nPandAI Corp Ltd.\r\nAddress: House of Francis, Room 303, Ile du Port, Mahe, Seychelles\r\nWebsite: https://pandai.io/ \r\nEmail: info@pandai.com \r\n*/\r\npragma solidity 0.8.19;\r\n\r\n\r\n\r\n\r\ninterface IERC20Extended is IERC20 {\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IERC20Burnable is IERC20Extended {\r\n  function burnFrom(address account, uint amount) external;\r\n}\r\n\r\ncontract PandAIEarnV1 is AccessControl, Pausable {\r\n\r\n  IERC20Extended private immutable usdtToken;\r\n  IERC20Burnable private immutable pandaiToken;\r\n  \r\n  address private lpAddress;\r\n\r\n  bytes32 public constant UPDATER_ROLE = keccak256(\"UPDATER_ROLE\");\r\n  address private constant DEFAULT_REFERRAL = 0xeA51341bb930E2D8561ad2a4430873D6d18997BD;\r\n\r\n  uint private constant BASE_PERIOD = 1 days;                        // base period for time (mainnet: 1 day, devnet: minutes)\r\n  uint private constant WITHDRAW_PROCESSING_TIME = 14 * BASE_PERIOD; // user requests withdrawal -> 14 days waiting -> withdrawal can be executed\r\n  uint private constant INTEREST_PERIOD = 30 * BASE_PERIOD;          // period for Tier.monthlyGainBps\r\n  uint private constant DAILY_CLAIM_LIMIT = 1000;                    // daily claim limit of USDT for NotApproved users\r\n  uint private constant MIRIAD = 10000;                              // helper for divisor\r\n  uint private constant REFERRAL_MONTHLY_GAIN_BPS = 20;              // 0.2% reward for referrals\r\n  uint private constant REFERRAL_CLAIM_FEE_BPS = 1000;               // 10% referral claim fee\r\n  \r\n  /**\r\n    0: NotApproved (daily claim limit of $1000)\r\n    1: Approved (no daily limit)\r\n    2: Forbidden (claim forbidden)\r\n  */\r\n  enum ApprovalLevel{ NotApproved, Approved, Forbidden }\r\n\r\n  mapping(uint8 => Tier) private tierMap;\r\n  struct Tier {\r\n    uint16 minDeposit;\r\n    bool compoundInterest;     \r\n    \r\n    uint8 monthlyGainBps;\r\n    uint16 claimFeeBps;\r\n\r\n    uint lockupSeconds;\r\n    uint16 lockupBreachFeeBps;\r\n  }\r\n\r\n  mapping(address => User) private userMap;\r\n  struct User {\r\n    address referral;                  // referral address for this account\r\n    uint8 approvalLevel;               // approval level of this user (from ApprovalLevel enum)\r\n    \r\n    uint deposit;                      // usdt deposit of given user\r\n    uint lastDepositTimestamp;         // last time of usdt deposit\r\n    \r\n    uint withdrawRequestAmount;        // usdt user request to withdraw\r\n    uint withdrawPossibleTimestamp;    // time when the withdraw of requested amount can be done\r\n    \r\n    uint dailyClaim;                   // usdt user claimed today\r\n    uint totalClaim;                   // usdt user claimed in total\r\n    uint lastClaimTimestamp;           // last time when user called claim\r\n   \r\n    uint userPendingReward;            // user reward that hasn't been claimed because of deposit or request withdraw\r\n\r\n    uint referralDeposit;              // sum of usdt deposits of users bellow this user (in referral program)\r\n    uint referralPendingReward;        // pending referral reward (calculated in referralLastUpdateTimestamp)\r\n    uint referralLastUpdateTimestamp;  // time when referalPendingReward was updated \r\n  }\r\n\r\n  struct UserCalculated {\r\n    uint8 tier;\r\n\r\n    uint userPendingReward;\r\n    uint userPendingPandaiBurn;\r\n\r\n    uint referralPendingReward;\r\n    uint referralPendingPandaiBurn;\r\n\r\n    uint depositUnlockTimestamp;\r\n  }\r\n\r\n  event TreasuryWithdraw(uint usdtAmount);\r\n  event TreasuryDeposit(uint usdtAmount);\r\n  event LpAddressChanged(address indexed previousLp, address indexed newLp);\r\n  event ApprovalLevelChanged(address indexed userAddress, ApprovalLevel previousApprovalLevel, ApprovalLevel newApprovalLevel);\r\n\r\n  event UserDeposited(address indexed userAddress, uint usdtAmount);\r\n  event UserRequestedWithdraw(address indexed userAddress, uint usdtAmount);\r\n  event UserWithdrew(address indexed userAddress, uint usdtAmount);\r\n\r\n  event PandaiBurnedForUserRewardClaim(address indexed userAddress, uint pandaiAmount);\r\n  event PandaiBurnedForReferralRewardClaim(address indexed userAddress, uint pandaiAmount);\r\n  event PandaiBurnedForWithdrawFee(address indexed userAddress, uint pandaiAmount);\r\n  \r\n  event UserRewardClaimed(address indexed userAddress, uint usdtAmount);\r\n  event ReferralRewardClaimed(address indexed userAddress, uint usdtAmount);\r\n\r\n  constructor(address usdtTokenAddress, address pandaiTokenAddress) {\r\n    usdtToken = IERC20Extended(usdtTokenAddress);\r\n    pandaiToken = IERC20Burnable(pandaiTokenAddress);\r\n\r\n    tierMap[1] = Tier(  100, false, 100, 1000,   7 * BASE_PERIOD, 4000);\r\n    tierMap[2] = Tier(  500, false, 125,  900,  30 * BASE_PERIOD, 3500);\r\n    tierMap[3] = Tier( 1000, false, 150,  800,  60 * BASE_PERIOD, 3000);\r\n    tierMap[4] = Tier( 5000,  true, 180,  650,  90 * BASE_PERIOD, 2500);\r\n    tierMap[5] = Tier(10000,  true, 220,  500, 180 * BASE_PERIOD, 2000);\r\n\r\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n  }\r\n \r\n  /**\r\n    returns info about given user. Returns stored values (stored in mapping) and calculated values (contract calculates them from stored values)\r\n  */\r\n  function getUser(address userAddress) external view returns (User memory stored, UserCalculated memory calculated) {    \r\n    require(userAddress != address(0), \"empty address\");    \r\n\r\n    uint8 tier = getUserTier(userAddress);\r\n    uint userReward = userMap[msg.sender].userPendingReward + getNewUserReward(userAddress, tier);\r\n    uint referralReward = userMap[userAddress].referralPendingReward + getNewReferralReward(userAddress);\r\n    return (\r\n      userMap[userAddress],\r\n      UserCalculated(\r\n        tier,\r\n        userReward,\r\n        getUserRewardClaimFeePandai(userReward, tier),\r\n        referralReward,\r\n        getReferralRewardClaimFeePandai(referralReward),\r\n        getDepositUnlockTimestamp(userAddress, tier)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n    returns info about given tier.\r\n  */\r\n  function getTier(uint8 tier) external view returns (Tier memory) {\r\n    require(tier >= 1 && tier <= 5, \"invalid tier\");\r\n    return tierMap[tier];\r\n  }\r\n\r\n  /**\r\n    returns address of liquidty pool that swaps USDT and PANDAI. Used to define PANDAI price in USDT.\r\n  */\r\n  function getLpAddress() external view returns (address) {\r\n    return lpAddress;\r\n  }\r\n\r\n  /**\r\n    paused contract prohibits deposits\r\n  */\r\n  function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n    _pause();\r\n  }\r\n\r\n  /**\r\n    unpauses paused contract\r\n  */\r\n  function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n    _unpause();\r\n  }\r\n\r\n  /**\r\n    sets address for liquidity pool\r\n  */\r\n  function setLpAddress(address newLpAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n    require(newLpAddress != address(0), \"empty address\");\r\n    require(usdtToken.balanceOf(newLpAddress) > 0, \"no usdt in lp\");\r\n    require(pandaiToken.balanceOf(newLpAddress) > 0, \"no pandai in lp\");\r\n    \r\n    address oldLpAddress = lpAddress;\r\n    lpAddress = newLpAddress;\r\n    emit LpAddressChanged(oldLpAddress, newLpAddress);\r\n  }\r\n\r\n  /**\r\n    withdraws USDT from contract\r\n  */\r\n  function withdrawTreasury(uint usdtAmount) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n    require(usdtToken.transfer(msg.sender, usdtAmount), \"usdt transfer\");\r\n    emit TreasuryWithdraw(usdtAmount);\r\n  }\r\n\r\n  /**\r\n    deposits USDT from contract. USDT can be sent in ordinary transaction, this event is helpful to use as it produces event.\r\n  */\r\n  function depositTreasury(uint usdtAmount) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n    require(usdtToken.transferFrom(msg.sender, address(this), usdtAmount), \"usdt transfer\");\r\n    emit TreasuryDeposit(usdtAmount);\r\n  }\r\n\r\n  /**\r\n    sets ApprovalLevel of given address. \r\n  */\r\n  function setUserApprovalLevel(address userAddress, ApprovalLevel newApprovalLevel) external onlyRole(UPDATER_ROLE) {\r\n    ApprovalLevel oldApprovalLevel = ApprovalLevel(userMap[userAddress].approvalLevel);\r\n    userMap[userAddress].approvalLevel = uint8(newApprovalLevel);\r\n    emit ApprovalLevelChanged(userAddress, oldApprovalLevel, newApprovalLevel);\r\n  }\r\n\r\n  /**\r\n    deposits USDT, default referral is used\r\n  */\r\n  function deposit(uint usdtDepositAmount) external {\r\n    depositWithReferral(usdtDepositAmount, DEFAULT_REFERRAL);\r\n  }\r\n\r\n  /**\r\n    deposits USDT, referralAddress is used only if no referral is set for address making deposit (the first deposit of the address).\r\n  */\r\n  function depositWithReferral(uint usdtDepositAmount, address referralAddress) public whenNotPaused {\r\n    require(msg.sender == tx.origin, \"calls from contract disallowed\");\r\n    require(userMap[msg.sender].deposit + usdtDepositAmount >= tierMap[1].minDeposit * (10 ** usdtToken.decimals()), \"small deposit\");\r\n    require(referralAddress != address(0), \"invalid referral\");\r\n    require(referralAddress != msg.sender, \"invalid referral\");\r\n\r\n    // assign referral\r\n    if (userMap[msg.sender].referral == address(0)) {\r\n      userMap[msg.sender].referral = referralAddress;\r\n    }\r\n\r\n    // update user\r\n    uint8 tier = getUserTier(msg.sender);\r\n    if (tier > 0) {\r\n      userMap[msg.sender].userPendingReward += getNewUserReward(msg.sender, tier);\r\n    }\r\n\r\n    userMap[msg.sender].deposit += usdtDepositAmount;\r\n    userMap[msg.sender].lastDepositTimestamp = block.timestamp;\r\n    if (!isToday(userMap[msg.sender].lastClaimTimestamp)) {\r\n      userMap[msg.sender].dailyClaim = 0;\r\n    }\r\n    userMap[msg.sender].lastClaimTimestamp = block.timestamp;\r\n    \r\n    // update referral\r\n    uint newReferralReward = getNewReferralReward(userMap[msg.sender].referral);\r\n    userMap[userMap[msg.sender].referral].referralDeposit += usdtDepositAmount;\r\n    userMap[userMap[msg.sender].referral].referralPendingReward += newReferralReward;\r\n    userMap[userMap[msg.sender].referral].referralLastUpdateTimestamp = block.timestamp;\r\n    \r\n    // transfer USDT\r\n    require(usdtToken.transferFrom(msg.sender, address(this), usdtDepositAmount), \"usdt transfer\");\r\n    emit UserDeposited(msg.sender, usdtDepositAmount);\r\n  }\r\n\r\n  /**\r\n    requests USDT withdraw. USDTs will be available for withdraw (other method) after WITHDRAW_PROCESSING_TIME.\r\n    In case there's already a withdraw pending, it's increased by usdtWithdrawAmount and WITHDRAW_PROCESSING_TIME is reset.\r\n  */\r\n  function requestWithdraw(uint usdtWithdrawAmount) external {\r\n    require(msg.sender == tx.origin, \"calls from contract disallowed\");\r\n    require(usdtWithdrawAmount <= userMap[msg.sender].deposit, \"withdraw bigger than deposit\");\r\n    if (usdtWithdrawAmount < userMap[msg.sender].deposit) {\r\n      require(userMap[msg.sender].deposit - usdtWithdrawAmount >= tierMap[1].minDeposit * (10 ** usdtToken.decimals()), \"small deposit remaining\");\r\n    }\r\n\r\n    uint8 tier = getUserTier(msg.sender);\r\n    require(tier > 0, \"invalid tier\");\r\n\r\n    // if withdraw is called before lockup, there's a fee paid in PANDAI\r\n    uint withdrawFeePandai;\r\n    if (getDepositUnlockTimestamp(msg.sender, tier) > block.timestamp) {\r\n      withdrawFeePandai = getPandaiWorthOf(usdtWithdrawAmount * tierMap[tier].lockupBreachFeeBps / MIRIAD);\r\n\r\n      require(pandaiToken.balanceOf(msg.sender) >= withdrawFeePandai, \"pandai balance\");\r\n      require(pandaiToken.allowance(msg.sender, address(this)) >= withdrawFeePandai, \"pandai allowance\");\r\n    }\r\n\r\n    // update user\r\n    userMap[msg.sender].userPendingReward += getNewUserReward(msg.sender, tier);\r\n    if (!isToday(userMap[msg.sender].lastClaimTimestamp)) {\r\n      userMap[msg.sender].dailyClaim = 0;\r\n    }\r\n    userMap[msg.sender].lastClaimTimestamp = block.timestamp;\r\n\r\n    userMap[msg.sender].deposit -= usdtWithdrawAmount;\r\n    userMap[msg.sender].withdrawRequestAmount += usdtWithdrawAmount;\r\n    userMap[msg.sender].withdrawPossibleTimestamp = block.timestamp + WITHDRAW_PROCESSING_TIME;\r\n    \r\n    // update referral\r\n    userMap[userMap[msg.sender].referral].referralPendingReward += getNewReferralReward(userMap[msg.sender].referral);\r\n    userMap[userMap[msg.sender].referral].referralDeposit -= usdtWithdrawAmount;\r\n    userMap[userMap[msg.sender].referral].referralLastUpdateTimestamp = block.timestamp;\r\n\r\n    // if needed, burn PANDAI\r\n    if (withdrawFeePandai > 0) {\r\n      pandaiToken.burnFrom(msg.sender, withdrawFeePandai);\r\n      emit PandaiBurnedForWithdrawFee(msg.sender, withdrawFeePandai);\r\n    }\r\n    emit UserRequestedWithdraw(msg.sender, usdtWithdrawAmount);\r\n  }\r\n\r\n  /**\r\n    withdraws requested amount of USDT\r\n  */\r\n  function withdraw() external {\r\n    require(userMap[msg.sender].withdrawRequestAmount > 0, \"no withdraw requested\");\r\n    require(userMap[msg.sender].withdrawPossibleTimestamp <= block.timestamp, \"withdraw not possible yet\");\r\n\r\n    // update user\r\n    uint usdtWithdrawAmount = userMap[msg.sender].withdrawRequestAmount;\r\n    userMap[msg.sender].withdrawRequestAmount = 0;\r\n    userMap[msg.sender].withdrawPossibleTimestamp = 0;\r\n\r\n    // transfer USDT\r\n    require(usdtToken.transfer(msg.sender, usdtWithdrawAmount), \"usdt transfer\");\r\n    emit UserWithdrew(msg.sender, usdtWithdrawAmount);\r\n  }\r\n\r\n  /**\r\n    claims user reward (derived from it's own deposit) and\r\n    referral reward (derived from deposits of users with referral being the caller)\r\n  */\r\n  function claim() external whenNotPaused {\r\n    require(msg.sender == tx.origin, \"calls from contract disallowed\");\r\n\r\n    uint8 tier = getUserTier(msg.sender);\r\n    uint userClaimUsdt = userMap[msg.sender].userPendingReward + getNewUserReward(msg.sender, tier);\r\n    uint referralClaimUsdt = userMap[msg.sender].referralPendingReward + getNewReferralReward(msg.sender);\r\n    require(userClaimUsdt + referralClaimUsdt > 0, \"empty claim\");\r\n    require(canClaim(msg.sender, userClaimUsdt + referralClaimUsdt), \"user cannot claim\");\r\n    \r\n    uint userClaimFeePandai = getUserRewardClaimFeePandai(userClaimUsdt, tier);\r\n    uint referralClaimFeePandai = getReferralRewardClaimFeePandai(referralClaimUsdt);\r\n    require(pandaiToken.balanceOf(msg.sender) >= userClaimFeePandai + referralClaimFeePandai, \"pandai balance\");\r\n    require(pandaiToken.allowance(msg.sender, address(this)) >= userClaimFeePandai + referralClaimFeePandai, \"pandai allowance\");\r\n\r\n    // update user\r\n    userMap[msg.sender].userPendingReward = 0;\r\n    if (isToday(userMap[msg.sender].lastClaimTimestamp)) {\r\n      userMap[msg.sender].dailyClaim += userClaimUsdt + referralClaimUsdt;\r\n    } else {\r\n      userMap[msg.sender].dailyClaim = userClaimUsdt + referralClaimUsdt;\r\n    }\r\n    userMap[msg.sender].totalClaim += userClaimUsdt + referralClaimUsdt;\r\n    userMap[msg.sender].lastClaimTimestamp = block.timestamp;\r\n\r\n    // update referral\r\n    userMap[msg.sender].referralPendingReward = 0;\r\n    userMap[msg.sender].referralLastUpdateTimestamp = block.timestamp;\r\n\r\n    // transfer USDT, burn PANDAI\r\n    require(usdtToken.transfer(msg.sender, userClaimUsdt + referralClaimUsdt), \"usdt transfer\");\r\n    pandaiToken.burnFrom(msg.sender, userClaimFeePandai + referralClaimFeePandai);\r\n    if (userClaimUsdt > 0) {\r\n      emit UserRewardClaimed(msg.sender, userClaimUsdt);\r\n      emit PandaiBurnedForUserRewardClaim(msg.sender, userClaimFeePandai);\r\n    }\r\n    if (referralClaimUsdt > 0) {\r\n      emit ReferralRewardClaimed(msg.sender, referralClaimUsdt);\r\n      emit PandaiBurnedForReferralRewardClaim(msg.sender, referralClaimFeePandai);\r\n    }\r\n  }\r\n\r\n  /**\r\n    checks whether given user is able claiming given amount of usdt. Depends on user approvalLevel and his dailyClaim\r\n  */\r\n  function canClaim(address userAddress, uint claimUsdt) private view returns (bool) {\r\n    ApprovalLevel approvalLevel = ApprovalLevel(userMap[userAddress].approvalLevel);\r\n    if (approvalLevel == ApprovalLevel.Approved) {\r\n      return true;\r\n    } else if (approvalLevel == ApprovalLevel.Forbidden) {\r\n      return false;\r\n    }\r\n    if (isToday(userMap[userAddress].lastClaimTimestamp)) {\r\n      claimUsdt += userMap[userAddress].dailyClaim;\r\n    }\r\n    return claimUsdt / (10 ** usdtToken.decimals()) <= DAILY_CLAIM_LIMIT;\r\n  }\r\n\r\n  /**\r\n    simple check whether given timestamp falls into same day\r\n  */\r\n  function isToday(uint timestamp) private view returns (bool) {\r\n    return block.timestamp / BASE_PERIOD == timestamp / BASE_PERIOD;\r\n  }\r\n\r\n  /**\r\n    converts USDT into pandai according to current price in the liquity pool\r\n  */\r\n  function getPandaiWorthOf(uint usdtAmount) private view returns (uint) {\r\n    if (usdtAmount == 0) {\r\n      return 0;\r\n    }\r\n    uint usdtInLp = usdtToken.balanceOf(lpAddress);\r\n    uint pandaiInLp = pandaiToken.balanceOf(lpAddress);\r\n    require (usdtInLp * pandaiInLp > 0, \"empty lp\");\r\n\r\n    return usdtAmount * pandaiInLp / usdtInLp;\r\n  }\r\n\r\n  /**\r\n    gets user tier from his deposit\r\n  */\r\n  function getUserTier(address userAddress) private view returns (uint8) {\r\n    uint userDeposit = userMap[userAddress].deposit / (10 ** usdtToken.decimals());\r\n    for (uint8 i = 5; i >= 1; i--) {\r\n      if (userDeposit >= tierMap[i].minDeposit) {\r\n        return i;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n    claculates user reward that follows eiterh simple or compounc interest. \r\n    In case of compound iterest, the calculatio follows taylor series for exponential\r\n  */\r\n  function getNewUserReward(address userAddress, uint8 userTier) private view returns (uint) {\r\n    if (userTier == 0) {\r\n      return 0;\r\n    }\r\n    uint g = tierMap[userTier].monthlyGainBps;\r\n    uint t = block.timestamp - userMap[userAddress].lastClaimTimestamp;\r\n    uint f1 = userMap[userAddress].deposit * g * t / MIRIAD / INTEREST_PERIOD;\r\n    if (!tierMap[userTier].compoundInterest) {\r\n      return f1;\r\n    }\r\n    uint f2 = f1 * g * t / MIRIAD / INTEREST_PERIOD / 2;\r\n    uint f3 = f2 * g * t / MIRIAD / INTEREST_PERIOD / 3;\r\n    return f1 + f2 + f3;\r\n  }\r\n\r\n  /**\r\n    how much PANDAI user in given tier should burn when claiming given user reward\r\n  */\r\n  function getUserRewardClaimFeePandai(uint userRewardUsdt, uint8 userTier) private view returns (uint) {\r\n    if (userTier == 0) { // user withdrew everything\r\n      userTier = 1;\r\n    }\r\n    return getPandaiWorthOf(userRewardUsdt * tierMap[userTier].claimFeeBps / MIRIAD);\r\n  }\r\n\r\n  /**\r\n    calculates referral reward from time when the reward has been updated the last\r\n  */\r\n  function getNewReferralReward(address userAddress) private view returns (uint) {\r\n    uint t = block.timestamp - userMap[userAddress].referralLastUpdateTimestamp;\r\n    return userMap[userAddress].referralDeposit * REFERRAL_MONTHLY_GAIN_BPS * t / MIRIAD / INTEREST_PERIOD;\r\n  }\r\n\r\n  /**\r\n    how much PANDAI user should burn when claiming given referral reward \r\n  */\r\n  function getReferralRewardClaimFeePandai(uint referralRewardUsdt) private view returns (uint) {\r\n    return getPandaiWorthOf(referralRewardUsdt * REFERRAL_CLAIM_FEE_BPS / MIRIAD);\r\n  }\r\n\r\n  /**\r\n    timestamp when it's no longer required to burn PANDAI when requesting withdraw\r\n  */\r\n  function getDepositUnlockTimestamp(address userAddress, uint8 userTier) private view returns (uint) {\r\n    if (userTier == 0) {\r\n      return 0;\r\n    }\r\n    return userMap[userAddress].lastDepositTimestamp + tierMap[userTier].lockupSeconds;\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pandaiTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum PandAIEarnV1.ApprovalLevel\",\"name\":\"previousApprovalLevel\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum PandAIEarnV1.ApprovalLevel\",\"name\":\"newApprovalLevel\",\"type\":\"uint8\"}],\"name\":\"ApprovalLevelChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousLp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLp\",\"type\":\"address\"}],\"name\":\"LpAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pandaiAmount\",\"type\":\"uint256\"}],\"name\":\"PandaiBurnedForReferralRewardClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pandaiAmount\",\"type\":\"uint256\"}],\"name\":\"PandaiBurnedForUserRewardClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pandaiAmount\",\"type\":\"uint256\"}],\"name\":\"PandaiBurnedForWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"ReferralRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"TreasuryDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"TreasuryWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"UserDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"UserRequestedWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"UserRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"UserWithdrew\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtDepositAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"depositTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"}],\"name\":\"depositWithReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"getTier\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"minDeposit\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"compoundInterest\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"monthlyGainBps\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"claimFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"lockupSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"lockupBreachFeeBps\",\"type\":\"uint16\"}],\"internalType\":\"struct PandAIEarnV1.Tier\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"approvalLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawRequestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawPossibleTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userPendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralPendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralLastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct PandAIEarnV1.User\",\"name\":\"stored\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"userPendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userPendingPandaiBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralPendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralPendingPandaiBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositUnlockTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct PandAIEarnV1.UserCalculated\",\"name\":\"calculated\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtWithdrawAmount\",\"type\":\"uint256\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLpAddress\",\"type\":\"address\"}],\"name\":\"setLpAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"enum PandAIEarnV1.ApprovalLevel\",\"name\":\"newApprovalLevel\",\"type\":\"uint8\"}],\"name\":\"setUserApprovalLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PandAIEarnV1", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000550d7984b7adfff88815e5528e12e322df6d3b9b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6c3cb9bff30801179710b221919001c49beddc9f6236ba10e5df7edb7b354f32"}