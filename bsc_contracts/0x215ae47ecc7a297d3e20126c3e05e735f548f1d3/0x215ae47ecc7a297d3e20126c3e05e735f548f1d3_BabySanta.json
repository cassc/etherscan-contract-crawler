{"SourceCode": "/**\r\n\r\n\r\nBaby Santa is working over time on the BSC. Join the giving revolution, earn BUSD rewards, compound reward earnings and give back this holiday season and beyond.\r\n\r\nbabysantatoken.com\r\nhttps://t.me/babysantatoken\r\nhttps://www.facebook.com/Baby-Santa-101677595665401/\r\nhttps://twitter.com/babysantabsc\r\n\r\n*/\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\nlibrary SafeMathInt {\r\n\tint256 private constant MIN_INT256 = int256(1) << 255;\r\n\tint256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n\tfunction mul(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a * b;\r\n\r\n\t\t// Detect overflow when multiplying MIN_INT256 with -1\r\n\t\trequire(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n\t\trequire((b == 0) || (c / b == a));\r\n\t\treturn c;\r\n\t}\r\n\tfunction div(int256 a, int256 b) internal pure returns (int256) {\r\n\t\t// Prevent overflow when dividing MIN_INT256 by -1\r\n\t\trequire(b != -1 || a != MIN_INT256);\r\n\r\n\t\t// Solidity already throws when dividing by 0.\r\n\t\treturn a / b;\r\n\t}\r\n\tfunction sub(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a - b;\r\n\t\trequire((b >= 0 && c <= a) || (b < 0 && c > a));\r\n\t\treturn c;\r\n\t}\r\n\tfunction add(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a + b;\r\n\t\trequire((b >= 0 && c >= a) || (b < 0 && c < a));\r\n\t\treturn c;\r\n\t}\r\n\tfunction abs(int256 a) internal pure returns (int256) {\r\n\t\trequire(a != MIN_INT256);\r\n\t\treturn a < 0 ? -a : a;\r\n\t}\r\n\tfunction toUint256Safe(int256 a) internal pure returns (uint256) {\r\n\t\trequire(a >= 0);\r\n\t\treturn uint256(a);\r\n\t}\r\n}\r\n\r\nlibrary SafeMathUint {\r\n\tfunction toInt256Safe(uint256 a) internal pure returns (int256) {\r\n\t\tint256 b = int256(a);\r\n\t\trequire(b >= 0);\r\n\t\treturn b;\r\n\t}\r\n}\r\n\r\nlibrary IterableMapping {\r\n\tstruct Map {\r\n\t\taddress[] keys;\r\n\t\tmapping(address => uint) values;\r\n\t\tmapping(address => uint) indexOf;\r\n\t\tmapping(address => bool) inserted;\r\n\t}\r\n\r\n\tfunction get(Map storage map, address key) public view returns (uint) {\r\n\t\treturn map.values[key];\r\n\t}\r\n\r\n\tfunction getIndexOfKey(Map storage map, address key) public view returns (int) {\r\n\t\tif(!map.inserted[key]) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\treturn int(map.indexOf[key]);\r\n\t}\r\n\r\n\tfunction getKeyAtIndex(Map storage map, uint index) public view returns (address) {\r\n\t\treturn map.keys[index];\r\n\t}\r\n\r\n\tfunction size(Map storage map) public view returns (uint) {\r\n\t\treturn map.keys.length;\r\n\t}\r\n\r\n\tfunction set(Map storage map, address key, uint val) public {\r\n\t\tif (map.inserted[key]) {\r\n\t\t\tmap.values[key] = val;\r\n\t\t} else {\r\n\t\t\tmap.inserted[key] = true;\r\n\t\t\tmap.values[key] = val;\r\n\t\t\tmap.indexOf[key] = map.keys.length;\r\n\t\t\tmap.keys.push(key);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction remove(Map storage map, address key) public {\r\n\t\tif (!map.inserted[key]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdelete map.inserted[key];\r\n\t\tdelete map.values[key];\r\n\r\n\t\tuint index = map.indexOf[key];\r\n\t\tuint lastIndex = map.keys.length - 1;\r\n\t\taddress lastKey = map.keys[lastIndex];\r\n\r\n\t\tmap.indexOf[lastKey] = index;\r\n\t\tdelete map.indexOf[key];\r\n\r\n\t\tmap.keys[index] = lastKey;\r\n\t\tmap.keys.pop();\r\n\t}\r\n}\r\n\r\n contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor () public {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n\tfunction feeTo() external view returns (address);\r\n\tfunction feeToSetter() external view returns (address);\r\n\r\n\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\tfunction allPairs(uint) external view returns (address pair);\r\n\tfunction allPairsLength() external view returns (uint);\r\n\r\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\tfunction setFeeTo(address) external;\r\n\tfunction setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n\tfunction factory() external pure returns (address);\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint amountADesired,\r\n\t\tuint amountBDesired,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountA, uint amountB, uint liquidity);\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint amountTokenDesired,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\tfunction removeLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint liquidity,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountA, uint amountB);\r\n\tfunction removeLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountToken, uint amountETH);\r\n\tfunction removeLiquidityWithPermit(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint liquidity,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline,\r\n\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\t) external returns (uint amountA, uint amountB);\r\n\tfunction removeLiquidityETHWithPermit(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline,\r\n\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\t) external returns (uint amountToken, uint amountETH);\r\n\tfunction swapExactTokensForTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n\tfunction swapTokensForExactTokens(\r\n\t\tuint amountOut,\r\n\t\tuint amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\texternal\r\n\tpayable\r\n\treturns (uint[] memory amounts);\r\n\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n\texternal\r\n\treturns (uint[] memory amounts);\r\n\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\texternal\r\n\treturns (uint[] memory amounts);\r\n\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n\texternal\r\n\tpayable\r\n\treturns (uint[] memory amounts);\r\n\r\n\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountETH);\r\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline,\r\n\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\t) external returns (uint amountETH);\r\n\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external payable;\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\r\n\tfunction name() external pure returns (string memory);\r\n\tfunction symbol() external pure returns (string memory);\r\n\tfunction decimals() external pure returns (uint8);\r\n\tfunction totalSupply() external view returns (uint);\r\n\tfunction balanceOf(address owner) external view returns (uint);\r\n\tfunction allowance(address owner, address spender) external view returns (uint);\r\n\r\n\tfunction approve(address spender, uint value) external returns (bool);\r\n\tfunction transfer(address to, uint value) external returns (bool);\r\n\tfunction transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\tfunction nonces(address owner) external view returns (uint);\r\n\r\n\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n\tevent Mint(address indexed sender, uint amount0, uint amount1);\r\n\tevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n\tevent Swap(\r\n\t\taddress indexed sender,\r\n\t\tuint amount0In,\r\n\t\tuint amount1In,\r\n\t\tuint amount0Out,\r\n\t\tuint amount1Out,\r\n\t\taddress indexed to\r\n\t);\r\n\tevent Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\tfunction factory() external view returns (address);\r\n\tfunction token0() external view returns (address);\r\n\tfunction token1() external view returns (address);\r\n\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\tfunction price0CumulativeLast() external view returns (uint);\r\n\tfunction price1CumulativeLast() external view returns (uint);\r\n\tfunction kLast() external view returns (uint);\r\n\tfunction mint(address to) external returns (uint liquidity);\r\n\tfunction burn(address to) external returns (uint amount0, uint amount1);\r\n\tfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\tfunction skim(address to) external;\r\n\tfunction sync() external;\r\n\tfunction initialize(address, address) external;\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) private _balances;\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\r\n\tconstructor(string memory name_, string memory symbol_) public {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view virtual override returns (uint8) {\r\n\t\treturn 18;\r\n\t}\r\n\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view virtual override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public virtual override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\t\t_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\t\t_balances[account] = _balances[account].add(amount);\r\n\t\temit Transfer(address(0), account, amount);\r\n\t}\r\n\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\t\t_beforeTokenTransfer(account, address(0), amount);\r\n\t\t_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\temit Transfer(account, address(0), amount);\r\n\t}\r\n\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n}\r\n\r\ninterface DividendPayingTokenInterface {\r\n\tfunction dividendOf(address _owner) external view returns(uint256);\r\n\tfunction distributeDividends() external payable;\r\n\tfunction withdrawDividend() external;\r\n\tevent DividendsDistributed(\r\n\t\taddress indexed from,\r\n\t\tuint256 weiAmount\r\n\t);\r\n\tevent DividendWithdrawn(\r\n\t\taddress indexed to,\r\n\t\tuint256 weiAmount\r\n\t);\r\n}\r\n\r\ninterface DividendPayingTokenOptionalInterface {\r\n\tfunction withdrawableDividendOf(address _owner) external view returns(uint256);\r\n\tfunction withdrawnDividendOf(address _owner) external view returns(uint256);\r\n\tfunction accumulativeDividendOf(address _owner) external view returns(uint256);\r\n}\r\n\r\n/// @title Dividend-Paying Token\r\n/// @author Roger Wu (https://github.com/roger-wu)\r\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute ether\r\n///  to token holders as dividends and allows token holders to withdraw their dividends.\r\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\r\ncontract DividendPayingToken is ERC20, Ownable, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeMathUint for uint256;\r\n\tusing SafeMathInt for int256;\r\n\r\n\t// With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\r\n\t// For more discussion about choosing the value of `magnitude`,\r\n\t//  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n\tuint256 constant internal magnitude = 2**128;\r\n\tuint256 internal magnifiedDividendPerShare;\r\n\tuint256 public totalDividendsDistributed;\r\n\taddress public rewardToken;\r\n\tIUniswapV2Router02 public uniswapV2Router;\r\n\r\n\t// About dividendCorrection:\r\n\t// If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\r\n\t//   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\r\n\t// When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\r\n\t//   `dividendOf(_user)` should not be changed,\r\n\t//   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\r\n\t// To keep the `dividendOf(_user)` unchanged, we add a correction term:\r\n\t//   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\r\n\t//   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\r\n\t//   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\r\n\t// So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\r\n\tmapping(address => int256) internal magnifiedDividendCorrections;\r\n\tmapping(address => uint256) internal withdrawnDividends;\r\n\r\n\tconstructor(string memory _name, string memory _symbol) public ERC20(_name, _symbol) {}\r\n\r\n\treceive() external payable {\r\n\t\tdistributeDividends();\r\n\t}\r\n\t/// @notice Distributes ether to token holders as dividends.\r\n\t/// @dev It reverts if the total supply of tokens is 0.\r\n\t/// It emits the `DividendsDistributed` event if the amount of received ether is greater than 0.\r\n\t/// About undistributed ether:\r\n\t///   In each distribution, there is a small amount of ether not distributed,\r\n\t///     the magnified amount of which is\r\n\t///     `(msg.value * magnitude) % totalSupply()`.\r\n\t///   With a well-chosen `magnitude`, the amount of undistributed ether\r\n\t///     (de-magnified) in a distribution can be less than 1 wei.\r\n\t///   We can actually keep track of the undistributed ether in a distribution\r\n\t///     and try to distribute it in the next distribution,\r\n\t///     but keeping track of such data on-chain costs much more than\r\n\t///     the saved ether, so we don't do that.\r\n\r\n\tfunction distributeDividends() public override onlyOwner payable {\r\n\t\trequire(totalSupply() > 0);\r\n\t\tif (msg.value > 0) {\r\n\t\t\tmagnifiedDividendPerShare = magnifiedDividendPerShare.add((msg.value).mul(magnitude) / totalSupply());\r\n\t\t\temit DividendsDistributed(msg.sender, msg.value);\r\n\t\t\ttotalDividendsDistributed = totalDividendsDistributed.add(msg.value);\r\n\t\t}\r\n\t}\r\n\tfunction withdrawDividend() public virtual override onlyOwner {\r\n\t\t_withdrawDividendOfUser(payable(msg.sender));\r\n\t}\r\n\tfunction _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n\t\tuint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n\t\tif (_withdrawableDividend > 0) {\r\n\t\t\twithdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n\t\t\temit DividendWithdrawn(user, _withdrawableDividend);\r\n\t\t\tif (rewardToken == address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c)) {\r\n\t\t\t(bool success,) = user.call{value: _withdrawableDividend, gas: 3000}(\"\");\r\n\t\t\t\tif(!success) {\r\n\t\t\t\t\twithdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t\treturn _withdrawableDividend;\r\n\t\t\t} else {\r\n\t\t\t\treturn swapBNBForTokensAndWithdrawDividend(user, _withdrawableDividend);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\tfunction swapBNBForTokensAndWithdrawDividend(address holder, uint256 bnbAmount) private returns(uint256) {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = uniswapV2Router.WETH();\r\n\t\tpath[1] = address(rewardToken);\r\n\r\n\t\ttry uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value : bnbAmount}(\r\n\t\t\t0, // accept any amount of tokens\r\n\t\t\tpath,\r\n\t\t\taddress(holder),\r\n\t\t\tblock.timestamp\r\n\t\t) {\r\n\t\t\treturn bnbAmount;\r\n\t\t} catch {\r\n\t\t\twithdrawnDividends[holder] = withdrawnDividends[holder].sub(bnbAmount);\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\tfunction dividendOf(address _owner) public view override returns(uint256) {\r\n\t\treturn withdrawableDividendOf(_owner);\r\n\t}\r\n\tfunction withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n\t\treturn accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n\t}\r\n\tfunction withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n\t\treturn withdrawnDividends[_owner];\r\n\t}\r\n\tfunction accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n\t\treturn magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n\t\t.add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n\t}\r\n\tfunction _transfer(address from, address to, uint256 value) internal virtual override {\r\n\t\trequire(false);\r\n\t\tint256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n\t\tmagnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n\t\tmagnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n\t}\r\n\tfunction _mint(address account, uint256 value) internal override {\r\n\t\tsuper._mint(account, value);\r\n\t\tmagnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n\t\t.sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n\t}\r\n\tfunction _burn(address account, uint256 value) internal override {\r\n\t\tsuper._burn(account, value);\r\n\t\tmagnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n\t\t.add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n\t}\r\n\tfunction _setBalance(address account, uint256 newBalance) internal {\r\n\t\tuint256 currentBalance = balanceOf(account);\r\n\t\tif(newBalance > currentBalance) {\r\n\t\t\tuint256 mintAmount = newBalance.sub(currentBalance);\r\n\t\t\t_mint(account, mintAmount);\r\n\t\t} else if(newBalance < currentBalance) {\r\n\t\t\tuint256 burnAmount = currentBalance.sub(newBalance);\r\n\t\t\t_burn(account, burnAmount);\r\n\t\t}\r\n\t}\r\n\tfunction _setRewardToken(address token) internal onlyOwner {\r\n\t\trewardToken = token;\r\n\t}\r\n\tfunction _setUniswapRouter(address router) internal onlyOwner {\r\n\t\tuniswapV2Router = IUniswapV2Router02(router);\r\n\t}\r\n}\r\n\r\ncontract BabySanta is ERC20, Ownable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tIUniswapV2Router02 public uniswapV2Router;\r\n\taddress public immutable uniswapV2Pair;\r\n\r\n\tstring private _name = \"BABY SANTA TOKEN v2\";\r\n\tstring private _symbol = \"BSTv2\";\r\n\tuint8 private _decimals = 18;\r\n\r\n\tBabySantaDividendTracker public dividendTracker;\r\n\r\n\tbool public isTradingEnabled;\r\n\tuint256 private _tradingPausedTimestamp;\r\n\r\n\t// initialSupply\r\n\tuint256 constant initialSupply = 1000000000000000 * (10**18);\r\n\r\n\t// max wallet is 1.5% of initialSupply\r\n\tuint256 public maxWalletAmount = initialSupply * 150 / 10000;\r\n\t// max buy and sell tx is 0.25% of initialSupply\r\n\tuint256 public maxTxAmount = initialSupply * 25 / 10000;\r\n\r\n\tbool private _swapping;\r\n\tuint256 public minimumTokensBeforeSwap = 250000000000 * (10**18);\r\n\tuint256 public gasForProcessing = 300000;\r\n\r\n\taddress public dividendToken = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; //BUSD\r\n\taddress public stakingAddress = 0x3FcAdCF79085ABeEb03CD935402AdF01b2954e86;\r\n\r\n\taddress public marketingWallet = 0x586e3b22789d8f9CbD934A86b3b81695100a1A4f;\r\n\taddress public liquidityWallet = 0xc9BAC6113e0De9df87C6fF0c22BF0620E4dbe9f7;\r\n\taddress public buyBackWallet = 0x3FcAdCF79085ABeEb03CD935402AdF01b2954e86;\r\n\r\n\tstruct CustomTaxPeriod {\r\n\tbytes23 periodName;\r\n\tuint8 blocksInPeriod;\r\n\tuint256 timeInPeriod;\r\n\tuint256 liquidityFeeOnBuy;\r\n\tuint256 liquidityFeeOnSell;\r\n\tuint256 marketingFeeOnBuy;\r\n\tuint256 marketingFeeOnSell;\r\n\tuint256 buyBackFeeOnBuy;\r\n\tuint256 buyBackFeeOnSell;\r\n\tuint256 stakingFeeOnBuy;\r\n\tuint256 stakingFeeOnSell;\r\n\tuint256 holdersFeeOnBuy;\r\n\tuint256 holdersFeeOnSell;\r\n\t}\r\n\r\n\t// Launch taxes\r\n\tbool private _isLanched;\r\n\tuint256 private _launchStartTimestamp;\r\n\tuint256 private _launchBlockNumber;\r\n\tCustomTaxPeriod private _launch1 = CustomTaxPeriod('launch1',3,0,1,100,2,0,1,0,1,0,5,0);\r\n\tCustomTaxPeriod private _launch2 = CustomTaxPeriod('launch2',0,3600,1,5,2,10,1,5,1,5,5,5);\r\n\tCustomTaxPeriod private _launch3 = CustomTaxPeriod('launch3',0,82800,1,5,2,5,1,0,1,5,5,5);\r\n\r\n\t// Base taxes\r\n\tCustomTaxPeriod private _default = CustomTaxPeriod('default',0,0,1,1,2,2,1,1,1,1,5,5);\r\n\tCustomTaxPeriod private _base = CustomTaxPeriod('default',0,0,1,1,2,2,1,1,1,1,5,5);\r\n\r\n\t// Charity Hour taxes\r\n\tuint256 private _charityHourStartTimestamp;\r\n\tCustomTaxPeriod private _charity1 = CustomTaxPeriod('santa1',0,3600,0,3,0,10,0,2,0,5,3,10);\r\n\tCustomTaxPeriod private _charity2 = CustomTaxPeriod('santa2',0,3600,1,3,2,5,1,2,1,5,5,5);\r\n\r\n\tuint256 private _blockedTimeLimit = 172800;\r\n\tmapping (address => bool) private _isExcludedFromFee;\r\n\tmapping (address => bool) private _isExcludedFromMaxTransactionLimit;\r\n\tmapping (address => bool) private _isExcludedFromMaxWalletLimit;\r\n\tmapping (address => bool) private _isBlocked;\r\n\tmapping (address => bool) public automatedMarketMakerPairs;\r\n\tmapping (address => uint256) private _buyTimesInLaunch;\r\n\r\n\tuint256 private _liquidityFee;\r\n\tuint256 private _marketingFee;\r\n\tuint256 private _buyBackFee;\r\n\tuint256 private _stakingFee;\r\n\tuint256 private _holdersFee;\r\n\tuint256 private _totalFee;\r\n\r\n\tevent AutomatedMarketMakerPairChange(address indexed pair, bool indexed value);\r\n\tevent DividendTrackerChange(address indexed newAddress, address indexed oldAddress);\r\n\tevent UniswapV2RouterChange(address indexed newAddress, address indexed oldAddress);\r\n\tevent ExcludeFromFeesChange(address indexed account, bool isExcluded);\r\n\tevent WalletChange(string indexed indentifier, address indexed newWallet, address indexed oldWallet);\r\n\tevent StakingAddressChange(address indexed newStakingAddress, address indexed oldStakingAddress);\r\n\tevent GasForProcessingChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n\tevent FeeChange(string indexed identifier, uint256 liquidityFee, uint256 marketingFee, uint256 buyBackFee, uint256 stakingFee, uint256 holdersFee);\r\n\tevent CustomTaxPeriodChange(uint256 indexed newValue, uint256 indexed oldValue, string indexed taxType, bytes23 period);\r\n\tevent BlockedAccountChange(address indexed holder, bool indexed status);\r\n\tevent CharityHourChange(bool indexed newValue, bool indexed oldValue);\r\n\tevent MaxTransactionAmountChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n\tevent MaxWalletAmountChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n\tevent MinTokenAmountBeforeSwapChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n\tevent ExcludeFromMaxTransferChange(address indexed account, bool isExcluded);\r\n\tevent ExcludeFromMaxWalletChange(address indexed account, bool isExcluded);\r\n\tevent MinTokenAmountForDividendsChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n\tevent ExcludeFromDividendsChange(address indexed account, bool isExcluded);\r\n\tevent DividendsSent(uint256 tokensSwapped);\r\n\tevent StakingTokensSent(uint256 tokensSent);\r\n\tevent SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived,uint256 tokensIntoLiqudity);\r\n\tevent ClaimBNBOverflow(uint256 amount);\r\n\tevent ProcessedDividendTracker(\r\n\t\tuint256 iterations,\r\n\t\tuint256 claims,\r\n\t\tuint256 lastProcessedIndex,\r\n\t\tbool indexed automatic,\r\n\t\tuint256 gas,\r\n\t\taddress indexed processor\r\n\t);\r\n\tevent FeesApplied(uint256 liquidityFee, uint256 marketingFee, uint256 buyBackFee, uint256 stakingFee, uint256 holdersFee, uint256 totalFee);\r\n\tevent DividendTokenChange(address newValue, address oldValue);\r\n\r\n\tconstructor() public ERC20(_name, _symbol) {\r\n\t\tdividendTracker = new BabySantaDividendTracker();\r\n\t\tdividendTracker.setRewardToken(dividendToken);\r\n\t\tdividendTracker.setUniswapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n\t\t//IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1); // Testnet\r\n\t\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); // Mainnet\r\n\t\taddress _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n\t\tuniswapV2Router = _uniswapV2Router;\r\n\t\tuniswapV2Pair = _uniswapV2Pair;\r\n\t\t_setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n\t\t_isExcludedFromFee[owner()] = true;\r\n\t\t_isExcludedFromFee[address(this)] = true;\r\n\t\t_isExcludedFromFee[address(dividendTracker)] = true;\r\n\t\t_isExcludedFromFee[liquidityWallet] = true;\r\n\t\t_isExcludedFromFee[marketingWallet] = true;\r\n\t\t_isExcludedFromFee[buyBackWallet] = true;\r\n\r\n\t\tdividendTracker.excludeFromDividends(address(dividendTracker));\r\n\t\tdividendTracker.excludeFromDividends(address(this));\r\n\t\tdividendTracker.excludeFromDividends(address(0x000000000000000000000000000000000000dEaD));\r\n\t\tdividendTracker.excludeFromDividends(owner());\r\n\t\tdividendTracker.excludeFromDividends(address(_uniswapV2Router));\r\n\r\n\t\t_isExcludedFromMaxTransactionLimit[address(dividendTracker)] = true;\r\n\t\t_isExcludedFromMaxTransactionLimit[address(this)] = true;\r\n\t\t_isExcludedFromMaxTransactionLimit[liquidityWallet] = true;\r\n\t\t_isExcludedFromMaxTransactionLimit[marketingWallet] = true;\r\n\t\t_isExcludedFromMaxTransactionLimit[buyBackWallet] = true;\r\n\r\n\t\t_isExcludedFromMaxWalletLimit[_uniswapV2Pair] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[address(dividendTracker)] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[address(uniswapV2Router)] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[address(this)] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[owner()] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[liquidityWallet] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[marketingWallet] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[buyBackWallet] = true;\r\n\r\n\t\t_mint(owner(), initialSupply);\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\t// Setters\r\n\tfunction _getNow() private view returns (uint256) {\r\n\t\treturn block.timestamp;\r\n\t}\r\n\tfunction launch() public onlyOwner {\r\n\t\t_launchStartTimestamp = _getNow();\r\n\t\t_launchBlockNumber = block.number;\r\n\t\tisTradingEnabled = true;\r\n\t\t_isLanched = true;\r\n\t}\r\n\tfunction cancelLaunch() public onlyOwner {\r\n\t\trequire(this.isInLaunch(), \"BabySanta: Launch is not set\");\r\n\t\t_launchStartTimestamp = 0;\r\n\t\t_launchBlockNumber = 0;\r\n\t\t_isLanched = false;\r\n\t}\r\n\tfunction activateTrading() public onlyOwner {\r\n\t\tisTradingEnabled = true;\r\n\t}\r\n\tfunction deactivateTrading() public onlyOwner {\r\n\t\tisTradingEnabled = false;\r\n\t\t_tradingPausedTimestamp = _getNow();\r\n\t}\r\n\tfunction setCharityHour() public onlyOwner {\r\n\t\trequire(!this.isInCharityHour(), \"BabySanta: Charity Hour is already set\");\r\n\t\trequire(isTradingEnabled, \"BabySanta: Trading must be enabled first\");\r\n\t\trequire(!this.isInLaunch(), \"BabySanta: Must not be in launch period\");\r\n\t\temit CharityHourChange(true, false);\r\n\t\t_charityHourStartTimestamp = _getNow();\r\n\t}\r\n\tfunction cancelCharityHour() public onlyOwner {\r\n\t\trequire(this.isInCharityHour(), \"BabySanta: Charity Hour is not set\");\r\n\t\temit CharityHourChange(false, true);\r\n\t\t_charityHourStartTimestamp = 0;\r\n\t}\r\n\tfunction updateDividendTracker(address newAddress) public onlyOwner {\r\n\t\trequire(newAddress != address(dividendTracker), \"BabySanta: The dividend tracker already has that address\");\r\n\t\tBabySantaDividendTracker newDividendTracker = BabySantaDividendTracker(payable(newAddress));\r\n\t\trequire(newDividendTracker.owner() == address(this), \"BabySanta: The new dividend tracker must be owned by the BabySanta token contract\");\r\n\t\tnewDividendTracker.excludeFromDividends(address(newDividendTracker));\r\n\t\tnewDividendTracker.excludeFromDividends(address(this));\r\n\t\tnewDividendTracker.excludeFromDividends(owner());\r\n\t\tnewDividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n\t\tnewDividendTracker.excludeFromDividends(address(uniswapV2Pair));\r\n\t\temit DividendTrackerChange(newAddress, address(dividendTracker));\r\n\r\n\t\tdividendTracker = newDividendTracker;\r\n\t}\r\n\tfunction _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n\t\trequire(automatedMarketMakerPairs[pair] != value, \"BabySanta: Automated market maker pair is already set to that value\");\r\n\t\tautomatedMarketMakerPairs[pair] = value;\r\n\t\tif(value) {\r\n\t\t\tdividendTracker.excludeFromDividends(pair);\r\n\t\t}\r\n\t\temit AutomatedMarketMakerPairChange(pair, value);\r\n\t}\r\n\tfunction excludeFromFees(address account, bool excluded) public onlyOwner {\r\n\t\trequire(_isExcludedFromFee[account] != excluded, \"BabySanta: Account is already the value of 'excluded'\");\r\n\t\t_isExcludedFromFee[account] = excluded;\r\n\t\temit ExcludeFromFeesChange(account, excluded);\r\n\t}\r\n\tfunction excludeFromDividends(address account) public onlyOwner {\r\n\t\tdividendTracker.excludeFromDividends(account);\r\n\t}\r\n\tfunction excludeFromMaxTransactionLimit(address account, bool excluded) public onlyOwner {\r\n\t\trequire(_isExcludedFromMaxTransactionLimit[account] != excluded, \"BabySanta: Account is already the value of 'excluded'\");\r\n\t\t_isExcludedFromMaxTransactionLimit[account] = excluded;\r\n\t\temit ExcludeFromMaxTransferChange(account, excluded);\r\n\t}\r\n\tfunction excludeFromMaxWalletLimit(address account, bool excluded) public onlyOwner {\r\n\t\trequire(_isExcludedFromMaxWalletLimit[account] != excluded, \"BabySanta: Account is already the value of 'excluded'\");\r\n\t\t_isExcludedFromMaxWalletLimit[account] = excluded;\r\n\t\temit ExcludeFromMaxWalletChange(account, excluded);\r\n\t}\r\n\tfunction blockAccount(address account) public onlyOwner {\r\n\t\tuint256 currentTimestamp = _getNow();\r\n\t\trequire(!_isBlocked[account], \"BabySanta: Account is already blocked\");\r\n\t\tif (_isLanched) {\r\n\t\t\trequire(currentTimestamp.sub(_launchStartTimestamp) < _blockedTimeLimit, \"BabySanta: Time to block accounts has expired\");\r\n\t\t}\r\n\t\t_isBlocked[account] = true;\r\n\t\temit BlockedAccountChange(account, true);\r\n\t}\r\n\tfunction unblockAccount(address account) public onlyOwner {\r\n\t\trequire(_isBlocked[account], \"BabySanta: Account is not blcoked\");\r\n\t\t_isBlocked[account] = false;\r\n\t\temit BlockedAccountChange(account, false);\r\n\t}\r\n\tfunction setWallets(address newLiquidityWallet, address newMarketingWallet, address newBuyBackWallet) public onlyOwner {\r\n\t\tif(liquidityWallet != newLiquidityWallet) {\r\n\t\t\trequire(newLiquidityWallet != address(0), \"BabySanta: The liquidityWallet cannot be 0\");\r\n\t\t\temit WalletChange('liquidityWallet', newLiquidityWallet, liquidityWallet);\r\n\t\t\tliquidityWallet = newLiquidityWallet;\r\n\t\t}\r\n\t\tif(marketingWallet != newMarketingWallet) {\r\n\t\t\trequire(newMarketingWallet != address(0), \"BabySanta: The marketingWallet cannot be 0\");\r\n\t\t\temit WalletChange('marketingWallet', newMarketingWallet, marketingWallet);\r\n\t\t\tmarketingWallet = newMarketingWallet;\r\n\t\t}\r\n\t\tif(buyBackWallet != newBuyBackWallet) {\r\n\t\t\trequire(buyBackWallet != address(0), \"BabySanta: The buyBackWallet cannot be 0\");\r\n\t\t\temit WalletChange('buyBackWallet', newBuyBackWallet, buyBackWallet);\r\n\t\t\tbuyBackWallet = newBuyBackWallet;\r\n\t\t}\r\n\t}\r\n\tfunction setStakingAddress(address newStakingAddress) public onlyOwner {\r\n\t\trequire(newStakingAddress != address(0), \"BabySanta: The stakingAddress cannot be 0\");\r\n\t\temit StakingAddressChange(newStakingAddress, stakingAddress);\r\n\t\tstakingAddress = newStakingAddress;\r\n\t}\r\n\tfunction setAllFeesToZero() public onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_base, 0, 0, 0, 0, 0);\r\n\t\temit FeeChange('baseFees-Buy', 0, 0, 0, 0, 0);\r\n\t\t_setCustomSellTaxPeriod(_base, 0, 0, 0, 0, 0);\r\n\t\temit FeeChange('baseFees-Sell', 0, 0, 0, 0, 0);\r\n\t}\r\n\tfunction resetAllFees() public onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_base, _default.liquidityFeeOnBuy, _default.marketingFeeOnBuy, _default.buyBackFeeOnBuy, _default.stakingFeeOnBuy, _default.holdersFeeOnBuy);\r\n\t\temit FeeChange('baseFees-Buy', _default.liquidityFeeOnBuy, _default.marketingFeeOnBuy, _default.buyBackFeeOnBuy, _default.stakingFeeOnBuy,  _default.holdersFeeOnBuy);\r\n\t\t_setCustomSellTaxPeriod(_base, _default.liquidityFeeOnSell, _default.marketingFeeOnSell, _default.buyBackFeeOnSell, _default.stakingFeeOnSell,  _default.holdersFeeOnSell);\r\n\t\temit FeeChange('baseFees-Sell', _default.liquidityFeeOnSell, _default.marketingFeeOnSell, _default.buyBackFeeOnSell, _default.stakingFeeOnSell, _default.holdersFeeOnSell);\r\n\t}\r\n\t// Base fees\r\n\tfunction setBaseFeesOnBuy(uint256 _liquidityFeeOnBuy, uint256 _marketingFeeOnBuy, uint256 _buyBackFeeOnBuy, uint256 _stakingFeeOnBuy, uint256 _holdersFeeOnBuy) public onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_base, _liquidityFeeOnBuy, _marketingFeeOnBuy, _buyBackFeeOnBuy, _stakingFeeOnBuy, _holdersFeeOnBuy);\r\n\t\temit FeeChange('baseFees-Buy', _liquidityFeeOnBuy, _marketingFeeOnBuy, _buyBackFeeOnBuy, _stakingFeeOnBuy, _holdersFeeOnBuy);\r\n\t}\r\n\tfunction setBaseFeesOnSell(uint256 _liquidityFeeOnSell,uint256 _marketingFeeOnSell, uint256 _buyBackFeeOnSell, uint256 _stakingFeeOnSell, uint256 _holdersFeeOnSell) public onlyOwner {\r\n\t\t_setCustomSellTaxPeriod(_base, _liquidityFeeOnSell, _marketingFeeOnSell, _buyBackFeeOnSell, _stakingFeeOnSell, _holdersFeeOnSell);\r\n\t\temit FeeChange('baseFees-Sell', _liquidityFeeOnSell, _marketingFeeOnSell, _buyBackFeeOnSell, _stakingFeeOnSell, _holdersFeeOnSell);\r\n\t}\r\n\t//Launch2 Fees\r\n\tfunction setLaunch2FeesOnBuy(uint256 _liquidityFeeOnBuy, uint256 _marketingFeeOnBuy, uint256 _buyBackFeeOnBuy, uint256 _stakingFeeOnBuy, uint256 _holdersFeeOnBuy) public onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_launch2, _liquidityFeeOnBuy, _marketingFeeOnBuy, _buyBackFeeOnBuy, _stakingFeeOnBuy, _holdersFeeOnBuy);\r\n\t\temit FeeChange('launch2Fees-Buy', _liquidityFeeOnBuy, _marketingFeeOnBuy, _buyBackFeeOnBuy, _stakingFeeOnBuy, _holdersFeeOnBuy);\r\n\t}\r\n\tfunction setLaunch2FeesOnSell(uint256 _liquidityFeeOnSell,uint256 _marketingFeeOnSell, uint256 _buyBackFeeOnSell, uint256 _stakingFeeOnSell, uint256 _holdersFeeOnSell) public onlyOwner {\r\n\t\t_setCustomSellTaxPeriod(_launch2, _liquidityFeeOnSell, _marketingFeeOnSell, _buyBackFeeOnSell, _stakingFeeOnSell, _holdersFeeOnSell);\r\n\t\temit FeeChange('launch2Fees-Sell', _liquidityFeeOnSell, _marketingFeeOnSell, _buyBackFeeOnSell, _stakingFeeOnSell, _holdersFeeOnSell);\r\n\t}\r\n\t//Launch3 Fees\r\n\tfunction setLaunch3FeesOnBuy(uint256 _liquidityFeeOnBuy, uint256 _marketingFeeOnBuy, uint256 _buyBackFeeOnBuy, uint256 _stakingFeeOnBuy, uint256 _holdersFeeOnBuy) public onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_launch3, _liquidityFeeOnBuy, _marketingFeeOnBuy, _buyBackFeeOnBuy, _stakingFeeOnBuy, _holdersFeeOnBuy);\r\n\t\temit FeeChange('launch3Fees-Buy', _liquidityFeeOnBuy, _marketingFeeOnBuy, _buyBackFeeOnBuy, _stakingFeeOnBuy, _holdersFeeOnBuy);\r\n\t}\r\n\tfunction setLaunch3FeesOnSell(uint256 _liquidityFeeOnSell,uint256 _marketingFeeOnSell, uint256 _buyBackFeeOnSell, uint256 _stakingFeeOnSell, uint256 _holdersFeeOnSell) public onlyOwner {\r\n\t\t_setCustomSellTaxPeriod(_launch3, _liquidityFeeOnSell, _marketingFeeOnSell, _buyBackFeeOnSell, _stakingFeeOnSell, _holdersFeeOnSell);\r\n\t\temit FeeChange('launch3Fees-Sell', _liquidityFeeOnSell, _marketingFeeOnSell, _buyBackFeeOnSell, _stakingFeeOnSell, _holdersFeeOnSell);\r\n\t}\r\n\t// Charity Hour 1 Fees\r\n\tfunction setCharityHour1BuyFees(uint256 _liquidityFeeOnBuy,uint256 _marketingFeeOnBuy, uint256 _buyBackFeeOnBuy, uint256 _stakingFeeOnBuy, uint256 _holdersFeeOnBuy) public onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_charity1, _liquidityFeeOnBuy, _marketingFeeOnBuy, _buyBackFeeOnBuy, _stakingFeeOnBuy, _holdersFeeOnBuy);\r\n\t\temit FeeChange('charity1Fees-Buy', _liquidityFeeOnBuy, _marketingFeeOnBuy, _buyBackFeeOnBuy, _stakingFeeOnBuy, _holdersFeeOnBuy);\r\n\t}\r\n\tfunction setCharityHour1SellFees(uint256 _liquidityFeeOnSell,uint256 _marketingFeeOnSell, uint256 _buyBackFeeOnSell, uint256 _stakingFeeOnSell, uint256 _holdersFeeOnSell) public onlyOwner {\r\n\t\t_setCustomSellTaxPeriod(_charity1, _liquidityFeeOnSell, _marketingFeeOnSell, _buyBackFeeOnSell, _stakingFeeOnSell, _holdersFeeOnSell);\r\n\t\temit FeeChange('charity1Fees-Sell', _liquidityFeeOnSell, _marketingFeeOnSell, _buyBackFeeOnSell, _stakingFeeOnSell, _holdersFeeOnSell);\r\n\t}\r\n\t// Charity Hour 2 Fees\r\n\tfunction setCharityHour2BuyFees(uint256 _liquidityFeeOnBuy,uint256 _marketingFeeOnBuy, uint256 _buyBackFeeOnBuy, uint256 _stakingFeeOnBuy, uint256 _holdersFeeOnBuy) public onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_charity2, _liquidityFeeOnBuy, _marketingFeeOnBuy, _buyBackFeeOnBuy, _stakingFeeOnBuy, _holdersFeeOnBuy);\r\n\t\temit FeeChange('charity2Fees-Buy', _liquidityFeeOnBuy, _marketingFeeOnBuy, _buyBackFeeOnBuy, _stakingFeeOnBuy, _holdersFeeOnBuy);\r\n\t}\r\n\tfunction setCharityHour2SellFees(uint256 _liquidityFeeOnSell,uint256 _marketingFeeOnSell, uint256 _buyBackFeeOnSell, uint256 _stakingFeeOnSell, uint256 _holdersFeeOnSell) public onlyOwner {\r\n\t\t_setCustomSellTaxPeriod(_charity2, _liquidityFeeOnSell, _marketingFeeOnSell, _buyBackFeeOnSell, _stakingFeeOnSell, _holdersFeeOnSell);\r\n\t\temit FeeChange('charity2Fees-Sell', _liquidityFeeOnSell, _marketingFeeOnSell, _buyBackFeeOnSell, _stakingFeeOnSell, _holdersFeeOnSell);\r\n\t}\r\n\tfunction setUniswapRouter(address newAddress) public onlyOwner {\r\n\t\trequire(newAddress != address(uniswapV2Router), \"BabySanta: The router already has that address\");\r\n\t\temit UniswapV2RouterChange(newAddress, address(uniswapV2Router));\r\n\t\tuniswapV2Router = IUniswapV2Router02(newAddress);\r\n\t\tdividendTracker.setUniswapRouter(newAddress);\r\n\t}\r\n\tfunction setGasForProcessing(uint256 newValue) public onlyOwner {\r\n\t\trequire(newValue >= 200000 && newValue <= 500000, \"BabySanta: gasForProcessing must be between 200,000 and 500,000\");\r\n\t\trequire(newValue != gasForProcessing, \"BabySanta: Cannot update gasForProcessing to same value\");\r\n\t\temit GasForProcessingChange(newValue, gasForProcessing);\r\n\t\tgasForProcessing = newValue;\r\n\t}\r\n\tfunction setMaxTransactionAmount(uint256 newValue) public onlyOwner {\r\n\t\trequire(newValue != maxTxAmount, \"BabySanta: Cannot update maxTxAmount to same value\");\r\n\t\temit MaxTransactionAmountChange(newValue, maxTxAmount);\r\n\t\tmaxTxAmount = newValue;\r\n\t}\r\n\tfunction setMaxWalletAmount(uint256 newValue) public onlyOwner {\r\n\t\trequire(newValue != maxWalletAmount, \"BabySanta: Cannot update maxWalletAmount to same value\");\r\n\t\temit MaxWalletAmountChange(newValue, maxWalletAmount);\r\n\t\tmaxWalletAmount = newValue;\r\n\t}\r\n\tfunction setMinimumTokensBeforeSwap(uint256 newValue) public onlyOwner {\r\n\t\trequire(newValue != minimumTokensBeforeSwap, \"BabySanta: Cannot update minimumTokensBeforeSwap to same value\");\r\n\t\temit MinTokenAmountBeforeSwapChange(newValue, minimumTokensBeforeSwap);\r\n\t\tminimumTokensBeforeSwap = newValue;\r\n\t}\r\n\tfunction setMinimumTokenBalanceForDividends(uint256 newValue) public onlyOwner {\r\n\t\tdividendTracker.setTokenBalanceForDividends(newValue);\r\n\t}\r\n\tfunction updateClaimWait(uint256 claimWait) external onlyOwner {\r\n\t\tdividendTracker.updateClaimWait(claimWait);\r\n\t}\r\n\tfunction processDividendTracker(uint256 gas) external {\r\n\t\t(uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\r\n\t\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\r\n\t}\r\n\tfunction claim() external {\r\n\t\tdividendTracker.processAccount(payable(msg.sender), false);\r\n\t}\r\n\tfunction setDividendToken(address newDividendToken) external onlyOwner {\r\n\t\trequire(newDividendToken != dividendToken, \"BabySanta: Cannot update dividend token to same value\");\r\n\t\trequire(newDividendToken != address(0), \"BabySanta: The dividend token cannot be 0\");\r\n\t\trequire(newDividendToken != address(this), \"BabySanta: The dividend token cannot be set to the current contract\");\r\n\t\temit DividendTokenChange(newDividendToken, dividendToken);\r\n\t\tdividendToken = newDividendToken;\r\n\t\tdividendTracker.setRewardToken(dividendToken);\r\n\t}\r\n\tfunction claimBNBOverflow(uint256 amount) external onlyOwner {\r\n\t\trequire(amount < address(this).balance, \"BabySanta: Cannot send more than contract balance\");\r\n\t\t(bool success,) = address(owner()).call{value : amount}(\"\");\r\n\t\tif (success){\r\n\t\t\temit ClaimBNBOverflow(amount);\r\n\t\t}\r\n\t}\r\n\r\n\t// Getters\r\n\tfunction timeSinceLastCharityHour() external view returns(uint256){\r\n\t\tuint256 currentTimestamp = !isTradingEnabled && _tradingPausedTimestamp > _charityHourStartTimestamp  ? _tradingPausedTimestamp : _getNow();\r\n\t\treturn currentTimestamp.sub(_charityHourStartTimestamp);\r\n\t}\r\n\tfunction isInCharityHour() external view returns (bool) {\r\n\t\tuint256 currentTimestamp = !isTradingEnabled && _tradingPausedTimestamp > _charityHourStartTimestamp  ? _tradingPausedTimestamp : _getNow();\r\n\t\tuint256 totalCharityTime = _charity1.timeInPeriod.add(_charity2.timeInPeriod);\r\n\t\tuint256 timeSinceCharity = currentTimestamp.sub(_charityHourStartTimestamp);\r\n\t\tif(timeSinceCharity < totalCharityTime) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\tfunction isInLaunch() external view returns (bool) {\r\n\t\tuint256 currentTimestamp = !isTradingEnabled && _tradingPausedTimestamp > _launchStartTimestamp  ? _tradingPausedTimestamp : _getNow();\r\n\t\tuint256 timeSinceLaunch = currentTimestamp.sub(_launchStartTimestamp);\r\n\t\tuint256 blocksSinceLaunch = block.number.sub(_launchBlockNumber);\r\n\t\tuint256 totalLaunchTime =  _launch1.timeInPeriod.add(_launch2.timeInPeriod).add(_launch3.timeInPeriod);\r\n\r\n\t\tif(_isLanched && (timeSinceLaunch < totalLaunchTime || blocksSinceLaunch < _launch1.blocksInPeriod )) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\tfunction getClaimWait() external view returns(uint256) {\r\n\t\treturn dividendTracker.claimWait();\r\n\t}\r\n\tfunction getTotalDividendsDistributed() external view returns (uint256) {\r\n\t\treturn dividendTracker.totalDividendsDistributed();\r\n\t}\r\n\tfunction withdrawableDividendOf(address account) public view returns(uint256) {\r\n\t\treturn dividendTracker.withdrawableDividendOf(account);\r\n\t}\r\n\tfunction dividendTokenBalanceOf(address account) public view returns (uint256) {\r\n\t\treturn dividendTracker.balanceOf(account);\r\n\t}\r\n\tfunction getAccountDividendsInfo(address account)\r\n\t\texternal view returns (\r\n\t\taddress,\r\n\t\tint256,\r\n\t\tint256,\r\n\t\tuint256,\r\n\t\tuint256,\r\n\t\tuint256,\r\n\t\tuint256,\r\n\t\tuint256) {\r\n\t\treturn dividendTracker.getAccount(account);\r\n\t}\r\n\tfunction getLastProcessedIndex() external view returns(uint256) {\r\n\treturn dividendTracker.getLastProcessedIndex();\r\n\t}\r\n\tfunction getNumberOfDividendTokenHolders() external view returns(uint256) {\r\n\t\treturn dividendTracker.getNumberOfTokenHolders();\r\n\t}\r\n\tfunction getBaseBuyFees() external view returns (uint256, uint256, uint256, uint256, uint256){\r\n\t\treturn (_base.liquidityFeeOnBuy, _base.marketingFeeOnBuy, _base.buyBackFeeOnBuy, _base.stakingFeeOnBuy, _base.holdersFeeOnBuy);\r\n\t}\r\n\tfunction getBaseSellFees() external view returns (uint256, uint256, uint256, uint256, uint256){\r\n\t\treturn (_base.liquidityFeeOnSell, _base.marketingFeeOnSell, _base.buyBackFeeOnSell, _base.stakingFeeOnSell, _base.holdersFeeOnSell);\r\n\t}\r\n\tfunction getCharity1BuyFees() external view returns (uint256, uint256, uint256, uint256, uint256){\r\n\t\treturn (_charity1.liquidityFeeOnBuy, _charity1.marketingFeeOnBuy, _charity1.buyBackFeeOnBuy, _charity1.stakingFeeOnBuy, _charity1.holdersFeeOnBuy);\r\n\t}\r\n\tfunction getCharity1SellFees() external view returns (uint256, uint256, uint256, uint256, uint256){\r\n\t\treturn (_charity1.liquidityFeeOnSell, _charity1.marketingFeeOnSell, _charity1.buyBackFeeOnSell, _charity1.stakingFeeOnSell, _charity1.holdersFeeOnSell);\r\n\t}\r\n\tfunction getCharity2BuyFees() external view returns (uint256, uint256, uint256, uint256, uint256){\r\n\t\treturn (_charity2.liquidityFeeOnBuy, _charity2.marketingFeeOnBuy, _charity2.buyBackFeeOnBuy, _charity2.stakingFeeOnBuy, _charity2.holdersFeeOnBuy);\r\n\t}\r\n\tfunction getCharity2SellFees() external view returns (uint256, uint256, uint256, uint256, uint256){\r\n\t\treturn (_charity2.liquidityFeeOnSell, _charity2.marketingFeeOnSell, _charity2.buyBackFeeOnSell, _charity2.stakingFeeOnSell, _charity2.holdersFeeOnSell);\r\n\t}\r\n\r\n\t// Main\r\n\tfunction _transfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal override {\r\n\trequire(from != address(0), \"ERC20: transfer from the zero address\");\r\n\trequire(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\tif(amount == 0) {\r\n\t\tsuper._transfer(from, to, 0);\r\n\t\treturn;\r\n\t}\r\n\r\n\tbool isBuyFromLp = automatedMarketMakerPairs[from];\r\n\tbool isSelltoLp = automatedMarketMakerPairs[to];\r\n\tbool _isInLaunch = this.isInLaunch();\r\n\r\n\tuint256 currentTimestamp = !isTradingEnabled && _tradingPausedTimestamp > _launchStartTimestamp  ? _tradingPausedTimestamp : _getNow();\r\n\r\n\tif(from != owner() && to != owner()) {\r\n\t\trequire(isTradingEnabled, \"BabySanta: Trading is currently disabled.\");\r\n\t\trequire(!_isBlocked[to], \"BabySanta: Account is blocked\");\r\n\t\trequire(!_isBlocked[from], \"BabySanta: Account is blocked\");\r\n\t\tif (_isInLaunch && currentTimestamp.sub(_launchStartTimestamp) <= 300 && isBuyFromLp) {\r\n\t\t\trequire(currentTimestamp.sub(_buyTimesInLaunch[to]) > 60, \"BabySanta: Cannot buy more than once per min in first 5min of launch\");\r\n\t\t}\r\n\t\tif (!_isExcludedFromMaxTransactionLimit[to] && !_isExcludedFromMaxTransactionLimit[from]) {\r\n\t\t\trequire(amount <= maxTxAmount, \"BabySanta: Buy amount exceeds the maxTxBuyAmount.\");\r\n\t\t}\r\n\t\tif (!_isExcludedFromMaxWalletLimit[to]) {\r\n\t\t\trequire(balanceOf(to).add(amount) <= maxWalletAmount, \"BabySanta: Expected wallet amount exceeds the maxWalletAmount.\");\r\n\t\t}\r\n\t}\r\n\r\n\t_adjustTaxes(isBuyFromLp, isSelltoLp);\r\n\r\n\tbool canSwap = balanceOf(address(this)) >= minimumTokensBeforeSwap;\r\n\r\n\tif (\r\n\t\tisTradingEnabled &&\r\n\t\tcanSwap &&\r\n\t\t!_swapping &&\r\n\t\t_totalFee > 0 &&\r\n\t\tautomatedMarketMakerPairs[to] &&\r\n\t\tfrom != liquidityWallet && to != liquidityWallet &&\r\n\t\tfrom != marketingWallet && to != marketingWallet &&\r\n\t\tfrom != buyBackWallet && to != buyBackWallet &&\r\n\t\tfrom != stakingAddress && to != stakingAddress\r\n\t) {\r\n\t\t_swapping = true;\r\n\t\t_swapAndLiquify();\r\n\t\t_swapping = false;\r\n\t}\r\n\r\n\tbool takeFee = !_swapping && isTradingEnabled;\r\n\r\n\tif(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n\t\ttakeFee = false;\r\n\t}\r\n\tif (takeFee) {\r\n\t\tuint256 fee = amount.mul(_totalFee).div(100);\r\n\t\tamount = amount.sub(fee);\r\n\t\tsuper._transfer(from, address(this), fee);\r\n\t\temit FeesApplied(_liquidityFee, _marketingFee, _buyBackFee, _stakingFee, _holdersFee, _totalFee);\r\n\t}\r\n\r\n\tif (_isInLaunch && currentTimestamp.sub(_launchStartTimestamp) <= 300) {\r\n\t\tif (to != owner() && isBuyFromLp  && currentTimestamp.sub(_buyTimesInLaunch[to]) > 60) {\r\n\t\t\t_buyTimesInLaunch[to] = currentTimestamp;\r\n\t\t}\r\n\t}\r\n\r\n\tsuper._transfer(from, to, amount);\r\n\ttry dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n\ttry dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n\r\n\tif(!_swapping) {\r\n\t\tuint256 gas = gasForProcessing;\r\n\t\ttry dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n\t\t\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n\t\t}\r\n\t\t\tcatch {}\r\n\t\t}\r\n\t}\r\n\tfunction _adjustTaxes(bool isBuyFromLp, bool isSelltoLp) private {\r\n\t\tuint256 blocksSinceLaunch = block.number.sub(_launchBlockNumber);\r\n\t\tuint256 currentTimestamp = !isTradingEnabled && _tradingPausedTimestamp > _launchStartTimestamp  ? _tradingPausedTimestamp : _getNow();\r\n\t\tuint256 timeSinceLaunch = currentTimestamp.sub(_launchStartTimestamp);\r\n\t\tuint256 timeInLaunch = _launch3.timeInPeriod.add(_launch2.timeInPeriod);\r\n\t\tuint256 timeSinceCharity = currentTimestamp.sub(_charityHourStartTimestamp);\r\n\t\t_liquidityFee = 0;\r\n\t\t_marketingFee = 0;\r\n\t\t_buyBackFee = 0;\r\n\t\t_stakingFee = 0;\r\n\t\t_holdersFee = 0;\r\n\r\n\t\tif (isBuyFromLp) {\r\n\t\t\t_liquidityFee = _base.liquidityFeeOnBuy;\r\n\t\t\t_marketingFee = _base.marketingFeeOnBuy;\r\n\t\t\t_buyBackFee = _base.buyBackFeeOnBuy;\r\n\t\t\t_stakingFee = _base.stakingFeeOnBuy;\r\n\t\t\t_holdersFee = _base.holdersFeeOnBuy;\r\n\r\n\t\t\tif (_isLanched && blocksSinceLaunch < _launch1.blocksInPeriod) {\r\n\t\t\t\t_liquidityFee = _launch1.liquidityFeeOnBuy;\r\n\t\t\t\t_marketingFee = _launch1.marketingFeeOnBuy;\r\n\t\t\t\t_buyBackFee = _launch1.buyBackFeeOnBuy;\r\n\t\t\t\t_stakingFee = _launch1.stakingFeeOnBuy;\r\n\t\t\t\t_holdersFee = _launch1.holdersFeeOnBuy;\r\n\t\t\t}\r\n\t\t\tif (_isLanched && timeSinceLaunch <= _launch2.timeInPeriod && blocksSinceLaunch > _launch1.blocksInPeriod) {\r\n\t\t\t\t_liquidityFee = _launch2.liquidityFeeOnBuy;\r\n\t\t\t\t_marketingFee = _launch2.marketingFeeOnBuy;\r\n\t\t\t\t_buyBackFee = _launch2.buyBackFeeOnBuy;\r\n\t\t\t\t_stakingFee = _launch2.stakingFeeOnBuy;\r\n\t\t\t\t_holdersFee = _launch2.holdersFeeOnBuy;\r\n\t\t\t}\r\n\t\t\tif (_isLanched && timeSinceLaunch > _launch2.timeInPeriod && timeSinceLaunch <= timeInLaunch && blocksSinceLaunch > _launch1.blocksInPeriod) {\r\n\t\t\t\t_liquidityFee = _launch3.liquidityFeeOnBuy;\r\n\t\t\t\t_marketingFee = _launch3.marketingFeeOnBuy;\r\n\t\t\t\t_buyBackFee = _launch3.buyBackFeeOnBuy;\r\n\t\t\t\t_stakingFee = _launch3.stakingFeeOnBuy;\r\n\t\t\t\t_holdersFee = _launch3.holdersFeeOnBuy;\r\n\t\t\t}\r\n\t\t\tif (timeSinceCharity <= _charity1.timeInPeriod) {\r\n\t\t\t\t_liquidityFee = _charity1.liquidityFeeOnBuy;\r\n\t\t\t\t_marketingFee = _charity1.marketingFeeOnBuy;\r\n\t\t\t\t_buyBackFee = _charity1.buyBackFeeOnBuy;\r\n\t\t\t\t_stakingFee = _charity1.stakingFeeOnBuy;\r\n\t\t\t\t_holdersFee = _charity1.holdersFeeOnBuy;\r\n\t\t\t}\r\n\t\t\tif (timeSinceCharity > _charity1.timeInPeriod && timeSinceCharity <= _charity1.timeInPeriod.add(_charity2.timeInPeriod)) {\r\n\t\t\t\t_liquidityFee = _charity2.liquidityFeeOnBuy;\r\n\t\t\t\t_marketingFee = _charity2.marketingFeeOnBuy;\r\n\t\t\t\t_buyBackFee = _charity2.buyBackFeeOnBuy;\r\n\t\t\t\t_stakingFee = _charity2.stakingFeeOnBuy;\r\n\t\t\t\t_holdersFee = _charity2.holdersFeeOnBuy;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (isSelltoLp) {\r\n\t\t\t_liquidityFee = _base.liquidityFeeOnSell;\r\n\t\t\t_marketingFee = _base.marketingFeeOnSell;\r\n\t\t\t_buyBackFee = _base.buyBackFeeOnSell;\r\n\t\t\t_stakingFee = _base.stakingFeeOnSell;\r\n\t\t\t_holdersFee = _base.holdersFeeOnSell;\r\n\r\n\t\t\tif (_isLanched && blocksSinceLaunch < _launch1.blocksInPeriod) {\r\n\t\t\t\t_liquidityFee = _launch1.liquidityFeeOnSell;\r\n\t\t\t\t_marketingFee = _launch1.marketingFeeOnSell;\r\n\t\t\t\t_buyBackFee = _launch1.buyBackFeeOnSell;\r\n\t\t\t\t_stakingFee = _launch1.stakingFeeOnSell;\r\n\t\t\t\t_holdersFee = _launch1.holdersFeeOnSell;\r\n\t\t\t}\r\n\t\t\tif (_isLanched && timeSinceLaunch <= _launch2.timeInPeriod && blocksSinceLaunch > _launch1.blocksInPeriod) {\r\n\t\t\t\t_liquidityFee = _launch2.liquidityFeeOnSell;\r\n\t\t\t\t_marketingFee = _launch2.marketingFeeOnSell;\r\n\t\t\t\t_buyBackFee = _launch2.buyBackFeeOnSell;\r\n\t\t\t\t_stakingFee = _launch2.stakingFeeOnSell;\r\n\t\t\t\t_holdersFee = _launch2.holdersFeeOnSell;\r\n\t\t\t}\r\n\t\t\tif (_isLanched && timeSinceLaunch > _launch2.timeInPeriod && timeSinceLaunch <= timeInLaunch && blocksSinceLaunch > _launch1.blocksInPeriod) {\r\n\t\t\t\t_liquidityFee = _launch3.liquidityFeeOnSell;\r\n\t\t\t\t_marketingFee = _launch3.marketingFeeOnSell;\r\n\t\t\t\t_buyBackFee = _launch3.buyBackFeeOnSell;\r\n\t\t\t\t_stakingFee = _launch3.stakingFeeOnSell;\r\n\t\t\t\t_holdersFee = _launch3.holdersFeeOnSell;\r\n\t\t\t}\r\n\t\t\tif (timeSinceCharity <= _charity1.timeInPeriod) {\r\n\t\t\t\t_liquidityFee = _charity1.liquidityFeeOnSell;\r\n\t\t\t\t_marketingFee = _charity1.marketingFeeOnSell;\r\n\t\t\t\t_buyBackFee = _charity1.buyBackFeeOnSell;\r\n\t\t\t\t_stakingFee = _charity1.stakingFeeOnSell;\r\n\t\t\t\t_holdersFee = _charity1.holdersFeeOnSell;\r\n\t\t\t}\r\n\t\t\tif (timeSinceCharity > _charity1.timeInPeriod && timeSinceCharity <= _charity1.timeInPeriod.add(_charity2.timeInPeriod)) {\r\n\t\t\t\t_liquidityFee = _charity2.liquidityFeeOnSell;\r\n\t\t\t\t_marketingFee = _charity2.marketingFeeOnSell;\r\n\t\t\t\t_buyBackFee = _charity2.buyBackFeeOnSell;\r\n\t\t\t\t_stakingFee = _charity2.stakingFeeOnSell;\r\n\t\t\t\t_holdersFee = _charity2.holdersFeeOnSell;\r\n\t\t\t}\r\n\t\t}\r\n\t\t_totalFee = _liquidityFee.add(_marketingFee).add(_buyBackFee).add(_stakingFee).add(_holdersFee);\r\n\t}\r\n\tfunction _setCustomSellTaxPeriod(CustomTaxPeriod storage map,\r\n\t\tuint256 _liquidityFeeOnSell,\r\n\t\tuint256 _marketingFeeOnSell,\r\n\t\tuint256 _buyBackFeeOnSell,\r\n\t\tuint256 _stakingFeeOnSell,\r\n\t\tuint256 _holdersFeeOnSell\r\n\t\t) private {\r\n\t\tif (map.liquidityFeeOnSell != _liquidityFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_liquidityFeeOnSell, map.liquidityFeeOnSell, 'liquidityFeeOnSell', map.periodName);\r\n\t\t\tmap.liquidityFeeOnSell = _liquidityFeeOnSell;\r\n\t\t}\r\n\t\tif (map.marketingFeeOnSell != _marketingFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_marketingFeeOnSell, map.marketingFeeOnSell, 'marketingFeeOnSell', map.periodName);\r\n\t\t\tmap.marketingFeeOnSell = _marketingFeeOnSell;\r\n\t\t}\r\n\t\tif (map.buyBackFeeOnSell != _buyBackFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_buyBackFeeOnSell, map.buyBackFeeOnSell, 'buyBackFeeOnSell', map.periodName);\r\n\t\t\tmap.buyBackFeeOnSell = _buyBackFeeOnSell;\r\n\t\t}\r\n\t\tif (map.stakingFeeOnSell != _stakingFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_stakingFeeOnSell, map.stakingFeeOnSell, 'stakingFeeOnSell', map.periodName);\r\n\t\t\tmap.stakingFeeOnSell = _stakingFeeOnSell;\r\n\t\t}\r\n\t\tif (map.holdersFeeOnSell != _holdersFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_holdersFeeOnSell, map.holdersFeeOnSell, 'holdersFeeOnSell', map.periodName);\r\n\t\t\tmap.holdersFeeOnSell = _holdersFeeOnSell;\r\n\t\t}\r\n\t}\r\n\tfunction _setCustomBuyTaxPeriod(CustomTaxPeriod storage map,\r\n\t\tuint256 _liquidityFeeOnBuy,\r\n\t\tuint256 _marketingFeeOnBuy,\r\n\t\tuint256 _buyBackFeeOnBuy,\r\n\t\tuint256 _stakingFeeOnBuy,\r\n\t\tuint256 _holdersFeeOnBuy\r\n\t\t) private {\r\n\t\tif (map.liquidityFeeOnBuy != _liquidityFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_liquidityFeeOnBuy, map.liquidityFeeOnBuy, 'liquidityFeeOnBuy', map.periodName);\r\n\t\t\tmap.liquidityFeeOnBuy = _liquidityFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.marketingFeeOnBuy != _marketingFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_marketingFeeOnBuy, map.marketingFeeOnBuy, 'marketingFeeOnBuy', map.periodName);\r\n\t\t\tmap.marketingFeeOnBuy = _marketingFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.buyBackFeeOnBuy != _buyBackFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_buyBackFeeOnBuy, map.buyBackFeeOnBuy, 'buyBackFeeOnBuy', map.periodName);\r\n\t\t\tmap.buyBackFeeOnBuy = _buyBackFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.stakingFeeOnBuy != _stakingFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_stakingFeeOnBuy, map.stakingFeeOnBuy, 'stakingFeeOnBuy', map.periodName);\r\n\t\t\tmap.stakingFeeOnBuy = _stakingFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.holdersFeeOnBuy != _holdersFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_holdersFeeOnBuy, map.holdersFeeOnBuy, 'holdersFeeOnBuy', map.periodName);\r\n\t\t\tmap.holdersFeeOnBuy = _holdersFeeOnBuy;\r\n\t\t}\r\n\t}\r\n\tfunction _swapAndLiquify() private {\r\n\t\tuint256 contractBalance = balanceOf(address(this));\r\n\t\tuint256 initialBNBBalance = address(this).balance;\r\n\r\n\t\tuint256 amountToLiquify = contractBalance.mul(_liquidityFee).div(_totalFee).div(2);\r\n\t\tuint256 amountForStaking = contractBalance.mul(_stakingFee).div(_totalFee);\r\n\t\tuint256 amountToSwap = contractBalance.sub((amountToLiquify.add(amountForStaking)));\r\n\r\n\t\t_swapTokensForBNB(amountToSwap);\r\n\r\n\t\tuint256 bnbBalanceAfterSwap = address(this).balance.sub(initialBNBBalance);\r\n\t\tuint256 totalBNBFee = _totalFee.sub(_liquidityFee.div(2));\r\n\r\n\t\tuint256 amountBNBLiquidity = bnbBalanceAfterSwap.mul(_liquidityFee).div(totalBNBFee).div(2);\r\n\t\tuint256 amountBNBMarketing = bnbBalanceAfterSwap.mul(_marketingFee).div(totalBNBFee);\r\n\t\tuint256 amountBNBBuyBack= bnbBalanceAfterSwap.mul(_buyBackFee).div(totalBNBFee);\r\n\t\tuint256 amountBNBHolders = bnbBalanceAfterSwap.sub((amountBNBLiquidity.add(amountBNBMarketing).add(amountBNBBuyBack)));\r\n\r\n\t\tpayable(marketingWallet).transfer(amountBNBMarketing);\r\n\t\tpayable(buyBackWallet).transfer(amountBNBBuyBack);\r\n\r\n\t\tif (amountToLiquify > 0) {\r\n\t\t\t_addLiquidity(amountToLiquify, amountBNBLiquidity);\r\n\t\t\temit SwapAndLiquify(amountToSwap, amountBNBLiquidity, amountToLiquify);\r\n\t\t}\r\n\r\n\t\t(bool stakingSuccess) = IERC20(address(this)).transfer(address(stakingAddress), amountForStaking);\r\n\t\tif(stakingSuccess) {\r\n\t\t\temit StakingTokensSent(amountForStaking);\r\n\t\t}\r\n\r\n\t\t(bool dividendSuccess,) = address(dividendTracker).call{value: amountBNBHolders}(\"\");\r\n\t\tif(dividendSuccess) {\r\n\t\t\temit DividendsSent(amountBNBHolders);\r\n\t\t}\r\n\t}\r\n\tfunction _swapTokensForBNB(uint256 tokenAmount) private {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = uniswapV2Router.WETH();\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\t\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // accept any amount of ETH\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\tfunction _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\t\tuniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n\t\t\taddress(this),\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\tliquidityWallet,\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n}\r\n\r\ncontract BabySantaDividendTracker is DividendPayingToken {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeMathInt for int256;\r\n\tusing IterableMapping for IterableMapping.Map;\r\n\r\n\tIterableMapping.Map private tokenHoldersMap;\r\n\r\n\tuint256 public lastProcessedIndex;\r\n\tmapping (address => bool) public excludedFromDividends;\r\n\tmapping (address => uint256) public lastClaimTimes;\r\n\tuint256 public claimWait;\r\n\tuint256 public minimumTokenBalanceForDividends;\r\n\r\n\tevent ExcludeFromDividends(address indexed account);\r\n\tevent ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\tevent Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n\r\n\tconstructor() public DividendPayingToken(\"BabySanta_Dividend_Tracker\", \"BabySanta_Dividend_Tracker\") {\r\n\t\tclaimWait = 3600;\r\n\t\tminimumTokenBalanceForDividends = 200000000 * (10**18);\r\n\t}\r\n\tfunction setRewardToken(address token) external onlyOwner {\r\n\t\t_setRewardToken(token);\r\n\t}\r\n\tfunction setUniswapRouter(address router) external onlyOwner {\r\n\t\t_setUniswapRouter(router);\r\n\t}\r\n\tfunction _transfer(address, address, uint256) internal override {\r\n\t\trequire(false, \"BabySanta_Dividend_Tracker: No transfers allowed\");\r\n\t}\r\n\tfunction excludeFromDividends(address account) external onlyOwner {\r\n\t\trequire(!excludedFromDividends[account]);\r\n\t\texcludedFromDividends[account] = true;\r\n\t\t_setBalance(account, 0);\r\n\t\ttokenHoldersMap.remove(account);\r\n\t\temit ExcludeFromDividends(account);\r\n\t}\r\n\tfunction setTokenBalanceForDividends(uint256 newValue) external onlyOwner {\r\n\t\trequire(minimumTokenBalanceForDividends != newValue, \"BabySanta_Dividend_Tracker: minimumTokenBalanceForDividends already the value of 'newValue'.\");\r\n\t\tminimumTokenBalanceForDividends = newValue;\r\n\t}\r\n\tfunction updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n\t\trequire(newClaimWait >= 3600 && newClaimWait <= 86400, \"BabySanta_Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\");\r\n\t\trequire(newClaimWait != claimWait, \"BabySanta_Dividend_Tracker: Cannot update claimWait to same value\");\r\n\t\temit ClaimWaitUpdated(newClaimWait, claimWait);\r\n\t\tclaimWait = newClaimWait;\r\n\t}\r\n\tfunction getLastProcessedIndex() external view returns(uint256) {\r\n\t\treturn lastProcessedIndex;\r\n\t}\r\n\tfunction getNumberOfTokenHolders() external view returns(uint256) {\r\n\t\treturn tokenHoldersMap.keys.length;\r\n\t}\r\n\tfunction getAccount(address _account)\r\n\t\tpublic view returns (\r\n\t\taddress account,\r\n\t\tint256 index,\r\n\t\tint256 iterationsUntilProcessed,\r\n\t\tuint256 withdrawableDividends,\r\n\t\tuint256 totalDividends,\r\n\t\tuint256 lastClaimTime,\r\n\t\tuint256 nextClaimTime,\r\n\t\tuint256 secondsUntilAutoClaimAvailable) {\r\n\t\taccount = _account;\r\n\r\n\t\tindex = tokenHoldersMap.getIndexOfKey(account);\r\n\t\titerationsUntilProcessed = -1;\r\n\t\tif(index >= 0) {\r\n\t\t\tif(uint256(index) > lastProcessedIndex) {\r\n\t\t\t\titerationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tuint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ? tokenHoldersMap.keys.length.sub(lastProcessedIndex) : 0;\r\n\t\t\t\titerationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n\t\t\t}\r\n\t\t}\r\n\t\twithdrawableDividends = withdrawableDividendOf(account);\r\n\t\ttotalDividends = accumulativeDividendOf(account);\r\n\t\tlastClaimTime = lastClaimTimes[account];\r\n\t\tnextClaimTime = lastClaimTime > 0 ? lastClaimTime.add(claimWait) : 0;\r\n\t\tsecondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ? nextClaimTime.sub(block.timestamp) : 0;\r\n\t}\r\n\tfunction getAccountAtIndex(uint256 index)\r\n\t\tpublic view returns (\r\n\t\taddress,\r\n\t\tint256,\r\n\t\tint256,\r\n\t\tuint256,\r\n\t\tuint256,\r\n\t\tuint256,\r\n\t\tuint256,\r\n\t\tuint256) {\r\n\t\tif(index >= tokenHoldersMap.size()) {\r\n\t\t\treturn (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n\t\t}\r\n\t\taddress account = tokenHoldersMap.getKeyAtIndex(index);\r\n\t\treturn getAccount(account);\r\n\t}\r\n\tfunction canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n\t\tif(lastClaimTime > block.timestamp)  {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn block.timestamp.sub(lastClaimTime) >= claimWait;\r\n\t}\r\n\tfunction setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n\t\tif(excludedFromDividends[account]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(newBalance >= minimumTokenBalanceForDividends) {\r\n\t\t\t_setBalance(account, newBalance);\r\n\t\t\ttokenHoldersMap.set(account, newBalance);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t_setBalance(account, 0);\r\n\t\t\ttokenHoldersMap.remove(account);\r\n\t\t}\r\n\t\tprocessAccount(account, true);\r\n\t}\r\n\tfunction process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n\t\tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\t\tif(numberOfTokenHolders == 0) {\r\n\t\t\treturn (0, 0, lastProcessedIndex);\r\n\t\t}\r\n\r\n\t\tuint256 _lastProcessedIndex = lastProcessedIndex;\r\n\t\tuint256 gasUsed = 0;\r\n\t\tuint256 gasLeft = gasleft();\r\n\t\tuint256 iterations = 0;\r\n\t\tuint256 claims = 0;\r\n\r\n\t\twhile(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n\t\t\t_lastProcessedIndex++;\r\n\t\t\tif(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n\t\t\t\t_lastProcessedIndex = 0;\r\n\t\t\t}\r\n\t\t\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\t\t\tif(canAutoClaim(lastClaimTimes[account])) {\r\n\t\t\t\tif(processAccount(payable(account), true)) {\r\n\t\t\t\t\tclaims++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\titerations++;\r\n\t\t\tuint256 newGasLeft = gasleft();\r\n\t\t\tif(gasLeft > newGasLeft) {\r\n\t\t\t\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n\t\t\t}\r\n\t\t\tgasLeft = newGasLeft;\r\n\t\t}\r\n\t\tlastProcessedIndex = _lastProcessedIndex;\r\n\t\treturn (iterations, claims, lastProcessedIndex);\r\n\t}\r\n\r\n\tfunction processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n\t\tuint256 amount = _withdrawDividendOfUser(account);\r\n\t\tif(amount > 0) {\r\n\t\t\tlastClaimTimes[account] = block.timestamp;\r\n\t\t\temit Claim(account, amount, automatic);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AutomatedMarketMakerPairChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BlockedAccountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"}],\"name\":\"CharityHourChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimBNBOverflow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taxType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes23\",\"name\":\"period\",\"type\":\"bytes23\"}],\"name\":\"CustomTaxPeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"}],\"name\":\"DividendTokenChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"DividendTrackerChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"}],\"name\":\"DividendsSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromDividendsChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFeesChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxTransferChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxWalletChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyBackFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"holdersFee\",\"type\":\"uint256\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyBackFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"holdersFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"name\":\"FeesApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxTransactionAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxWalletAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MinTokenAmountBeforeSwapChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MinTokenAmountForDividendsChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newStakingAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldStakingAddress\",\"type\":\"address\"}],\"name\":\"StakingAddressChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSent\",\"type\":\"uint256\"}],\"name\":\"StakingTokensSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UniswapV2RouterChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indentifier\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"WalletChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelCharityHour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimBNBOverflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract BabySantaDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCharity1BuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCharity1SellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCharity2BuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCharity2SellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInCharityHour\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllFeesToZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeeOnBuy\",\"type\":\"uint256\"}],\"name\":\"setBaseFeesOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setBaseFeesOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setCharityHour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeeOnBuy\",\"type\":\"uint256\"}],\"name\":\"setCharityHour1BuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setCharityHour1SellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeeOnBuy\",\"type\":\"uint256\"}],\"name\":\"setCharityHour2BuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setCharityHour2SellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDividendToken\",\"type\":\"address\"}],\"name\":\"setDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeeOnBuy\",\"type\":\"uint256\"}],\"name\":\"setLaunch2FeesOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setLaunch2FeesOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeeOnBuy\",\"type\":\"uint256\"}],\"name\":\"setLaunch3FeesOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setLaunch3FeesOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakingAddress\",\"type\":\"address\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBuyBackWallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeSinceLastCharityHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unblockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BabySanta", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "IterableMapping:177d8aba73b895210bbbbc709cd4c047a112c0fb", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9d39fd658ee52ea26abe139b1896ef9d0ebcc4bb40fa7057abea1713e86c0cbf"}