{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"DividendPayingToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SafeMathUint.sol\\\";\\r\\nimport \\\"./SafeMathInt.sol\\\";\\r\\nimport \\\"./DividendPayingTokenInterface.sol\\\";\\r\\nimport \\\"./DividendPayingTokenOptionalInterface.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\n\\r\\n/// @title Dividend-Paying Token\\r\\n/// @author Roger Wu (https://github.com/roger-wu)\\r\\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute ether\\r\\n///  to token holders as dividends and allows token holders to withdraw their dividends.\\r\\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\\r\\ncontract DividendPayingToken is ERC20, Ownable, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {\\r\\n  using SafeMath for uint256;\\r\\n  using SafeMathUint for uint256;\\r\\n  using SafeMathInt for int256;\\r\\n\\r\\n  address public immutable CAKE = 0x947950BcC74888a40Ffa2593C5798F11Fc9124C4;\\r\\n\\r\\n\\r\\n  // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\\r\\n  // For more discussion about choosing the value of `magnitude`,\\r\\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\r\\n  uint256 constant internal magnitude = 2**128;\\r\\n\\r\\n  uint256 internal magnifiedDividendPerShare;\\r\\n\\r\\n  // About dividendCorrection:\\r\\n  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\r\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\r\\n  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\r\\n  //   `dividendOf(_user)` should not be changed,\\r\\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\r\\n  // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\r\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\r\\n  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\r\\n  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\r\\n  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\r\\n  mapping(address =\\u003e int256) internal magnifiedDividendCorrections;\\r\\n  mapping(address =\\u003e uint256) internal withdrawnDividends;\\r\\n\\r\\n  uint256 public totalDividendsDistributed;\\r\\n\\r\\n  constructor(string memory _name, string memory _symbol) public ERC20(_name, _symbol) {\\r\\n\\r\\n  }\\r\\n\\r\\n\\r\\n  function distributeCAKEDividends(uint256 amount) public onlyOwner{\\r\\n    require(totalSupply() \\u003e 0);\\r\\n\\r\\n    if (amount \\u003e 0) {\\r\\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\\r\\n        (amount).mul(magnitude) / totalSupply()\\r\\n      );\\r\\n      emit DividendsDistributed(msg.sender, amount);\\r\\n\\r\\n      totalDividendsDistributed = totalDividendsDistributed.add(amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Withdraws the ether distributed to the sender.\\r\\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\r\\n  function withdrawDividend() public virtual override {\\r\\n    _withdrawDividendOfUser(msg.sender);\\r\\n  }\\r\\n\\r\\n  /// @notice Withdraws the ether distributed to the sender.\\r\\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\r\\n function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\\r\\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\\r\\n    if (_withdrawableDividend \\u003e 0) {\\r\\n      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\\r\\n      emit DividendWithdrawn(user, _withdrawableDividend);\\r\\n      bool success = IERC20(CAKE).transfer(user, _withdrawableDividend);\\r\\n\\r\\n      if(!success) {\\r\\n        withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\\r\\n        return 0;\\r\\n      }\\r\\n\\r\\n      return _withdrawableDividend;\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n  function dividendOf(address _owner) public view override returns(uint256) {\\r\\n    return withdrawableDividendOf(_owner);\\r\\n  }\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n  function withdrawableDividendOf(address _owner) public view override returns(uint256) {\\r\\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\\r\\n  }\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\\r\\n  function withdrawnDividendOf(address _owner) public view override returns(uint256) {\\r\\n    return withdrawnDividends[_owner];\\r\\n  }\\r\\n\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address has earned in total.\\r\\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\r\\n  /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\\r\\n  function accumulativeDividendOf(address _owner) public view override returns(uint256) {\\r\\n    return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\\r\\n      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\\r\\n  }\\r\\n\\r\\n  /// @dev Internal function that transfer tokens from one address to another.\\r\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\r\\n  /// @param from The address to transfer from.\\r\\n  /// @param to The address to transfer to.\\r\\n  /// @param value The amount to be transferred.\\r\\n  function _transfer(address from, address to, uint256 value) internal virtual override {\\r\\n    require(false);\\r\\n\\r\\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\\r\\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\\r\\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\\r\\n  }\\r\\n\\r\\n  /// @dev Internal function that mints tokens to an account.\\r\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\r\\n  /// @param account The account that will receive the created tokens.\\r\\n  /// @param value The amount that will be created.\\r\\n  function _mint(address account, uint256 value) internal override {\\r\\n    super._mint(account, value);\\r\\n\\r\\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\\r\\n      .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\\r\\n  }\\r\\n\\r\\n  /// @dev Internal function that burns an amount of the token of a given account.\\r\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\r\\n  /// @param account The account whose tokens will be burnt.\\r\\n  /// @param value The amount that will be burnt.\\r\\n  function _burn(address account, uint256 value) internal override {\\r\\n    super._burn(account, value);\\r\\n\\r\\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\\r\\n      .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\\r\\n  }\\r\\n\\r\\n  function _setBalance(address account, uint256 newBalance) internal {\\r\\n    uint256 currentBalance = balanceOf(account);\\r\\n\\r\\n    if(newBalance \\u003e currentBalance) {\\r\\n      uint256 mintAmount = newBalance.sub(currentBalance);\\r\\n      _mint(account, mintAmount);\\r\\n    } else if(newBalance \\u003c currentBalance) {\\r\\n      uint256 burnAmount = currentBalance.sub(newBalance);\\r\\n      _burn(account, burnAmount);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"},\"DividendPayingTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\n\\r\\n/// @title Dividend-Paying Token Interface\\r\\n/// @author Roger Wu (https://github.com/roger-wu)\\r\\n/// @dev An interface for a dividend-paying token contract.\\r\\ninterface DividendPayingTokenInterface {\\r\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n  function dividendOf(address _owner) external view returns(uint256);\\r\\n\\r\\n\\r\\n  /// @notice Withdraws the ether distributed to the sender.\\r\\n  /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\\r\\n  ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\\r\\n  function withdrawDividend() external;\\r\\n\\r\\n  /// @dev This event MUST emit when ether is distributed to token holders.\\r\\n  /// @param from The address which sends ether to this contract.\\r\\n  /// @param weiAmount The amount of distributed ether in wei.\\r\\n  event DividendsDistributed(\\r\\n    address indexed from,\\r\\n    uint256 weiAmount\\r\\n  );\\r\\n\\r\\n  /// @dev This event MUST emit when an address withdraws their dividend.\\r\\n  /// @param to The address which withdraws ether from this contract.\\r\\n  /// @param weiAmount The amount of withdrawn ether in wei.\\r\\n  event DividendWithdrawn(\\r\\n    address indexed to,\\r\\n    uint256 weiAmount\\r\\n  );\\r\\n}\\r\\n\"},\"DividendPayingTokenOptionalInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\n\\r\\n/// @title Dividend-Paying Token Optional Interface\\r\\n/// @author Roger Wu (https://github.com/roger-wu)\\r\\n/// @dev OPTIONAL functions for a dividend-paying token contract.\\r\\ninterface DividendPayingTokenOptionalInterface {\\r\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\\r\\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address has earned in total.\\r\\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\\r\\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\\r\\n}\\r\\n\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) public {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\"},\"IterableMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\nlibrary IterableMapping {\\r\\n    // Iterable mapping from address to uint;\\r\\n    struct Map {\\r\\n        address[] keys;\\r\\n        mapping(address =\\u003e uint) values;\\r\\n        mapping(address =\\u003e uint) indexOf;\\r\\n        mapping(address =\\u003e bool) inserted;\\r\\n    }\\r\\n\\r\\n    function get(Map storage map, address key) public view returns (uint) {\\r\\n        return map.values[key];\\r\\n    }\\r\\n\\r\\n    function getIndexOfKey(Map storage map, address key) public view returns (int) {\\r\\n        if(!map.inserted[key]) {\\r\\n            return -1;\\r\\n        }\\r\\n        return int(map.indexOf[key]);\\r\\n    }\\r\\n\\r\\n    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\\r\\n        return map.keys[index];\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function size(Map storage map) public view returns (uint) {\\r\\n        return map.keys.length;\\r\\n    }\\r\\n\\r\\n    function set(Map storage map, address key, uint val) public {\\r\\n        if (map.inserted[key]) {\\r\\n            map.values[key] = val;\\r\\n        } else {\\r\\n            map.inserted[key] = true;\\r\\n            map.values[key] = val;\\r\\n            map.indexOf[key] = map.keys.length;\\r\\n            map.keys.push(key);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function remove(Map storage map, address key) public {\\r\\n        if (!map.inserted[key]) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        delete map.inserted[key];\\r\\n        delete map.values[key];\\r\\n\\r\\n        uint index = map.indexOf[key];\\r\\n        uint lastIndex = map.keys.length - 1;\\r\\n        address lastKey = map.keys[lastIndex];\\r\\n\\r\\n        map.indexOf[lastKey] = index;\\r\\n        delete map.indexOf[key];\\r\\n\\r\\n        map.keys[index] = lastKey;\\r\\n        map.keys.pop();\\r\\n    }\\r\\n}\\r\\n\"},\"IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\"},\"IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\"},\"IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n// pragma solidity \\u003e=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.6.2;\\r\\n\\r\\n// SPDX-License-Identifier: MIT License\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () public {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMathInt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/*\\r\\nMIT License\\r\\n\\r\\nCopyright (c) 2018 requestnetwork\\r\\nCopyright (c) 2018 Fragments, Inc.\\r\\n\\r\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\r\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\r\\nin the Software without restriction, including without limitation the rights\\r\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\r\\ncopies of the Software, and to permit persons to whom the Software is\\r\\nfurnished to do so, subject to the following conditions:\\r\\n\\r\\nThe above copyright notice and this permission notice shall be included in all\\r\\ncopies or substantial portions of the Software.\\r\\n\\r\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\nSOFTWARE.\\r\\n*/\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\n/**\\r\\n * @title SafeMathInt\\r\\n * @dev Math operations for int256 with overflow safety checks.\\r\\n */\\r\\nlibrary SafeMathInt {\\r\\n    int256 private constant MIN_INT256 = int256(1) \\u003c\\u003c 255;\\r\\n    int256 private constant MAX_INT256 = ~(int256(1) \\u003c\\u003c 255);\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a * b;\\r\\n\\r\\n        // Detect overflow when multiplying MIN_INT256 with -1\\r\\n        require(c != MIN_INT256 || (a \\u0026 MIN_INT256) != (b \\u0026 MIN_INT256));\\r\\n        require((b == 0) || (c / b == a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Division of two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Prevent overflow when dividing MIN_INT256 by -1\\r\\n        require(b != -1 || a != MIN_INT256);\\r\\n\\r\\n        // Solidity already throws when dividing by 0.\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a - b;\\r\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003c= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003e a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a + b;\\r\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003e= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003c a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts to absolute value, and fails on overflow.\\r\\n     */\\r\\n    function abs(int256 a) internal pure returns (int256) {\\r\\n        require(a != MIN_INT256);\\r\\n        return a \\u003c 0 ? -a : a;\\r\\n    }\\r\\n\\r\\n\\r\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\r\\n        require(a \\u003e= 0);\\r\\n        return uint256(a);\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMathUint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\n/**\\r\\n * @title SafeMathUint\\r\\n * @dev Math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMathUint {\\r\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\r\\n    int256 b = int256(a);\\r\\n    require(b \\u003e= 0);\\r\\n    return b;\\r\\n  }\\r\\n}\\r\\n\"},\"Zooshi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n//\\r\\n// $Zooshi proposes an innovative feature in its contract.\\r\\n//\\r\\n// DIVIDEND YIELD PAID IN SUSHI! With the auto-claim feature,\\r\\n// simply hold $Zooshi and you\\u0027ll receive SUSHI automatically in your wallet.\\r\\n// \\r\\n// Hold Zooshi and get rewarded in Sushi on every transaction!\\r\\n//\\r\\n// \ud83d\udcf1 Telegram: https://t.me/ZooshiCoin\\r\\n// \ud83c\udf0e Website: https://zooshi.io\\r\\n// \ud83c\udf10 Twitter: https://twitter.com/zooshicoin\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\nimport \\\"./DividendPayingToken.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IterableMapping.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./IUniswapV2Router.sol\\\";\\r\\nimport \\\"./ZooshiTransferHelper.sol\\\";\\r\\n\\r\\ncontract Zooshi is ERC20, Ownable {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\r\\n\\tenum MaxWalletMode {\\r\\n\\t\\tDISABLED,\\r\\n\\t\\tHARD,\\r\\n\\t\\tTAX\\r\\n\\t}\\r\\n\\r\\n\\tstruct FeeSet {\\r\\n\\t\\tuint256 dividendsFee;\\r\\n\\t\\tuint256 marketingFee;\\r\\n\\t\\tuint256 liquidityFee;\\r\\n\\t}\\r\\n\\r\\n\\tIUniswapV2Router02 public uniswapV2Router;\\r\\n\\taddress public uniswapV2Pair;\\r\\n\\r\\n\\tbool private swapping;\\r\\n\\tuint256 private launchedAt;\\r\\n\\tbool private isTradingEnabled = true;\\r\\n\\r\\n\\tZooshiDividendTracker public dividendTracker;\\r\\n\\tZooshiTransferHelper private transferHelper;\\r\\n\\r\\n\\taddress public deadWallet = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n\\taddress public immutable SUSHI = 0x947950BcC74888a40Ffa2593C5798F11Fc9124C4;\\r\\n\\r\\n\\tuint256 public swapTokensAtAmount = 2000000 * (10 ** 18);\\r\\n\\tuint256 public _maxWalletAmount = 0;\\r\\n\\r\\n\\tmapping(address =\\u003e bool) public _isBlacklisted;\\r\\n\\tmapping(address =\\u003e bool) public _isExcludedFromMaxWallet;\\r\\n\\r\\n\\tFeeSet public buyFees;\\r\\n\\tFeeSet public sellFees;\\r\\n\\tuint256 public whaleFee = 10;\\r\\n\\r\\n\\tMaxWalletMode public maxWalletMode = MaxWalletMode.DISABLED;\\r\\n\\r\\n\\taddress public _marketingWalletAddress;\\r\\n\\r\\n\\t// use by default 400,000 gas to process auto-claiming dividends\\r\\n\\tuint256 public gasForProcessing = 400000;\\r\\n\\r\\n\\t// exlcude from fees and max transaction amount\\r\\n\\tmapping(address =\\u003e bool) private _isExcludedFromFees;\\r\\n\\r\\n\\t// store addresses that a automatic market maker pairs. Any transfer *to* these addresses\\r\\n\\t// could be subject to a maximum transfer amount\\r\\n\\tmapping(address =\\u003e bool) public automatedMarketMakerPairs;\\r\\n\\r\\n\\tevent UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\\r\\n\\tevent UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\\r\\n\\tevent ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n\\tevent SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n\\tevent LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\\r\\n\\tevent GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\r\\n\\r\\n\\tevent SendDividends(uint256 amountIn, uint256 dividends);\\r\\n\\r\\n\\tevent ProcessedDividendTracker(\\r\\n\\t\\tuint256 iterations,\\r\\n\\t\\tuint256 claims,\\r\\n\\t\\tuint256 lastProcessedIndex,\\r\\n\\t\\tbool indexed automatic,\\r\\n\\t\\tuint256 gas,\\r\\n\\t\\taddress indexed processor\\r\\n\\t);\\r\\n\\r\\n\\tconstructor(address routerAddress, address payable marketingWalletAddress) public ERC20(\\\"Zooshi\\\", \\\"ZOOSHI\\\") {\\r\\n\\t\\tdividendTracker = new ZooshiDividendTracker();\\r\\n\\t\\ttransferHelper = new ZooshiTransferHelper(routerAddress);\\r\\n\\r\\n\\t\\t// Create a uniswap pair for this new token\\r\\n\\t\\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);\\r\\n\\t\\taddress _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n\\t\\t.createPair(address(this), _uniswapV2Router.WETH());\\r\\n\\r\\n\\t\\tuniswapV2Router = _uniswapV2Router;\\r\\n\\t\\tuniswapV2Pair = _uniswapV2Pair;\\r\\n\\r\\n\\t\\t_setAutomatedMarketMakerPair(_uniswapV2Pair, true);\\r\\n\\t\\tsetMarketingWallet(marketingWalletAddress);\\r\\n\\r\\n\\t\\t// exclude from receiving dividends\\r\\n\\t\\tdividendTracker.excludeFromDividends(address(dividendTracker));\\r\\n\\t\\tdividendTracker.excludeFromDividends(address(transferHelper));\\r\\n\\t\\tdividendTracker.excludeFromDividends(address(this));\\r\\n\\t\\tdividendTracker.excludeFromDividends(owner());\\r\\n\\t\\tdividendTracker.excludeFromDividends(deadWallet);\\r\\n\\t\\tdividendTracker.excludeFromDividends(address(_uniswapV2Router));\\r\\n\\r\\n\\t\\t// exclude from paying fees or having max transaction amount\\r\\n\\t\\texcludeFromFees(owner(), true);\\r\\n\\t\\texcludeFromFees(address(this), true);\\r\\n\\t\\texcludeFromFees(address(transferHelper), true);\\r\\n\\r\\n\\t\\t// exclude from max wallet\\r\\n\\t\\texcludeFromMaxWallet(owner(), true);\\r\\n\\t\\texcludeFromMaxWallet(address(this), true);\\r\\n\\t\\texcludeFromMaxWallet(deadWallet, true);\\r\\n\\t\\texcludeFromMaxWallet(address(0), true);\\r\\n\\t\\texcludeFromMaxWallet(address(transferHelper), true);\\r\\n\\r\\n\\t\\t// set default fees (dividends, marketing, liquidity)\\r\\n\\t\\tsetBuyFees(7, 5, 3);\\r\\n\\t\\tsetSellFees(7, 5, 3);\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\t\\t_mint is an internal function in ERC20.sol that is only called here,\\r\\n\\t\\t\\tand CANNOT be called ever again\\r\\n\\t\\t*/\\r\\n\\t\\t_mint(owner(), 100000000000 * (10 ** 18));\\r\\n\\t}\\r\\n\\r\\n\\treceive() external payable {\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateDividendTracker(address newAddress) public onlyOwner {\\r\\n\\t\\trequire(newAddress != address(dividendTracker), \\\"ZOOSHI: The dividend tracker already has that address\\\");\\r\\n\\r\\n\\t\\tZooshiDividendTracker newDividendTracker = ZooshiDividendTracker(payable(newAddress));\\r\\n\\r\\n\\t\\trequire(newDividendTracker.owner() == address(this), \\\"ZOOSHI: The new dividend tracker must be owned by the ZOOSHI token contract\\\");\\r\\n\\r\\n\\t\\tnewDividendTracker.excludeFromDividends(address(newDividendTracker));\\r\\n\\t\\tnewDividendTracker.excludeFromDividends(address(this));\\r\\n\\t\\tnewDividendTracker.excludeFromDividends(owner());\\r\\n\\t\\tnewDividendTracker.excludeFromDividends(address(uniswapV2Router));\\r\\n\\r\\n\\t\\temit UpdateDividendTracker(newAddress, address(dividendTracker));\\r\\n\\r\\n\\t\\tdividendTracker = newDividendTracker;\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateUniswapV2Router(address newAddress) public onlyOwner {\\r\\n\\t\\trequire(newAddress != address(uniswapV2Router), \\\"ZOOSHI: The router already has that address\\\");\\r\\n\\t\\temit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\\r\\n\\t\\tuniswapV2Router = IUniswapV2Router02(newAddress);\\r\\n\\t\\taddress _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\\r\\n\\t\\t.createPair(address(this), uniswapV2Router.WETH());\\r\\n\\t\\tuniswapV2Pair = _uniswapV2Pair;\\r\\n\\t}\\r\\n\\r\\n\\tfunction excludeFromFees(address account, bool excluded) public onlyOwner {\\r\\n\\t\\trequire(_isExcludedFromFees[account] != excluded, \\\"ZOOSHI: Account is already the value of \\u0027excluded\\u0027\\\");\\r\\n\\t\\t_isExcludedFromFees[account] = excluded;\\r\\n\\r\\n\\t\\temit ExcludeFromFees(account, excluded);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setMarketingWallet(address payable wallet) public onlyOwner {\\r\\n\\t\\trequire(wallet != owner(), \\\"Marketing wallet cannot be the owner\\\");\\r\\n\\t\\t_marketingWalletAddress = wallet;\\r\\n\\t\\texcludeFromFees(_marketingWalletAddress, true);\\r\\n\\t\\texcludeFromMaxWallet(wallet, true);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setBuyFees(uint256 _dividendsFee, uint256 _marketingFee, uint256 _liquidityFee) public onlyOwner {\\r\\n\\t\\tbuyFees = FeeSet({\\r\\n\\t\\t\\tdividendsFee: _dividendsFee,\\r\\n\\t\\t\\tmarketingFee: _marketingFee,\\r\\n\\t\\t\\tliquidityFee: _liquidityFee\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\tfunction setSellFees(uint256 _dividendsFee, uint256 _marketingFee, uint256 _liquidityFee) public onlyOwner {\\r\\n\\t\\tsellFees = FeeSet({\\r\\n\\t\\t\\tdividendsFee: _dividendsFee,\\r\\n\\t\\t\\tmarketingFee: _marketingFee,\\r\\n\\t\\t\\tliquidityFee: _liquidityFee\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\tfunction setWhaleFee(uint256 _whaleFee) public onlyOwner {\\r\\n\\t\\twhaleFee = _whaleFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getSumOfFeeSet(FeeSet memory set) private pure returns (uint256) {\\r\\n\\t\\treturn set.dividendsFee.add(set.marketingFee).add(set.liquidityFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getSumOfBuyFees() public view returns (uint256) {\\r\\n\\t\\treturn getSumOfFeeSet(buyFees);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getSumOfSellFees() public view returns (uint256) {\\r\\n\\t\\treturn getSumOfFeeSet(sellFees);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setMaxWalletMode(MaxWalletMode mode) public onlyOwner {\\r\\n\\t\\tmaxWalletMode = mode;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\\r\\n\\t\\trequire(pair != uniswapV2Pair, \\\"ZOOSHI: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\\\");\\r\\n\\t\\t_setAutomatedMarketMakerPair(pair, value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction blacklistAddress(address account, bool value) external onlyOwner {\\r\\n\\t\\t_isBlacklisted[account] = value;\\r\\n\\t}\\r\\n\\r\\n\\tfunction excludeFromMaxWallet(address account, bool value) public onlyOwner {\\r\\n\\t\\t_isExcludedFromMaxWallet[account] = value;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setMaxWalletAmount(uint256 amount) public onlyOwner {\\r\\n\\t\\trequire(amount \\u003c= totalSupply(), \\\"ZOOSHI: Amount cannot be over the total supply.\\\");\\r\\n\\t\\t_maxWalletAmount = amount;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getMaxWalletAmount() public view returns (uint256) {\\r\\n\\t\\treturn _maxWalletAmount;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setIsTradingEnabled(bool value) external onlyOwner {\\r\\n\\t\\tisTradingEnabled = value;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n\\t\\trequire(automatedMarketMakerPairs[pair] != value, \\\"ZOOSHI: Automated market maker pair is already set to that value\\\");\\r\\n\\t\\tautomatedMarketMakerPairs[pair] = value;\\r\\n\\r\\n\\t\\tif (value) {\\r\\n\\t\\t\\tdividendTracker.excludeFromDividends(pair);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit SetAutomatedMarketMakerPair(pair, value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateGasForProcessing(uint256 newValue) public onlyOwner {\\r\\n\\t\\trequire(newValue \\u003e= 200000 \\u0026\\u0026 newValue \\u003c= 500000, \\\"ZOOSHI: gasForProcessing must be between 200,000 and 500,000\\\");\\r\\n\\t\\trequire(newValue != gasForProcessing, \\\"ZOOSHI: Cannot update gasForProcessing to same value\\\");\\r\\n\\t\\temit GasForProcessingUpdated(newValue, gasForProcessing);\\r\\n\\t\\tgasForProcessing = newValue;\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateClaimWait(uint256 claimWait) external onlyOwner {\\r\\n\\t\\tdividendTracker.updateClaimWait(claimWait);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getClaimWait() external view returns (uint256) {\\r\\n\\t\\treturn dividendTracker.claimWait();\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTotalDividendsDistributed() external view returns (uint256) {\\r\\n\\t\\treturn dividendTracker.totalDividendsDistributed();\\r\\n\\t}\\r\\n\\r\\n\\tfunction isExcludedFromFees(address account) public view returns (bool) {\\r\\n\\t\\treturn _isExcludedFromFees[account];\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdrawableDividendOf(address account) public view returns (uint256) {\\r\\n\\t\\treturn dividendTracker.withdrawableDividendOf(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction dividendTokenBalanceOf(address account) public view returns (uint256) {\\r\\n\\t\\treturn dividendTracker.balanceOf(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction excludeFromDividends(address account) external onlyOwner {\\r\\n\\t\\tdividendTracker.excludeFromDividends(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getAccountDividendsInfo(address account) external view returns (address, int256, int256, uint256, uint256, uint256, uint256, uint256) {\\r\\n\\t\\treturn dividendTracker.getAccount(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getAccountDividendsInfoAtIndex(uint256 index) external view returns (address, int256, int256, uint256, uint256, uint256, uint256, uint256) {\\r\\n\\t\\treturn dividendTracker.getAccountAtIndex(index);\\r\\n\\t}\\r\\n\\r\\n\\tfunction processDividendTracker(uint256 gas) external {\\r\\n\\t\\t(uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\\r\\n\\t\\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\\r\\n\\t}\\r\\n\\r\\n\\tfunction claim() external {\\r\\n\\t\\tdividendTracker.processAccount(msg.sender, false);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getLastProcessedIndex() external view returns (uint256) {\\r\\n\\t\\treturn dividendTracker.getLastProcessedIndex();\\r\\n\\t}\\r\\n\\r\\n\\tfunction getNumberOfDividendTokenHolders() external view returns (uint256) {\\r\\n\\t\\treturn dividendTracker.getNumberOfTokenHolders();\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transfer(address _from, address _to, uint256 _amount) internal override {\\r\\n\\t\\trequire(_from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n\\t\\trequire(_to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\t\\trequire(!_isBlacklisted[_from] \\u0026\\u0026 !_isBlacklisted[_to], \\\"Blacklisted address\\\");\\r\\n\\t\\trequire(isTradingEnabled, \\\"Trading is disabled\\\");\\r\\n\\r\\n\\t\\tif (launchedAt == 0 \\u0026\\u0026 _from == owner() \\u0026\\u0026 automatedMarketMakerPairs[_to]) {\\r\\n\\t\\t\\tlaunchedAt = block.number;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (_amount == 0) {\\r\\n\\t\\t\\tsuper._transfer(_from, _to, 0);\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// enforce hard max wallet if enabled\\r\\n\\t\\tif (maxWalletMode == MaxWalletMode.HARD \\u0026\\u0026 !automatedMarketMakerPairs[_to] \\u0026\\u0026 !_isExcludedFromMaxWallet[_to]) {\\r\\n\\t\\t\\trequire(balanceOf(_to).add(_amount) \\u003c= _maxWalletAmount, \\\"You are transferring too many tokens, please try to transfer a smaller amount\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// process fees stored in contract\\r\\n\\t\\tuint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\t\\tbool canSwap = contractTokenBalance \\u003e= swapTokensAtAmount;\\r\\n\\r\\n\\t\\tif (canSwap \\u0026\\u0026 !swapping \\u0026\\u0026 !automatedMarketMakerPairs[_from] \\u0026\\u0026 _from != owner() \\u0026\\u0026 _to != owner()) {\\r\\n\\t\\t\\tswapping = true;\\r\\n\\t\\t\\tprocessFees(contractTokenBalance);\\r\\n\\t\\t\\tswapping = false;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// process transaction tax\\r\\n\\t\\tbool takeFee = !swapping \\u0026\\u0026 !_isExcludedFromFees[_from] \\u0026\\u0026 !_isExcludedFromFees[_to];\\r\\n\\r\\n\\t\\tif (takeFee) {\\r\\n\\t\\t\\tuint256 feePercent = automatedMarketMakerPairs[_to] ? getSumOfSellFees() : getSumOfBuyFees();\\r\\n\\r\\n\\t\\t\\t// collect whale tax\\r\\n\\t\\t\\tif (maxWalletMode == MaxWalletMode.TAX \\u0026\\u0026 !automatedMarketMakerPairs[_to] \\u0026\\u0026 !_isExcludedFromMaxWallet[_to]) {\\r\\n\\t\\t\\t\\tif (balanceOf(_to).add(_amount) \\u003e _maxWalletAmount) {\\r\\n\\t\\t\\t\\t\\tfeePercent += whaleFee;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (feePercent \\u003e 0) {\\r\\n\\t\\t\\t\\tif (block.number \\u003c= (launchedAt + 1) \\u0026\\u0026 automatedMarketMakerPairs[_from] \\u0026\\u0026 _to != address(uniswapV2Router) \\u0026\\u0026 _to != address(this) \\u0026\\u0026 _to != owner()) {\\r\\n\\t\\t\\t\\t\\tfeePercent = 90;\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tuint256 fees = _amount.mul(feePercent).div(100);\\r\\n\\t\\t\\t\\t_amount = _amount.sub(fees);\\r\\n\\t\\t\\t\\tsuper._transfer(_from, address(this), fees);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// transfer remaining amount as standard\\r\\n\\t\\tsuper._transfer(_from, _to, _amount);\\r\\n\\r\\n\\t\\t// update tracked dividends\\r\\n\\t\\ttry dividendTracker.setBalance(payable(_from), balanceOf(_from)) {} catch {}\\r\\n\\t\\ttry dividendTracker.setBalance(payable(_to), balanceOf(_to)) {} catch {}\\r\\n\\r\\n\\t\\t// attempt dividend distribution\\r\\n\\t\\tif (!swapping) {\\r\\n\\t\\t\\tuint256 gas = gasForProcessing;\\r\\n\\r\\n\\t\\t\\ttry dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\\r\\n\\t\\t\\t\\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\\r\\n\\t\\t\\t} catch {}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction processFees(uint256 amountIn) private {\\r\\n\\t\\tuint256 totalFees = getSumOfBuyFees();\\r\\n\\t\\tif (totalFees == 0) return;\\r\\n\\r\\n\\t\\tuint256 amountOut = swapExactTokensForETH(amountIn);\\r\\n\\t\\tuint256 ethForDividends = amountOut.mul(buyFees.dividendsFee).div(totalFees);\\r\\n\\t\\tuint256 ethForMarketing = amountOut.mul(buyFees.marketingFee).div(totalFees);\\r\\n\\t\\tuint256 ethForLiquidity = amountOut.sub(ethForDividends).sub(ethForMarketing);\\r\\n\\r\\n\\t\\tif (ethForDividends \\u003e 0) {\\r\\n\\t\\t\\tswapAndSendDividends(ethForDividends);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (ethForMarketing \\u003e 0) {\\r\\n\\t\\t\\tpayable(_marketingWalletAddress).transfer(ethForMarketing);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (ethForLiquidity \\u003e 0) {\\r\\n\\t\\t\\tswapAndLiquify(ethForLiquidity);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction swapAndSendDividends(uint256 amountIn) private {\\r\\n\\t\\tuint256 dividends = swapExactETHForTokens(amountIn, SUSHI);\\r\\n\\r\\n\\t\\tbool success = IERC20(SUSHI).transfer(address(dividendTracker), dividends);\\r\\n\\r\\n\\t\\tif (success) {\\r\\n\\t\\t\\tdividendTracker.distributeCAKEDividends(dividends);\\r\\n\\t\\t\\temit SendDividends(amountIn, dividends);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction swapAndLiquify(uint256 amountIn) private {\\r\\n\\t\\tuint256 halfForEth = amountIn.div(2);\\r\\n\\t\\tuint256 halfForTokens = amountIn.sub(halfForEth);\\r\\n\\r\\n\\t\\tuint256 tokensOut = swapExactETHForTokens(halfForTokens, address(this));\\r\\n\\t\\t_approve(address(this), address(uniswapV2Router), tokensOut);\\r\\n\\t\\tuniswapV2Router.addLiquidityETH{value: halfForEth}(address(this), tokensOut, 0, 0, address(0), block.timestamp);\\r\\n\\t}\\r\\n\\r\\n\\tfunction swapExactTokensForETH(uint256 amountIn) private returns (uint256) {\\r\\n\\t\\taddress[] memory path = new address[](2);\\r\\n\\t\\tpath[0] = address(this);\\r\\n\\t\\tpath[1] = uniswapV2Router.WETH();\\r\\n\\r\\n\\t\\t_approve(address(this), address(uniswapV2Router), amountIn);\\r\\n\\r\\n\\t\\tuint256 previousBalance = address(this).balance;\\r\\n\\t\\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, 0, path, address(this), block.timestamp);\\r\\n\\t\\treturn address(this).balance.sub(previousBalance);\\r\\n\\t}\\r\\n\\r\\n\\tfunction swapExactETHForTokens(uint256 amountIn, address tokenAddress) private returns (uint256) {\\r\\n\\t\\treturn transferHelper.buy{value: amountIn}(tokenAddress);\\r\\n\\t}\\r\\n\\r\\n\\tfunction recover() external onlyOwner {\\r\\n\\t\\tpayable(owner()).transfer(address(this).balance);\\r\\n\\t}\\r\\n}\\r\\n\\r\\ncontract ZooshiDividendTracker is Ownable, DividendPayingToken {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\tusing SafeMathInt for int256;\\r\\n\\tusing IterableMapping for IterableMapping.Map;\\r\\n\\r\\n\\tIterableMapping.Map private tokenHoldersMap;\\r\\n\\tuint256 public lastProcessedIndex;\\r\\n\\r\\n\\tmapping(address =\\u003e bool) public excludedFromDividends;\\r\\n\\r\\n\\tmapping(address =\\u003e uint256) public lastClaimTimes;\\r\\n\\r\\n\\tuint256 public claimWait = 3600;\\r\\n\\tuint256 public immutable minimumTokenBalanceForDividends = 200000 * (10 ** 18);\\r\\n\\r\\n\\tevent ExcludeFromDividends(address indexed account);\\r\\n\\tevent ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\r\\n\\r\\n\\tevent Claim(address indexed account, uint256 amount, bool indexed automatic);\\r\\n\\r\\n\\tconstructor() public DividendPayingToken(\\\"ZOOSHI_Dividend_Tracker\\\", \\\"ZOOSHI_Dividend_Tracker\\\") {\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transfer(address, address, uint256) internal override {\\r\\n\\t\\trequire(false, \\\"ZOOSHI_Dividend_Tracker: No transfers allowed\\\");\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdrawDividend() public override {\\r\\n\\t\\trequire(false, \\\"ZOOSHI_Dividend_Tracker: withdrawDividend disabled. Use the \\u0027claim\\u0027 function on the main ZOOSHI contract.\\\");\\r\\n\\t}\\r\\n\\r\\n\\tfunction excludeFromDividends(address account) external onlyOwner {\\r\\n\\t\\trequire(!excludedFromDividends[account]);\\r\\n\\t\\texcludedFromDividends[account] = true;\\r\\n\\r\\n\\t\\t_setBalance(account, 0);\\r\\n\\t\\ttokenHoldersMap.remove(account);\\r\\n\\r\\n\\t\\temit ExcludeFromDividends(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateClaimWait(uint256 newClaimWait) external onlyOwner {\\r\\n\\t\\trequire(newClaimWait \\u003e= 3600 \\u0026\\u0026 newClaimWait \\u003c= 86400, \\\"ZOOSHI_Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\\\");\\r\\n\\t\\trequire(newClaimWait != claimWait, \\\"ZOOSHI_Dividend_Tracker: Cannot update claimWait to same value\\\");\\r\\n\\t\\temit ClaimWaitUpdated(newClaimWait, claimWait);\\r\\n\\t\\tclaimWait = newClaimWait;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getLastProcessedIndex() external view returns (uint256) {\\r\\n\\t\\treturn lastProcessedIndex;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getNumberOfTokenHolders() external view returns (uint256) {\\r\\n\\t\\treturn tokenHoldersMap.keys.length;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getAccount(address _account) public view returns (\\r\\n\\t\\taddress account,\\r\\n\\t\\tint256 index,\\r\\n\\t\\tint256 iterationsUntilProcessed,\\r\\n\\t\\tuint256 withdrawableDividends,\\r\\n\\t\\tuint256 totalDividends,\\r\\n\\t\\tuint256 lastClaimTime,\\r\\n\\t\\tuint256 nextClaimTime,\\r\\n\\t\\tuint256 secondsUntilAutoClaimAvailable\\r\\n\\t) {\\r\\n\\t\\taccount = _account;\\r\\n\\r\\n\\t\\tindex = tokenHoldersMap.getIndexOfKey(account);\\r\\n\\r\\n\\t\\titerationsUntilProcessed = - 1;\\r\\n\\r\\n\\t\\tif (index \\u003e= 0) {\\r\\n\\t\\t\\tif (uint256(index) \\u003e lastProcessedIndex) {\\r\\n\\t\\t\\t\\titerationsUntilProcessed = index.sub(int256(lastProcessedIndex));\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tuint256 processesUntilEndOfArray = tokenHoldersMap.keys.length \\u003e lastProcessedIndex ? tokenHoldersMap.keys.length.sub(lastProcessedIndex) : 0;\\r\\n\\t\\t\\t\\titerationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\twithdrawableDividends = withdrawableDividendOf(account);\\r\\n\\t\\ttotalDividends = accumulativeDividendOf(account);\\r\\n\\r\\n\\t\\tlastClaimTime = lastClaimTimes[account];\\r\\n\\r\\n\\t\\tnextClaimTime = lastClaimTime \\u003e 0 ? lastClaimTime.add(claimWait) : 0;\\r\\n\\r\\n\\t\\tsecondsUntilAutoClaimAvailable = nextClaimTime \\u003e block.timestamp ? nextClaimTime.sub(block.timestamp) : 0;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getAccountAtIndex(uint256 index) public view returns (address, int256, int256, uint256, uint256, uint256, uint256, uint256) {\\r\\n\\t\\tif (index \\u003e= tokenHoldersMap.size()) {\\r\\n\\t\\t\\treturn (address(0), - 1, - 1, 0, 0, 0, 0, 0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn getAccount(tokenHoldersMap.getKeyAtIndex(index));\\r\\n\\t}\\r\\n\\r\\n\\tfunction canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\\r\\n\\t\\tif (lastClaimTime \\u003e block.timestamp) {\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn block.timestamp.sub(lastClaimTime) \\u003e= claimWait;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setBalance(address payable account, uint256 newBalance) external onlyOwner {\\r\\n\\t\\tif (excludedFromDividends[account]) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (newBalance \\u003e= minimumTokenBalanceForDividends) {\\r\\n\\t\\t\\t_setBalance(account, newBalance);\\r\\n\\t\\t\\ttokenHoldersMap.set(account, newBalance);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\t_setBalance(account, 0);\\r\\n\\t\\t\\ttokenHoldersMap.remove(account);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tprocessAccount(account, true);\\r\\n\\t}\\r\\n\\r\\n\\tfunction process(uint256 gas) public returns (uint256, uint256, uint256) {\\r\\n\\t\\tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\\r\\n\\r\\n\\t\\tif (numberOfTokenHolders == 0) {\\r\\n\\t\\t\\treturn (0, 0, lastProcessedIndex);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 _lastProcessedIndex = lastProcessedIndex;\\r\\n\\r\\n\\t\\tuint256 gasUsed = 0;\\r\\n\\r\\n\\t\\tuint256 gasLeft = gasleft();\\r\\n\\r\\n\\t\\tuint256 iterations = 0;\\r\\n\\t\\tuint256 claims = 0;\\r\\n\\r\\n\\t\\twhile (gasUsed \\u003c gas \\u0026\\u0026 iterations \\u003c numberOfTokenHolders) {\\r\\n\\t\\t\\t_lastProcessedIndex++;\\r\\n\\r\\n\\t\\t\\tif (_lastProcessedIndex \\u003e= tokenHoldersMap.keys.length) {\\r\\n\\t\\t\\t\\t_lastProcessedIndex = 0;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\\r\\n\\r\\n\\t\\t\\tif (canAutoClaim(lastClaimTimes[account])) {\\r\\n\\t\\t\\t\\tif (processAccount(payable(account), true)) {\\r\\n\\t\\t\\t\\t\\tclaims++;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\titerations++;\\r\\n\\r\\n\\t\\t\\tuint256 newGasLeft = gasleft();\\r\\n\\r\\n\\t\\t\\tif (gasLeft \\u003e newGasLeft) {\\r\\n\\t\\t\\t\\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tgasLeft = newGasLeft;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlastProcessedIndex = _lastProcessedIndex;\\r\\n\\r\\n\\t\\treturn (iterations, claims, lastProcessedIndex);\\r\\n\\t}\\r\\n\\r\\n\\tfunction processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\\r\\n\\t\\tuint256 amount = _withdrawDividendOfUser(account);\\r\\n\\r\\n\\t\\tif (amount \\u003e 0) {\\r\\n\\t\\t\\tlastClaimTimes[account] = block.timestamp;\\r\\n\\t\\t\\temit Claim(account, amount, automatic);\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn false;\\r\\n\\t}\\r\\n}\\r\\n\"},\"ZooshiTransferHelper.sol\":{\"content\":\"pragma solidity ^0.6.2;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IUniswapV2Router.sol\\\";\\r\\n\\r\\ncontract ZooshiTransferHelper is Ownable {\\r\\n\\tIUniswapV2Router02 uniswapV2Router;\\r\\n\\r\\n\\tconstructor(address routerAddress) public {\\r\\n\\t\\tuniswapV2Router = IUniswapV2Router02(routerAddress);\\r\\n\\t}\\r\\n\\r\\n\\tfunction buy(address tokenAddress) public payable onlyOwner returns (uint256) {\\r\\n\\t\\taddress self = address(this);\\r\\n\\t\\tIERC20 token = IERC20(tokenAddress);\\r\\n\\r\\n\\t\\t// create swap path\\r\\n\\t\\taddress[] memory path = new address[](2);\\r\\n\\t\\tpath[0] = uniswapV2Router.WETH();\\r\\n\\t\\tpath[1] = tokenAddress;\\r\\n\\r\\n\\t\\t// buy tokens\\r\\n\\t\\tuint256 previousBalance = token.balanceOf(self);\\r\\n\\t\\tuniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(0, path, self, block.timestamp);\\r\\n\\t\\tuint256 amountOut = token.balanceOf(self) - previousBalance;\\r\\n\\r\\n\\t\\t// transfer back to owner address\\r\\n\\t\\tuint256 previousTokenBalance = token.balanceOf(owner());\\r\\n\\t\\trequire(token.transfer(owner(), amountOut), \\\"Token transfer failed.\\\");\\r\\n\\t\\treturn token.balanceOf(owner()) - previousTokenBalance;\\r\\n\\t}\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"marketingWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SUSHI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dividendsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract ZooshiDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSumOfBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSumOfSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletMode\",\"outputs\":[{\"internalType\":\"enum Zooshi.MaxWalletMode\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dividendsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dividendsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsTradingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Zooshi.MaxWalletMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"setMaxWalletMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dividendsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_whaleFee\",\"type\":\"uint256\"}],\"name\":\"setWhaleFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whaleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Zooshi", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000a349ff75e2672683580bb4f328f94c8b9d0cef93", "EVMVersion": "Default", "Library": "IterableMapping:6cd643ad118dee382785fe8e457a6ac4d2b89889", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://807599027a147ab57f74bf74c0a0ec686dc8b3f08057fc5ccd75d198b2da3c85"}