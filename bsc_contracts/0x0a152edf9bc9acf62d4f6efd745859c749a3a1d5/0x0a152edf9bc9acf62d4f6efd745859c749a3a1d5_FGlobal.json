{"SourceCode": "pragma solidity >= 0.5.0;\r\n\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  \r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function burn(uint256 value) external returns (bool);\r\n  event Transfer(address indexed from,address indexed to,uint256 value);\r\n  event Approval(address indexed owner,address indexed spender,uint256 value);\r\n}\r\n\r\ncontract FGlobal{\r\n  \r\n   \tevent Staking(string  investorId,uint256 investment,address indexed investor);\r\n\tevent WithDraw(string  WithId,address indexed  investor,uint256 WithAmt);\r\n\tevent WithDrawMulti(uint256  investorId,address indexed  investor,uint256 WithAmt,uint256 WithId);\r\n\t\r\n\r\n    using SafeMath for uint256;\r\n    IBEP20 private FGC; \r\n    address public owner;\r\n \r\n   \r\n    constructor(address ownerAddress,IBEP20 _FGC) public\r\n    {\r\n        owner = ownerAddress;  \r\n        FGC = _FGC;\r\n     }\r\n    \r\n  \r\n\r\n\tfunction Invest(string memory investorId,uint256 investment) public payable\r\n\t{\r\n\t    require(FGC.balanceOf(msg.sender)>=investment);\r\n\t\trequire(FGC.allowance(msg.sender,address(this))>=investment,\"Approve Your Token First\");\r\n\t\tFGC.transferFrom(msg.sender ,owner,investment);\r\n\t\temit Staking( investorId,investment,msg.sender);\r\n\t}\r\n\r\n    function multisendBNB(address payable[]  memory  _contributors, uint256[] memory _balances) public payable {\r\n        uint256 total = msg.value;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= _balances[i] );\r\n            total = total.sub(_balances[i]);\r\n            _contributors[i].transfer(_balances[i]);\r\n        }\r\n       \r\n    }\r\n    \r\n    function multisendToken(address payable[]  memory  _contributors, uint256[] memory _balances, uint256 totalQty,uint256[] memory WithId,uint256[]  memory  _investorId) public payable {\r\n    \tuint256 total = totalQty;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= _balances[i]);\r\n            total = total.sub(_balances[i]);\r\n            FGC.transferFrom(msg.sender, _contributors[i], _balances[i]);\r\n\t\t\temit WithDrawMulti( _investorId[i], _contributors[i],_balances[i],WithId[i]);\r\n        }\r\n\t\r\n        \r\n    }\r\n    \r\n\t function multisendWithdraw(address payable[]  memory  _contributors, uint256[] memory _balances) public payable {\r\n    \trequire(msg.sender == owner, \"onlyOwner\");\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n              FGC.transfer(_contributors[i], _balances[i]);\r\n        }\r\n        \r\n    }\r\n\r\n\t \r\n    \r\n    function withdrawLostBNBFromBalance(address payable _sender) public {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        _sender.transfer(address(this).balance);\r\n    }\r\n    \r\n    function withdrawincome(string memory WithId,address payable _userAddress,uint256 WithAmt) public {\r\n         FGC.transferFrom(msg.sender,_userAddress, WithAmt);\r\n        emit WithDraw(WithId,_userAddress,WithAmt);\r\n    }\r\n     \r\n\tfunction withdrawLostTokenFromBalance(uint QtyAmt) public \r\n\t{\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        FGC.transfer(owner,QtyAmt);\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n/**     \r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a); \r\n    return c;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_FGC\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"investorId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"Staking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"WithId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WithAmt\",\"type\":\"uint256\"}],\"name\":\"WithDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investorId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WithAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WithId\",\"type\":\"uint256\"}],\"name\":\"WithDrawMulti\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"investorId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendBNB\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"WithId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_investorId\",\"type\":\"uint256[]\"}],\"name\":\"multisendToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendWithdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"withdrawLostBNBFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"QtyAmt\",\"type\":\"uint256\"}],\"name\":\"withdrawLostTokenFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"WithId\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"WithAmt\",\"type\":\"uint256\"}],\"name\":\"withdrawincome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FGlobal", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c95e9785e8934e2ad283af8a8b1ee292f256cb0f000000000000000000000000a5edc3d0d0e0a170dfc2fb6d4cfb6b8db1976e20", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://6e36414e094b4c601ec6269d1a8b27386845b74b775be3e440a7bfbbd659b196"}