{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    // \u8fd4\u56de\u5b58\u5728\u7684\u4ee3\u5e01\u6570\u91cf\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    // \u8fd4\u56de account \u62e5\u6709\u7684\u4ee3\u5e01\u6570\u91cf\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    // \u5c06 amount \u4ee3\u5e01\u4ece\u8c03\u7528\u8005\u8d26\u6237\u79fb\u52a8\u5230 recipient\r\n    // \u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u8868\u793a\u64cd\u4f5c\u662f\u5426\u6210\u529f\r\n    // \u53d1\u51fa {Transfer} \u4e8b\u4ef6\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    // \u8fd4\u56de spender \u5141\u8bb8 owner \u901a\u8fc7 {transferFrom}\u6d88\u8d39\u5269\u4f59\u7684\u4ee3\u5e01\u6570\u91cf\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    // \u8c03\u7528\u8005\u8bbe\u7f6e spender \u6d88\u8d39\u81ea\u5df1amount\u6570\u91cf\u7684\u4ee3\u5e01\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    // \u5c06amount\u6570\u91cf\u7684\u4ee3\u5e01\u4ece sender \u79fb\u52a8\u5230 recipient \uff0c\u4ece\u8c03\u7528\u8005\u7684\u8d26\u6237\u6263\u9664 amount\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    // \u5f53value\u6570\u91cf\u7684\u4ee3\u5e01\u4ece\u4e00\u4e2aform\u8d26\u6237\u79fb\u52a8\u5230\u53e6\u4e00\u4e2ato\u8d26\u6237\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    // \u5f53\u8c03\u7528{approve}\u65f6\uff0c\u89e6\u53d1\u8be5\u4e8b\u4ef6\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    // \u8fd4\u56de\u4ee3\u5e01\u540d\u79f0\r\n    function name() external view returns (string memory);\r\n\r\n    // \u8fd4\u56de\u4ee3\u5e01\u7b26\u53f7\r\n    function symbol() external view returns (string memory);\r\n\r\n    // \u8fd4\u56de\u4ee3\u5e01\u7684\u7cbe\u5ea6\uff08\u5c0f\u6570\u4f4d\u6570\uff09\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IUniswapRouter {\r\n     function factory() external view returns (address);\r\n    function WETH() external view returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapFactory {\r\n     event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function expectPairFor(address token0, address token1) external view returns (address);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n\r\n    function INIT_CODE_PAIR_HASH() external pure returns (bytes32);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract FLASHERC20 is Context, IERC20, IERC20Metadata, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    mapping(address => bool) public isTxFeeExempt;\r\n    mapping(address => bool) public isTxLimitExempt;\r\n    mapping(address => bool) public isMarketPair;\r\n\r\n    uint256 constant _baseFee = 100;\r\n    uint256 private _sellMarketingFee = 0;\r\n\r\n    uint256 private _destroyFee = 5;\r\n    uint256 private _reflowUsdtFee = 10;\r\n    uint256 private _reflowLpFee = 0;\r\n    uint256 private _lpDividendFee = 0;\r\n    uint256 private _foundingFee = 0;\r\n    uint256 private _marketingFee = 0;\r\n    uint256 private _luckyFee = 0;\r\n    uint256 private _totalFee = 15;\r\n    uint256 private _totalSellFee = 15;\r\n\r\n    address public _luckyAddress = 0x9AcC8B37E51C508Af9d18ceB534C28A8a4aacc66;\r\n    address public _marketingAddress =\r\n        0x53a9C06ceABB2a88c7a08acbC34Af0f4A9dBB10a;\r\n    address public _foundingAddress =\r\n        0x53a9C06ceABB2a88c7a08acbC34Af0f4A9dBB10a;\r\n    address public _lpDividendAddress =\r\n        0x53a9C06ceABB2a88c7a08acbC34Af0f4A9dBB10a;\r\n    address public _reflowAddres = 0x53a9C06ceABB2a88c7a08acbC34Af0f4A9dBB10a;\r\n    uint256 public _sellLimitRatio = 99;\r\n    address public uniswapPair;\r\n    IUniswapRouter uniswapRouter;\r\n    uint256 private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, \"FLASH: LOCKED\");\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    constructor(\r\n       \r\n    ) {\r\n        _name = \"FLASH\";\r\n        _symbol = \"FLASH\";\r\n        uniswapRouter = IUniswapRouter(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n        uniswapPair = IUniswapFactory(uniswapRouter.factory()).createPair(\r\n            address(this),\r\n            0x55d398326f99059fF775485246999027B3197955\r\n        );\r\n        isMarketPair[address(uniswapPair)] = true;\r\n        isTxFeeExempt[msg.sender] = true;\r\n        isTxFeeExempt[address(this)] = true;\r\n        isTxFeeExempt[_luckyAddress] = true;\r\n        isTxFeeExempt[_marketingAddress] = true;\r\n        isTxFeeExempt[_foundingAddress] = true;\r\n        isTxFeeExempt[_lpDividendAddress] = true;\r\n        isTxFeeExempt[_reflowAddres] = true;\r\n\r\n        isTxLimitExempt[address(uniswapPair)] = true;\r\n        isTxLimitExempt[msg.sender] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[_luckyAddress] = true;\r\n        isTxLimitExempt[_marketingAddress] = true;\r\n        isTxLimitExempt[_foundingAddress] = true;\r\n        isTxLimitExempt[_lpDividendAddress] = true;\r\n        isTxLimitExempt[_reflowAddres] = true;\r\n\r\n        _totalSupply = 90000000 * 10**18;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n        // _burn(initialAddress_, initialDestroyAmount_ * 10**18);\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function validSellLimit(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal view returns (bool) {\r\n        if (!isMarketPair[recipient]) {\r\n            return true;\r\n        }\r\n        if (isTxLimitExempt[sender]) {\r\n            return true;\r\n        }\r\n        uint256 sellMaxAmount = _balances[sender].mul(_sellLimitRatio).div(\r\n            _baseFee\r\n        );\r\n        return sellMaxAmount >= amount;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(\r\n            validSellLimit(sender, recipient, amount),\r\n            \"ERC20: Exceeding the maximum selling limit\"\r\n        );\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        uint256 finalAmount = takeFinalAmount(sender, recipient, amount);\r\n        _balances[recipient] += finalAmount;\r\n        emit Transfer(sender, recipient, finalAmount);\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function takeFinalAmount(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        if (isTxFeeExempt[sender] || isTxFeeExempt[recipient]) {\r\n            return amount;\r\n        }\r\n        uint256 feeAmount;\r\n        if (isMarketPair[recipient]) {//\u5356\r\n            feeAmount = amount.mul(_totalSellFee).div(_baseFee);\r\n        } else if (isMarketPair[sender]){//\u4e70\r\n            feeAmount = amount.mul(_totalFee).div(_baseFee);\r\n        }\r\n        //\u666e\u901a\u8f6c\u8d26\u4e0d\u6263\r\n        if (feeAmount > 0) {\r\n            _sellMarketingFeeHandler(sender, recipient, amount);\r\n            _destroyFeeHandler(sender, amount);\r\n            _reflowUsdtHandler(sender, amount);\r\n            _reflowLpHandler(sender, amount);\r\n            _lpDividendHandler(sender, amount);\r\n            _marketingHandler(sender, amount);\r\n            _foundingHandler(sender, amount);\r\n            _luckyHandler(sender, amount);\r\n        }\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function _sellMarketingFeeHandler(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        if (isMarketPair[recipient]) {\r\n            uint256 _feeAmount = amount.mul(_sellMarketingFee).div(_baseFee);\r\n            if (_feeAmount > 0) {\r\n                _balances[_marketingAddress] += _feeAmount;\r\n                emit Transfer(sender, _marketingAddress, _feeAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    //\u9500\u6bc1\r\n    function _destroyFeeHandler(address sender, uint256 amount) internal lock {\r\n        uint256 _feeAmount = amount.mul(_destroyFee).div(_baseFee);\r\n        if (_feeAmount > 0) {\r\n            if (_feeAmount > 0) {\r\n                _balances[address(this)] += _feeAmount;\r\n                emit Transfer(sender, address(this), _feeAmount);\r\n                _burn(address(this), _feeAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n   \r\n\r\n    //\u56de\u6d41usdt\r\n    function _reflowUsdtHandler(address sender, uint256 amount) internal {\r\n        uint256 _feeAmount = amount.mul(_reflowUsdtFee).div(_baseFee);\r\n        if (_feeAmount == 0) {\r\n            return;\r\n        }\r\n        _balances[_reflowAddres] += _feeAmount;\r\n        emit Transfer(sender, _reflowAddres, _feeAmount);\r\n        if (!isMarketPair[sender]) {\r\n            uint256 swapAmount = _balances[_reflowAddres];\r\n            _balances[_reflowAddres] = 0;\r\n            _balances[address(this)] += swapAmount;\r\n            emit Transfer(_reflowAddres, address(this), swapAmount);\r\n            _swapTokensForToken(swapAmount, _reflowAddres);\r\n        }\r\n    }\r\n\r\n    //\u56de\u6d41\r\n    function _reflowLpHandler(address sender, uint256 amount) internal {\r\n        uint256 _flowLpAmount = amount.mul(_reflowLpFee).div(_baseFee);\r\n        if (_flowLpAmount > 0) {\r\n            _balances[address(uniswapPair)] += _flowLpAmount;\r\n            emit Transfer(sender, address(uniswapPair), _flowLpAmount);\r\n        }\r\n    }\r\n\r\n    function _lpDividendHandler(address sender, uint256 amount) internal {\r\n        uint256 _feeAmount = amount.mul(_lpDividendFee).div(_baseFee);\r\n        if (_feeAmount == 0) {\r\n            return;\r\n        }\r\n        _balances[_lpDividendAddress] += _feeAmount;\r\n        emit Transfer(sender, _lpDividendAddress, _feeAmount);\r\n        if (!isMarketPair[sender]) {\r\n            uint256 swapAmount = _balances[_lpDividendAddress];\r\n            _balances[_lpDividendAddress] = 0;\r\n            _balances[address(this)] += swapAmount;\r\n            emit Transfer(_lpDividendAddress, address(this), swapAmount);\r\n            _swapTokensForToken(swapAmount, _lpDividendAddress);\r\n        }\r\n    }\r\n\r\n    function _marketingHandler(address sender, uint256 amount) internal {\r\n        uint256 _feeAmount = amount.mul(_marketingFee).div(_baseFee);\r\n        if (_feeAmount == 0) {\r\n            return;\r\n        }\r\n        _balances[_marketingAddress] += _feeAmount;\r\n        emit Transfer(sender, _marketingAddress, _feeAmount);\r\n        if (!isMarketPair[sender]) {\r\n            uint256 swapAmount = _balances[_marketingAddress];\r\n            _balances[_marketingAddress] = 0;\r\n            _balances[address(this)] += swapAmount;\r\n            emit Transfer(_marketingAddress, address(this), swapAmount);\r\n            _swapTokensForToken(swapAmount, _marketingAddress);\r\n        }\r\n    }\r\n\r\n    function _foundingHandler(address sender, uint256 amount) internal {\r\n        uint256 _feeAmount = amount.mul(_foundingFee).div(_baseFee);\r\n        if (_feeAmount == 0) {\r\n            return;\r\n        }\r\n        _balances[_foundingAddress] += _feeAmount;\r\n        emit Transfer(sender, _foundingAddress, _feeAmount);\r\n        if (!isMarketPair[sender]) {\r\n            uint256 swapAmount = _balances[_foundingAddress];\r\n            _balances[_foundingAddress] = 0;\r\n            _balances[address(this)] += swapAmount;\r\n            emit Transfer(_foundingAddress, address(this), swapAmount);\r\n            _swapTokensForToken(swapAmount, _foundingAddress);\r\n        }\r\n    }\r\n\r\n    function _luckyHandler(address sender, uint256 amount) internal {\r\n        uint256 _feeAmount = amount.mul(_luckyFee).div(_baseFee);\r\n        if (_feeAmount > 0) {\r\n            _balances[_luckyAddress] += _feeAmount;\r\n            emit Transfer(sender, _luckyAddress, _feeAmount);\r\n        }\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    event SwapTokensForToken(uint256 amountIn, address[] path);\r\n\r\n    function _swapTokensForToken(uint256 tokenAmount, address to) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = 0x55d398326f99059fF775485246999027B3197955;\r\n        _approve(address(this), address(uniswapRouter), _totalSupply);\r\n\r\n        uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of token\r\n            path,\r\n            to, // The contract\r\n            block.timestamp\r\n        );\r\n        emit SwapTokensForToken(tokenAmount, path);\r\n    }\r\n\r\n    function _refreshTotalFee() internal {\r\n        _totalFee = _reflowUsdtFee\r\n            .add(_reflowLpFee)\r\n            .add(_lpDividendFee)\r\n            .add(_foundingFee)\r\n            .add(_marketingFee)\r\n            .add(_luckyFee);\r\n        _totalSellFee = _totalFee.add(_sellMarketingFee);\r\n    }\r\n\r\n    function setReflowUsdtFee(uint256 newValue) external onlyOwner {\r\n        _reflowUsdtFee = newValue;\r\n    }\r\n\r\n    function setReflowLpFee(uint256 newValue) external onlyOwner {\r\n        _reflowLpFee = newValue;\r\n    }\r\n\r\n    function setLpDividendFee(uint256 newValue) external onlyOwner {\r\n        _lpDividendFee = newValue;\r\n    }\r\n\r\n    function setFoundingFee(uint256 newValue) external onlyOwner {\r\n        _foundingFee = newValue;\r\n    }\r\n\r\n    function setMarketingFee(uint256 newValue) external onlyOwner {\r\n        _marketingFee = newValue;\r\n    }\r\n\r\n    function setLuckyFee(uint256 newValue) external onlyOwner {\r\n        _luckyFee = newValue;\r\n    }\r\n\r\n    function setSellLimitRatio(uint256 newValue) external onlyOwner {\r\n        _sellLimitRatio = newValue;\r\n    }\r\n\r\n    function setSellMarketingFee(uint256 newValue) external onlyOwner {\r\n        _sellMarketingFee = newValue;\r\n        _refreshTotalFee();\r\n    }\r\n\r\n    function setTxFeeExcept(address[] memory users, bool exempt)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            isTxFeeExempt[users[i]] = exempt;\r\n        }\r\n    }\r\n\r\n    function setTxLimitExempt(address[] memory users, bool exempt)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            isTxLimitExempt[users[i]] = exempt;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_foundingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpDividendAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_luckyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reflowAddres\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLimitRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setFoundingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setLpDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setLuckyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setReflowLpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setReflowUsdtFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setSellLimitRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setSellMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setTxFeeExcept\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FLASHERC20", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://77eaeee143d4977c198dd8a9464c184d84c1b670cb61022de5882e216586e830"}