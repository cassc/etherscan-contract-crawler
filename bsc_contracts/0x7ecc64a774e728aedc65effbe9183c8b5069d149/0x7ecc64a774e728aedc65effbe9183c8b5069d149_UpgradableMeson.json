{"SourceCode": "// Sources flattened with hardhat v2.10.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol@v4.7.2\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\r\n * proxy whose upgrades are fully controlled by the current implementation.\r\n */\r\ninterface IERC1822ProxiableUpgradeable {\r\n    /**\r\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\r\n     * address.\r\n     *\r\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n     * function revert if invoked through a proxy.\r\n     */\r\n    function proxiableUUID() external view returns (bytes32);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol@v4.7.2\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeaconUpgradeable {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.7.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol@v4.7.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\r\n */\r\nlibrary StorageSlotUpgradeable {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.7.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\r\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\r\n     * initialization.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized < type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol@v4.7.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n *\r\n * @custom:oz-upgrades-unsafe-allow delegatecall\r\n */\r\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\r\n    function __ERC1967Upgrade_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\r\n    }\r\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _getImplementation() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCall(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _upgradeTo(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            _functionDelegateCall(newImplementation, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCallUUPS(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\r\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\r\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\r\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\r\n            _setImplementation(newImplementation);\r\n        } else {\r\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\r\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\r\n            } catch {\r\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\r\n            }\r\n            _upgradeToAndCall(newImplementation, data, forceCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _getAdmin() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\r\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     */\r\n    function _changeAdmin(address newAdmin) internal {\r\n        emit AdminChanged(_getAdmin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Emitted when the beacon is upgraded.\r\n     */\r\n    event BeaconUpgraded(address indexed beacon);\r\n\r\n    /**\r\n     * @dev Returns the current beacon.\r\n     */\r\n    function _getBeacon() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n     */\r\n    function _setBeacon(address newBeacon) private {\r\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\r\n        require(\r\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\r\n            \"ERC1967: beacon implementation is not a contract\"\r\n        );\r\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n     *\r\n     * Emits a {BeaconUpgraded} event.\r\n     */\r\n    function _upgradeBeaconToAndCall(\r\n        address newBeacon,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _setBeacon(newBeacon);\r\n        emit BeaconUpgraded(newBeacon);\r\n        if (data.length > 0 || forceCall) {\r\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\r\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol@v4.7.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\r\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\r\n *\r\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\r\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\r\n * `UUPSUpgradeable` with a custom implementation of upgrades.\r\n *\r\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\r\n    function __UUPSUpgradeable_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\r\n    }\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\r\n    address private immutable __self = address(this);\r\n\r\n    /**\r\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\r\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\r\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\r\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\r\n     * fail.\r\n     */\r\n    modifier onlyProxy() {\r\n        require(address(this) != __self, \"Function must be called through delegatecall\");\r\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\r\n     * callable on the implementing contract but not through proxies.\r\n     */\r\n    modifier notDelegated() {\r\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\r\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\r\n     *\r\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\r\n     */\r\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\r\n        return _IMPLEMENTATION_SLOT;\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\r\n     * encoded in `data`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallUUPS(newImplementation, data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\r\n     * {upgradeTo} and {upgradeToAndCall}.\r\n     *\r\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\r\n     *\r\n     * ```solidity\r\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\r\n     * ```\r\n     */\r\n    function _authorizeUpgrade(address newImplementation) internal virtual;\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/Swap/IMesonSwapEvents.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n/// @title MesonSwapEvents Interface\r\ninterface IMesonSwapEvents {\r\n  /// @notice Event when a swap request was posted.\r\n  /// Emit at the end of `postSwap()`, `postSwapFromInitiator()` and `postSwapFromContract()` calls.\r\n  /// @param encodedSwap Encoded swap\r\n  event SwapPosted(uint256 indexed encodedSwap);\r\n\r\n  /// @notice Event when a swap request was bonded.\r\n  /// Emit at the end of `bondSwap()` calls.\r\n  /// @param encodedSwap Encoded swap\r\n  event SwapBonded(uint256 indexed encodedSwap);\r\n\r\n  /// @notice Event when a swap request was cancelled.\r\n  /// Emit at the end of `cancelSwap()` calls.\r\n  /// @param encodedSwap Encoded swap\r\n  event SwapCancelled(uint256 indexed encodedSwap);\r\n\r\n  /// @notice Event when a swap request was executed.\r\n  /// Emit at the end of `executeSwap()`, `directExecuteSwap()` and `simpleExecuteSwap()` calls.\r\n  /// @param encodedSwap Encoded swap\r\n  event SwapExecuted(uint256 indexed encodedSwap);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IAuthorizer.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\ninterface IAuthorizer {\r\n  function isAuthorized(address addr) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.7.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20Minimal.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Minimal ERC20 interface for Uniswap\r\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\r\ninterface IERC20Minimal {\r\n  /// @notice Returns the balance of a token\r\n  /// @param account The account for which to look up the number of tokens it has, i.e. its balance\r\n  /// @return The number of tokens held by the account\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /// @notice Transfers the amount of token from the `msg.sender` to the recipient\r\n  /// @param recipient The account that will receive the amount transferred\r\n  /// @param amount The number of tokens to send from the sender to the recipient\r\n  /// @return Returns true for a successful transfer, false for an unsuccessful transfer\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /// @notice Returns the current allowance given to a spender by an owner\r\n  /// @param owner The account of the token owner\r\n  /// @param spender The account of the token spender\r\n  /// @return The current allowance granted by `owner` to `spender`\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\r\n  /// @param spender The account which will be allowed to spend a given amount of the owners tokens\r\n  /// @param amount The amount of tokens allowed to be used by `spender`\r\n  /// @return Returns true for a successful approval, false for unsuccessful\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\r\n  /// @param sender The account from which the transfer will be initiated\r\n  /// @param recipient The recipient of the transfer\r\n  /// @param amount The amount of the transfer\r\n  /// @return Returns true for a successful transfer, false for unsuccessful\r\n  function transferFrom(\r\n      address sender,\r\n      address recipient,\r\n      uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\r\n  /// @param from The account from which the tokens were sent, i.e. the balance decreased\r\n  /// @param to The account to which the tokens were sent, i.e. the balance increased\r\n  /// @param value The amount of tokens that were transferred\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\r\n  /// @param owner The account that approved spending of its tokens\r\n  /// @param spender The account for which the spending allowance was modified\r\n  /// @param value The new allowance from the owner to the spender\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IDepositWithBeneficiary.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n/// @title Interface for depositWithBeneficiary\r\ninterface IDepositWithBeneficiary {\r\n  /// @notice Make a token transfer that the *signer* is paying tokens but benefits are given to the *beneficiary*\r\n  /// @param token The contract address of the transferring token\r\n  /// @param amount The amount of the transfer\r\n  /// @param beneficiary The address that will receive benefits of this transfer\r\n  /// @param data Extra data passed to the contract\r\n  /// @return Returns true for a successful transfer.\r\n  function depositWithBeneficiary(address token, uint256 amount, address beneficiary, uint64 data)\r\n    payable external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/utils/MesonTokens.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n/// @title MesonTokens\r\n/// @notice The class that stores the information of Meson's supported tokens\r\ncontract MesonTokens {\r\n  /// @notice The whitelist of supported tokens in Meson\r\n  /// Meson use a whitelist for supported stablecoins, which is specified on first deployment\r\n  /// or added through `_addSupportToken` Only modify this mapping through `_addSupportToken`.\r\n  /// key: `tokenIndex` in range of 1-255\r\n  ///     0:       unsupported\r\n  ///     1-32:    stablecoins with decimals 6\r\n  ///       1, 9:    USDC, USDC.e\r\n  ///       2, 10:   USDT, USDT.e\r\n  ///       3:       BUSD, USDT.e\r\n  ///       17:      PoD USDC\r\n  ///       18:      PoD USDT\r\n  ///       19:      PoD BUSD\r\n  ///       32:      PoD\r\n  ///     33-64:   stablecoins with decimals 18\r\n  ///       33:      USDC\r\n  ///       34:      USDT\r\n  ///       35:      BUSD\r\n  ///       36:      (reserved for DAI)\r\n  ///       37:      cUSD (Celo)\r\n  ///       52:      XDAI\r\n  ///     65-128:  (Unspecified)\r\n  ///     129-190: (Unspecified)\r\n  ///     191:     No-swap core\r\n  ///     192-247: (Unspecified)\r\n  ///     248-251: BNB & BNB equivalent\r\n  ///       248:     PoD BNB\r\n  ///       250:     (reserved for ERC20 BNB)\r\n  ///       251:     BNB as core\r\n  ///     252-255: ETH & ETH equivalent\r\n  ///       252:     PoD ETH\r\n  ///       254:     (reserved for ERC20 ETH like WETH)\r\n  ///       255:     ETH as core\r\n  /// value: the supported token's contract address\r\n  mapping(uint8 => address) public tokenForIndex;\r\n\r\n\r\n  /// @notice The mapping to get `tokenIndex` from a supported token's address\r\n  /// Only modify this mapping through `_addSupportToken`.\r\n  /// key: the supported token's contract address\r\n  /// value: `tokenIndex` in range of 1-255\r\n  mapping(address => uint8) public indexOfToken;\r\n\r\n  /// @dev This empty reserved space is put in place to allow future versions to\r\n  /// add new variables without shifting down storage in the inheritance chain.\r\n  /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n  uint256[50] private __gap;\r\n\r\n  function _isCoreToken(uint8 tokenIndex) internal returns (bool) {\r\n    return (tokenIndex == 52) || ((tokenIndex > 190) && ((tokenIndex % 4) == 3));\r\n  }\r\n\r\n  /// @notice Return all supported token addresses in an array ordered by `tokenIndex`\r\n  /// This method will only return tokens with consecutive token indexes.\r\n  function getSupportedTokens() external view returns (address[] memory tokens, uint8[] memory indexes) {\r\n    uint8 i;\r\n    uint8 num;\r\n    for (i = 0; i < 255; i++) {\r\n      if (tokenForIndex[i+1] != address(0)) {\r\n        num++;\r\n      }\r\n    }\r\n    tokens = new address[](num);\r\n    indexes = new uint8[](num);\r\n    uint8 j = 0;\r\n    for (i = 0; i < 255; i++) {\r\n      if (tokenForIndex[i+1] != address(0)) {\r\n        tokens[j] = tokenForIndex[i+1];\r\n        indexes[j] = i+1;\r\n        j++;\r\n      }\r\n    }\r\n  }\r\n\r\n  function _addSupportToken(address token, uint8 index) internal {\r\n    require(index != 0, \"Cannot use 0 as token index\");\r\n    require(token != address(0), \"Cannot use zero address\");\r\n    require(indexOfToken[token] == 0, \"Token has been added before\");\r\n    require(tokenForIndex[index] == address(0), \"Index has been used\");\r\n    if (_isCoreToken(index)) {\r\n      require(token == address(0x1), \"Core token requires adddress(0x1)\");\r\n    }\r\n    indexOfToken[token] = index;\r\n    tokenForIndex[index] = token;\r\n  }\r\n\r\n  function _removeSupportToken(uint8 index) internal {\r\n    require(index != 0, \"Cannot use 0 as token index\");\r\n    address token = tokenForIndex[index];\r\n    require(token != address(0), \"Token for the index does not exist\");\r\n    delete indexOfToken[token];\r\n    delete tokenForIndex[index];\r\n  }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.7.2\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/MesonConfig.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n/// @notice Parameters of the Meson contract\r\n/// for BNB Chain\r\ncontract MesonConfig {\r\n  uint8 constant MESON_PROTOCOL_VERSION = 1;\r\n\r\n  // Ref https://github.com/satoshilabs/slips/blob/master/slip-0044.md\r\n  uint16 constant SHORT_COIN_TYPE = 0x02ca;\r\n\r\n  uint256 constant MAX_SWAP_AMOUNT = 1e11; // 100,000.000000 = 100k\r\n  uint256 constant SERVICE_FEE_RATE = 5; // service fee = 5 / 10000 = 0.05%\r\n  uint256 constant SERVICE_FEE_MINIMUM = 500_000; // min $0.5\r\n  uint256 constant SERVICE_FEE_MINIMUM_CORE = 5000; // min 0.005 BNB ~ $1\r\n\r\n  uint256 constant CORE_TOKEN_PRICE_FACTOR = 10;\r\n\r\n  uint256 constant MIN_BOND_TIME_PERIOD = 1 hours;\r\n  uint256 constant MAX_BOND_TIME_PERIOD = 2 hours;\r\n  uint256 constant LOCK_TIME_PERIOD = 20 minutes;\r\n\r\n  bytes28 constant ETH_SIGN_HEADER = bytes28(\"\\x19Ethereum Signed Message:\\n32\");\r\n  bytes28 constant ETH_SIGN_HEADER_52 = bytes28(\"\\x19Ethereum Signed Message:\\n52\");\r\n  bytes25 constant TRON_SIGN_HEADER = bytes25(\"\\x19TRON Signed Message:\\n32\\n\");\r\n  bytes25 constant TRON_SIGN_HEADER_33 = bytes25(\"\\x19TRON Signed Message:\\n33\\n\");\r\n  bytes25 constant TRON_SIGN_HEADER_53 = bytes25(\"\\x19TRON Signed Message:\\n53\\n\");\r\n\r\n  bytes32 constant REQUEST_TYPE_HASH = keccak256(\"bytes32 Sign to request a swap on Meson\");\r\n  bytes32 constant RELEASE_TYPE_HASH = keccak256(\"bytes32 Sign to release a swap on Mesonaddress Recipient\");\r\n\r\n  bytes32 constant RELEASE_TO_TRON_TYPE_HASH = keccak256(\"bytes32 Sign to release a swap on Mesonaddress Recipient (tron address in hex format)\");\r\n}\r\n\r\n\r\n// File contracts/utils/MesonHelpers.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n\r\n/// @title MesonHelpers\r\n/// @notice The class that provides helper functions for Meson protocol\r\ncontract MesonHelpers is MesonConfig, Context {\r\n  modifier matchProtocolVersion(uint256 encodedSwap) {\r\n    require(_versionFrom(encodedSwap) == MESON_PROTOCOL_VERSION, \"Incorrect encoding version\");\r\n    _;\r\n  }\r\n\r\n  function getShortCoinType() external pure returns (bytes2) {\r\n    return bytes2(SHORT_COIN_TYPE);\r\n  }\r\n\r\n  /// @notice Calculate `swapId` from `encodedSwap`, `initiator`\r\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\r\n  function _getSwapId(uint256 encodedSwap, address initiator) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(encodedSwap, initiator));\r\n  }\r\n\r\n  /// @notice Decode `version` from `encodedSwap`\r\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\r\n  function _versionFrom(uint256 encodedSwap) internal pure returns (uint8) {\r\n    return uint8(encodedSwap >> 248);\r\n  }\r\n\r\n  /// @notice Decode `amount` from `encodedSwap`\r\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\r\n  function _amountFrom(uint256 encodedSwap) internal pure returns (uint256) {\r\n    return (encodedSwap >> 208) & 0xFFFFFFFFFF;\r\n  }\r\n\r\n  /// @notice Calculate the service fee from `encodedSwap`\r\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\r\n  function _serviceFee(uint256 encodedSwap) internal pure returns (uint256) {\r\n    uint256 minFee = _inTokenIndexFrom(encodedSwap) >= 191 ? SERVICE_FEE_MINIMUM_CORE : SERVICE_FEE_MINIMUM;\r\n    // Default to `serviceFee` = 0.05% * `amount`\r\n    uint256 fee = _amountFrom(encodedSwap) * SERVICE_FEE_RATE / 10000;\r\n    return fee > minFee ? fee : minFee;\r\n  }\r\n\r\n  /// @notice Decode `fee` (the fee for LPs) from `encodedSwap`\r\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\r\n  function _feeForLp(uint256 encodedSwap) internal pure returns (uint256) {\r\n    return (encodedSwap >> 88) & 0xFFFFFFFFFF;\r\n  }\r\n\r\n  /// @notice Decode `salt` from `encodedSwap`\r\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\r\n  function _saltFrom(uint256 encodedSwap) internal pure returns (uint80) {\r\n    return uint80(encodedSwap >> 128);\r\n  }\r\n\r\n  /// @notice Decode data from `salt`\r\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\r\n  function _saltDataFrom(uint256 encodedSwap) internal pure returns (uint64) {\r\n    return uint64(encodedSwap >> 128);\r\n  }\r\n\r\n  /// @notice Whether the swap should release to a 3rd-party integrated dapp contract\r\n  /// See method `release` in `MesonPools.sol` for more details\r\n  function _willTransferToContract(uint256 encodedSwap) internal pure returns (bool) {\r\n    return (encodedSwap & 0x8000000000000000000000000000000000000000000000000000) == 0;\r\n  }\r\n\r\n  /// @notice Whether the swap needs to pay service fee\r\n  /// See method `release` in `MesonPools.sol` for more details about the service fee\r\n  function _feeWaived(uint256 encodedSwap) internal pure returns (bool) {\r\n    return (encodedSwap & 0x4000000000000000000000000000000000000000000000000000) > 0;\r\n  }\r\n  \r\n  /// @notice Whether the swap was signed in the non-typed manner (usually by hardware wallets)\r\n  function _signNonTyped(uint256 encodedSwap) internal pure returns (bool) {\r\n    return (encodedSwap & 0x0800000000000000000000000000000000000000000000000000) > 0;\r\n  }\r\n\r\n  function _swapForCoreToken(uint256 encodedSwap) internal pure returns (bool) {\r\n    return !_willTransferToContract(encodedSwap) && (_outTokenIndexFrom(encodedSwap) < 191) &&\r\n      ((encodedSwap & 0x0400000000000000000000000000000000000000000000000000) > 0);\r\n  }\r\n\r\n  function _amountForCoreTokenFrom(uint256 encodedSwap) internal pure returns (uint256) {\r\n    if (_swapForCoreToken(encodedSwap)) {\r\n      return ((encodedSwap >> 160) & 0x00000FFF) * 1e5;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  function _coreTokenAmount(uint256 encodedSwap) internal pure returns (uint256) {\r\n    uint256 amountForCore = _amountForCoreTokenFrom(encodedSwap);\r\n    if (amountForCore > 0) {\r\n      return amountForCore * CORE_TOKEN_PRICE_FACTOR / ((encodedSwap >> 172) & 0xFFFFF);\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  function _amountToLock(uint256 encodedSwap) internal pure returns (uint256) {\r\n    return _amountFrom(encodedSwap) - _feeForLp(encodedSwap) - _amountForCoreTokenFrom(encodedSwap);\r\n  }\r\n\r\n  /// @notice Decode `expireTs` from `encodedSwap`\r\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\r\n  function _expireTsFrom(uint256 encodedSwap) internal pure returns (uint256) {\r\n    return (encodedSwap >> 48) & 0xFFFFFFFFFF;\r\n    // [Suggestion]: return uint40(encodedSwap >> 48);\r\n  }\r\n\r\n  /// @notice Decode the initial chain (`inChain`) from `encodedSwap`\r\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\r\n  function _inChainFrom(uint256 encodedSwap) internal pure returns (uint16) {\r\n    return uint16(encodedSwap >> 8);\r\n  }\r\n\r\n  /// @notice Decode the token index of initial chain (`inToken`) from `encodedSwap`\r\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\r\n  function _inTokenIndexFrom(uint256 encodedSwap) internal pure returns (uint8) {\r\n    return uint8(encodedSwap);\r\n  }\r\n\r\n  /// @notice Decode the target chain (`outChain`) from `encodedSwap`\r\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\r\n  function _outChainFrom(uint256 encodedSwap) internal pure returns (uint16) {\r\n    return uint16(encodedSwap >> 32);\r\n  }\r\n\r\n  /// @notice Decode the token index of target chain (`outToken`) from `encodedSwap`\r\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\r\n  function _outTokenIndexFrom(uint256 encodedSwap) internal pure returns (uint8) {\r\n    return uint8(encodedSwap >> 24);\r\n  }\r\n\r\n  function _tokenType(uint8 tokenIndex) internal pure returns (uint8) {\r\n    if (tokenIndex >= 192) {\r\n      // Non stablecoins\r\n      return tokenIndex / 4;\r\n    } else if (tokenIndex < 65) {\r\n      // Stablecoins\r\n      return 0;\r\n    }\r\n    revert(\"Token index not allowed for swapping\");\r\n  }\r\n\r\n  /// @notice Decode `outToken` from `encodedSwap`, and encode it with `poolIndex` to `poolTokenIndex`.\r\n  /// See variable `_balanceOfPoolToken` in `MesonStates.sol` for the defination of `poolTokenIndex`\r\n  function _poolTokenIndexForOutToken(uint256 encodedSwap, uint40 poolIndex) internal pure returns (uint48) {\r\n    return uint48((encodedSwap & 0xFF000000) << 16) | poolIndex;\r\n  }\r\n\r\n  /// @notice Decode `initiator` from `postedSwap`\r\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `postedSwap`\r\n  function _initiatorFromPosted(uint200 postedSwap) internal pure returns (address) {\r\n    return address(uint160(postedSwap >> 40));\r\n  }\r\n\r\n  /// @notice Decode `poolIndex` from `postedSwap`\r\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `postedSwap`\r\n  function _poolIndexFromPosted(uint200 postedSwap) internal pure returns (uint40) {\r\n    return uint40(postedSwap);\r\n  }\r\n  \r\n  /// @notice Encode `lockedSwap` from `until` and `poolIndex`\r\n  /// See variable `_lockedSwaps` in `MesonPools.sol` for the defination of `lockedSwap`\r\n  function _lockedSwapFrom(uint256 until, uint40 poolIndex) internal pure returns (uint80) {\r\n    return (uint80(until) << 40) | poolIndex;\r\n  }\r\n\r\n  /// @notice Decode `poolIndex` from `lockedSwap`\r\n  /// See variable `_lockedSwaps` in `MesonPools.sol` for the defination of `lockedSwap`\r\n  function _poolIndexFromLocked(uint80 lockedSwap) internal pure returns (uint40) {\r\n    return uint40(lockedSwap);\r\n  }\r\n\r\n  /// @notice Decode `until` from `lockedSwap`\r\n  /// See variable `_lockedSwaps` in `MesonPools.sol` for the defination of `lockedSwap`\r\n  function _untilFromLocked(uint80 lockedSwap) internal pure returns (uint256) {\r\n    return uint256(lockedSwap >> 40);\r\n  }\r\n\r\n  /// @notice Encode `poolTokenIndex` from `tokenIndex` and `poolIndex`\r\n  /// See variable `_balanceOfPoolToken` in `MesonStates.sol` for the defination of `poolTokenIndex`\r\n  function _poolTokenIndexFrom(uint8 tokenIndex, uint40 poolIndex) internal pure returns (uint48) {\r\n    return (uint48(tokenIndex) << 40) | poolIndex;\r\n  }\r\n\r\n  /// @notice Decode `tokenIndex` from `poolTokenIndex`\r\n  /// See variable `_balanceOfPoolToken` in `MesonStates.sol` for the defination of `poolTokenIndex`\r\n  function _tokenIndexFrom(uint48 poolTokenIndex) internal pure returns (uint8) {\r\n    return uint8(poolTokenIndex >> 40);\r\n  }\r\n\r\n  /// @notice Decode `poolIndex` from `poolTokenIndex`\r\n  /// See variable `_balanceOfPoolToken` in `MesonStates.sol` for the defination of `poolTokenIndex`\r\n  function _poolIndexFrom(uint48 poolTokenIndex) internal pure returns (uint40) {\r\n    return uint40(poolTokenIndex);\r\n  }\r\n\r\n  /// @notice Check the initiator's signature for a swap request\r\n  /// Signatures are constructed with the package `mesonfi/sdk`. Go to `packages/sdk/src/SwapSigner.ts` and \r\n  /// see how to generate a signautre in class `EthersWalletSwapSigner` method `signSwapRequest`\r\n  /// @param encodedSwap Encoded swap information. See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\r\n  /// @param r Part of the signature\r\n  /// @param yParityAndS Part of the signature\r\n  /// @param signer The signer for the swap request which is the `initiator`\r\n  function _checkRequestSignature(\r\n    uint256 encodedSwap,\r\n    bytes32 r,\r\n    bytes32 yParityAndS,\r\n    address signer\r\n  ) internal pure {\r\n    require(signer != address(0), \"Signer cannot be empty address\");\r\n    bytes32 s = yParityAndS & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n    uint8 v = uint8((uint256(yParityAndS) >> 255) + 27);\r\n    require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"Invalid signature\");\r\n\r\n    bool nonTyped = _signNonTyped(encodedSwap);\r\n    bytes32 digest;\r\n    if (_inChainFrom(encodedSwap) == 0x00c3) {\r\n      digest = keccak256(abi.encodePacked(nonTyped ? TRON_SIGN_HEADER_33 : TRON_SIGN_HEADER, encodedSwap));\r\n    } else if (nonTyped) {\r\n      digest = keccak256(abi.encodePacked(ETH_SIGN_HEADER, encodedSwap));\r\n    } else {\r\n      bytes32 typehash = REQUEST_TYPE_HASH;\r\n      assembly {\r\n        mstore(0, encodedSwap)\r\n        mstore(32, keccak256(0, 32))\r\n        mstore(0, typehash)\r\n        digest := keccak256(0, 64)\r\n      }\r\n    }\r\n    require(signer == ecrecover(digest, v, r, s), \"Invalid signature\");\r\n  }\r\n\r\n  /// @notice Check the initiator's signature for the release request\r\n  /// Signatures are constructed with the package `mesonfi/sdk`. Go to `packages/sdk/src/SwapSigner.ts` and \r\n  /// see how to generate a signautre in class `EthersWalletSwapSigner` method `signSwapRelease`\r\n  /// @param encodedSwap Encoded swap information. See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\r\n  /// @param recipient The recipient address of the swap\r\n  /// @param r Part of the signature\r\n  /// @param yParityAndS Part of the signature\r\n  /// @param signer The signer for the swap request which is the `initiator`\r\n  function _checkReleaseSignature(\r\n    uint256 encodedSwap,\r\n    address recipient,\r\n    bytes32 r,\r\n    bytes32 yParityAndS,\r\n    address signer\r\n  ) internal pure {\r\n    require(signer != address(0), \"Signer cannot be empty address\");\r\n    bytes32 s = yParityAndS & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n    uint8 v = uint8((uint256(yParityAndS) >> 255) + 27);\r\n    require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"Invalid signature\");\r\n\r\n    bool nonTyped = _signNonTyped(encodedSwap);\r\n    bytes32 digest;\r\n    if (_inChainFrom(encodedSwap) == 0x00c3) {\r\n      digest = keccak256(abi.encodePacked(nonTyped ? TRON_SIGN_HEADER_53 : TRON_SIGN_HEADER, encodedSwap, recipient));\r\n    } else if (nonTyped) {\r\n      digest = keccak256(abi.encodePacked(ETH_SIGN_HEADER_52, encodedSwap, recipient));\r\n    } else {\r\n      bytes32 typehash = _outChainFrom(encodedSwap) == 0x00c3 ? RELEASE_TO_TRON_TYPE_HASH : RELEASE_TYPE_HASH;\r\n      assembly {\r\n        mstore(20, recipient)\r\n        mstore(0, encodedSwap)\r\n        mstore(32, keccak256(0, 52))\r\n        mstore(0, typehash)\r\n        digest := keccak256(0, 64)\r\n      }\r\n    }\r\n    require(signer == ecrecover(digest, v, r, s), \"Invalid signature\");\r\n  }\r\n\r\n  function _checkSignature(bytes32 digest, bytes32 r, bytes32 yParityAndS, address signer) internal pure {\r\n    require(signer != address(0), \"Signer cannot be empty address\");\r\n    bytes32 s = yParityAndS & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n    uint8 v = uint8((uint256(yParityAndS) >> 255) + 27);\r\n    require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"Invalid signature\");\r\n\r\n    require(signer == ecrecover(digest, v, r, s), \"Invalid signature\");\r\n  }\r\n}\r\n\r\n\r\n// File contracts/utils/MesonStates.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n\r\n\r\n\r\n\r\n/// @title MesonStates\r\n/// @notice The class that keeps track of LP pool states\r\ncontract MesonStates is MesonTokens, MesonHelpers {\r\n  bytes4 private constant ERC20_TRANSFER_SELECTOR = bytes4(keccak256(\"transfer(address,uint256)\"));\r\n  bytes4 private constant ERC20_TRANSFER_FROM_SELECTOR = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\r\n\r\n  /// @notice The mapping from *authorized addresses* to LP pool indexes.\r\n  /// See `ownerOfPool` to understand how pool index is defined and used.\r\n  ///\r\n  /// This mapping records the relation between *authorized addresses* and pool indexes, where\r\n  /// authorized addresses are those who have the permision to match and complete a swap with funds \r\n  /// in a pool with specific index. For example, for an LP pool with index `i` there could be multiple\r\n  /// addresses that `poolOfAuthorizedAddr[address] = i`, which means these addresses can all sign to match\r\n  /// (call `bondSwap`, `lock`) a swap and complete it (call `release`) with funds in pool `i`. That helps\r\n  /// an LP to give other addresses the permission to perform daily swap transactions. However, authorized\r\n  /// addresses cannot withdraw funds from the LP pool, unless it's given in `ownerOfPool` which records\r\n  /// the *owner* address for each pool.\r\n  ///\r\n  /// The pool index 0 is reserved for use by Meson\r\n  mapping(address => uint40) public poolOfAuthorizedAddr;\r\n\r\n  /// @notice The mapping from LP pool indexes to their owner addresses.\r\n  /// Each LP pool in Meson has a uint40 index `i` and each LP needs to register an pool index at\r\n  /// initial deposit by calling `depositAndRegister`. The balance for each LP pool is tracked by its\r\n  /// pool index and token index (see `_balanceOfPoolToken`).\r\n  /// \r\n  /// This mapping records the *owner* address for each LP pool. Only the owner address can withdraw funds\r\n  /// from its corresponding LP pool.\r\n  ///\r\n  /// The pool index 0 is reserved for use by Meson\r\n  mapping(uint40 => address) public ownerOfPool;\r\n\r\n  /// @notice Balance for each token in LP pool, tracked by the `poolTokenIndex`.\r\n  /// See `ownerOfPool` to understand how pool index is defined and used.\r\n  ///\r\n  /// The balance of a token in an LP pool is `_balanceOfPoolToken[poolTokenIndex]` in which\r\n  /// the `poolTokenIndex` is in format of `tokenIndex:uint8|poolIndex:uint40`. `tokenIndex`\r\n  /// is the index of supported tokens given by `tokenForIndex` (see definition in `MesonTokens.sol`).\r\n  /// The balances are always store as tokens have decimal 6, which is the case for USDC/USDT on most chains\r\n  /// except BNB Chain & Conflux. In the exceptional cases, the value of token amount will be converted\r\n  /// on deposit and withdrawal (see `_safeTransfer` and `_unsafeDepositToken` in `MesonHelpers.sol`).\r\n  ///\r\n  /// The pool index 0 is reserved for use by Meson to store service fees\r\n  mapping(uint48 => uint256) internal _balanceOfPoolToken;\r\n\r\n  /// @dev This empty reserved space is put in place to allow future versions to\r\n  /// add new variables without shifting down storage in the inheritance chain.\r\n  /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n  uint256[50] private __gap;\r\n\r\n  function poolTokenBalance(address token, address addr) external view returns (uint256) {\r\n    uint8 tokenIndex = indexOfToken[token];\r\n    uint40 poolIndex = poolOfAuthorizedAddr[addr];\r\n    if (poolIndex == 0 || tokenIndex == 0) {\r\n      return 0;\r\n    }\r\n    return _balanceOfPoolToken[_poolTokenIndexFrom(tokenIndex, poolIndex)];\r\n  }\r\n  \r\n  /// @notice The collected service fee of a specific token.\r\n  /// @param tokenIndex The index of a supported token. See `tokenForIndex` in `MesonTokens.sol`\r\n  function serviceFeeCollected(uint8 tokenIndex) external view returns (uint256) {\r\n    return _balanceOfPoolToken[_poolTokenIndexFrom(tokenIndex, 0)];\r\n  }\r\n\r\n  /// @notice Help the senders to transfer their assets to the Meson contract\r\n  /// @param tokenIndex The index of token. See `tokenForIndex` in `MesonTokens.sol`\r\n  /// @param sender The sender of the transfer\r\n  /// @param amount The value of the transfer (always in decimal 6)\r\n  function _unsafeDepositToken(\r\n    uint8 tokenIndex,\r\n    address sender,\r\n    uint256 amount\r\n  ) internal {\r\n    require(amount > 0, \"Amount must be greater than zero\");\r\n\r\n    if (_isCoreToken(tokenIndex)) {\r\n      // Core tokens (e.g. ETH or BNB)\r\n      require(amount * 1e12 == msg.value, \"msg.value does not match the amount\");\r\n    } else {\r\n      // Stablecoins\r\n      address token = tokenForIndex[tokenIndex];\r\n\r\n      require(token != address(0), \"Token not supported\");\r\n      require(Address.isContract(token), \"The given token address is not a contract\");\r\n\r\n      if (_needAdjustAmount(tokenIndex)) {\r\n        amount *= 1e12;\r\n      }\r\n      (bool success, bytes memory data) = token.call(abi.encodeWithSelector(\r\n        ERC20_TRANSFER_FROM_SELECTOR,\r\n        sender,\r\n        address(this),\r\n        amount\r\n      ));\r\n      require(success && (data.length == 0 || abi.decode(data, (bool))), \"transferFrom failed\");\r\n    }\r\n  }\r\n\r\n  /// @notice Safe transfers tokens from Meson contract to a recipient\r\n  /// for interacting with ERC20 tokens that do not consistently return true/false\r\n  /// @param tokenIndex The index of token. See `tokenForIndex` in `MesonTokens.sol`\r\n  /// @param recipient The recipient of the transfer\r\n  /// @param amount The value of the transfer (always in decimal 6)\r\n  function _safeTransfer(\r\n    uint8 tokenIndex,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal {\r\n    if (_isCoreToken(tokenIndex)) {\r\n      // Core tokens (e.g. ETH or BNB)\r\n      _transferCoreToken(recipient, amount);\r\n    } else {\r\n      // Stablecoins\r\n      address token = tokenForIndex[tokenIndex];\r\n\r\n      require(Address.isContract(token), \"The given token address is not a contract\");\r\n\r\n      if (_needAdjustAmount(tokenIndex)) {\r\n        amount *= 1e12;\r\n      }\r\n\r\n      if (SHORT_COIN_TYPE == 0x00c3) {\r\n        IERC20Minimal(token).transfer(recipient, amount);\r\n      } else {\r\n        // This doesn't works on Tron\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(\r\n          ERC20_TRANSFER_SELECTOR,\r\n          recipient,\r\n          amount\r\n        ));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"transfer failed\");\r\n      }\r\n    }\r\n  }\r\n\r\n  function _transferCoreToken(address recipient, uint256 amount) internal {\r\n    (bool success, ) = recipient.call{value: amount * 1e12}(\"\");\r\n    require(success, \"Transfer failed\");\r\n  }\r\n\r\n  /// @notice Transfer tokens to a contract using `depositWithBeneficiary`\r\n  /// @param tokenIndex The index of token. See `tokenForIndex` in `MesonTokens.sol`\r\n  /// @param contractAddr The smart contract address that will receive transferring tokens\r\n  /// @param beneficiary The beneficiary of `depositWithBeneficiary`\r\n  /// @param amount The value of the transfer (always in decimal 6)\r\n  /// @param data Extra data passed to the contract\r\n  function _transferToContract(\r\n    uint8 tokenIndex,\r\n    address contractAddr,\r\n    address beneficiary,\r\n    uint256 amount,\r\n    uint64 data\r\n  ) internal {\r\n    require(Address.isContract(contractAddr), \"The given recipient address is not a contract\");\r\n    if (_needAdjustAmount(tokenIndex)) {\r\n      amount *= 1e12;\r\n    }\r\n\r\n    if (_isCoreToken(tokenIndex)) {\r\n      // Core tokens (e.g. ETH or BNB)\r\n      IDepositWithBeneficiary(contractAddr).depositWithBeneficiary{value: amount}(\r\n        address(0),\r\n        amount,\r\n        beneficiary,\r\n        data\r\n      );\r\n    } else {\r\n      // Stablecoins\r\n      address token = tokenForIndex[tokenIndex];\r\n      require(Address.isContract(token), \"The given token address is not a contract\");\r\n      \r\n      IERC20Minimal(token).approve(contractAddr, amount);\r\n      IDepositWithBeneficiary(contractAddr).depositWithBeneficiary(\r\n        token,\r\n        amount,\r\n        beneficiary,\r\n        data\r\n      );\r\n    }\r\n  }\r\n\r\n  /// @notice Determine if token has decimal 18 and therefore need to adjust amount\r\n  /// @param tokenIndex The index of token. See `tokenForIndex` in `MesonTokens.sol`\r\n  function _needAdjustAmount(uint8 tokenIndex) private pure returns (bool) {\r\n    return tokenIndex > 32;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/Swap/MesonSwap.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n\r\n\r\n/// @title MesonSwap\r\n/// @notice The class to receive and process swap requests on the initial chain side.\r\n/// Methods in this class will be executed by swap initiators or LPs\r\n/// on the initial chain of swaps.\r\ncontract MesonSwap is IMesonSwapEvents, MesonStates {\r\n  /// @notice Posted Swaps\r\n  /// key: `encodedSwap` in format of `version:uint8|amount:uint40|salt:uint80|fee:uint40|expireTs:uint40|outChain:uint16|outToken:uint8|inChain:uint16|inToken:uint8`\r\n  ///   version: Version of encoding\r\n  ///   amount: The amount of tokens of this swap, always in decimal 6. The amount of a swap is capped at $100k so it can be safely encoded in uint48;\r\n  ///   salt: The salt value of this swap, carrying some information below:\r\n  ///     salt & 0x80000000000000000000 == true => will release to an owa address, otherwise a smart contract;\r\n  ///     salt & 0x40000000000000000000 == true => will waive *service fee*;\r\n  ///     salt & 0x20000000000000000000 == true => meson.to;\r\n  ///     salt & 0x10000000000000000000 == true => API;\r\n  ///     salt & 0x08000000000000000000 == true => use *non-typed signing* (some wallets such as hardware wallets don't support EIP-712v1);\r\n  ///     salt & 0x04000000000000000000 == true => swap for core token (n/a for releasing to contract);\r\n  ///     salt & 0x0000ffffffffffffffff: customized data that can be passed to integrated 3rd-party smart contract;\r\n  ///   fee: The fee given to LPs (liquidity providers). An extra service fee maybe charged afterwards;\r\n  ///   expireTs: The expiration time of this swap on the initial chain. The LP should `executeSwap` and receive his funds before `expireTs`;\r\n  ///   outChain: The target chain of a cross-chain swap (given by the last 2 bytes of SLIP-44);\r\n  ///   outToken: The index of the token on the target chain. See `tokenForIndex` in `MesonToken.sol`;\r\n  ///   inChain: The initial chain of a cross-chain swap (given by the last 2 bytes of SLIP-44);\r\n  ///   inToken: The index of the token on the initial chain. See `tokenForIndex` in `MesonToken.sol`.\r\n  /// value: `postedSwap` in format of `initiator:address|poolIndex:uint40`\r\n  ///   initiator: The swap initiator who created and signed the swap request (not necessarily the one who posted the swap);\r\n  //    poolIndex: The index of an LP pool. See `ownerOfPool` in `MesonStates.sol` for more information.\r\n  mapping(uint256 => uint200) internal _postedSwaps;\r\n\r\n  /// @dev This empty reserved space is put in place to allow future versions to\r\n  /// add new variables without shifting down storage in the inheritance chain.\r\n  /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n  uint256[50] private __gap;\r\n\r\n  /// @notice Anyone can call this method to post a swap request. This is step 1\ufe0f\u20e3 in a swap.\r\n  /// The r,s,v signature must be signed by the swap initiator. The initiator can call\r\n  /// this method directly, in which case `poolIndex` should be zero and wait for LPs\r\n  /// to call `bondSwap`. Initiators can also send the swap requests offchain (through the\r\n  /// meson relayer service). An LP (pool owner or authorized addresses) who receives requests through\r\n  /// the relayer can call this method to post and bond the swap in a single contract execution,\r\n  /// in which case he should give his own `poolIndex`.\r\n  ///\r\n  /// The swap will last until `expireTs` and at most one LP pool can bond to it.\r\n  /// After the swap expires, the initiator can cancel the swap and withdraw funds.\r\n  ///\r\n  /// Once a swap is posted and bonded, the bonding LP should call `lock` on the target chain.\r\n  ///\r\n  /// @dev Designed to be used by both swap initiators, pool owner, or authorized addresses\r\n  /// @param encodedSwap Encoded swap information; also used as the key of `_postedSwaps`\r\n  /// @param r Part of the signature\r\n  /// @param yParityAndS Part of the signature\r\n  /// @param postingValue The value to be written to `_postedSwaps`. See `_postedSwaps` for encoding format\r\n  function postSwap(uint256 encodedSwap, bytes32 r, bytes32 yParityAndS, uint200 postingValue)\r\n    external matchProtocolVersion(encodedSwap) verifyEncodedSwap(encodedSwap)\r\n  {\r\n    address initiator = _initiatorFromPosted(postingValue);\r\n    uint40 poolIndex = _poolIndexFromPosted(postingValue);\r\n    if (poolIndex > 0 && _msgSender() != initiator) {\r\n      // If pool index is given, the signer should be the initiator or an authorized address\r\n      require(poolOfAuthorizedAddr[_msgSender()] == poolIndex, \"Signer should be an authorized address of the given pool\");\r\n    } // Otherwise, this is posted without bonding to a specific pool. Need to execute `bondSwap` later\r\n\r\n    _checkRequestSignature(encodedSwap, r, yParityAndS, initiator);\r\n    _postedSwaps[encodedSwap] = postingValue;\r\n\r\n    uint8 tokenIndex = _inTokenIndexFrom(encodedSwap);\r\n    _unsafeDepositToken(tokenIndex, initiator, _amountFrom(encodedSwap));\r\n\r\n    emit SwapPosted(encodedSwap);\r\n  }\r\n\r\n  function postSwapFromInitiator(uint256 encodedSwap, uint200 postingValue)\r\n    payable external matchProtocolVersion(encodedSwap) verifyEncodedSwap(encodedSwap)\r\n  {\r\n    address initiator = _initiatorFromPosted(postingValue);\r\n    require(_msgSender() == initiator, \"Transaction should be sent from initiator\");\r\n    _postedSwaps[encodedSwap] = postingValue;\r\n\r\n    uint8 tokenIndex = _inTokenIndexFrom(encodedSwap);\r\n    _unsafeDepositToken(tokenIndex, initiator, _amountFrom(encodedSwap));\r\n\r\n    emit SwapPosted(encodedSwap);\r\n  }\r\n\r\n  function postSwapFromContract(uint256 encodedSwap, uint200 postingValue, address contractAddress)\r\n    payable external matchProtocolVersion(encodedSwap) verifyEncodedSwap(encodedSwap)\r\n  {\r\n    address initiator = _initiatorFromPosted(postingValue);\r\n    require(_msgSender() == contractAddress, \"Transaction should be sent from contractAddress\");\r\n    require(IAuthorizer(contractAddress).isAuthorized(initiator), \"Not authorized by contract\");\r\n    _postedSwaps[encodedSwap] = postingValue;\r\n\r\n    uint8 tokenIndex = _inTokenIndexFrom(encodedSwap);\r\n    _unsafeDepositToken(tokenIndex, contractAddress, _amountFrom(encodedSwap));\r\n\r\n    emit SwapPosted(encodedSwap);\r\n  }\r\n\r\n  /// @notice If `postSwap` is called by the initiator of the swap and `poolIndex`\r\n  /// is zero, an LP (pool owner or authorized addresses) can call this to bond the swap to himself.\r\n  /// @dev Designed to be used by pool owner or authorized addresses\r\n  /// @param encodedSwap Encoded swap information; also used as the key of `_postedSwaps`\r\n  /// @param poolIndex The index of an LP pool. See `ownerOfPool` in `MesonStates.sol` for more information.\r\n  function bondSwap(uint256 encodedSwap, uint40 poolIndex) external {\r\n    uint200 postedSwap = _postedSwaps[encodedSwap];\r\n    require(postedSwap > 1, \"Swap does not exist\");\r\n    require(_poolIndexFromPosted(postedSwap) == 0, \"Swap bonded to another pool\");\r\n    require(poolOfAuthorizedAddr[_msgSender()] == poolIndex, \"Signer should be an authorized address of the given pool\");\r\n\r\n    _postedSwaps[encodedSwap] = postedSwap | poolIndex;\r\n    emit SwapBonded(encodedSwap);\r\n  }\r\n\r\n  /// @notice Cancel a swap. The swap initiator can call this method to withdraw funds\r\n  /// from an expired swap request.\r\n  /// @dev Designed to be used by swap initiators\r\n  /// @param encodedSwap Encoded swap information; also used as the key of `_postedSwaps`\r\n  function cancelSwap(uint256 encodedSwap) external {\r\n    uint200 postedSwap = _postedSwaps[encodedSwap];\r\n    require(postedSwap > 1, \"Swap does not exist\");\r\n    require(_expireTsFrom(encodedSwap) < block.timestamp, \"Swap is still locked\");\r\n\r\n    delete _postedSwaps[encodedSwap]; // Swap expired so the same one cannot be posted again\r\n\r\n    uint8 tokenIndex = _inTokenIndexFrom(encodedSwap);\r\n    _safeTransfer(tokenIndex, _initiatorFromPosted(postedSwap), _amountFrom(encodedSwap));\r\n\r\n    emit SwapCancelled(encodedSwap);\r\n  }\r\n\r\n  function cancelSwapTo(uint256 encodedSwap, address recipient, bytes32 r, bytes32 yParityAndS) external {\r\n    uint200 postedSwap = _postedSwaps[encodedSwap];\r\n    require(postedSwap > 1, \"Swap does not exist\");\r\n    require(_expireTsFrom(encodedSwap) < block.timestamp, \"Swap is still locked\");\r\n\r\n    bytes32 digest = keccak256(abi.encodePacked(encodedSwap, recipient));\r\n    _checkSignature(digest, r, yParityAndS, _initiatorFromPosted(postedSwap));\r\n\r\n    delete _postedSwaps[encodedSwap]; // Swap expired so the same one cannot be posted again\r\n\r\n    uint8 tokenIndex = _inTokenIndexFrom(encodedSwap);\r\n    _safeTransfer(tokenIndex, recipient, _amountFrom(encodedSwap));\r\n\r\n    emit SwapCancelled(encodedSwap);\r\n  }\r\n\r\n  /// @notice Execute the swap by providing a release signature. This is step 4\ufe0f\u20e3 in a swap.\r\n  /// Once the signature is verified, the current bonding pool will receive funds deposited \r\n  /// by the swap initiator.\r\n  /// @dev Designed to be used by pool owner or authorized addresses of the current bonding pool\r\n  /// @param encodedSwap Encoded swap information; also used as the key of `_postedSwaps`\r\n  /// @param r Part of the release signature (same as in the `release` call)\r\n  /// @param yParityAndS Part of the release signature (same as in the `release` call)\r\n  /// @param recipient The recipient address of the swap\r\n  /// @param depositToPool Whether to deposit funds to the pool (will save gas)\r\n  function executeSwap(\r\n    uint256 encodedSwap,\r\n    bytes32 r,\r\n    bytes32 yParityAndS,\r\n    address recipient,\r\n    bool depositToPool\r\n  ) external {\r\n    uint200 postedSwap = _postedSwaps[encodedSwap];\r\n    require(postedSwap > 1, \"Swap does not exist\");\r\n\r\n    // Swap expiredTs < current + MIN_BOND_TIME_PERIOD\r\n    if (_expireTsFrom(encodedSwap) < block.timestamp + MIN_BOND_TIME_PERIOD) {\r\n      // The swap cannot be posted again and therefore safe to remove it.\r\n      // LPs who execute in this mode can save ~5000 gas.\r\n      delete _postedSwaps[encodedSwap];\r\n    } else {\r\n      // The same swap information can be posted again, so set `_postedSwaps` value to 1 to prevent that.\r\n      _postedSwaps[encodedSwap] = 1;\r\n    }\r\n\r\n    _checkReleaseSignature(encodedSwap, recipient, r, yParityAndS, _initiatorFromPosted(postedSwap));\r\n\r\n    uint8 tokenIndex = _inTokenIndexFrom(encodedSwap);\r\n    uint40 poolIndex = _poolIndexFromPosted(postedSwap);\r\n    if (depositToPool) {\r\n      _balanceOfPoolToken[_poolTokenIndexFrom(tokenIndex, poolIndex)] += _amountFrom(encodedSwap);\r\n    } else {\r\n      _safeTransfer(tokenIndex, ownerOfPool[poolIndex], _amountFrom(encodedSwap));\r\n    }\r\n\r\n    emit SwapExecuted(encodedSwap);\r\n  }\r\n\r\n  function directExecuteSwap(\r\n    uint256 encodedSwap,\r\n    bytes32 r,\r\n    bytes32 yParityAndS,\r\n    address initiator,\r\n    address recipient\r\n  ) external matchProtocolVersion(encodedSwap) verifyEncodedSwap(encodedSwap) {\r\n    _checkReleaseSignature(encodedSwap, recipient, r, yParityAndS, initiator);\r\n\r\n    _postedSwaps[encodedSwap] = 1;\r\n\r\n    uint256 amount = _amountFrom(encodedSwap);\r\n    uint8 tokenIndex = _inTokenIndexFrom(encodedSwap);\r\n    _balanceOfPoolToken[_poolTokenIndexFrom(tokenIndex, 1)] += amount;\r\n\r\n    _unsafeDepositToken(tokenIndex, initiator, amount);\r\n\r\n    emit SwapExecuted(encodedSwap);\r\n  }\r\n\r\n  function simpleExecuteSwap(uint256 encodedSwap)\r\n    external matchProtocolVersion(encodedSwap) verifyEncodedSwap(encodedSwap)\r\n  {\r\n    uint256 amount = _amountFrom(encodedSwap);\r\n    uint8 tokenIndex = _inTokenIndexFrom(encodedSwap);\r\n    _balanceOfPoolToken[_poolTokenIndexFrom(tokenIndex, 1)] += amount;\r\n\r\n    _unsafeDepositToken(tokenIndex, _msgSender(), amount);\r\n\r\n    emit SwapExecuted(encodedSwap);\r\n  }\r\n\r\n  /// @notice Read information for a posted swap\r\n  function getPostedSwap(uint256 encodedSwap) external view\r\n    returns (address initiator, address poolOwner, bool exist)\r\n  {\r\n    uint200 postedSwap = _postedSwaps[encodedSwap];\r\n    initiator = _initiatorFromPosted(postedSwap);\r\n    exist = postedSwap > 0;\r\n    if (initiator == address(0)) {\r\n      poolOwner = address(0);\r\n    } else {\r\n      poolOwner = ownerOfPool[_poolIndexFromPosted(postedSwap)];\r\n    }\r\n  }\r\n\r\n  modifier verifyEncodedSwap(uint256 encodedSwap) {\r\n    require(_inChainFrom(encodedSwap) == SHORT_COIN_TYPE, \"Swap not for this chain\");\r\n    require(\r\n      _tokenType(_inTokenIndexFrom(encodedSwap)) == _tokenType(_outTokenIndexFrom(encodedSwap)),\r\n      \"In & out token categories do not match\"\r\n    );\r\n    require(_postedSwaps[encodedSwap] == 0, \"Swap already exists\");\r\n\r\n    require(_amountFrom(encodedSwap) <= MAX_SWAP_AMOUNT, \"For security reason, amount cannot be greater than 100k\");\r\n\r\n    uint256 delta = _expireTsFrom(encodedSwap) - block.timestamp;\r\n    require(delta > MIN_BOND_TIME_PERIOD, \"Expire ts too early\");\r\n    require(delta < MAX_BOND_TIME_PERIOD, \"Expire ts too late\");\r\n\r\n    _;\r\n  }\r\n\r\n  function _isPremiumManager() internal view virtual returns (bool) {}\r\n}\r\n\r\n\r\n// File contracts/Pools/IMesonPoolsEvents.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n/// @title MesonPools Interface\r\ninterface IMesonPoolsEvents {\r\n  /// @notice Event when an LP pool is registered.\r\n  /// Emit at the end of `depositAndRegister()` calls.\r\n  /// @param poolIndex Pool index\r\n  /// @param owner Pool owner\r\n  event PoolRegistered(uint40 indexed poolIndex, address owner);\r\n\r\n  /// @notice Event when fund was deposited to an LP pool.\r\n  /// Emit at the end of `depositAndRegister()` and `deposit()` calls.\r\n  /// @param poolTokenIndex Concatenation of pool index & token index\r\n  /// @param amount The amount of tokens to be added to the pool\r\n  event PoolDeposited(uint48 indexed poolTokenIndex, uint256 amount);\r\n\r\n  /// @notice Event when fund was withdrawn from an LP pool.\r\n  /// Emit at the end of `withdraw()` calls.\r\n  /// @param poolTokenIndex Concatenation of pool index & token index\r\n  /// @param amount The amount of tokens to be removed from the pool\r\n  event PoolWithdrawn(uint48 indexed poolTokenIndex, uint256 amount);\r\n\r\n  /// @notice Event when an authorized address was added for an LP pool.\r\n  /// Emit at the end of `depositAndRegister()` calls.\r\n  /// @param poolIndex Pool index\r\n  /// @param addr Authorized address to be added\r\n  event PoolAuthorizedAddrAdded(uint40 indexed poolIndex, address addr);\r\n\r\n  /// @notice Event when an authorized address was removed for an LP pool.\r\n  /// Emit at the end of `depositAndRegister()` calls.\r\n  /// @param poolIndex Pool index\r\n  /// @param addr Authorized address to be removed\r\n  event PoolAuthorizedAddrRemoved(uint40 indexed poolIndex, address addr);\r\n\r\n  /// @notice Event when the ownership of a pool was transferred.\r\n  /// Emit at the end of `transferPoolOwner()` calls.\r\n  /// @param poolIndex Pool index\r\n  /// @param prevOwner Previous owner of the pool\r\n  /// @param newOwner New owner of the pool\r\n  event PoolOwnerTransferred(uint40 indexed poolIndex, address prevOwner, address newOwner);\r\n\r\n  /// @notice Event when a swap was locked.\r\n  /// Emit at the end of `lock()` and `lockSwap()` calls.\r\n  /// @param encodedSwap Encoded swap\r\n  event SwapLocked(uint256 indexed encodedSwap);\r\n\r\n  /// @notice Event when a swap was unlocked.\r\n  /// Emit at the end of `unlock()` calls.\r\n  /// @param encodedSwap Encoded swap\r\n  event SwapUnlocked(uint256 indexed encodedSwap);\r\n\r\n  /// @notice Event when a swap was released.\r\n  /// Emit at the end of `release()`, `directRelease()` and `simpleRelease()` calls.\r\n  /// @param encodedSwap Encoded swap\r\n  event SwapReleased(uint256 indexed encodedSwap);\r\n}\r\n\r\n\r\n// File contracts/Pools/MesonPools.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n\r\n/// @title MesonPools\r\n/// @notice The class to manage pools for LPs, and perform swap operations on the target \r\n/// chain side.\r\n/// Methods in this class will be executed when a user wants to swap into this chain.\r\n/// LP pool operations are also provided in this class.\r\ncontract MesonPools is IMesonPoolsEvents, MesonStates {\r\n  /// @notice Locked Swaps\r\n  /// key: `swapId` is calculated from `encodedSwap` and `initiator`. See `_getSwapId` in `MesonHelpers.sol`\r\n  ///   encodedSwap: see `MesonSwap.sol` for defination;\r\n  ///   initiator: The user address who created and signed the swap request.\r\n  /// value: `lockedSwap` in format of `until:uint40|poolIndex:uint40`\r\n  ///   until: The expiration time of this swap on the target chain. Need to `release` the swap fund before `until`;\r\n  ///   poolIndex: The index of an LP pool. See `ownerOfPool` in `MesonStates.sol` for more information.\r\n  mapping(bytes32 => uint80) internal _lockedSwaps;\r\n\r\n  /// @dev This empty reserved space is put in place to allow future versions to\r\n  /// add new variables without shifting down storage in the inheritance chain.\r\n  /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n  uint256[50] private __gap;\r\n\r\n  /// @notice Initially deposit tokens into an LP pool and register a pool index.\r\n  /// This is the prerequisite for LPs if they want to participate in Meson swaps.\r\n  /// @dev Designed to be used by a new address who wants to be an LP and register a pool index\r\n  /// @param amount The amount of tokens to be added to the pool\r\n  /// @param poolTokenIndex In format of `tokenIndex:uint8|poolIndex:uint40`. See `_balanceOfPoolToken` in `MesonStates.sol` for more information.\r\n  function depositAndRegister(uint256 amount, uint48 poolTokenIndex) payable external {\r\n    require(amount > 0, \"Amount must be positive\");\r\n\r\n    address poolOwner = _msgSender();\r\n    uint40 poolIndex = _poolIndexFrom(poolTokenIndex);\r\n    require(poolIndex != 0, \"Cannot use 0 as pool index\"); // pool 0 is reserved for meson service fee\r\n    require(ownerOfPool[poolIndex] == address(0), \"Pool index already registered\");\r\n    require(poolOfAuthorizedAddr[poolOwner] == 0, \"Signer address already registered\");\r\n    ownerOfPool[poolIndex] = poolOwner;\r\n    poolOfAuthorizedAddr[poolOwner] = poolIndex;\r\n\r\n    _balanceOfPoolToken[poolTokenIndex] += amount;\r\n    uint8 tokenIndex = _tokenIndexFrom(poolTokenIndex);\r\n    _unsafeDepositToken(tokenIndex, poolOwner, amount);\r\n\r\n    emit PoolRegistered(poolIndex, poolOwner);\r\n    emit PoolDeposited(poolTokenIndex, amount);\r\n  }\r\n\r\n  /// @notice Deposit tokens into the liquidity pool.\r\n  /// The LP should be careful to make sure the `poolTokenIndex` is correct.\r\n  /// Make sure to call `depositAndRegister` first and register a pool index.\r\n  /// Otherwise, token may be deposited to others.\r\n  /// @dev Designed to be used by addresses authorized to a pool\r\n  /// @param amount The amount of tokens to be added to the pool\r\n  /// @param poolTokenIndex In format of `tokenIndex:uint8|poolIndex:uint40`. See `_balanceOfPoolToken` in `MesonStates.sol` for more information.\r\n  function deposit(uint256 amount, uint48 poolTokenIndex) payable external {\r\n    require(amount > 0, \"Amount must be positive\");\r\n\r\n    uint40 poolIndex = _poolIndexFrom(poolTokenIndex);\r\n    require(poolIndex != 0, \"Cannot use 0 as pool index\"); // pool 0 is reserved for meson service fee\r\n    require(poolIndex == poolOfAuthorizedAddr[_msgSender()], \"Need an authorized address as the signer\");\r\n    _balanceOfPoolToken[poolTokenIndex] += amount;\r\n    uint8 tokenIndex = _tokenIndexFrom(poolTokenIndex);\r\n    _unsafeDepositToken(tokenIndex, _msgSender(), amount);\r\n\r\n    emit PoolDeposited(poolTokenIndex, amount);\r\n  }\r\n\r\n  /// @notice Withdraw tokens from the liquidity pool.\r\n  /// @dev Designed to be used by LPs (pool owners) who have already registered a pool index\r\n  /// @param amount The amount to be removed from the pool\r\n  /// @param poolTokenIndex In format of `tokenIndex:uint8|poolIndex:uint40. See `_balanceOfPoolToken` in `MesonStates.sol` for more information.\r\n  function withdraw(uint256 amount, uint48 poolTokenIndex) external {\r\n    require(amount > 0, \"Amount must be positive\");\r\n\r\n    uint40 poolIndex = _poolIndexFrom(poolTokenIndex);\r\n    require(poolIndex != 0, \"Cannot use 0 as pool index\"); // pool 0 is reserved for meson service fee\r\n    require(ownerOfPool[poolIndex] == _msgSender(), \"Need the pool owner as the signer\");\r\n    _balanceOfPoolToken[poolTokenIndex] -= amount;\r\n    uint8 tokenIndex = _tokenIndexFrom(poolTokenIndex);\r\n    _safeTransfer(tokenIndex, _msgSender(), amount);\r\n\r\n    emit PoolWithdrawn(poolTokenIndex, amount);\r\n  }\r\n\r\n  /// @notice Add an authorized address to the pool\r\n  /// @dev Designed to be used by LPs (pool owners)\r\n  /// @param addr The address to be added\r\n  function addAuthorizedAddr(address addr) external {\r\n    require(poolOfAuthorizedAddr[addr] == 0, \"Addr is authorized for another pool\");\r\n    address poolOwner = _msgSender();\r\n    uint40 poolIndex = poolOfAuthorizedAddr[poolOwner];\r\n    require(poolIndex != 0, \"The signer does not register a pool\");\r\n    require(poolOwner == ownerOfPool[poolIndex], \"Need the pool owner as the signer\");\r\n    poolOfAuthorizedAddr[addr] = poolIndex;\r\n\r\n    emit PoolAuthorizedAddrAdded(poolIndex, addr);\r\n  }\r\n  \r\n  /// @notice Remove an authorized address from the pool\r\n  /// @dev Designed to be used by LPs (pool owners)\r\n  /// @param addr The address to be removed\r\n  function removeAuthorizedAddr(address addr) external {\r\n    address poolOwner = _msgSender();\r\n    uint40 poolIndex = poolOfAuthorizedAddr[poolOwner];\r\n    require(poolIndex != 0, \"The signer does not register a pool\");\r\n    require(poolOwner == ownerOfPool[poolIndex], \"Need the pool owner as the signer\");\r\n    require(poolOfAuthorizedAddr[addr] == poolIndex, \"Addr is not authorized for the signer's pool\");\r\n    delete poolOfAuthorizedAddr[addr];\r\n\r\n    emit PoolAuthorizedAddrRemoved(poolIndex, addr);\r\n  }\r\n\r\n  /// @notice Transfer the ownership of a pool to another address\r\n  /// @dev Designed to be used by LPs (pool owners)\r\n  /// @param addr The new address to be the pool owner\r\n  function transferPoolOwner(address addr) external {\r\n    address poolOwner = _msgSender();\r\n    uint40 poolIndex = poolOfAuthorizedAddr[poolOwner];\r\n    require(poolIndex != 0, \"The signer does not register a pool\");\r\n    require(poolOwner == ownerOfPool[poolIndex], \"Need the pool owner as the signer\");\r\n    require(poolOfAuthorizedAddr[addr] == poolIndex, \"Addr is not authorized for the signer's pool\");\r\n    ownerOfPool[poolIndex] = addr;\r\n\r\n    emit PoolOwnerTransferred(poolIndex, poolOwner, addr);\r\n  }\r\n\r\n  function lock(uint256 encodedSwap, bytes32 r, bytes32 yParityAndS, address initiator) external {\r\n    // deprecated\r\n    lockSwap(encodedSwap, initiator);\r\n  }\r\n\r\n  /// @notice Lock funds to match a swap request. This is step 2\ufe0f\u20e3 in a swap.\r\n  /// The authorized address of the bonding pool should call this method,\r\n  /// which will lock swapping fund on the target chain for `LOCK_TIME_PERIOD`\r\n  /// and wait for fund release and execution.\r\n  /// @dev Designed to be used by authorized addresses or pool owners\r\n  /// @param encodedSwap Encoded swap information\r\n  /// @param initiator The swap initiator who created and signed the swap request\r\n  function lockSwap(uint256 encodedSwap, address initiator)\r\n    public matchProtocolVersion(encodedSwap) forTargetChain(encodedSwap)\r\n  {\r\n    bytes32 swapId = _getSwapId(encodedSwap, initiator);\r\n    require(_lockedSwaps[swapId] == 0, \"Swap already exists\");\r\n\r\n    uint40 poolIndex = poolOfAuthorizedAddr[_msgSender()];\r\n    require(poolIndex != 0, \"Caller not registered. Call depositAndRegister.\");\r\n\r\n    uint256 until = block.timestamp + LOCK_TIME_PERIOD;\r\n    require(until < _expireTsFrom(encodedSwap) - 5 minutes, \"Cannot lock because expireTs is soon.\");\r\n\r\n    uint48 poolTokenIndex = _poolTokenIndexForOutToken(encodedSwap, poolIndex);\r\n    _balanceOfPoolToken[poolTokenIndex] -= _amountToLock(encodedSwap); // The service fee will be charged on release\r\n\r\n    uint256 coreAmount = _coreTokenAmount(encodedSwap);\r\n    if (coreAmount > 0) {\r\n      _balanceOfPoolToken[_poolTokenIndexFrom(indexOfToken[address(1)], poolIndex)] -= coreAmount;\r\n    }\r\n\r\n    _lockedSwaps[swapId] = _lockedSwapFrom(until, poolIndex);\r\n\r\n    emit SwapLocked(encodedSwap);\r\n  }\r\n\r\n  /// @notice If the locked swap is not released after `LOCK_TIME_PERIOD`,\r\n  /// the authorized address can call this method to unlock the swapping fund.\r\n  /// @dev Designed to be used by authorized addresses or pool owners\r\n  /// @param encodedSwap Encoded swap information\r\n  /// @param initiator The swap initiator who created and signed the swap request\r\n  function unlock(uint256 encodedSwap, address initiator) external {\r\n    bytes32 swapId = _getSwapId(encodedSwap, initiator);\r\n    uint80 lockedSwap = _lockedSwaps[swapId];\r\n    require(lockedSwap > 1, \"Swap does not exist\");\r\n    require(_untilFromLocked(lockedSwap) < block.timestamp, \"Swap still in lock\");\r\n\r\n    uint40 poolIndex = _poolIndexFromLocked(lockedSwap);\r\n    uint48 poolTokenIndex = _poolTokenIndexForOutToken(encodedSwap, poolIndex);\r\n    _balanceOfPoolToken[poolTokenIndex] += _amountToLock(encodedSwap);\r\n\r\n    uint256 coreAmount = _coreTokenAmount(encodedSwap);\r\n    if (coreAmount > 0) {\r\n      _balanceOfPoolToken[_poolTokenIndexFrom(indexOfToken[address(1)], poolIndex)] += coreAmount;\r\n    }\r\n\r\n    delete _lockedSwaps[swapId];\r\n\r\n    emit SwapUnlocked(encodedSwap);\r\n  }\r\n\r\n  /// @notice Release tokens to satisfy a locked swap. This is step 3\ufe0f\u20e3 in a swap.\r\n  /// This method requires a release signature from the swap initiator,\r\n  /// but anyone (initiator herself, the LP, and other people) with the signature \r\n  /// can call this method to make sure the swapping fund is guaranteed to be released.\r\n  /// @dev Designed to be used by anyone\r\n  /// @param encodedSwap Encoded swap information\r\n  /// @param r Part of the release signature (same as in the `executeSwap` call)\r\n  /// @param yParityAndS Part of the release signature (same as in the `executeSwap` call)\r\n  /// @param initiator The swap initiator who created and signed the swap request\r\n  /// @param recipient The recipient address of the swap\r\n  function release(\r\n    uint256 encodedSwap,\r\n    bytes32 r,\r\n    bytes32 yParityAndS,\r\n    address initiator,\r\n    address recipient\r\n  ) external {\r\n    require(_msgSender() == tx.origin, \"Cannot be called through contracts\");\r\n    require(_expireTsFrom(encodedSwap) > block.timestamp, \"Cannot release because expired\");\r\n    require(recipient != address(0), \"Recipient cannot be zero address\");\r\n\r\n    bool feeWaived = _feeWaived(encodedSwap);\r\n    if (feeWaived) {\r\n      // For swaps that service fee is waived, need the premium manager as the signer\r\n      require(_isPremiumManager(), \"Caller is not the premium manager\");\r\n    }\r\n    // For swaps that charge service fee, anyone can call\r\n\r\n    bytes32 swapId = _getSwapId(encodedSwap, initiator);\r\n    require(_lockedSwaps[swapId] > 1, \"Swap does not exist\");\r\n\r\n    _checkReleaseSignature(encodedSwap, recipient, r, yParityAndS, initiator);\r\n    _lockedSwaps[swapId] = 1;\r\n\r\n    // LP fee will be subtracted from the swap amount\r\n    uint256 releaseAmount = _amountToLock(encodedSwap);\r\n    if (!feeWaived) { // If the swap should pay service fee (charged by Meson protocol)\r\n      uint256 serviceFee = _serviceFee(encodedSwap);\r\n      // Subtract service fee from the release amount\r\n      releaseAmount -= serviceFee;\r\n      // Collected service fee will be stored in `_balanceOfPoolToken` with `poolIndex = 0`.\r\n      // Currently, no one is capable to withdraw fund from pool 0. In the future, Meson protocol\r\n      // will specify the purpose of service fee and its usage permission, and upgrade the contract\r\n      // accordingly.\r\n      _balanceOfPoolToken[_poolTokenIndexForOutToken(encodedSwap, 0)] += serviceFee;\r\n    }\r\n\r\n    uint256 coreAmount = _coreTokenAmount(encodedSwap);\r\n    if (coreAmount > 0) {\r\n      _transferCoreToken(recipient, coreAmount);\r\n    }\r\n    _release(encodedSwap, _outTokenIndexFrom(encodedSwap), initiator, recipient, releaseAmount);\r\n\r\n    emit SwapReleased(encodedSwap);\r\n  }\r\n\r\n  function directRelease(\r\n    uint256 encodedSwap,\r\n    bytes32 r,\r\n    bytes32 yParityAndS,\r\n    address initiator,\r\n    address recipient\r\n  ) external matchProtocolVersion(encodedSwap) forTargetChain(encodedSwap) {\r\n    require(_msgSender() == tx.origin, \"Cannot be called through contracts\");\r\n    require(_expireTsFrom(encodedSwap) > block.timestamp, \"Cannot release because expired\");\r\n    require(recipient != address(0), \"Recipient cannot be zero address\");\r\n\r\n    bool feeWaived = _feeWaived(encodedSwap);\r\n    if (feeWaived) {\r\n      require(_isPremiumManager(), \"Caller is not the premium manager\");\r\n    }\r\n\r\n    bytes32 swapId = _getSwapId(encodedSwap, initiator);\r\n    require(_lockedSwaps[swapId] == 0, \"Swap already exists\");\r\n\r\n    uint40 poolIndex = poolOfAuthorizedAddr[_msgSender()];\r\n    require(poolIndex != 0, \"Caller not registered. Call depositAndRegister.\");\r\n\r\n    _checkReleaseSignature(encodedSwap, recipient, r, yParityAndS, initiator);\r\n    _lockedSwaps[swapId] = 1;\r\n\r\n    uint256 releaseAmount = _amountToLock(encodedSwap);\r\n    _balanceOfPoolToken[_poolTokenIndexForOutToken(encodedSwap, poolIndex)] -= releaseAmount;\r\n\r\n    if (!feeWaived) {\r\n      uint256 serviceFee = _serviceFee(encodedSwap);\r\n      releaseAmount -= serviceFee;\r\n      _balanceOfPoolToken[_poolTokenIndexForOutToken(encodedSwap, 0)] += serviceFee;\r\n    }\r\n\r\n    uint256 coreAmount = _coreTokenAmount(encodedSwap);\r\n    if (coreAmount > 0) {\r\n      _balanceOfPoolToken[_poolTokenIndexFrom(indexOfToken[address(1)], poolIndex)] -= coreAmount;\r\n      _transferCoreToken(recipient, coreAmount);\r\n    }\r\n    _release(encodedSwap, _outTokenIndexFrom(encodedSwap), initiator, recipient, releaseAmount);\r\n\r\n    emit SwapReleased(encodedSwap);\r\n  }\r\n\r\n  function _release(uint256 encodedSwap, uint8 tokenIndex, address initiator, address recipient, uint256 amount) internal {\r\n    if (_willTransferToContract(encodedSwap)) {\r\n      _transferToContract(tokenIndex, recipient, initiator, amount, _saltDataFrom(encodedSwap));\r\n    } else {\r\n      _safeTransfer(tokenIndex, recipient, amount);\r\n      if ((SHORT_COIN_TYPE == 0x9296 || SHORT_COIN_TYPE == 0xb4b1) && _swapForCoreToken(encodedSwap)) {\r\n        _callSkaleFaucet(recipient);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _callSkaleFaucet(address recipient) private {\r\n    if (SHORT_COIN_TYPE == 0x9296) {\r\n      // SKALE Europa\r\n      bytes memory data = abi.encodeWithSelector(bytes4(0x6a627842), recipient);\r\n      (bool success, ) = address(0x2B267A3e49b351DEdac892400a530ABb2f899d23).call(data);\r\n      require(success, \"Call faucet not successful\");\r\n    } else if (SHORT_COIN_TYPE == 0xb4b1) {\r\n      // SKALE Nebula\r\n      bytes memory data = abi.encodeWithSelector(bytes4(0x0c11dedd), recipient);\r\n      (bool success, ) = address(0x5a6869ef5b81DCb58EBF51b8F893c31f5AFE3Fa8).call(data);\r\n      require(success, \"Call faucet not successful\");\r\n    } \r\n  }\r\n\r\n  function simpleRelease(uint256 encodedSwap, address recipient)\r\n    external matchProtocolVersion(encodedSwap) forTargetChain(encodedSwap)\r\n  {\r\n    require(_isPremiumManager(), \"Caller is not the premium manager\");\r\n    require(recipient != address(0), \"Recipient cannot be zero address\");\r\n\r\n    uint256 releaseAmount = _amountToLock(encodedSwap);\r\n    _balanceOfPoolToken[_poolTokenIndexForOutToken(encodedSwap, 1)] -= releaseAmount;\r\n\r\n    bool feeWaived = _feeWaived(encodedSwap);\r\n    if (!feeWaived) {\r\n      uint256 serviceFee = _serviceFee(encodedSwap);\r\n      releaseAmount -= serviceFee;\r\n      _balanceOfPoolToken[_poolTokenIndexForOutToken(encodedSwap, 0)] += serviceFee;\r\n    }\r\n\r\n    uint256 coreAmount = _coreTokenAmount(encodedSwap);\r\n    if (coreAmount > 0) {\r\n      _balanceOfPoolToken[_poolTokenIndexFrom(indexOfToken[address(1)], 1)] -= coreAmount;\r\n      _transferCoreToken(recipient, coreAmount);\r\n    }\r\n    _safeTransfer(_outTokenIndexFrom(encodedSwap), recipient, releaseAmount);\r\n\r\n    emit SwapReleased(encodedSwap);\r\n  }\r\n\r\n  /// @notice Read information for a locked swap\r\n  function getLockedSwap(uint256 encodedSwap, address initiator) external view\r\n    returns (address poolOwner, uint40 until)\r\n  {\r\n    bytes32 swapId = _getSwapId(encodedSwap, initiator);\r\n    uint80 lockedSwap = _lockedSwaps[swapId];\r\n    if (lockedSwap == 1) {\r\n      poolOwner = address(1);\r\n      until = 0;\r\n    } else {\r\n      poolOwner = ownerOfPool[_poolIndexFromLocked(lockedSwap)];\r\n      until = uint40(_untilFromLocked(lockedSwap));\r\n    }\r\n  }\r\n\r\n  modifier forTargetChain(uint256 encodedSwap) {\r\n    require(_outChainFrom(encodedSwap) == SHORT_COIN_TYPE, \"Swap not for this chain\");\r\n    _;\r\n  }\r\n\r\n  function _isPremiumManager() internal view virtual returns (bool) {}\r\n}\r\n\r\n\r\n// File contracts/MesonManager.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n\r\n/// @title MesonManager\r\n/// @notice The class to store data related to management permissions of Meson\r\ncontract MesonManager is MesonSwap, MesonPools {\r\n  /// @notice The admin of meson contract\r\n  /// The owner has the permission to upgrade meson contract. In future versions,\r\n  /// the management authority of meson contract will be decentralized.\r\n  address internal _owner;\r\n\r\n  /// @notice The manager to authorized fee waived swaps\r\n  /// Only the premium manager can authorize the execution to release for fee waived swaps.\r\n  /// This address is managed by Meson team.\r\n  address internal _premiumManager;\r\n\r\n  /// @dev This empty reserved space is put in place to allow future versions to\r\n  /// add new variables without shifting down storage in the inheritance chain.\r\n  /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n  uint256[50] private __gap;\r\n\r\n  event OwnerTransferred(address indexed prevOwner, address indexed newOwner);\r\n\r\n  event PremiumManagerTransferred(address indexed prevPremiumManager, address indexed newPremiumManager);\r\n\r\n  /// @notice The owner will also have the permission to add supported tokens\r\n  function addSupportToken(address token, uint8 index) external onlyOwner {\r\n    _addSupportToken(token, index);\r\n  }\r\n\r\n  /// @notice The owner will also have the permission to remove a supported tokens\r\n  function removeSupportToken(uint8 index) external onlyOwner {\r\n    _removeSupportToken(index);\r\n  }\r\n\r\n  /// @notice Add multiple tokens\r\n  function addMultipleSupportedTokens(address[] memory tokens, uint8[] memory indexes) external onlyOwner {\r\n    require(tokens.length == indexes.length, \"Tokens and indexes should have the same length\");\r\n    for (uint8 i = 0; i < tokens.length; i++) {\r\n      _addSupportToken(tokens[i], indexes[i]);\r\n    }\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function transferPremiumManager(address newPremiumManager) public {\r\n    require(_isPremiumManager(), \"Caller is not the premium manager\");\r\n    _transferPremiumManager(newPremiumManager);\r\n  }\r\n\r\n  function withdrawServiceFee(uint8 tokenIndex, uint256 amount, uint40 toPoolIndex) external onlyOwner {\r\n    require(ownerOfPool[toPoolIndex] != address(0), \"Pool index not registered\");\r\n    _balanceOfPoolToken[_poolTokenIndexFrom(tokenIndex, 0)] -= amount;\r\n    _balanceOfPoolToken[_poolTokenIndexFrom(tokenIndex, toPoolIndex)] += amount;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"New owner cannot be zero address\");\r\n    address prevOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnerTransferred(prevOwner, newOwner);\r\n  }\r\n\r\n  function _isPremiumManager() internal view override(MesonSwap, MesonPools) returns (bool) {\r\n    return _premiumManager == _msgSender();\r\n  }\r\n\r\n  function _transferPremiumManager(address newPremiumManager) internal {\r\n    require(newPremiumManager != address(0), \"New premium manager be zero address\");\r\n    address prevPremiumManager = _premiumManager;\r\n    _premiumManager = newPremiumManager;\r\n    emit PremiumManagerTransferred(prevPremiumManager, newPremiumManager);\r\n  }\r\n\r\n  function directSwap(uint256 encodedSwap, address recipient, bytes32 r, bytes32 yParityAndS)\r\n    external matchProtocolVersion(encodedSwap) verifyEncodedSwap(encodedSwap) forTargetChain(encodedSwap)\r\n  {\r\n    require(recipient != address(0), \"Recipient cannot be zero address\");\r\n\r\n    bytes32 digest = keccak256(abi.encodePacked(encodedSwap, recipient));\r\n    _checkSignature(digest, r, yParityAndS, _premiumManager);\r\n\r\n    uint256 amount = _amountFrom(encodedSwap);\r\n    uint8 inTokenIndex = _inTokenIndexFrom(encodedSwap);\r\n    uint256 releaseAmount = amount - _feeForLp(encodedSwap);\r\n\r\n    _balanceOfPoolToken[_poolTokenIndexFrom(inTokenIndex, 1)] += amount;\r\n    _balanceOfPoolToken[_poolTokenIndexForOutToken(encodedSwap, 1)] -= releaseAmount;\r\n\r\n    _unsafeDepositToken(inTokenIndex, _msgSender(), amount);\r\n    _release(encodedSwap, _outTokenIndexFrom(encodedSwap), _msgSender(), recipient, releaseAmount);\r\n\r\n    emit SwapReleased(encodedSwap);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/UpgradableMeson.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n\r\ncontract UpgradableMeson is UUPSUpgradeable, MesonManager {\r\n  function initialize(address owner, address premiumManager) external initializer {\r\n    _transferOwnership(owner);\r\n    _transferPremiumManager(premiumManager);\r\n  }\r\n\r\n  function _authorizeUpgrade(address) internal override onlyOwner {}\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"poolIndex\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"PoolAuthorizedAddrAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"poolIndex\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"PoolAuthorizedAddrRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint48\",\"name\":\"poolTokenIndex\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"poolIndex\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"PoolOwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"poolIndex\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint48\",\"name\":\"poolTokenIndex\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevPremiumManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPremiumManager\",\"type\":\"address\"}],\"name\":\"PremiumManagerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"}],\"name\":\"SwapBonded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"}],\"name\":\"SwapCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"}],\"name\":\"SwapLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"}],\"name\":\"SwapPosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"}],\"name\":\"SwapReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"}],\"name\":\"SwapUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAuthorizedAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"indexes\",\"type\":\"uint8[]\"}],\"name\":\"addMultipleSupportedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"addSupportToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"poolIndex\",\"type\":\"uint40\"}],\"name\":\"bondSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"}],\"name\":\"cancelSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"yParityAndS\",\"type\":\"bytes32\"}],\"name\":\"cancelSwapTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"poolTokenIndex\",\"type\":\"uint48\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"poolTokenIndex\",\"type\":\"uint48\"}],\"name\":\"depositAndRegister\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"yParityAndS\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"directExecuteSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"yParityAndS\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"directRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"yParityAndS\",\"type\":\"bytes32\"}],\"name\":\"directSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"yParityAndS\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"depositToPool\",\"type\":\"bool\"}],\"name\":\"executeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"}],\"name\":\"getLockedSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolOwner\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"until\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"}],\"name\":\"getPostedSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShortCoinType\",\"outputs\":[{\"internalType\":\"bytes2\",\"name\":\"\",\"type\":\"bytes2\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"indexes\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"indexOfToken\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"premiumManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"yParityAndS\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"}],\"name\":\"lockSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"ownerOfPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolOfAuthorizedAddr\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"poolTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"yParityAndS\",\"type\":\"bytes32\"},{\"internalType\":\"uint200\",\"name\":\"postingValue\",\"type\":\"uint200\"}],\"name\":\"postSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint200\",\"name\":\"postingValue\",\"type\":\"uint200\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"postSwapFromContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint200\",\"name\":\"postingValue\",\"type\":\"uint200\"}],\"name\":\"postSwapFromInitiator\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"yParityAndS\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAuthorizedAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"removeSupportToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"}],\"name\":\"serviceFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"}],\"name\":\"simpleExecuteSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"simpleRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tokenForIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferPoolOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPremiumManager\",\"type\":\"address\"}],\"name\":\"transferPremiumManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"encodedSwap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"poolTokenIndex\",\"type\":\"uint48\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"toPoolIndex\",\"type\":\"uint40\"}],\"name\":\"withdrawServiceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UpgradableMeson", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a82477aaba39259f05aaef0c954395bf81c5206166dfdaa49d8fd21023df24b9"}