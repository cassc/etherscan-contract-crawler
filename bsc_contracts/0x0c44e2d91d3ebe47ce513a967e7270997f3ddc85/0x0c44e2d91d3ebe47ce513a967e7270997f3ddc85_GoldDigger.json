{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/GoldDigger.sol\r\n\r\n\r\npragma solidity ^0.8.17;\r\n\r\n\r\n\r\n\r\ncontract GoldDigger is Ownable, ReentrancyGuard {\r\n\r\n    uint256 private INIT_SECOND_PERCENT = 320600;\r\n    uint256 public INIT_MIN_DEPOSIT = 5; // 0.05 bnb\r\n    uint128 private INIT_REF_INCREASED = 940;\r\n    uint256 private INIT_REF_LIMIT = 116000;\r\n    uint256[2] private AFFILIATE_PERCENTS_pickaxe = [60, 15];\r\n    uint256[2] private AFFILIATE_PERCENTS_BNB = [40, 10];\r\n\r\n\r\n    \r\n    uint256 public timestampGameStarted;\r\n\r\n    \r\n    address public defaultRef = 0xaAb5cf19B0D0002221C5723c5616a09F434fc036;\r\n    bool public gameStarted;\r\n    uint256 public totalInvested;\r\n    uint256 public totalInvestors;\r\n\r\n    struct User {\r\n        uint256 deposit;\r\n        uint256 reinvested;\r\n        uint256 earned;\r\n        uint256 withdrawn;\r\n        uint256 gold;\r\n        uint256 pickaxe;\r\n        uint256 timestamp;\r\n        address partner;\r\n        uint256 refsTotal;\r\n        uint256 refs1level;\r\n        uint256 refearnBNB;\r\n        uint256 refearnpickaxe; \r\n        uint256 percentage;\r\n        uint256 leaderBonus;\r\n\r\n    }\r\n    \r\n    mapping(address => User) public user;\r\n\r\n\r\n    constructor() {\r\n        renounceOwnership();\r\n    }\r\n\r\n\r\n    receive() external payable {}\r\n\r\n    event ChangeUser(address indexed user, address indexed partner, uint256 amount);\r\n\r\n    function _calcInitMaxDeposit() public view returns(uint) {\r\n        if(block.timestamp >= timestampGameStarted && block.timestamp <= timestampGameStarted + 7 days  ) return 50; // 0.5 bnb\r\n        if(block.timestamp >= timestampGameStarted && block.timestamp <= timestampGameStarted + 14 days  ) return 100;\r\n        if(block.timestamp >= timestampGameStarted && block.timestamp <= timestampGameStarted + 21 days  ) return 200;\r\n        if(block.timestamp >= timestampGameStarted && block.timestamp <= timestampGameStarted + 28 days  ) return 400;\r\n        if(block.timestamp >= timestampGameStarted && block.timestamp <= timestampGameStarted + 35 days  ) return 800;\r\n        if(block.timestamp >= timestampGameStarted && block.timestamp <= timestampGameStarted + 42 days  ) return 1600;\r\n        if(block.timestamp >= timestampGameStarted + 42 days  ) return 100000000;\r\n\r\n    }\r\n\r\n    function HireMiner(address partner) external payable nonReentrant {\r\n        uint amount = msg.value;    \r\n        require(_msgSender() == tx.origin, \"Function can only be called by a user account\");\r\n        require(amount >= (INIT_MIN_DEPOSIT * 10000000000000000), \"Min deposit is 0.05 bnb\");\r\n        if(!gameStarted) {\r\n        if(!gameStarted) {\r\n            timestampGameStarted = block.timestamp;\r\n            gameStarted = true;\r\n        }\r\n        require((user[_msgSender()].deposit + amount) < (_calcInitMaxDeposit() * 10000000000000000), \"Max deposit limit has been exceeded\");\r\n    \r\n        _updateprePayment(_msgSender());\r\n        totalInvested += amount;\r\n        totalInvestors += 1;\r\n        user[_msgSender()].deposit += amount;\r\n\r\n        if (user[_msgSender()].partner == address(0)) {\r\n            require(partner != _msgSender(), \"Cannot set your own address as partner\");\r\n            require(partner != address(0), \"Cannot set zero address as partner\");\r\n            address ref = partner;\r\n            user[ref].refs1level++;\r\n            user[ref].refsTotal++;\r\n            user[user[ref].partner].refsTotal++;\r\n            user[_msgSender()].partner = ref;\r\n            user[_msgSender()].percentage += INIT_SECOND_PERCENT;\r\n            _updatePercentage(ref);\r\n        }\r\n\r\n        emit ChangeUser(_msgSender(), user[_msgSender()].partner, user[_msgSender()].deposit);\r\n\r\n        // REF\r\n        _traverseTree(user[_msgSender()].partner, amount);\r\n        \r\n        // OWNER FEE\r\n        uint256 feepickaxe = (amount * 3) / 100 * 10;\r\n        user[defaultRef].pickaxe += feepickaxe;\r\n        uint256 feeBNB = (amount * 7) / 100;\r\n         (bool sent,) = defaultRef.call{value: feeBNB}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n        \r\n        \r\n    }}\r\n    \r\n    function Reinvest(uint256 amount) external nonReentrant {\r\n        require(_msgSender() == tx.origin, \"Function can only be called by a user account\");\r\n        _updateprePayment(_msgSender());\r\n        require(amount <= user[_msgSender()].pickaxe, \"Insufficient funds\");\r\n        user[_msgSender()].pickaxe -= amount;\r\n        user[_msgSender()].deposit += amount / 10;\r\n        user[_msgSender()].reinvested += amount / 10;\r\n        emit ChangeUser(_msgSender(), user[_msgSender()].partner, user[_msgSender()].deposit);\r\n    }\r\n\r\n    function ReinvestGold(uint256 amount) external nonReentrant {\r\n        require(_msgSender() == tx.origin, \"Function can only be called by a user account\");\r\n        _updateprePayment(_msgSender());\r\n        require(amount <= user[_msgSender()].gold, \"Insufficient funds\");\r\n        user[_msgSender()].gold -= amount;\r\n        user[_msgSender()].deposit += amount;\r\n        user[_msgSender()].reinvested += amount;\r\n        emit ChangeUser(_msgSender(), user[_msgSender()].partner, user[_msgSender()].deposit);\r\n    }\r\n\r\n    function Withdraw(uint256 amount) external nonReentrant {\r\n        require(_msgSender() == tx.origin, \"Function can only be called by a user account\");\r\n        _updateprePayment(_msgSender());\r\n        require(amount <= user[_msgSender()].gold, \"Insufficient funds\");\r\n        if(address(this).balance < amount) { amount = address(this).balance; }\r\n        user[_msgSender()].gold -= amount;\r\n        user[_msgSender()].withdrawn += amount;\r\n         (bool sent,) = _msgSender().call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    function checkReward(address account) public view returns(uint256) {\r\n        uint256 RewardTime = block.timestamp - user[account].timestamp;\r\n        return (((user[account].deposit / 100 * user[account].percentage) / 10000000000) * RewardTime);\r\n\r\n    }\r\n    \r\n    function _updateprePayment(address account) internal {\r\n        uint256 pending = checkReward(_msgSender());\r\n        user[account].timestamp = block.timestamp;\r\n        user[account].gold += pending;\r\n        user[account].earned += pending;\r\n    }\r\n\r\n    function _traverseTree(address account, uint256 value) internal {\r\n        if (value != 0) {\r\n            for (uint8 i; i < 2; i++) {\r\n\r\n                uint256 feeBNB = ((value * AFFILIATE_PERCENTS_BNB[i]) / 1000);\r\n                uint256 feepickaxe = ((value * AFFILIATE_PERCENTS_pickaxe[i]) / 1000) * 10;\r\n\r\n                user[account].gold += feeBNB;\r\n                user[account].pickaxe += feepickaxe;\r\n\r\n                user[account].refearnBNB += feeBNB;\r\n                user[account].refearnpickaxe += feepickaxe;\r\n\r\n                account = user[account].partner;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _updatePercentage(address account) internal {\r\n        if((user[account].leaderBonus + INIT_REF_INCREASED) < INIT_REF_LIMIT) {\r\n            \r\n                user[account].percentage += INIT_REF_INCREASED;\r\n                user[account].leaderBonus += INIT_REF_INCREASED;\r\n            \r\n        }\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ChangeUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"HireMiner\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_MIN_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReinvestGold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_calcInitMaxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestampGameStarted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pickaxe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refsTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refs1level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refearnBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refearnpickaxe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leaderBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GoldDigger", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c9d7ed676b458f85b5079e92b783b3cf26a4d4ad0e6235833220c8a36ee66039"}