{"SourceCode": "{\"BWJ.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n// SPDX-License-Identifier: MIT\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./ownable.sol\\\";\\n\\n//****************************************************************************\\n//* Basic ERC20 Contract\\n//****************************************************************************\\ncontract BasicERC20 is ownable {\\n    using SafeMath for uint;\\n    //****************************************************************************\\n    //* Variables\\n    //****************************************************************************\\n    string _name;\\n    string internal _symbol;\\n    uint internal _totalSupply;\\n    uint8 internal _decimals;\\n    mapping(address =\\u003e uint) internal _balances;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) internal _allowed;\\n    \\n    //****************************************************************************\\n    //* Events\\n    //****************************************************************************\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n    \\n    //****************************************************************************\\n    //*  Modifiers\\n    //****************************************************************************\\n    modifier notZero(address _to) {\\n        require(_to != address(0),\\\"Invalid destination address.\\\");\\n        _;\\n    }\\n\\n    modifier valueExists(address _sender, uint _value) {\\n        require(_value \\u003c= _balances[_sender],\\\"Transfer value is out of balance.\\\");\\n        _;\\n    }\\n\\n    modifier validSpender(address _spender) {\\n        require(_spender != address(0),\\\"Invalid spender address.\\\");\\n        _;\\n    }\\n\\n    modifier validValue(uint _value) {\\n        require(_value \\u003e 0, \\\"Invalid value.\\\");\\n        _;\\n    }\\n    //****************************************************************************\\n    //* Main Functions\\n    //****************************************************************************\\n    constructor() public {\\n        _balances[address(this)] = _totalSupply;\\n    }\\n\\n    function name() public view returns(string memory) {\\n        return(_name);\\n    }\\n    \\n    function symbol() public view returns(string memory) {\\n        return(_symbol);\\n    }\\n    \\n    function decimals() public view returns(uint8) {\\n        return(_decimals);\\n    }\\n\\n    function totalSupply() public view returns(uint) {\\n        return(_totalSupply);\\n    }\\n\\n    function balanceOf(address _owner) public view returns(uint256) {\\n        return(_balances[_owner]);\\n    }\\n    \\n    function transfer(address _to, uint256 _value) public notZero(_to) valueExists(msg.sender, _value) returns(bool) {\\n        _balances[msg.sender] = _balances[msg.sender].sub(_value);\\n        _balances[_to] = _balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return(true);\\n    }\\n    \\n    function transferFrom(address _from, address _to, uint256 _value) public notZero(_to) valueExists(_from, _value) returns(bool) {\\n        require(_value \\u003c= _allowed[_from][msg.sender],\\\"Transfer value is not allowed.\\\");\\n        _balances[_from] = _balances[_from].sub(_value);\\n        _balances[_to] = _balances[_to].add(_value);\\n        _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return(true);\\n    }\\n    \\n    function approve(address _spender, uint256 _value) public validSpender(_spender) returns(bool) {\\n        _allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return(true);\\n    }\\n    \\n    function allowance(address _owner, address _spender) public view returns(uint256) {\\n        return _allowed[_owner][_spender];\\n    }\\n    \\n}\\n//****************************************************************************\\n//* Extended ERC20 Contract\\n//****************************************************************************\\ncontract ExtERC20 is BasicERC20 {\\n    //****************************************************************************\\n    //* Main Functions\\n    //****************************************************************************\\n    function increaseAllowance(address _spender, uint256 _addedValue) public validSpender(_spender) returns(bool) {\\n        _allowed[msg.sender][_spender] = (_allowed[msg.sender][_spender].add(_addedValue));\\n        emit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\\n        return(true);\\n    }\\n\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public validSpender(_spender) returns(bool) {\\n        _allowed[msg.sender][_spender] = (_allowed[msg.sender][_spender].sub(_subtractedValue));\\n        emit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\\n        return(true);\\n    }\\n    //****************************************************************************\\n    //* Owner Functions\\n    //****************************************************************************\\n    function mint(uint _value) public isOwner validValue(_value) returns(bool) {\\n        _balances[address(this)] = _balances[address(this)].add(_value);\\n        _totalSupply = _totalSupply.add(_value);\\n        emit Transfer(address(0), address(this), _value);\\n        return(true);\\n    }\\n\\n    function burn(uint _value) public isOwner valueExists(address(this), _value) validValue(_value) returns(bool) {\\n        _balances[address(this)] = _balances[address(this)].sub(_value);\\n        _totalSupply = _totalSupply.sub(_value);\\n        emit Transfer(address(this), address(0), _value);\\n        return(true);\\n    }\\n    \\n    function selfApprove(address _spender, uint _value) public isOwner returns(bool) {\\n        require(_spender != address(0));\\n        _allowed[address(this)][_spender] = _value;\\n        emit Approval(address(this), _spender, _value);\\n        return(true);\\n    }\\n    \\n    function selfTransfer(address _to, uint _value) public isOwner notZero(_to) valueExists(address(this), _value) returns(bool) {\\n        _balances[address(this)] = _balances[address(this)].sub(_value);\\n        _balances[_to] = _balances[_to].add(_value);\\n        emit Transfer(address(this), _to, _value);\\n        return(true);\\n    }\\n\\n}\\n\\n//****************************************************************************\\n//* Main Token Contract\\n//****************************************************************************\\ncontract BWJ is ExtERC20 {\\n    constructor() public {\\n        _name = \\u0027Baby Woj\\u0027;\\n        _symbol = \\u0027BWJ\\u0027;\\n        _decimals = 9;\\n        _totalSupply = 1e21; //1e12 BWJ\\n    }\\n\\n}\"},\"ownable.sol\":{\"content\":\"pragma solidity ^0.5.10;\\r\\n// SPDX-License-Identifier: MIT\\r\\ncontract ownable {\\r\\n    address payable owner;\\r\\n    modifier isOwner {\\r\\n        require(owner == msg.sender,\\\"XXYou should be owner to call this function.XX\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function changeOwner(address payable _owner) public isOwner {\\r\\n        require(owner != _owner,\\\"XXYou must enter a new value.XX\\\");\\r\\n        owner = _owner;\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns(address) {\\r\\n        return(owner);\\r\\n    }\\r\\n\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.10;\\r\\n// SPDX-License-Identifier: MIT\\r\\nlibrary SafeMath {\\r\\n    function add(uint a, uint b) internal pure returns (uint) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"XXAddition overflow error.XX\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint a, uint b) internal pure returns (uint) {\\r\\n        require(b \\u003c= a, \\\"XXSubtraction overflow error.XX\\\");\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function inc(uint a) internal pure returns(uint) {\\r\\n        return(add(a, 1));\\r\\n    }\\r\\n\\r\\n    function dec(uint a) internal pure returns(uint) {\\r\\n        return(sub(a, 1));\\r\\n    }\\r\\n\\r\\n    function mul(uint a, uint b) internal pure returns (uint) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint c = a * b;\\r\\n        assert(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint a, uint b) internal pure returns(uint) {\\r\\n        require(b != 0,\\\"XXDivide by zero.XX\\\");\\r\\n        return(a/b);\\r\\n    }\\r\\n\\r\\n    function mod(uint a, uint b) internal pure returns(uint) {\\r\\n        require(b != 0,\\\"XXDivide by zero.XX\\\");\\r\\n        return(a % b);\\r\\n    }\\r\\n\\r\\n    function min(uint a, uint b) internal pure returns (uint) {\\r\\n        if (a \\u003e b)\\r\\n            return(b);\\r\\n        else\\r\\n            return(a);\\r\\n    }\\r\\n\\r\\n    function max(uint a, uint b) internal pure returns (uint) {\\r\\n        if (a \\u003c b)\\r\\n            return(b);\\r\\n        else\\r\\n            return(a);\\r\\n    }\\r\\n\\r\\n    function addPercent(uint a, uint p, uint r) internal pure returns(uint) {\\r\\n        return(div(mul(a,add(r,p)),r));\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"selfApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"selfTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "BWJ", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://fcd41626fc8ec19d7c7fdbe51024f93ecdab5b4793f6d5fb3b877229163d13f3"}