{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FarmZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"./BBD/interfaces/IWETH.sol\\\";\\r\\nimport \\\"./BBD/interfaces/IBabyDogeRouter.sol\\\";\\r\\nimport \\\"./BBD/interfaces/IBabyDogeFactory.sol\\\";\\r\\nimport \\\"./BBD/interfaces/IBabyDogePair.sol\\\";\\r\\nimport \\\"./IFarm.sol\\\";\\r\\n\\r\\ncontract FarmZAP {\\r\\n    struct TokensAddresses {\\r\\n        address tokenIn;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        address lpToken;\\r\\n    }\\r\\n\\r\\n    struct LpData {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint256 reserveA;\\r\\n        uint256 reserveB;\\r\\n        uint256 totalSupply;\\r\\n    }\\r\\n\\r\\n    // remaining tokens after adding liquidity won't be returned\\r\\n    // to users account if amount is below this threshold\\r\\n    uint256 private constant THRESHOLD = 1e12;\\r\\n\\r\\n    IWETH public immutable WBNB;\\r\\n    IBabyDogeRouter public immutable router;\\r\\n    IBabyDogeFactory public immutable factory;\\r\\n\\r\\n    event LpBought (\\r\\n        address account,\\r\\n        address tokenIn,\\r\\n        address lpToken,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut,\\r\\n        uint256 returnedAmount\\r\\n    );\\r\\n\\r\\n    event LpBoughtAndDeposited (\\r\\n        address farm,\\r\\n        address account,\\r\\n        address tokenIn,\\r\\n        address lpToken,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut,\\r\\n        uint256 returnedAmount\\r\\n    );\\r\\n\\r\\n    event TokensBoughtAndDeposited (\\r\\n        address farm,\\r\\n        address account,\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut\\r\\n    );\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @param _router Baby doge router address\\r\\n     */\\r\\n    constructor(\\r\\n        IBabyDogeRouter _router\\r\\n    ) {\\r\\n        router = _router;\\r\\n        WBNB = IWETH(_router.WETH());\\r\\n        factory = IBabyDogeFactory(_router.factory());\\r\\n    }\\r\\n\\r\\n    // to receive BNB\\r\\n    receive() payable external {}\\r\\n\\r\\n    /*\\r\\n     * @notice Swaps input token to LP token and returns remaining amount of tokens, swapped back to input token. Public function\\r\\n     * @param amountIn Amount of input tokens\\r\\n     * @param amountOutMin Minimum amount of LP tokens to receive\\r\\n     * @param path0 Address path to swap to token0\\r\\n     * @param path1 Address path to swap to token1\\r\\n     * @return Received LP amount. Use for callStatic\\r\\n     * @dev Last element of path0 must be token0. Last element of path1 must be token1\\r\\n     * @dev If input token is token0, leave path0 empty\\r\\n     * @dev If input token is token1, leave path1 empty\\r\\n     * @dev First element of path0 and path1 must be input token (if not empty)\\r\\n     * @dev Should be used for front end estimation with static call after input tokens approval\\r\\n     */\\r\\n    function buyLpTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1\\r\\n    ) external payable returns(uint256) {\\r\\n        (\\r\\n            uint256 lpAmount,\\r\\n            TokensAddresses memory tokens,\\r\\n            uint256 returnedAmount\\r\\n        ) = _buyLpTokens(\\r\\n            amountIn,\\r\\n            amountOutMin,\\r\\n            path0,\\r\\n            path1\\r\\n        );\\r\\n\\r\\n        IERC20(tokens.lpToken).transfer(msg.sender, lpAmount);\\r\\n\\r\\n        emit LpBought (\\r\\n            msg.sender,\\r\\n            tokens.tokenIn,\\r\\n            tokens.lpToken,\\r\\n            amountIn,\\r\\n            lpAmount,\\r\\n            returnedAmount\\r\\n        );\\r\\n\\r\\n        return(lpAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Swaps input token to LP token and deposits on behalf of msg.sender to specific farm\\r\\n     * @param farm Farm address, where LP tokens should be deposited\\r\\n     * @param amountIn Amount of input tokens\\r\\n     * @param amountOutMin Minimum amount of LP tokens to receive\\r\\n     * @param path0 Address path to swap to token0\\r\\n     * @param path1 Address path to swap to token1\\r\\n     * @return Received LP amount. Use for callStatic\\r\\n     * @dev Last element of path0 must be token0. Last element of path1 must be token1\\r\\n     * @dev If input token is token0, leave path0 empty\\r\\n     * @dev If input token is token1, leave path1 empty\\r\\n     * @dev First element of path0 and path1 must be input token (if not empty)\\r\\n     * @dev Should be used for front end estimation with static call after input tokens approval\\r\\n     */\\r\\n    function buyLpTokensAndDepositOnBehalf(\\r\\n        IFarm farm,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1\\r\\n    ) external payable returns(uint256) {\\r\\n        (\\r\\n            uint256 lpAmount,\\r\\n            TokensAddresses memory tokens,\\r\\n            uint256 returnedAmount\\r\\n        ) = _buyLpTokens(\\r\\n            amountIn,\\r\\n            amountOutMin,\\r\\n            path0,\\r\\n            path1\\r\\n        );\\r\\n        require(tokens.lpToken == farm.stakeToken(), \\\"Not a stake token\\\");\\r\\n\\r\\n        _approveIfRequired(tokens.lpToken, address(farm), lpAmount);\\r\\n        farm.depositOnBehalf(lpAmount, msg.sender);\\r\\n\\r\\n        emit LpBoughtAndDeposited (\\r\\n            address(farm),\\r\\n            msg.sender,\\r\\n            tokens.tokenIn,\\r\\n            tokens.lpToken,\\r\\n            amountIn,\\r\\n            lpAmount,\\r\\n            returnedAmount\\r\\n        );\\r\\n\\r\\n        return(lpAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Swaps input token to ERC20 token and deposits on behalf of msg.sender to specified farm\\r\\n     * @param farm Farm address, where tokens should be deposited\\r\\n     * @param amountIn Amount of input tokens\\r\\n     * @param amountOutMin Minimum amount of tokens to receive\\r\\n     * @param path Address path to swap input token\\r\\n     * @return Received token amount\\r\\n     * @dev Last element of path must be stake token\\r\\n     * @dev First element of path must be input token\\r\\n     */\\r\\n    function buyTokensAndDepositOnBehalf(\\r\\n        IFarm farm,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path\\r\\n    ) external payable returns(uint256) {\\r\\n        if (msg.value > 0) {\\r\\n            require(address(WBNB) == path[0], \\\"Input token != WBNB\\\");\\r\\n            require(amountIn == msg.value, \\\"Invalid msg.value\\\");\\r\\n            WBNB.deposit{value: amountIn}();\\r\\n        } else {\\r\\n            IERC20(path[0]).transferFrom(msg.sender, address(this), amountIn);\\r\\n        }\\r\\n        address tokenOut = path[path.length - 1];\\r\\n        require(tokenOut == farm.stakeToken(), \\\"Not a stake token\\\");\\r\\n\\r\\n        _approveIfRequired(path[0], address(router), amountIn);\\r\\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            amountIn,\\r\\n            amountOutMin,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp + 1200\\r\\n        );\\r\\n        uint256 received = IERC20(tokenOut).balanceOf(address(this));\\r\\n\\r\\n        _approveIfRequired(tokenOut, address(farm), received);\\r\\n        farm.depositOnBehalf(received, msg.sender);\\r\\n\\r\\n        emit TokensBoughtAndDeposited (\\r\\n            address(farm),\\r\\n            msg.sender,\\r\\n            path[0],\\r\\n            tokenOut,\\r\\n            amountIn,\\r\\n            received\\r\\n        );\\r\\n\\r\\n        return received;\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Estimates amount of Lp tokens based on input amount\\r\\n     * @param amountIn Amount of input tokens\\r\\n     * @param path0 Address path to swap to token0\\r\\n     * @param path1 Address path to swap to token1\\r\\n     * @dev Should be used for front end estimation before input tokens approval\\r\\n     */\\r\\n    function estimateAmountOfLpTokens(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1\\r\\n    ) external view returns(uint256 lpAmount){\\r\\n        LpData memory lpData = _getLpData(path0, path1);\\r\\n        if (lpData.totalSupply == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 amountIn0 = amountIn/2;\\r\\n        uint256 amountIn1 = amountIn/2;\\r\\n\\r\\n        uint256 amount0 = _getAmountOut(amountIn0, path0);\\r\\n        uint256 amount1 = _getAmountOut(amountIn1, path1);\\r\\n\\r\\n        lpAmount = _estimateLpAmount(\\r\\n            amount0,\\r\\n            amount1,\\r\\n            lpData\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Swaps input token to LP token. Internal function\\r\\n     * @param amountIn Amount of input tokens\\r\\n     * @param amountOutMin Minimum amount of LP tokens to receive\\r\\n     * @param path0 Address path to swap to token0\\r\\n     * @param path1 Address path to swap to token1\\r\\n     * @return lpAmount Amount of LP tokens received\\r\\n     * @return tokens Addresses of input token, token0, token1, lpToken and WBNB\\r\\n     * @return returnedAmount amount of input tokens returned to user\\r\\n     */\\r\\n    function _buyLpTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1\\r\\n    ) internal returns (\\r\\n        uint256 lpAmount,\\r\\n        TokensAddresses memory tokens,\\r\\n        uint256 returnedAmount\\r\\n    ) {\\r\\n        tokens = _checkBeforeGettingLp(amountIn, path0, path1);\\r\\n\\r\\n        (uint256 amount0, uint256 amount1) = _swapInputToTokens(\\r\\n            path0,\\r\\n            path1\\r\\n        );\\r\\n\\r\\n        uint256 _lpAmount = _addLiquidity(\\r\\n            tokens,\\r\\n            amount0,\\r\\n            amount1\\r\\n        );\\r\\n        require(_lpAmount >= amountOutMin, \\\"Below amountOutMin\\\");\\r\\n\\r\\n        // return remaining tokens\\r\\n        returnedAmount = _returnTokens(tokens, path0, path1);\\r\\n\\r\\n        return (_lpAmount, tokens, returnedAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Transfers input token to the contract and checks if paths are correct\\r\\n     * @param amountIn Amount of input tokens\\r\\n     * @param path0 Address path to swap to token0\\r\\n     * @param path1 Address path to swap to token1\\r\\n     * @return Addresses of input token, token0, token1, lpToken and WBNB\\r\\n     */\\r\\n    function _checkBeforeGettingLp(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1\\r\\n    ) private returns(TokensAddresses memory) {\\r\\n        address tokenIn;\\r\\n        if (path0.length > 0) {\\r\\n            tokenIn = path0[0];\\r\\n        } else {\\r\\n            tokenIn = path1[0];\\r\\n        }\\r\\n\\r\\n        if (msg.value > 0) {\\r\\n            require(\\r\\n                (path0.length == 0 || path0[0] == address(WBNB))\\r\\n                && (path1.length == 0 || path1[0] == address(WBNB)),\\r\\n                \\\"Input token != WBNB\\\"\\r\\n            );\\r\\n            require(amountIn == msg.value, \\\"Invalid msg.value\\\");\\r\\n            WBNB.deposit{value: msg.value}();\\r\\n        } else {\\r\\n            IERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn);\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            (path0.length == 0 || path0.length >= 2)\\r\\n            && (path1.length == 0 || path1.length >= 2),\\r\\n            \\\"Invalid path\\\"\\r\\n        );\\r\\n        require(\\r\\n            path0.length == 0 || path1.length == 0 || path0[0] == path1[0],\\r\\n            \\\"Invalid input token\\\"\\r\\n        );\\r\\n        address token0 = path0.length > 0 ? path0[path0.length - 1] : path1[0];\\r\\n        address token1 = path1.length > 0 ? path1[path1.length - 1] : path0[0];\\r\\n        require(token0 != token1, \\\"Same tokens\\\");\\r\\n\\r\\n        address lpAddress = factory.getPair(token0, token1);\\r\\n        require(lpAddress != address(0), \\\"Pair doesn't exist\\\");\\r\\n        {\\r\\n            (uint112 reserve0, uint112 reserve1,) = IBabyDogePair(lpAddress).getReserves();\\r\\n            require(reserve0 > 0 && reserve1 > 0, \\\"Empty reserves\\\");\\r\\n        }\\r\\n\\r\\n        return TokensAddresses({\\r\\n            tokenIn: tokenIn,\\r\\n            token0: token0,\\r\\n            token1: token1,\\r\\n            lpToken: lpAddress\\r\\n        });\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Adds liquidity, then balances remaining token to liquidity again\\r\\n     * @param tokens Addresses of input token, token0, token1, lpToken and WBNB\\r\\n     * @param amount0 Amount of token0 to add to liquidity\\r\\n     * @param amount1 Amount of token1 to add to liquidity\\r\\n     * @return liquidity Amount of LP tokens received\\r\\n     */\\r\\n    function _addLiquidity(\\r\\n        TokensAddresses memory tokens,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1\\r\\n    ) private returns(uint256 liquidity) {\\r\\n        _approveIfRequired(tokens.token0, address(router), amount0);\\r\\n        _approveIfRequired(tokens.token1, address(router), amount1);\\r\\n\\r\\n        (uint256 amountA, uint256 amountB,) = router.addLiquidity(\\r\\n            tokens.token0,\\r\\n            tokens.token1,\\r\\n            amount0,\\r\\n            amount1,\\r\\n            0,\\r\\n            0,\\r\\n            address(this),\\r\\n            block.timestamp + 1200\\r\\n        );\\r\\n\\r\\n        uint256 reserve0 = IERC20(tokens.token0).balanceOf(tokens.lpToken);\\r\\n        uint256 reserve1 = IERC20(tokens.token1).balanceOf(tokens.lpToken);\\r\\n\\r\\n        uint256 remaining;\\r\\n        if (amount0 > amountA) {\\r\\n            remaining = amount0 - amountA;\\r\\n            uint256 amountIn = _getPerfectAmountIn(remaining, reserve0);\\r\\n            amount0 = remaining - amountIn;\\r\\n\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = tokens.token0;\\r\\n            path[1] = tokens.token1;\\r\\n            _approveIfRequired(tokens.token0, address(router), amountIn);\\r\\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n                amountIn,\\r\\n                0,\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp + 1200\\r\\n            );\\r\\n            amount1 = IERC20(tokens.token1).balanceOf(address(this));\\r\\n        } else {\\r\\n            remaining = amount1 - amountB;\\r\\n            uint256 amountIn = _getPerfectAmountIn(remaining, reserve1);\\r\\n            amount1 = remaining - amountIn;\\r\\n\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = tokens.token1;\\r\\n            path[1] = tokens.token0;\\r\\n            _approveIfRequired(tokens.token1, address(router), amountIn);\\r\\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n                amountIn,\\r\\n                0,\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp + 1200\\r\\n            );\\r\\n            amount0 = IERC20(tokens.token0).balanceOf(address(this));\\r\\n        }\\r\\n\\r\\n        // add to liquidity remaining tokens after splitting amounts in perfect ratio\\r\\n        router.addLiquidity(\\r\\n            tokens.token0,\\r\\n            tokens.token1,\\r\\n            amount0,\\r\\n            amount1,\\r\\n            0,\\r\\n            0,\\r\\n            address(this),\\r\\n            block.timestamp + 1200\\r\\n        );\\r\\n\\r\\n        liquidity = IERC20(tokens.lpToken).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Swaps input token to LP token\\r\\n     * @param path0 Address path to swap to token0\\r\\n     * @param path1 Address path to swap to token1\\r\\n     * @return amount0 - Received amount of token0\\r\\n     * @return amount1 - Received amount of token1\\r\\n     * @dev Internal function without checks\\r\\n     */\\r\\n    function _swapInputToTokens(\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1\\r\\n    ) internal returns (uint256 amount0, uint256 amount1) {\\r\\n        uint256 amountIn = path0.length > 0\\r\\n            ? IERC20(path0[0]).balanceOf(address(this))\\r\\n            : IERC20(path1[0]).balanceOf(address(this));\\r\\n        amount0 = amountIn / 2;\\r\\n        amount1 = amountIn / 2;\\r\\n\\r\\n        if (path0.length > 0) {\\r\\n            _approveIfRequired(path0[0], address(router), amount0);\\r\\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n                amount0,\\r\\n                0,\\r\\n                path0,\\r\\n                address(this),\\r\\n                block.timestamp + 1200\\r\\n            );\\r\\n\\r\\n            amount0 = IERC20(path0[path0.length - 1]).balanceOf(address(this));\\r\\n        }\\r\\n\\r\\n        if (path1.length > 0) {\\r\\n            _approveIfRequired(path1[0], address(router), amount1);\\r\\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n                amount1,\\r\\n                0,\\r\\n                path1,\\r\\n                address(this),\\r\\n                block.timestamp + 1200\\r\\n            );\\r\\n\\r\\n            amount1 = IERC20(path1[path1.length - 1]).balanceOf(address(this));\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Transfers remaining tokens back to user. Converts them back to input token\\r\\n     * @param tokens Addresses of input token, token0, token1, lpToken and WBNB\\r\\n     * @param path0 Swap path for token0\\r\\n     * @param path1 Swap path for token1\\r\\n     * @return toReturn Returned amount of input tokens\\r\\n     * @dev Transfers tokens only above THRESHOLD value to save gas\\r\\n     */\\r\\n    function _returnTokens(\\r\\n        TokensAddresses memory tokens,\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1\\r\\n    ) private returns(uint256 toReturn) {\\r\\n        uint256 remainingAmount0 = IERC20(tokens.token0).balanceOf(address(this));\\r\\n        uint256 remainingAmount1 = IERC20(tokens.token1).balanceOf(address(this));\\r\\n\\r\\n        if (remainingAmount0 > THRESHOLD && path0.length > 0) {\\r\\n            address[] memory path = _reversePath(path0);\\r\\n            _approveIfRequired(path[0], address(router), remainingAmount0);\\r\\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n                remainingAmount0,\\r\\n                0,\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp + 1200\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (remainingAmount1 > THRESHOLD && path1.length > 0) {\\r\\n            address[] memory path = _reversePath(path1);\\r\\n            _approveIfRequired(path[0], address(router), remainingAmount1);\\r\\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n                remainingAmount1,\\r\\n                0,\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp + 1200\\r\\n            );\\r\\n        }\\r\\n\\r\\n        toReturn = IERC20(tokens.tokenIn).balanceOf(address(this));\\r\\n        if (toReturn > 0) {\\r\\n            if (msg.value > 0) {\\r\\n                _approveIfRequired(address(WBNB), address(WBNB), toReturn);\\r\\n                WBNB.withdraw(toReturn);\\r\\n                (bool success, ) = payable(msg.sender).call{value: toReturn}(\\\"\\\");\\r\\n                require(success, \\\"Can't return BNB\\\");\\r\\n            } else {\\r\\n                IERC20(tokens.tokenIn).transfer(msg.sender, toReturn);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Reverses address array\\r\\n     * @param path Input path\\r\\n     * @return Reversed path\\r\\n     */\\r\\n    function _reversePath(\\r\\n        address[] calldata path\\r\\n    ) private pure returns(address[] memory) {\\r\\n        uint256 arrayLength = path.length;\\r\\n        address[] memory reversedPath = new address[](arrayLength);\\r\\n\\r\\n        for (uint i = 0; i < arrayLength; i++) {\\r\\n            reversedPath[i] = path[arrayLength - 1 - i];\\r\\n        }\\r\\n\\r\\n        return reversedPath;\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Approves token to router if required\\r\\n     * @param token ERC20 token\\r\\n     * @param spender Spender contract address\\r\\n     * @param minAmount Minimum amount of tokens to spend\\r\\n     */\\r\\n    function _approveIfRequired(\\r\\n        address token,\\r\\n        address spender,\\r\\n        uint256 minAmount\\r\\n    ) private {\\r\\n        if (IERC20(token).allowance(address(this), spender) < minAmount) {\\r\\n            IERC20(token).approve(spender, type(uint256).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Calculates amountIn in such way, so that remaining tokens would be split into\\r\\n     * such amounts, that most of them would be added to liquidity\\r\\n     * @param remaining Remaining amount of tokenA to be split between tokenA and tokenB and added to liquidity\\r\\n     * @param reserveIn Current reserve of tokenA\\r\\n     * @return Amount of tokenA to be swapped to tokenB in order to achieve perfect liquidity ratio\\r\\n     * @dev Used for adding to liquidity remaining tokens instead of returning them to the user\\r\\n     */\\r\\n    function _getPerfectAmountIn(\\r\\n        uint256 remaining,\\r\\n        uint256 reserveIn\\r\\n    ) private pure returns(uint256) {\\r\\n        return Math.sqrt((3988009 * reserveIn + 3988000 * remaining)\\r\\n        / 3976036 * reserveIn)\\r\\n        - 1997 * reserveIn / 1994;\\r\\n    }\\r\\n\\r\\n\\r\\n    /****************************** Estimation functions helpers ******************************/\\r\\n    /*\\r\\n     * @notice Gets reserves and total supply of LP token\\r\\n     * @param path0 Address path to swap to token0\\r\\n     * @param path1 Address path to swap to token1\\r\\n     * @return lpData Reserves and total supply of LP token\\r\\n     * @dev Internal function for estimateAmountOfLpTokens\\r\\n     */\\r\\n    function _getLpData(\\r\\n        address[] calldata path0,\\r\\n        address[] calldata path1\\r\\n    ) private view returns(LpData memory lpData) {\\r\\n        address token0 = path0.length > 0 ? path0[path0.length - 1] : path1[0];\\r\\n        address token1 = path1.length > 0 ? path1[path1.length - 1] : path0[0];\\r\\n        address pairAddress = factory.getPair(token0, token1);\\r\\n        if (pairAddress == address(0)) {\\r\\n            return lpData;\\r\\n        }\\r\\n\\r\\n        lpData.token0 = token0;\\r\\n        lpData.token1 = token1;\\r\\n        lpData.reserveA = IERC20(token0).balanceOf(pairAddress);\\r\\n        lpData.reserveB = IERC20(token1).balanceOf(pairAddress);\\r\\n        lpData.totalSupply = IBabyDogePair(pairAddress).totalSupply();\\r\\n\\r\\n        return lpData;\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Calculate expected amount out of swap\\r\\n     * @param amountIn Amount ot tokens to pe spent\\r\\n     * @param path Address path to swap to token0\\r\\n     * @return amountOut Expected amount of token0\\r\\n     * @dev Internal function for estimateAmountOfLpTokens\\r\\n     */\\r\\n    function _getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) private view returns(uint256 amountOut) {\\r\\n        if (path.length > 0) {\\r\\n            (uint256[] memory amounts) = router.getAmountsOut(amountIn, path);\\r\\n            amountOut = amounts[amounts.length - 1];\\r\\n        } else {\\r\\n            amountOut = amountIn;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Estimates amount of minted LP tokens based on input amounts\\r\\n     * @param amountADesired Amount of tokens A to add to liquidity\\r\\n     * @param amountBDesired Amount of tokens B to add to liquidity\\r\\n     * @param lpData Reserves and total supply of LP token\\r\\n     * @return liquidity Amount of LP tokens expected to receive in return\\r\\n     * @dev Internal function for estimateAmountOfLpTokens\\r\\n     */\\r\\n    function _estimateLpAmount(\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        LpData memory lpData\\r\\n    ) private pure returns(uint256 liquidity) {\\r\\n        uint256 amountBOptimal = amountADesired * lpData.reserveB / lpData.reserveA;\\r\\n\\r\\n        uint256 amountA;\\r\\n        uint256 amountB;\\r\\n        if (amountBOptimal <= amountBDesired) {\\r\\n            (amountA, amountB) = (amountADesired, amountBOptimal);\\r\\n        } else {\\r\\n            uint256 amountAOptimal = amountBDesired * lpData.reserveA / lpData.reserveB;\\r\\n            (amountA, amountB) = (amountAOptimal, amountBDesired);\\r\\n        }\\r\\n\\r\\n        liquidity = Math.min(\\r\\n            amountA * lpData.totalSupply / lpData.reserveA,\\r\\n            amountB * lpData.totalSupply / lpData.reserveB\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BBD/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/BBD/interfaces/IBabyDogeRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBabyDogeRouter {\\r\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountETH);\\r\\n\\r\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint256 amountETH);\\r\\n\\r\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external;\\r\\n\\r\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external payable;\\r\\n\\r\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external;\\r\\n\\r\\n  function transactionFee(address _tokenIn, address _tokenOut, address _msgSender)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n  function factory() external pure returns (address);\\r\\n\\r\\n  function WETH() external pure returns (address);\\r\\n\\r\\n  function addLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 amountADesired,\\r\\n    uint256 amountBDesired,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  )\\r\\n  external\\r\\n  returns (\\r\\n    uint256 amountA,\\r\\n    uint256 amountB,\\r\\n    uint256 liquidity\\r\\n  );\\r\\n\\r\\n  function addLiquidityETH(\\r\\n    address token,\\r\\n    uint256 amountTokenDesired,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  )\\r\\n  external\\r\\n  payable\\r\\n  returns (\\r\\n    uint256 amountToken,\\r\\n    uint256 amountETH,\\r\\n    uint256 liquidity\\r\\n  );\\r\\n\\r\\n  function removeLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n  function removeLiquidityETH(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n  function removeLiquidityWithPermit(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    address to,\\r\\n    uint256 deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n  function removeLiquidityETHWithPermit(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n  function swapExactTokensForTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactTokens(\\r\\n    uint256 amountOut,\\r\\n    uint256 amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapExactETHForTokens(\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactETH(\\r\\n    uint256 amountOut,\\r\\n    uint256 amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapExactTokensForETH(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapETHForExactTokens(\\r\\n    uint256 amountOut,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n  function quote(\\r\\n    uint256 amountA,\\r\\n    uint256 reserveA,\\r\\n    uint256 reserveB\\r\\n  ) external pure returns (uint256 amountB);\\r\\n\\r\\n  function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n  external\\r\\n  view\\r\\n  returns (uint256[] memory amounts);\\r\\n\\r\\n  function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n  external\\r\\n  view\\r\\n  returns (uint256[] memory amounts);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/BBD/interfaces/IBabyDogeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBabyDogeFactory {\\r\\n  function feeTo() external view returns (address);\\r\\n  function feeToTreasury() external view returns (address);\\r\\n  function feeToSetter() external view returns (address);\\r\\n\\r\\n  function getPair(address tokenA, address tokenB)\\r\\n    external\\r\\n    view\\r\\n    returns (address pair);\\r\\n\\r\\n  function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n  function allPairsLength() external view returns (uint256);\\r\\n\\r\\n  function createPair(address tokenA, address tokenB)\\r\\n    external\\r\\n    returns (address pair);\\r\\n\\r\\n  function setRouter(address) external;\\r\\n\\r\\n  function setFeeTo(\\r\\n    address _feeTo,\\r\\n    address _feeToTreasury\\r\\n  ) external;\\r\\n\\r\\n  function setFeeToSetter(address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/BBD/interfaces/IBabyDogePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBabyDogePair {\\r\\n  function totalSupply() external view returns (uint256);\\r\\n  function balanceOf(address owner) external view returns (uint256);\\r\\n  function allowance(address owner, address spender)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n  function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) external returns (bool);\\r\\n\\r\\n  function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n  function permit(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 value,\\r\\n    uint256 deadline,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external;\\r\\n\\r\\n  function factory() external view returns (address);\\r\\n  function token0() external view returns (address);\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  function getReserves()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint112 reserve0,\\r\\n      uint112 reserve1,\\r\\n      uint32 blockTimestampLast\\r\\n    );\\r\\n\\r\\n  function price0CumulativeLast() external view returns (uint256);\\r\\n  function price1CumulativeLast() external view returns (uint256);\\r\\n  function kLast() external view returns (uint256);\\r\\n  function mint(address to) external returns (uint256 liquidity);\\r\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n  function swap(\\r\\n    uint256 amount0Out,\\r\\n    uint256 amount1Out,\\r\\n    address to,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n\\r\\n  function skim(address to) external;\\r\\n\\r\\n  function sync() external;\\r\\n\\r\\n  function initialize(\\r\\n    address,\\r\\n    address,\\r\\n    address\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IFarm {\\r\\n    function depositOnBehalf(uint256 amount, address account) external;\\r\\n    function stakeToken() external returns(address);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBabyDogeRouter\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnedAmount\",\"type\":\"uint256\"}],\"name\":\"LpBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnedAmount\",\"type\":\"uint256\"}],\"name\":\"LpBoughtAndDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"TokensBoughtAndDeposited\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"}],\"name\":\"buyLpTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFarm\",\"name\":\"farm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"}],\"name\":\"buyLpTokensAndDepositOnBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFarm\",\"name\":\"farm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"buyTokensAndDepositOnBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"}],\"name\":\"estimateAmountOfLpTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IBabyDogeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IBabyDogeRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FarmZAP", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c9a0f685f39d05d835c369036251ee3aeaaf3c47", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}