{"SourceCode": "// Dependency file: contracts/interfaces/IDgas.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IDgas {\r\n    function amountPerBlock() external view returns (uint);\r\n    function changeInterestRatePerBlock(uint value) external returns (bool);\r\n    function getProductivity(address user) external view returns (uint, uint);\r\n    function increaseProductivity(address user, uint value) external returns (bool);\r\n    function decreaseProductivity(address user, uint value) external returns (bool);\r\n    function take() external view returns (uint);\r\n    function takeWithBlock() external view returns (uint, uint);\r\n    function mint() external returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function upgradeImpl(address _newImpl) external;\r\n    function upgradeGovernance(address _newGovernor) external;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function approve(address spender, uint value) external returns (bool);\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/ICBurger.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface ICBurger {\r\n    function burn(uint value) external returns (bool);\r\n}\r\n\r\n// Dependency file: contracts/libraries/SafeMath.sol\r\n\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/modules/Ownable.sol\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'Ownable: FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), 'Ownable: INVALID_ADDRESS');\r\n        emit OwnerChanged(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n// Root file: contracts/BurgerSave.sol\r\n\r\npragma solidity >=0.6.12;\r\n// pragma experimental ABIEncoderV2;\r\n\r\n// import 'contracts/interfaces/IDgas.sol';\r\n// import 'contracts/interfaces/IERC20.sol';\r\n// import 'contracts/interfaces/ICBurger.sol';\r\n// import 'contracts/libraries/SafeMath.sol';\r\n// import 'contracts/modules/Ownable.sol';\r\n\r\ncontract BurgerSave is Ownable {\r\n    using SafeMath for uint;\r\n    \r\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n    address public DGAS;\r\n    address public CBURGER;\r\n    uint public BLOCKSPACE;\r\n\r\n    uint totalSupply;\r\n    uint totalDepositedAmount;\r\n    uint totalHarvestedAmount;\r\n\r\n    struct UserInfo {\r\n        uint startBlock;\r\n        uint stakeAmount;\r\n        uint harvestedAmount;\r\n        uint accAmountPerBlock;\r\n        uint totalHarvestedAmount;\r\n    }\r\n\r\n    mapping (address=>UserInfo) public userData;\r\n    mapping (address=>bool) public userExist;\r\n\r\n    event Deposit(address indexed _user, uint startBlock, uint _amount);\r\n    event Harvest(address indexed _user, uint _amount);\r\n    event Withdraw(address indexed _user, uint _amount);\r\n\r\n    constructor(address _dgas, address _cburger, uint _totalSupply, uint _blockSpace) public {\r\n        DGAS = _dgas;\r\n        CBURGER = _cburger;\r\n        BLOCKSPACE = _blockSpace;\r\n        totalSupply = _totalSupply;\r\n    }\r\n    \r\n    function configure(uint _totalSupply, uint _blockSpace) public onlyOwner {\r\n        BLOCKSPACE = _blockSpace;\r\n        totalSupply = _totalSupply;\r\n    }\r\n\r\n    function getHarvestAmount(address _user) public view returns(uint) {\r\n        return _getHarvestAmount(_user);\r\n    }\r\n\r\n    function getWithdrawAmount() public view returns(uint) {\r\n        return _getWithdrawAmount();\r\n    }\r\n    \r\n    function getInfo() public view returns(uint, uint, uint) {\r\n        return(totalSupply, totalDepositedAmount, totalHarvestedAmount);\r\n    }\r\n\r\n    function deposit(uint _amount) public {\r\n        IERC20(CBURGER).transferFrom(address(msg.sender), address(this), _amount);\r\n        UserInfo storage userInfo = userData[msg.sender];\r\n        userInfo.stakeAmount = userInfo.stakeAmount.add(_amount);\r\n        userInfo.accAmountPerBlock = userInfo.stakeAmount.sub(userInfo.totalHarvestedAmount).div(BLOCKSPACE);\r\n        userInfo.harvestedAmount = 0;\r\n        userInfo.startBlock = block.number;\r\n        totalDepositedAmount = totalDepositedAmount.add(_amount);\r\n        emit Deposit(msg.sender, block.number, _amount);\r\n    }\r\n\r\n    function harvest(uint _amount) public {\r\n        uint amount = _getHarvestAmount(msg.sender);\r\n        require(_amount <= amount && _amount > 0, 'BurgerSave: HARVEST_AMOUNT_OVER');\r\n        UserInfo storage userInfo = userData[msg.sender];\r\n        userInfo.harvestedAmount = userInfo.harvestedAmount.add(_amount);\r\n        userInfo.totalHarvestedAmount = userInfo.totalHarvestedAmount.add(_amount);\r\n        totalHarvestedAmount = totalHarvestedAmount.add(_amount);\r\n        _mintDGAS();\r\n        IDgas(DGAS).transfer(address(msg.sender), _amount);\r\n        emit Harvest(msg.sender, _amount);\r\n    }\r\n\r\n    function burn() public onlyOwner {\r\n        uint amount = IERC20(CBURGER).balanceOf(address(this));\r\n        ICBurger(CBURGER).burn(amount);\r\n    }\r\n    \r\n    function sync() public onlyOwner {\r\n        _mintDGAS();\r\n    }\r\n\r\n    function withdraw(uint _amount) public onlyOwner {\r\n        uint amount = _getWithdrawAmount();\r\n        require(_amount <= amount, 'BurgerSave: WITHDRAW_AMOUNT_OVER');\r\n        IDgas(DGAS).transfer(address(msg.sender), _amount);\r\n        emit Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    function _getHarvestAmount(address user) internal view  returns(uint amount) {\r\n        UserInfo memory userInfo = userData[user];\r\n        uint blockSpac = block.number.sub(userInfo.startBlock);\r\n        if (blockSpac > BLOCKSPACE) {\r\n            blockSpac = BLOCKSPACE;\r\n        }\r\n        amount = userInfo.accAmountPerBlock.mul(blockSpac).sub(userInfo.harvestedAmount);\r\n        return amount;\r\n    }\r\n\r\n    function _getWithdrawAmount() internal view returns(uint amount) {\r\n        uint balance = IDgas(DGAS).balanceOf(address(this));\r\n        if (balance.add(totalHarvestedAmount) <= totalSupply) {\r\n            amount = 0;\r\n        } else {\r\n            amount = balance.add(totalHarvestedAmount).sub(totalSupply);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function _mintDGAS() internal {\r\n        if(IDgas(DGAS).take() > 0) {\r\n            IDgas(DGAS).mint();\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dgas\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cburger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockSpace\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCKSPACE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CBURGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DGAS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockSpace\",\"type\":\"uint256\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getHarvestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accAmountPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalHarvestedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BurgerSave", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ae9269f27437f0fcbc232d39ec814844a51d6b8f0000000000000000000000004b5d132e902f792e2f8327a3d4062e3edd79f640000000000000000000000000000000000000000000010e142ff8d219a59b00000000000000000000000000000000000000000000000000000000000000278d00", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://06fbfa0e584cd999cc1d9d1ef8c1b7d41c68c6d5e81551c8bdaab61cf05709ca"}