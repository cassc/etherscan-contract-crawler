{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /** \r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\npragma solidity ^0.8.7;\r\n\r\n\r\ncontract DGWPreSalev2 is Ownable {\r\n  using SafeERC20 for IERC20;\r\n\r\n  uint256 public tokenSold;\r\n  uint256 private _totalUSDTInvestment;\r\n  uint256 private totalSupply = 1155000000 ether;\r\n  uint256 private totalReferralCount;\r\n  uint256 public currentPhase;\r\n  bool public _vestingStatus = false;\r\n  uint256 public  initialVestingDate;\r\n  address private Funds_Wallet = 0x8e9965cf97539BcB6D485F10D418e0BE025bF056;\r\n  address private Default_Refer_Wallet = \t0x8e9965cf97539BcB6D485F10D418e0BE025bF056;\r\n  IERC20 private USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n  IERC20 private SaleToken = IERC20(0x0f0C29f0aa5EcB0C614F712A29d9ED6F658fD3c8);\r\n  uint256[] public phasePrice = [\r\n    0.002145 ether,\r\n    0.002640 ether,\r\n    0.00281 ether\r\n  ];\r\n  \r\n  uint256[] public phaseLimit = [\r\n    330000000 ether,\r\n    825000000 ether,\r\n    1155000000 ether  \r\n    ];\r\nuint256[] referLevels = [13,8,4,3,2];\r\n\r\n\r\n  uint256[] sale3P = [50, 50];\r\n\r\n    struct level1Address {\r\n        address[] referred;\r\n        \r\n    }\r\n    struct level2Address {\r\n        address[] referred;\r\n\r\n    }\r\n    struct level3Address {\r\n        address[] referred;\r\n\r\n    }\r\n    struct level4Address {\r\n        address[] referred;\r\n\r\n    }\r\n    struct level5Address {\r\n        address[] referred;\r\n\r\n    }\r\n  // struct to store referral data\r\n\r\n  // struct to store buy requests data\r\n  struct buyRequests {\r\n    address userAddress;\r\n    uint256 quantity;\r\n    address referredBy;\r\n    uint256 amountPaid;\r\n  }\r\n\r\n  struct Sale1 {\r\n    uint256 startDate;\r\n    uint256 claimedDate;\r\n    uint256 totalAmount;\r\n    uint256 claimed;\r\n    uint256 claimStrikes;\r\n  }\r\n  struct Sale2 {\r\n   uint256 startDate;\r\n    uint256 claimedDate;\r\n    uint256 totalAmount;\r\n    uint256 claimed;\r\n    uint256 claimStrikes;\r\n  }\r\n\r\n  mapping(address => Sale1) public sale1;\r\n  mapping(address => Sale2) public sale2;\r\n  mapping(address => buyRequests[]) internal BuyRequests;\r\n  mapping(address => address) public referralAddress;\r\n  mapping(address => address[]) public myReferrals;\r\n  mapping(address => uint256) public referralRewards;\r\n    mapping(address => level1Address) internal level1;\r\n    mapping(address => level2Address) internal level2;\r\n    mapping(address => level3Address) internal level3;\r\n    mapping(address => level4Address) internal level4;\r\n    mapping(address => level5Address) internal level5;\r\n  event TransferUSDT(\r\n    address indexed fromAddress,\r\n    address indexed toAddress,\r\n    uint256 amount\r\n  );\r\n  event VestingStart(\r\n    address indexed userAddress,\r\n    uint256 quantity,\r\n    uint256 indexed SalePhase\r\n  );\r\n\r\n  event TransferSaleToken(\r\n    address indexed fromAddress,\r\n    address indexed toAddress,\r\n    uint256 amount,\r\n    uint256 date\r\n  );\r\n  event ReferralRewarded(address indexed  referrer, uint256 amount  );\r\n  event Received(address, uint256);\r\n\r\n  constructor() {\r\n    referralAddress[Default_Refer_Wallet] = address(0);\r\n  }\r\n\r\n  function buyTokens(uint256 amount, address _referralAddress) external {\r\n    require(currentPhase < 3, \"Sale Has ended\");\r\n    require(amount >= 100, \"Quantity should be more than 0\");\r\n \r\n    require(amount >= 100 ether,\"Minimum amount \");\r\n    uint256 balance = USDT.balanceOf(msg.sender);\r\n    require(balance >= amount, \"Balance Should be greater\");\r\n    uint256 allowance = USDT.allowance(msg.sender, address(this));\r\n    require(tokenSold <= totalSupply,\"Sale has ended\");\r\n    require(\r\n      allowance >= amount,\r\n      \"Allowance should be greater or equals to amount\"\r\n    );\r\n    require(_referralAddress != address(0), \"Can't use Address 0 as referral!\");\r\n   if(_referralAddress != Default_Refer_Wallet ) {\r\n     require(\r\n      referralAddress[_referralAddress] != address(0),\r\n      \"Invalid referral address\"\r\n    );\r\n    \r\n    }\r\n\r\n    uint256 remainingUSD;\r\n    uint256 quantity;\r\n     (remainingUSD, quantity) = getTokenForUSD(amount);\r\n    tokenSold += quantity;\r\n    require(\r\n      tokenSold  <= totalSupply,\r\n      \"Total supply should be greater \"\r\n    );\r\n \r\n    USDT.safeTransferFrom(msg.sender, address(this), remainingUSD);\r\n\r\n    if (referralAddress[msg.sender] == address(0)) {\r\n      referralAddress[msg.sender] = _referralAddress;\r\n      myReferrals[_referralAddress].push(_referralAddress);\r\n    }\r\n    _referralAddress = referralAddress[msg.sender];\r\n    buyRequests memory req = buyRequests(\r\n      msg.sender,\r\n      quantity,\r\n      _referralAddress,\r\n      remainingUSD\r\n    );\r\n    BuyRequests[msg.sender].push(req);\r\n    _totalUSDTInvestment += remainingUSD;\r\n    // emit TransferUSDT event\r\n\r\n  \r\nsetCurrentPhase();\r\n    if(tokenSold >= phaseLimit[2]){\r\n      _vestingStatus=true;\r\n      initialVestingDate = block.timestamp+ 35 ; //Change time here to change first vesting date\r\n    }\r\n    uint256 _remainingTokens=  payReferRew(_referralAddress, remainingUSD);\r\n    emit TransferUSDT(msg.sender, address(this), remainingUSD);\r\n    USDT.safeTransfer(Funds_Wallet,  _remainingTokens);\r\n    tokenVesting(quantity);\r\n  }\r\n\r\n  \r\nfunction setCurrentPhase() private {\r\n    if (tokenSold >= phaseLimit[2]) {\r\n      currentPhase=3;\r\n    } else if (tokenSold >=  phaseLimit[1]) { \r\n      currentPhase=2;\r\n    } else if (tokenSold >=  phaseLimit[0]) {\r\n      currentPhase=1;\r\n    } \r\n \r\n  }\r\n\r\n  function getCurrentPrice() public view returns (uint256) {\r\n    if (tokenSold < phaseLimit[0]) {\r\n      return phasePrice[0];\r\n    } else if (tokenSold < phaseLimit[1]) { \r\n      return phasePrice[1];\r\n    } else if (tokenSold < phaseLimit[2]) {\r\n      return phasePrice[2];\r\n    } \r\n    return 0;\r\n  }\r\n\r\n\r\nfunction payReferRew(address _referralAddress, uint256 _amount) private returns(uint256){\r\n    address uplineAddress = _referralAddress;\r\n    uint256 rewPaid;\r\n        for (uint256 i =0; i < referLevels.length; i++){\r\nif(uplineAddress == address(0)){\r\n    break;\r\n}else{\r\n\r\n  uint256  _rewards= (_amount * referLevels[i]) / 100;\r\n    referralRewards[uplineAddress] += _rewards;\r\n    rewPaid += _rewards;\r\n    USDT.safeTransfer(uplineAddress, _rewards);\r\n    emit ReferralRewarded(uplineAddress, _rewards);\r\n      if (i==0){\r\n          setLvl1Setter(uplineAddress);\r\n      } else if (i == 1) {\r\n                        setLvl2Setter(uplineAddress);\r\n                    } else if (i == 2) {\r\n                        setLvl3Setter(uplineAddress);\r\n                    } else if (i == 3) {\r\n                        setLvl4Setter(uplineAddress);\r\n                    } else if (i == 4) {\r\n                        setLvl5Setter(uplineAddress);\r\n                    }\r\n    uplineAddress = referralAddress[uplineAddress];\r\n\r\n\r\n\r\n\r\n}\r\n        }\r\n    return (_amount - rewPaid);\r\n\r\n\r\n}\r\n  function tokenVesting(uint256 quantity) internal {\r\n    if (tokenSold <= phaseLimit[0]) {\r\n      Sale1 storage sale = sale1[msg.sender];\r\n      sale.startDate = block.timestamp;\r\n        sale.claimedDate =  block.timestamp;\r\n        sale.totalAmount += quantity;        \r\n      emit VestingStart(msg.sender, quantity, 1);\r\n    } else if (tokenSold <= phaseLimit[1]) {\r\n       Sale2 storage sale = sale2[msg.sender];\r\n      sale.startDate = block.timestamp;\r\n        sale.claimedDate =  block.timestamp;\r\n        sale.totalAmount += quantity;        \r\n      emit VestingStart(msg.sender, quantity, 2);\r\n    }\r\n\r\n     else {\r\n      \r\n      emit TransferSaleToken(\r\n        msg.sender,\r\n        address(this),\r\n        quantity,\r\n        block.timestamp\r\n      );\r\n      SaleToken.safeTransfer(msg.sender, quantity);\r\n    }\r\n  }\r\n\r\n  function claimTokensS1() public {\r\n    require(_vestingStatus == true,\"Vesting has not been activated yet!\");\r\n    Sale1 storage sale = sale1[msg.sender];\r\n    require(sale.totalAmount > 0, \"No tokens to claim\");\r\n    uint256 tokensToClaim = (sale.totalAmount * 50) / 100;\r\n    uint256 remainingTokens = sale.totalAmount-sale.claimed;\r\n    require(remainingTokens >0, \"No Remaining tokens to claim\");\r\n    if(remainingTokens < tokensToClaim){\r\n      tokensToClaim = remainingTokens;\r\n    }\r\n    require(\r\n      tokensToClaim + sale.claimed <= sale.totalAmount,\r\n      \"Token claim Exceeds\"\r\n    );\r\n    require(\r\n      sale.claimedDate <= block.timestamp,\r\n      \"Tokens are only claimable once in 30 \"\r\n    );\r\n    uint256 claims = sale.claimStrikes;\r\n    sale.claimed += tokensToClaim;\r\n    sale.claimedDate = initialVestingDate + (30 days  * (claims+1));\r\n    sale.claimStrikes += 1;\r\n\r\n    emit TransferSaleToken(\r\n      msg.sender,\r\n      address(this),\r\n      tokensToClaim,\r\n      block.timestamp\r\n    );\r\n    SaleToken.safeTransfer(msg.sender, tokensToClaim);\r\n  }\r\n\r\n  function claimTokensS2() public {\r\n    require(_vestingStatus == true,\"Vesting has not been activated yet!\");\r\n\r\n    Sale2 storage sale = sale2[msg.sender];\r\n    require(sale.totalAmount > 0, \"No tokens to claim\");\r\n    uint256 tokensToClaim = (sale.totalAmount * 50) /\r\n      100;\r\n uint256 remainingTokens = sale.totalAmount-sale.claimed;\r\n    require(remainingTokens >0, \"No Remaining tokens to claim\");\r\n    if(remainingTokens < tokensToClaim){\r\n      tokensToClaim = remainingTokens;\r\n    }\r\n    require(\r\n      tokensToClaim + sale.claimed <= sale.totalAmount,\r\n      \"Token claim Exceeds\"\r\n    );\r\n\r\n    require(\r\n      sale.claimedDate <= block.timestamp,\r\n      \"Tokens are only claimable once in 30 \"\r\n    );\r\n    uint256 claims = sale.claimStrikes; \r\n    sale.claimed += tokensToClaim;\r\n    sale.claimedDate = initialVestingDate + (30 days    * (claims+1));\r\nif(sale.claimStrikes<2){\r\n    sale.claimStrikes += 1;\r\n}\r\n    emit TransferSaleToken(\r\n      msg.sender,\r\n      address(this),\r\n      tokensToClaim,\r\n      block.timestamp\r\n    );\r\n    SaleToken.safeTransfer(msg.sender, tokensToClaim);\r\n  }\r\n\r\nfunction getNextClaimS2(address _userAddress) public  view returns(uint256 ) {\r\n Sale2 storage sale = sale2[_userAddress];\r\n   if(sale.totalAmount  == 0) return 0;\r\n    uint256 tokensToClaim = (sale.totalAmount * sale3P[sale.claimStrikes]) /\r\n      100;\r\n uint256 remainingTokens = sale.totalAmount-sale.claimed;\r\n    if(remainingTokens ==0) return 0;\r\n    if(remainingTokens < tokensToClaim){\r\n      tokensToClaim = remainingTokens;\r\n    }\r\nreturn tokensToClaim;\r\n\r\n}\r\n\r\nfunction getNextClaimS1(address _userAddress) public  view returns(uint256 ) {\r\n Sale1 storage sale = sale1[_userAddress];\r\n   if(sale.totalAmount  == 0) return 0;\r\n    uint256 tokensToClaim = (sale.totalAmount * 50 )/\r\n      100;\r\n uint256 remainingTokens = sale.totalAmount-sale.claimed;\r\n    if(remainingTokens ==0) return 0;\r\n    if(remainingTokens < tokensToClaim){\r\n      tokensToClaim = remainingTokens;\r\n    }\r\nreturn tokensToClaim;\r\n\r\n}\r\n  function tokenBalance() public view returns (uint256) {\r\n    uint256 balance = SaleToken.balanceOf(address(this));\r\n    return balance;\r\n  }\r\n\r\n  function getMyReferrals() external view returns (address[] memory) {\r\n    return myReferrals[msg.sender];\r\n  }\r\n\r\n  function getTotalUSDTInvestment() external view returns (uint256) {\r\n    return _totalUSDTInvestment;\r\n  }\r\n\r\n  function getTotalReferralCount() external view returns (uint256) {\r\n    return totalReferralCount;\r\n  }\r\n\r\n  function getReferralData(\r\n    address _referralAddress\r\n  ) external view returns (address _referral) {\r\n    _referral = referralAddress[_referralAddress];\r\n    return _referral;\r\n  }\r\n\r\n  function getRemSaleTokens() public view returns (uint256 remAmount) {\r\n    remAmount = phaseLimit[currentPhase] - tokenSold;\r\n    return remAmount;\r\n  }\r\n  function startVesting() external  onlyOwner{\r\n    _vestingStatus = true;\r\n    initialVestingDate= block.timestamp;\r\n  }\r\n  function vestingStatus() public view returns (bool){\r\n    if(block.timestamp <= initialVestingDate){\r\n      return false;\r\n    }\r\n    return _vestingStatus;\r\n  }\r\n     function setLvl1Setter(address userAddresss) internal {\r\n        address[] storage array = level1[userAddresss].referred;\r\n        array.push(msg.sender);\r\n    }\r\n\r\n    function setLvl2Setter(address userAddresss) internal {\r\n        address[] storage array = level2[userAddresss].referred;\r\n        array.push(msg.sender);\r\n    }\r\n\r\n    function setLvl3Setter(address userAddresss) internal {\r\n        address[] storage array = level3[userAddresss].referred;\r\n        array.push(msg.sender);\r\n    }\r\n\r\n    function setLvl4Setter(address userAddresss) internal {\r\n        address[] storage array = level4[userAddresss].referred;\r\n        array.push(msg.sender);\r\n    }\r\n\r\n    function setLvl5Setter(address userAddresss) internal {\r\n        address[] storage array = level5[userAddresss].referred;\r\n        array.push(msg.sender);\r\n    }\r\n   function getLevel1Reffers(address userAddresss)\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        address[] storage array = level1[userAddresss].referred;\r\n        return array;\r\n    }\r\n\r\n    function getLevel2Reffers(address userAddresss)\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        address[] storage array = level2[userAddresss].referred;\r\n        return array;\r\n    }\r\n\r\n    function getLevel3Reffers(address userAddresss)\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        address[] storage array = level3[userAddresss].referred;\r\n        return array;\r\n    }\r\n\r\n    function getLevel4Reffers(address userAddresss)\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        address[] storage array = level4[userAddresss].referred;\r\n        return array;\r\n    }\r\n\r\n    function getLevel5Reffers(address userAddresss)\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        address[] storage array = level5[userAddresss].referred;\r\n        return array;\r\n    }\r\n  \r\n    function getTokenForUSD(uint256 _usdAmount) public view returns(uint256 , uint256 tokenAmountRequired) {\r\n    \r\n    // Calculate the token amount required for the given USD amount at the current price\r\n        tokenAmountRequired = (_usdAmount * 1 ether) /getCurrentPrice();\r\n        // Calculate the tokens available in the current phase\r\n        uint256 tokensAvailable = phaseLimit[currentPhase] - tokenSold;\r\n        // If the required tokens can be fulfilled from the current phasse, return the required token amount\r\n        if (tokenAmountRequired < tokensAvailable ) {\r\n            return(_usdAmount, tokenAmountRequired ); // Return token amount in whole units (tokens, not wei)\r\n        }else if (currentPhase == 2 ){\r\n        uint256 remainingTokens = tokenAmountRequired - tokensAvailable;\r\n        // Calculate the remaining USD equivalent to cover the remaining tokens\r\n        uint256 remUSD = (remainingTokens * getCurrentPrice())/1 ether  ;\r\n            return(_usdAmount-remUSD, tokensAvailable);\r\n\r\n        }else{\r\n        \r\n        \r\n        uint256 remainingTokens = tokenAmountRequired - tokensAvailable;\r\n        // Calculate the remaining USD equivalent to cover the remaining tokens\r\n        uint256 remUSD = (remainingTokens * getCurrentPrice())/ 1 ether  ;\r\n        \r\n        \r\n        // Calculate the tokens needed from the next phase\r\n        uint256 tokensNeededFromNextPhase = (remUSD * 1 ether)/ phasePrice[currentPhase + 1];\r\n        \r\n        \r\n        // Calculate the total tokens receivable by combining tokens from the current and next phases\r\n         tokenAmountRequired = tokensAvailable + tokensNeededFromNextPhase;\r\n        \r\n        return (_usdAmount, tokenAmountRequired ); // Return token amount in whole units (tokens, not wei)\r\n    }\r\n}\r\n\r\n  receive() external payable {\r\n    emit Received(msg.sender, msg.value);\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"TransferSaleToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferUSDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"SalePhase\",\"type\":\"uint256\"}],\"name\":\"VestingStart\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_vestingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referralAddress\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokensS1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokensS2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddresss\",\"type\":\"address\"}],\"name\":\"getLevel1Reffers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddresss\",\"type\":\"address\"}],\"name\":\"getLevel2Reffers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddresss\",\"type\":\"address\"}],\"name\":\"getLevel3Reffers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddresss\",\"type\":\"address\"}],\"name\":\"getLevel4Reffers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddresss\",\"type\":\"address\"}],\"name\":\"getLevel5Reffers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getNextClaimS1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getNextClaimS2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralAddress\",\"type\":\"address\"}],\"name\":\"getReferralData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemSaleTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenForUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReferralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUSDTInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialVestingDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"myReferrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phaseLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sale1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimStrikes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sale2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimStrikes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DGWPreSalev2", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://54bfaf339d3c7e7e35d9f12e7d55efda4d290147c3d598855e8dcdb4e4feccbb"}