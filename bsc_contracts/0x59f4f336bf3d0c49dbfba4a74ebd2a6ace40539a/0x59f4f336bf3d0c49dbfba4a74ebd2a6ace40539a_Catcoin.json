{"SourceCode": "// SPDX-License-Identifier: NOLICENSE\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IFactory{\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\n\r\ncontract Catcoin is Context, IERC20, Ownable {\r\n\r\n    mapping (address => uint256) private _balance;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isBot;\r\n\r\n    bool public swapEnabled;\r\n    bool private swapping;\r\n\r\n    IRouter private router;\r\n    address private pair;\r\n\r\n    uint8 private constant DECIMALS = 9;\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 private constant T_TOTAL = 5e16 * 10**DECIMALS;\r\n\r\n    uint256 public swapTokensAtAmount = 10_000_000_000_000 * 10**DECIMALS;\r\n\r\n    \r\n    address public constant ZERO_ADDRESS = address(0);\r\n    address public marketingAddress = ZERO_ADDRESS;\r\n\r\n    string private constant NAME = \"Catcoin\";\r\n    string private constant SYMBOL = \"CAT\";\r\n\r\n\r\n    enum ETransferType {\r\n        Sell,\r\n        Buy,\r\n        Transfer\r\n    }\r\n\r\n    struct Taxes {\r\n        uint16 marketing;\r\n        uint16 liquidity;\r\n    }\r\n\r\n    uint8 public transferTaxesTier;\r\n    Taxes public transferTaxes = Taxes(0,0);\r\n    uint8 public buyTaxesTier;\r\n    Taxes public buyTaxes;\r\n    uint8 public sellTaxesTier;\r\n    Taxes public sellTaxes;\r\n\r\n    struct TotFeesPaidStruct{\r\n        uint256 marketing;\r\n        uint256 liquidity;\r\n    }\r\n    TotFeesPaidStruct public totFeesPaid;\r\n\r\n    modifier lockTheSwap {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    constructor (address routerAddress) {\r\n        IRouter _router = IRouter(routerAddress);\r\n        address _pair = IFactory(_router.factory())\r\n            .createPair(address(this), _router.WETH());\r\n\r\n        router = _router;\r\n        pair = _pair;\r\n        \r\n        _balance[owner()] = T_TOTAL;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[marketingAddress]=true;\r\n        etx(2);\r\n\r\n        emit Transfer(address(0), owner(), T_TOTAL);\r\n    }\r\n\r\n    //std ERC20:\r\n    function name() public pure returns (string memory) {\r\n        return NAME;\r\n    }\r\n    function symbol() public pure returns (string memory) {\r\n        return SYMBOL;\r\n    }\r\n    function decimals() public pure returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    //override ERC20:\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return T_TOTAL;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balance[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n    \r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(amount <= balanceOf(from),\"You are trying to transfer more than your balance\");\r\n        require(!_isBot[from] && !_isBot[to], \"You are a bot\");\r\n\r\n        ETransferType transferType = ETransferType.Transfer;\r\n        address trader = address(0);\r\n        Taxes memory usedTaxes = transferTaxes;\r\n        bool excludedFromFee = false;\r\n        if (to == pair) {\r\n            transferType = ETransferType.Sell;\r\n            trader = from;\r\n            usedTaxes = sellTaxes;\r\n            excludedFromFee = _isExcludedFromFee[trader];\r\n        } else if (from == pair) {\r\n            transferType = ETransferType.Buy;\r\n            trader = to;\r\n            usedTaxes = buyTaxes;\r\n            excludedFromFee = _isExcludedFromFee[trader];\r\n        } else {\r\n            usedTaxes = transferTaxes;\r\n            excludedFromFee = _isExcludedFromFee[from] || _isExcludedFromFee[to];\r\n        }\r\n\r\n        bool canSwap = balanceOf(address(this)) >= swapTokensAtAmount;\r\n        if(transferType != ETransferType.Buy && !swapping && swapEnabled && canSwap && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]){\r\n            swapAndLiquify(swapTokensAtAmount);\r\n        }\r\n\r\n        if (excludedFromFee || usedTaxes.marketing + usedTaxes.liquidity == 0) {\r\n            taxFreeTransfer(from, to, amount);\r\n        } else {\r\n            _tokenTransfer(from, to, amount, usedTaxes);\r\n        }\r\n    }\r\n\r\n\r\n    // this method is responsible for taking all fee\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, Taxes memory usedTaxes) private {\r\n\r\n        uint256 tTransferAmount = tAmount;\r\n        \r\n        if(usedTaxes.liquidity != 0) {\r\n            uint256 tLiquidity = tAmount * usedTaxes.liquidity / 10000;\r\n            if (tLiquidity != 0) {\r\n                tTransferAmount -= tLiquidity;\r\n                totFeesPaid.liquidity += tLiquidity;\r\n                _addBalance(address(this), tLiquidity);\r\n                emit Transfer(sender, address(this), tLiquidity);\r\n            }\r\n        }\r\n        if (usedTaxes.marketing != 0) {\r\n            uint256 tMarketing = tAmount * usedTaxes.marketing / 10000;\r\n            if (tMarketing != 0) {\r\n                tTransferAmount -= tMarketing;\r\n                totFeesPaid.marketing += tMarketing;\r\n                _addBalance(marketingAddress, tMarketing);\r\n                emit Transfer(sender, marketingAddress, tMarketing);\r\n            }\r\n        }\r\n\r\n\r\n        _reduceBalance(sender, tAmount);\r\n        if (tTransferAmount != 0) {\r\n            _addBalance(recipient, tTransferAmount);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap{\r\n         //calculate how many tokens we need to exchange\r\n        uint256 tokensToSwap = contractTokenBalance / 2;\r\n        uint256 otherHalfOfTokens = tokensToSwap;\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForBNB(tokensToSwap, address(this));\r\n        uint256 newBalance = address(this).balance - (initialBalance);\r\n        addLiquidity(otherHalfOfTokens, newBalance);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount, address recipient) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // make the swap\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            payable(recipient),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getTaxesValueByTier(uint8 tier) private view returns(uint16, uint16) {\r\n        if (tier == 0) {\r\n            return (0, 0);\r\n        }\r\n        if (tier == 1) {\r\n            if (marketingAddress == ZERO_ADDRESS) {\r\n                return (0, 60);\r\n            }\r\n            return (30, 30);\r\n        }\r\n        \r\n        if (marketingAddress == ZERO_ADDRESS) {\r\n            return (0, 500);\r\n        }\r\n        return (200, 300);\r\n    }\r\n\r\n    function getTransferTaxesValueByTier(uint8 tier) private view returns(uint16, uint16) {\r\n        if (tier == 0) {\r\n            return (0, 0);\r\n        }\r\n        if (tier == 1) {\r\n            if (marketingAddress == ZERO_ADDRESS) {\r\n                return (0, 0);\r\n            }\r\n            return (30, 0);\r\n        }\r\n        \r\n        if (marketingAddress == ZERO_ADDRESS) {\r\n            return (0, 0);\r\n        }\r\n        return (30, 0);\r\n    }\r\n\r\n    function checkAndUpdateTaxes(bool buyChanged, bool sellChanged, bool transferChanged) private {\r\n        if (buyChanged) {\r\n            (uint16 v1, uint16 v2) = getTaxesValueByTier(buyTaxesTier);\r\n            buyTaxes = Taxes(v1, v2);\r\n        }\r\n        if (sellChanged) {\r\n            (uint16 v1, uint16 v2) = getTaxesValueByTier(sellTaxesTier);\r\n            sellTaxes = Taxes(v1, v2);\r\n        }\r\n        if (transferChanged) {\r\n            (uint16 v1, uint16 v2) = getTransferTaxesValueByTier(transferTaxesTier);\r\n            transferTaxes = Taxes(v1, v2);\r\n        }\r\n    }\r\n\r\n    function updateMarketingWallet(address newWallet) external onlyOwner{\r\n        require(marketingAddress != newWallet, \"Wallet already set\");\r\n        marketingAddress = newWallet;\r\n        _isExcludedFromFee[marketingAddress] = true;\r\n        checkAndUpdateTaxes(true, true, true);\r\n    }\r\n\r\n    function updateSwapTokensAtAmount(uint256 amount) external onlyOwner{\r\n        swapTokensAtAmount = amount * 10**DECIMALS;\r\n    }\r\n\r\n    function updateSwapEnabled(bool _enabled) external onlyOwner{\r\n        swapEnabled = _enabled;\r\n    }\r\n    \r\n    function setAntibot(address account, bool state) external onlyOwner{\r\n        require(_isBot[account] != state, \"Value already set\");\r\n        _isBot[account] = state;\r\n    }\r\n    \r\n    function bulkAntiBot(address[] memory accounts, bool state) external onlyOwner{\r\n        for(uint256 i = 0; i < accounts.length; i++){\r\n            _isBot[accounts[i]] = state;\r\n        }\r\n    }\r\n    \r\n    function isBot(address account) public view returns(bool){\r\n        return _isBot[account];\r\n    }\r\n    \r\n    function updateRouterAndPair(address newRouter, address newPair) external onlyOwner{\r\n        router = IRouter(newRouter);\r\n        pair = newPair;\r\n    }\r\n    \r\n    function taxFreeTransfer(address sender, address recipient, uint256 tAmount) internal {\r\n        _reduceBalance(sender, tAmount);\r\n        _addBalance(recipient, tAmount);\r\n\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    function _addBalance(address account, uint256 tAmount) private {\r\n        _balance[account] += tAmount;\r\n    }\r\n\r\n    function _reduceBalance(address account, uint256 tAmount) private {\r\n        _balance[account] -= tAmount;\r\n    }\r\n    \r\n    function airdropTokens(address[] memory accounts, uint256[] memory amounts) external onlyOwner{\r\n        require(accounts.length == amounts.length, \"Arrays must have the same size\");\r\n        for(uint256 i= 0; i < accounts.length; i++){\r\n            taxFreeTransfer(msg.sender, accounts[i], amounts[i] * 10**DECIMALS);\r\n        }\r\n    }\r\n    \r\n\r\n    function dtx() public onlyOwner{\r\n        buyTaxesTier = 0;\r\n        sellTaxesTier = 0;\r\n        transferTaxesTier = 0;\r\n        checkAndUpdateTaxes(true, true, true);\r\n    }\r\n\r\n    function etx(uint8 taxesTier) public onlyOwner{\r\n        require(taxesTier > 0 && taxesTier <=2);\r\n        buyTaxesTier = taxesTier;\r\n        sellTaxesTier = taxesTier;\r\n        transferTaxesTier = taxesTier;\r\n        checkAndUpdateTaxes(true, true, true);\r\n    }\r\n\r\n    function etxBuy(uint8 taxesTier) public onlyOwner{\r\n        require(taxesTier > 0 && taxesTier <=2);\r\n        buyTaxesTier = taxesTier;\r\n        checkAndUpdateTaxes(true, false, false);\r\n    }\r\n\r\n    function etxSell(uint8 taxesTier) public onlyOwner{\r\n        require(taxesTier > 0 && taxesTier <=2);\r\n        sellTaxesTier = taxesTier;\r\n        checkAndUpdateTaxes(false, true, false);\r\n    }\r\n\r\n    function etxTransfer(uint8 taxesTier) public onlyOwner{\r\n        require(taxesTier > 0 && taxesTier <=2);\r\n        transferTaxesTier = taxesTier;\r\n        checkAndUpdateTaxes(false, false, true);\r\n    }\r\n\r\n    function dtxBuy() public onlyOwner{\r\n        buyTaxesTier = 0;\r\n        checkAndUpdateTaxes(true, false, false);\r\n    }\r\n\r\n    function dtxSell() public onlyOwner{\r\n        sellTaxesTier = 0;\r\n        checkAndUpdateTaxes(false, true, false);\r\n    }\r\n\r\n    function dtxTransfer() public onlyOwner{\r\n        transferTaxesTier = 0;\r\n        checkAndUpdateTaxes(false, false, true);\r\n    }\r\n\r\n    //Use this in case BNB are sent to the contract by mistake\r\n    function rescueBNB(uint256 weiAmount) external onlyOwner{\r\n        require(address(this).balance >= weiAmount, \"insufficient BNB balance\");\r\n        payable(msg.sender).transfer(weiAmount);\r\n    }\r\n    \r\n    // Function to allow admin to claim *other* BEP20 tokens sent to this contract (by mistake)\r\n    // Owner cannot transfer out self from this smart contract\r\n    function rescueAnyBEP20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\r\n        require(_tokenAddr != address(this), \"Cannot transfer out self!\");\r\n        IERC20(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n\r\n    receive() external payable{\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"bulkAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxesTier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dtx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dtxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dtxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dtxTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"taxesTier\",\"type\":\"uint8\"}],\"name\":\"etx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"taxesTier\",\"type\":\"uint8\"}],\"name\":\"etxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"taxesTier\",\"type\":\"uint8\"}],\"name\":\"etxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"taxesTier\",\"type\":\"uint8\"}],\"name\":\"etxTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueAnyBEP20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxesTier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setAntibot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totFeesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTaxes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTaxesTier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"updateRouterAndPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Catcoin", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cca24b2d0ce0a4f88248219abfcac54b604da7d146e368879ac0c05131ebe692"}