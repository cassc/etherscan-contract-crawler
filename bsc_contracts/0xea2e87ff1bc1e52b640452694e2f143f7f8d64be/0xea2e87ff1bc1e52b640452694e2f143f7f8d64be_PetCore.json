{"SourceCode": "pragma solidity ^0.5.0;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) external onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract KRC721 {\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\ninterface IGeneScience {\r\n\r\n    /// @dev given genes of pet 1 & 2, return a genetic combination - may have a random factor\r\n    /// @param genes1 genes of mom\r\n    /// @param genes2 genes of sire\r\n    /// @return the genes that are supposed to be passed down the child\r\n    function mixGenes(uint256 genes1, uint256 genes2, uint256 targetBlock) external view returns (uint256);\r\n}\r\n\r\ninterface IKRC20 {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ninterface IPetCore {\r\n    function createPet(address _owner) external;\r\n}\r\n\r\n\r\ncontract PetAccessControl is Ownable {\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() external onlyOwner whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() external onlyOwner whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n}\r\n\r\ncontract PetBase is PetAccessControl {\r\n\r\n    /// @dev The Birth event is fired whenever a new pet comes into existence.\r\n    event Birth(address owner, uint256 PetId, uint256 matronId, uint256 sireId, uint256 genes);\r\n\r\n    /// @dev Transfer event as defined in current draft of KRC721.\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n\r\n    /*** DATA TYPES ***/\r\n    struct Pet {\r\n        // The Pet's genetic code is packed into these 256-bits\r\n        uint256 genes;\r\n\r\n        // The timestamp from the block when this pet came into existence.\r\n        uint64 birthTime;\r\n\r\n        // The minimum timestamp after which this pet can engage in breeding\r\n        // activities again.\r\n        uint64 cooldownEndBlock;\r\n\r\n        uint256 matronId;\r\n        uint256 sireId;\r\n\r\n        // Set to the ID of the sire pet for matrons that are pregnant,\r\n        // zero otherwise. A non-zero value here is how we know a pet\r\n        // is pregnant. Used to retrieve the genetic material for the new\r\n        // pet when the birth transpires.\r\n        uint256 siringWithId;\r\n\r\n        // Set to the index in the cooldown array that represents\r\n        // the current cooldown duration for this Pet. This starts at zero\r\n        // for gen0 pets, and is initialized to floor(generation/2) for others.\r\n        // Incremented by one for each successful breeding action, regardless\r\n        // of whether this pet is acting as matron or sire.\r\n        uint16 cooldownIndex;\r\n\r\n        // The \"generation number\" of this pet. pets minted by the CP contract\r\n        // for sale are called \"gen0\" and have a generation number of 0. The\r\n        // generation number of all other pets is the larger of the two generation\r\n        // numbers of their parents, plus one.\r\n        // (i.e. max(matron.generation, sire.generation) + 1)\r\n        uint16 generation;\r\n        \r\n        // The stages of this pet, starts from the junior stage, when feeding on, the pet grows to adulthood and middle-Age\r\n        uint16 stages;\r\n    }\r\n\r\n    /*** CONSTANTS ***/\r\n\r\n    /// @dev A lookup table indipeting the cooldown duration after any successful\r\n    ///  breeding action, called \"pregnancy time\" for matrons and \"siring cooldown\"\r\n    ///  for sires. Designed such that the cooldown roughly doubles each time a pet\r\n    ///  is bred, encouraging owners not to just keep breeding the same pet over\r\n    ///  and over again. Caps out at one week (a pet can breed an unbounded number\r\n    ///  of times, and the maximum cooldown is always seven days).\r\n    uint32[14] public cooldowns = [\r\n        uint32(1 minutes),\r\n        uint32(2 minutes),\r\n        uint32(5 minutes),\r\n        uint32(10 minutes),\r\n        uint32(30 minutes),\r\n        uint32(1 hours),\r\n        uint32(2 hours),\r\n        uint32(4 hours),\r\n        uint32(8 hours),\r\n        uint32(16 hours),\r\n        uint32(1 days),\r\n        uint32(2 days),\r\n        uint32(4 days),\r\n        uint32(7 days)\r\n    ];\r\n\r\n    // An approximation of currently how many seconds are in between blocks.\r\n    uint256 public secondsPerBlock = 6;\r\n\r\n    /*** STORAGE ***/\r\n\r\n    /// @dev An array containing the Pet struct for all pets in existence. The ID\r\n    ///  of each pet is actually an index into this array. Note that ID 0 is a negapet,\r\n    ///  the unPet, the mythical beast that is the parent of all gen0 pets.\r\n    Pet[] pets;\r\n\r\n    mapping (uint256 => address) public PetIndexToOwner;\r\n\r\n    // Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint256) ownershipTokenCount;\r\n\r\n    /// @dev A mapping from PetIDs to an address that has been approved to call\r\n    ///  transferFrom().\r\n    mapping (uint256 => address) public PetIndexToApproved;\r\n\r\n    /// @dev A mapping from PetIDs to an address that has been approved to use\r\n    ///  this Pet for siring via breedWith().\r\n    mapping (uint256 => address) public sireAllowedToAddress;\r\n\r\n    SaleClockAuction public saleAuction;\r\n\r\n    /// @dev The address of a custom ClockAuction subclassed contract that handles siring\r\n    ///  auctions. Needs to be separate from saleAuction because the actions taken on success\r\n    ///  after a sales and siring auction are quite different.\r\n    SiringClockAuction public siringAuction;\r\n\r\n    /// @dev Assigns ownership of a specific Pet to an address.\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        ownershipTokenCount[_to]++;\r\n        PetIndexToOwner[_tokenId] = _to;\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            delete sireAllowedToAddress[_tokenId];\r\n            delete PetIndexToApproved[_tokenId];\r\n        }\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev An internal method that creates a new Pet and stores it.\r\n    /// @param _matronId The Pet ID of the matron of this pet (zero for gen0)\r\n    /// @param _sireId The Pet ID of the sire of this pet (zero for gen0)\r\n    /// @param _generation The generation number of this pet.\r\n    /// @param _genes The Pet's genetic code.\r\n    /// @param _owner The inital owner of this pet, must be non-zero (except for the unPet, ID 0)\r\n    function _createPet(\r\n        uint256 _matronId,\r\n        uint256 _sireId,\r\n        uint256 _generation,\r\n        uint256 _genes,\r\n        address _owner\r\n    )\r\n        internal\r\n        returns (uint)\r\n    {\r\n        // New Pet starts with the same cooldown as parent gen/2\r\n        uint16 cooldownIndex = uint16(_generation / 2);\r\n        if (cooldownIndex > 13) {\r\n            cooldownIndex = 13;\r\n        }\r\n\r\n        Pet memory _Pet = Pet({\r\n            genes: _genes,\r\n            birthTime: uint64(now),\r\n            cooldownEndBlock: 0,\r\n            matronId: uint32(_matronId),\r\n            sireId: uint32(_sireId),\r\n            siringWithId: 0,\r\n            cooldownIndex: cooldownIndex,\r\n            generation: uint16(_generation),\r\n            stages: uint16(1)\r\n        });\r\n        uint256 newpetId = pets.push(_Pet) - 1;\r\n\r\n        emit Birth(\r\n            _owner,\r\n            newpetId,\r\n            uint256(_Pet.matronId),\r\n            uint256(_Pet.sireId),\r\n            _Pet.genes\r\n        );\r\n\r\n        _transfer(address(0), _owner, newpetId);\r\n\r\n        return newpetId;\r\n    }\r\n\r\n    function setSecondsPerBlock(uint256 secs) external onlyOwner {\r\n        require(secs < cooldowns[0]);\r\n        secondsPerBlock = secs;\r\n    }\r\n}\r\n\r\n\r\ncontract PetOwnership is PetBase, KRC721 {\r\n\r\n    string public constant name = \"My DeFi Pet\";\r\n    string public constant symbol = \"MDP\";\r\n\r\n    bytes4 constant InterfaceSignature_KRC165 =\r\n        bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    bytes4 constant InterfaceSignature_KRC721 =\r\n        bytes4(keccak256('name()')) ^\r\n        bytes4(keccak256('symbol()')) ^\r\n        bytes4(keccak256('totalSupply()')) ^\r\n        bytes4(keccak256('balanceOf(address)')) ^\r\n        bytes4(keccak256('ownerOf(uint256)')) ^\r\n        bytes4(keccak256('approve(address,uint256)')) ^\r\n        bytes4(keccak256('transfer(address,uint256)')) ^\r\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n        bytes4(keccak256('tokensOfOwner(address)')) ^\r\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\r\n\r\n\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\r\n    {\r\n\r\n        return ((_interfaceID == InterfaceSignature_KRC165) || (_interfaceID == InterfaceSignature_KRC721));\r\n    }\r\n\r\n    /// @dev Checks if a given address is the current owner of a particular Pet.\r\n    /// @param _claimant the address we are validating against.\r\n    /// @param _tokenId pet id, only valid when > 0\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return PetIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular Pet.\r\n    /// @param _claimant the address we are confirming pet is approved for.\r\n    /// @param _tokenId pet id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return PetIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        PetIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    /// @notice Returns the number of pets owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    /// @notice Transfers a Pet to another address\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the Pet to transfer.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(_to != address(saleAuction));\r\n        require(_to != address(siringAuction));\r\n\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the Pet that can be transferred if this call succeeds.\r\n    function approve(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        _approve(_tokenId, _to);\r\n\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @param _from The address that owns the Pet to be transfered.\r\n    /// @param _to The address that should take ownership of the Pet. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the Pet to be transferred.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Returns the total number of pets currently in existence.\r\n    function totalSupply() public view returns (uint) {\r\n        return pets.length - 1;\r\n    }\r\n\r\n    /// @notice Returns the address currently assigned ownership of a given Pet.\r\n    function ownerOf(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (address owner)\r\n    {\r\n        owner = PetIndexToOwner[_tokenId];\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n    /// @notice Returns a list of all Pet IDs assigned to an address.\r\n    /// @param _owner The owner whose pets we are interested in.\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] memory ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalpets = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            uint256 petId;\r\n\r\n            for (petId = 1; petId <= totalpets; petId++) {\r\n                if (PetIndexToOwner[petId] == _owner) {\r\n                    result[resultIndex] = petId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\n/// @title A facet of PetCore that manages Pet siring, gestation, and birth.\r\ncontract PetBreeding is PetOwnership {\r\n    \r\n    address public dpetToken = 0xfb62AE373acA027177D1c18Ee0862817f9080d08;\r\n\r\n    /// @dev The Pregnant event is fired when two pets successfully breed and the pregnancy\r\n    ///  timer begins for the matron.\r\n    event Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 cooldownEndBlock);\r\n\r\n    uint256 public autoBirthFee = 1*10**18; // pet token\r\n\r\n    // Keeps track of number of pregnant pets.\r\n    uint256 public pregnantpets;\r\n\r\n    address public geneScience;\r\n\r\n    function setGeneScienceAddress(address _address) external onlyOwner {\r\n        geneScience = _address;\r\n    }\r\n\r\n    /// @dev Checks that a given pet is able to breed. Requires that the\r\n    ///  current cooldown is finished (for sires) and also checks that there is\r\n    ///  no pending pregnancy.\r\n    function _isReadyToBreed(Pet memory _pet) internal view returns (bool) {\r\n        return (_pet.siringWithId == 0) && (_pet.cooldownEndBlock <= uint64(block.number));\r\n    }\r\n\r\n    /// @dev Check if a sire has authorized breeding with this matron. True if both sire\r\n    ///  and matron have the same owner, or if the sire has given siring permission to\r\n    ///  the matron's owner (via approveSiring()).\r\n    function _isSiringPermitted(uint256 _sireId, uint256 _matronId) internal view returns (bool) {\r\n        address matronOwner = PetIndexToOwner[_matronId];\r\n        address sireOwner = PetIndexToOwner[_sireId];\r\n\r\n        return (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner);\r\n    }\r\n\r\n    /// @dev Set the cooldownEndTime for the given Pet, based on its current cooldownIndex.\r\n    /// @param _pet A reference to the Pet in storage which needs its timer started.\r\n    function _triggerCooldown(Pet storage _pet) internal {\r\n        _pet.cooldownEndBlock = uint64((cooldowns[_pet.cooldownIndex]/secondsPerBlock) + block.number);\r\n\r\n        if (_pet.cooldownIndex < 13) {\r\n            _pet.cooldownIndex += 1;\r\n        }\r\n    }\r\n\r\n    /// @notice Grants approval to another user to sire with one of your pets.\r\n    /// @param _addr The address that will be able to sire with your Pet. Set to\r\n    ///  address(0) to clear all siring approvals for this Pet.\r\n    /// @param _sireId A Pet that you own that _addr will now be able to sire with.\r\n    function approveSiring(address _addr, uint256 _sireId)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _sireId));\r\n        sireAllowedToAddress[_sireId] = _addr;\r\n    }\r\n\r\n    function setAutoBirthFee(uint256 val) external onlyOwner {\r\n        autoBirthFee = val;\r\n    }\r\n\r\n    function _isReadyToGiveBirth(Pet memory _matron) private view returns (bool) {\r\n        return (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number));\r\n    }\r\n\r\n    /// @notice Checks that a given pet is able to breed\r\n    /// @param _PetId reference the id of the pet\r\n    function isReadyToBreed(uint256 _PetId)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(_PetId > 0);\r\n        Pet storage pet = pets[_PetId];\r\n        return _isReadyToBreed(pet);\r\n    }\r\n\r\n    /// @dev Checks whether a Pet is currently pregnant.\r\n    /// @param _PetId reference the id of the pet\r\n    function isPregnant(uint256 _PetId)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(_PetId > 0);\r\n        return pets[_PetId].siringWithId != 0;\r\n    }\r\n\r\n    /// @param _matron A reference to the Pet struct of the potential matron.\r\n    /// @param _matronId The matron's ID.\r\n    /// @param _sire A reference to the Pet struct of the potential sire.\r\n    /// @param _sireId The sire's ID\r\n    function _isValidMatingPair(\r\n        Pet storage _matron,\r\n        uint256 _matronId,\r\n        Pet storage _sire,\r\n        uint256 _sireId\r\n    )\r\n        private\r\n        view\r\n        returns(bool)\r\n    {\r\n        // A Pet can't breed with itself!\r\n        if (_matronId == _sireId) {\r\n            return false;\r\n        }\r\n\r\n        // pets can't breed with their parents.\r\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\r\n            return false;\r\n        }\r\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\r\n            return false;\r\n        }\r\n\r\n        if (_sire.matronId == 0 || _matron.matronId == 0) {\r\n            return true;\r\n        }\r\n\r\n        // pets can't breed with full or half siblings.\r\n        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\r\n            return false;\r\n        }\r\n        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Internal check to see if a given sire and matron are a valid mating pair for\r\n    ///  breeding via auction.\r\n    function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        Pet storage matron = pets[_matronId];\r\n        Pet storage sire = pets[_sireId];\r\n        return _isValidMatingPair(matron, _matronId, sire, _sireId);\r\n    }\r\n\r\n    /// @param _matronId The ID of the proposed matron.\r\n    /// @param _sireId The ID of the proposed sire.\r\n    function canBreedWith(uint256 _matronId, uint256 _sireId)\r\n        external\r\n        view\r\n        returns(bool)\r\n    {\r\n        require(_matronId > 0);\r\n        require(_sireId > 0);\r\n        Pet storage matron = pets[_matronId];\r\n        Pet storage sire = pets[_sireId];\r\n        return _isValidMatingPair(matron, _matronId, sire, _sireId) &&\r\n            _isSiringPermitted(_sireId, _matronId);\r\n    }\r\n\r\n    function _breedWith(uint256 _matronId, uint256 _sireId) internal {\r\n        // Grab a reference to the pets from storage.\r\n        Pet storage sire = pets[_sireId];\r\n        Pet storage matron = pets[_matronId];\r\n\r\n        // Mark the matron as pregnant, keeping track of who the sire is.\r\n        matron.siringWithId = uint32(_sireId);\r\n\r\n        // Trigger the cooldown for both parents.\r\n        _triggerCooldown(sire);\r\n        _triggerCooldown(matron);\r\n\r\n        delete sireAllowedToAddress[_matronId];\r\n        delete sireAllowedToAddress[_sireId];\r\n\r\n        pregnantpets++;\r\n\r\n        emit Pregnant(PetIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock);\r\n    }\r\n\r\n    /// @param _matronId The ID of the Pet acting as matron\r\n    /// @param _sireId The ID of the Pet acting as sire\r\n    function breedWithAuto(uint256 _matronId, uint256 _sireId, uint256 _amount)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Checks for .\r\n        require(_amount >= autoBirthFee, \"Must payment\");\r\n        require(IKRC20(dpetToken).transferFrom(msg.sender, address(this), _amount));\r\n        // Caller must own the matron.\r\n        require(_owns(msg.sender, _matronId));\r\n        require(_isSiringPermitted(_sireId, _matronId));\r\n\r\n        // Grab a reference to the potential matron\r\n        Pet storage matron = pets[_matronId];\r\n\r\n        // Make sure matron isn't pregnant, or in the middle of a siring cooldown\r\n        require(_isReadyToBreed(matron));\r\n\r\n        // Grab a reference to the potential sire\r\n        Pet storage sire = pets[_sireId];\r\n\r\n        // Make sure sire isn't pregnant, or in the middle of a siring cooldown\r\n        require(_isReadyToBreed(sire));\r\n\r\n        require(_isValidMatingPair(\r\n            matron,\r\n            _matronId,\r\n            sire,\r\n            _sireId\r\n        ));\r\n\r\n        _breedWith(_matronId, _sireId);\r\n    }\r\n\r\n    /// @notice Have a pregnant Pet give birth!\r\n    /// @param _matronId A Pet ready to give birth.\r\n    /// @return The Pet ID of the new pet.\r\n    function giveBirth(uint256 _matronId)\r\n        external\r\n        whenNotPaused\r\n        returns(uint256)\r\n    {\r\n        Pet storage matron = pets[_matronId];\r\n\r\n        // Check that the matron is a valid pet.\r\n        require(matron.birthTime != 0, \"Invalid pet\");\r\n\r\n        require(_isReadyToGiveBirth(matron), \"Not ready birth\");\r\n\r\n        uint256 sireId = matron.siringWithId;\r\n        Pet storage sire = pets[sireId];\r\n\r\n        uint16 parentGen = matron.generation;\r\n        if (sire.generation > matron.generation) {\r\n            parentGen = sire.generation;\r\n        }\r\n\r\n        uint256 childGenes = IGeneScience(geneScience).mixGenes(matron.genes, sire.genes, matron.cooldownEndBlock - 1);\r\n\r\n        address owner = PetIndexToOwner[_matronId];\r\n        uint256 petId = _createPet(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\r\n\r\n        delete matron.siringWithId;\r\n\r\n        pregnantpets--;\r\n\r\n        return petId;\r\n    }\r\n}\r\n\r\n/// @title Auction Core\r\ncontract ClockAuctionBase {\r\n    using SafeMath for uint256;\r\n     \r\n    address public dpetToken = 0xfb62AE373acA027177D1c18Ee0862817f9080d08;\r\n\r\n    // Represents an auction on an NFT\r\n    struct Auction {\r\n        // Current owner of NFT\r\n        address seller;\r\n        // Price at beginning of auction\r\n        uint128 startingPrice;\r\n        // Price at end of auction\r\n        uint128 endingPrice;\r\n        // Duration (in seconds) of auction\r\n        uint64 duration;\r\n        // Time when auction started\r\n        uint64 startedAt;\r\n    }\r\n\r\n    // Reference to contract tracking NFT ownership\r\n    KRC721 public nonFungibleContract;\r\n\r\n    uint256 public ownerCut;\r\n    mapping (uint256 => Auction) tokenIdToAuction;\r\n\r\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\r\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\r\n    event AuctionCancelled(uint256 tokenId);\r\n\r\n    /// @dev Returns true if the claimant owns the token.\r\n    /// @param _claimant - Address claiming to own the token.\r\n    /// @param _tokenId - ID of token whose ownership to verify.\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n    }\r\n\r\n    /// @dev Escrows the NFT, assigning ownership to this contract.\r\n    /// @param _owner - Current owner address of token to escrow.\r\n    /// @param _tokenId - ID of token whose approval to verify.\r\n    function _escrow(address _owner, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transferFrom(_owner, address(this), _tokenId);\r\n    }\r\n\r\n    /// @dev Transfers an NFT owned by this contract to another address.\r\n    /// @param _receiver - Address to transfer NFT to.\r\n    /// @param _tokenId - ID of token to transfer.\r\n    function _transfer(address _receiver, uint256 _tokenId) internal {\r\n        nonFungibleContract.transfer(_receiver, _tokenId);\r\n    }\r\n\r\n    /// @dev Adds an auction to the list of open auctions.\r\n    /// @param _tokenId The ID of the token to be put on auction.\r\n    /// @param _auction Auction to add.\r\n    function _addAuction(uint256 _tokenId, Auction memory _auction) internal {\r\n        require(_auction.duration >= 1 minutes);\r\n\r\n        tokenIdToAuction[_tokenId] = _auction;\r\n\r\n        emit AuctionCreated(\r\n            uint256(_tokenId),\r\n            uint256(_auction.startingPrice),\r\n            uint256(_auction.endingPrice),\r\n            uint256(_auction.duration)\r\n        );\r\n    }\r\n\r\n    /// @dev Cancels an auction unconditionally.\r\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\r\n        _removeAuction(_tokenId);\r\n        _transfer(_seller, _tokenId);\r\n        emit AuctionCancelled(_tokenId);\r\n    }\r\n\r\n    /// @dev Computes the price and transfers winnings.\r\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n\r\n        // Check that the bid is greater than or equal to the current price\r\n        uint256 price = _currentPrice(auction);\r\n        require(_bidAmount >= price);\r\n\r\n        address seller = auction.seller;\r\n\r\n        // The bid is good! Remove the auction before sending the fees\r\n        // to the sender so we can't have a reentrancy attack.\r\n        _removeAuction(_tokenId);\r\n\r\n        if (price > 0) {\r\n            uint256 auctioneerCut = _computeCut(price);\r\n            uint256 sellerProceeds = price - auctioneerCut;\r\n\r\n            require(IKRC20(dpetToken).transfer(seller, sellerProceeds));\r\n        }\r\n\r\n        uint256 bidExcess = _bidAmount - price;\r\n\r\n        require(IKRC20(dpetToken).transfer(msg.sender, bidExcess));\r\n\r\n        emit AuctionSuccessful(_tokenId, price, msg.sender);\r\n\r\n        return price;\r\n    }\r\n\r\n    /// @dev Removes an auction from the list of open auctions.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function _removeAuction(uint256 _tokenId) internal {\r\n        delete tokenIdToAuction[_tokenId];\r\n    }\r\n\r\n    /// @dev Returns true if the NFT is on auction.\r\n    /// @param _auction - Auction to check.\r\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\r\n        return (_auction.startedAt > 0);\r\n    }\r\n\r\n    function _currentPrice(Auction storage _auction)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 secondsPassed = 0;\r\n\r\n        if (now > _auction.startedAt) {\r\n            secondsPassed = now - _auction.startedAt;\r\n        }\r\n\r\n        return _computeCurrentPrice(\r\n            _auction.startingPrice,\r\n            _auction.endingPrice,\r\n            _auction.duration,\r\n            secondsPassed\r\n        );\r\n    }\r\n\r\n    /// @dev Computes the current price of an auction.\r\n    function _computeCurrentPrice(\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        uint256 _secondsPassed\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (_secondsPassed >= _duration) {\r\n            return _endingPrice;\r\n        } else {\r\n            uint256 totalPriceChange = _endingPrice.sub(_startingPrice);\r\n\r\n            uint256 currentPriceChange = totalPriceChange * _secondsPassed / _duration;\r\n\r\n            uint256 currentPrice = _startingPrice + currentPriceChange;\r\n\r\n            return currentPrice;\r\n        }\r\n    }\r\n\r\n    /// @dev Computes owner's cut of a sale.\r\n    /// @param _price - Sale price of NFT.\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        return _price * ownerCut / 10000;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() external onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    emit Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() external onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    emit Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/// @title Clock auction for non-fungible tokens.\r\ncontract ClockAuction is Pausable, ClockAuctionBase {\r\n\r\n    bytes4 constant InterfaceSignature_KRC721 = bytes4(0x9a20483d);\r\n\r\n    /// @param _nftAddress - address of a deployed contract implementing\r\n    ///  the Nonfungible Interface.\r\n    /// @param _cut - percent cut the owner takes on each auction, must be\r\n    ///  between 0-10,000.\r\n    constructor(address _nftAddress, uint256 _cut) public {\r\n        require(_cut <= 10000);\r\n        ownerCut = _cut;\r\n\r\n        KRC721 candidateContract = KRC721(_nftAddress);\r\n        require(candidateContract.supportsInterface(InterfaceSignature_KRC721));\r\n        nonFungibleContract = candidateContract;\r\n    }\r\n\r\n    function withdrawBalance() external onlyOwner {\r\n        address(uint160(owner)).transfer(address(this).balance);\r\n        IKRC20(dpetToken).transfer(owner, getBalance());\r\n    }\r\n    \r\n    function changeCut(uint256 _cut) external onlyOwner {\r\n        require(_cut <= 10000);\r\n        ownerCut = _cut;\r\n    }\r\n    \r\n    function getBalance() view public returns(uint256) {\r\n        return IKRC20(dpetToken).balanceOf(address(this));\r\n    }\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of time to move between starting\r\n    ///  price and ending price (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(_owns(msg.sender, _tokenId), \"Not PetId owner\");\r\n        _escrow(msg.sender, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Bids on an open auction, completing the auction and transferring\r\n    ///  ownership of the NFT if enough KAI is supplied.\r\n    /// @param _tokenId - ID of token to bid on.\r\n    function bid(uint256 _tokenId, uint256 _amount)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // require(IKRC20(dpetToken).transfer(address(this), _amount));\r\n        // _bid will throw if the bid or funds transfer fails\r\n        _bid(_tokenId, _amount);\r\n        _transfer(msg.sender, _tokenId);\r\n    }\r\n\r\n    /// @dev Cancels an auction that hasn't been won yet.\r\n    ///  Returns the NFT to original owner.\r\n    /// @notice This is a state-modifying function that can\r\n    ///  be called while the contract is paused.\r\n    /// @param _tokenId - ID of token on auction\r\n    function cancelAuction(uint256 _tokenId)\r\n        external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction), \"TokenID is a must on auction\");\r\n        address seller = auction.seller;\r\n        require(msg.sender == seller);\r\n        _cancelAuction(_tokenId, seller);\r\n    }\r\n\r\n    /// @dev Cancels an auction when the contract is paused.\r\n    ///  Only the owner may do this, and NFTs are returned to\r\n    ///  the seller. This should only be used in emergencies.\r\n    /// @param _tokenId - ID of the NFT on auction to cancel.\r\n    function cancelAuctionWhenPaused(uint256 _tokenId)\r\n        whenPaused\r\n        onlyOwner\r\n        external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction), \"TokenID is a must on auction\");\r\n        _cancelAuction(_tokenId, auction.seller);\r\n    }\r\n\r\n    /// @dev Returns auction info for an NFT on auction.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function getAuction(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns\r\n    (\r\n        address seller,\r\n        uint256 startingPrice,\r\n        uint256 endingPrice,\r\n        uint256 duration,\r\n        uint256 startedAt\r\n    ) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction), \"TokenID is a must on auction\");\r\n        return (\r\n            auction.seller,\r\n            auction.startingPrice,\r\n            auction.endingPrice,\r\n            auction.duration,\r\n            auction.startedAt\r\n        );\r\n    }\r\n\r\n    /// @dev Returns the current price of an auction.\r\n    /// @param _tokenId - ID of the token price we are checking.\r\n    function getCurrentPrice(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction), \"TokenID is a must on auction\");\r\n        return _currentPrice(auction);\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title Reverse auction modified for siring\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract SiringClockAuction is ClockAuction {\r\n\r\n    bool public isSiringClockAuction = true;\r\n\r\n    constructor(address _nftAddr, uint256 _cut) public\r\n        ClockAuction(_nftAddr, _cut) {}\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of auction (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        external\r\n    {\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Places a bid for siring. Requires the sender\r\n    /// is the PetCore contract because all bid methods\r\n    /// should be wrapped. Also returns the Pet to the\r\n    /// seller rather than the winner.\r\n    function bid(uint256 _tokenId, uint256 _amount)\r\n        external\r\n    {   \r\n        // require(IKRC20(dpetToken).transferFrom(msg.sender, address(this), _amount));\r\n        require(msg.sender == address(nonFungibleContract));\r\n        address seller = tokenIdToAuction[_tokenId].seller;\r\n        // _bid checks that token ID is valid and will throw if bid fails\r\n        _bid(_tokenId, _amount);\r\n        // We transfer the Pet back to the seller, the winner will get\r\n        // the offspring\r\n        _transfer(seller, _tokenId);\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title Clock auction modified for sale of pets\r\ncontract SaleClockAuction is ClockAuction {\r\n\r\n    bool public isSaleClockAuction = true;\r\n\r\n    // Tracks last 5 sale price of gen0 Pet sales\r\n    uint256 public gen0SaleCount;\r\n    uint256[5] public lastGen0SalePrices;\r\n\r\n    constructor(address _nftAddr, uint256 _cut) public\r\n        ClockAuction(_nftAddr, _cut) {}\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of auction (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        external\r\n    {\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Updates lastSalePrice if seller is the nft contract\r\n    /// Otherwise, works the same as default bid method.\r\n    function bid(uint256 _tokenId, uint256 _amount)\r\n        external\r\n    {\r\n        require(IKRC20(dpetToken).transferFrom(msg.sender, address(this), _amount));\r\n\r\n        // _bid verifies token ID size\r\n        address seller = tokenIdToAuction[_tokenId].seller;\r\n        uint256 price = _bid(_tokenId, _amount);\r\n        _transfer(msg.sender, _tokenId);\r\n\r\n        // If not a gen0 auction, exit\r\n        if (seller == address(nonFungibleContract)) {\r\n            // Track gen0 sale prices\r\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\r\n            gen0SaleCount++;\r\n        }\r\n    }\r\n\r\n    function averageGen0SalePrice() external view returns (uint256) {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            sum += lastGen0SalePrices[i];\r\n        }\r\n        return sum / 5;\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title all functions related to creating pets\r\ncontract PetMinting is PetBreeding, IPetCore {\r\n\r\n    // Counts the number of pets the contract owner has created.\r\n    uint256 public gen0CreatedCount;\r\n    uint256 public gen0Price = 1* 10**18;\r\n    address public stakingContract;\r\n    \r\n    uint256 private nonce;\r\n    \r\n    /**\r\n     * @dev Throws if called by any account other than the staking contract.\r\n     */\r\n    modifier onlyStakingContract() {\r\n        require(msg.sender == stakingContract, \"Ownable: caller is not the staking contract\");\r\n        _;\r\n    }\r\n\r\n\r\n    /// @param _owner the future owner of the created pets.\r\n    function createPromoPet(address _owner, uint256 _amount) external  {\r\n        require(_amount >= gen0Price, \"INVALID AMOUNT\");\r\n        require(IKRC20(dpetToken).transferFrom(msg.sender, address(this), _amount));\r\n\r\n        gen0CreatedCount++;\r\n        uint256 genes = _randomPetGenes();\r\n        _createPet(0, 0, 0, genes, _owner);\r\n    }\r\n    \r\n    function createPet(address _owner) external onlyStakingContract {\r\n        gen0CreatedCount++;\r\n        uint256 genes = _randomPetGenes();\r\n        _createPet(0, 0, 0, genes, _owner);\r\n    }\r\n    \r\n    function createGen0Auction(address _owner, uint256 _genes) external onlyOwner {\r\n        gen0CreatedCount++;\r\n        _createPet(0, 0, 0, _genes, _owner);\r\n    }\r\n    \r\n    function updateGen0Price(uint256 _gen0Price) external onlyOwner {\r\n        gen0Price = _gen0Price;\r\n    }\r\n    \r\n    function setStakingContract(address _stakingContract) external onlyOwner {\r\n        stakingContract = _stakingContract;\r\n    }\r\n\r\n    function _randomPetGenes() internal returns (uint256) {\r\n        uint256 randomN = uint256(blockhash(block.number));\r\n        uint256 genes = uint256(keccak256(abi.encodePacked(randomN, block.timestamp, nonce))) % (10 **72) + 1*10**71;\r\n        nonce++;\r\n        \r\n        return genes;\r\n    }\r\n}\r\n\r\ncontract PetCore is PetMinting {\r\n    \r\n    uint256 public amountToAdulthood = 10 * 10**18;\r\n    uint256 public amountToMiddleAge = 15 * 10**18;\r\n    address public siringAuctionAddr;\r\n    address public saleAuctionAddr;\r\n\r\n\r\n    constructor() public {\r\n        paused = false;\r\n\r\n        // start with the mythical pet 0 - so we don't have generation-0 parent issues\r\n        _createPet(0, 0, 0, uint256(-1), address(0));\r\n    }\r\n    \r\n    /// @dev Reject all KAI from being sent here, unless it's from one of the\r\n    ///  two auction contracts.\r\n    function() external payable {\r\n        require(\r\n            msg.sender == address(saleAuction) ||\r\n            msg.sender == address(siringAuction)\r\n        );\r\n    }\r\n\r\n    /// @dev Sets the reference to the sale auction.\r\n    /// @param _address - Address of sale contract.\r\n    function setSaleAuctionAddress(address _address) external onlyOwner {\r\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\r\n\r\n        require(candidateContract.isSaleClockAuction());\r\n\r\n        // Set the new contract address\r\n        saleAuction = candidateContract;\r\n        saleAuctionAddr = _address;\r\n    }\r\n\r\n    function setSiringAuctionAddress(address _address) external  onlyOwner {\r\n        SiringClockAuction candidateContract = SiringClockAuction(_address);\r\n\r\n        require(candidateContract.isSiringClockAuction());\r\n\r\n        // Set the new contract address\r\n        siringAuction = candidateContract;\r\n        siringAuctionAddr = _address;\r\n    }\r\n\r\n    function createSaleAuction(\r\n        uint256 _PetId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _PetId), \"Not PetId owner\");\r\n\r\n        require(!isPregnant(_PetId), \"Pet is pregnant\");\r\n        _approve(_PetId, address(saleAuction));\r\n        saleAuction.createAuction(\r\n            _PetId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function createSiringAuction(\r\n        uint256 _PetId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If Pet is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(msg.sender, _PetId), \"Not PetId owner\");\r\n        require(isReadyToBreed(_PetId), \"Not ready to breed\");\r\n        _approve(_PetId, address(siringAuction));\r\n        // Siring auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the Pet.\r\n        siringAuction.createAuction(\r\n            _PetId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /// @dev Completes a siring auction by bidding.\r\n    ///  Immediately breeds the winning matron with the sire on auction.\r\n    /// @param _sireId - ID of the sire on auction.\r\n    /// @param _matronId - ID of the matron owned by the bidder.\r\n    function bidOnSiringAuction(\r\n        uint256 _sireId,\r\n        uint256 _matronId,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(IKRC20(dpetToken).transferFrom(msg.sender, address(this), _amount));\r\n        // Auction contract checks input sizes\r\n        require(_owns(msg.sender, _matronId), \"Not matron owner\");\r\n        require(isReadyToBreed(_matronId), \"Not ready to breed\");\r\n        require(_canBreedWithViaAuction(_matronId, _sireId), \"Can't breed with via auction\");\r\n        \r\n        // Define the current price of the auction.\r\n        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\r\n        require(_amount >= currentPrice + autoBirthFee);\r\n\r\n        // // Siring auction will throw if the bid fails.\r\n        require(IKRC20(dpetToken).transfer(siringAuctionAddr, _amount));\r\n        siringAuction.bid(_sireId, _amount);\r\n        _breedWith(uint32(_matronId), uint32(_sireId));\r\n    }\r\n\r\n    /// @notice Returns all the relevant information about a specific Pet.\r\n    /// @param _id The ID of the Pet of interest.\r\n    function getPet(uint256 _id)\r\n        public\r\n        view\r\n        returns (\r\n        bool isGestating,\r\n        bool isReady,\r\n        uint256 cooldownIndex,\r\n        uint256 nextActionAt,\r\n        uint256 siringWithId,\r\n        uint256 birthTime,\r\n        uint256 matronId,\r\n        uint256 sireId,\r\n        uint256 generation,\r\n        string memory genes,\r\n        uint256 stages\r\n    ) {\r\n        Pet storage pet = pets[_id];\r\n\r\n        isGestating = (pet.siringWithId != 0);\r\n        isReady = (pet.cooldownEndBlock <= block.number);\r\n        cooldownIndex = uint256(pet.cooldownIndex);\r\n        nextActionAt = uint256(pet.cooldownEndBlock);\r\n        siringWithId = uint256(pet.siringWithId);\r\n        birthTime = uint256(pet.birthTime);\r\n        matronId = uint256(pet.matronId);\r\n        sireId = uint256(pet.sireId);\r\n        generation = uint256(pet.generation);\r\n        genes = _uintToStr(pet.genes);\r\n        stages = uint256(pet.stages);\r\n    }\r\n    \r\n    /// @notice feed on a specific Pet.\r\n    /// @param _petId The ID of the Pet of interest.\r\n    /// @param _amount.\r\n    function feedOnPet(uint256 _petId, uint256 _amount) external {\r\n        require(IKRC20(dpetToken).transferFrom(msg.sender, address(this), _amount));\r\n        \r\n        Pet storage pet = pets[_petId];\r\n        if (_amount == amountToAdulthood) {\r\n            require(pet.stages == 1, \"INVALID STAGE 1\");\r\n            pet.stages += 1;\r\n        }\r\n        \r\n        if (_amount == amountToMiddleAge) {\r\n            require(pet.stages == 2, \"INVALID STAGE 2\");\r\n            pet.stages += 1;\r\n        }\r\n    }\r\n    \r\n    function setAmountToAdulthood(uint256 _amountToAdulthood) external onlyOwner {\r\n        amountToAdulthood = _amountToAdulthood;\r\n    }\r\n    \r\n    function setAmountToMiddleAge(uint256 _amountToMiddleAge) external onlyOwner {\r\n        amountToMiddleAge = _amountToMiddleAge;\r\n    }\r\n    \r\n    function getBalance() public view returns(uint256) {\r\n        return IKRC20(dpetToken).balanceOf(address(this));\r\n    }\r\n    \r\n    function withdrawBalance() external onlyOwner {\r\n        IKRC20(dpetToken).transfer(owner, getBalance());\r\n    }\r\n    \r\n    function _uintToStr(uint _i) private pure returns (string memory _uintAsString) {\r\n        uint number = _i;\r\n        if (number == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = number;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (number != 0) {\r\n            bstr[k--] = byte(uint8(48 + number % 10));\r\n            number /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\n\r\ncontract GeneScience is IGeneScience {\r\n\r\n    uint256 internal constant maskLast8Bits = uint256(0xff);\r\n    uint256 internal constant maskFirst248Bits = uint256(~0xff);\r\n\r\n    /// @dev given a characteristic and 2 genes (unsorted) - returns > 0 if the genes ascended, that's the value\r\n    /// @param trait1 any trait of that characteristic\r\n    /// @param trait2 any trait of that characteristic\r\n    /// @param rand is expected to be a 3 bits number (0~7)\r\n    /// @return -1 if didnt match any ascention, OR a number from 0 to 30 for the ascended trait\r\n    function _ascend(uint8 trait1, uint8 trait2, uint256 rand) internal pure returns(uint8 ascension) {\r\n        ascension = 0;\r\n\r\n        uint8 smallT = trait1;\r\n        uint8 bigT = trait2;\r\n\r\n        if (smallT > bigT) {\r\n            bigT = trait1;\r\n            smallT = trait2;\r\n        }\r\n\r\n        if ((bigT - smallT == 1) && smallT % 2 == 0) {\r\n\r\n            // The rand argument is expected to be a random number 0-7.\r\n            // 1st and 2nd tier: 1/4 chance (rand is 0 or 1)\r\n            // 3rd and 4th tier: 1/8 chance (rand is 0)\r\n\r\n            // must be at least this much to ascend\r\n            uint256 maxRand;\r\n            if (smallT < 23) maxRand = 1;\r\n            else maxRand = 0;\r\n\r\n            if (rand <= maxRand ) {\r\n                ascension = (smallT / 2) + 16;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev given a number get a slice of any bits, at certain offset\r\n    /// @param _n a number to be sliced\r\n    /// @param _nbits how many bits long is the new number\r\n    /// @param _offset how many bits to skip\r\n    function _sliceNumber(uint256 _n, uint256 _nbits, uint256 _offset) private pure returns (uint256) {\r\n        // mask is made by shifting left an offset number of times\r\n        uint256 mask = uint256((2**_nbits) - 1) << _offset;\r\n        // AND n with mask, and trim to max of _nbits bits\r\n        return uint256((_n & mask) >> _offset);\r\n    }\r\n\r\n    /// @dev Get a 5 bit slice from an input as a number\r\n    /// @param _input bits, encoded as uint\r\n    /// @param _slot from 0 to 50\r\n    function _get5Bits(uint256 _input, uint256 _slot) internal pure returns(uint8) {\r\n        return uint8(_sliceNumber(_input, uint256(5), _slot * 5));\r\n    }\r\n\r\n    /// @dev Parse a pet gene and returns all of 12 \"trait stack\" that makes the characteristics\r\n    /// @param _genes pet gene\r\n    /// @return the 48 traits that composes the genetic code, logically divided in stacks of 4, where only the first trait of each stack may express\r\n    function decode(uint256 _genes) public pure returns(uint8[] memory) {\r\n        uint8[] memory traits = new uint8[](48);\r\n        uint256 i;\r\n        for(i = 0; i < 48; i++) {\r\n            traits[i] = _get5Bits(_genes, i);\r\n        }\r\n        return traits;\r\n    }\r\n\r\n    /// @dev Given an array of traits return the number that represent genes\r\n    function encode(uint8[] memory _traits) public pure returns (uint256 _genes) {\r\n        _genes = 0;\r\n        for(uint256 i = 0; i < 48; i++) {\r\n            _genes = _genes << 5;\r\n            // bitwise OR trait with _genes\r\n            _genes = _genes | _traits[47 - i];\r\n        }\r\n        return _genes;\r\n    }\r\n\r\n    /// @dev return the expressing traits\r\n    /// @param _genes the long number expressing pet genes\r\n    function expressingTraits(uint256 _genes) public pure returns(uint8[12] memory) {\r\n        uint8[12] memory express;\r\n        for(uint256 i = 0; i < 12; i++) {\r\n            express[i] = _get5Bits(_genes, i * 4);\r\n        }\r\n        return express;\r\n    }\r\n\r\n    /// @dev the function as defined in the breeding contract - as defined in CK bible\r\n    function mixGenes(uint256 _genes1, uint256 _genes2, uint256 _targetBlock) public view returns (uint256) {\r\n        // require(block.number > _targetBlock);\r\n\r\n        uint256 randomN = uint256(blockhash(_targetBlock));\r\n        uint256 rand;\r\n\r\n        if (randomN == 0) {\r\n\r\n            _targetBlock = (block.number & maskFirst248Bits) + (_targetBlock & maskLast8Bits);\r\n\r\n            // The computation above could result in a block LARGER than the current block,\r\n            // if so, subtract 256.\r\n            if (_targetBlock >= block.number) _targetBlock -= 256;\r\n\r\n            randomN = uint256(blockhash(_targetBlock));\r\n        }\r\n\r\n        // generate 256 bits of random, using as much entropy as we can from\r\n        // sources that can't change between calls.\r\n        randomN = uint256(keccak256(abi.encodePacked(randomN, _genes1, _genes2, _targetBlock)));\r\n        uint256 randomIndex = 0;\r\n\r\n        uint8[] memory genes1Array = decode(_genes1);\r\n        uint8[] memory genes2Array = decode(_genes2);\r\n        // All traits that will belong to baby\r\n        uint8[] memory babyArray = new uint8[](48);\r\n        // A pointer to the trait we are dealing with currently\r\n        uint256 traitPos;\r\n        // Trait swap value holder\r\n        uint8 swap;\r\n        // iterate all 12 characteristics\r\n        for(uint256 i = 0; i < 12; i++) {\r\n            // pick 4 traits for characteristic i\r\n            uint256 j;\r\n            // store the current random value\r\n            // uint256 rand;\r\n            for(j = 3; j >= 1; j--) {\r\n                traitPos = (i * 4) + j;\r\n\r\n                rand = _sliceNumber(randomN, 2, randomIndex); // 0~3\r\n                randomIndex += 2;\r\n\r\n                // 1/4 of a chance of gene swapping forward towards expressing.\r\n                if (rand == 0) {\r\n                    // do it for parent 1\r\n                    swap = genes1Array[traitPos];\r\n                    genes1Array[traitPos] = genes1Array[traitPos - 1];\r\n                    genes1Array[traitPos - 1] = swap;\r\n\r\n                }\r\n\r\n                rand = _sliceNumber(randomN, 2, randomIndex); // 0~3\r\n                randomIndex += 2;\r\n\r\n                if (rand == 0) {\r\n                    // do it for parent 2\r\n                    swap = genes2Array[traitPos];\r\n                    genes2Array[traitPos] = genes2Array[traitPos - 1];\r\n                    genes2Array[traitPos - 1] = swap;\r\n                }\r\n            }\r\n        }\r\n\r\n        // We have 256 - 144 = 112 bits of randomness left at this point. We will use up to\r\n        // four bits for the first slot of each trait (three for the possible ascension, one\r\n        // to pick between mom and dad if the ascension fails, for a total of 48 bits. The other\r\n        // traits use one bit to pick between parents (36 gene pairs, 36 genes), leaving us\r\n        // well within our entropy budget.\r\n\r\n        // done shuffling parent genes, now let's decide on choosing trait and if ascending.\r\n        // NOTE: Ascensions ONLY happen in the \"top slot\" of each characteristic. This saves\r\n        //  gas and also ensures ascensions only happen when they're visible.\r\n        for(traitPos = 0; traitPos < 48; traitPos++) {\r\n\r\n            // See if this trait pair should ascend\r\n            uint8 ascendedTrait = 0;\r\n\r\n            // There are two checks here. The first is straightforward, only the trait\r\n            // in the first slot can ascend. The first slot is zero mod 4.\r\n            //\r\n            // The second check is more subtle: Only values that are one apart can ascend,\r\n            // which is what we check inside the _ascend method. However, this simple mask\r\n            // and compare is very cheap (9 gas) and will filter out about half of the\r\n            // non-ascending pairs without a function call.\r\n            //\r\n            // The comparison itself just checks that one value is even, and the other\r\n            // is odd.\r\n            if ((traitPos % 4 == 0) && (genes1Array[traitPos] & 1) != (genes2Array[traitPos] & 1)) {\r\n                rand = _sliceNumber(randomN, 3, randomIndex);\r\n                randomIndex += 3;\r\n\r\n                ascendedTrait = _ascend(genes1Array[traitPos], genes2Array[traitPos], rand);\r\n            }\r\n\r\n            if (ascendedTrait > 0) {\r\n                babyArray[traitPos] = uint8(ascendedTrait);\r\n            } else {\r\n                // did not ascend, pick one of the parent's traits for the baby\r\n                // We use the top bit of rand for this (the bottom three bits were used\r\n                // to check for the ascension itself).\r\n                rand = _sliceNumber(randomN, 1, randomIndex);\r\n                randomIndex += 1;\r\n\r\n                if (rand == 0) {\r\n                    babyArray[traitPos] = uint8(genes1Array[traitPos]);\r\n                } else {\r\n                    babyArray[traitPos] = uint8(genes2Array[traitPos]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return encode(babyArray);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"genes\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cooldownEndBlock\",\"type\":\"uint256\"}],\"name\":\"Pregnant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PetIndexToApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PetIndexToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountToAdulthood\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountToMiddleAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"approveSiring\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoBirthFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sireId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_matronId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bidOnSiringAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matronId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sireId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"breedWithAuto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matronId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"canBreedWith\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_genes\",\"type\":\"uint256\"}],\"name\":\"createGen0Auction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createPromoPet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSiringAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dpetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_petId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"feedOnPet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreatedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"geneScience\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isGestating\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isReady\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cooldownIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextActionAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"siringWithId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matronId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sireId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"genes\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stages\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matronId\",\"type\":\"uint256\"}],\"name\":\"giveBirth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PetId\",\"type\":\"uint256\"}],\"name\":\"isPregnant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PetId\",\"type\":\"uint256\"}],\"name\":\"isReadyToBreed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pregnantpets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"internalType\":\"contract SaleClockAuction\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuctionAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToAdulthood\",\"type\":\"uint256\"}],\"name\":\"setAmountToAdulthood\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToMiddleAge\",\"type\":\"uint256\"}],\"name\":\"setAmountToMiddleAge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setAutoBirthFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGeneScienceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"setSecondsPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSiringAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sireAllowedToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"siringAuction\",\"outputs\":[{\"internalType\":\"contract SiringClockAuction\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"siringAuctionAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gen0Price\",\"type\":\"uint256\"}],\"name\":\"updateGen0Price\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PetCore", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d9dc322dc23884a0eda3010b0bcad8e2e3f7f61fdd1e593ba6af9cfbfbfe703f"}