{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: contracts/libs/IBEP20.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IBEP20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the token name.\r\n   */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address spender\r\n  ) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/libs/Context.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view returns (address payable) {\r\n    return payable(msg.sender);\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n    this;\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// File: contracts/libs/SafeMath.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/libs/Ownable.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n  using SafeMath for uint256;\r\n\r\n  address internal _owner;\r\n  uint256 internal _signatureLimit = 2;\r\n  mapping(bytes32 => uint256) internal _signatureCount;\r\n  mapping(address => bool) internal _admins;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmin() {\r\n    require(_admins[_msgSender()], \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  modifier multSignature(uint256 amount, address receipt) {\r\n    require(_admins[_msgSender()], \"Ownable: caller is not the admin\");\r\n    bytes32 txHash = encodeTransactionData(amount, receipt);\r\n    if (_signatureCount[txHash].add(1) >= _signatureLimit) {\r\n      _;\r\n      _signatureCount[txHash] = 0;\r\n    } else {\r\n      _signatureCount[txHash]++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Internal function without access restriction.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n\r\n  function setSignatureLimit(uint256 signature) public onlyOwner {\r\n    _signatureLimit = signature;\r\n  }\r\n\r\n  function isAdmin(address uid) public view returns (bool) {\r\n    return _admins[uid];\r\n  }\r\n\r\n  function setAdmin(address admin) public onlyOwner {\r\n    _admins[admin] = true;\r\n  }\r\n\r\n  function removeAdmin(address admin) public onlyOwner {\r\n    _admins[admin] = false;\r\n  }\r\n\r\n  function encodeTransactionData(\r\n    uint256 amount,\r\n    address receipt\r\n  ) private pure returns (bytes32) {\r\n    return keccak256(abi.encode(amount, receipt));\r\n  }\r\n}\r\n\r\n// File: contracts/libs/IUniswapV2Pair.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IUniswapV2Pair {\r\n  function factory() external view returns (address);\r\n\r\n  function token0() external view returns (address);\r\n\r\n  function token1() external view returns (address);\r\n\r\n  function getReserves()\r\n    external\r\n    view\r\n    returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\n// File: contracts/libs/IUniswapV2Factory.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IUniswapV2Factory {\r\n  function createPair(\r\n    address _tokenA,\r\n    address _tokenB\r\n  ) external returns (address pair);\r\n}\r\n\r\n// File: contracts/libs/IUniswapV2Router.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IUniswapV2Router {\r\n  function factory() external pure returns (address);\r\n\r\n  function getAmountsOut(\r\n    uint256 amountIn,\r\n    address[] calldata path\r\n  ) external view returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: contracts/RY.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\ncontract RY is IBEP20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal _balances;\r\n  mapping(address => mapping(address => uint256)) internal _allowances;\r\n  mapping(address => uint256) internal _liquidityTime;\r\n  mapping(address => uint256) internal _burnTime;\r\n  mapping(address => bool) internal _liquidityIndex;\r\n  mapping(address => bool) internal _burnNot;\r\n  mapping(address => bool) private _isExcluded;\r\n\r\n  address[] internal _liquidityUser;\r\n\r\n  uint256 internal _dividendIndex = 0;\r\n  uint256 internal _diviendTime;\r\n  uint256 internal _swapTime;\r\n\r\n  uint256 internal _dividendInterval = 30 minutes;\r\n  uint256 internal _dividendDay = 1 days;\r\n  uint256 internal _burnHour = 1 hours;\r\n  uint256 internal _burnRate = 1;\r\n\r\n  // for test\r\n  // uint256 internal _dividendInterval = 20 minutes;\r\n  // uint256 internal _dividendDay = 30 minutes;\r\n  // uint256 internal _burnHour = 20 minutes;\r\n  // uint256 internal _burnRate = 1;\r\n\r\n  uint256 public _totalSupply;\r\n  uint8 public _decimals;\r\n  string public _symbol;\r\n  string public _name;\r\n\r\n  mapping(address => bool) internal _v2Pairs;\r\n  mapping(address => bool) internal _robots;\r\n\r\n  IUniswapV2Router internal _v2Router;\r\n\r\n  uint256 internal constant RBASE = 10000;\r\n\r\n  address internal _usdt;\r\n  address internal _v2Pair;\r\n  address internal _market;\r\n  uint256 internal _lpDividendPools;\r\n\r\n  constructor(address router, address usdt, address receipt, address market) {\r\n    _v2Router = IUniswapV2Router(router);\r\n    _v2Pair = IUniswapV2Factory(_v2Router.factory()).createPair(\r\n      usdt,\r\n      address(this)\r\n    );\r\n    _v2Pairs[_v2Pair] = true;\r\n    _usdt = usdt;\r\n    _market = market;\r\n\r\n    _burnNot[_v2Pair] = true;\r\n    _burnNot[receipt] = true;\r\n    _burnNot[address(this)] = true;\r\n    _burnNot[msg.sender] = true;\r\n\r\n    _isExcluded[msg.sender] = true;\r\n\r\n    _name = \"RY Token\";\r\n    _symbol = \"RY\";\r\n    _decimals = 18;\r\n    _totalSupply = 6666 * 10 ** uint256(_decimals);\r\n\r\n    _balances[receipt] = _totalSupply;\r\n    emit Transfer(address(0), receipt, _totalSupply);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() public view override returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() public view override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token name.\r\n   */\r\n  function name() public view override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function totalSupply() public view override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address _uid) public view override returns (uint256) {\r\n    return _balances[_uid].sub(burnAmount(_uid));\r\n  }\r\n\r\n  function transfer(\r\n    address token,\r\n    address to,\r\n    uint256 amount\r\n  ) external onlyOwner returns (bool) {\r\n    return IBEP20(token).transfer(to, amount);\r\n  }\r\n\r\n  function transfer(\r\n    address to,\r\n    uint256 amount\r\n  ) external override returns (bool) {\r\n    return _transfer(_msgSender(), to, amount);\r\n  }\r\n\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n  ) external view override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(\r\n    address spender,\r\n    uint256 amount\r\n  ) external override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"BEP20: approve from the zero address\");\r\n    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function burnAmount(address uid) public view returns (uint256) {\r\n    if (_totalSupply <= 666e18) return 0;\r\n    if (_burnNot[uid]) return 0;\r\n    uint256 multi = block.timestamp.sub(_burnTime[uid]).div(_burnHour);\r\n    return _balances[uid].mul(_burnRate).div(RBASE).mul(multi);\r\n  }\r\n\r\n  function liquidity(address uid) external view returns (uint256) {\r\n    return getLiquidity(uid);\r\n  }\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) external override returns (bool) {\r\n    _transfer(from, to, amount);\r\n    _approve(from, msg.sender, _allowances[from][msg.sender].sub(amount));\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  ) public returns (bool) {\r\n    _approve(\r\n      msg.sender,\r\n      spender,\r\n      _allowances[msg.sender][spender].add(addedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  ) public returns (bool) {\r\n    _approve(\r\n      msg.sender,\r\n      spender,\r\n      _allowances[msg.sender][spender].sub(subtractedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function _isLiquidity(\r\n    address from,\r\n    address to\r\n  ) internal view returns (bool isAdd, bool isDel) {\r\n    (uint256 r0, , ) = IUniswapV2Pair(_v2Pair).getReserves();\r\n    uint256 bal0 = IBEP20(_usdt).balanceOf(_v2Pair);\r\n    if (_v2Pairs[to] && bal0 > r0) {\r\n      isAdd = true;\r\n    }\r\n    if (_v2Pairs[from] && bal0 < r0) {\r\n      isDel = true;\r\n    }\r\n  }\r\n\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal returns (bool) {\r\n    require(!_robots[from], \"is robot\");\r\n    require(from != address(0), \"BEP20: transfer from the zero address\");\r\n    require(to != address(0), \"BEP20: transfer to the zero address\");\r\n    require(amount > 0, \"BEP20: transfer amount must be greater than zero\");\r\n\r\n    burnHolder(from);\r\n    burnHolder(to);\r\n    updateTime();\r\n\r\n    (bool _isAdd, bool _isDel) = _isLiquidity(from, to);\r\n\r\n    if (amount == _balances[from] && !_isDel) {\r\n      amount = amount.sub(0.001e18);\r\n    }\r\n\r\n    _balances[from] = _balances[from].sub(amount);\r\n\r\n    if (_v2Pairs[from] || _v2Pairs[to]) {\r\n      if (_isAdd || _isDel) {\r\n        // add or remove liquidity\r\n        uint256 _feeAmount = amount.mul(300).div(RBASE);\r\n        _balances[address(this)] = _balances[address(this)].add(_feeAmount);\r\n        _lpDividendPools = _lpDividendPools.add(_feeAmount);\r\n        emit Transfer(from, address(this), _feeAmount);\r\n        amount = amount.mul(9700).div(RBASE);\r\n\r\n        if (_isAdd) {\r\n          if (_diviendTime == 0) _diviendTime = block.timestamp;\r\n          if (!_liquidityIndex[from]) {\r\n            _liquidityIndex[from] = true;\r\n            _liquidityTime[from] = block.timestamp;\r\n            _liquidityUser.push(from);\r\n          }\r\n        }\r\n      } else {\r\n        // sell or buy token\r\n        if (_v2Pairs[from]) {\r\n          if (block.timestamp < _swapTime || _swapTime == 0) {\r\n            if (!_isExcluded[to]) {\r\n              revert(\"transaction not opened\");\r\n            }\r\n          } else if (block.timestamp.sub(_swapTime) < 10) {\r\n            _robots[to] = true;\r\n          }\r\n        }\r\n\r\n        uint256 _feeAmount = amount.mul(300).div(RBASE);\r\n        _balances[address(this)] = _balances[address(this)].add(_feeAmount);\r\n        emit Transfer(from, address(this), _feeAmount);\r\n\r\n        // to dividend pools\r\n        uint256 _poolAmount = amount.mul(150).div(RBASE);\r\n        _lpDividendPools = _lpDividendPools.add(_poolAmount);\r\n\r\n        // to marketing\r\n        uint256 _marketAmount = amount.mul(100).div(RBASE);\r\n        _balances[_market] = _balances[_market].add(_marketAmount);\r\n        _balances[address(this)] = _balances[address(this)].sub(_marketAmount);\r\n        emit Transfer(address(this), _market, _marketAmount);\r\n\r\n        // burn\r\n        uint256 bAmount = amount.mul(50).div(RBASE);\r\n        _burn(address(this), bAmount);\r\n        amount = amount.mul(9700).div(RBASE);\r\n      }\r\n    }\r\n    _balances[to] = _balances[to].add(amount);\r\n    emit Transfer(from, to, amount);\r\n\r\n    if (getLiquidity(from) > 0) {\r\n      if (!_liquidityIndex[from]) {\r\n        _liquidityIndex[from] = true;\r\n        _liquidityTime[from] = block.timestamp;\r\n        _liquidityUser.push(from);\r\n      }\r\n    }\r\n    if (getLiquidity(to) > 0) {\r\n      if (!_liquidityIndex[to]) {\r\n        _liquidityIndex[to] = true;\r\n        _liquidityTime[to] = block.timestamp;\r\n        _liquidityUser.push(to);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function burnHolder(address uid) private {\r\n    if (_burnNot[uid]) return;\r\n    if (_burnTime[uid] == 0) {\r\n      _burnTime[uid] = block.timestamp;\r\n      return;\r\n    }\r\n    if (_diviendTime == 0) return;\r\n    uint256 amount = burnAmount(uid);\r\n    if (amount > 0) _burn(uid, amount);\r\n    uint256 multi = block.timestamp.sub(_burnTime[uid]).div(_burnHour);\r\n    _burnTime[uid] += multi.mul(_burnHour);\r\n  }\r\n\r\n  function updateTime() public {\r\n    uint256 _time = _diviendTime;\r\n    if (_time == 0) {\r\n      return;\r\n    }\r\n    if (_time.add(_dividendInterval) > block.timestamp) return;\r\n    do {\r\n      _time = _time.add(_dividendInterval);\r\n    } while (_time.add(_dividendInterval) < block.timestamp);\r\n    _diviendTime = _time;\r\n    _dividend();\r\n  }\r\n\r\n  function _dividend() private {\r\n    uint256 _dividenTotal = _lpDividendPools.mul(8000).div(RBASE);\r\n    if (_dividenTotal == 0) return;\r\n    if (_liquidityUser.length == 0) return;\r\n\r\n    uint256 i = _dividendIndex;\r\n    uint256 j = 0;\r\n    bool _isEnd = false;\r\n    uint256 lpTotal;\r\n    uint256 _lpAmount;\r\n\r\n    while (j < 25 && _liquidityUser.length > 0) {\r\n      _lpAmount = getLiquidity(_liquidityUser[i]);\r\n      if (\r\n        _liquidityTime[_liquidityUser[i]].add(_dividendDay) < block.timestamp &&\r\n        _balances[_liquidityUser[i]] >= 0.1e18 &&\r\n        _lpAmount > 0\r\n      ) {\r\n        j++;\r\n        lpTotal = lpTotal.add(_lpAmount);\r\n      }\r\n      i++;\r\n      if (i == _liquidityUser.length) {\r\n        i = 0;\r\n        if (_liquidityUser.length <= 25) {\r\n          break;\r\n        }\r\n        if (_isEnd) break;\r\n        _isEnd = true;\r\n      }\r\n    }\r\n\r\n    address[] memory _dusers = new address[](j);\r\n\r\n    i = _dividendIndex;\r\n    j = 0;\r\n    _isEnd = false;\r\n    while (j < 25 && _liquidityUser.length > 0) {\r\n      _lpAmount = getLiquidity(_liquidityUser[i]);\r\n      if (\r\n        _liquidityTime[_liquidityUser[i]].add(_dividendDay) < block.timestamp &&\r\n        _balances[_liquidityUser[i]] >= 0.1e18 &&\r\n        _lpAmount > 0\r\n      ) {\r\n        _dusers[j] = _liquidityUser[i];\r\n        j++;\r\n      }\r\n      i++;\r\n      if (i == _liquidityUser.length) {\r\n        i = 0;\r\n        if (_liquidityUser.length <= 25) {\r\n          break;\r\n        }\r\n        if (_isEnd) break;\r\n        _isEnd = true;\r\n      }\r\n    }\r\n    if (_dusers.length > 0) {\r\n      _dividendIndex = i;\r\n      for (j = 0; j < _dusers.length; j++) {\r\n        _lpAmount = getLiquidity(_dusers[j]);\r\n        uint256 _dAmount = _dividenTotal.mul(_lpAmount).div(lpTotal);\r\n        _balances[_dusers[j]] = _balances[_dusers[j]].add(_dAmount).sub(\r\n          burnAmount(_dusers[j])\r\n        );\r\n        emit Transfer(address(this), _dusers[j], _dAmount);\r\n      }\r\n      _balances[address(this)] = _balances[address(this)].sub(_dividenTotal);\r\n      _lpDividendPools = _lpDividendPools.sub(_dividenTotal);\r\n    }\r\n  }\r\n\r\n  function getLiquidity(address owner) public view returns (uint256 lp) {\r\n    lp = IBEP20(_v2Pair).balanceOf(owner);\r\n  }\r\n\r\n  function _burn(address uid, uint256 amount) private {\r\n    if (_totalSupply <= 666e18) return;\r\n    if (_totalSupply.sub(amount) < 666e18) {\r\n      amount = _totalSupply.sub(666e18);\r\n    }\r\n    _balances[uid] = _balances[uid].sub(\r\n      amount,\r\n      \"BEP20: burn amount exceeds balance\"\r\n    );\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    emit Transfer(uid, address(0), amount);\r\n  }\r\n\r\n  function isRobot(address _uid) public view returns (bool) {\r\n    return _robots[_uid];\r\n  }\r\n\r\n  function getV2Pair(address _pair) external view returns (bool) {\r\n    return _v2Pairs[_pair];\r\n  }\r\n\r\n  function defaultPair() external view returns (address) {\r\n    return _v2Pair;\r\n  }\r\n\r\n  function setBurnNot(address uid) external onlyOwner {\r\n    _burnNot[uid] = true;\r\n  }\r\n\r\n  function unsetBurnNot(address uid) external onlyOwner {\r\n    _burnNot[uid] = false;\r\n  }\r\n\r\n  function setV2Pair(address _pair) external onlyOwner {\r\n    require(_pair != address(0), \"is zero address\");\r\n    _v2Pairs[_pair] = true;\r\n  }\r\n\r\n  function unsetV2Pair(address _pair) external onlyOwner {\r\n    require(_pair != address(0), \"is zero address\");\r\n    delete _v2Pairs[_pair];\r\n  }\r\n\r\n  function setRobot(address _uid) public onlyOwner {\r\n    require(!_robots[_uid]);\r\n    _robots[_uid] = true;\r\n  }\r\n\r\n  function unsetRobot(address _uid) public onlyOwner {\r\n    require(_robots[_uid]);\r\n    _robots[_uid] = false;\r\n  }\r\n\r\n  function setSwaptime(uint256 _time) external onlyOwner {\r\n    _swapTime = _time;\r\n  }\r\n\r\n  function setExcluded(address _uid, bool _status) external onlyOwner {\r\n    require(_uid != address(0), \"is zero address\");\r\n    _isExcluded[_uid] = _status;\r\n  }\r\n\r\n  function getParms()\r\n    public\r\n    view\r\n    returns (\r\n      uint256 index,\r\n      uint256 liquidityUserTotal,\r\n      uint256 lpDividendPools,\r\n      uint256 dividend_user_count,\r\n      uint256[] memory dAmounts,\r\n      address[] memory dusers\r\n    )\r\n  {\r\n    index = _dividendIndex;\r\n    liquidityUserTotal = _liquidityUser.length;\r\n    lpDividendPools = _lpDividendPools;\r\n\r\n    uint256 i = _dividendIndex;\r\n    uint256 j = 0;\r\n    bool _isEnd = false;\r\n    uint256 lpTotal;\r\n\r\n    uint256 _lpAmount;\r\n    while (j < 25 && _liquidityUser.length > 0) {\r\n      _lpAmount = getLiquidity(_liquidityUser[i]);\r\n      if (\r\n        _liquidityTime[_liquidityUser[i]].add(_dividendDay) < block.timestamp &&\r\n        _balances[_liquidityUser[i]] >= 0.1e18 &&\r\n        _lpAmount > 0\r\n      ) {\r\n        j++;\r\n        lpTotal = lpTotal.add(_lpAmount);\r\n      }\r\n      i++;\r\n      if (i == _liquidityUser.length) {\r\n        i = 0;\r\n        if (_liquidityUser.length <= 25) {\r\n          break;\r\n        }\r\n        if (_isEnd) break;\r\n        _isEnd = true;\r\n      }\r\n    }\r\n\r\n    address[] memory _dusers = new address[](j);\r\n    uint256[] memory _damounts = new uint256[](j);\r\n\r\n    i = _dividendIndex;\r\n    j = 0;\r\n    _isEnd = false;\r\n    while (j < 25 && _liquidityUser.length > 0) {\r\n      _lpAmount = getLiquidity(_liquidityUser[i]);\r\n      if (\r\n        _liquidityTime[_liquidityUser[i]].add(_dividendDay) < block.timestamp &&\r\n        _balances[_liquidityUser[i]] >= 0.1e18 &&\r\n        _lpAmount > 0\r\n      ) {\r\n        _dusers[j] = _liquidityUser[i];\r\n        j++;\r\n      }\r\n      i++;\r\n      if (i == _liquidityUser.length) {\r\n        i = 0;\r\n        if (_liquidityUser.length <= 25) {\r\n          break;\r\n        }\r\n        if (_isEnd) break;\r\n        _isEnd = true;\r\n      }\r\n    }\r\n\r\n    dividend_user_count = _dusers.length;\r\n\r\n    if (_dusers.length > 0) {\r\n      uint256 _dividenTotal = _lpDividendPools.mul(8000).div(RBASE);\r\n      for (j = 0; j < _dusers.length; j++) {\r\n        _lpAmount = getLiquidity(_dusers[j]);\r\n        _damounts[j] = _dividenTotal.mul(_lpAmount).div(lpTotal);\r\n      }\r\n      dusers = _dusers;\r\n      dAmounts = _damounts;\r\n    }\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uid\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"burnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityUserTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpDividendPools\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividend_user_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"dAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"dusers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getV2Pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uid\",\"type\":\"address\"}],\"name\":\"isRobot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"setBurnNot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uid\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uid\",\"type\":\"address\"}],\"name\":\"setRobot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signature\",\"type\":\"uint256\"}],\"name\":\"setSignatureLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setSwaptime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"unsetBurnNot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uid\",\"type\":\"address\"}],\"name\":\"unsetRobot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"unsetV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RY", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000003900da4f8a93172a30dd85c231f06d9372d104e2000000000000000000000000d6e1e28b2c376a7218f6049d9e87c8a1f1e94ce5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://feda2a8502e89d152812bfc22e648d2d0c93d083480f4b29ceff7d745032b364"}