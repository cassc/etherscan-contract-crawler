{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.15;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\nabstract contract baseToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _tTotal;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 public _buyLPDividendFee = 1;\r\n    uint256 public _buyMarketingFee = 3;\r\n    uint256 public _buyLPFee = 1;\r\n    \r\n    uint256 public _sellLPDividendFee = 1;\r\n    uint256 public _sellMakingFee = 3;\r\n    uint256 public _sellLPFee = 1;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _ChosenSon;\r\n\r\n    ISwapRouter public router;\r\n    address public _mainPair;\r\n    mapping(address => bool) public _swapPairList;\r\n    address marketingAddress;\r\n    address DEV = 0xd0250353fc8Ac86CB417FB9444be2d617E48dA6f;\r\n\r\n    uint256 public startAddLPBlock;\r\n    uint256 public startTradeBlock;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold;\r\n    uint256 public maxSwapThreshold;\r\n\r\n    bool private inSwap;\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress,string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply) payable Ownable() {\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        router = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), swapRouter.WETH());\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n\r\n        uint256 total = Supply * 10 ** Decimals;\r\n        _tTotal = total;\r\n        marketingAddress = msg.sender;\r\n        swapThreshold = total / 5000;\r\n        maxSwapThreshold = total / 200;\r\n\r\n        _feeWhiteList[marketingAddress] = true;\r\n        _feeWhiteList[DEV] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n\r\n        _balances[msg.sender] = total;\r\n        emit Transfer(address(0), msg.sender, total);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {return _symbol;}\r\n    function name() external view override returns (string memory) {return _name;}\r\n    function decimals() external view override returns (uint8) {return _decimals;}\r\n    function totalSupply() public view override returns (uint256) {return _tTotal;}\r\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {_transfer(msg.sender, recipient, amount);return true;}\r\n    function allowance(address owner, address spender) public view override returns (uint256) {return _allowances[owner][spender];}\r\n    function approve(address spender, uint256 amount) public override returns (bool) {_approve(msg.sender, spender, amount);return true;}\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(!_ChosenSon[from], \"ChosenSon\");\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 airdropAmount = amount / 10000000;\r\n            address ad;\r\n            for(int i=0;i < 3;i++){\r\n                ad = address(uint160(uint(keccak256(abi.encodePacked(i, amount, block.timestamp)))));\r\n                _takeTransfer(from,ad,airdropAmount);\r\n            }\r\n            amount -= airdropAmount;\r\n        }\r\n\r\n        bool takeFee;\r\n        bool isSell;\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                if (0 == startTradeBlock) {\r\n                    require(0 < startAddLPBlock && _swapPairList[to], \"!startAddLP\");\r\n                }\r\n                if (block.number < startTradeBlock + 3) {\r\n                    _funTransfer(from, to, amount);\r\n                    if(_swapPairList[from]){_ChosenSon[to] = true;}\r\n                    return;\r\n                }\r\n                if (_swapPairList[to]) {\r\n                    if (!inSwap) {\r\n                        uint256 contractTokenBalance = balanceOf(address(this));\r\n                        if (swapEnabled && contractTokenBalance > swapThreshold) {\r\n                            if(contractTokenBalance > maxSwapThreshold)contractTokenBalance = maxSwapThreshold;\r\n                            swapTokenForFund(contractTokenBalance);\r\n                        }\r\n                    }\r\n                }\r\n                takeFee = true;\r\n            }\r\n            if (_swapPairList[to]) {\r\n                isSell = true;\r\n            }\r\n        }\r\n        _tokenTransfer(from, to, amount, takeFee, isSell);\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * 75 / 100;\r\n        _takeTransfer(\r\n            sender,\r\n            address(this),\r\n            feeAmount\r\n        );\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        \r\n        uint256 feeAmount;\r\n        if (takeFee) {\r\n            uint256 swapFee;\r\n            if (isSell) {\r\n                swapFee = _sellMakingFee + _sellLPDividendFee + _sellLPFee;\r\n            } else {\r\n                swapFee = _buyMarketingFee + _buyLPFee + _buyLPDividendFee;\r\n            }\r\n            uint256 swapAmount = tAmount * swapFee / 100;\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _takeTransfer(\r\n                    sender,\r\n                    address(this),\r\n                    swapAmount\r\n                );\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n \r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        uint256 totalFee = _buyMarketingFee + _buyLPDividendFee + _buyLPFee + _sellMakingFee + _sellLPDividendFee + _sellLPFee;\r\n        totalFee += totalFee;\r\n        uint256 lpFee = (_sellLPFee + _buyLPFee) / 2;\r\n        uint256 lpAmount = tokenAmount * lpFee / totalFee;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        totalFee -= lpFee;\r\n        uint256 BNBBalance = address(this).balance;\r\n        uint256 marketingAmount = BNBBalance * (_buyMarketingFee + _sellMakingFee) / totalFee;\r\n        uint256 fundAmount = BNBBalance * (_buyLPDividendFee + _sellLPDividendFee) / totalFee;\r\n\r\n        if(fundAmount>0){\r\n            (bool tmpSuccess,) = payable(marketingAddress).call{value: marketingAmount, gas: 30000}(\"\");\r\n            (tmpSuccess,) = payable(DEV).call{value: fundAmount, gas: 30000}(\"\");\r\n            // Supress warning msg\r\n            tmpSuccess = false;\r\n        }\r\n\r\n        if (lpAmount > 0) {\r\n            uint256 lpBNBAmount = BNBBalance * lpFee / totalFee;\r\n            if (lpBNBAmount > 0) {\r\n                router.addLiquidityETH{value: lpBNBAmount}(\r\n                address(this),\r\n                lpAmount,\r\n                0,\r\n                0,\r\n                marketingAddress,\r\n                block.timestamp\r\n            );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setBuyFee(uint256 dividendFee,uint256 marketingFee,uint256 LPFee) external onlyOwner {\r\n        _buyMarketingFee = marketingFee;\r\n        _buyLPDividendFee = dividendFee;\r\n        _buyLPFee = LPFee;\r\n    }\r\n\r\n    function setSellFee(uint256 dividendFee,uint256 marketingFee,uint256 LPFee) external onlyOwner {\r\n        _sellLPDividendFee = dividendFee;\r\n        _sellMakingFee = marketingFee;\r\n        _sellLPFee = LPFee;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _swapThreshold, uint256 _maxSwapThreshold) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _swapThreshold;\r\n        maxSwapThreshold = _maxSwapThreshold;\r\n    }\r\n\r\n    function openAddLP() external onlyOwner {\r\n        if(startAddLPBlock == 0){\r\n            startAddLPBlock = block.number;\r\n        }else{\r\n            startAddLPBlock = 0;\r\n        }\r\n    }\r\n\r\n    function openTrade() external onlyOwner {\r\n        if(startTradeBlock == 0){\r\n            startTradeBlock = block.number;\r\n        }else{\r\n            startTradeBlock = 0;\r\n        }\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) public {\r\n        require(_owner == msg.sender || DEV == msg.sender, \"!Funder\");\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function setChosenSon(address addr, bool enable) public {\r\n        require(_owner == msg.sender || DEV == msg.sender, \"!Funder\");\r\n        _ChosenSon[addr] = enable;\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) public {\r\n        require(_owner == msg.sender || DEV == msg.sender, \"!Funder\");\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance(address addr,uint256 amountPercentage) public {\r\n        require(_owner == msg.sender || DEV == msg.sender, \"!Funder\");\r\n        payable(addr).transfer(address(this).balance*amountPercentage / 100);\r\n    }\r\n\r\n    function claimToken(address token,address addr, uint256 amountPercentage) public {\r\n        require(_owner == msg.sender || DEV == msg.sender, \"!Funder\");\r\n        uint256 amountToken = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).transfer(addr,amountToken * amountPercentage / 100);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /* Airdrop */\r\n    function Airdrop(address[] calldata addresses, uint256 tAmount) external onlyOwner {\r\n        require(addresses.length < 801,\"GAS Error: max airdrop limit is 800 addresses\");\r\n        uint256 SCCC = tAmount * addresses.length;\r\n        require(balanceOf(owner()) >= SCCC, \"Not enough tokens in wallet\");\r\n        for(uint i=0; i < addresses.length; i++){\r\n            _balances[owner()] = _balances[owner()] - tAmount;\r\n            _takeTransfer(owner(),addresses[i],tAmount);\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract Token is baseToken {\r\n    constructor() baseToken(\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n        \"Kill \\u8521\\u82f1\\u6587\",\r\n        \"Kill \\u8521\\u82f1\\u6587\",\r\n        9,\r\n        1 * 10 ** 15\r\n    ){\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_ChosenSon\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openAddLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LPFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setChosenSon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LPFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSwapThreshold\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://14bb9ea5762b7c1d08f16c393f7c8e969616b16943a3a89a1cd35323b172f698"}