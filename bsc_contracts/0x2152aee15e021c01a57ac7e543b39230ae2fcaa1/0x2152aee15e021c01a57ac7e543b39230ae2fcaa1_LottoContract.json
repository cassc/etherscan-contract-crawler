{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract Context {\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ninterface NFT {\r\n    function mint(\r\n        address to,\r\n        uint256 seri,\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        string calldata result,\r\n        uint256 status,\r\n        uint256 winTickets,\r\n        address buyer,\r\n        uint256 buyTickets,\r\n        string calldata asset\r\n    ) external returns (uint256);\r\n\r\n    function metadatas(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 seri,\r\n            uint256 startTime,\r\n            uint256 endTime,\r\n            string memory result,\r\n            uint256 status,\r\n            uint256 winTickets,\r\n            address buyer,\r\n            uint256 buyTickets,\r\n            string memory asset\r\n        );\r\n\r\n    function burn(uint256 tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\ncontract LottoContract is Ownable {\r\n    event OpenSeri(uint256 seri, uint256 seriType);\r\n    event CloseSeri(uint256 seri, uint256 endTime);\r\n    event OpenResult(uint256 seri, bool isWin);\r\n    event BuyTicket(uint256 cryptoRate, uint256 totalAmount);\r\n    event SetWinners(uint256 seri, uint256 turn);\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public currentSignTime;\r\n    string[] public priceFeeds;\r\n\r\n    uint256 public currentCarryOverSeri;\r\n    address public signer = 0xaF94Cfc93cf22a5d92c828A659299777540b9505;\r\n    address payable public postAddress;\r\n    address payable public stake;\r\n    address payable public purchase;\r\n    address payable public affiliateAddress;\r\n    address payable public operator;\r\n    address payable public carryOver;\r\n\r\n    IBEP20 public initCarryOverAsset = IBEP20(0x55d398326f99059fF775485246999027B3197955);\r\n    NFT public nft = NFT(0x3E5b39625eE9934Db40Bb601f95EEf841687BF21);\r\n\r\n    uint256 public share2Stake;\r\n    uint256 public share2Purchase;\r\n    uint256 public share2Affiliate;\r\n    uint256 public share2Operator;\r\n    uint256 public share2AffiliateCO;\r\n    uint256 public share2OperatorCO;\r\n    uint256 public expiredPeriod = 7776000; // 90 days\r\n\r\n    struct asset {\r\n        string symbol;\r\n        address asset;\r\n        AggregatorV3Interface priceFeed;\r\n    }\r\n\r\n    struct seri {\r\n        uint256 price;\r\n        uint256 soldTicket;\r\n        uint256[] assetIndex;\r\n        string result;\r\n        uint256 status; // status - index 0 open; 1 close; 2 win; 3 lose\r\n        uint256[] winners; // NFT token Id\r\n        uint256 endTime;\r\n        uint256[] prizetaked;\r\n        bool takeAssetExpired;\r\n        uint256 max2sale;\r\n        uint256 totalWin;\r\n        uint256 seriType; // 1 normal; 2 carryOver;\r\n        uint256 initPrize;\r\n        uint256 initPrizeTaken;\r\n        uint256 winInitPrize;\r\n        mapping(address => string[]) userTickets;\r\n        // mapping(uint => mapping(address => ticket)) userTickets; // seri => timestamp => user => ticket\r\n        mapping(uint256 => uint256) seriAssetRemain; // seri => asset index => remain\r\n        mapping(uint256 => uint256) winAmount;\r\n    }\r\n\r\n    mapping(uint256 => seri) public series;\r\n    mapping(string => asset) assets;\r\n    mapping(uint256 => uint256) public seriExpiredPeriod;\r\n    mapping(uint256 => uint256) public postPrices;\r\n    mapping(uint256 => uint256) public currentTurn;\r\n    mapping(uint256 => mapping(address => mapping(uint256 => uint256))) public userTicketsWon; // seri => user => ticket id => token id\r\n    mapping(uint256 => mapping(address => mapping(uint256 => uint256))) public userTicketsWonb; // seri => user => token id => ticket id\r\n\r\n    modifier onlySigner() {\r\n        require(signer == _msgSender(), \"Signer: caller is not the signer\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {}\r\n\r\n    function getMessageHash(uint256 timestamp, string memory result) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(timestamp, result));\r\n    }\r\n\r\n    function getEthSignedMessageHash(bytes32 _messageHash) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash));\r\n    }\r\n\r\n    function permit(\r\n        uint256 timestamp,\r\n        string memory result,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public view returns (bool) {\r\n        return ecrecover(getEthSignedMessageHash(getMessageHash(timestamp, result)), v, r, s) == signer;\r\n    }\r\n\r\n    function getbytesDataSetWinners(\r\n        uint256 timestamp,\r\n        uint256 _seri,\r\n        address[] memory _winners,\r\n        uint256[][] memory _buyTickets,\r\n        uint256 _totalTicket,\r\n        string[] memory _assets,\r\n        uint256 _turn\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(timestamp, abi.encode(_seri, _winners, _buyTickets, _totalTicket, _assets, _turn)));\r\n    }\r\n\r\n    function permitSetWinners(\r\n        uint256 timestamp,\r\n        uint256 _seri,\r\n        address[] memory _winners,\r\n        uint256[][] memory _buyTickets,\r\n        uint256 _totalTicket,\r\n        string[] memory _assets,\r\n        uint256 _turn,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public view returns (bool) {\r\n        bytes32 _messageHash = getbytesDataSetWinners(timestamp, _seri, _winners, _buyTickets, _totalTicket, _assets, _turn);\r\n        return ecrecover(getEthSignedMessageHash(_messageHash), v, r, s) == signer;\r\n    }\r\n\r\n    function getPriceFeeds() public view returns (string[] memory _symbols) {\r\n        return priceFeeds;\r\n    }\r\n\r\n    function getAsset(string memory _symbol) public view returns (asset memory _asset) {\r\n        return assets[_symbol];\r\n    }\r\n\r\n    function getSeriesAssets(uint256 _seri) public view returns (uint256[] memory) {\r\n        return series[_seri].assetIndex;\r\n    }\r\n\r\n    function metadatas(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            string memory,\r\n            uint256,\r\n            uint256,\r\n            address,\r\n            uint256,\r\n            string memory\r\n        )\r\n    {\r\n        return nft.metadatas(_tokenId);\r\n    }\r\n\r\n    function getSeriWinners(uint256 _seri) public view returns (uint256[] memory) {\r\n        return series[_seri].winners;\r\n    }\r\n\r\n    function getUserTickets(uint256 _seri, address _user) public view returns (string[] memory) {\r\n        return series[_seri].userTickets[_user];\r\n    }\r\n\r\n    function seriAssetRemain(uint256 _seri, uint256 _asset) public view returns (uint256) {\r\n        return series[_seri].seriAssetRemain[_asset];\r\n    }\r\n\r\n    function getLatestPrice(string memory _symbol) public view returns (int256) {\r\n        (, int256 _price, , , ) = assets[_symbol].priceFeed.latestRoundData();\r\n        return _price * 10**10;\r\n    }\r\n\r\n    function asset2USD(string memory _symbol) public view returns (uint256 _amountUsd) {\r\n        return uint256(getLatestPrice(_symbol));\r\n    }\r\n\r\n    function asset2USD(string memory _symbol, uint256 _amount) public view returns (uint256 _amountUsd) {\r\n        return _amount.mul(uint256(getLatestPrice(_symbol))).div(1 ether);\r\n    }\r\n\r\n    function ticket2Asset(uint256 _seri, string memory _symbol) public view returns (uint256 _amountUsd) {\r\n        uint256 expectedRate = asset2USD(_symbol);\r\n        return series[_seri].price.mul(1 ether).div(expectedRate);\r\n    }\r\n\r\n    function openSeri(\r\n        uint256 _seri,\r\n        uint256 _price,\r\n        uint256 _postPrice,\r\n        uint256 _max2sale,\r\n        uint256 _initPrize\r\n    ) public onlyOwner {\r\n        require(series[_seri].price == 0, \"Seri existed\");\r\n        require(_postPrice <= _price, \"Invalid post price\");\r\n        series[_seri].seriType = 1;\r\n        if (_initPrize > 0) {\r\n            require(currentCarryOverSeri == 0 || series[currentCarryOverSeri].status != 0, \"Carry-over seri opening\");\r\n            require(initCarryOverAsset.transferFrom(msg.sender, address(this), _initPrize), \"Insufficient-allowance\");\r\n            series[_seri].seriType = 2;\r\n            series[_seri].initPrize = _initPrize;\r\n            currentCarryOverSeri = _seri;\r\n        }\r\n        series[_seri].price = _price;\r\n        series[_seri].max2sale = _max2sale;\r\n        seriExpiredPeriod[_seri] = expiredPeriod;\r\n        postPrices[_seri] = _postPrice;\r\n        emit OpenSeri(_seri, series[_seri].seriType);\r\n    }\r\n\r\n    function takeAsset2CarryOver(uint256 _seri) internal {\r\n        for (uint256 i = 0; i < series[_seri].assetIndex.length; i++) {\r\n            if (series[_seri].seriAssetRemain[series[_seri].assetIndex[i]] > 0) {\r\n                uint256 takeAmount = series[_seri].seriAssetRemain[series[_seri].assetIndex[i]];\r\n                if (series[_seri].assetIndex[i] == 0) carryOver.transfer(takeAmount);\r\n                else {\r\n                    string memory _symbol = priceFeeds[series[_seri].assetIndex[i]];\r\n                    IBEP20 _asset = IBEP20(assets[_symbol].asset);\r\n                    require(_asset.transfer(carryOver, takeAmount), \"Insufficient-balance\");\r\n                }\r\n                series[_seri].seriAssetRemain[series[_seri].assetIndex[i]] = 0;\r\n            }\r\n        }\r\n        if (series[_seri].seriType == 2) initCarryOverAsset.transfer(carryOver, series[_seri].initPrize);\r\n    }\r\n\r\n    function closeSeri(uint256 _seri) public onlyOwner {\r\n        require(series[_seri].status == 0, \"Seri not open\");\r\n        require(series[_seri].soldTicket == series[_seri].max2sale, \"Tickets are not sold out yet\");\r\n        series[_seri].status = 1;\r\n        emit CloseSeri(_seri, now);\r\n    }\r\n\r\n    function openResult(\r\n        uint256 _seri,\r\n        bool _isWin,\r\n        uint256 _totalWin,\r\n        uint256 timestamp,\r\n        string memory _result,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public onlyOwner {\r\n        require(series[_seri].status == 1, \"Seri not close\");\r\n        require(currentSignTime < timestamp, \"Invalid timestamp\");\r\n        require(permit(timestamp, _result, v, r, s), \"Invalid signature\");\r\n        series[_seri].result = _result;\r\n        if (_isWin) {\r\n            series[_seri].status = 2;\r\n            series[_seri].totalWin = _totalWin;\r\n        } else {\r\n            series[_seri].status = 3;\r\n            takeAsset2CarryOver(_seri);\r\n        }\r\n        series[_seri].endTime = now;\r\n        currentSignTime = timestamp;\r\n        emit OpenResult(_seri, _isWin);\r\n    }\r\n\r\n    function sendNFT(\r\n        uint256 _seri,\r\n        uint256 startTime,\r\n        address[] memory _winners,\r\n        uint256[][] memory _buyTickets,\r\n        string[] memory _assets\r\n    ) internal {\r\n        seri storage sr = series[_seri];\r\n        require(sr.status == 2, \"Seri not winner\");\r\n        for (uint256 i = 0; i < _winners.length; i++) {\r\n            for (uint256 j = 0; j < _buyTickets[i].length; j++) {\r\n                uint256 tokenID = nft.mint(_winners[i], _seri, startTime, now, sr.result, 2, sr.totalWin, _winners[i], 1, _assets[i]);\r\n                series[_seri].winners.push(tokenID);\r\n                userTicketsWon[_seri][_winners[i]][_buyTickets[i][j]] = tokenID;\r\n                userTicketsWonb[_seri][_winners[i]][tokenID] = _buyTickets[i][j];\r\n            }\r\n        }\r\n    }\r\n\r\n    function setWinners(\r\n        uint256 _seri,\r\n        uint256 startTime,\r\n        address[] memory _winners,\r\n        uint256[][] memory _buyTickets,\r\n        uint256 _totalTicket,\r\n        string[] memory _assets,\r\n        uint256 _turn,\r\n        uint256 timestamp,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public onlyOwner {\r\n        require(_winners.length <= 100, \"Over max loop\");\r\n        require(currentSignTime < timestamp, \"Invalid timestamp\");\r\n        require(currentTurn[_seri] != _turn, \"Already paid!\");\r\n        require(permitSetWinners(timestamp, _seri, _winners, _buyTickets, _totalTicket, _assets, _turn, v, r, s), \"Invalid signal\");\r\n        require(series[_seri].winners.length.add(_totalTicket) <= series[_seri].totalWin, \"Invalid winners\");\r\n        sendNFT(_seri, startTime, _winners, _buyTickets, _assets);\r\n        currentSignTime = timestamp;\r\n        currentTurn[_seri] = _turn;\r\n        emit SetWinners(_seri, _turn);\r\n    }\r\n\r\n    function takeAsset(\r\n        uint256 _seri,\r\n        uint256 _winTickets,\r\n        uint256 _buyTickets\r\n    ) internal {\r\n        for (uint256 i = 0; i < series[_seri].assetIndex.length; i++) {\r\n            if (series[_seri].seriAssetRemain[series[_seri].assetIndex[i]] > 0) {\r\n                uint256 takeAmount = series[_seri].winAmount[series[_seri].assetIndex[i]];\r\n\r\n                if (takeAmount == 0) {\r\n                    takeAmount = series[_seri].seriAssetRemain[series[_seri].assetIndex[i]].mul(_buyTickets).div(_winTickets);\r\n                    series[_seri].winAmount[series[_seri].assetIndex[i]] = takeAmount;\r\n                }\r\n                series[_seri].seriAssetRemain[series[_seri].assetIndex[i]] = series[_seri].seriAssetRemain[series[_seri].assetIndex[i]].sub(takeAmount);\r\n                if (series[_seri].assetIndex[i] == 0) msg.sender.transfer(takeAmount);\r\n                else {\r\n                    string memory _symbol = priceFeeds[series[_seri].assetIndex[i]];\r\n                    IBEP20 _asset = IBEP20(assets[_symbol].asset);\r\n                    require(_asset.transfer(msg.sender, takeAmount), \"insufficient-allowance\");\r\n                }\r\n            }\r\n        }\r\n        if (series[_seri].seriType == 2) {\r\n            uint256 takeAssetInitAmount = series[_seri].winInitPrize;\r\n            if (takeAssetInitAmount == 0) {\r\n                takeAssetInitAmount = series[_seri].initPrize.mul(_buyTickets).div(_winTickets);\r\n                series[_seri].winInitPrize = takeAssetInitAmount;\r\n            }\r\n            initCarryOverAsset.transfer(msg.sender, takeAssetInitAmount);\r\n            series[_seri].initPrizeTaken += takeAssetInitAmount;\r\n        }\r\n    }\r\n\r\n    function takePrize(uint256 _nftId) external {\r\n        uint256 _seri;\r\n        uint256 _winTickets;\r\n        uint256 _buyTickets;\r\n        address buyer;\r\n        (_seri, , , , , _winTickets, buyer, _buyTickets, ) = nft.metadatas(_nftId);\r\n        require(series[_seri].status == 2, \"seri not winner\");\r\n        require(series[_seri].endTime.add(seriExpiredPeriod[_seri]) > now, \"Ticket Expired\");\r\n        nft.transferFrom(_msgSender(), address(this), _nftId);\r\n        nft.burn(_nftId);\r\n        series[_seri].prizetaked.push(_nftId);\r\n        takeAsset(_seri, _winTickets, _buyTickets);\r\n        \r\n    }\r\n\r\n    function totalPrize(uint256 _seri) public view returns (uint256 _prize) {\r\n        for (uint256 i = 0; i < series[_seri].assetIndex.length; i++) {\r\n            if (series[_seri].seriAssetRemain[series[_seri].assetIndex[i]] > 0) {\r\n                string memory symbol = priceFeeds[series[_seri].assetIndex[i]];\r\n                _prize += asset2USD(symbol, series[_seri].seriAssetRemain[series[_seri].assetIndex[i]]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _takePrizeExpired(uint256 _seri) internal {\r\n        for (uint256 i = 0; i < series[_seri].assetIndex.length; i++) {\r\n            if (series[_seri].seriAssetRemain[series[_seri].assetIndex[i]] > 0) {\r\n                uint256 takeAmount = series[_seri].seriAssetRemain[series[_seri].assetIndex[i]];\r\n                if (series[_seri].assetIndex[i] == 0) carryOver.transfer(takeAmount);\r\n                else {\r\n                    string memory _symbol = priceFeeds[series[_seri].assetIndex[i]];\r\n                    IBEP20 _asset = IBEP20(assets[_symbol].asset);\r\n                    require(_asset.transfer(carryOver, takeAmount), \"insufficient-allowance\");\r\n                }\r\n                series[_seri].seriAssetRemain[series[_seri].assetIndex[i]] = 0;\r\n            }\r\n        }\r\n        if (series[_seri].seriType == 2) {\r\n            uint256 takeAssetInitRemain = series[_seri].initPrize.sub(series[_seri].initPrizeTaken);\r\n            initCarryOverAsset.transfer(carryOver, takeAssetInitRemain);\r\n            series[_seri].initPrizeTaken = series[_seri].initPrizeTaken;\r\n        }\r\n    }\r\n\r\n    function takePrizeExpired(uint256 _seri) public onlyOwner {\r\n        require(!series[_seri].takeAssetExpired, \"Taked\");\r\n        require(series[_seri].endTime.add(seriExpiredPeriod[_seri]) < now, \"Ticket not expired\");\r\n\r\n        _takePrizeExpired(_seri);\r\n        series[_seri].takeAssetExpired = true;\r\n    }\r\n\r\n    function _buyAmount(uint256 _seriType, uint256 postAmount) internal view returns(uint256 shareStakeAmount, uint256 sharePurchaseAmount, uint256 shareAffiliateAmount, uint256 takeTokenAmount) {\r\n        if (_seriType == 1) {\r\n            shareStakeAmount = postAmount.mul(share2Stake).div(1000000);\r\n            sharePurchaseAmount = postAmount.mul(share2Purchase).div(1000000);\r\n            shareAffiliateAmount = postAmount.mul(share2Affiliate).div(1000000);\r\n            takeTokenAmount = postAmount.mul(share2Operator).div(1000000);\r\n        } else {\r\n            shareAffiliateAmount = postAmount.mul(share2AffiliateCO).div(1000000);\r\n            takeTokenAmount = postAmount.mul(share2OperatorCO).div(1000000);\r\n        }\r\n    }\r\n\r\n    function _buyTransfer(uint256 _seriType, uint256 _assetIndex, uint256 assetAmount, uint256 postRemain, uint256 shareStakeAmount, uint256 sharePurchaseAmount, uint256 shareAffiliateAmount, uint256 takeTokenAmount) internal {\r\n        if (_assetIndex == 0) {\r\n            require(msg.value >= assetAmount, \"Insufficient-balance\");\r\n            postAddress.transfer(postRemain);\r\n            if (_seriType == 1) {\r\n                stake.transfer(shareStakeAmount);\r\n                purchase.transfer(sharePurchaseAmount);\r\n            }\r\n            affiliateAddress.transfer(shareAffiliateAmount);\r\n            operator.transfer(takeTokenAmount);\r\n        } else {\r\n            string memory _symbol = priceFeeds[_assetIndex];\r\n            IBEP20 _asset = IBEP20(assets[_symbol].asset);\r\n            require(_asset.transferFrom(msg.sender, address(this), assetAmount), \"Insufficient-allowance\");\r\n            if (_seriType == 1) {\r\n                require(_asset.transfer(stake, shareStakeAmount), \"insufficient-allowance\");\r\n                require(_asset.transfer(purchase, sharePurchaseAmount), \"insufficient-allowance\");\r\n            }\r\n            require(_asset.transfer(postAddress, postRemain), \"Insufficient-allowance\");\r\n            require(_asset.transfer(affiliateAddress, shareAffiliateAmount), \"Insufficient-allowance\");\r\n            require(_asset.transfer(operator, takeTokenAmount), \"Insufficient-allowance\");\r\n        }\r\n    }\r\n\r\n    function _updateRemain(uint256 _seri, uint256 _assetIndex, uint256 assetRemain, uint256 _totalTicket) internal {\r\n        series[_seri].seriAssetRemain[_assetIndex] += assetRemain;\r\n        series[_seri].soldTicket += _totalTicket;\r\n    }\r\n\r\n    function buy(\r\n        uint256 _seri,\r\n        string memory _numberInfo,\r\n        uint256 _assetIndex,\r\n        uint256 _totalTicket\r\n    ) public payable {\r\n        uint256 assetPerTicket = ticket2Asset(_seri, priceFeeds[_assetIndex]);\r\n        series[_seri].userTickets[msg.sender].push(_numberInfo);\r\n        require(series[_seri].soldTicket + _totalTicket <= series[_seri].max2sale, \"Over max2sale\");\r\n        uint256 assetAmount = assetPerTicket.mul(_totalTicket);\r\n        uint256 postAmount = assetAmount.mul(postPrices[_seri]).div(series[_seri].price);\r\n        uint256 postRemain = assetAmount.sub(postAmount);\r\n\r\n        (uint256 shareStakeAmount, uint256 sharePurchaseAmount, uint256 shareAffiliateAmount, uint256 takeTokenAmount) = _buyAmount(series[_seri].seriType, postAmount);\r\n        _buyTransfer(series[_seri].seriType, _assetIndex, assetAmount, postRemain, shareStakeAmount, sharePurchaseAmount, shareAffiliateAmount, takeTokenAmount);\r\n\r\n        if (series[_seri].seriAssetRemain[_assetIndex] == 0) series[_seri].assetIndex.push(_assetIndex);\r\n        uint256 assetRemain = assetAmount.sub(postRemain).sub(shareAffiliateAmount).sub(takeTokenAmount);\r\n        if (series[_seri].seriType == 1) assetRemain = assetRemain.sub(shareStakeAmount).sub(sharePurchaseAmount);\r\n        _updateRemain(_seri, _assetIndex, assetRemain, _totalTicket);\r\n        uint256 rate = asset2USD(priceFeeds[_assetIndex]);\r\n        emit BuyTicket(rate, assetAmount);\r\n    }\r\n\r\n    function setAssets(\r\n        string[] memory _symbols,\r\n        address[] memory _bep20s,\r\n        AggregatorV3Interface[] memory _priceFeeds\r\n    ) public onlyOwner {\r\n        require(_symbols.length == _bep20s.length && _symbols.length == _priceFeeds.length, \"Length mismatch\");\r\n        for (uint256 i = 0; i < _symbols.length; i++) {\r\n            assets[_symbols[i]] = asset(_symbols[i], _bep20s[i], _priceFeeds[i]);\r\n        }\r\n        priceFeeds = _symbols;\r\n    }\r\n\r\n    function configSigner(address _signer) external onlySigner {\r\n        signer = _signer;\r\n    }\r\n\r\n    function configAddress(\r\n        address payable _stake,\r\n        address payable _purchase,\r\n        address payable _affiliateAddress,\r\n        address payable _operator,\r\n        address payable _postAddress,\r\n        address payable _carryOver,\r\n        address _initCarryOverAsset,\r\n        address _nft\r\n    ) external onlyOwner {\r\n        stake = _stake;\r\n        purchase = _purchase;\r\n        affiliateAddress = _affiliateAddress;\r\n        operator = _operator;\r\n        postAddress = _postAddress;\r\n        carryOver = _carryOver;\r\n        initCarryOverAsset = IBEP20(_initCarryOverAsset);\r\n        nft = NFT(_nft);\r\n    }\r\n\r\n    function config(\r\n        uint256 _expiredPeriod,\r\n        uint256 _share2Stake,\r\n        uint256 _share2Purchase,\r\n        uint256 _share2Affiliate,\r\n        uint256 _share2Operator,\r\n        uint256 _share2AffiliateCO,\r\n        uint256 _share2OperatorCO\r\n    ) external onlyOwner {\r\n        require(_share2Stake + _share2Purchase + _share2Affiliate + _share2Operator < 1000000, \"N: Invalid percent\");\r\n        require(_share2AffiliateCO + _share2OperatorCO < 1000000, \"C: Invalid percent\");\r\n        expiredPeriod = _expiredPeriod;\r\n        share2Stake = _share2Stake;\r\n        share2Purchase = _share2Purchase;\r\n        share2Affiliate = _share2Affiliate;\r\n        share2Operator = _share2Operator;\r\n        share2AffiliateCO = _share2AffiliateCO;\r\n        share2OperatorCO = _share2OperatorCO;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cryptoRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"BuyTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seri\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"CloseSeri\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seri\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWin\",\"type\":\"bool\"}],\"name\":\"OpenResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seri\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seriType\",\"type\":\"uint256\"}],\"name\":\"OpenSeri\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seri\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"turn\",\"type\":\"uint256\"}],\"name\":\"SetWinners\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"asset2USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountUsd\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"asset2USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountUsd\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seri\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_numberInfo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTicket\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"carryOver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seri\",\"type\":\"uint256\"}],\"name\":\"closeSeri\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiredPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_share2Stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_share2Purchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_share2Affiliate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_share2Operator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_share2AffiliateCO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_share2OperatorCO\",\"type\":\"uint256\"}],\"name\":\"config\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_stake\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_purchase\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_affiliateAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_postAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_carryOver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initCarryOverAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"configAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"configSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCarryOverSeri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSignTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentTurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiredPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"internalType\":\"struct LottoContract.asset\",\"name\":\"_asset\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceFeeds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seri\",\"type\":\"uint256\"}],\"name\":\"getSeriWinners\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seri\",\"type\":\"uint256\"}],\"name\":\"getSeriesAssets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seri\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTickets\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seri\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_buyTickets\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256\",\"name\":\"_totalTicket\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_assets\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_turn\",\"type\":\"uint256\"}],\"name\":\"getbytesDataSetWinners\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initCarryOverAsset\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"metadatas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract NFT\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seri\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isWin\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_totalWin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_result\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"openResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seri\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_postPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max2sale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initPrize\",\"type\":\"uint256\"}],\"name\":\"openSeri\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seri\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_buyTickets\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256\",\"name\":\"_totalTicket\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_assets\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_turn\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitSetWinners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"postAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceFeeds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seri\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_asset\",\"type\":\"uint256\"}],\"name\":\"seriAssetRemain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seriExpiredPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"series\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldTicket\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"takeAssetExpired\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"max2sale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seriType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initPrize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initPrizeTaken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winInitPrize\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_bep20s\",\"type\":\"address[]\"},{\"internalType\":\"contract AggregatorV3Interface[]\",\"name\":\"_priceFeeds\",\"type\":\"address[]\"}],\"name\":\"setAssets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seri\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_buyTickets\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256\",\"name\":\"_totalTicket\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_assets\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_turn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"setWinners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"share2Affiliate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"share2AffiliateCO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"share2Operator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"share2OperatorCO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"share2Purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"share2Stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"takePrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seri\",\"type\":\"uint256\"}],\"name\":\"takePrizeExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seri\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"ticket2Asset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountUsd\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seri\",\"type\":\"uint256\"}],\"name\":\"totalPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_prize\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTicketsWon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTicketsWonb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LottoContract", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://eafbdfa0755e6315f3a60b9d2a686bab6c2f47a77619631a9742f7664b9fe905"}