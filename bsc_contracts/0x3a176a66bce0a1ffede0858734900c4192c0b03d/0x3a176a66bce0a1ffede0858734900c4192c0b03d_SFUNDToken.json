{"SourceCode": "// SPDX-License-Identifier: licensed\r\npragma solidity ^0.8.23;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address ) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/26181\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface SFUNDDeployer {\r\n  // @dev Returns the amount of tokens in existence.\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  // @dev Returns the token decimals.\r\n  function decimals() external view returns (uint8);\r\n\r\n  // @dev Returns the token symbol.\r\n  function symbol() external view returns (string memory);\r\n\r\n  //@dev Returns the token name.\r\n  function name() external view returns (string memory);\r\n\r\n  //@dev Returns the bep token owner.\r\n  function getOwner() external view returns (address);\r\n\r\n  //@dev Returns the amount of tokens owned by `account`.\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  //@dev Emitted when `value` tokens are moved from one account (`from`) to  another (`to`). Note that `value` may be zero.\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  //@dev Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ncontract SFUNDToken is SFUNDDeployer, Context, Ownable {\r\n  \r\n    // common addresses\r\n    address private _owner;\r\n    address private SFUNDTeam;\r\n    address private CharitySFUND;\r\n    \r\n    // token liquidity metadata\r\n    uint public override totalSupply;\r\n    uint8 public override decimals = 9;\r\n    \r\n    mapping(address => uint) public balances;\r\n    \r\n    mapping(address => mapping(address => uint)) public allowances;\r\n    \r\n    // token title metadata\r\n    string public override name = \"SFUND2.0\";\r\n    string public override symbol = \"SFUND2.0\";\r\n    string public constant SFUNDContractuniqueness = \"Unique contract\";\r\n    string public constant SFUNDblog = \"https://SFUND.blog/\";\r\n    string public constant SFUNDtelegram = \"https://t.me/SFUND\";\r\n    string public constant SFUNDaudited = \"SFUND is audited by: https://www.certik.com/\";\r\n    address private marketingAddress = 0x8894E0a0c962CB723c1976a4421c95949bE2D4E3;\r\n    string public SFUNDwebsitess = \"https://SFUND.io/\";\r\n            function getSFUNDwebsitess() public view returns (string memory) {\r\n        return SFUNDwebsitess;\r\n    }\r\n    // EVENTS\r\n    // (now in interface) event Transfer(address indexed from, address indexed to, uint value);\r\n    // (now in interface) event Approval(address indexed owner, address indexed spender, uint value);\r\n    \r\n    // On init of contract we're going to set the admin and give them all tokens.\r\n    constructor(uint totalSupplyValue, address SFUNDTeamAddress, address CharitySFUNDAddress) {\r\n        // set total supply\r\n        totalSupply = totalSupplyValue;\r\n        \r\n        // designate addresses\r\n        _owner = msg.sender;\r\n        SFUNDTeam = SFUNDTeamAddress;\r\n        CharitySFUND = CharitySFUNDAddress;\r\n        \r\n        // split the tokens according to agreed upon percentages\r\n        balances[SFUNDTeam] =  totalSupply * 4 / 100;\r\n        balances[CharitySFUND] = totalSupply * 4 / 100;\r\n        \r\n        balances[_owner] = totalSupply * 92 / 100;\r\n    }\r\n    \r\n    // Get the address of the token's owner\r\n    function getOwner() public view override returns(address) {\r\n        return _owner;\r\n    }\r\n    \r\n    // Get the address of the token's SFUNDTeam pot\r\n    function getDeveloper() public view returns(address) {\r\n        return SFUNDTeam;\r\n    }\r\n    \r\n    // Get the address of the token's founder pot\r\n    function getFounder() public view returns(address) {\r\n        return CharitySFUND;\r\n    }\r\n    \r\n    // Get the balance of an account\r\n    function balanceOf(address account) public view override returns(uint) {\r\n        return balances[account];\r\n    }\r\n    \r\n    // Transfer balance from one user to another\r\n    function transfer(address to, uint value) public override returns(bool) {\r\n        require(value > 0, \"Transfer value has to be higher than 0.\");\r\n        require(balanceOf(msg.sender) >= value, \"Balance is too low to make transfer.\");\r\n        \r\n        //withdraw the taxed and burned percentages from the total value\r\n        uint taxTBD = value * 0 / 100;\r\n        uint burnTBD = value * 0 / 100;\r\n        uint valueAfterTaxAndBurn = value - taxTBD - burnTBD;\r\n        \r\n        // perform the transfer operation\r\n        balances[to] += valueAfterTaxAndBurn;\r\n        balances[msg.sender] -= value;\r\n        \r\n        emit Transfer(msg.sender, to, value);\r\n        \r\n        // finally, we burn and tax the extras percentage\r\n        balances[_owner] += taxTBD + burnTBD;\r\n        _burn(_owner, burnTBD);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // approve a specific address as a spender for your account, with a specific spending limit\r\n    function approve(address spender, uint value) public override returns(bool) {\r\n        allowances[msg.sender][spender] = value; \r\n        \r\n        emit Approval(msg.sender, spender, value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // allowance\r\n    function allowance(address owner , address spender) public view  returns(uint) {\r\n       return allowances[owner][spender];\r\n }\r\n    \r\n    // an approved spender can transfer currency from one account to another up to their spending limit\r\n    function transferFrom(address from, address to, uint value) public override returns(bool) {\r\n        require(allowances[from][msg.sender] > 0, \"No Allowance for this address.\");\r\n        require(allowances[from][msg.sender] >= value, \"Allowance too low for transfer.\");\r\n        require(balances[from] >= value, \"Balance is too low to make transfer.\");\r\n        \r\n        balances[to] += value;\r\n        balances[from] -= value;\r\n        \r\n        emit Transfer(from, to, value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // function to allow users to burn currency from their account\r\n    function burn(uint256 amount) public returns(bool) {\r\n        _burn(msg.sender, amount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // intenal functions\r\n    \r\n    // burn amount of currency from specific account\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"You can't burn from zero address.\");\r\n        require(balances[account] >= amount, \"Burn amount exceeds balance at address.\");\r\n    \r\n        balances[account] -= amount;\r\n        totalSupply -= amount;\r\n        \r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupplyValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"SFUNDTeamAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"CharitySFUNDAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SFUNDContractuniqueness\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SFUNDaudited\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SFUNDblog\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SFUNDtelegram\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SFUNDwebsitess\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeveloper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFounder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSFUNDwebsitess\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SFUNDToken", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000001a2c1839d35e2969a8d82a73a83483a818c33dca00000000000000000000000061c6aeaf955b2338066d7001bc03803a801d8dd7", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a5bb6ce468d433b41a3a49da63a3f7f651883d65b2ee9c8d03b0e5785a311ba8"}