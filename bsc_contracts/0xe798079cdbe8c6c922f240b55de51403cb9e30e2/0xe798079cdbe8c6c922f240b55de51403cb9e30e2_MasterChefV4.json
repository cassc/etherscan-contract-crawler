{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IERC721 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint balance);\r\n    function ownerOf(uint tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint tokenId) external;\r\n    function transferFrom(address from, address to, uint tokenId) external;\r\n    function approve(address to, uint tokenId) external;\r\n    function getApproved(uint tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint tokenId, bytes calldata data) external;\r\n}\r\n\r\ninterface IEpicHeroNFT is IERC721{\r\n    function tokenOfOwnerByIndex(address owner, uint index) external view returns (uint tokenId);\r\n    function getHero(uint tokenId) external view returns (uint8 level, uint8 rarity);\r\n}\r\n\r\ninterface IReferral {\r\n    function recordReferral(address user, address referrer) external;\r\n    function recordReferralCommission(address referrer, uint256 commission) external;\r\n    function getReferrer(address user) external view returns (address);\r\n}\r\n\r\ninterface IStrategy {\r\n    function calculateShares(address _user, uint256[] memory _tokenIds) external view returns (uint256);\r\n    function calculateShares2(address _user, uint256[] memory _tokenIds) external view returns (uint256);\r\n}\r\n\r\ninterface ITreasury {\r\n    function claimTokens(address _token, uint256 _amount, address _receiver) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n    unchecked {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n        uint256 newAllowance = oldAllowance - value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMathExt {\r\n    function add128(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        uint128 c = a + b;\r\n        require(c >= a, \"uint128: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub128(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        require(b <= a, \"uint128: subtraction overflow\");\r\n        uint128 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        uint64 c = a + b;\r\n        require(c >= a, \"uint64: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        require(b <= a, \"uint64: subtraction overflow\");\r\n        uint64 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function safe128(uint256 a) internal pure returns(uint128) {\r\n        require(a < 0x0100000000000000000000000000000000, \"uint128: number overflow\");\r\n        return uint128(a);\r\n    }\r\n\r\n    function safe64(uint256 a) internal pure returns(uint64) {\r\n        require(a < 0x010000000000000000, \"uint64: number overflow\");\r\n        return uint64(a);\r\n    }\r\n\r\n    function safe32(uint256 a) internal pure returns(uint32) {\r\n        require(a < 0x0100000000, \"uint32: number overflow\");\r\n        return uint32(a);\r\n    }\r\n\r\n    function safe16(uint256 a) internal pure returns(uint16) {\r\n        require(a < 0x010000, \"uint32: number overflow\");\r\n        return uint16(a);\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract Auth {\r\n    address owner;\r\n    mapping (address => bool) private authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender)); _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender)); _;\r\n    }\r\n\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n        emit Authorized(adr);\r\n    }\r\n\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n        emit Unauthorized(adr);\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n    event Authorized(address adr);\r\n    event Unauthorized(address adr);\r\n}\r\n\r\ncontract MasterChefV4 is Auth, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public constant MAX_EPICHERO_PER_BLOCK = 2000 * 10 ** 18;\r\n    uint256 public constant BONUS_MULTIPLIER = 1;\r\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 365 days;\r\n    uint16 public constant MAXIMUM_REFERRAL_RATE = 1000;\r\n    uint16 public constant MAXIMUM_FEE_RATE = 9000;\r\n\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n        uint256 rewardLockedUp;\r\n        uint256 nextHarvestUntil;\r\n        uint256 countNft;\r\n        uint256 countNft2;\r\n        bool canDeposit;\r\n    }\r\n\r\n    struct PoolInfo {\r\n        address lpToken;\r\n        address lpToken2;\r\n        address strat;\r\n\r\n        uint256 allocPoint;\r\n        uint256 lastRewardBlock;\r\n        uint256 accEpicHeroPerShare;\r\n        uint16 depositFeeBP;\r\n        uint256 harvestInterval;\r\n        uint256 totalLp;\r\n        uint256 countNft;\r\n        uint256 countNft2;\r\n\r\n        uint8 maxNft;\r\n        bool paused;\r\n    }\r\n\r\n    struct NftOwner {\r\n        address addr;\r\n        uint256 pid;\r\n        uint64  index;\r\n    }\r\n\r\n    IERC20 public feeToken;\r\n    IERC20 public epicHero;\r\n    ITreasury treasury;\r\n    IReferral public referral;\r\n\r\n    uint16 public referralRate = 0;\r\n    uint16 public devFeeRate = 0;\r\n    uint16 public demiFeeDividend = 20;\r\n\r\n    uint256 public joinPoolFee = 1000 * 10 ** 18;\r\n\r\n    address public devAddress = 0x8E377Cc27aBfB273313791097bcCe590a84F1F97;\r\n    address public feeAddress = 0x618cBeb39560B08E820cbc47B3DE1028d3b75810;\r\n\r\n    PoolInfo[] public poolInfo;\r\n    \r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    mapping (address => uint256[]) _stakingHeroArray;\r\n    mapping (uint256 => NftOwner) _heroIdToOwnerAndIndex;\r\n\r\n    mapping (address => uint256[]) _stakingHeroArray2;\r\n    mapping (uint256 => NftOwner) _heroIdToOwnerAndIndex2;\r\n\r\n    uint256 public startBlock;\r\n    uint256 public totalAllocPoint = 0;\r\n    uint256 public totalLockedUpRewards;\r\n\r\n    uint256 public epicHeroPerBlock;\r\n\r\n    bool public isPaused = false;\r\n    \r\n    constructor(\r\n        address _epicHero,\r\n        address _feeToken,\r\n        address _treasury,\r\n        address _referral,\r\n        uint256 _epicHeroPerBlock\r\n    ) Auth(msg.sender) ReentrancyGuard(){\r\n        \r\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\r\n\r\n        epicHero = IERC20(_epicHero);\r\n        feeToken = IERC20(_feeToken);\r\n        treasury = ITreasury(_treasury);\r\n        referral = IReferral(_referral);\r\n\r\n        epicHeroPerBlock = _epicHeroPerBlock;\r\n    }\r\n    \r\n    // Set farming start, can call only once\r\n    function startFarming() public onlyOwner {\r\n        require(block.number < startBlock, \"Error::Farm started already\");\r\n\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            PoolInfo storage pool = poolInfo[pid];\r\n            pool.lastRewardBlock = block.number;\r\n        }\r\n\r\n        startBlock = block.number;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    function add(\r\n        uint256 _allocPoint,\r\n        address _lpToken,\r\n        address _lpToken2,\r\n        uint16 _depositFeeBP,\r\n        uint256 _harvestInterval,\r\n        uint8 _maxNft,\r\n        address _strat,\r\n        bool _paused,\r\n        bool _withUpdate\r\n    ) public authorized {\r\n        require(_depositFeeBP <= MAXIMUM_FEE_RATE, \"add: deposit fee too high\");\r\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \"add: invalid harvest interval\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(PoolInfo({\r\n        lpToken : _lpToken,\r\n        lpToken2 : _lpToken2,\r\n        strat: _strat,\r\n\r\n        allocPoint : _allocPoint,\r\n        lastRewardBlock : lastRewardBlock,\r\n        accEpicHeroPerShare : 0,\r\n        depositFeeBP : _depositFeeBP,\r\n        harvestInterval : _harvestInterval,\r\n        totalLp : 0,\r\n        countNft: 0,\r\n        countNft2: 0,\r\n        maxNft: _maxNft,\r\n        paused: _paused\r\n        }));\r\n    }\r\n\r\n    function set(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        uint16 _depositFeeBP,\r\n        uint256 _harvestInterval,\r\n        uint8 _maxNft,\r\n        address _strat,\r\n        bool _paused,\r\n        bool _withUpdate\r\n    ) public authorized {\r\n        require(_depositFeeBP <= MAXIMUM_FEE_RATE, \"set: deposit fee too high\");\r\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \"set: invalid harvest interval\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\r\n        poolInfo[_pid].harvestInterval = _harvestInterval;\r\n        poolInfo[_pid].paused = _paused;\r\n        poolInfo[_pid].maxNft = _maxNft;\r\n        poolInfo[_pid].strat = _strat;\r\n    }\r\n\r\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\r\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n    }\r\n\r\n    function pendingEpicHero(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accEpicHeroPerShare = pool.accEpicHeroPerShare;\r\n        uint256 lpSupply = pool.totalLp;\r\n\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 epicHeroReward = multiplier.mul(epicHeroPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n            accEpicHeroPerShare = accEpicHeroPerShare.add(epicHeroReward.mul(1e12).div(lpSupply));\r\n        }\r\n        uint256 pending = user.amount.mul(accEpicHeroPerShare).div(1e12).sub(user.rewardDebt);\r\n        return pending.add(user.rewardLockedUp);\r\n    }\r\n\r\n    function canHarvest(uint256 _pid, address _user) public view returns (bool) {\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        return block.number >= startBlock && block.timestamp >= user.nextHarvestUntil;\r\n    }\r\n\r\n    function getNftStaking(address _user) external view returns (uint256[] memory) {\r\n        return _stakingHeroArray[_user];\r\n    }\r\n\r\n    function getNftStaking2(address _user) external view returns (uint256[] memory) {\r\n        return _stakingHeroArray2[_user];\r\n    }\r\n\r\n    function getNftOwner(uint256 _heroId) external view returns (address){\r\n        return _heroIdToOwnerAndIndex[_heroId].addr;\r\n    }\r\n\r\n    function getNftOwner2(uint256 _heroId) external view returns (address){\r\n        return _heroIdToOwnerAndIndex2[_heroId].addr;\r\n    }\r\n\r\n    function countNftInPool(uint256 _pid, address _user) public view returns (uint256){\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        return user.countNft;\r\n    }\r\n\r\n    function countNftInPool2(uint256 _pid, address _user) public view returns (uint256){\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        return user.countNft2;\r\n    }\r\n\r\n    function getNftInPool(uint256 _pid, address _user) public view returns (uint256[] memory) {\r\n        uint256[] storage _heroIds = _stakingHeroArray[_user];\r\n\r\n        uint256[] memory ownerHeroIds = new uint256[](countNftInPool(_pid, _user));\r\n\r\n        uint256 index = 0;\r\n        for(uint i = 0; i < _heroIds.length; i++) {\r\n            NftOwner storage _nftOwner = _heroIdToOwnerAndIndex[_heroIds[i]];\r\n            if( _nftOwner.pid == _pid && _nftOwner.addr == _user ){\r\n                ownerHeroIds[index] = _heroIds[i];\r\n                index++;\r\n            }\r\n        }\r\n\r\n        return ownerHeroIds;\r\n    }\r\n\r\n    function getNftInPool2(uint256 _pid, address _user) public view returns (uint256[] memory) {\r\n        uint256[] storage _heroIds2 = _stakingHeroArray2[_user];\r\n\r\n        uint256[] memory ownerHeroIds2 = new uint256[](countNftInPool2(_pid, _user));\r\n\r\n        uint256 index = 0;\r\n        for(uint i = 0; i < _heroIds2.length; i++) {\r\n            NftOwner storage _nftOwner = _heroIdToOwnerAndIndex2[_heroIds2[i]];\r\n            if( _nftOwner.pid == _pid && _nftOwner.addr == _user ){\r\n                ownerHeroIds2[index] = _heroIds2[i];\r\n                index++;\r\n            }\r\n        }\r\n\r\n        return ownerHeroIds2;\r\n    }\r\n\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        uint256 totalReward = 0;\r\n\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            PoolInfo storage pool = poolInfo[pid];\r\n            if (block.number <= pool.lastRewardBlock) {\r\n                continue;\r\n            }\r\n\r\n            if (pool.totalLp == 0 || pool.allocPoint == 0) {\r\n                pool.lastRewardBlock = block.number;\r\n                continue;\r\n            }\r\n\r\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 epicHeroReward = multiplier.mul(epicHeroPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n\r\n            pool.accEpicHeroPerShare = pool.accEpicHeroPerShare.add(epicHeroReward.mul(1e12).div(pool.totalLp));\r\n            pool.lastRewardBlock = block.number;\r\n\r\n            totalReward.add(epicHeroReward.mul(devFeeRate).div(10000));\r\n        }\r\n        if(totalReward > 0){\r\n            safeEpicHeroTransfer(devAddress, totalReward);\r\n        }\r\n    }\r\n\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        if (pool.totalLp == 0 || pool.allocPoint == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 epicHeroReward = multiplier.mul(epicHeroPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n\r\n        pool.accEpicHeroPerShare = pool.accEpicHeroPerShare.add(epicHeroReward.mul(1e12).div(pool.totalLp));\r\n        pool.lastRewardBlock = block.number;\r\n\r\n        if(devFeeRate > 0){\r\n            safeEpicHeroTransfer(devAddress, epicHeroReward.mul(devFeeRate).div(10000));\r\n        }\r\n    }\r\n\r\n    function depositNFTs(uint256 _pid, uint256[] memory _heroIds, uint256[] memory _heroIds2, address _referrer) public nonReentrant {\r\n        require(block.number >= startBlock, \"MasterChef: Can not deposit before farm start\");\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        require(!isPaused && !pool.paused, \"Pool: Paused\");\r\n\r\n        if(_heroIds.length.add(_heroIds2.length) > 0){\r\n            require(user.countNft.add(user.countNft2).add(_heroIds.length).add(_heroIds2.length) <= pool.maxNft, \"Invalid maxNft\");\r\n            require(joinPoolFee == 0 || user.canDeposit, \"Join fee not paid\");\r\n        }\r\n\r\n        updatePool(_pid);\r\n\r\n        if (_heroIds.length > 0 && address(referral) != address(0) && _referrer != address(0) && _referrer != msg.sender) {\r\n            referral.recordReferral(msg.sender, _referrer);\r\n        }\r\n\r\n        payOrLockupPendingEpicHero(_pid);\r\n\r\n        if (pool.depositFeeBP > 0) {\r\n            uint256 depositFee = _heroIds.length.mul(pool.depositFeeBP).add( _heroIds2.length.mul(pool.depositFeeBP).div(demiFeeDividend) );\r\n            feeToken.safeTransferFrom(address(msg.sender), feeAddress, depositFee);\r\n        }\r\n\r\n        if (_heroIds.length > 0) {\r\n            IEpicHeroNFT nftContract = IEpicHeroNFT(pool.lpToken);\r\n\r\n            uint256[] storage heroIds = _stakingHeroArray[msg.sender];\r\n\r\n            for(uint i = 0; i < _heroIds.length; i++) {\r\n                (uint8 level, uint8 rarity) = nftContract.getHero(_heroIds[i]);\r\n\r\n                require(level > 0, \"Require higher level\");\r\n                require(rarity > 0, \"Require higher rarity\");\r\n\r\n                nftContract.safeTransferFrom(\r\n                    address(msg.sender),\r\n                    address(this),\r\n                    _heroIds[i]\r\n                );\r\n\r\n                _heroIdToOwnerAndIndex[_heroIds[i]] = NftOwner(msg.sender, _pid, SafeMathExt.safe64(heroIds.length));\r\n                heroIds.push(_heroIds[i]);\r\n            }\r\n\r\n            uint256 sharesAdded = IStrategy(pool.strat).calculateShares(msg.sender, _heroIds);\r\n\r\n            user.amount = user.amount.add(sharesAdded);\r\n            user.countNft = user.countNft.add(_heroIds.length);\r\n\r\n            pool.totalLp = pool.totalLp.add(sharesAdded);\r\n            pool.countNft = pool.countNft.add(_heroIds.length);\r\n        }\r\n\r\n        if (_heroIds2.length > 0) {\r\n            IEpicHeroNFT nftContract2 = IEpicHeroNFT(pool.lpToken2);\r\n\r\n            uint256[] storage heroIds2 = _stakingHeroArray2[msg.sender];\r\n\r\n            for(uint i = 0; i < _heroIds2.length; i++) {\r\n                (uint8 level, uint8 rarity) = nftContract2.getHero(_heroIds2[i]);\r\n\r\n                require(level > 0, \"Require higher level\");\r\n                require(rarity > 0, \"Require higher rarity\");\r\n\r\n                nftContract2.safeTransferFrom(\r\n                    address(msg.sender),\r\n                    address(this),\r\n                    _heroIds2[i]\r\n                );\r\n\r\n                _heroIdToOwnerAndIndex2[_heroIds2[i]] = NftOwner(msg.sender, _pid, SafeMathExt.safe64(heroIds2.length));\r\n                heroIds2.push(_heroIds2[i]);\r\n            }\r\n\r\n            uint256 sharesAdded2 = IStrategy(pool.strat).calculateShares2(msg.sender, _heroIds2);\r\n\r\n            user.amount = user.amount.add(sharesAdded2);\r\n            user.countNft2 = user.countNft2.add(_heroIds2.length);\r\n\r\n            pool.totalLp = pool.totalLp.add(sharesAdded2);\r\n            pool.countNft2 = pool.countNft2.add(_heroIds2.length);\r\n        }\r\n\r\n        user.rewardDebt = user.amount.mul(pool.accEpicHeroPerShare).div(1e12);\r\n        emit DepositNFT(msg.sender, _pid, _heroIds, _heroIds2);\r\n    }\r\n\r\n    function withdrawNFTs(uint256 _pid, uint256[] memory _heroIds, uint256[] memory _heroIds2) public nonReentrant{\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        require(user.countNft > 0 || user.countNft2 > 0, \"Withdraw: User nft not enough\");\r\n        require(pool.countNft > 0 || pool.countNft2 > 0, \"Withdraw: Pool nft not enough\");\r\n\r\n        updatePool(_pid);\r\n        payOrLockupPendingEpicHero(_pid);\r\n\r\n        if(_heroIds.length > 0){\r\n            uint256 sharesRemoved = IStrategy(pool.strat).calculateShares(msg.sender, _heroIds);\r\n\r\n            if (sharesRemoved > user.amount) {\r\n                user.amount = 0;\r\n            } else {\r\n                user.amount = user.amount.sub(sharesRemoved);\r\n            }\r\n\r\n            if(pool.totalLp > sharesRemoved){\r\n                pool.totalLp = pool.totalLp.sub(sharesRemoved);\r\n            }else{\r\n                pool.totalLp = 0;\r\n            }\r\n\r\n            if(pool.countNft > _heroIds.length){\r\n                pool.countNft = pool.countNft.sub(_heroIds.length);\r\n            }else{\r\n                pool.countNft = 0;\r\n            }\r\n\r\n            if(user.countNft > _heroIds.length){\r\n                user.countNft = user.countNft.sub(_heroIds.length);\r\n            }else{\r\n                user.countNft = 0;\r\n            }\r\n\r\n            uint256[] storage heroIds = _stakingHeroArray[msg.sender];\r\n            for(uint i = 0; i < _heroIds.length; i++) {\r\n                NftOwner storage _nftOwner = _heroIdToOwnerAndIndex[_heroIds[i]];\r\n                require(msg.sender == address(_nftOwner.addr), \"Invalid NFT owner\");\r\n                require(_pid == _nftOwner.pid, \"Invalid NFT pool\");\r\n\r\n                if(uint256(_nftOwner.index) != heroIds.length.sub(1)){\r\n                    heroIds[uint256(_nftOwner.index)] = heroIds[heroIds.length.sub(1)];\r\n                    _heroIdToOwnerAndIndex[heroIds[uint256(_nftOwner.index)]].index = _nftOwner.index;\r\n                }\r\n\r\n                heroIds.pop();\r\n\r\n                delete _heroIdToOwnerAndIndex[_heroIds[i]];\r\n\r\n                IEpicHeroNFT(pool.lpToken).transferFrom(\r\n                    address(this),\r\n                    address(msg.sender),\r\n                    _heroIds[i]\r\n                );\r\n            }\r\n        }\r\n\r\n        if(_heroIds2.length > 0){\r\n            uint256 sharesRemoved2 = IStrategy(pool.strat).calculateShares2(msg.sender, _heroIds2);\r\n\r\n            if (sharesRemoved2 > user.amount) {\r\n                user.amount = 0;\r\n            } else {\r\n                user.amount = user.amount.sub(sharesRemoved2);\r\n            }\r\n\r\n            if(pool.totalLp > sharesRemoved2){\r\n                pool.totalLp = pool.totalLp.sub(sharesRemoved2);\r\n            }else{\r\n                pool.totalLp = 0;\r\n            }\r\n\r\n            if(pool.countNft2 > _heroIds2.length){\r\n                pool.countNft2 = pool.countNft2.sub(_heroIds2.length);\r\n            }else{\r\n                pool.countNft2 = 0;\r\n            }\r\n\r\n            if(user.countNft2 > _heroIds2.length){\r\n                user.countNft2 = user.countNft2.sub(_heroIds2.length);\r\n            }else{\r\n                user.countNft2 = 0;\r\n            }\r\n\r\n            uint256[] storage heroIds2 = _stakingHeroArray2[msg.sender];\r\n            for(uint i = 0; i < _heroIds2.length; i++) {\r\n                NftOwner storage _nftOwner = _heroIdToOwnerAndIndex2[_heroIds2[i]];\r\n                require(msg.sender == address(_nftOwner.addr), \"Invalid NFT owner\");\r\n                require(_pid == _nftOwner.pid, \"Invalid NFT pool\");\r\n\r\n                if(uint256(_nftOwner.index) != heroIds2.length.sub(1)){\r\n                    heroIds2[uint256(_nftOwner.index)] = heroIds2[heroIds2.length.sub(1)];\r\n                    _heroIdToOwnerAndIndex2[heroIds2[uint256(_nftOwner.index)]].index = _nftOwner.index;\r\n                }\r\n\r\n                heroIds2.pop();\r\n\r\n                delete _heroIdToOwnerAndIndex2[_heroIds2[i]];\r\n\r\n                IEpicHeroNFT(pool.lpToken2).transferFrom(\r\n                    address(this),\r\n                    address(msg.sender),\r\n                    _heroIds2[i]\r\n                );\r\n            }\r\n        }\r\n\r\n        user.rewardDebt = user.amount.mul(pool.accEpicHeroPerShare).div(1e12);\r\n        emit WithdrawNFT(msg.sender, _pid, _heroIds, _heroIds2);\r\n    }\r\n\r\n    function joinPool(uint256 _pid) public nonReentrant{\r\n        require(block.number >= startBlock, \"MasterChef: Can not deposit before farm start\");\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        require(!isPaused && !pool.paused, \"Pool: Paused\");\r\n        require(!user.canDeposit,\"Already joined this pool\");\r\n\r\n        if(joinPoolFee > 0){\r\n            feeToken.safeTransferFrom(address(msg.sender), feeAddress, joinPoolFee);\r\n            user.canDeposit = true;\r\n        }\r\n\r\n        emit JoinPool(msg.sender, _pid);\r\n    }\r\n\r\n    function payOrLockupPendingEpicHero(uint256 _pid) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\r\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\r\n        }\r\n\r\n        uint256 pending = user.amount.mul(pool.accEpicHeroPerShare).div(1e12).sub(user.rewardDebt);\r\n\r\n        if (pending > 0) {\r\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\r\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\r\n        }\r\n    }\r\n\r\n    function claimPendingReward(uint256 _pid) public nonReentrant {\r\n        updatePool(_pid);\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\r\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\r\n        }\r\n\r\n        uint256 pending = user.amount.mul(pool.accEpicHeroPerShare).div(1e12).sub(user.rewardDebt);\r\n        if (canHarvest(_pid, msg.sender)) {\r\n            if (pending > 0 || user.rewardLockedUp > 0) {\r\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\r\n\r\n                // reset lockup\r\n                totalLockedUpRewards = totalLockedUpRewards.sub(user.rewardLockedUp);\r\n                user.rewardLockedUp = 0;\r\n                user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\r\n\r\n                // send rewards\r\n                safeEpicHeroTransfer(msg.sender, totalRewards);\r\n                payReferralCommission(msg.sender, totalRewards);\r\n            }\r\n        }\r\n\r\n        user.rewardDebt = user.amount.mul(pool.accEpicHeroPerShare).div(1e12);\r\n    }\r\n\r\n    function payReferralCommission(address _user, uint256 _pending) internal {\r\n        if (address(referral) != address(0) && referralRate > 0) {\r\n            address referrer = referral.getReferrer(_user);\r\n            uint256 commissionAmount = _pending.mul(referralRate).div(10000);\r\n\r\n            if (referrer != address(0) && commissionAmount > 0) {\r\n                safeEpicHeroTransfer(referrer, commissionAmount);\r\n                referral.recordReferralCommission(referrer, commissionAmount);\r\n                emit ReferralCommissionPaid(_user, referrer, commissionAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function safeEpicHeroTransfer(address _to, uint256 _amount) internal {\r\n        require(epicHero.balanceOf(address(treasury)) >= _amount,\"Treasury not enough _amount\");\r\n        treasury.claimTokens(address(epicHero), _amount, _to);\r\n    }\r\n\r\n    function setDevAddress(address _devAddress) public onlyOwner{\r\n        require(_devAddress != address(0), \"setDevAddress: ZERO\");\r\n        devAddress = _devAddress;\r\n    }\r\n\r\n    function setFeeAddress(address _feeAddress) public onlyOwner{\r\n        require(_feeAddress != address(0), \"setFeeAddress: ZERO\");\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    function setFeeToken(address _feeToken) public onlyOwner{\r\n        require(_feeToken != address(0), \"setFeeToken: ZERO\");\r\n        feeToken = IERC20(_feeToken);\r\n    }\r\n\r\n    function setTreasury(address _treasuryAddress) public onlyOwner{\r\n        require(_treasuryAddress != address(0), \"setTreasury: ZERO\");\r\n        treasury = ITreasury(_treasuryAddress);\r\n    }\r\n\r\n    function setReferral(address _referralAddress) public onlyOwner {\r\n        require(_referralAddress != address(0), \"setReferral: ZERO\");\r\n        referral = IReferral(_referralAddress);\r\n    }\r\n\r\n    function setReferralRate(uint16 _referralRate) public onlyOwner {\r\n        require(_referralRate <= MAXIMUM_REFERRAL_RATE, \"Invalid referralRate\");\r\n        referralRate = _referralRate;\r\n    }\r\n\r\n    function setDevFeeRate(uint16 _devFeeRate) public onlyOwner {\r\n        require(_devFeeRate <= MAXIMUM_FEE_RATE, \"Invalid devFeeRate\");\r\n        devFeeRate = _devFeeRate;\r\n    }\r\n\r\n    function setJoinPoolFee(uint256 _joinFee) public onlyOwner {\r\n        joinPoolFee = _joinFee;\r\n    }\r\n\r\n    function setPaused(bool value) external authorized {\r\n        require(value != isPaused, \"Same\");\r\n        isPaused = value;\r\n    }\r\n\r\n    function retrieveBNB(uint _amount) external onlyOwner{\r\n        uint balance = address(this).balance;\r\n\r\n        if(_amount > balance){\r\n            _amount = balance;\r\n        }\r\n\r\n        (bool success,) = payable(msg.sender).call{ value: _amount }(\"\");\r\n        require(success, \"Failed\");\r\n    }\r\n\r\n    function emergencyRetrieveTokens(address _token, uint _amount) external onlyOwner {\r\n        uint balance = IERC20(_token).balanceOf(address(this));\r\n\r\n        if(_amount > balance){\r\n            _amount = balance;\r\n        }\r\n\r\n        require(IERC20(_token).transfer(msg.sender, _amount), \"Transfer failed\");\r\n    }\r\n\r\n    function emergencyRetrieveNfts(address _ntfAddress, uint256[] memory _heroIds) external onlyOwner {\r\n        for (uint i = 0; i < _heroIds.length; i++) {\r\n            IEpicHeroNFT(_ntfAddress).safeTransferFrom(address(this), msg.sender, _heroIds[i]);\r\n        }\r\n    }\r\n\r\n    function emergencyRetrieveAllNfts(address _ntfAddress) external onlyOwner {\r\n        IEpicHeroNFT nftContract = IEpicHeroNFT(_ntfAddress);\r\n\r\n        uint256 balance = nftContract.balanceOf(address(this));\r\n        uint256[] memory heroIds = new uint256[](balance);\r\n\r\n        for (uint i = 0; i < balance; i++) {\r\n            heroIds[i] = nftContract.tokenOfOwnerByIndex(address(this), i);\r\n        }\r\n\r\n        for (uint i = 0; i < heroIds.length; i++) {\r\n            nftContract.safeTransferFrom(address(this), msg.sender, heroIds[i]);\r\n        }\r\n    }\r\n\r\n    function emergencyReturnAllNfts(address _ntfAddress) external onlyOwner {\r\n        IEpicHeroNFT nftContract = IEpicHeroNFT(_ntfAddress);\r\n\r\n        uint256 balance = nftContract.balanceOf(address(this));\r\n        uint256[] memory heroIds = new uint256[](balance);\r\n\r\n        for (uint i = 0; i < balance; i++) {\r\n            heroIds[i] = nftContract.tokenOfOwnerByIndex(address(this), i);\r\n        }\r\n\r\n        for (uint i = 0; i < heroIds.length; i++) {\r\n            NftOwner storage _nftOwner = _heroIdToOwnerAndIndex[heroIds[i]];\r\n            nftContract.safeTransferFrom(address(this), _nftOwner.addr, heroIds[i]);\r\n        }\r\n    }\r\n\r\n    function emergencyReturnAllNfts2(address _ntfAddress) external onlyOwner {\r\n        IEpicHeroNFT nftContract = IEpicHeroNFT(_ntfAddress);\r\n\r\n        uint256 balance = nftContract.balanceOf(address(this));\r\n        uint256[] memory heroIds = new uint256[](balance);\r\n\r\n        for (uint i = 0; i < balance; i++) {\r\n            heroIds[i] = nftContract.tokenOfOwnerByIndex(address(this), i);\r\n        }\r\n\r\n        for (uint i = 0; i < heroIds.length; i++) {\r\n            NftOwner storage _nftOwner = _heroIdToOwnerAndIndex2[heroIds[i]];\r\n            nftContract.safeTransferFrom(address(this), _nftOwner.addr, heroIds[i]);\r\n        }\r\n    }\r\n\r\n    function updateEmissionRate(uint256 _epicHeroPerBlock) external authorized {\r\n        require(_epicHeroPerBlock <= MAX_EPICHERO_PER_BLOCK, \"EPICHERO per block too high\");\r\n        massUpdatePools();\r\n\r\n        emit EmissionRateUpdated(msg.sender, epicHeroPerBlock, _epicHeroPerBlock);\r\n        epicHeroPerBlock = _epicHeroPerBlock;\r\n    }\r\n\r\n    function updateAllocPoint(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external authorized {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    function updatePoolPaused(uint256 _pid, bool _paused) external authorized {\r\n        require(poolInfo[_pid].paused != _paused,\"Same\");\r\n        poolInfo[_pid].paused = _paused;\r\n    }\r\n\r\n    function onERC721Received(address, address, uint, bytes calldata) public pure returns (bytes4) {\r\n        return 0x150b7a02;\r\n    }\r\n\r\n    event DepositNFT(address indexed user, uint256 indexed pid, uint256[] heroIds, uint256[] heroIds2);\r\n    event WithdrawNFT(address indexed user, uint256 indexed pid, uint256[] heroIds, uint256[] heroIds2);\r\n    event JoinPool(address indexed user, uint256 indexed pid);\r\n    event EmissionRateUpdated(address indexed caller, uint256 previousAmount, uint256 newAmount);\r\n    event ReferralCommissionPaid(address indexed user, address indexed referrer, uint256 commissionAmount);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_epicHero\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epicHeroPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"heroIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"heroIds2\",\"type\":\"uint256[]\"}],\"name\":\"DepositNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"EmissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"JoinPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commissionAmount\",\"type\":\"uint256\"}],\"name\":\"ReferralCommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"heroIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"heroIds2\",\"type\":\"uint256[]\"}],\"name\":\"WithdrawNFT\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_REFERRAL_RATE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_EPICHERO_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken2\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_maxNft\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_strat\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimPendingReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"countNftInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"countNftInPool2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"demiFeeDividend\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_heroIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_heroIds2\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"depositNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ntfAddress\",\"type\":\"address\"}],\"name\":\"emergencyRetrieveAllNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ntfAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_heroIds\",\"type\":\"uint256[]\"}],\"name\":\"emergencyRetrieveNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRetrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ntfAddress\",\"type\":\"address\"}],\"name\":\"emergencyReturnAllNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ntfAddress\",\"type\":\"address\"}],\"name\":\"emergencyReturnAllNfts2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epicHero\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epicHeroPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNftInPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNftInPool2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_heroId\",\"type\":\"uint256\"}],\"name\":\"getNftOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_heroId\",\"type\":\"uint256\"}],\"name\":\"getNftOwner2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNftStaking\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNftStaking2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingEpicHero\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accEpicHeroPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countNft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countNft2\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"maxNft\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referral\",\"outputs\":[{\"internalType\":\"contract IReferral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"retrieveBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_maxNft\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_strat\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_devFeeRate\",\"type\":\"uint16\"}],\"name\":\"setDevFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"}],\"name\":\"setFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_joinFee\",\"type\":\"uint256\"}],\"name\":\"setJoinPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralAddress\",\"type\":\"address\"}],\"name\":\"setReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_referralRate\",\"type\":\"uint16\"}],\"name\":\"setReferralRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedUpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"updateAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epicHeroPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"updatePoolPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countNft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countNft2\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canDeposit\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_heroIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_heroIds2\",\"type\":\"uint256[]\"}],\"name\":\"withdrawNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterChefV4", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "25000", "ConstructorArguments": "00000000000000000000000047cc5334f65611ea6be9e933c49485c88c17f5f0000000000000000000000000580de58c1bd593a43dadcf0a739d504621817c05000000000000000000000000952e14cefe00eb1c7142a4d5826918a43c0505ff00000000000000000000000054d2f6937546547e51d76a0f5be022370b0120fe00000000000000000000000000000000000000000000000000038d7ea4c68000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e1e4d50a38225e1f5a04f18ad8b7766c22a038d1da2528cf6e62037a807bfb93"}