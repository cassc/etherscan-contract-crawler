{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/IBEP20.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libs/SafeBEP20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeBEP20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeBEP20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeBEP20: BEP20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IAmiReferral {\r\n    /**\r\n     * @dev Record referral.\r\n     */\r\n    function recordReferral(address user, address referrer) external;\r\n\r\n    /**\r\n     * @dev Record referral commission.\r\n     */\r\n    function recordReferralCommission(address referrer, uint256 commission) external;\r\n\r\n    /**\r\n     * @dev Get the referrer address that referred the user.\r\n     */\r\n    function getReferrer(address user) external view returns (address);\r\n}\r\n\r\n\r\n\r\n// File: contracts/libs/SafeBEP20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AmiReferral is IAmiReferral, Ownable {\r\n    using SafeBEP20 for IBEP20;\r\n\r\n    mapping(address => bool) public operators;\r\n    mapping(address => address) public referrers; // user address => referrer address\r\n    mapping(address => uint256) public referralsCount; // referrer address => referrals count\r\n    mapping(address => uint256) public totalReferralCommissions; // referrer address => total referral commissions\r\n\r\n    event ReferralRecorded(address indexed user, address indexed referrer);\r\n    event ReferralCommissionRecorded(address indexed referrer, uint256 commission);\r\n    event OperatorUpdated(address indexed operator, bool indexed status);\r\n\r\n    modifier onlyOperator {\r\n        require(operators[msg.sender], \"Operator: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    function recordReferral(address _user, address _referrer) public override onlyOperator {\r\n        if (_user != address(0)\r\n            && _referrer != address(0)\r\n            && _user != _referrer\r\n            && referrers[_user] == address(0)\r\n        ) {\r\n            referrers[_user] = _referrer;\r\n            referralsCount[_referrer] += 1;\r\n            emit ReferralRecorded(_user, _referrer);\r\n        }\r\n    }\r\n\r\n\r\n   function recordReferralAdmin(address _user, address _referrer) public  onlyOwner {\r\n        if (_user != address(0)\r\n            && _referrer != address(0)\r\n            && _user != _referrer\r\n        ) {\r\n            referrers[_user] = _referrer;\r\n            referralsCount[_referrer] += 1;\r\n            emit ReferralRecorded(_user, _referrer);\r\n        }\r\n    }\r\n    function recordReferralCommission(address _referrer, uint256 _commission) public override onlyOperator {\r\n        if (_referrer != address(0) && _commission > 0) {\r\n            totalReferralCommissions[_referrer] += _commission;\r\n            emit ReferralCommissionRecorded(_referrer, _commission);\r\n        }\r\n    }\r\n\r\n    // Get the referrer address that referred the user\r\n    function getReferrer(address _user) public override view returns (address) {\r\n        return referrers[_user];\r\n    }\r\n\r\n    // Update the status of the operator\r\n    function updateOperator(address _operator, bool _status) external onlyOwner {\r\n        operators[_operator] = _status;\r\n        emit OperatorUpdated(_operator, _status);\r\n    }\r\n\r\n    // Owner can drain tokens that are sent here by mistake\r\n    function drainBEP20Token(IBEP20 _token, uint256 _amount, address _to) external onlyOwner {\r\n        _token.safeTransfer(_to, _amount);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// pragma solidity ^0.6.12;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract AmiStaking is Ownable{\r\n    \r\n    using SafeBEP20 for IBEP20;\r\n    using SafeMath for uint256;\r\n    \r\n    IBEP20 public amiToken;\r\n    \r\n    \r\n    AmiReferral public amiReferral;\r\n    uint256 public ANNUAL_PLAN_APY = 2400;\r\n    uint256 public HALF_YEAR_PLAN_APY = 1000;\r\n    uint256 public MULTIPLIER = 10000;\r\n    uint256 public firstLevelComission = 1000;\r\n    uint256 public secondLevelComission = 500;\r\n\r\n    uint256 private ONE_DAY = 1 days;\r\n    uint256 private ONE_MONTH = ONE_DAY.mul(30);\r\n    uint256 public halfYearDuration = uint256(6).mul(ONE_MONTH);\r\n    uint256 public annualDuration = uint256(12).mul(ONE_MONTH);\r\n    uint256 public totalDistributedInAnnual;\r\n    uint256 public totalDistributedInHalfYear;\r\n\r\n    \r\n    uint256 public maxReward =  40000000*1e18;\r\n    uint256 public rewardPaid;\r\n\r\n\tstruct Deposit {\r\n        bool isHalfYearly;\r\n\t\tuint256 amount;\r\n\t\tbool isFinshed;\r\n\t\tuint256 dividentWithdrawn;\r\n\t\tuint256 startDate;\r\n\t}\r\n\r\n  \r\n  \r\n  \tstruct User {\r\n\t\tDeposit[] deposits;\r\n\t\tuint256 checkpoint;\r\n\t}\r\n\r\n\r\n    event SetReferral(address user,address referrer,uint256 investmentAmount);\r\n    event RefComissionPaid(address user,address paidTo,uint256 amount,bool isFirstLevelComission);\r\n    event RewardPaid(address user,uint256 pendingReward,bool isAnnual);\r\n    event Withdraw(address user,uint256 depositId,uint256 amount);\r\n\r\n  \tmapping (address => User) public users;\r\n\r\n \r\n    mapping (address => uint256) public refEarnings;\r\n\r\n  \r\n    address public companyWallet;\r\n        \r\n        \r\n    \r\n    \r\n\r\n    \r\n    constructor(address _companyWallet,IBEP20 _amiToken) public {\r\n        companyWallet = _companyWallet;\r\n        amiToken = _amiToken;\r\n        amiReferral = new AmiReferral();\r\n        amiReferral.updateOperator(address(this),true);\r\n        amiReferral.transferOwnership(msg.sender);\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    function setAmiReferral(address addr) public onlyOwner{\r\n        amiReferral = AmiReferral(addr);\r\n    }\r\n    \r\n    function setCompanyWallet(address wallet) public onlyOwner{\r\n        companyWallet = wallet;\r\n    }\r\n     \r\n  \r\n    function setMaxReward(uint256 amount) public onlyOwner{\r\n        maxReward = amount;\r\n    }\r\n  \r\n    function getDepositLength(address user) public view returns(uint256){\r\n          return users[user].deposits.length;\r\n    }\r\n  \r\n  function getDeposit(address user,uint256 index) public view returns( \r\n        bool isHalfYearly,\r\n\t\tuint256 amount,\r\n\t\tbool isFinshed,\r\n\t\tuint256 dividentWithdrawn,\r\n\t\tuint256 startDate){\r\n\t\t    \r\n    Deposit storage deposit =  users[user].deposits[index];\r\n    return(\r\n          deposit.isHalfYearly,\r\n          deposit.amount,\r\n          deposit.isFinshed,\r\n          deposit.dividentWithdrawn,\r\n          deposit.startDate\r\n    );\r\n  }\r\n    \r\n    \r\n    function withdraw() public{\r\n        User storage user = users[msg.sender];\r\n        uint256 withdrawAmount = 0;\r\n        \r\n        \r\n        _claimReward(true,msg.sender);\r\n        _claimReward(false,msg.sender);\r\n\r\n        for(uint256 i = 0;i<user.deposits.length;i++){\r\n            \r\n           if(!user.deposits[i].isFinshed){\r\n                if(user.deposits[i].isHalfYearly){\r\n                    if(user.deposits[i].startDate.add(halfYearDuration) < block.timestamp){\r\n                        withdrawAmount = withdrawAmount.add(user.deposits[i].amount);\r\n                        user.deposits[i].isFinshed = true;\r\n                        emit Withdraw(msg.sender,i ,user.deposits[i].amount);\r\n                    }\r\n                }else{\r\n                       if(user.deposits[i].startDate.add(annualDuration) < block.timestamp){\r\n                           \r\n                            withdrawAmount = withdrawAmount.add(user.deposits[i].amount);\r\n                            user.deposits[i].isFinshed = true;\r\n                            emit Withdraw(msg.sender,i ,user.deposits[i].amount);\r\n                    }\r\n                }\r\n           }\r\n\r\n         \r\n        }\r\n        \r\n       if(withdrawAmount>0){\r\n            transferTokens(msg.sender,withdrawAmount);\r\n            users[msg.sender].checkpoint = block.timestamp;\r\n        }\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n     \r\n    \r\n    function preInvest(address _user,\r\n                        uint256 amount, bool isHalfYearly,\r\n                        address refAddress,uint256 checkpoint) public onlyOwner{\r\n        \r\n        User storage user  = users[_user];\r\n        setReferral(_user,refAddress);\r\n        Deposit memory deposit =   Deposit(isHalfYearly, amount,false, 0, checkpoint);\r\n        uint256 dividentWithdrawn = getPendingRewardByDeposit(deposit);\r\n        deposit.dividentWithdrawn = dividentWithdrawn;\r\n\t\tuser.deposits.push(deposit);\r\n\t\t\r\n        user.checkpoint = checkpoint;\r\n        \r\n\r\n    }\r\n    \r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function invest(uint256 amount, bool isHalfYearly,address refAddress) public{\r\n        amiToken.safeTransferFrom(msg.sender,address(this),amount);\r\n        User storage user  = users[msg.sender];\r\n        setReferral(msg.sender,refAddress);\r\n\t\tuser.deposits.push(Deposit(isHalfYearly, amount,false, 0, block.timestamp));\r\n        payReferralCommission(msg.sender,amount);\r\n        user.checkpoint = block.timestamp;\r\n    }\r\n    \r\n    function claimReward(bool isAnnual) public{\r\n         _claimReward(isAnnual,msg.sender);\r\n    }\r\n    \r\n    \r\n    \r\n    function _claimReward(bool isAnnual ,address _user) internal {\r\n        User storage user = users[_user];\r\n        uint256 pendingAmount = 0;\r\n        for(uint256 i = 0;i<user.deposits.length;i++){\r\n            \r\n            if(!user.deposits[i].isFinshed){\r\n                  uint256 _amount = getPendingRewardByDeposit(user.deposits[i]);\r\n                  if(isAnnual){\r\n                        if(!user.deposits[i].isHalfYearly){\r\n                            pendingAmount = pendingAmount.add(_amount);\r\n                            user.deposits[i].dividentWithdrawn = user.deposits[i].dividentWithdrawn.add(_amount);\r\n                            totalDistributedInAnnual = totalDistributedInAnnual.add(_amount);\r\n                        }\r\n                        \r\n                        \r\n                  }else{\r\n                        if(user.deposits[i].isHalfYearly){\r\n                            pendingAmount = pendingAmount.add(_amount);\r\n                            user.deposits[i].dividentWithdrawn = user.deposits[i].dividentWithdrawn.add(_amount);\r\n                            totalDistributedInHalfYear = totalDistributedInHalfYear.add(_amount);\r\n\r\n                        }\r\n                  }\r\n            }\r\n        \r\n        }\r\n        \r\n        if(pendingAmount>0){\r\n            require(rewardPaid.add(pendingAmount) < maxReward, \"max reward reached\");\r\n            transferTokens(msg.sender,pendingAmount);\r\n            emit RewardPaid(msg.sender,pendingAmount,isAnnual);\r\n            \r\n            users[msg.sender].checkpoint = block.timestamp;\r\n            rewardPaid = rewardPaid.add(pendingAmount);\r\n        }\r\n   \r\n    }\r\n    \r\n    function getPendingReward(address addr) public view returns(uint256,uint256){\r\n        User memory user = users[addr];\r\n        uint256 annualPlan = 0;\r\n        uint256 halfYearPlan = 0;\r\n\r\n        for(uint256 i = 0;i<user.deposits.length;i++){\r\n            \r\n            if(!user.deposits[i].isFinshed){\r\n                if(user.deposits[i].isHalfYearly){\r\n                    halfYearPlan = halfYearPlan.add(getPendingRewardByDeposit(user.deposits[i]));\r\n                }else{\r\n                    annualPlan = annualPlan.add(getPendingRewardByDeposit(user.deposits[i]));\r\n                }\r\n            }\r\n            \r\n\r\n        \r\n        }\r\n        \r\n        return (halfYearPlan,annualPlan);\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function getPendingRewardByDeposit(Deposit memory deposit) public view returns (uint256){\r\n        uint256 rate= deposit.isHalfYearly?HALF_YEAR_PLAN_APY: ANNUAL_PLAN_APY;\r\n        uint256 duration = deposit.isHalfYearly?halfYearDuration:annualDuration;\r\n        uint256 originalReward  = deposit.amount.mul(rate).div(MULTIPLIER);\r\n        uint256 timeSpent = block.timestamp.sub(deposit.startDate);\r\n        if(timeSpent > duration){\r\n            timeSpent = duration;\r\n        }\r\n        originalReward = originalReward.mul(timeSpent).div(duration);\r\n        return originalReward.sub(deposit.dividentWithdrawn);\r\n    }\r\n    \r\n    \r\n    function getReferral(address user) public view returns (address){\r\n        address addr = amiReferral.referrers(user);\r\n        if(addr == address(0)){\r\n            return companyWallet;\r\n        }\r\n        return addr;\r\n    }\r\n    \r\n    \r\n    function payReferralCommission(address user,uint256 amount) internal{\r\n        uint256 firstLComissionAmount = amount.mul(firstLevelComission).div(MULTIPLIER);\r\n        uint256 secondLComissionAmount = amount.mul(secondLevelComission).div(MULTIPLIER);\r\n        address firstLevelReferrer = getReferral(user);\r\n        address secondLevelReferrer = getReferral(firstLevelReferrer);\r\n\r\n        transferTokens(firstLevelReferrer,firstLComissionAmount);\r\n        refEarnings[firstLevelReferrer] =refEarnings[firstLevelReferrer].add(firstLComissionAmount);\r\n        refEarnings[secondLevelReferrer] =refEarnings[secondLevelReferrer].add(secondLComissionAmount);\r\n\r\n        transferTokens(secondLevelReferrer,secondLComissionAmount);\r\n        emit RefComissionPaid(user,firstLevelReferrer,firstLComissionAmount,true);\r\n        emit RefComissionPaid(user,secondLevelReferrer,secondLComissionAmount,false);\r\n\r\n\r\n    }\r\n\r\n    function setReferral(address user,address refferal) internal{\r\n        amiReferral.recordReferral(user,refferal);\r\n    }\r\n    \r\n    \r\n    \r\n    function transferTokens(address _user,uint256 amount) internal{\r\n        uint256 balance = amiToken.balanceOf(address(this));\r\n        if(balance < amount){\r\n            amiToken.transfer(_user,balance);\r\n\r\n        }else{\r\n            amiToken.transfer(_user,amount);\r\n        }\r\n    }\r\n    \r\n    \r\n    function safeGetAllTokens(address tokenAddress )public onlyOwner{\r\n        uint256 bal = IBEP20(tokenAddress).balanceOf(address(this));\r\n        IBEP20(tokenAddress).transfer(msg.sender,bal);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_companyWallet\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_amiToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paidTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFirstLevelComission\",\"type\":\"bool\"}],\"name\":\"RefComissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAnnual\",\"type\":\"bool\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentAmount\",\"type\":\"uint256\"}],\"name\":\"SetReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ANNUAL_PLAN_APY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HALF_YEAR_PLAN_APY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amiReferral\",\"outputs\":[{\"internalType\":\"contract AmiReferral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amiToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"annualDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isAnnual\",\"type\":\"bool\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstLevelComission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isHalfYearly\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFinshed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"dividentWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDepositLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isHalfYearly\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFinshed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"dividentWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"internalType\":\"struct AmiStaking.Deposit\",\"name\":\"deposit\",\"type\":\"tuple\"}],\"name\":\"getPendingRewardByDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halfYearDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isHalfYearly\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refAddress\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isHalfYearly\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"}],\"name\":\"preInvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"safeGetAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondLevelComission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAmiReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setCompanyWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributedInAnnual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributedInHalfYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AmiStaking", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000090166a0a5a79afb489540f6664d0fde3b9c5c9eb0000000000000000000000001ef72a1df5e4d165f84fc43b20d56caa7dad46e1", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://253f15ce11e3326acbb1d014f6dcc71de26b46ec94b2420946487e873995a339"}