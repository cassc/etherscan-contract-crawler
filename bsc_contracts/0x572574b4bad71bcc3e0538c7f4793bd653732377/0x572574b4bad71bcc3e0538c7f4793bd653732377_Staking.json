{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IStaking } from \\\"./interfaces/IStaking.sol\\\";\\nimport { IVesting } from \\\"./interfaces/IVesting.sol\\\";\\nimport { DataTypes } from \\\"./interfaces/DataTypes.sol\\\";\\nimport { Utils } from \\\"./libs/Utils.sol\\\";\\nimport { VestingWallet } from \\\"./Vesting.sol\\\";\\nimport { Treasury } from \\\"./Treasury.sol\\\";\\n\\ncontract Staking is IStaking, Ownable {\\n    using Utils for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant SECONDS_IN_WEEK = 7 days;\\n    uint256 public constant ACCUMULATOR_BASE = 10**15;\\n\\n    IERC20 public immutable reward;\\n\\n    mapping(IERC20 => address) public treasuries; // underlying asset => treasury\\n    mapping(IERC20 => uint256) public totalVirtualAmount; // underlying asset => total virtual amount\\n    mapping(IERC20 => uint256) public totalLockedValue; // underlying asset => total Locked Value\\n    mapping(IERC20 => uint256) public globalInterestAccumulator; // underlying asset => global interest accumulator\\n    mapping(address => VestingWallet) public wallets; // user => vesting wallet\\n    mapping(address => mapping(IERC20 => mapping(uint8 => DataTypes.StakingRecord[])))\\n        public staked; // user => asset => period => record\\n    mapping(address => uint256) public stakedCount;\\n\\n    constructor(IERC20 _reward) {\\n        reward = _reward;\\n    }\\n\\n    modifier checkAsset(IERC20 asset) {\\n        require(treasuries[asset] != address(0), \\\"staking/asset-not-supported\\\");\\n        _;\\n    }\\n\\n    modifier checkPeriod(uint8 weekPeriod) {\\n        require(isSupportedPeriod(weekPeriod), \\\"staking/period-not-supported\\\");\\n        _;\\n    }\\n\\n    function getTreasuryAddress(address asset, uint256 withdrawFactor)\\n        external\\n        view\\n        returns (address)\\n    {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0xff),\\n                address(this),\\n                keccak256(abi.encodePacked(address(asset))),\\n                keccak256(\\n                    abi.encodePacked(\\n                        type(Treasury).creationCode,\\n                        abi.encode(address(asset), reward, withdrawFactor)\\n                    )\\n                )\\n            )\\n        );\\n\\n        return address(uint160(uint256(hash)));\\n    }\\n\\n    function getWalletAddress(address owner) external view returns (address) {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0xff),\\n                address(this),\\n                keccak256(abi.encodePacked(reward, owner)),\\n                keccak256(\\n                    abi.encodePacked(\\n                        type(VestingWallet).creationCode,\\n                        abi.encode(address(this), reward, owner)\\n                    )\\n                )\\n            )\\n        );\\n\\n        return address(uint160(uint256(hash)));\\n    }\\n\\n    function whitelist(IERC20 asset, uint256 withdrawFactor) external onlyOwner {\\n        require(treasuries[asset] == address(0), \\\"staking/asset-exists\\\");\\n        bytes memory bytecode = abi.encodePacked(\\n            type(Treasury).creationCode,\\n            abi.encode(asset, reward, withdrawFactor)\\n        );\\n        bytes32 salt = keccak256(abi.encodePacked(asset));\\n        address treasury;\\n        assembly {\\n            treasury := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n\\n            if iszero(extcodesize(treasury)) {\\n                revert(0, 0)\\n            }\\n        }\\n        treasuries[asset] = treasury;\\n        emit TreasuryCreated(address(asset), treasury, withdrawFactor);\\n    }\\n\\n    function isSupportedPeriod(uint8 _weeks) public pure returns (bool) {\\n        return _weeks >= 1 && _weeks <= 52;\\n    }\\n\\n    function calculateVirtualAmount(uint256 amount, uint8 period) public pure returns (uint256) {\\n        return (amount * (period + 50)) / 51;\\n    }\\n\\n    function deposit(\\n        IERC20 asset,\\n        uint8 period,\\n        uint256 amount\\n    ) external checkAsset(asset) checkPeriod(period) {\\n        require(amount > 0, \\\"staking/invalid-amount\\\");\\n        asset.safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 virtualAmount = calculateVirtualAmount(amount, period);\\n        _updateGlobalAccumulatorsWithdrawInterest(asset, virtualAmount);\\n        totalLockedValue[asset] = totalLockedValue[asset] + amount;\\n        staked[msg.sender][asset][period].push(\\n            DataTypes.StakingRecord(\\n                amount,\\n                block.timestamp + (period * SECONDS_IN_WEEK),\\n                virtualAmount,\\n                globalInterestAccumulator[asset]\\n            )\\n        );\\n        stakedCount[msg.sender]++;\\n        emit Deposit(msg.sender, address(asset), period, amount);\\n    }\\n\\n    function withdraw(\\n        IERC20 asset,\\n        uint8 period,\\n        uint256 index\\n    ) external checkAsset(asset) checkPeriod(period) {\\n        uint256 length = staked[msg.sender][asset][period].length;\\n        require(index < length, \\\"staking/invalid-record-index\\\");\\n\\n        _updateGlobalAccumulatorsWithdrawInterest(asset, 0);\\n\\n        uint256 interestAmount = calculateInterestAmount(msg.sender, asset, period, index);\\n\\n        _withdrawInterest(_getOrCreateWallet(msg.sender), interestAmount);\\n\\n        staked[msg.sender][asset][period][index]\\n            .lastGlobalMultiplierValue = globalInterestAccumulator[asset];\\n\\n        if (staked[msg.sender][asset][period][index].unlockTimestamp.hasExpired()) {\\n            _withdrawBase(asset, period, index);\\n        }\\n    }\\n\\n    function calculateInterestAmount(\\n        address owner,\\n        IERC20 asset,\\n        uint8 period,\\n        uint256 index\\n    ) public view returns (uint256) {\\n        DataTypes.StakingRecord memory record = staked[owner][asset][period][index];\\n        return ((record.virtualAmount *\\n            (globalInterestAccumulator[asset] - record.lastGlobalMultiplierValue)) /\\n            ACCUMULATOR_BASE);\\n    }\\n\\n    function withdrawAll(IERC20 asset) external checkAsset(asset) {\\n        _updateGlobalAccumulatorsWithdrawInterest(asset, 0);\\n\\n        uint256 interestAmount = 0;\\n        for (uint8 periodIndex = 1; periodIndex <= 52; periodIndex++) {\\n            DataTypes.StakingRecord[] memory records = staked[msg.sender][asset][periodIndex];\\n            for (uint256 index = records.length; index > 0; index--) {\\n                interestAmount += calculateInterestAmount(\\n                    msg.sender,\\n                    asset,\\n                    periodIndex,\\n                    index - 1\\n                );\\n                \\n                staked[msg.sender][asset][periodIndex][index-1]\\n                    .lastGlobalMultiplierValue = globalInterestAccumulator[asset];\\n\\n                if (records[index - 1].unlockTimestamp.hasExpired()) {\\n                    _withdrawBase(asset, periodIndex, index - 1);\\n                }\\n            }\\n        }\\n\\n        require(interestAmount > 0, \\\"staking/no-deposits\\\");\\n\\n        _withdrawInterest(_getOrCreateWallet(msg.sender), interestAmount);\\n    }\\n\\n    function _getOrCreateWallet(address owner) internal returns (VestingWallet) {\\n        VestingWallet wallet = wallets[owner];\\n        if (address(wallet) != address(0)) {\\n            return wallet;\\n        }\\n\\n        bytes memory bytecode = abi.encodePacked(\\n            type(VestingWallet).creationCode,\\n            abi.encode(address(this), reward, owner)\\n        );\\n        bytes32 salt = keccak256(abi.encodePacked(reward, owner));\\n        assembly {\\n            wallet := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n\\n            if iszero(extcodesize(wallet)) {\\n                revert(0, 0)\\n            }\\n        }\\n        wallets[owner] = wallet;\\n        emit WalletCreated(owner, address(wallet));\\n        reward.approve(address(wallet), type(uint256).max);\\n        return wallet;\\n    }\\n\\n    function _withdrawBase(\\n        IERC20 asset,\\n        uint8 period,\\n        uint256 index\\n    ) internal {\\n        uint256 amount = staked[msg.sender][asset][period][index].amount;\\n        asset.safeTransfer(msg.sender, amount);\\n\\n        uint256 virtualAmount = calculateVirtualAmount(amount, period);\\n        totalLockedValue[asset] = totalLockedValue[asset] - amount;\\n        totalVirtualAmount[asset] = totalVirtualAmount[asset] - virtualAmount;\\n\\n        _remove(asset, period, index);\\n        stakedCount[msg.sender]--;\\n        emit Withdrawal(msg.sender, address(asset), period, amount);\\n    }\\n\\n    function _withdrawInterest(VestingWallet wallet, uint256 amount) internal {\\n        if (amount > 0) {\\n            wallet.vest(amount);\\n            emit InterestClaimed(msg.sender, address(wallet), amount);\\n        }\\n    }\\n\\n    function _remove(\\n        IERC20 asset,\\n        uint8 period,\\n        uint256 index\\n    ) internal {\\n        uint256 length = staked[msg.sender][asset][period].length;\\n        require(index < length, \\\"staking/array-out-of-bounds\\\");\\n\\n        // remove element from array\\n        if (index != length - 1) {\\n            staked[msg.sender][asset][period][index] = staked[msg.sender][asset][period][\\n                length - 1\\n            ];\\n        }\\n        staked[msg.sender][asset][period].pop();\\n    }\\n\\n    function _updateGlobalAccumulatorsWithdrawInterest(IERC20 asset, uint256 virtualAmount)\\n        internal\\n    {\\n        Treasury treasury = Treasury(treasuries[asset]);\\n        uint256 assetTotalVirtualAmount = totalVirtualAmount[asset];\\n        if (assetTotalVirtualAmount > 0) {\\n            // wait for accruing interest till staking contract is not empty\\n            uint256 interestAccrued = treasury.withdrawInterest();\\n            globalInterestAccumulator[asset] =\\n                globalInterestAccumulator[asset] +\\n                (interestAccrued * ACCUMULATOR_BASE) /\\n                assetTotalVirtualAmount;\\n        }\\n        totalVirtualAmount[asset] = assetTotalVirtualAmount + virtualAmount;\\n    }\\n\\n    function withdrawFromTreasury(\\n        IERC20 asset,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyOwner checkAsset(asset) {\\n        Treasury(treasuries[asset]).withdrawReward(recipient, amount);\\n    }\\n\\n    function getAllUsersPositions(address user, IERC20 asset)\\n        external\\n        view\\n        checkAsset(asset)\\n        returns (DataTypes.StakingState[] memory data)\\n    {\\n        uint256 userStakedCount = stakedCount[user];\\n        data = new DataTypes.StakingState[](userStakedCount);\\n\\n        if (userStakedCount == 0) {\\n            return data;\\n        }\\n\\n        uint256 index = 0;\\n        for (uint8 period = 1; period <= 52; period++) {\\n            DataTypes.StakingRecord[] memory records = staked[user][asset][period];\\n            for (uint256 recordIndex = 0; recordIndex < records.length; recordIndex++) {\\n                DataTypes.StakingRecord memory record = records[recordIndex];\\n                uint256 rewardsAccrued = calculateInterestAmount(user, asset, period, recordIndex);\\n                data[index] = DataTypes.StakingState(\\n                    address(asset),\\n                    period,\\n                    uint32(record.unlockTimestamp - (period * SECONDS_IN_WEEK)),\\n                    uint32(record.unlockTimestamp),\\n                    record.amount,\\n                    rewardsAccrued,\\n                    recordIndex\\n                );\\n                index++;\\n            }\\n        }\\n\\n        return data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IStaking {\\n    event Deposit(\\n        address indexed user,\\n        address indexed asset,\\n        uint8 indexed period,\\n        uint256 amount\\n    );\\n    event Withdrawal(\\n        address indexed user,\\n        address indexed asset,\\n        uint8 indexed period,\\n        uint256 amount\\n    );\\n    event InterestClaimed(address indexed user, address indexed wallet, uint256 amount);\\n\\n    event TreasuryCreated(address indexed asset, address indexed treasury, uint256 withdrawFactor);\\n    event WalletCreated(address indexed user, address indexed wallet);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IVesting {\\n    event VestingStarted(address indexed user, uint256 amount);\\n    event VestingEnded(address indexed user, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface DataTypes {\\n    struct StakingRecord {\\n        uint256 amount;\\n        uint256 unlockTimestamp;\\n        uint256 virtualAmount;\\n        uint256 lastGlobalMultiplierValue;\\n    }\\n\\n    struct VestingRecord {\\n        uint256 amount;\\n        uint256 unlockTimestamp;\\n    }\\n\\n    struct VestingState {\\n        uint32 startTime;\\n        uint32 endTime;\\n        uint256 amount;\\n        uint256 index;\\n    }\\n\\n    struct StakingState {\\n        address asset;\\n        uint8 period;\\n        uint32 startTime;\\n        uint32 endTime;\\n        uint256 amountStaked;\\n        uint256 amountClaimable;\\n        uint256 index;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nlibrary Utils {\\n    function hasExpired(uint256 timestamp) internal view returns (bool) {\\n        return block.timestamp >= timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IVesting } from \\\"./interfaces/IVesting.sol\\\";\\nimport { DataTypes } from \\\"./interfaces/DataTypes.sol\\\";\\nimport { Utils } from \\\"./libs/Utils.sol\\\";\\n\\ncontract VestingWallet is IVesting {\\n    using Utils for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant SECONDS_PER_YEAR = 365 days;\\n\\n    IERC20 public immutable reward;\\n    address public immutable staking;\\n    address public immutable owner;\\n    DataTypes.VestingRecord[] public vested;\\n\\n    constructor(\\n        address _staking,\\n        IERC20 _reward,\\n        address _owner\\n    ) {\\n        staking = _staking;\\n        reward = _reward;\\n        owner = _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"vesting/not-owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyStaking() {\\n        require(msg.sender == staking, \\\"vesting/not-staking\\\");\\n        _;\\n    }\\n\\n    function vest(uint256 amount) external onlyStaking {\\n        require(amount > 0, \\\"vesting/invalid-amount\\\");\\n        reward.safeTransferFrom(msg.sender, address(this), amount);\\n        vested.push(DataTypes.VestingRecord(amount, block.timestamp + SECONDS_PER_YEAR)); // create records\\n        emit VestingStarted(owner, amount);\\n    }\\n\\n    function claim(uint256 index) external onlyOwner {\\n        require(vested[index].unlockTimestamp.hasExpired(), \\\"vesting/claim-not-eligible\\\");\\n        _claim(index);\\n    }\\n\\n    function claimAll() external onlyOwner {\\n        DataTypes.VestingRecord[] memory records = vested;\\n        require(records.length > 0, \\\"vesting/no-records\\\");\\n\\n        for (uint256 idx = records.length; idx > 0; idx--) {\\n            if (records[idx - 1].unlockTimestamp.hasExpired()) {\\n                _claim(idx - 1);\\n            }\\n        }\\n    }\\n\\n    function getVestingRecordsCount() external view returns (uint256) {\\n        return vested.length;\\n    }\\n\\n    function getVestingRecords() external view returns (DataTypes.VestingState[] memory data) {\\n        data = new DataTypes.VestingState[](vested.length);\\n        for (uint256 index = 0; index < vested.length; index++) {\\n            data[index] = DataTypes.VestingState(\\n                uint32(vested[index].unlockTimestamp - SECONDS_PER_YEAR),\\n                uint32(vested[index].unlockTimestamp),\\n                vested[index].amount,\\n                index\\n            );\\n        }\\n        return data;\\n    }\\n\\n    function _claim(uint256 index) internal {\\n        DataTypes.VestingRecord memory record = vested[index];\\n        reward.safeTransfer(owner, record.amount);\\n        _remove(index);\\n        emit VestingEnded(owner, record.amount);\\n    }\\n\\n    function _remove(uint256 index) internal {\\n        uint256 length = vested.length;\\n        require(index < length, \\\"vesting/array-out-of-bounds\\\");\\n\\n        // remove element from array\\n        if (index != length - 1) {\\n            vested[index] = vested[length - 1];\\n        }\\n        vested.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Treasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract Treasury is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant WITHDRAWAL_FACTOR_BASE = 10**9;\\n\\n    IERC20 public immutable asset;\\n    IERC20 public immutable reward;\\n\\n    uint256 public immutable withdrawalFactorPerBlock;\\n    uint256 public lastWithdrawalBlock;\\n\\n    constructor(\\n        IERC20 _asset,\\n        IERC20 _reward,\\n        uint256 _withdrawalFactor\\n    ) {\\n        asset = _asset;\\n        reward = _reward;\\n        require(_withdrawalFactor < WITHDRAWAL_FACTOR_BASE, \\\"treasury/incorrect-withdrawal-factor\\\");\\n        withdrawalFactorPerBlock = _withdrawalFactor;\\n        lastWithdrawalBlock = block.number;\\n        // Ownership should be transfered to staking contract during deployment\\n    }\\n\\n    function withdrawReward(address recipient, uint256 amount) external onlyOwner {\\n        uint256 balance = reward.balanceOf(address(this));\\n        require(amount <= balance, \\\"treasury/invalid-balance\\\");\\n        reward.safeTransfer(recipient, amount);\\n    }\\n\\n    function withdrawInterest() external onlyOwner returns (uint256) {\\n        if (block.number == lastWithdrawalBlock) {\\n            return 0;\\n        }\\n        uint256 blocksPassed = block.number - lastWithdrawalBlock;\\n        uint256 interestFactor = withdrawalFactorPerBlock * blocksPassed;\\n        uint256 availableAmount = reward.balanceOf(address(this));\\n        uint256 amountToWithdraw = (availableAmount * interestFactor) / (WITHDRAWAL_FACTOR_BASE+interestFactor);\\n        reward.safeTransfer(msg.sender, amountToWithdraw);\\n        lastWithdrawalBlock = block.number;\\n        return amountToWithdraw;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_reward\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"period\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InterestClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFactor\",\"type\":\"uint256\"}],\"name\":\"TreasuryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"period\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCUMULATOR_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"period\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"calculateInterestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"period\",\"type\":\"uint8\"}],\"name\":\"calculateVirtualAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"period\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAllUsersPositions\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"period\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.StakingState[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFactor\",\"type\":\"uint256\"}],\"name\":\"getTreasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"globalInterestAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_weeks\",\"type\":\"uint8\"}],\"name\":\"isSupportedPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"virtualAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastGlobalMultiplierValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLockedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalVirtualAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"treasuries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"contract VestingWallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFactor\",\"type\":\"uint256\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"period\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000475bfaa1848591ae0e6ab69600f48d828f61a80e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}